------------------------------------------------------------------------
r288 | ka_shrinivaasan | 2013-09-30 18:57:45 +0530 (Mon, 30 Sep 2013) | 3 lines

test output


------------------------------------------------------------------------
r287 | ka_shrinivaasan | 2013-09-30 18:56:48 +0530 (Mon, 30 Sep 2013) | 3 lines

test output


------------------------------------------------------------------------
r286 | ka_shrinivaasan | 2013-09-30 18:55:47 +0530 (Mon, 30 Sep 2013) | 3 lines

test output


------------------------------------------------------------------------
r285 | ka_shrinivaasan | 2013-09-30 18:50:12 +0530 (Mon, 30 Sep 2013) | 5 lines

Updated staging script and VIRGO memory pooling driver with lots of bugfixes ,new functions for parameter
parsing and minimum working virgo_malloc from telnet (test output logs in test_logs/)



------------------------------------------------------------------------
r284 | ka_shrinivaasan | 2013-09-30 11:21:54 +0530 (Mon, 30 Sep 2013) | 3 lines

Updated ProductOwnerProfile for VIRGO


------------------------------------------------------------------------
r283 | ka_shrinivaasan | 2013-09-30 11:20:53 +0530 (Mon, 30 Sep 2013) | 3 lines

Updated staging.sh script


------------------------------------------------------------------------
r282 | ka_shrinivaasan | 2013-09-27 20:18:29 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated virgo_mempool.h header file for datatype to store memory pooling command parameters after parsing


------------------------------------------------------------------------
r281 | ka_shrinivaasan | 2013-09-27 20:13:36 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r280 | ka_shrinivaasan | 2013-09-27 20:09:21 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated Autogenerated Module.symvers


------------------------------------------------------------------------
r279 | ka_shrinivaasan | 2013-09-27 20:08:25 +0530 (Fri, 27 Sep 2013) | 4 lines

Updated VIRGO Memory Pooling Driver with newly added 
Parser function for parsing VIRGO memory pooling commands sent from remote syscall client


------------------------------------------------------------------------
r278 | ka_shrinivaasan | 2013-09-27 20:04:53 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated virgo_cloud_mempool_kernelspace.ko


------------------------------------------------------------------------
r277 | ka_shrinivaasan | 2013-09-27 20:03:48 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated VIRGO kernel upcall plugin for mempool


------------------------------------------------------------------------
r276 | ka_shrinivaasan | 2013-09-27 20:01:00 +0530 (Fri, 27 Sep 2013) | 5 lines

Rewritten virgo_cloud_mempool.c that has the userspace implementations of
virgo_cloud_malloc(), virgo_cloud_set(), virgo_cloud_get() and virgo_cloud_free() and 
newly implemented command parser function and toAddress() function


------------------------------------------------------------------------
r275 | ka_shrinivaasan | 2013-09-27 19:58:11 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated autogenerated virgo_cloudexec_mempool.mod.c


------------------------------------------------------------------------
r274 | ka_shrinivaasan | 2013-09-27 19:57:01 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated virgo_cloudexec_mempool.ko


------------------------------------------------------------------------
r273 | ka_shrinivaasan | 2013-09-27 19:55:59 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated autogenerated virgo_cloud_mempool_kernelspace.mod.c


------------------------------------------------------------------------
r272 | ka_shrinivaasan | 2013-09-27 19:54:47 +0530 (Fri, 27 Sep 2013) | 4 lines

Kern.log for VIRGO Memory Pooling Syscall and Driver Test
that shows an NXProtected error during testing


------------------------------------------------------------------------
r271 | ka_shrinivaasan | 2013-09-27 19:51:21 +0530 (Fri, 27 Sep 2013) | 3 lines

Changed the VIRGO Memory Pooling Driver listen port to 30000 from 10000


------------------------------------------------------------------------
r270 | ka_shrinivaasan | 2013-09-27 12:35:26 +0530 (Fri, 27 Sep 2013) | 4 lines

test_virgo_clone end to end test on kernelspace virgo cloudexec driver after recent
code revisions for Memory pooling driver


------------------------------------------------------------------------
r269 | ka_shrinivaasan | 2013-09-27 12:32:47 +0530 (Fri, 27 Sep 2013) | 3 lines

VIRGO cloudexec mempool driver initialization test kern.log


------------------------------------------------------------------------
r268 | ka_shrinivaasan | 2013-09-26 12:52:14 +0530 (Thu, 26 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r267 | ka_shrinivaasan | 2013-09-26 12:48:24 +0530 (Thu, 26 Sep 2013) | 3 lines

Bash script for VIRGO clouldexec cpupooling driver standalone build


------------------------------------------------------------------------
r266 | ka_shrinivaasan | 2013-09-26 12:46:05 +0530 (Thu, 26 Sep 2013) | 5 lines

Renamed variables specific to memory pooling to remove circular dependency in standalone driver build
and also changed parameter name passed in to kernelspace execution mode with concatenation of "_kernelspace"
along with kstrdup()


------------------------------------------------------------------------
r265 | ka_shrinivaasan | 2013-09-26 12:42:16 +0530 (Thu, 26 Sep 2013) | 3 lines

Updated Makefile comment


------------------------------------------------------------------------
r264 | ka_shrinivaasan | 2013-09-26 12:40:51 +0530 (Thu, 26 Sep 2013) | 3 lines

Bash script for standalone build of VIRGO cloudexec memeorypool driver


------------------------------------------------------------------------
r263 | ka_shrinivaasan | 2013-09-26 12:38:26 +0530 (Thu, 26 Sep 2013) | 3 lines

Updated VIRGO malloc syscall client with some cleanup


------------------------------------------------------------------------
r262 | ka_shrinivaasan | 2013-09-26 12:23:56 +0530 (Thu, 26 Sep 2013) | 4 lines

All VIRGO Memory Pooling Driver related declarations and datatypes moved in here from virgo.h to remove
circular dependency during build


------------------------------------------------------------------------
r261 | ka_shrinivaasan | 2013-09-26 12:22:00 +0530 (Thu, 26 Sep 2013) | 4 lines

Segregation of VIRGO memory pooling related declarations from CPU Pooling declarations
to remove circular dependency during driver build


------------------------------------------------------------------------
r260 | ka_shrinivaasan | 2013-09-26 12:19:42 +0530 (Thu, 26 Sep 2013) | 3 lines

Segregation of Memory Pooling related declarations from CPU Pooling related declaration with apt nomenclature


------------------------------------------------------------------------
r259 | ka_shrinivaasan | 2013-09-25 20:50:52 +0530 (Wed, 25 Sep 2013) | 3 lines

Linux build error in modpost and initramfs error in bootup in UUID lookup failure for /dev/sda5


------------------------------------------------------------------------
r258 | ka_shrinivaasan | 2013-09-25 20:35:58 +0530 (Wed, 25 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r257 | ka_shrinivaasan | 2013-09-25 20:32:39 +0530 (Wed, 25 Sep 2013) | 3 lines

Moved all memory pooling related function prototypes to virgo_mempool.h


------------------------------------------------------------------------
r256 | ka_shrinivaasan | 2013-09-25 20:31:04 +0530 (Wed, 25 Sep 2013) | 5 lines

Changed Loadabalancer function names specific to Memory Pooling due to linker error in vmlinux in modpost
during full Kernel rebuild. This also resulted in seemingly unrelated error of failed initramfs in
looking up /dev/sda5 by UUID


------------------------------------------------------------------------
r255 | ka_shrinivaasan | 2013-09-25 20:27:10 +0530 (Wed, 25 Sep 2013) | 2 lines

Updated comment

------------------------------------------------------------------------
r254 | ka_shrinivaasan | 2013-09-25 15:22:10 +0530 (Wed, 25 Sep 2013) | 3 lines

Updated /etc/modules for VIRGO Memory Pooling drivers loaded at bootup


------------------------------------------------------------------------
r253 | ka_shrinivaasan | 2013-09-24 13:10:13 +0530 (Tue, 24 Sep 2013) | 2 lines

Updated VIRGO Design Doc 

------------------------------------------------------------------------
r252 | ka_shrinivaasan | 2013-09-24 13:06:26 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated test_virgo_clone binary


------------------------------------------------------------------------
r251 | ka_shrinivaasan | 2013-09-24 13:05:11 +0530 (Tue, 24 Sep 2013) | 3 lines

test_virgo_malloc binary


------------------------------------------------------------------------
r250 | ka_shrinivaasan | 2013-09-24 13:04:16 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated Makefile for test_virgo_malloc testcase


------------------------------------------------------------------------
r249 | ka_shrinivaasan | 2013-09-24 13:03:08 +0530 (Tue, 24 Sep 2013) | 3 lines

Initial commit for virgo_malloc and related syscalls testcase


------------------------------------------------------------------------
r248 | ka_shrinivaasan | 2013-09-24 13:01:09 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated virgo_malloc syscall client with inclusion of virgo_mempool.h header for VIRGO memory pooling related datatypes


------------------------------------------------------------------------
r247 | ka_shrinivaasan | 2013-09-24 12:55:23 +0530 (Tue, 24 Sep 2013) | 3 lines

New Header file for VIRGO Memory Pooling related datatypes


------------------------------------------------------------------------
r246 | ka_shrinivaasan | 2013-09-24 10:43:13 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated syscalls.h for virgo_malloc syscalls - sys_virgo_malloc(), sys_virgo_get(), sys_virgo_set(), sys_virgo_free()


------------------------------------------------------------------------
r245 | ka_shrinivaasan | 2013-09-24 10:40:38 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated Root Makefile for virgo_malloc directory


------------------------------------------------------------------------
r244 | ka_shrinivaasan | 2013-09-24 10:38:48 +0530 (Tue, 24 Sep 2013) | 4 lines

Updated syscall_32.tbl and syscall_64.tbl files for syscall clients to 
VIRGO memory pooling driver - virgo_malloc(), virgo_set(), virgo_get(), virgo_free()


------------------------------------------------------------------------
r243 | ka_shrinivaasan | 2013-09-24 10:35:59 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated staging.sh script for copying .tbl files, syscalls.h, root Makefile etc.,


------------------------------------------------------------------------
r242 | ka_shrinivaasan | 2013-09-23 17:24:20 +0530 (Mon, 23 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r241 | ka_shrinivaasan | 2013-09-23 17:15:27 +0530 (Mon, 23 Sep 2013) | 6 lines

Updated VIRGO memeory pooling client to memory pooling driver with two functions int_to_str() and addr_to_str() to convert
integer and address to char* strings using kmalloc(). Not sure if sprintf and kmalloc can be done together.
 If it doesn't might need an alternative. At present only kernel build works.



------------------------------------------------------------------------
r240 | ka_shrinivaasan | 2013-09-23 17:10:40 +0530 (Mon, 23 Sep 2013) | 3 lines

Updated buildscript.sh for building both cpupooling and memorypooling VIRGO drivers


------------------------------------------------------------------------
r239 | ka_shrinivaasan | 2013-09-21 18:46:38 +0530 (Sat, 21 Sep 2013) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r238 | ka_shrinivaasan | 2013-09-19 19:23:00 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r237 | ka_shrinivaasan | 2013-09-19 19:20:18 +0530 (Thu, 19 Sep 2013) | 3 lines

VIRGO clone .tmp_versions directory


------------------------------------------------------------------------
r236 | ka_shrinivaasan | 2013-09-19 19:17:57 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated buildscript.sh for VIRGO MemPool driver build


------------------------------------------------------------------------
r235 | ka_shrinivaasan | 2013-09-19 19:15:37 +0530 (Thu, 19 Sep 2013) | 3 lines

virgo.h updated for mempoolFunction variable declaration


------------------------------------------------------------------------
r234 | ka_shrinivaasan | 2013-09-19 19:14:26 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO cloud mempool kernelspace driver for kernelspace kmalloc(), kfree(), get and set 


------------------------------------------------------------------------
r233 | ka_shrinivaasan | 2013-09-19 19:12:42 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO CloudExec MemPool Driver for virgo_malloc() etc., with change of cloneFunction to mempoolFunction variable


------------------------------------------------------------------------
r232 | ka_shrinivaasan | 2013-09-19 19:09:54 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated autogenerated Module.symvers


------------------------------------------------------------------------
r231 | ka_shrinivaasan | 2013-09-19 19:07:38 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated autogenerated VIRGO cloud mempool kernelspace mod.c


------------------------------------------------------------------------
r230 | ka_shrinivaasan | 2013-09-19 19:06:23 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO cloud mempool kernelspace driver binary for kernel space kmalloc(),kfree(), get and set


------------------------------------------------------------------------
r229 | ka_shrinivaasan | 2013-09-19 19:03:17 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO mempool driver Makefile comments


------------------------------------------------------------------------
r228 | ka_shrinivaasan | 2013-09-19 19:02:10 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated autogenerated virgo cloudexec mempool mod.c


------------------------------------------------------------------------
r227 | ka_shrinivaasan | 2013-09-19 19:00:57 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated virgo cloudexec mempool driver binary - untested


------------------------------------------------------------------------
r226 | ka_shrinivaasan | 2013-09-19 17:48:12 +0530 (Thu, 19 Sep 2013) | 4 lines

Updated virgo_cloud_mempool userspace code containing malloc(), free(), get and set code for data access
Kernel Upcall Plugin has to invoke these functions (user mode function execution of VIRGO) 


------------------------------------------------------------------------
r225 | ka_shrinivaasan | 2013-09-19 17:33:36 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated build generated Module.symvers


------------------------------------------------------------------------
r224 | ka_shrinivaasan | 2013-09-19 17:31:47 +0530 (Thu, 19 Sep 2013) | 3 lines

Initial mempool syscalls client code for virgo_malloc(), virgo_get(), virgo_set(), virgo_free() prototype that builds. Untested.
 

------------------------------------------------------------------------
r223 | ka_shrinivaasan | 2013-09-17 16:50:48 +0530 (Tue, 17 Sep 2013) | 3 lines

Updated VIRGO Design Doc for Mempooling prototype code commits


------------------------------------------------------------------------
r222 | ka_shrinivaasan | 2013-09-17 16:44:32 +0530 (Tue, 17 Sep 2013) | 3 lines

Updated staging.sh script for VIRGO memory pooling feature


------------------------------------------------------------------------
r221 | ka_shrinivaasan | 2013-09-17 16:42:00 +0530 (Tue, 17 Sep 2013) | 14 lines

Initial Prototype code for VIRGO Memory Pooling feature (virgo_malloc() etc.,).
This code is mostly copied from cpupooling directory and changed for Memory Pooling
All the basic functionalities like 2 user modes and Kernel modes execution, multithreaded execution
and code organization remain the same.

New header has been added in include/linux for VIRGO mempool kernel service - virgocloudexecmempoolsvc.h and virgo.h has been modified
to include mempool related virgo_ops declarations.Only the basic VIRGO mempool driver build works in this commit.

This is not tested code as complete testing can be done only after virgo_malloc() syscall is implemented fully which is a work for few months.
At present a not-built, not-tested pseudocode kind of virgo_malloc() is committed under virgo_malloc() for reference which will be 
overridden in future commits.That would be another replication of virgo_clone() and suitably modified for virgo_malloc() and kernel 
 builds for new syscalls take considerable time.


------------------------------------------------------------------------
r220 | ka_shrinivaasan | 2013-09-17 16:39:18 +0530 (Tue, 17 Sep 2013) | 14 lines

Initial Prototype code for VIRGO Memory Pooling feature (virgo_malloc() etc.,).
This code is mostly copied from cpupooling directory and changed for Memory Pooling
All the basic functionalities like 2 user modes and Kernel modes execution, multithreaded execution
and code organization remain the same.

New header has been added in include/linux for VIRGO mempool kernel service.
Only the basic VIRGO mempool driver build works in this commit.

This is not tested code as complete testing can be done only after virgo_malloc() syscall is implemented fully which is a work for few months.
At present a not-built, not-tested pseudocode kind of virgo_malloc() is committed under virgo_malloc/ for reference which will be 
overridden in future commits.That would be another replication of virgo_clone() and suitably modified for virgo_malloc() and kernel 
 builds for new syscalls take considerable time.


------------------------------------------------------------------------
r219 | ka_shrinivaasan | 2013-09-17 16:37:28 +0530 (Tue, 17 Sep 2013) | 15 lines

Initial Prototype code for VIRGO Memory Pooling feature (virgo_malloc() etc.,). 
This code is mostly copied from cpupooling directory and changed for Memory Pooling
All the basic functionalities like 2 user modes and Kernel modes execution, multithreaded execution 
and code organization remain the same.

New header has been added in include/linux for VIRGO mempool kernel service.
Only the basic VIRGO mempool driver build works in this commit. 

This is not tested code as complete testing can be done only after virgo_malloc() syscall is implemented fully which is a work for few months.
At present a not-built, not-tested pseudocode kind of virgo_malloc() is committed under virgo_malloc() for reference which will be 
overridden in future commits.That would be another replication of virgo_clone() and suitably modified for virgo_malloc() and kernel
 builds for new syscalls take considerable time.



------------------------------------------------------------------------
r218 | ka_shrinivaasan | 2013-09-17 12:57:23 +0530 (Tue, 17 Sep 2013) | 3 lines

Updated VIRGO Design Doc for Memory Pooling Prototype driver design


------------------------------------------------------------------------
r217 | ka_shrinivaasan | 2013-09-16 13:50:20 +0530 (Mon, 16 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r216 | ka_shrinivaasan | 2013-09-14 11:25:32 +0530 (Sat, 14 Sep 2013) | 2 lines

Updated VIRGO Design Doc

------------------------------------------------------------------------
r215 | ka_shrinivaasan | 2013-09-14 11:22:18 +0530 (Sat, 14 Sep 2013) | 3 lines

Updated virgo_malloc() handwritten design notes with kmalloc() and malloc() usage in kernel and user mode execution of virgo_cloudexec kernel service


------------------------------------------------------------------------
r214 | ka_shrinivaasan | 2013-09-14 11:20:37 +0530 (Sat, 14 Sep 2013) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r213 | ka_shrinivaasan | 2013-09-11 20:10:40 +0530 (Wed, 11 Sep 2013) | 2 lines

Updated VIRGO Design Doc

------------------------------------------------------------------------
r212 | ka_shrinivaasan | 2013-09-02 12:17:23 +0530 (Mon, 02 Sep 2013) | 4 lines

Added link to handwritten initial design notes for virgo_malloc()



------------------------------------------------------------------------
r211 | ka_shrinivaasan | 2013-09-02 12:12:54 +0530 (Mon, 02 Sep 2013) | 3 lines

Updated Design Doc for VIRGO for mobile devices and VIRGO File System


------------------------------------------------------------------------
r210 | ka_shrinivaasan | 2013-09-01 11:30:44 +0530 (Sun, 01 Sep 2013) | 3 lines

Updated VIRGO Design Doc - for Memory pooling - virgo_malloc()


------------------------------------------------------------------------
r209 | ka_shrinivaasan | 2013-09-01 11:29:08 +0530 (Sun, 01 Sep 2013) | 4 lines

For identity of issuer of GPL license for VIRGO, I, Srinivasan Kannan (alias) Shrinivas Kannan (alias) Ka.Shrinivaasan,
 am hereby committing my Resume with photograph and details


------------------------------------------------------------------------
r208 | ka_shrinivaasan | 2013-09-01 11:23:16 +0530 (Sun, 01 Sep 2013) | 4 lines

VIRGO Memory Pooling- virgo_malloc() - initial design notes - not comprehensive and is subject to change given the complexities of
VIRGO address-space and virgo_malloc() subtleties


------------------------------------------------------------------------
r207 | ka_shrinivaasan | 2013-08-27 15:04:48 +0530 (Tue, 27 Aug 2013) | 25 lines

GNU General Public License v3.0 for the open source product VIRGO(VIRtualGenericOs)

This product is individually designed and developed since 2008 by the Developer Srinivasan Kannan (alias) Shrinivas Kannan (alias) Ka.Shrinivaasan
(address and contact details below):
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Srinivasan Kannan,
S/O.  P.R.ES.Kannan,
172, Gandhi Adigal Salai,
Kumbakonam-612001, TamilNadu, India.
e-mail :        ka.shrinivaasan@gmail.com
                shrinivas.kannan@gmail.com
                kashrinivaasan@live.com
Mobile :        9791165980, 9003082186
Name spellings in
employer/academic
records :               Srinivasan Kannan (academics, BaaN,Sun
                        Microsystems,Verizon),Shrinivas Kannan(webMethods and
                        CMI), Ka.Shrinivaasan (Global Analytics)
Personal website(research) :- https://sites.google.com/site/kuja27/
Krishna iResearch Open Source: https://sourceforge.net/users/ka_shrinivaasan

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


------------------------------------------------------------------------
r205 | ka_shrinivaasan | 2013-08-23 13:58:17 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated VIRGO Design Doc for new Multithreaded Kernel Service Feature


------------------------------------------------------------------------
r204 | ka_shrinivaasan | 2013-08-23 13:53:17 +0530 (Fri, 23 Aug 2013) | 3 lines

Removed some old files from Version Control


------------------------------------------------------------------------
r203 | ka_shrinivaasan | 2013-08-23 13:50:18 +0530 (Fri, 23 Aug 2013) | 3 lines

.tmp_versions deleted from source control


------------------------------------------------------------------------
r202 | ka_shrinivaasan | 2013-08-23 13:48:37 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated test_virgo_clone binary


------------------------------------------------------------------------
r201 | ka_shrinivaasan | 2013-08-23 13:47:28 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated testcase with all values of parameterIsExecutable(0,1,2) and updated Copyright Notice


------------------------------------------------------------------------
r200 | ka_shrinivaasan | 2013-08-23 13:44:26 +0530 (Fri, 23 Aug 2013) | 6 lines

Changes done for Multithreaded VIRGO Kernel Service Feature:
- new kernel thread and function virgo_client_thread spawned that does the recvfrom and sendto work for each clientsocket that is
accepted as parameter in those virgo_ops functions
- Updated Copyright Notice


------------------------------------------------------------------------
r199 | ka_shrinivaasan | 2013-08-23 13:41:41 +0530 (Fri, 23 Aug 2013) | 6 lines

Updated virgo.h header file for Multithreaded VIRGO Kernel Service Feature:
- Moved Static and Global data to VIRGO kernel service module and made them into kernel thread localized data
- Updated Copyright Notice
- Function prototype changes for accepting client socket as parameter in virgo_ops functions - sendto and recvfrom


------------------------------------------------------------------------
r198 | ka_shrinivaasan | 2013-08-23 13:36:59 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated Module.symvers


------------------------------------------------------------------------
r197 | ka_shrinivaasan | 2013-08-23 13:35:52 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated virgo_cloudexec.ko with newly added Multithreaded Kernel Service Feature


------------------------------------------------------------------------
r196 | ka_shrinivaasan | 2013-08-23 13:32:50 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated virgo_cloud_test_kernelspace.ko


------------------------------------------------------------------------
r195 | ka_shrinivaasan | 2013-08-23 13:25:03 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated virgo_cloud_test_kernelspace.o


------------------------------------------------------------------------
r194 | ka_shrinivaasan | 2013-08-23 13:19:16 +0530 (Fri, 23 Aug 2013) | 3 lines

updated autogenerated virgo_cloudexec.mod.c


------------------------------------------------------------------------
r193 | ka_shrinivaasan | 2013-08-23 13:18:03 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated virgo_cloudexec.o


------------------------------------------------------------------------
r192 | ka_shrinivaasan | 2013-08-23 13:17:00 +0530 (Fri, 23 Aug 2013) | 3 lines

autogenerated virgo_cloudexec.mod.o


------------------------------------------------------------------------
r191 | ka_shrinivaasan | 2013-08-23 13:15:49 +0530 (Fri, 23 Aug 2013) | 4 lines

Test_Virgo_Clone testcase outputs in kern.log and kernel upcall usermode logs for new Multithreaded VIRGO Kernel Service Feature for
all values of parameterIsExecutable(0,1,2)


------------------------------------------------------------------------
r190 | ka_shrinivaasan | 2013-08-23 13:11:08 +0530 (Fri, 23 Aug 2013) | 8 lines

Major rewrite for adding Multithreading Feature to VIRGO Kernel Service:
1. All Global Declarations KernelThread Localized for kernel thread created for each virgo_clone request.
2. Updated Copyright Notice
3. Function prototype changes for accepting kernel side clientsocket as argument.

With this every request is serviced by a separate kernel thread 


------------------------------------------------------------------------
r189 | ka_shrinivaasan | 2013-08-23 12:35:34 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated Copyright Notice


------------------------------------------------------------------------
r188 | ka_shrinivaasan | 2013-08-15 11:41:44 +0530 (Thu, 15 Aug 2013) | 3 lines

Updated Copyright Notice


------------------------------------------------------------------------
r187 | ka_shrinivaasan | 2013-08-15 11:15:45 +0530 (Thu, 15 Aug 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r186 | ka_shrinivaasan | 2013-08-11 14:54:45 +0530 (Sun, 11 Aug 2013) | 3 lines

Open Source Products Design and Research Notes


------------------------------------------------------------------------
r185 | ka_shrinivaasan | 2013-08-11 13:44:53 +0530 (Sun, 11 Aug 2013) | 3 lines

Updated VIRGO Design Doc with ToDo and NiceToHave Features


------------------------------------------------------------------------
r184 | ka_shrinivaasan | 2013-08-11 13:42:54 +0530 (Sun, 11 Aug 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r183 | ka_shrinivaasan | 2013-08-09 11:41:15 +0530 (Fri, 09 Aug 2013) | 3 lines

Updated incorrect old comments for Intermodule Kernel Space Invocation Feature


------------------------------------------------------------------------
r182 | ka_shrinivaasan | 2013-08-05 15:23:14 +0530 (Mon, 05 Aug 2013) | 4 lines

Very important intermodule kernel space function invocation testcase log that for Intermodule Kernel Space Function Invocation Feature testing
- reproduced from backup


------------------------------------------------------------------------
r180 | ka_shrinivaasan | 2013-08-05 12:35:47 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest staging.sh with Copyright Notice added


------------------------------------------------------------------------
r179 | ka_shrinivaasan | 2013-08-05 12:34:32 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest buildscript.sh


------------------------------------------------------------------------
r178 | ka_shrinivaasan | 2013-08-05 12:32:43 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest VIRGO Design Doc


------------------------------------------------------------------------
r177 | ka_shrinivaasan | 2013-08-05 12:26:10 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_kernelupcall binaries build script with virgo_cloud_test_main build commandline


------------------------------------------------------------------------
r176 | ka_shrinivaasan | 2013-08-05 12:23:09 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest autogenerated virgo_cloudexec.mod.o


------------------------------------------------------------------------
r175 | ka_shrinivaasan | 2013-08-05 12:22:07 +0530 (Mon, 05 Aug 2013) | 2 lines

Latest virgo_kernelupcall_plugin.c with modified dlopen() and debug info with printk().

------------------------------------------------------------------------
r174 | ka_shrinivaasan | 2013-08-05 12:20:18 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_kernelupcall_plugin


------------------------------------------------------------------------
r173 | ka_shrinivaasan | 2013-08-05 12:19:21 +0530 (Mon, 05 Aug 2013) | 5 lines

Updated virgo_cloud_test_main.c for parameterIsExecutable=1 to execute a binary in kernel upcall to usermode with printf()s and fork() which
any typical program would do. Testcase kern.log(s) and kernel opened usermode log file that is written to by usermode have been committed to
test_logs/


------------------------------------------------------------------------
r172 | ka_shrinivaasan | 2013-08-05 12:16:15 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest autogenerated virgo_cloudexec.mod.c


------------------------------------------------------------------------
r171 | ka_shrinivaasan | 2013-08-05 12:15:15 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloudexec.ko


------------------------------------------------------------------------
r170 | ka_shrinivaasan | 2013-08-05 12:14:22 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloud_test_kernelspace.ko for intermodule kernelspace function execution


------------------------------------------------------------------------
r169 | ka_shrinivaasan | 2013-08-05 12:13:07 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloudexec.o with output redirection with fd_install for usermode logging and strip_control_M() commits


------------------------------------------------------------------------
r168 | ka_shrinivaasan | 2013-08-05 12:10:33 +0530 (Mon, 05 Aug 2013) | 20 lines

Major rewrite of virgo_cloudexec for output redirection with fd_install:

1. Opened a VFS stdout file called file_stdout and added fd_install for stdout and stderr to that file so that kernel_execve() inherits
these file descriptors and goes upto usermode and all printf()s in usermode executable or functions get logged into this file created by
Kernel. This was earlier difficult due to lack of stdout fd_install in kernel 3.x and seemed to require a copy_from_user() or modification
of kmod.c or netlink listeners. Name of this Kernel-User communication file is hardcoded as virgo_cloudexec_upcall_usermode_log.txt. Lot of testing
was carried out for parameterIsExecutable=0 and parameterIsExecutable=1 with both virgo_clone test case and also telnet. All output logs
have been committed under test_logs/. This is a significant feature addition that makes Kernel To Userspace communication and output redirection
possible which was muted earlier. Though this may be viewed as a security risk, in the hindsight it is a serious feature that enables
Kernel To Usermode logging possible without which logging within user mode was earlier impossible and there was no way to know what user has
executed except by return code which is tedious to decrypt.

2.Important thing is that fd_install code is within virgo module and not within kmod.c. 

3.All bash shell invocations have been dropped and executables are invoked directly. filp_open+fd_install+filp_close code executes now for
each invocation of usermode helper which can be in module init() and exit() as an optimization.
 This was tested but for some reason it didn't work but should have worked.



------------------------------------------------------------------------
r167 | ka_shrinivaasan | 2013-08-05 11:54:47 +0530 (Mon, 05 Aug 2013) | 3 lines

Shell wrapper for virgo_cloud_test_main.c executable for kernel upcall (parameterIsExecutable is 1)


------------------------------------------------------------------------
r166 | ka_shrinivaasan | 2013-08-05 11:52:45 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest libvirgo.so dynamic library that contains the symbols that will be dlsym()ed by the kernel upcall(parameterIsExecutable = 0)


------------------------------------------------------------------------
r165 | ka_shrinivaasan | 2013-08-05 11:50:48 +0530 (Mon, 05 Aug 2013) | 3 lines

testcase function with logging for Kernel To User space communication that prints to a file opened by kernel using dup2 redirection


------------------------------------------------------------------------
r164 | ka_shrinivaasan | 2013-08-05 11:48:55 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloud_test_main executable for kernelupcall usermode execution


------------------------------------------------------------------------
r163 | ka_shrinivaasan | 2013-08-05 11:47:19 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloud_test_kernelspace binary


------------------------------------------------------------------------
r162 | ka_shrinivaasan | 2013-08-05 11:46:00 +0530 (Mon, 05 Aug 2013) | 4 lines

Testcase output logs for kernelupcall usermode logging with parameterIsExecutable=0 and parameterIsExecutable=1 (for usermode execution of a function 
within libvirgo.so and usermode execution of a binary virgo_cloud_test_main respectively)


------------------------------------------------------------------------
r161 | ka_shrinivaasan | 2013-08-05 11:42:36 +0530 (Mon, 05 Aug 2013) | 4 lines

Declaration of new variable file_stdout for usermode logging in kernel upcall and new function strip_control_M() to tokenize based on
\r\n or " " delimiters


------------------------------------------------------------------------
r160 | ka_shrinivaasan | 2013-08-05 11:40:17 +0530 (Mon, 05 Aug 2013) | 3 lines

Updated test_virgo_clone source and binary unit test case for latest virgo_cloudexec 


------------------------------------------------------------------------
r159 | ka_shrinivaasan | 2013-08-02 10:05:23 +0530 (Fri, 02 Aug 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r158 | ka_shrinivaasan | 2013-08-02 10:02:21 +0530 (Fri, 02 Aug 2013) | 3 lines

Output for telnet to virgo cloudexec usermode upcall with bash (parameterIsExecutable=1)


------------------------------------------------------------------------
r157 | ka_shrinivaasan | 2013-08-02 10:00:03 +0530 (Fri, 02 Aug 2013) | 3 lines

ParameterIsExecutable is set to 1 for executing a binary (name sent by virgo_clone()) in usermode with call_usermodehelper


------------------------------------------------------------------------
r156 | ka_shrinivaasan | 2013-08-01 22:48:00 +0530 (Thu, 01 Aug 2013) | 3 lines

Miscellaneous binaries and autogenerated code


------------------------------------------------------------------------
r155 | ka_shrinivaasan | 2013-08-01 22:46:49 +0530 (Thu, 01 Aug 2013) | 3 lines

standalone testcase output for virgo_cloudexec kernel upcall plugin


------------------------------------------------------------------------
r154 | ka_shrinivaasan | 2013-08-01 22:45:26 +0530 (Thu, 01 Aug 2013) | 2 lines

File IO commented due to kernel panic

------------------------------------------------------------------------
r153 | ka_shrinivaasan | 2013-08-01 22:44:15 +0530 (Thu, 01 Aug 2013) | 3 lines

virgo_cloud_test usecase with main() for testing usermode call with executable as parameter


------------------------------------------------------------------------
r152 | ka_shrinivaasan | 2013-08-01 22:42:20 +0530 (Thu, 01 Aug 2013) | 3 lines

Shell script for wrapping virgo_cloud_test_main and output redirection


------------------------------------------------------------------------
r151 | ka_shrinivaasan | 2013-08-01 22:37:00 +0530 (Thu, 01 Aug 2013) | 3 lines

latest virgo_cloud_test_kernelspace.ko


------------------------------------------------------------------------
r150 | ka_shrinivaasan | 2013-08-01 22:35:55 +0530 (Thu, 01 Aug 2013) | 19 lines

Added Bash shell commandline with -c option for call_usermodehelper upcall clauses to pass in remote virgo_clone command message as 
arguments to it. Also tried output redirection but it works some times that too with a fatal kernel panic.

Ideal solutions are :
1. either to do a copy_from_user() for message buffer from user address space (or) 
2. somehow rebuild the kernel with fd_install() pointing stdout to a VFS file* struct. In older kernels like 2.6.x, there is an fd_install code
with in kmod.c (___call_usermodehelper()) which has been redesigned in kernel 3.x versions and fd_install has been removed in kmod.c .
3. Create a Netlink socket listener in userspace and send message up from kernel Netlink socket.

All the above are quite intensive and time consuming to implement.Moreover doing FileIO in usermode helper is strongly discouraged in kernel docs

Since Objective of VIRGO is to virtualize the cloud as single execution "machine", doing an upcall (which would run with root abilities) is 
redundant often and kernel mode execution is sufficient. Kernel mode execution with intermodule function invocation can literally take over
the entire board in remote machine (since it can access PCI bus, RAM and all other device cards)

As a longterm design goal, VIRGO can be implemented as a separate protocol itself and sk_buff packet payload from remote machine
can be parsed by kernel service and kernel_thread can be created for the message.


------------------------------------------------------------------------
r149 | ka_shrinivaasan | 2013-07-30 15:15:33 +0530 (Tue, 30 Jul 2013) | 3 lines

Updated VIRGO Design Doc for Powerful Kernel Space Remote Execution feature.


------------------------------------------------------------------------
r148 | ka_shrinivaasan | 2013-07-30 15:06:26 +0530 (Tue, 30 Jul 2013) | 3 lines

Updated staging.sh script


------------------------------------------------------------------------
r147 | ka_shrinivaasan | 2013-07-30 15:04:22 +0530 (Tue, 30 Jul 2013) | 5 lines

Miscellaneous automatically generated kernel module sources and binaries for virgo_cloudexec.ko and virgo_cloud_test_kernelspace.ko. 
Module.symvers is now updated with exported symbols from both these kernel modules. Also committed is libvirgo.so used by kernel upcall plugin
for usermode execution


------------------------------------------------------------------------
r146 | ka_shrinivaasan | 2013-07-30 14:57:44 +0530 (Tue, 30 Jul 2013) | 4 lines

For parameterIsExecutable=2, a kernel thread is created to invoke exported function symbol virgo_cloud_test_kernelspace present in another 
module and is woken up to be run in kernel addresspace


------------------------------------------------------------------------
r145 | ka_shrinivaasan | 2013-07-30 14:54:35 +0530 (Tue, 30 Jul 2013) | 4 lines

An example usecase for intermodule exported function invocation. A function virgo_cloud_test_kernelspace() is exported and is invoked by
VIRGO kernel service when parameterIsExecutable is set to 2 and a kernel thread is created for exec-ing this function in kernel address space


------------------------------------------------------------------------
r144 | ka_shrinivaasan | 2013-07-30 14:49:20 +0530 (Tue, 30 Jul 2013) | 15 lines

Makefile changes for building both virgo_cloudexec.ko and virgo_cloud_test_kernelspace.ko in this folder itself.

virgo_cloud_test_kernelspace.ko has exported virgo_cloud_test_kernelspace() function which is invoked by
virgo_cloudexec.ko kernel service if the parameterIsExecutable=2 and a kernel thread is created to execute this 
exported function with in kernel space with kernel privileges.

Executing with in kernel space is quite useful in sending commands to a remote cloud node to control low level hardware devices. For example
a security camera or embedded driver can be programmed remotely by arguments sent through virgo_clone() with camera driver replacing the virgo_cloud_test_kernelspace.ko

Thus parameterIsExecutable=2 kernel mode exec is quite a generic transparent fusion of Cloud and Hardware. Usual application level cloud stacks
operate on user address space and thus there is zero or less flexibility in cloud-driving remote hardware.




------------------------------------------------------------------------
r143 | ka_shrinivaasan | 2013-07-30 14:36:26 +0530 (Tue, 30 Jul 2013) | 6 lines

New Kernel Module created for testing intermodule function invocation from VIRGO kernel service (parameterIsExecutable=2)

This directory is marked not needed as code within this has been carried over to virgo_cloudexec and this is committed for future reference
and as a potential stub for implementing some more features in future


------------------------------------------------------------------------
r142 | ka_shrinivaasan | 2013-07-30 14:31:46 +0530 (Tue, 30 Jul 2013) | 3 lines

test_virgo_clone kern.log dmesg output for kernelspace intermodule function invocation testing


------------------------------------------------------------------------
r141 | ka_shrinivaasan | 2013-07-30 14:29:50 +0530 (Tue, 30 Jul 2013) | 3 lines

Updated test_virgo_clone binary


------------------------------------------------------------------------
r140 | ka_shrinivaasan | 2013-07-30 14:28:50 +0530 (Tue, 30 Jul 2013) | 3 lines

Changed test_virgo_clone to accept commandline arguments passed in.


------------------------------------------------------------------------
r139 | ka_shrinivaasan | 2013-07-30 14:25:43 +0530 (Tue, 30 Jul 2013) | 7 lines

Inter-Module exported function invocation:
-----------------------------------------
A test module virgo_cloud_test_kernelspace has been created and a function symbol exported by it is invoked. Added an extern declaration for that
in virgo.h



------------------------------------------------------------------------
r138 | ka_shrinivaasan | 2013-07-29 17:09:35 +0530 (Mon, 29 Jul 2013) | 2 lines

Staging utility script 

------------------------------------------------------------------------
r137 | ka_shrinivaasan | 2013-07-29 17:00:00 +0530 (Mon, 29 Jul 2013) | 3 lines

Updated VIRGO Desgin doc


------------------------------------------------------------------------
r136 | ka_shrinivaasan | 2013-07-29 16:56:10 +0530 (Mon, 29 Jul 2013) | 3 lines

test_virgo_clone output for kernel address space execution in virgo_cloud kernel module in remote node


------------------------------------------------------------------------
r135 | ka_shrinivaasan | 2013-07-29 16:53:43 +0530 (Mon, 29 Jul 2013) | 4 lines

Function declaration for kernel_space_func() added.
parameteIsExecutable has been moved in here. Reading it from virgo_cloud.conf is a to-do


------------------------------------------------------------------------
r134 | ka_shrinivaasan | 2013-07-29 16:51:24 +0530 (Mon, 29 Jul 2013) | 13 lines

1.The wrapper function that based on switch parameterIsExecutable (values 0,1,2) executes the binary or function data from virgo_clone
system call in either kernel or user address-spaces has been added

2.If parameterIsExecutable is set to 2, the data from virgo_clone() is a function and is executed within kernel address-space itself
Presently just an example function is invoked. Intermodule function invocation functionality through this is a to-do.
 
3.New example kernel_space_func() function has been added for kernel thread execution

4.kernel_thread creation for clone_func() wrapper has been changed slightly for switch parameterIsExecutable.

5.Switch parameterIsExecutable has been moved to virgo headers.


------------------------------------------------------------------------
r133 | ka_shrinivaasan | 2013-07-29 16:44:52 +0530 (Mon, 29 Jul 2013) | 3 lines

Updated virgo_kernelupcall_plugin binary


------------------------------------------------------------------------
r132 | ka_shrinivaasan | 2013-07-29 16:43:30 +0530 (Mon, 29 Jul 2013) | 3 lines

Added # for Copyright Notice.


------------------------------------------------------------------------
r131 | ka_shrinivaasan | 2013-07-29 16:41:59 +0530 (Mon, 29 Jul 2013) | 3 lines

Updated virgo_cloud_test with File IO for logging


------------------------------------------------------------------------
r130 | ka_shrinivaasan | 2013-07-29 16:40:45 +0530 (Mon, 29 Jul 2013) | 2 lines

Updated .ko binary

------------------------------------------------------------------------
r129 | ka_shrinivaasan | 2013-07-29 16:39:42 +0530 (Mon, 29 Jul 2013) | 3 lines

updated autogenerated mod.c


------------------------------------------------------------------------
r128 | ka_shrinivaasan | 2013-07-29 16:38:13 +0530 (Mon, 29 Jul 2013) | 4 lines

Updated kernel upcall plugin with file IO for logging . But this does not work with call_usermodehelper() due to ___call_usermodehelper()
having file descriptor set up only for stdin. Would require changes to kernel/kmod.c


------------------------------------------------------------------------
r127 | ka_shrinivaasan | 2013-07-29 16:35:05 +0530 (Mon, 29 Jul 2013) | 4 lines

virgo_kernelupcall plugin's standalone output - without call_usermodehelper() 
with added logging with open(), write(), fsync() system calls


------------------------------------------------------------------------
r126 | ka_shrinivaasan | 2013-07-24 19:09:33 +0530 (Wed, 24 Jul 2013) | 3 lines

Example virgo_cloud config file with loopback ip addresses (comma separated)


------------------------------------------------------------------------
r124 | ka_shrinivaasan | 2013-07-24 11:44:30 +0530 (Wed, 24 Jul 2013) | 3 lines

Updated VirgoDesign document


------------------------------------------------------------------------
r123 | ka_shrinivaasan | 2013-07-24 11:39:50 +0530 (Wed, 24 Jul 2013) | 3 lines

Updated buildscript.sh


------------------------------------------------------------------------
r122 | ka_shrinivaasan | 2013-07-24 11:36:57 +0530 (Wed, 24 Jul 2013) | 3 lines

Comments updated


------------------------------------------------------------------------
r121 | ka_shrinivaasan | 2013-07-24 11:32:05 +0530 (Wed, 24 Jul 2013) | 9 lines

Updated test_virgo_clone.c with mangled function name to be sent to virgo kernel service in remote cloud node:
------------------------------------------------------------------------------------------------------------
Mangled name for function prototype "void* virgo_cloud_test(void*)" is sent to virgo_cloudexec kernel service which does
upcall to userspace to invoke the function (within libvirgo.so) in remote cloud node. Kernel upcall usermode helper 
requires mangled names for dlsym(). This also is a unique id for a function. Library libvirgo.so needs to be prebuilt
with all functions that need to be on cloud and should be replicated in all cloud nodes.
Padded right with 2 whitespaces for ^M removal code in kernel module side.


------------------------------------------------------------------------
r120 | ka_shrinivaasan | 2013-07-24 11:28:15 +0530 (Wed, 24 Jul 2013) | 2 lines

updated test_virgo_clone binary

------------------------------------------------------------------------
r119 | ka_shrinivaasan | 2013-07-24 11:27:17 +0530 (Wed, 24 Jul 2013) | 17 lines

test_virgo_clone end to end testing (from virgo_clone client with PRG loadbalancer to virgo cloudexec kernel module with userspace kernel upcall 
execution of the function within libvirgo.so in remote cloud node) kern.log debug messages.

Again weirdly enough, kernel_connect to virgo kernel module randomly hangs (no pattern was observed) and works some times (when it works the output has been captured).
Origin again mysterious (something quite similar to blocking vs non-blocking socket random hang issue witnessed few months ago). Points to
something going on deep with in kernel or to external network related issues (but even loopback ip has this problem).

test_virgo_clone kernel_connect was working without issues few days ago.

With this VIRGO cloud platform has minimal features of loadbalancer, kernel upcall with workqueue, end-to-end transport of data and getting
result back from remote cloud nodei, config file, unit testcases etc., and is of the same genre as SunRPC and can execute both in kernel and
user addressspace in remote cloud node.

- Ka.Shrinivaasan (alias) Shrinivas Kannan (alias) Srinivasan Kannan
  (https://sites.google.com/site/kuja27)


------------------------------------------------------------------------
r118 | ka_shrinivaasan | 2013-07-23 15:43:52 +0530 (Tue, 23 Jul 2013) | 2 lines

Updated VirgoDesign doc

------------------------------------------------------------------------
r117 | ka_shrinivaasan | 2013-07-23 15:36:12 +0530 (Tue, 23 Jul 2013) | 3 lines

virgo_kernelupcall_plugin binary used by virgo_cloudexec kernel service when parameter is mangled name of a function


------------------------------------------------------------------------
r116 | ka_shrinivaasan | 2013-07-23 15:32:00 +0530 (Tue, 23 Jul 2013) | 3 lines

Kernel upcall standalone binaries output


------------------------------------------------------------------------
r115 | ka_shrinivaasan | 2013-07-23 15:31:00 +0530 (Tue, 23 Jul 2013) | 3 lines

Fixed binary needed for kernelupcall with parameterIsExecutable=0 (virgo_clone sends a function name)


------------------------------------------------------------------------
r114 | ka_shrinivaasan | 2013-07-23 15:28:35 +0530 (Tue, 23 Jul 2013) | 3 lines

Kern.log messages for virgo_cloudexec with kernelupcall for function names (parameterIsExecutable=0)


------------------------------------------------------------------------
r113 | ka_shrinivaasan | 2013-07-23 15:26:33 +0530 (Tue, 23 Jul 2013) | 3 lines

virgo_cloud_test cloud function implemented for testing (is built into libvirgo.so)


------------------------------------------------------------------------
r112 | ka_shrinivaasan | 2013-07-23 15:24:44 +0530 (Tue, 23 Jul 2013) | 2 lines

Bash script for building kernel upcall binaries - virgo_kernelupcall_plugin and libvirgo.so

------------------------------------------------------------------------
r111 | ka_shrinivaasan | 2013-07-23 15:19:36 +0530 (Tue, 23 Jul 2013) | 29 lines

Major call_usermodehelper() with dlsym and pthread_create functionality implementation for parameterIsExecutable=0:
--------------------------------------------------------------------------------------------------------------
 Lack of reflection kind of facilities requires map of function_names to pointers_to_functions to be executed
 on cloud has to be lookedup in the map to get pointer to function. This map is not scalable if number of functions are
 in millions and size of the map increases linearly. Also having it in memory is both CPU and memory intensive.
 Moreover this map has to be synchronized in all nodes for coherency and consistency which is another intensive task.
 Thus name to pointer function table is at present not implemented. Suitable way to call a function by name of the function
 is yet to be found out and references in this topic are scarce.

 If parameterIsExecutable is set to 1 the data received from virgo_clone() is not a function but name of executable
 This executable is then run on usermode using call_usermodehelper() which internally takes care of queueing the workstruct
 and executes the binary as child of keventd and reaps silently. Thus workqueue component of kernel is indirectly made use of.
 This is sometimes more flexible alternative that executes a binary itself on cloud and 
 is preferable to clone()ing a function on cloud. Virgo_clone() syscall client or telnet needs to send the message with name of binary.
 If parameterIsExecutable is set to 0 then data received from virgo_clone() is name of a function.

 If parameterIsExecutable is set to 0 then data received from virgo_clone() is name of a function and is executed in else clause
 using dlsym() lookup and pthread_create() in user space. This unifies both call_usermodehelper() and creating a userspace thread
 with a fixed binary which is same for any function. The dlsym lookup requires mangled function names which need to be sent by 
 virgo_clone or telnet. This is far more efficient than a function pointer table. call_usermodehelper() Kernel upcall is done to usermode to exec a fixed binary that would inturn execute the cloneFunction in userspace
 by spawning a pthread. cloneFunction is name of the function and not binary. This clone function will be dlsym()ed 
 and a pthread will be created by the fixed binary. Name of the fixed binary is hardcoded herein as 
 "virgo_kernelupcall_plugin". This fixed binary takes clone function as argument. For testing libvirgo.so has been created from
 virgo_cloud_test.c and separate build script to build the cloud function binaries has been added.

 - Ka.Shrinivaasan



------------------------------------------------------------------------
r110 | ka_shrinivaasan | 2013-07-22 18:23:19 +0530 (Mon, 22 Jul 2013) | 3 lines

call_usermodehelper kern.log printk messages


------------------------------------------------------------------------
r109 | ka_shrinivaasan | 2013-07-22 15:16:17 +0530 (Mon, 22 Jul 2013) | 21 lines

Some functionality addition to clone_func():

Added a flag parameterIsExecutable which switches between whether parameter received from virgo_clone or telnet is:
 1. name of a function (or)
 2. name of a binary

Linux kernel has call_usermodexxx() functions that do upcall to userspace and execute a binary. Presently virgo_clone() is only
for creating a cloned thread in remote cloud node and sends name of a function. To support kernel upcall, based on the flag 
parameterIsExecutable call_usermodehelper() is invoked on the received data which has name of the binary.

If parameterIsExecutable is set to 1 the data received from virgo_clone() is not a function but name of executable
This executable is then run on usermode using call_usermodehelper() which internally takes care of queueing the workstruct
and executes the binary in userspace as child of keventd and reaps silently. Thus workqueue component of kernel is indirectly made use of.
This is sometimes more flexible alternative that executes a binary itself on cloud and 
is preferable to clone()ing a function on cloud. Virgo_clone() syscall client or telnet needs to send the message with name of binary.
If parameterIsExecutable is set to 0 then data received from virgo_clone() is name of a function.

- Ka.Shrinivaasan (alias) Shrinivas Kannan (alias) Srinivasan Kannan
  (http://sites.google.com/site/kuja27)


------------------------------------------------------------------------
r108 | ka_shrinivaasan | 2013-07-17 21:20:09 +0530 (Wed, 17 Jul 2013) | 2 lines

Updated Virgo Design doc

------------------------------------------------------------------------
r107 | ka_shrinivaasan | 2013-07-17 21:17:40 +0530 (Wed, 17 Jul 2013) | 8 lines

moved read_virgo_config() to virgo_cloudexec's module_init function so that all necessary config required by later virgo_clone invocations
are set by driver_init() which in turn calls virgo module_init function. That is each nodes is both a client and kernel service. Each node
would have its cloud config initialized so as to be used by subsequent virgo_clone calls(from same node). All nodes need to have 
replicated copies of the virgo_cloud.conf

This is simple way of initializing config than doing it through basic_setup bootup and is also modularized and delinked from kernel main.c


------------------------------------------------------------------------
r106 | ka_shrinivaasan | 2013-07-17 21:10:41 +0530 (Wed, 17 Jul 2013) | 5 lines

Commented do_virgo_cloud_init() and instead moved the read_virgo_config() into virgo_cloudexec's module init function so that
when the kernel boots up,the driver_init() would call the virgo driver's module init function and would thus all necessary config
would be automatically read much earlier than any virgo_clone sys call is invoked. This looks rather a simpler way to read and set config.


------------------------------------------------------------------------
r105 | ka_shrinivaasan | 2013-07-16 20:05:56 +0530 (Tue, 16 Jul 2013) | 4 lines

Uncommented do_virgo_cloud_init() and invoked read_virgo_clone_config() from do_virgo_cloud_init()
which reads virgo_cloud.conf and sets the exported virgo cloud symbols


------------------------------------------------------------------------
r104 | ka_shrinivaasan | 2013-07-16 20:03:16 +0530 (Tue, 16 Jul 2013) | 3 lines

Commented read_virgo_config() as read_virgo_clone_config() has been implemented and would set the exported symbols when kernel boots up


------------------------------------------------------------------------
r103 | ka_shrinivaasan | 2013-07-16 20:01:06 +0530 (Tue, 16 Jul 2013) | 3 lines

Updated Virgo Design Document


------------------------------------------------------------------------
r102 | ka_shrinivaasan | 2013-07-15 19:48:09 +0530 (Mon, 15 Jul 2013) | 7 lines

Major rewrite of read_virgo_config() with VFS calls for reading virgo_cloud.conf and a new multipurpose
tokenizer function tokenize_list_of_ip_addrs() for tokenizing virgo_cloud.conf comma separated list and
assigning it to node_ip_addrs_in_cloud[] array.

Similar code might have to be replicated in do_virgo_cloud_init() when kernel boots up


------------------------------------------------------------------------
r101 | ka_shrinivaasan | 2013-07-15 19:44:24 +0530 (Mon, 15 Jul 2013) | 3 lines

type declarations for read_virgo_config() and tokenizer function


------------------------------------------------------------------------
r100 | ka_shrinivaasan | 2013-07-15 19:42:51 +0530 (Mon, 15 Jul 2013) | 3 lines

read_virgo_Config() rewritten with VFS calls


------------------------------------------------------------------------
r99 | ka_shrinivaasan | 2013-07-12 13:31:08 +0530 (Fri, 12 Jul 2013) | 2 lines

updated Virgo Design doc

------------------------------------------------------------------------
r98 | ka_shrinivaasan | 2013-07-12 13:19:09 +0530 (Fri, 12 Jul 2013) | 9 lines

Tested latest virgo_clone and virgo_cloudexec with test_virgo_clone.
Again noticed something weird:
- On 11 and 12 July 2013, network was and is horribly slow(and my laptop was apparently hacked on 11 July 2013 - 
password login didn't work which took hours to rectify)
- Virgo cloudexec modules_install which used to install automatically to /lib/modules/'uname -r'/extra, didn't work and I had to manually
copy to /lib/modules (causing old binary to load as in test_virgo_clone latest output committed under virgo_clone/test)
- Something periodically disturbs this net connection and machine (needs to be investigated for cybercrime)


------------------------------------------------------------------------
r97 | ka_shrinivaasan | 2013-07-12 13:10:14 +0530 (Fri, 12 Jul 2013) | 3 lines

Commented the range mapping for PRG host id. Instead added simpler modulus computation to get the host id.


------------------------------------------------------------------------
r96 | ka_shrinivaasan | 2013-07-12 00:52:36 +0530 (Fri, 12 Jul 2013) | 3 lines

More printk(s) added and also Pseudorandom number range mapping computation changed


------------------------------------------------------------------------
r95 | ka_shrinivaasan | 2013-07-10 18:01:05 +0530 (Wed, 10 Jul 2013) | 3 lines

Updated Virgo Design Doc


------------------------------------------------------------------------
r94 | ka_shrinivaasan | 2013-07-10 17:57:51 +0530 (Wed, 10 Jul 2013) | 3 lines

Separate virgo_Config.h header file for extern declarations added due to multiple defintion errors during kernel build


------------------------------------------------------------------------
r93 | ka_shrinivaasan | 2013-07-10 17:56:03 +0530 (Wed, 10 Jul 2013) | 3 lines

#ifndef added 


------------------------------------------------------------------------
r92 | ka_shrinivaasan | 2013-07-10 17:52:25 +0530 (Wed, 10 Jul 2013) | 3 lines

PRG loadbalancer testing - kern.log messages printing the ip addresses (read_virgo_config())


------------------------------------------------------------------------
r91 | ka_shrinivaasan | 2013-07-10 17:50:29 +0530 (Wed, 10 Jul 2013) | 3 lines

#included virgo_config.h for cloud data declaration


------------------------------------------------------------------------
r90 | ka_shrinivaasan | 2013-07-10 17:47:38 +0530 (Wed, 10 Jul 2013) | 6 lines

Modified VIRGO kernel service:
- read_virgo_config() updates
- virgo_config.h included (created for extern declarations of cloud datastructures)
- hardcoded cloud datastructures get printed and are exported correctly (added commented code for kallsyms_lookup if needed)


------------------------------------------------------------------------
r89 | ka_shrinivaasan | 2013-07-09 22:16:28 +0530 (Tue, 09 Jul 2013) | 5 lines

Added utility function read_virgo_config() for testing file IO in virgo module
Also added extern declarations for exported cloud initialization symbols.
Still there is a symbol not found error while executing the module. Probably might require kallsyms lookup (ongoing bugfix)


------------------------------------------------------------------------
r88 | ka_shrinivaasan | 2013-07-09 22:12:57 +0530 (Tue, 09 Jul 2013) | 3 lines

Commented do_virgo_cloud_init() and hardcoded the ip addresses in exported symbols for loadbalancer prototype testing


------------------------------------------------------------------------
r87 | ka_shrinivaasan | 2013-07-08 20:19:03 +0530 (Mon, 08 Jul 2013) | 9 lines

Rewrote (rather ReRewrote) the VFS file read code:
-obtained segment descriptor and replaced file ops read with vfs_read() and reset the descriptor after read.
-File next to read position computation
-initialized the node_ip_addrs_in_cloud with empty string
-commented a printk due to Kernel Panic within it
-Ideally this should be rewritten with sysfs (as per Greg Kroah Hartman's "Things not to do in Kernel"),but for timebeing VFS code suffices for
a prototypical testing of Loadbalancer(especially PRG loadbalancer)


------------------------------------------------------------------------
r86 | ka_shrinivaasan | 2013-07-05 12:01:46 +0530 (Fri, 05 Jul 2013) | 7 lines

- All compilation errors fixed
- do_virgo_cloud_init() rewritten with VFS file I/O calls (filp_open(), file_ops read() etc.,) to read the virgo_cloud.conf config file
- EXPORT_SYMBOL declared for VIRGO cloud related datastructures so as to access them globally (especially from from virgo_clone.c syscall)

Still there is a Kernel Panic in do_Virgo_cloud_init() when kernel boots up. Under investigation.


------------------------------------------------------------------------
r85 | ka_shrinivaasan | 2013-07-05 11:55:46 +0530 (Fri, 05 Jul 2013) | 4 lines

- All compilation errors fixed
- extern declaration for virgo cloud related data structures


------------------------------------------------------------------------
r84 | ka_shrinivaasan | 2013-07-05 11:52:14 +0530 (Fri, 05 Jul 2013) | 6 lines

Added more automation to build script:
-Module.symvers and .config copying from previous build
-cleaning up old build residues
-update-initramfs for loading the modules after build is over


------------------------------------------------------------------------
r83 | ka_shrinivaasan | 2013-07-03 21:11:17 +0530 (Wed, 03 Jul 2013) | 3 lines

Compilation error fixed


------------------------------------------------------------------------
r82 | ka_shrinivaasan | 2013-07-03 21:07:52 +0530 (Wed, 03 Jul 2013) | 3 lines

Compilation error fixed


------------------------------------------------------------------------
r81 | ka_shrinivaasan | 2013-07-03 21:01:40 +0530 (Wed, 03 Jul 2013) | 4 lines

Initial prototypical implementation of Pseudorandom generator based Loadbalancer for virgo_clone() parallelization using get_random_int() done.
More code to be added and testing yet to be done.


------------------------------------------------------------------------
r79 | ka_shrinivaasan | 2013-07-02 16:14:56 +0530 (Tue, 02 Jul 2013) | 5 lines

Pseudorandom generator based loadbalancer for VIRGO clone and cloudexec service
(experimental):
Script to calculate the expected number of requests per each node


------------------------------------------------------------------------
r78 | ka_shrinivaasan | 2013-07-02 16:12:51 +0530 (Tue, 02 Jul 2013) | 3 lines

Updated Virgo Doc with loadbalancing options


------------------------------------------------------------------------
r77 | ka_shrinivaasan | 2013-07-01 13:02:52 +0530 (Mon, 01 Jul 2013) | 3 lines

Updated VIRGO doc with Loadbalancer design spec and alternatives


------------------------------------------------------------------------
r76 | ka_shrinivaasan | 2013-07-01 12:35:27 +0530 (Mon, 01 Jul 2013) | 2 lines

VIRGO design doc updated

------------------------------------------------------------------------
r75 | ka_shrinivaasan | 2013-06-28 13:12:44 +0530 (Fri, 28 Jun 2013) | 3 lines

Probable Linux Kernel 3.7.8 kernel_accept() blocking-nonblocking bug (or at some layer below the stack)


------------------------------------------------------------------------
r74 | ka_shrinivaasan | 2013-06-28 12:54:56 +0530 (Fri, 28 Jun 2013) | 3 lines

test_virgo_clone and telnet usecases output after wake_up_process() fix


------------------------------------------------------------------------
r73 | ka_shrinivaasan | 2013-06-28 12:53:01 +0530 (Fri, 28 Jun 2013) | 7 lines

- Added wake_up_process() for clone function task struct after kthread_create(). kthread_run() would be equally sufficient but wake_up_process()
gives flexibility in choice of wakeup timing.
- Again there was a brief problem with blocking and non-blocking sockets ,but with a difference - this time both didn't work (something seems to be
quite erratic in kernel socket accept()) but blocking socket worked after sometime- this is after a reinstallation of 3.7.8 image from kernel.org PPA and kernel rebuild (27 June 2013)
- clone thread wakesup and test_virgo_clone and telnet log in kern.log correctly


------------------------------------------------------------------------
r72 | ka_shrinivaasan | 2013-06-27 12:29:43 +0530 (Thu, 27 Jun 2013) | 3 lines

Concurrency made to 6


------------------------------------------------------------------------
r71 | ka_shrinivaasan | 2013-06-27 12:27:30 +0530 (Thu, 27 Jun 2013) | 3 lines

printk(s) modified to print buf instead of iovec base


------------------------------------------------------------------------
r70 | ka_shrinivaasan | 2013-06-26 18:49:27 +0530 (Wed, 26 Jun 2013) | 3 lines

test_virgo_clone testcase kern.log output with virgo_cloudexec changes done today


------------------------------------------------------------------------
r69 | ka_shrinivaasan | 2013-06-26 18:46:50 +0530 (Wed, 26 Jun 2013) | 7 lines

Major bugfix commit:
- Reenabled blocking socket as it is working again (probably it is blockingi(B)==(NB)nonblocking problem)
- printk(s) modified to print buffer (send and recv) instead of iovec base which print correctly
- tested with test_virgo_clone and works correctly.



------------------------------------------------------------------------
r68 | ka_shrinivaasan | 2013-06-25 17:57:36 +0530 (Tue, 25 Jun 2013) | 3 lines

Updated VIRGO design doc


------------------------------------------------------------------------
r67 | ka_shrinivaasan | 2013-06-25 17:54:20 +0530 (Tue, 25 Jun 2013) | 4 lines

1.Changed BUF_SIZE to buflen
2.Changed GFP_KERNEL to GFP_ATOMIC for atomic allocation of kernel memory


------------------------------------------------------------------------
r66 | ka_shrinivaasan | 2013-06-24 17:06:00 +0530 (Mon, 24 Jun 2013) | 4 lines

Telnet to virgo_cloudexec kernel service port (from user address-space to kernel address-space) works.
Testcase output committed for reference


------------------------------------------------------------------------
r65 | ka_shrinivaasan | 2013-06-12 22:33:53 +0530 (Wed, 12 Jun 2013) | 5 lines

1.Added little endian to CPU byte order conversion for message received over kernel_recvmsg()
2.Added sock_release() for client socket
3.Defined new utility function print_buffer() to output buffer contents


------------------------------------------------------------------------
r64 | ka_shrinivaasan | 2013-06-12 22:30:02 +0530 (Wed, 12 Jun 2013) | 3 lines

Added prototype for print_buffer() function to print buffer contents


------------------------------------------------------------------------
r63 | ka_shrinivaasan | 2013-06-12 22:28:42 +0530 (Wed, 12 Jun 2013) | 7 lines

1. Set the msg_flags to 0
2. Added little endian to cpu byte order conversion for message received through kernel_recvmsg()
3. Added a print_buffer() utility function to print the contents of the buffer
4. Some more printk(s)
5. Added sock_release() for server side client socket


------------------------------------------------------------------------
r62 | ka_shrinivaasan | 2013-06-11 18:07:01 +0530 (Tue, 11 Jun 2013) | 5 lines

1. Lots of printk(s) added.
2. Message header fields and iovec fields related commissions and omissions
3. test_virgo_clone block resolved 


------------------------------------------------------------------------
r61 | ka_shrinivaasan | 2013-06-11 18:02:36 +0530 (Tue, 11 Jun 2013) | 3 lines

Changed nr to 1 and initialized header


------------------------------------------------------------------------
r60 | ka_shrinivaasan | 2013-06-07 18:45:03 +0530 (Fri, 07 Jun 2013) | 9 lines

1. Blocking-Nonblocking weirdo comes haun ting again. Again Blocking doesn't work and Nonblocking kernel_accept works. Hence commented Non-blocking  and
uncommented blocking. Again VIRGO clone syscall client and VIRGO kernel service remain same.
Ran a chkrootkit and found an infected bindshell port. Something is not right.

2. Added Server side  client socket shutdown with SOCK_WAKE_URG

3. Added some printk(s) and commented some.


------------------------------------------------------------------------
r59 | ka_shrinivaasan | 2013-06-06 08:12:37 +0530 (Thu, 06 Jun 2013) | 2 lines

Updated VIRGO design doc

------------------------------------------------------------------------
r58 | ka_shrinivaasan | 2013-06-06 08:10:08 +0530 (Thu, 06 Jun 2013) | 3 lines

Checkin for lot of msghdr related bug resolution (ongoing)


------------------------------------------------------------------------
r57 | ka_shrinivaasan | 2013-06-06 08:07:38 +0530 (Thu, 06 Jun 2013) | 4 lines

Checkin for lot of msghdr related ongoing bug resolutions
in VIRGO clone client


------------------------------------------------------------------------
r56 | ka_shrinivaasan | 2013-05-24 20:44:33 +0530 (Fri, 24 May 2013) | 12 lines

1. Changed PF_INET to AF_INET though internally synonymous
2. Blocking mode works in this commit again. No changes were made in virgo_clone() or driver code. 
Hence making it a blocking kernel service socket from non-blocking. Root cause for this weird behaviour remains unknown and seems
external to both linux and VIRGO codebases as nothing has changed apparently. 
3. Added lot of printk(s) for debugging
4. Removed MSG_DONTWAIT flag for kernel_recvmsg()
5. NULL check modified for clientsock.
6. Console telnet works but still recv length is not right.
7. Due to non-persisting client sock values, declared socket data structures as static.



------------------------------------------------------------------------
r55 | ka_shrinivaasan | 2013-05-24 20:32:04 +0530 (Fri, 24 May 2013) | 3 lines

Made all the socket related data structures static for the time-being


------------------------------------------------------------------------
r54 | ka_shrinivaasan | 2013-05-23 23:00:13 +0530 (Thu, 23 May 2013) | 6 lines

Moved sock_create(),bind() and listen() for kernel server socket from virgo_create() to module init() so that only kernel_accept() is done
within virgo_create() that is within the service infinite loop. 

Also added non-NULL if checks for client socket in sendto() and recvfrom() ops.


------------------------------------------------------------------------
r52 | ka_shrinivaasan | 2013-05-22 22:19:57 +0530 (Wed, 22 May 2013) | 3 lines

test_virgo_clone testcase output with nonblocking VIRGO cloudexec service kernel service socket showing sends and recvs


------------------------------------------------------------------------
r51 | ka_shrinivaasan | 2013-05-22 22:17:51 +0530 (Wed, 22 May 2013) | 3 lines

Added more printk(s) for debugging 


------------------------------------------------------------------------
r50 | ka_shrinivaasan | 2013-05-22 22:16:29 +0530 (Wed, 22 May 2013) | 4 lines

Changed Blocking socket to Non-blocking socket due to an unknown problem which did not occur in previous versions.More details in
code comments inline.


------------------------------------------------------------------------
r49 | ka_shrinivaasan | 2013-05-22 22:14:05 +0530 (Wed, 22 May 2013) | 2 lines

Increased concurrency to 5

------------------------------------------------------------------------
r48 | ka_shrinivaasan | 2013-05-20 18:13:06 +0530 (Mon, 20 May 2013) | 3 lines

Updated VIRGO Design Document.


------------------------------------------------------------------------
r47 | ka_shrinivaasan | 2013-05-20 18:09:25 +0530 (Mon, 20 May 2013) | 3 lines

Makefile for test_virgo_clone.c added to repository


------------------------------------------------------------------------
r46 | ka_shrinivaasan | 2013-05-20 18:08:22 +0530 (Mon, 20 May 2013) | 4 lines

virgo_clone() system call connects to virgo cloudexec driver as invoked by syscall number through test_virgo_clone.c
netstat -ntap output committed for reference (showing VIRGO system call kernel client connecting to VIRGO cloud exec
driver with ESTABLISHED state with lot more testing yet to be done).

------------------------------------------------------------------------
r45 | ka_shrinivaasan | 2013-05-20 18:04:33 +0530 (Mon, 20 May 2013) | 3 lines

test_virgo_clone binary committed for ready reference


------------------------------------------------------------------------
r44 | ka_shrinivaasan | 2013-05-20 18:02:22 +0530 (Mon, 20 May 2013) | 3 lines

Added multicore option to modules_install and install. Also added headers_install target.


------------------------------------------------------------------------
r43 | ka_shrinivaasan | 2013-05-17 19:08:26 +0530 (Fri, 17 May 2013) | 3 lines

VIRGO Design Doc updated.


------------------------------------------------------------------------
r42 | ka_shrinivaasan | 2013-05-16 17:12:49 +0530 (Thu, 16 May 2013) | 4 lines

Added /etc/modules to VIRGO version control for reference and to document update-initramfs and modprobe 
to be done before system startup


------------------------------------------------------------------------
r41 | ka_shrinivaasan | 2013-05-16 16:27:54 +0530 (Thu, 16 May 2013) | 3 lines

Util shell script to find recently modified files


------------------------------------------------------------------------
r40 | ka_shrinivaasan | 2013-05-16 16:22:54 +0530 (Thu, 16 May 2013) | 14 lines

commented all boot-time VIRGO initialization code, as it has now been properly moved to VIRGO cloudexec module_init which would
spawn a kernel thread for the service listening at the port 10000.

Moreover this unleashed a pandora's box of linker undefined symbols due to virgo headers that were difficult to resolve. Alternatives
explored were:
1) Statically linking in VIRGO drivers
2) To do something similar to write_threads in NFS driver but even that proved time consuming 
3) Do something within driver_init() and xxx_initcall() which was equally difficult as there were no support for
external modules

Enlisting in /etc/modules and spawning the thread from cloudexec module_init() appeared to be the best possible way to start the listener
while system boots-up


------------------------------------------------------------------------
r39 | ka_shrinivaasan | 2013-05-16 16:15:49 +0530 (Thu, 16 May 2013) | 3 lines

init Makefile(no VIRGO specific changes yet, but committed for completeness)


------------------------------------------------------------------------
r38 | ka_shrinivaasan | 2013-05-16 16:13:18 +0530 (Thu, 16 May 2013) | 3 lines

Added entry for VIRGO cloudexec driver but commented due to build error


------------------------------------------------------------------------
r37 | ka_shrinivaasan | 2013-05-16 16:11:01 +0530 (Thu, 16 May 2013) | 3 lines

commented virgo_clone() entry as this seems to be autogenerated anyway


------------------------------------------------------------------------
r36 | ka_shrinivaasan | 2013-05-16 16:09:15 +0530 (Thu, 16 May 2013) | 11 lines

Updated VIRGO cloudexec driver with:
- EXPORT_SYMBOL to export all module functions via Module.symvers
- #include(d) virgocloudexecsvc.h
- invoked virgo_cloudexec_service() function to start the kernel thread for virgo cloudexec service

With these, along with other commits today, and /etc/modules listing, VIRGO cloudexec kernel thread successfully spawns at listens for requests
at port 10000. 

Thus a minimalistic VIRGO cloudexec kernel extension is ready with testing to be done.


------------------------------------------------------------------------
r35 | ka_shrinivaasan | 2013-05-16 16:03:08 +0530 (Thu, 16 May 2013) | 6 lines

This is a backup folder to keep the VIRGO driver as a Kernel Loadable Module. This is as part of experimentation to
see if VIRGO can be made a statically linked builtin kernel module.

If /etc/modules works well then there is no need for either of the above.


------------------------------------------------------------------------
r34 | ka_shrinivaasan | 2013-05-16 16:00:23 +0530 (Thu, 16 May 2013) | 4 lines

Added VIRGO cloudexec driver to the end of the Kconfig file but commented it due to "invalid format" error
during compilation, must have a relook later.


------------------------------------------------------------------------
r33 | ka_shrinivaasan | 2013-05-16 15:49:42 +0530 (Thu, 16 May 2013) | 6 lines

Updated VIRGO headers:

virgo.h - contains all the typedefs for virgo_cloudexec module
virgocloudexecsvc.h - contains only stuff related to creation of virgo cloudexec kernel thread service


------------------------------------------------------------------------
r32 | ka_shrinivaasan | 2013-05-16 15:47:17 +0530 (Thu, 16 May 2013) | 4 lines

As part of KBUILD_EXTRA_SYMBOLS experimentation tried adding the module exported symbols to KBUILD_VMLINUX_INIT path to solve
vmlinux related linker errors,but commented at present.


------------------------------------------------------------------------
r31 | ka_shrinivaasan | 2013-05-16 15:44:52 +0530 (Thu, 16 May 2013) | 3 lines

changed obj-m to obj-y due to undefined symbol linker error


------------------------------------------------------------------------
r30 | ka_shrinivaasan | 2013-05-16 15:43:03 +0530 (Thu, 16 May 2013) | 3 lines

Adding syscalls Makefile and syscall table for 64-bit to repository


------------------------------------------------------------------------
r29 | ka_shrinivaasan | 2013-05-16 15:40:31 +0530 (Thu, 16 May 2013) | 13 lines

Linux Kbuild scripts for linking vmlinux and doing modpost:

-Added KBUILD_EXTRA_SYMBOLS to link-vmlinux.sh while trying to solve ld error with vmlinux due undefined symbol errors with VIRGO module symbols
-Added KBUILD_EXTRA_SYMBOLS to Makefile.modpost also

But above was just an experimentation while tring to choose one of the three options to load VIRGO at startup:
1) Adding module name to /etc/modules after an update-initramfs
2) Maintaining status-quo of VIRGO as a loadable module
3) VIRGO as a static builtin kernel module

For the timebeing VIRGO has been added to /etc/modules as the simplest solution


------------------------------------------------------------------------
r28 | ka_shrinivaasan | 2013-05-16 15:32:13 +0530 (Thu, 16 May 2013) | 3 lines

Modified buildscript with option for multiprocessing added to make commandline


------------------------------------------------------------------------
r27 | ka_shrinivaasan | 2013-05-08 17:38:19 +0530 (Wed, 08 May 2013) | 3 lines

Documentation comments changed to "VIRGO driver and service for cloudexec"


------------------------------------------------------------------------
r26 | ka_shrinivaasan | 2013-05-07 18:57:50 +0530 (Tue, 07 May 2013) | 3 lines

Kernel OOPS kern.log committed for future reference and for aiding debugging


------------------------------------------------------------------------
r25 | ka_shrinivaasan | 2013-05-07 18:53:13 +0530 (Tue, 07 May 2013) | 3 lines

Added virgo cloud driver directory to build


------------------------------------------------------------------------
r24 | ka_shrinivaasan | 2013-05-07 18:50:11 +0530 (Tue, 07 May 2013) | 3 lines

Linux 3.7.8 Kernel Build Script 


------------------------------------------------------------------------
r23 | ka_shrinivaasan | 2013-05-06 15:00:11 +0530 (Mon, 06 May 2013) | 3 lines

New header file for uniting all VIRGO related declarations, typedefs etc., in a single place


------------------------------------------------------------------------
r22 | ka_shrinivaasan | 2013-05-06 14:56:53 +0530 (Mon, 06 May 2013) | 3 lines

added unistd.h containing syscall declaration and syscall number for virgo_clone() system call


------------------------------------------------------------------------
r21 | ka_shrinivaasan | 2013-05-06 14:34:20 +0530 (Mon, 06 May 2013) | 3 lines

Moved #include(s) to virgo.h under include/linux folder and #include(d) virgo.h in this file


------------------------------------------------------------------------
r20 | ka_shrinivaasan | 2013-05-06 14:32:16 +0530 (Mon, 06 May 2013) | 3 lines

Object target added for VIRGO kernel service


------------------------------------------------------------------------
r19 | ka_shrinivaasan | 2013-05-06 14:30:34 +0530 (Mon, 06 May 2013) | 4 lines

New Kernel Service for VIRGO cloud execution similar to NFS service. Removed all dependencies on SUN RPC headers viz., xxx_ops and xxx_class
and created separate class and ops data structures specific to VIRGO


------------------------------------------------------------------------
r18 | ka_shrinivaasan | 2013-05-06 14:24:17 +0530 (Mon, 06 May 2013) | 3 lines

Added build autogenerated mach-types file to repository for reference


------------------------------------------------------------------------
r17 | ka_shrinivaasan | 2013-05-06 14:22:06 +0530 (Mon, 06 May 2013) | 4 lines

Added the virgo kernel service thread initialization code to basic setup after all init work is completed and a function to
create kernel thread for virgo service


------------------------------------------------------------------------
r16 | ka_shrinivaasan | 2013-05-06 14:19:05 +0530 (Mon, 06 May 2013) | 2 lines

testcase binary for virgo_clone() system call committed for ready download

------------------------------------------------------------------------
r15 | ka_shrinivaasan | 2013-05-06 14:16:24 +0530 (Mon, 06 May 2013) | 3 lines

port number changed


------------------------------------------------------------------------
r14 | ka_shrinivaasan | 2013-05-02 15:19:06 +0530 (Thu, 02 May 2013) | 3 lines

Updated doc for prototype


------------------------------------------------------------------------
r13 | ka_shrinivaasan | 2013-05-02 15:14:46 +0530 (Thu, 02 May 2013) | 5 lines

Ongoing Refactoring of the module code for implementing xprt_ops in SUN RPC headers by
segregating the accept, send and receive functionalities into separate operation functions
mentioned in xprt_ops


------------------------------------------------------------------------
r12 | ka_shrinivaasan | 2013-04-30 21:50:37 +0530 (Tue, 30 Apr 2013) | 10 lines

Bugfix for Kernel OOPS(continued):

- changed AF_INET to PF_INET though linux kernel headers declare them synonymous
- commented MSG_DONTWAIT
- memset() for sockaddr_in
- more printk() for debug info
- removed O_NONBLOCK to avoid the expected EAGAIN error during non-blocking accept in the absence of outstanding requests 
and changed it to a blocking kernel_accept() (probably might require workqueues for non-blocking kernel_accept())


------------------------------------------------------------------------
r11 | ka_shrinivaasan | 2013-04-29 17:44:29 +0530 (Mon, 29 Apr 2013) | 40 lines

Kernel OOPS bugfix (continued):
- added typedef for function pointer return type
- added printk() for logging debug info to /var/kern/kern.log
- changed sock_create() to sock_create_kern()
- some reshuffling of declarations
- other sundry work

Reference: Kernel OOPS throws errno 11 during kernel_accept():
--------------------------------------------------------------
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.753913] sock_create() returns error code: 0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.753935] kernel_accept() returns error code: -11
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.753948] BUG: unable to handle kernel NULL pointer dereference at 00000014
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.754052] IP: [<c14f1180>] sock_recvmsg+0xa0/0x110
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.754121] *pdpt = 000000002cd2a001 *pde = 0000000000000000
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.754193] Oops: 0000 [#1] SMP
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.754238] Modules linked in: virgo_cloudexec(OF+) ppp_deflate zlib_deflate bsd_comp ppp_async crc_ccitt dm_crypt xt_hl ip6t_rt nf_conntrack_ipv6 nf_defrag_ipv6 ipt_REJECT xt_LOG xt_limit xt_tcpudp xt_addrtype bnep nf_conntrack_ipv4 nf_defrag_ipv4 xt_state rfcomm bluetooth parport_pc ppdev ip6table_filter ip6_tables nf_conntrack_netbios_ns nf_conntrack_broadcast nf_nat_ftp nf_nat nf_conntrack_ftp nf_conntrack iptable_filter ip_tables x_tables uvcvideo snd_hda_codec_idt snd_hda_intel snd_hda_codec joydev option videobuf2_core usb_wwan videodev usbserial videobuf2_vmalloc coretemp videobuf2_memops dell_wmi dell_laptop snd_hwdep sparse_keymap snd_pcm snd_seq_midi gpio_ich snd_rawmidi microcode mac_hid snd_seq_midi_event dcdbas snd_seq psmouse binfmt_misc snd_timer snd_seq_device serio_raw lpc_ich snd soundcore snd_page_alloc lp parport ums_realtek usb_storage i915 ahci libahci drm_kms_helper sky2 drm i2c_algo_bit wmi video
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755419] Pid: 4795, comm: insmod Tainted: GF          O 3.7.8-030708-generic #201302141605 Dell Inc. Inspiron 1545                   /0J037P
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755568] EIP: 0060:[<c14f1180>] EFLAGS: 00010246 CPU: 0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755636] EIP is at sock_recvmsg+0xa0/0x110
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755688] EAX: 00000000 EBX: c0000000 ECX: 00000000 EDX: ecd5bd18
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755761] ESI: 00000000 EDI: ecd5bca0 EBP: ecd5bcec ESP: ecd5bc14
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755835]  DS: 007b ES: 007b FS: 00d8 GS: 00e0 SS: 0068
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.756437] CR0: 80050033 CR2: 00000014 CR3: 2cd04000 CR4: 000407f0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] DR0: 00000000 DR1: 00000000 DR2: 00000000 DR3: 00000000
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] DR6: ffff0ff0 DR7: 00000400
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] Process insmod (pid: 4795, ti=ecd5a000 task=efbd32c0 task.ti=ecd5a000)
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] Stack:
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  00000040 00000000 00000000 ecd5bd18 ecd5bc28 00000000 00000000 00000000
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  00000001 ffffffff 00000000 00000000 00000000 00000000 00000000 efbd32c0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  00000000 00000000 00000000 00000000 ecd5bca0 00000000 00000000 00000000
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] Call Trace:
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c104c846>] ? console_unlock+0x16/0x30
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c14f122a>] kernel_recvmsg+0x3a/0x50
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<f844d0fe>] virgocloudexec_init+0xfe/0x1000 [virgo_cloudexec]
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c107beac>] ? ttwu_queue+0xac/0xc0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c1044d6c>] ? kmap_atomic_prot+0x4c/0x120
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c1115550>] ? prep_new_page+0x110/0x1d0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c103d898>] ? default_spin_lock_flags+0x8/0x10
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c1031a9c>] ? native_send_call_func_single_ipi+0x2c/0x

------------------------------------------------------------------------
r10 | ka_shrinivaasan | 2013-04-26 18:30:00 +0530 (Fri, 26 Apr 2013) | 3 lines

Some ongoing bugfix for Kernel OOPS:
-fixed parameter signatures for kernel_xxx() calls in virgo_cloudexec kernel module

------------------------------------------------------------------------
r9 | ka_shrinivaasan | 2013-04-26 18:28:04 +0530 (Fri, 26 Apr 2013) | 5 lines

Some ongoing bugfix for Kernel OOPS:
1. added virgo_clone.mod.c  and kernel object built to repository 
2. fixed some parameter signatures in kernel_xxx() calls


------------------------------------------------------------------------
r8 | ka_shrinivaasan | 2013-04-24 15:48:31 +0530 (Wed, 24 Apr 2013) | 3 lines

Testcase for virgo_clone() system call by its number 350
through syscall()

------------------------------------------------------------------------
r7 | ka_shrinivaasan | 2013-04-23 22:04:44 +0530 (Tue, 23 Apr 2013) | 3 lines

Initial prototype for VIRGO linux kernel extension for cloud (CPU and memory pooling) - VIRGO cloudexec kernel module and virgo_clone() system call


------------------------------------------------------------------------
r6 | ka_shrinivaasan | 2013-04-23 21:46:39 +0530 (Tue, 23 Apr 2013) | 3 lines

deleting due to incorrect commit


------------------------------------------------------------------------
r5 | ka_shrinivaasan | 2013-04-23 20:36:52 +0530 (Tue, 23 Apr 2013) | 2 lines

Initial prototype like code for CPU pooling (virgo_clone() system call and virgo_cloudexec module)

------------------------------------------------------------------------
r4 | ka_shrinivaasan | 2013-04-23 20:33:43 +0530 (Tue, 23 Apr 2013) | 2 lines

Updated design document

------------------------------------------------------------------------
r3 | ka_shrinivaasan | 2013-04-18 12:51:17 +0530 (Thu, 18 Apr 2013) | 3 lines

Virgo linux module extension with cloud capabilities - design document initial version


------------------------------------------------------------------------
r2 | ka_shrinivaasan | 2013-04-05 11:12:12 +0530 (Fri, 05 Apr 2013) | 4 lines

Linux 3.2.0 and Linux 3.7.8 Kernel Build reference commandlines and documents.
Also committed are USBmd module build commandlines for Linux 3.7.8


------------------------------------------------------------------------
r1 | allura | 2013-03-01 09:55:42 +0530 (Fri, 01 Mar 2013) | 1 line

Initial commit
------------------------------------------------------------------------
