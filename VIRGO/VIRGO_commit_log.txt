------------------------------------------------------------------------
r696 | ka_shrinivaasan | 2015-02-19 09:55:58 +0530 (Thu, 19 Feb 2015) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r695 | ka_shrinivaasan | 2015-02-07 10:50:21 +0530 (Sat, 07 Feb 2015) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r694 | ka_shrinivaasan | 2015-01-08 17:25:58 +0530 (Thu, 08 Jan 2015) | 3 lines

Virtual Generic Linux OS Kernel - VIRGO Linux Kernel - version 15.1.8 released


------------------------------------------------------------------------
r693 | ka_shrinivaasan | 2015-01-04 12:42:54 +0530 (Sun, 04 Jan 2015) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r692 | ka_shrinivaasan | 2015-01-04 11:23:36 +0530 (Sun, 04 Jan 2015) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r691 | ka_shrinivaasan | 2015-01-02 17:11:45 +0530 (Fri, 02 Jan 2015) | 8 lines

EventNet vertex file append bugfix:
----------------------------------
- set_fs() start/end clauses scope expanded to entire function
- APPEND flag removed for vertices file
- kern.log with edge and vertex messages and kernel generated vertices and edges files with this bug resolution
- build generated binaries and sources


------------------------------------------------------------------------
r690 | ka_shrinivaasan | 2015-01-02 15:25:10 +0530 (Fri, 02 Jan 2015) | 7 lines

- GFP_KERNEL allocs made to GFP_ATOMIC allocs
- type int changed to loff_t for prevreadpos due to invalid argument error (-22)
- more debug printk(s)
- But still the vfs_write() has a problem in writing to the prevreadpos offset. In the logs though
prevreadpos is 0 vfs_write() doesnot overwrite the offset from 0 but appends


------------------------------------------------------------------------
r689 | ka_shrinivaasan | 2015-01-02 15:20:13 +0530 (Fri, 02 Jan 2015) | 3 lines

kern.log and kernel generated EventNet vertices and edges text files


------------------------------------------------------------------------
r688 | ka_shrinivaasan | 2014-12-31 15:48:02 +0530 (Wed, 31 Dec 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r687 | ka_shrinivaasan | 2014-12-31 15:39:02 +0530 (Wed, 31 Dec 2014) | 3 lines

code changes for eventnet_vertexmsg bugs, kern.log and screenshots, kernel object files and build sources


------------------------------------------------------------------------
r686 | ka_shrinivaasan | 2014-12-19 15:18:32 +0530 (Fri, 19 Dec 2014) | 83 lines

ONGOING:

- readpos for vfs_read() changed to &vfs_read and buf size to 500 
- There is still a crash within vertexmsg function despite above.

----------------
vfs_read() crash:
----------------
_eventnet_ops.virgo_eventnet_recvfrom()
Dec 19 15:04:30 shrinivaasanka-Inspiron-1545 kernel: [  116.917764] virgocloudexec_eventnet_recvfrom(): before kernel_recvmsg()
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456002] virgocloudexec_eventnet_recvfrom(): kernel_recvmsg() returns len: 27
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456030] strip_control_M(): str=eventnet_vertexmsg#1#3#5#
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456030]  before strsep
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456034] strip_control_M(): newstr=eventnet_vertexmsg#1#3#5# after carriage return newline strsep
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456036] virgocloudexec_eventnet_recvfrom(): kernel_recvmsg() returns in recv: iov.iov_base=, buffer: eventnet_vertexmsg#1#3#5#
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456036] 
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456039] parse_virgoeventnet_command: vmargs->event_message_type: eventnet_vertexmsg
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456041] parse_virgoeventnet_command: vmargs->event_id: 1
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456043] parse_virgoeventnet_command: vmargs->eventid_args[0]: 3
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456044] parse_virgoeventnet_command: vmargs->eventid_args[1]: 5
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456046] eventnet_func(): creating kernel thread and waking up, parameterIsExecutable=2
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456048] Creating Kernel Thread for eventnet_vertexmsg in virgo_cloud_eventnet_kernelspace eventnet driver module 
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456068] BUG: unable to handle kernel NULL pointer dereference at 00000006
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456073] IP: [<c1181f0e>] vfs_read+0xe/0x150
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456081] *pdpt = 000000002a3af001 *pde = 0000000000000000 
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456085] Oops: 0000 [#1] SMP 
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456089] Modules linked in: rfcomm bnep bluetooth 6lowpan_iphc dm_crypt binfmt_misc virgo_cloudexec_eventnet(O+) virgo_cloud_eventnet_kernelspace(O) lp parport option usb_wwan usbserial arc4 b43 bcma mac80211 snd_hda_codec_idt snd_hda_codec_generic snd_hda_intel snd_hda_controller snd_hda_codec snd_hwdep snd_pcm uvcvideo snd_seq_midi snd_seq_midi_event snd_rawmidi joydev videobuf2_vmalloc videobuf2_memops videobuf2_core videodev snd_seq dell_wmi gpio_ich cfg80211 sparse_keymap snd_seq_device snd_timer snd dell_laptop dcdbas coretemp psmouse soundcore serio_raw lpc_ich mac_hid i915 ums_realtek uas i2c_algo_bit ssb sky2 drm_kms_helper ahci drm libahci wmi video
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456141] CPU: 0 PID: 3048 Comm: virgo eventnet  Tainted: G           O  3.15.5 #1
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456143] Hardware name: Dell Inc. Inspiron 1545                   /0J037P, BIOS A14 12/07/2009
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456145] task: ee470000 ti: f52e4000 task.ti: f52e4000
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456148] EIP: 0060:[<c1181f0e>] EFLAGS: 00010282 CPU: 0
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456150] EIP is at vfs_read+0xe/0x150
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456153] EAX: ffffffe2 EBX: ea08a000 ECX: 000001f4 EDX: ea08a000
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456155] ESI: ea3bd9a0 EDI: ea3bd9a0 EBP: f52e5a84 ESP: f52e5a68
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456157]  DS: 007b ES: 007b FS: 00d8 GS: 00e0 SS: 0068
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456159] CR0: 8005003b CR2: 00000006 CR3: 2a606000 CR4: 000407f0
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456161] Stack:
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456163]  000001f4 f8ae2049 000000d0 ea08a000 ea08a000 ea3bd9a0 ea3bd9a0 f52e5acc
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456169]  f8ae2076 f52e5ab8 c1b13dc2 00000000 f5c01e00 f8b7e906 ea3bdf60 0000001f
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456175]  000000d0 ea3bdb80 ea08be00 0000001f 00000000 00000000 ea3bda80 ea3bd9a0
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456182] Call Trace:
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456188]  [<f8ae2049>] ? virgo_cloud_eventnet_vertexmsg_kernelspace+0x49/0x170 [virgo_cloud_eventnet_kernelspace]
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456193]  [<f8ae2076>] virgo_cloud_eventnet_vertexmsg_kernelspace+0x76/0x170 [virgo_cloud_eventnet_kernelspace]
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456198]  [<f8b7e906>] ? eventnet_func+0x246/0x260 [virgo_cloudexec_eventnet]
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456203]  [<f8b7e911>] eventnet_func+0x251/0x260 [virgo_cloudexec_eventnet]
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456209]  [<c1088cdf>] ? sched_slice.isra.44+0x4f/0x90
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456214]  [<c12fd37a>] ? number.isra.2+0x33a/0x350
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456217]  [<c12fd37a>] ? number.isra.2+0x33a/0x350
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456220]  [<c12fca72>] ? format_decode+0x352/0x3c0
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456224]  [<c12fca72>] ? format_decode+0x352/0x3c0
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456227]  [<c12fef0b>] ? vsnprintf+0x22b/0x380
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456231]  [<c12ff10c>] ? sprintf+0x1c/0x20
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456236]  [<c10a7ce1>] ? print_time.part.9+0x71/0xb0
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456239]  [<c10a7d82>] ? print_prefix+0x62/0xb0
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456243]  [<c10a7e9d>] ? msg_print_text+0xcd/0x190
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456246]  [<c10a7e9d>] ? msg_print_text+0xcd/0x190
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456249]  [<c109cdda>] ? up+0x2a/0x40
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456253]  [<c10a9607>] ? console_unlock+0x287/0x460
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456258]  [<c166f3e5>] ? printk+0x50/0x52
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456263]  [<f8b7ea54>] virgocloudexec_eventnet_recvfrom+0x134/0x13b [virgo_cloudexec_eventnet]
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456270]  [<f8b7e000>] ? 0xf8b7dfff
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456274]  [<f8b7e023>] virgo_eventnet_client_thread+0x23/0x50 [virgo_cloudexec_eventnet]
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456279]  [<c10768b1>] kthread+0xa1/0xc0
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456283]  [<c1681641>] ret_from_kernel_thread+0x21/0x30
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456287]  [<c1076810>] ? kthread_create_on_node+0x110/0x110
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456289] Code: 84 0f 8c 4d ff ff ff 39 45 08 8d 76 00 73 eb e9 40 ff ff ff 89 f6 8d bc 27 00 00 00 00 55 89 e5 57 56 53 83 ec 10 66 66 66 66 90 <f6> 40 24 01 89 c3 89 d7 0f 84 2c 01 00 00 8b 40 14 8b 50 08 85
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456330] EIP: [<c1181f0e>] vfs_read+0xe/0x150 SS:ESP 0068:f52e5a68
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456335] CR2: 0000000000000006
Dec 19 15:04:45 shrinivaasanka-Inspiron-1545 kernel: [  132.456338] ---[ end trace ee1b9a670812119b ]---
Dec 19 15:05:36 shrinivaasanka-Inspiron-1545 kernel: [  183.401402] EXT4-fs (sda5): mounting ext3 file system using the ext4 subsystem
Dec 19 15:05:36 shrinivaasanka-Inspiron-1545 kernel: [  183.447954] EXT4-fs (sda5): warning: mounting fs with errors, running e2fsck is recommended
Dec 19 15:05:36 shrinivaasanka-Inspiron-1545 kernel: [  183.448288] EXT4-fs (sda5): mounted filesystem with ordered data mode. Opts: (null)
Dec 19 15:07:55 shrinivaasanka-Inspiron-1545 kernel: [  322.732132] perf interrupt took too long (2510 > 2500), lowering kernel.perf_event_max_sample_rate to 50000
Dec 19 15:09:27 shrinivaasanka-Inspiron-1545 kernel: [  414.034317] option1 ttyUSB0: option_instat_callback: error -2
Dec 19 15:09:39 shrinivaasanka-Inspiron-1545 kernel: [  426.745780] PPP BSD Compression module registered
Dec 19 15:09:39 shrinivaasanka-Inspiron-1545 kernel: [  426.762186] PPP Deflate Compression module registered
Dec 19 15:09:55 shrinivaasanka-Inspiron-1545 kernel: [  442.626736] option1 ttyUSB0: option_instat_callback: error -2
Dec 19 15:09:57 shrinivaasanka-Inspiron-1545 kernel: [  444.393622] option1 ttyUSB0: option_instat_callback: error -2
Dec 19 15:10:37 shrinivaasanka-Inspiron-1545 kernel: [  484.320224] EXT4-fs (sda5): error count: 107
Dec 19 15:10:37 shrinivaasanka-Inspiron-1545 kernel: [  484.320241] EXT4-fs (sda5): initial error at 1408198686: ext4_mb_generate_buddy:756
Dec 19 15:10:37 shrinivaasanka-Inspiron-1545 kernel: [  484.320246] EXT4-fs (sda5): last error at 1408809512: ext4_mb_generate_buddy:756


------------------------------------------------------------------------
r685 | ka_shrinivaasan | 2014-12-18 17:27:21 +0530 (Thu, 18 Dec 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r684 | ka_shrinivaasan | 2014-12-18 17:23:39 +0530 (Thu, 18 Dec 2014) | 3 lines

Bugfix for the eventnet_vertexmsg clause - new vertex or updating an existing vertex partakers and conversations


------------------------------------------------------------------------
r683 | ka_shrinivaasan | 2014-12-18 15:11:15 +0530 (Thu, 18 Dec 2014) | 13 lines

Miscellaneous bugfixes,logs and screenshot
------------------------------------------
- virgo_cloudexec_eventnet.c - eventnet messages parser errors and eventnet_func bugs fixed
- virgo_cloud_eventnet_kernelspace.c - filp_open() args updated due to vfs_write() kernel panics. The vertexmessage vfs_write is done 
                        after looping through the vertice textfile and appending the conversation to the existing vertex.Some more code
                        has to be added.
- VIRGO EventNet build script updated for copying Module.symvers from utils driver for merging with eventnet Module.symvers during Kbuild
- Other build generated sources and kernel objects
- new testlogs directory with screenshot for edgemsg sent to EventNet kernel service and kern.log with previous history for vfs_write()
                        panics due to permissions and the logs for working filp_open() fixed version



------------------------------------------------------------------------
r682 | ka_shrinivaasan | 2014-12-17 15:44:33 +0530 (Wed, 17 Dec 2014) | 3 lines

Updated VIRGO Design Document and ModulesListenPorts.txt


------------------------------------------------------------------------
r681 | ka_shrinivaasan | 2014-12-17 15:24:06 +0530 (Wed, 17 Dec 2014) | 17 lines

Initial code commits for VIRGO EventNet kernel module service:
--------------------------------------------------------------
1.EventNet Kernel Service listens on port 20000
2.It receives eventnet log messages from VIRGO cloud nodes and writes the log messages after parsing into
two text files /var/log/eventnet/EventNetEdges.txt and /var/log/eventnet/EventNetVertices.txt b VFS call$
3.These text files can then be processed by the EventNet implementations in AsFer (python pygraph and C+$
4.Two new directories virgo/utils and virgo/eventnet have been added.    
5.virgo/eventnet has the new VIRGO EventNet kernel module service implementation that listens on port 20$
6.virgo/utils is the new generic utilities driver that has a virgo_eventnet_log() export function which $
7.EventNet log messages have two formats:
        - Edge message - "eventnet_edgemsg#<id>#<from_event>#<to_event>"
        - Vertex message - "eventnet_vertextmsg#<id>#<partakers csv>#<partaker conversations csv>"
8.The utilities driver Module.symvers have to be copied to any driver which are then merged with the sym$
9.virgo/utils driver can be populated with all necessary utility exported functions that might be needed$
10.Calls to virgo_eventnet_log() have to be #ifdef guarded as this is quite network intensive.


------------------------------------------------------------------------
r680 | ka_shrinivaasan | 2014-12-17 15:17:19 +0530 (Wed, 17 Dec 2014) | 17 lines

Initial code commits for VIRGO EventNet kernel module service:
--------------------------------------------------------------
1.EventNet Kernel Service listens on port 20000
2.It receives eventnet log messages from VIRGO cloud nodes and writes the log messages after parsing into
two text files /var/log/eventnet/EventNetEdges.txt and /var/log/eventnet/EventNetVertices.txt b VFS call$
3.These text files can then be processed by the EventNet implementations in AsFer (python pygraph and C+$
4.Two new directories virgo/utils and virgo/eventnet have been added.    
5.virgo/eventnet has the new VIRGO EventNet kernel module service implementation that listens on port 20$
6.virgo/utils is the new generic utilities driver that has a virgo_eventnet_log() export function which $
7.EventNet log messages have two formats:
        - Edge message - "eventnet_edgemsg#<id>#<from_event>#<to_event>"
        - Vertex message - "eventnet_vertextmsg#<id>#<partakers csv>#<partaker conversations csv>"
8.The utilities driver Module.symvers have to be copied to any driver which are then merged with the sym$
9.virgo/utils driver can be populated with all necessary utility exported functions that might be needed$
10.Calls to virgo_eventnet_log() have to be #ifdef guarded as this is quite network intensive.


------------------------------------------------------------------------
r679 | ka_shrinivaasan | 2014-12-17 15:13:21 +0530 (Wed, 17 Dec 2014) | 18 lines

Initial code commits for VIRGO EventNet kernel module service:
--------------------------------------------------------------
1.EventNet Kernel Service listens on port 20000
2.It receives eventnet log messages from VIRGO cloud nodes and writes the log messages after parsing into
two text files /var/log/eventnet/EventNetEdges.txt and /var/log/eventnet/EventNetVertices.txt b VFS calls.
3.These text files can then be processed by the EventNet implementations in AsFer (python pygraph and C++ boost::graph based)
4.Two new directories virgo/utils and virgo/eventnet have been added.
5.virgo/eventnet has the new VIRGO EventNet kernel module service implementation that listens on port 20000 and writes the incoming log messages to text files above.
6.virgo/utils is the new generic utilities driver that has a virgo_eventnet_log() export function which connects to VIRGO EventNet and sends the EventNet log message.
7.EventNet log messages have two formats:
	- Edge message - "eventnet_edgemsg#<id>#<from_event>#<to_event>"
	- Vertex message - "eventnet_vertextmsg#<id>#<partakers csv>#<partaker conversations csv>"
8.The utilities driver Module.symvers have to be copied to any driver which are then merged with the symbols of that corresponding driver during build by Kbuild.Target clean has to be commented so that copied symbols aren't erased.
9.virgo/utils driver can be populated with all necessary utility exported functions that might be needed kernel-wide.
10.Calls to virgo_eventnet_log() have to be #ifdef guarded as this is quite network intensive.



------------------------------------------------------------------------
r678 | ka_shrinivaasan | 2014-12-17 14:55:21 +0530 (Wed, 17 Dec 2014) | 3 lines

Updated VIRGO subsystems build generated .tmp_versions files


------------------------------------------------------------------------
r677 | ka_shrinivaasan | 2014-12-17 14:53:13 +0530 (Wed, 17 Dec 2014) | 3 lines

Updated VIRGO subsystems binaries,build generated sources,symbol files and virgo_config.h for EventNet datastructures


------------------------------------------------------------------------
r676 | ka_shrinivaasan | 2014-12-02 17:45:13 +0530 (Tue, 02 Dec 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r675 | ka_shrinivaasan | 2014-12-01 16:44:07 +0530 (Mon, 01 Dec 2014) | 4 lines

- lock/unlock count set to 10, increased loop count causes soft lockup errors (looping in kernel for > 20 seconds)
- updated build generated kernel objects


------------------------------------------------------------------------
r674 | ka_shrinivaasan | 2014-12-01 16:40:10 +0530 (Mon, 01 Dec 2014) | 3 lines

kern.log for bakery algorithm with 1 for loop - more debug messages


------------------------------------------------------------------------
r673 | ka_shrinivaasan | 2014-12-01 16:34:41 +0530 (Mon, 01 Dec 2014) | 4 lines

- Some variable renaming to avoid any scope ambiguities
- more debuf printk()s


------------------------------------------------------------------------
r672 | ka_shrinivaasan | 2014-12-01 15:49:15 +0530 (Mon, 01 Dec 2014) | 3 lines

Re-written bakery algorithm implementation 


------------------------------------------------------------------------
r671 | ka_shrinivaasan | 2014-12-01 15:47:34 +0530 (Mon, 01 Dec 2014) | 4 lines

- latest virgo_bakery kernel object and build generated sources
- clean target uncommented in build make script


------------------------------------------------------------------------
r670 | ka_shrinivaasan | 2014-12-01 15:45:24 +0530 (Mon, 01 Dec 2014) | 4 lines

Re-written virgo_bakery.c with some bugfixes and invoking only textbook version of bakery algorithm
with 1 for-loop


------------------------------------------------------------------------
r669 | ka_shrinivaasan | 2014-12-01 15:42:27 +0530 (Mon, 01 Dec 2014) | 3 lines

kern.log for bakery algorithm with one for loop (textbook version)


------------------------------------------------------------------------
r668 | ka_shrinivaasan | 2014-11-28 17:16:11 +0530 (Fri, 28 Nov 2014) | 4 lines

- bug fix for zero condition in bakery_lock()
- initialization of bakery datastructures


------------------------------------------------------------------------
r667 | ka_shrinivaasan | 2014-11-28 15:18:08 +0530 (Fri, 28 Nov 2014) | 3 lines

Comments updated and one for loop version of bakery_lock() commented


------------------------------------------------------------------------
r666 | ka_shrinivaasan | 2014-11-28 15:15:23 +0530 (Fri, 28 Nov 2014) | 3 lines

Documentation comments updated in if-else clauses of baker_lock()


------------------------------------------------------------------------
r665 | ka_shrinivaasan | 2014-11-27 18:04:05 +0530 (Thu, 27 Nov 2014) | 3 lines

if-clause in bakery_lock() has additional condition non-zero tokens


------------------------------------------------------------------------
r664 | ka_shrinivaasan | 2014-11-27 17:55:04 +0530 (Thu, 27 Nov 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r663 | ka_shrinivaasan | 2014-11-27 17:52:36 +0530 (Thu, 27 Nov 2014) | 5 lines

- Added two loops in virgo_bakery.c for two types of bakery lockings - one and two for loops
- updated build
- kern.log with one for loop


------------------------------------------------------------------------
r662 | ka_shrinivaasan | 2014-11-27 16:36:29 +0530 (Thu, 27 Nov 2014) | 3 lines

rebuilt virgo_bakery.ko and symbol file


------------------------------------------------------------------------
r661 | ka_shrinivaasan | 2014-11-27 16:26:36 +0530 (Thu, 27 Nov 2014) | 3 lines

kern.log(s) for bakery algorithm with different parameters for for loops


------------------------------------------------------------------------
r660 | ka_shrinivaasan | 2014-11-27 15:52:10 +0530 (Thu, 27 Nov 2014) | 4 lines

- virgo_bakery.c is changed to have bakery_lock() with two parameters - thread_id and the number of for loops in bakery_lock()
- latest symbol files and virgo_bakery kernel object and sources


------------------------------------------------------------------------
r659 | ka_shrinivaasan | 2014-11-27 15:48:02 +0530 (Thu, 27 Nov 2014) | 4 lines

Bakery Algorithm implementation rewritten to have two parameters - thread_id and number of for loops in bakery_lock()
- one is the textbook version with single for loop and the other is with two for loops


------------------------------------------------------------------------
r658 | ka_shrinivaasan | 2014-11-26 18:35:43 +0530 (Wed, 26 Nov 2014) | 59 lines

Screenshot and kern.log(s) for different versions of the lock() function in bakery algorithm:
------------------------------------------------------------------------------
VIRGO version:
-------------

void bakery_lock(int thread_id)
{

        /* Phase 1 */
        in_critical_section[thread_id]=1;
        token[thread_id] = 1 + maximum_of(token);
        in_critical_section[thread_id]=0;

        /* Phase 2 */
        int i;
        for(i=0 ; i < MAX_CONCURRENT_THREADS; i++)
        {
                while(in_critical_section[i] == 1)
                        ;
        }

        /* Phase 3 - only thread id(s) with unique numbers */
        for(i=0 ; i < MAX_CONCURRENT_THREADS; i++)
        {
                while((token[thread_id] < token[i]) ||  (token[thread_id] == token[i] && thread_id > i))
                        ;
        }
}

Textbook version:
-----------------

void bakery_lock(int thread_id)
{

        /* Phase 1 */
        in_critical_section[thread_id]=1;
        token[thread_id] = 1 + maximum_of(token);
        in_critical_section[thread_id]=0;

        /* Phase 2 */
        int i;
        for(i=0 ; i < MAX_CONCURRENT_THREADS; i++)
        {
                while(in_critical_section[i] == 1)
                        ;
	        /* Phase 3 - only thread id(s) with unique numbers */
                while((token[thread_id] < token[i]) ||  (token[thread_id] == token[i] && thread_id > i))
                        ;
        }
}

In VIRGO version all threads are compared using a separate forloop in phase 3, whereas in textbook version 
only threads after the while loop breaks are compared.

Also the number of invocations of 2 threads are unequal which shouldn't be as in screenshot.



------------------------------------------------------------------------
r657 | ka_shrinivaasan | 2014-11-26 16:59:28 +0530 (Wed, 26 Nov 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r656 | ka_shrinivaasan | 2014-11-26 16:38:53 +0530 (Wed, 26 Nov 2014) | 3 lines

kern.log for cloudsync driver


------------------------------------------------------------------------
r655 | ka_shrinivaasan | 2014-11-26 16:19:42 +0530 (Wed, 26 Nov 2014) | 6 lines

Initial implementation for VIRGO Cloud Synchronization (cloudsync) Driver :
- Leslie Lamport's Bakery Algorithm in virgo_bakery.h is used by this cloud driver
- Build script, Makefile, Kconfig have been added
- build generated sources, symbol files and kernel objects


------------------------------------------------------------------------
r654 | ka_shrinivaasan | 2014-11-26 16:09:32 +0530 (Wed, 26 Nov 2014) | 5 lines

Initial implementation for VIRGO Cloud Synchronization (cloudsync):
- Leslie Lamport's Bakery Algorithm has been added which can be used by the
cloud nodes


------------------------------------------------------------------------
r653 | ka_shrinivaasan | 2014-11-18 15:38:42 +0530 (Tue, 18 Nov 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r652 | ka_shrinivaasan | 2014-11-10 18:14:32 +0530 (Mon, 10 Nov 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r651 | ka_shrinivaasan | 2014-11-06 10:31:55 +0530 (Thu, 06 Nov 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r650 | ka_shrinivaasan | 2014-11-06 10:06:20 +0530 (Thu, 06 Nov 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r649 | ka_shrinivaasan | 2014-10-21 14:36:51 +0530 (Tue, 21 Oct 2014) | 3 lines

Updated path in Makefile


------------------------------------------------------------------------
r648 | ka_shrinivaasan | 2014-10-21 14:30:55 +0530 (Tue, 21 Oct 2014) | 3 lines

Updated path in Makefile


------------------------------------------------------------------------
r647 | ka_shrinivaasan | 2014-10-21 14:29:04 +0530 (Tue, 21 Oct 2014) | 3 lines

Updated path in Makefile


------------------------------------------------------------------------
r646 | ka_shrinivaasan | 2014-10-21 14:27:41 +0530 (Tue, 21 Oct 2014) | 3 lines

Updated VIRGO queueing Module.symvers


------------------------------------------------------------------------
r645 | ka_shrinivaasan | 2014-10-21 14:26:28 +0530 (Tue, 21 Oct 2014) | 3 lines

Updated Makefile lib and include paths and latest VIRGO cloudfs kernel objects build and symbol files


------------------------------------------------------------------------
r644 | ka_shrinivaasan | 2014-10-18 15:13:11 +0530 (Sat, 18 Oct 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r643 | ka_shrinivaasan | 2014-10-15 14:24:33 +0530 (Wed, 15 Oct 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r642 | ka_shrinivaasan | 2014-10-04 19:46:04 +0530 (Sat, 04 Oct 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r641 | ka_shrinivaasan | 2014-09-15 15:36:44 +0530 (Mon, 15 Sep 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r640 | ka_shrinivaasan | 2014-09-11 23:29:11 +0530 (Thu, 11 Sep 2014) | 3 lines

VIRGO Linux Build Steps based on Linux Kernel build.


------------------------------------------------------------------------
r639 | ka_shrinivaasan | 2014-09-09 23:05:15 +0530 (Tue, 09 Sep 2014) | 17 lines

Release notes for VIRGO version 14.9.9 tag:
------------------------------------------
	- Major rewrite of VIRGO components has been done to have 2 config files one each for client and
kernel service
	- New config driver and cloud filesystem driver have been added
	- New virgo_filesystem system calls (virgo_open, virgo_read, virgo_write and virgo_close) have
been added
	- All the above code have been ported to 3.15.5 kernel
	- KingCobra clauses have been commented - if needed can be uncommented later - due to a kernel heisencrash
	- Lot of testing logs have been added
	- Many bugfixes have gone in
	- Release naming convention changed to <last2digitsofyear>.<month>.<day> 
	- New VIRGO Queue standalone kernel service has been added so that it does not depend anymore on
cpupooling and memorypooling drivers to forward the requests
	- With the above VIRGO is a minimum cloud OS kernel implementation with Memory, Processor and Filesystem managements


------------------------------------------------------------------------
r638 | ka_shrinivaasan | 2014-09-07 13:43:54 +0530 (Sun, 07 Sep 2014) | 3 lines

Updated VIRGO Design Document for VIRGO components,updated task items.


------------------------------------------------------------------------
r637 | ka_shrinivaasan | 2014-08-27 11:59:02 +0530 (Wed, 27 Aug 2014) | 4 lines

- New text file listing port numbers for VIRGO kernel service modules
- Updated VIRGO Design Document


------------------------------------------------------------------------
r636 | ka_shrinivaasan | 2014-08-26 15:21:51 +0530 (Tue, 26 Aug 2014) | 5 lines

Updated VIRGO Design Doc for bugfixes to standalone VIRGO Queue Kernel Service :

Telnet client =======> VIRGO queue kernel service(port:60000) =====> VIRGO queue handler ====> KingCobra


------------------------------------------------------------------------
r635 | ka_shrinivaasan | 2014-08-26 14:35:59 +0530 (Tue, 26 Aug 2014) | 13 lines

------------------------------------------------------------
VIRGO queueing driver kernel service code changes for 3.15.5 kernel
------------------------------------------------------------
- all kmallocs have been made into GFP_ATOMIC instead of GFP_KERNEL
- moved some kingcobra related header code before kernel_recvmsg()
- some header file changes for set_fs()

This code has been tested with modified code for KingCobra and the standalone
kernel service that accepts requests from telnet directly, pushes to virgo_queue
and is handled to invoke KingCobra servicerequest kernelspace function, works
(the kernel_recvmsg() crash was most probably due to Read-Only filesystem -errno printed is -30)


------------------------------------------------------------------------
r634 | ka_shrinivaasan | 2014-08-24 20:34:43 +0530 (Sun, 24 Aug 2014) | 6 lines

Code changes to debug the kernel_recvmsg() crash or panic which does not create any
oops dump also and is difficult to pinpoint. This crash curiously coincides with kingcobra clauses
as it happened with virgo cpupooling and memorypooling drivers. Looks like someting deep within 3.15.5
kernel fails which was working in 3.7.8 kernel


------------------------------------------------------------------------
r633 | ka_shrinivaasan | 2014-08-24 07:43:13 +0530 (Sun, 24 Aug 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r632 | ka_shrinivaasan | 2014-08-24 07:40:42 +0530 (Sun, 24 Aug 2014) | 3 lines

Updated VIRGO Design Doc for VIRGO Queue kernel service


------------------------------------------------------------------------
r631 | ka_shrinivaasan | 2014-08-24 07:34:53 +0530 (Sun, 24 Aug 2014) | 4 lines

For virgu queue kernel service new header file virgoqueuesvc.h has been added and virgo_queue.h has been 
updated with new datastructures and virgo_queue_ops.


------------------------------------------------------------------------
r630 | ka_shrinivaasan | 2014-08-23 23:50:20 +0530 (Sat, 23 Aug 2014) | 7 lines

Updated VIRGO queuing driver with a kernel service that accept connections in port 60000
Thus it queueing and KingCobra need not depend on cpupooling and memorypooling drivers to forward
requests through use_as_kingcobra_service the if clauses for which have since been commented due to
a weird  kernel_accept crash with KingCobra if clauses. This implementation is initial subject to
telnet path tests.


------------------------------------------------------------------------
r629 | ka_shrinivaasan | 2014-08-23 13:50:54 +0530 (Sat, 23 Aug 2014) | 16 lines

Updated VIRGO cpupooling driver and syscall (virgo_clone)
----------------------------------------------------------
1. VIRGO cpupooling driver has been updated with timestamp generation similar to memory pooling driver
for KingCobra messaging
2. CPUpooling driver also experiences a crash or freeze with kernel_accept() when KingCobra clauses are
added. Hence they have been commented. It can be overwritten by future commits once this issue is solved.
3. virgo_clone() syscall has been tested with above KingCobra commented version and it works perfectly.
4. It still remains a mystery on what happens when KingCobra if clauses are uncommented. This was working in 3.7.8
5. kern.log for today's testing for virgo_clone() system call has been added to repository.
6. test_virgo_clone testcase has been updated with correct syscall number for 3.15.5 and params.
7. The commented KingCobra if clauses have been updated with ntohl fixes as done in memorypooling driver.
8. Updated kernel objects and binaries have been added
9. virgo.h header has been updated for timestamp and header prefix related data for KingCobra



------------------------------------------------------------------------
r628 | ka_shrinivaasan | 2014-08-23 11:22:56 +0530 (Sat, 23 Aug 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r627 | ka_shrinivaasan | 2014-08-23 11:13:45 +0530 (Sat, 23 Aug 2014) | 3 lines

kern.log for VIRGO memorypooling syscalls testing on 3.15.5 kernel on 23August2014


------------------------------------------------------------------------
r626 | ka_shrinivaasan | 2014-08-23 08:00:28 +0530 (Sat, 23 Aug 2014) | 3 lines

Updated VIRGO design doc


------------------------------------------------------------------------
r625 | ka_shrinivaasan | 2014-08-23 07:59:12 +0530 (Sat, 23 Aug 2014) | 3 lines

kern.log for VIRGO memorypooling syscalls test after commenting kingcobra clauses in memorypooling driver


------------------------------------------------------------------------
r624 | ka_shrinivaasan | 2014-08-23 07:50:58 +0530 (Sat, 23 Aug 2014) | 6 lines

Commenting use_as_kingcobra_service if clauses temporarily as disabling also doesnot work and only commenting the block
works for VIRGO syscall path. Quite weird as to how this relates to the problem. As this is a heisenbug further testing is
difficult and sufficient testing has been done with logs committed to repository. Probably a runtime symbol lookup for kingcobra
causes the freeze.


------------------------------------------------------------------------
r623 | ka_shrinivaasan | 2014-08-22 16:01:33 +0530 (Fri, 22 Aug 2014) | 4 lines

kern.log for today's test of VIRGO memorypooling syscalls (virgo_malloc(), virgo_set(), virgo_get()).
Some hiccups do remain but by and large better than 3.7.8


------------------------------------------------------------------------
r622 | ka_shrinivaasan | 2014-08-22 15:53:09 +0530 (Fri, 22 Aug 2014) | 3 lines

disabled the KingCobra clauses in VIRGO memorypooling (set to 0)


------------------------------------------------------------------------
r621 | ka_shrinivaasan | 2014-08-22 15:51:45 +0530 (Fri, 22 Aug 2014) | 3 lines

Updated the test_virgo_malloc testcase syscall() invocation with correct params


------------------------------------------------------------------------
r620 | ka_shrinivaasan | 2014-08-22 15:49:20 +0530 (Fri, 22 Aug 2014) | 7 lines

Added more printk(s) before and after kernel_accept() for debugging kernel_accept crash in 3.15.5
Also tested by commenting the KingCobra clauses which do ntohl(). VIRGO mempool syscalls were tested
without KingCobra clauses and virgo_malloc(), virgo_set() and virgo_get() work better than 3.7.8.
Importantly copy_from_user()(memcpy()) and copy_to_user() primitives that transfer data from and to the userspace
from kernel work with less crashes and occassional freezes.


------------------------------------------------------------------------
r619 | ka_shrinivaasan | 2014-08-21 14:32:52 +0530 (Thu, 21 Aug 2014) | 3 lines

Updated test_virgo_malloc testcase


------------------------------------------------------------------------
r618 | ka_shrinivaasan | 2014-08-21 14:32:03 +0530 (Thu, 21 Aug 2014) | 3 lines

Added some more printk(s) and changed the strcpy for malloc_cmd to buf


------------------------------------------------------------------------
r617 | ka_shrinivaasan | 2014-08-17 23:08:43 +0530 (Sun, 17 Aug 2014) | 26 lines

More test logs and screenshots

--------------------------------------------------------------------------------------
VIRGO Kernel Modules and System Calls major rewrite for 3.15.5 kernel - 17 August 2014
--------------------------------------------------------------------------------------
1. VIRGO config files have been split into /etc/virgo_client.conf and /etc/virgo_cloud.conf to delink the cloud client and kernel service
config parameters reading and to do away with oft occurring symbol lookup errors and multiple definition errors for num_cloud_nodes and
node_ip_addrs_in_cloud - these errors are frequent in 3.15.5 kernel than 3.7.8 kernel. 

2. Each VIRGO module and system call now reads the config file independent of others - there is a read_virgo_config_<module>_<client_or_service>() function variant for each driver and system call. Though at present smacks of a replicated code, in future the config reads for each component (system call or module) might vary significantly depending on necessities.

3. New kernel module config has been added in drivers/virgo. This is for future prospective use as a config export driver that can
be looked up by any other VIRGO module for config parameters.

4. include/linux/virgo_config.h has the declarations for all the config variables declared within each of the VIRGO kernel modules.

5. Config variables in each driver and system call have been named with prefix and suffix to differentiate the module and/or system call it serves.

6. In geographically distributed cloud virgo_client.conf has to be in client nodes and virgo_cloud.conf has to be in cloud nodes. For VIRGO Queue - KingCobra REQUEST-REPLY peer-to-peer messaging system same node can have virgo_client.conf and virgo_cloud.conf.

7. Above segregation largely simplifies the build process as each module and system call is independently built without need for a symbol to be exported from other module by pre-loading it.
 
8. VIRGO File system driver and system calls have been tested with above changes and the virgo_open(),virgo_read() and virgo_write() calls work with much less crashes and freeze problems compared to 3.7.8 (some crashes in VIRGO FS syscalls in 3.7.8 where already reported kernel bugs which seem to have been fixed in 3.15.5). Today's kern.log test logs have been committed to repository.



------------------------------------------------------------------------
r616 | ka_shrinivaasan | 2014-08-17 22:37:29 +0530 (Sun, 17 Aug 2014) | 24 lines

--------------------------------------------------------------------------------------
VIRGO Kernel Modules and System Calls major rewrite for 3.15.5 kernel - 17 August 2014
--------------------------------------------------------------------------------------
1. VIRGO config files have been split into /etc/virgo_client.conf and /etc/virgo_cloud.conf to delink the cloud client and kernel service
config parameters reading and to do away with oft occurring symbol lookup errors and multiple definition errors for num_cloud_nodes and
node_ip_addrs_in_cloud - these errors are frequent in 3.15.5 kernel than 3.7.8 kernel. 

2. Each VIRGO module and system call now reads the config file independent of others - there is a read_virgo_config_<module>_<client_or_service>() function variant for each driver and system call. Though at present smacks of a replicated code, in future the config reads for each component (system call or module) might vary significantly depending on necessities.

3. New kernel module config has been added in drivers/virgo. This is for future prospective use as a config export driver that can
be looked up by any other VIRGO module for config parameters.

4. include/linux/virgo_config.h has the declarations for all the config variables declared within each of the VIRGO kernel modules.

5. Config variables in each driver and system call have been named with prefix and suffix to differentiate the module and/or system call it serves.

6. In geographically distributed cloud virgo_client.conf has to be in client nodes and virgo_cloud.conf has to be in cloud nodes. For VIRGO Queue - KingCobra REQUEST-REPLY peer-to-peer messaging system same node can have virgo_client.conf and virgo_cloud.conf.

7. Above segregation largely simplifies the build process as each module and system call is independently built without need for a symbol to be exported from other module by pre-loading it.
 
8. VIRGO File system driver and system calls have been tested with above changes and the virgo_open(),virgo_read() and virgo_write() calls work with much less crashes and freeze problems compared to 3.7.8 (some crashes in VIRGO FS syscalls in 3.7.8 where already reported kernel bugs which seem to have been fixed in 3.15.5). Today's kern.log test logs have been committed to repository.



------------------------------------------------------------------------
r615 | ka_shrinivaasan | 2014-08-17 22:01:31 +0530 (Sun, 17 Aug 2014) | 23 lines

--------------------------------------------------------------------------------------
VIRGO Kernel Modules and System Calls major rewrite for 3.15.5 kernel - 17 August 2014
--------------------------------------------------------------------------------------
1. VIRGO config files have been split into /etc/virgo_client.conf and /etc/virgo_cloud.conf to delink the cloud client and kernel service
config parameters reading and to do away with oft occurring symbol lookup errors and multiple definition errors for num_cloud_nodes and
node_ip_addrs_in_cloud - these errors are frequent in 3.15.5 kernel than 3.7.8 kernel. 

2. Each VIRGO module and system call now reads the config file independent of others - there is a read_virgo_config_<module>_<client_or_service>() function variant for each driver and system call. Though at present smacks of a replicated code, in future the config reads for each component (system call or module) might vary significantly depending on necessities.

3. New kernel module config has been added in drivers/virgo. This is for future prospective use as a config export driver that can
be looked up by any other VIRGO module for config parameters.

4. include/linux/virgo_config.h has the declarations for all the config variables declared within each of the VIRGO kernel modules.

5. Config variables in each driver and system call have been named with prefix and suffix to differentiate the module and/or system call it serves.

6. In geographically distributed cloud virgo_client.conf has to be in client nodes and virgo_cloud.conf has to be in cloud nodes. For VIRGO Queue - KingCobra REQUEST-REPLY peer-to-peer messaging system same node can have virgo_client.conf and virgo_cloud.conf.

7. Above segregation largely simplifies the build process as each module and system call is independently built without need for a symbol to be exported from other module by pre-loading it.
 
8. VIRGO File system driver and system calls have been tested with above changes and the virgo_open(),virgo_read() and virgo_write() calls work with much less crashes and freeze problems compared to 3.7.8 (some crashes in VIRGO FS syscalls in 3.7.8 where already reported kernel bugs which seem to have been fixed in 3.15.5). Today's kern.log test logs have been committed to repository.


------------------------------------------------------------------------
r614 | ka_shrinivaasan | 2014-08-17 21:54:26 +0530 (Sun, 17 Aug 2014) | 3 lines

Removed some old aborted commit remnants


------------------------------------------------------------------------
r613 | ka_shrinivaasan | 2014-08-17 21:43:35 +0530 (Sun, 17 Aug 2014) | 3 lines

Updated VIRGO Design Doc 


------------------------------------------------------------------------
r612 | ka_shrinivaasan | 2014-08-17 21:41:19 +0530 (Sun, 17 Aug 2014) | 24 lines

--------------------------------------------------------------------------------------
VIRGO Kernel Modules and System Calls major rewrite for 3.15.5 kernel - 17 August 2014
--------------------------------------------------------------------------------------
1. VIRGO config files have been split into /etc/virgo_client.conf and /etc/virgo_cloud.conf to delink the cloud client and kernel service
config parameters reading and to do away with oft occurring symbol lookup errors and multiple definition errors for num_cloud_nodes and
node_ip_addrs_in_cloud - these errors are frequent in 3.15.5 kernel than 3.7.8 kernel. 

2. Each VIRGO module and system call now reads the config file independent of others - there is a read_virgo_config_<module>_<client_or_service>() function variant for each driver and system call. Though at present smacks of a replicated code, in future the config reads for each component (system call or module) might vary significantly depending on necessities.

3. New kernel module config has been added in drivers/virgo. This is for future prospective use as a config export driver that can
be looked up by any other VIRGO module for config parameters.

4. include/linux/virgo_config.h has the declarations for all the config variables declared within each of the VIRGO kernel modules.

5. Config variables in each driver and system call have been named with prefix and suffix to differentiate the module and/or system call it serves.

6. In geographically distributed cloud virgo_client.conf has to be in client nodes and virgo_cloud.conf has to be in cloud nodes. For VIRGO Queue - KingCobra REQUEST-REPLY peer-to-peer messaging system same node can have virgo_client.conf and virgo_cloud.conf.

7. Above segregation largely simplifies the build process as each module and system call is independently built without need for a symbol to be exported from other module by pre-loading it.
 
8. VIRGO File system driver and system calls have been tested with above changes and the virgo_open(),virgo_read() and virgo_write() calls work with much less crashes and freeze problems compared to 3.7.8 (some crashes in VIRGO FS syscalls in 3.7.8 where already reported kernel bugs which seem to have been fixed in 3.15.5). Today's kern.log test logs have been committed to repository.



------------------------------------------------------------------------
r611 | ka_shrinivaasan | 2014-08-17 21:40:01 +0530 (Sun, 17 Aug 2014) | 24 lines

--------------------------------------------------------------------------------------
VIRGO Kernel Modules and System Calls major rewrite for 3.15.5 kernel - 17 August 2014
--------------------------------------------------------------------------------------
1. VIRGO config files have been split into /etc/virgo_client.conf and /etc/virgo_cloud.conf to delink the cloud client and kernel service
config parameters reading and to do away with oft occurring symbol lookup errors and multiple definition errors for num_cloud_nodes and
node_ip_addrs_in_cloud - these errors are frequent in 3.15.5 kernel than 3.7.8 kernel. 

2. Each VIRGO module and system call now reads the config file independent of others - there is a read_virgo_config_<module>_<client_or_service>() function variant for each driver and system call. Though at present smacks of a replicated code, in future the config reads for each component (system call or module) might vary significantly depending on necessities.

3. New kernel module config has been added in drivers/virgo. This is for future prospective use as a config export driver that can
be looked up by any other VIRGO module for config parameters.

4. include/linux/virgo_config.h has the declarations for all the config variables declared within each of the VIRGO kernel modules.

5. Config variables in each driver and system call have been named with prefix and suffix to differentiate the module and/or system call it serves.

6. In geographically distributed cloud virgo_client.conf has to be in client nodes and virgo_cloud.conf has to be in cloud nodes. For VIRGO Queue - KingCobra REQUEST-REPLY peer-to-peer messaging system same node can have virgo_client.conf and virgo_cloud.conf.

7. Above segregation largely simplifies the build process as each module and system call is independently built without need for a symbol to be exported from other module by pre-loading it.
 
8. VIRGO File system driver and system calls have been tested with above changes and the virgo_open(),virgo_read() and virgo_write() calls work with much less crashes and freeze problems compared to 3.7.8 (some crashes in VIRGO FS syscalls in 3.7.8 where already reported kernel bugs which seem to have been fixed in 3.15.5). Today's kern.log test logs have been committed to repository.



------------------------------------------------------------------------
r610 | ka_shrinivaasan | 2014-08-17 21:36:22 +0530 (Sun, 17 Aug 2014) | 23 lines

--------------------------------------------------------------------------------------
VIRGO Kernel Modules and System Calls major rewrite for 3.15.5 kernel - 17 August 2014
--------------------------------------------------------------------------------------
1. VIRGO config files have been split into /etc/virgo_client.conf and /etc/virgo_cloud.conf to delink the cloud client and kernel service
config parameters reading and to do away with oft occurring symbol lookup errors and multiple definition errors for num_cloud_nodes and
node_ip_addrs_in_cloud - these errors are frequent in 3.15.5 kernel than 3.7.8 kernel. 

2. Each VIRGO module and system call now reads the config file independent of others - there is a read_virgo_config_<module>_<client_or_service>() function variant for each driver and system call. Though at present smacks of a replicated code, in future the config reads for each component (system call or module) might vary significantly depending on necessities.

3. New kernel module config has been added in drivers/virgo. This is for future prospective use as a config export driver that can
be looked up by any other VIRGO module for config parameters.

4. include/linux/virgo_config.h has the declarations for all the config variables declared within each of the VIRGO kernel modules.

5. Config variables in each driver and system call have been named with prefix and suffix to differentiate the module and/or system call it serves.

6. In geographically distributed cloud virgo_client.conf has to be in client nodes and virgo_cloud.conf has to be in cloud nodes. For VIRGO Queue - KingCobra REQUEST-REPLY peer-to-peer messaging system same node can have virgo_client.conf and virgo_cloud.conf.

7. Above segregation largely simplifies the build process as each module and system call is independently built without need for a symbol to be exported from other module by pre-loading it.
 
8. VIRGO File system driver and system calls have been tested with above changes and the virgo_open(),virgo_read() and virgo_write() calls work with much less crashes and freeze problems compared to 3.7.8 (some crashes in VIRGO FS syscalls in 3.7.8 where already reported kernel bugs which seem to have been fixed in 3.15.5). Today's kern.log test logs have been committed to repository.


------------------------------------------------------------------------
r609 | ka_shrinivaasan | 2014-08-17 14:05:04 +0530 (Sun, 17 Aug 2014) | 4 lines

Order of loading the VIRGO and KingCobra modules has been documented 
to prevent symbol lookup errors


------------------------------------------------------------------------
r608 | ka_shrinivaasan | 2014-08-17 14:02:30 +0530 (Sun, 17 Aug 2014) | 3 lines

Updated 3.15.5 VIRGO cloudfs kernel objects and binaries


------------------------------------------------------------------------
r607 | ka_shrinivaasan | 2014-08-16 14:09:24 +0530 (Sat, 16 Aug 2014) | 5 lines

- commented virgo_config.h #include
- Added extern declarations for num_cloud_nodes and node_ip_addrs_in_cloud for vmlinux linker error
("symbol already defined"). Only virgo_clone() #include(s) virgo_config.h


------------------------------------------------------------------------
r606 | ka_shrinivaasan | 2014-08-16 14:04:21 +0530 (Sat, 16 Aug 2014) | 3 lines

Added -w to gcc flags for "warnings are errors" compiler message in 3.15.5.


------------------------------------------------------------------------
r605 | ka_shrinivaasan | 2014-08-16 14:02:42 +0530 (Sat, 16 Aug 2014) | 10 lines

- commented the virgo_config.h #include
- instead added extern declarations for cloud datastructures in virgo_config.h

Above is due to the vmlinux linker error ("already defined symbol") for 
num_cloud_nodes and node_ip_addrs_in_cloud. Only virgo_clone() system call has #include from virgo_config.h and
thus virgo_malloc and virgo_filesystem do only extern.
#ifndef should have solved multiple declarations but didn't. Still a hack and needs to be cleaned up later.



------------------------------------------------------------------------
r604 | ka_shrinivaasan | 2014-08-16 13:53:40 +0530 (Sat, 16 Aug 2014) | 5 lines

Updated testcase for virgo_filesystem syscall path :
- Makefile include paths changed for 3.15.5 kernel
- syscall numbers in test_virgo_filesystem.c have been updated for 3.15.5


------------------------------------------------------------------------
r603 | ka_shrinivaasan | 2014-08-16 13:49:46 +0530 (Sat, 16 Aug 2014) | 3 lines

Added -w for "some warnings are errors" compiler message in 3.15.5 and latest gcc.


------------------------------------------------------------------------
r602 | ka_shrinivaasan | 2014-08-16 13:46:08 +0530 (Sat, 16 Aug 2014) | 4 lines

Added -w flag for virgo_clone Makefile (for "warnings are errors", but should rather be -Wnoerror but doesn't 
have the effect)


------------------------------------------------------------------------
r601 | ka_shrinivaasan | 2014-08-16 13:40:12 +0530 (Sat, 16 Aug 2014) | 3 lines

Added #ifndef for virgo_config.h which was missing earlier


------------------------------------------------------------------------
r600 | ka_shrinivaasan | 2014-08-15 14:16:36 +0530 (Fri, 15 Aug 2014) | 3 lines

Updated the buildscript to remove previous 3.7.8 make targets for config


------------------------------------------------------------------------
r599 | ka_shrinivaasan | 2014-08-07 15:52:54 +0530 (Thu, 07 Aug 2014) | 2 lines

Updated root Makefile for linux kernel 3.15.5 fullbuild (Directories added for VIRGO syscalls build)

------------------------------------------------------------------------
r598 | ka_shrinivaasan | 2014-08-07 12:37:38 +0530 (Thu, 07 Aug 2014) | 3 lines

Updated syscalls.h for VIRGO syscalls declarations.


------------------------------------------------------------------------
r597 | ka_shrinivaasan | 2014-08-07 12:34:30 +0530 (Thu, 07 Aug 2014) | 3 lines

Updated syscall_*.tbl files that map a number to syscalls. Numbering for 3.15.5 differs from previous versions


------------------------------------------------------------------------
r596 | ka_shrinivaasan | 2014-08-07 12:29:26 +0530 (Thu, 07 Aug 2014) | 3 lines

Changed the extern fields to simple global declarations


------------------------------------------------------------------------
r595 | ka_shrinivaasan | 2014-08-07 12:27:21 +0530 (Thu, 07 Aug 2014) | 3 lines

Latest 3.15.5 kernel build kernel object files and GCOV gcno files


------------------------------------------------------------------------
r594 | ka_shrinivaasan | 2014-08-07 12:20:16 +0530 (Thu, 07 Aug 2014) | 3 lines

Latest 3.15.5 kernel build for VIRGO Queueing Driver


------------------------------------------------------------------------
r593 | ka_shrinivaasan | 2014-08-07 12:10:24 +0530 (Thu, 07 Aug 2014) | 3 lines

Latest 3.15.5 kernel build for VIRGO Memory Pooling Driver


------------------------------------------------------------------------
r592 | ka_shrinivaasan | 2014-08-07 12:05:56 +0530 (Thu, 07 Aug 2014) | 3 lines

Latest 3.15.5 build for VIRGO CPU pooling driver


------------------------------------------------------------------------
r591 | ka_shrinivaasan | 2014-08-07 11:59:54 +0530 (Thu, 07 Aug 2014) | 3 lines

Latest 3.15.5 build for VIRGO Cloud FS driver


------------------------------------------------------------------------
r590 | ka_shrinivaasan | 2014-08-06 17:21:11 +0530 (Wed, 06 Aug 2014) | 3 lines

Build Script for Linux kernel 3.15.5 with only menuconfig, make and make install modules_install. 


------------------------------------------------------------------------
r589 | ka_shrinivaasan | 2014-08-04 20:06:25 +0530 (Mon, 04 Aug 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r588 | ka_shrinivaasan | 2014-07-29 18:13:12 +0530 (Tue, 29 Jul 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r587 | ka_shrinivaasan | 2014-07-29 18:00:41 +0530 (Tue, 29 Jul 2014) | 3 lines

Updated 3.15.5 build generated kernel objects and symbol files


------------------------------------------------------------------------
r586 | ka_shrinivaasan | 2014-07-29 17:59:47 +0530 (Tue, 29 Jul 2014) | 3 lines

Updated Makefile for 3.15.5 kernel with -w warning suppression flag added


------------------------------------------------------------------------
r585 | ka_shrinivaasan | 2014-07-29 17:58:33 +0530 (Tue, 29 Jul 2014) | 3 lines

Updated build generated object files and symbols


------------------------------------------------------------------------
r584 | ka_shrinivaasan | 2014-07-29 17:57:38 +0530 (Tue, 29 Jul 2014) | 3 lines

Updated Makefile for 3.15.5 kernel build with -w ccflag added to suppress warnings (which should later be made -Wno-error)


------------------------------------------------------------------------
r583 | ka_shrinivaasan | 2014-07-29 17:56:01 +0530 (Tue, 29 Jul 2014) | 3 lines

Build script for Queuing driver similar to cloudfs, memorypooling and cpupooling driver folders


------------------------------------------------------------------------
r582 | ka_shrinivaasan | 2014-07-29 17:54:10 +0530 (Tue, 29 Jul 2014) | 4 lines

- Updated Makefile with -w flag added for 3.15.5 kernel build.
- Updated build generated (3.15.5 kernel) objects and symbol files


------------------------------------------------------------------------
r581 | ka_shrinivaasan | 2014-07-29 17:51:35 +0530 (Tue, 29 Jul 2014) | 3 lines

Updated 3.15.5 kernel build generated kernel objects and symbol files


------------------------------------------------------------------------
r580 | ka_shrinivaasan | 2014-07-29 17:50:18 +0530 (Tue, 29 Jul 2014) | 4 lines

Updated Makefile for linux kernel 3.15.5 build - with -w warning suppression flag added due to "some warnings are errors" build errormsg. 
(-Wno-error should've worked but didn't for some esoteric reason whatsoever)


------------------------------------------------------------------------
r579 | ka_shrinivaasan | 2014-07-25 22:31:35 +0530 (Fri, 25 Jul 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r578 | ka_shrinivaasan | 2014-07-24 22:41:27 +0530 (Thu, 24 Jul 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r577 | ka_shrinivaasan | 2014-07-16 12:03:11 +0530 (Wed, 16 Jul 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r576 | ka_shrinivaasan | 2014-07-11 19:08:33 +0530 (Fri, 11 Jul 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r575 | ka_shrinivaasan | 2014-07-07 19:14:27 +0530 (Mon, 07 Jul 2014) | 3 lines

VIRGO Design Doc updated with virgo_write() kernel panic pre-existing kernel bug reports


------------------------------------------------------------------------
r574 | ka_shrinivaasan | 2014-07-07 19:11:21 +0530 (Mon, 07 Jul 2014) | 3 lines

Commented working virgo_read() and virgo_open() syscalls in testcase to debug virgo_write() only.


------------------------------------------------------------------------
r573 | ka_shrinivaasan | 2014-07-07 19:09:19 +0530 (Mon, 07 Jul 2014) | 4 lines

Changed all GFP_KERNEL kmalloc(s) to GFP_ATOMIC 
for virgo_write panic debugging


------------------------------------------------------------------------
r572 | ka_shrinivaasan | 2014-07-07 12:02:07 +0530 (Mon, 07 Jul 2014) | 3 lines

kern.log for VIRGO File system syscalls path testcase with a major kernel panic in SMP module similar to socket wakeup crash earlier


------------------------------------------------------------------------
r571 | ka_shrinivaasan | 2014-07-07 11:58:12 +0530 (Mon, 07 Jul 2014) | 4 lines

VIRGO File system syscalls path test screenshot for virgo_read() - copy_to_user() from kernel to user space.
But virgo_write() panic within kernel socket wakeup continues with more detailed logs


------------------------------------------------------------------------
r570 | ka_shrinivaasan | 2014-07-04 19:54:13 +0530 (Fri, 04 Jul 2014) | 6 lines

kern.log for virgo_write syscall path tests after bugfixes in virgo_write() command string concatenation.
virgo_write() crashes still - though virgo_open and virgo_read work - somewhere deep within kernel socket wakeup due to null pointer.
Could be a kernel heisenbug also



------------------------------------------------------------------------
r569 | ka_shrinivaasan | 2014-07-04 18:21:03 +0530 (Fri, 04 Jul 2014) | 4 lines

virgo_cloud_write command was wrongly concatenating virgo_cloud_read string. Bugfix for this in
sys_virgo_write() syscall implementation


------------------------------------------------------------------------
r568 | ka_shrinivaasan | 2014-07-04 09:42:08 +0530 (Fri, 04 Jul 2014) | 3 lines

parameterIsExecutable is set to 2 instead of 0 for VIRGO FS syscall path testing


------------------------------------------------------------------------
r567 | ka_shrinivaasan | 2014-07-04 08:22:18 +0530 (Fri, 04 Jul 2014) | 3 lines

Updated VIRGO Desgin Document


------------------------------------------------------------------------
r566 | ka_shrinivaasan | 2014-07-04 08:16:36 +0530 (Fri, 04 Jul 2014) | 3 lines

virgofstest.txt in /var/log/virgo_fs for VIRGO FS telnet path test on 3 July 2014


------------------------------------------------------------------------
r565 | ka_shrinivaasan | 2014-07-04 08:14:40 +0530 (Fri, 04 Jul 2014) | 3 lines

VIRGO FS telnet path for open, read, write of file /var/log/virgo_fs/virgocloudfstest.txt


------------------------------------------------------------------------
r564 | ka_shrinivaasan | 2014-07-03 22:57:07 +0530 (Thu, 03 Jul 2014) | 5 lines

kern.log for VIRGO FS syscalls path testing - virgo_open(), virgo_close(),virgo_read(),virgo_write()
virgo_write() has a kernel panic. But copy_to_user() in virgo_read() works which was a problem in
VIRGO mempooling driver


------------------------------------------------------------------------
r563 | ka_shrinivaasan | 2014-07-03 22:28:51 +0530 (Thu, 03 Jul 2014) | 3 lines

Updated VIRGO FS test case with correct parameter values


------------------------------------------------------------------------
r562 | ka_shrinivaasan | 2014-07-03 22:27:29 +0530 (Thu, 03 Jul 2014) | 4 lines

port number set to 50000 and int_to_str_fs() for size twice changed
to pos


------------------------------------------------------------------------
r561 | ka_shrinivaasan | 2014-07-03 22:22:01 +0530 (Thu, 03 Jul 2014) | 3 lines

Updated root level Makefile for linux full build


------------------------------------------------------------------------
r560 | ka_shrinivaasan | 2014-07-03 22:20:20 +0530 (Thu, 03 Jul 2014) | 4 lines

Updated VIRGO cloud filesystem module kernel objects
and Modules.* files


------------------------------------------------------------------------
r559 | ka_shrinivaasan | 2014-07-03 22:18:45 +0530 (Thu, 03 Jul 2014) | 3 lines

Updated Makefile for new linux 3.7.8 workspace header paths


------------------------------------------------------------------------
r558 | ka_shrinivaasan | 2014-07-03 09:39:47 +0530 (Thu, 03 Jul 2014) | 6 lines

- #include of <virgo_fs_syscall.h> for LD error resolution
- new function long_to_str() for VIRGO file descriptor
- unnecessary code commented out



------------------------------------------------------------------------
r557 | ka_shrinivaasan | 2014-07-03 09:37:51 +0530 (Thu, 03 Jul 2014) | 4 lines

Separate header file added for VIRGO File System Syscall primitives implementations
due to a symbol definition LD error in vmlinux (previously defined in virgo_malloc)


------------------------------------------------------------------------
r556 | ka_shrinivaasan | 2014-07-01 18:52:32 +0530 (Tue, 01 Jul 2014) | 5 lines

Changes to buildscript:
	- commented i386_defconfig due to build failure
	- uncommented usb and VIRGO modules builds


------------------------------------------------------------------------
r555 | ka_shrinivaasan | 2014-07-01 18:38:51 +0530 (Tue, 01 Jul 2014) | 3 lines

testcase for VIRGO File System syscalls added - virgo_open(),virgo_read(),virgo_write(),virgo_close() with Makefile


------------------------------------------------------------------------
r554 | ka_shrinivaasan | 2014-06-29 14:53:41 +0530 (Sun, 29 Jun 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r553 | ka_shrinivaasan | 2014-06-29 13:45:02 +0530 (Sun, 29 Jun 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r552 | ka_shrinivaasan | 2014-06-17 21:10:35 +0530 (Tue, 17 Jun 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r551 | ka_shrinivaasan | 2014-06-07 00:07:05 +0530 (Sat, 07 Jun 2014) | 8 lines

Updated buildscript.sh as the Linux tree had to be built from some other workspace since a previous workspace throws a
mysterious error which was not occurring in earlier builds as below (which looks to be arch issue,but nothing changed in the meantime):

kernel/bounds.c:1: error: code model ‘kernel’ not supported in the 32 bit mode
kernel/bounds.c:1: sorry, unimplemented: 64-bit mode not compiled in



------------------------------------------------------------------------
r550 | ka_shrinivaasan | 2014-06-06 23:40:41 +0530 (Fri, 06 Jun 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r549 | ka_shrinivaasan | 2014-06-06 23:37:39 +0530 (Fri, 06 Jun 2014) | 5 lines

Lots of Linux Full Build compilation errors fixed and new integer parsing functionality added (similar to driver modules).
For the timebeing all syscalls invoke loadbalancer. This may be further optimized with a sticky flag to remember the first invocation which
might be usually virgo_open syscall to get the VFS descriptor that is used in subsequent syscalls.


------------------------------------------------------------------------
r548 | ka_shrinivaasan | 2014-06-06 20:31:10 +0530 (Fri, 06 Jun 2014) | 4 lines

Updated syscall tbl files for 32 and 64 bit builds
for VIRGO File System syscalls path


------------------------------------------------------------------------
r547 | ka_shrinivaasan | 2014-06-06 20:29:20 +0530 (Fri, 06 Jun 2014) | 3 lines

Updated root Makefile for virgo_filesystem syscall build


------------------------------------------------------------------------
r546 | ka_shrinivaasan | 2014-06-06 20:23:26 +0530 (Fri, 06 Jun 2014) | 3 lines

Updated syscalls.h for VIRGO File System syscalls and parameter update in virgo_fs.h for kernel to userspace upcall


------------------------------------------------------------------------
r545 | ka_shrinivaasan | 2014-06-06 20:19:55 +0530 (Fri, 06 Jun 2014) | 3 lines

Initial feature-complete implementation for VIRGO File System syscalls (read,write,open,close)


------------------------------------------------------------------------
r544 | ka_shrinivaasan | 2014-06-06 17:21:51 +0530 (Fri, 06 Jun 2014) | 3 lines

Updated VIRGO Linux Build Script


------------------------------------------------------------------------
r543 | ka_shrinivaasan | 2014-05-08 12:44:42 +0530 (Thu, 08 May 2014) | 3 lines

Updated VIRGO Design Doc for commits done for working kernel to userspace upcall functionality (parameterIsExecutable=0)


------------------------------------------------------------------------
r542 | ka_shrinivaasan | 2014-05-08 12:41:00 +0530 (Thu, 08 May 2014) | 8 lines

kern.log, screenshot and virgofstest.txt files for kernel upcall to userspace and writing to file in userspace:
- kern.log shows the ret code from upcall plugin as 0 (fd_install still is commented, hence only way to verify correctness is to see if the
file virgofstest.txt is written to)
- Screenshot shows the virgo_cloud_open, virgo_cloud_read and virgo_cloud_write commands and cats the virgofstest.txt file before and after writing
to virgofstest.txt in userspace
- virgofstest.txt that has been written to in userspace with today's date as data.


------------------------------------------------------------------------
r541 | ka_shrinivaasan | 2014-05-08 12:32:35 +0530 (Thu, 08 May 2014) | 3 lines

Updated build generated sources and kernel object files


------------------------------------------------------------------------
r540 | ka_shrinivaasan | 2014-05-08 12:31:13 +0530 (Thu, 08 May 2014) | 3 lines

Updated kernel upcall build script for the data written to virgofstest.txt with today's date


------------------------------------------------------------------------
r539 | ka_shrinivaasan | 2014-05-08 12:29:36 +0530 (Thu, 08 May 2014) | 4 lines

Added file open calls in every virgofs upcall to userspace as somehow the file descriptor is closed. But the functionality of each call remains
same and file virgofstest.txt is written to in userspace thus making sure that kernel-to-userspace upcall works.


------------------------------------------------------------------------
r538 | ka_shrinivaasan | 2014-05-08 12:26:30 +0530 (Thu, 08 May 2014) | 4 lines

Testcase for userspace file open, read and write - added to debug a mysterious problem in kernel upcall to userspace which did not write
to the file


------------------------------------------------------------------------
r537 | ka_shrinivaasan | 2014-05-07 19:20:30 +0530 (Wed, 07 May 2014) | 4 lines

VIRGO cloud file sytem kernel upcall plugin standalone execution screenshot which should have been written to in
fd_install(1) where as fd_install(2) worked.


------------------------------------------------------------------------
r536 | ka_shrinivaasan | 2014-05-07 19:06:02 +0530 (Wed, 07 May 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r535 | ka_shrinivaasan | 2014-05-07 19:03:53 +0530 (Wed, 07 May 2014) | 8 lines

kern.log for kernel upcall test with paramIsExecutable=0:
--------------------------------------------------------
The fd_install() for stderr (2) works and prints and error message from kernel upcall plugin but fd_install() for
stdout (1) does not print the error message, but the return value from upcall is 0. kern.log for today's test with
paramIsExecutable=0 for kernel to userspace upcall is added to repository



------------------------------------------------------------------------
r534 | ka_shrinivaasan | 2014-05-07 18:58:36 +0530 (Wed, 07 May 2014) | 3 lines

Updated build generated sources


------------------------------------------------------------------------
r533 | ka_shrinivaasan | 2014-05-07 18:57:55 +0530 (Wed, 07 May 2014) | 3 lines

Updated Build generated kernel upcall plugin binary and cloudfs driver related sources and .ko file


------------------------------------------------------------------------
r532 | ka_shrinivaasan | 2014-05-07 18:56:00 +0530 (Wed, 07 May 2014) | 3 lines

Updated Build generated sources, kernel object files


------------------------------------------------------------------------
r531 | ka_shrinivaasan | 2014-05-07 18:54:39 +0530 (Wed, 07 May 2014) | 3 lines

VIRGO Cloud FS kernel to userspace upcall plugin args parse fix with strsep() and corresponding args passed in the upcall script


------------------------------------------------------------------------
r530 | ka_shrinivaasan | 2014-05-05 18:32:11 +0530 (Mon, 05 May 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r529 | ka_shrinivaasan | 2014-05-05 18:28:53 +0530 (Mon, 05 May 2014) | 4 lines

kernel upcall related bugfixes and changes for paramIsExecutable=0 ( function name passed to kernel upcall plugin )
fd_install crashes as in the logs which was few months ago also without which it will be difficult to view userspace logs.But ret code is 0 which indicates userspace worked.


------------------------------------------------------------------------
r528 | ka_shrinivaasan | 2014-05-05 18:25:25 +0530 (Mon, 05 May 2014) | 3 lines

logs and screenshot for kernelupcall test with paramIsExecutable=0 ( function name )


------------------------------------------------------------------------
r527 | ka_shrinivaasan | 2014-05-05 12:32:15 +0530 (Mon, 05 May 2014) | 3 lines

renamed logs to 5May2014


------------------------------------------------------------------------
r526 | ka_shrinivaasan | 2014-05-05 12:30:21 +0530 (Mon, 05 May 2014) | 3 lines

removed wrongly named logs


------------------------------------------------------------------------
r525 | ka_shrinivaasan | 2014-05-05 12:22:22 +0530 (Mon, 05 May 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r524 | ka_shrinivaasan | 2014-05-05 11:45:45 +0530 (Mon, 05 May 2014) | 3 lines

Updated VIRGO Design Document for VIRGO Cloud File System telnet path implementation


------------------------------------------------------------------------
r523 | ka_shrinivaasan | 2014-05-05 11:17:38 +0530 (Mon, 05 May 2014) | 3 lines

Updated /etc/modules file for boot loading of the VIRGO cloud file system drivers


------------------------------------------------------------------------
r522 | ka_shrinivaasan | 2014-05-05 11:04:01 +0530 (Mon, 05 May 2014) | 3 lines

VIRGO cloudfs userspace binary invoked through kernel upcall


------------------------------------------------------------------------
r521 | ka_shrinivaasan | 2014-05-05 11:02:25 +0530 (Mon, 05 May 2014) | 5 lines

Commits for VIRGO Cloud File System Driver (drivers/virgo/cloudfs) with following commands tested in telnet path:
virgo_cloud_open(),virgo_cloud_close(),virgo_cloud_read(),virgo_cloud_write()
Telnet path test logs and screenshots in cloudfs/test_logs


------------------------------------------------------------------------
r520 | ka_shrinivaasan | 2014-05-05 10:30:52 +0530 (Mon, 05 May 2014) | 3 lines

Header files with declared types and datastructures needed for VIRGO Cloud File System (drivers/virgo/cloudfs)


------------------------------------------------------------------------
r519 | ka_shrinivaasan | 2014-05-03 12:39:51 +0530 (Sat, 03 May 2014) | 3 lines

Updated VIRGO Design Document for Virtualized and Geographically distributed kernelspace execution schematic diagram


------------------------------------------------------------------------
r518 | ka_shrinivaasan | 2014-04-30 21:28:08 +0530 (Wed, 30 Apr 2014) | 3 lines

Removed old ProductOwnerProfile from repo


------------------------------------------------------------------------
r517 | ka_shrinivaasan | 2014-04-30 21:27:11 +0530 (Wed, 30 Apr 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r516 | ka_shrinivaasan | 2014-04-29 21:44:51 +0530 (Tue, 29 Apr 2014) | 3 lines

Header file declaration for VFS file structure declaration for opening Disk persisted Queue file


------------------------------------------------------------------------
r515 | ka_shrinivaasan | 2014-04-29 21:43:27 +0530 (Tue, 29 Apr 2014) | 3 lines

Header file declarations for KingCobra Disk Persistence boolean flag, Queue Disk persisted file datasegment and file offset 


------------------------------------------------------------------------
r514 | ka_shrinivaasan | 2014-04-25 13:05:54 +0530 (Fri, 25 Apr 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r513 | ka_shrinivaasan | 2014-04-25 12:42:22 +0530 (Fri, 25 Apr 2014) | 4 lines

kern.log for Telnet-VIRGO Memory Pooling Driver-VIRGO Queue-KingCobra route with ntohl() fix for client's ip address in
KingCobra clause of the VIRGO Memory Pooling


------------------------------------------------------------------------
r512 | ka_shrinivaasan | 2014-04-25 12:36:21 +0530 (Fri, 25 Apr 2014) | 3 lines

Updated build generated sources, symbols and object files


------------------------------------------------------------------------
r511 | ka_shrinivaasan | 2014-04-25 12:35:13 +0530 (Fri, 25 Apr 2014) | 4 lines

Network To Host Byte Order fix has been done for crash during KingCobra request path.
The client sockaddr_in's s_addr is converted using ntohl(). Kern.log has been added with crash and after the fix.


------------------------------------------------------------------------
r510 | ka_shrinivaasan | 2014-04-25 11:05:15 +0530 (Fri, 25 Apr 2014) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r509 | ka_shrinivaasan | 2014-04-17 14:41:33 +0530 (Thu, 17 Apr 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r508 | ka_shrinivaasan | 2014-04-07 17:29:33 +0530 (Mon, 07 Apr 2014) | 3 lines

Updated VIRGO design doc


------------------------------------------------------------------------
r507 | ka_shrinivaasan | 2014-04-07 17:25:07 +0530 (Mon, 07 Apr 2014) | 3 lines

Updated build generated source files and kernel object files


------------------------------------------------------------------------
r506 | ka_shrinivaasan | 2014-04-07 17:24:11 +0530 (Mon, 07 Apr 2014) | 7 lines

New function generate_logical_timestamp() has been implemented that generates the timestamp based on
3 boolean flags. At present only the machine_timestamp based on kernel macros has been implemented.

This function is invoked in VIRGO mempool recvfrom() routine for prepending the timestamp to the requests
coming in from VIRGO queue driver


------------------------------------------------------------------------
r505 | ka_shrinivaasan | 2014-04-07 17:21:07 +0530 (Mon, 07 Apr 2014) | 3 lines

New function parse_timestamp() has been added for parsing timestamps in the incoming KingCobra requests


------------------------------------------------------------------------
r504 | ka_shrinivaasan | 2014-04-07 17:19:59 +0530 (Mon, 07 Apr 2014) | 11 lines

New function generate_logical_timestamp() has been added which generates timestamps for KingCobra requests
based on boolean flags below.

Following boolean flags have been added for various logical timestamp generation schemes to be prepended to the request header so that
no two requests in the VIRGO-KingCobra cloud have the same timestamps:
 
1) EventNet_timestamp is not implemented and for future use with EventNet implementation in AsFer depending on its feasibility.
2) machine_timestamp is the timestamp generated by kernel macros in the request recipient machine
3) other_timestamp_cloudservice is for any other cloud based timestamp services like NTP etc., and not implemented


------------------------------------------------------------------------
r503 | ka_shrinivaasan | 2014-04-06 19:16:17 +0530 (Sun, 06 Apr 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r502 | ka_shrinivaasan | 2014-04-06 18:49:27 +0530 (Sun, 06 Apr 2014) | 3 lines

Updated Build generated Module.symvers, sources and kernel object files


------------------------------------------------------------------------
r501 | ka_shrinivaasan | 2014-04-06 18:48:26 +0530 (Sun, 06 Apr 2014) | 8 lines

Updated the REQUEST header with client ip address sent to KingCobra service with the format
mentioned in KingCobra design doc - REQUEST#<ip_addr>#<message>

Logical Timestamp is not added at present which would require implementation of NTP service or a 
Logical clock on cloud. Another way is to implement EventNet described in AsFer Design Doc



------------------------------------------------------------------------
r500 | ka_shrinivaasan | 2014-03-30 13:52:15 +0530 (Sun, 30 Mar 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r499 | ka_shrinivaasan | 2014-03-30 13:49:39 +0530 (Sun, 30 Mar 2014) | 3 lines

Updated build generated sources and kernel object files


------------------------------------------------------------------------
r498 | ka_shrinivaasan | 2014-03-30 13:48:50 +0530 (Sun, 30 Mar 2014) | 4 lines

Commented clean target for generating unified Module.symvers file that includes exported symbols from
KingCobra and VIRGO queue drivers


------------------------------------------------------------------------
r497 | ka_shrinivaasan | 2014-03-30 13:47:10 +0530 (Sun, 30 Mar 2014) | 6 lines

Updated VIRGO cloudexec mempool driver with following changes:
- new if clause added for use as KingCobra service in mempoolFunc() that pushes the request into VIRGO queue
- new if clause added for use as KingCobra service in virgo_cloudexec_mempool_recvfrom() for prepending the remote client's IP
address with # delimiter that is parsed by KingCobra service


------------------------------------------------------------------------
r496 | ka_shrinivaasan | 2014-03-30 13:43:37 +0530 (Sun, 30 Mar 2014) | 3 lines

Updated build generated Module.symvers that has all symbols from KingCobra and VIRGO mempooling drivers


------------------------------------------------------------------------
r495 | ka_shrinivaasan | 2014-03-30 13:42:21 +0530 (Sun, 30 Mar 2014) | 4 lines

Newly added Module.symvers files for KingCobra and VIRGO queuing drivers' exported symbols that are concatenated into a single Module.symvers
file which gets picked up by the KBuild so that all queue and kingcobra symbol references are resolved in VIRGO mempooling driver.


------------------------------------------------------------------------
r494 | ka_shrinivaasan | 2014-03-30 13:39:19 +0530 (Sun, 30 Mar 2014) | 5 lines

Updated VIRGO mempool header for extern declarations for exported push_request() function from VIRGO queuing driver
and boolean flag use_as_kingcobra_service for using VIRGO mempooling driver as a multithreaded service for incoming
KingCobra requests from remote cloud nodes


------------------------------------------------------------------------
r493 | ka_shrinivaasan | 2014-03-30 13:36:23 +0530 (Sun, 30 Mar 2014) | 3 lines

Updated /etc/modules for boot time loading of VIRGO mempooling driver instead cpupooling


------------------------------------------------------------------------
r492 | ka_shrinivaasan | 2014-03-29 23:15:13 +0530 (Sat, 29 Mar 2014) | 3 lines

Updated CV


------------------------------------------------------------------------
r491 | ka_shrinivaasan | 2014-03-29 22:34:34 +0530 (Sat, 29 Mar 2014) | 7 lines

Updated kingcobra.h header file for:
- #define of KCOBRA_BUF_SIZE buffer allocation macro constant
- two new functions added in KingCobra response path: 
	- parse_ip_address() for parsing the ip address from the message popped from workqueue
	- reply_to_publisher() for connecting to the remote client ip directly and sent the response with "REPLY:" prefix


------------------------------------------------------------------------
r490 | ka_shrinivaasan | 2014-03-29 22:27:46 +0530 (Sat, 29 Mar 2014) | 3 lines

Updated build generated sources, kernel objects


------------------------------------------------------------------------
r489 | ka_shrinivaasan | 2014-03-29 22:26:32 +0530 (Sat, 29 Mar 2014) | 3 lines

clean target commented for Module.symvers merge (KingCobra+VIRGO queue driver symbols) which is otherwise wiped out during clean


------------------------------------------------------------------------
r488 | ka_shrinivaasan | 2014-03-29 22:24:00 +0530 (Sat, 29 Mar 2014) | 3 lines

Screenshot for KingCobra Request-Response Test (telnet client side)


------------------------------------------------------------------------
r487 | ka_shrinivaasan | 2014-03-29 22:22:16 +0530 (Sat, 29 Mar 2014) | 6 lines

Added a new if clause for KingCobra in VIRGO cloudexec recvfrom() which does the following:
- gets the client's ip address (no skbuff or inet_ntoa() is used)
- prepends the client's ip address to the message buf sent to KingCobra servicerequest kernelspace function which is parsed by
KingCobra and client is replied directly


------------------------------------------------------------------------
r486 | ka_shrinivaasan | 2014-03-29 22:15:53 +0530 (Sat, 29 Mar 2014) | 4 lines

newly added Module.symvers files for kingcobra and VIRGO queuing drivers that have to be concatenated into a single Module.symvers file which is 
pickedup by the Kbuild and new Module.symvers file is generated so that all exported symbols are defined (Without this there are LD errors)


------------------------------------------------------------------------
r485 | ka_shrinivaasan | 2014-03-29 22:12:27 +0530 (Sat, 29 Mar 2014) | 3 lines

Updated build generated sources, module symbols, and kernel objects


------------------------------------------------------------------------
r484 | ka_shrinivaasan | 2014-03-29 22:11:07 +0530 (Sat, 29 Mar 2014) | 3 lines

Commented KingCobra object build targets


------------------------------------------------------------------------
r483 | ka_shrinivaasan | 2014-03-29 22:09:47 +0530 (Sat, 29 Mar 2014) | 3 lines

Commented the queue_work and push_request invocation in module init 


------------------------------------------------------------------------
r482 | ka_shrinivaasan | 2014-03-29 22:08:00 +0530 (Sat, 29 Mar 2014) | 3 lines

Updated /etc/modules file boot time loading of VIRGO and KingCobra kernel modules


------------------------------------------------------------------------
r481 | ka_shrinivaasan | 2014-03-24 21:30:26 +0530 (Mon, 24 Mar 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r480 | ka_shrinivaasan | 2014-03-22 17:59:30 +0530 (Sat, 22 Mar 2014) | 3 lines

Latest build autogenerated sources and kernel objects


------------------------------------------------------------------------
r479 | ka_shrinivaasan | 2014-03-22 17:58:20 +0530 (Sat, 22 Mar 2014) | 6 lines

- added #include for virgo_queue.h (push_request())
- new if clause for using VIRGO clone cloudexec service as KingCobra and VIRGO queue frontend has been added. The incoming request
from virgo_clone() syscall or telnet path is pushed into VIRGO queue or Linux workqueue which is popped and serviced by the workqueue
handler and forwarded to KingCobra driver. Kern.log for this end2end test has been added to repository in drivers/virgo/queueing/test_logs/


------------------------------------------------------------------------
r478 | ka_shrinivaasan | 2014-03-22 17:53:41 +0530 (Sat, 22 Mar 2014) | 4 lines

Unified build generated Module.symvers that is generated after copying the Module.symvers in VIRGO queue for 
exported symbol definitions. Without this there are symbol undefined errors in modules_install


------------------------------------------------------------------------
r477 | ka_shrinivaasan | 2014-03-22 17:51:15 +0530 (Sat, 22 Mar 2014) | 4 lines

Latest build autogenerated sources and kernel objects with updated Makefile with additional KingCobra targets also
as there are build related glitches without them


------------------------------------------------------------------------
r476 | ka_shrinivaasan | 2014-03-22 17:47:39 +0530 (Sat, 22 Mar 2014) | 7 lines

kern.log for end to end test:
VIRGO clone syscall => VIRGO cloudexec driver => VIRGO Queue driver => KingCobra Driver that is invoked by VIRGO workqueue handler

This is a minimalistic cloud messaging implementation in Linux Kernel that adds more power to a middleware so that hardware is easily
integrated into a cloud messaging and workflow.


------------------------------------------------------------------------
r475 | ka_shrinivaasan | 2014-03-22 17:40:41 +0530 (Sat, 22 Mar 2014) | 5 lines

- new boolean flag for using VIRGO cpupooling driver as a KingCobra service that routes the incoming request from a remote
virgo_clone() client to VIRGO queue which is later popped by workqueue handler and forwarded to KingCobra driver
- extern declaration for push_request() exported symbol from VIRGO queue module


------------------------------------------------------------------------
r474 | ka_shrinivaasan | 2014-03-20 14:16:38 +0530 (Thu, 20 Mar 2014) | 3 lines

Updated VIRGO Design doc


------------------------------------------------------------------------
r473 | ka_shrinivaasan | 2014-03-20 13:50:31 +0530 (Thu, 20 Mar 2014) | 3 lines

Updated VIRGO design doc


------------------------------------------------------------------------
r472 | ka_shrinivaasan | 2014-03-20 13:44:51 +0530 (Thu, 20 Mar 2014) | 3 lines

Updated build generated sources and kernel object files


------------------------------------------------------------------------
r471 | ka_shrinivaasan | 2014-03-20 13:43:14 +0530 (Thu, 20 Mar 2014) | 3 lines

Split the Makefile into two - one each for VIRGO queue and KingCobra drivers


------------------------------------------------------------------------
r470 | ka_shrinivaasan | 2014-03-17 13:43:37 +0530 (Mon, 17 Mar 2014) | 8 lines

Updated /etc/modules file.
NOTE: Though the module .ko files are in extras/ due to some reason the boot time load of the modules is not working for 
VIRGO queue and KingCobra. Insmod must be in following order without which unknown symbol error will be thrown:
$sudo insmod kingcobra_main_kernelspace.ko
$sudo insmod virgo_queue.ko
and lsmod should show the dependency


------------------------------------------------------------------------
r469 | ka_shrinivaasan | 2014-03-17 13:07:07 +0530 (Mon, 17 Mar 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r468 | ka_shrinivaasan | 2014-03-17 12:50:05 +0530 (Mon, 17 Mar 2014) | 3 lines

Header file for KingCobra datastructures and function declarations.


------------------------------------------------------------------------
r467 | ka_shrinivaasan | 2014-03-17 12:36:55 +0530 (Mon, 17 Mar 2014) | 5 lines

New boolean flag to flip KingCobra between userspace and kernelspace has been added.
Corresponding if-else clauses have been introduced to call usermode helper or the 
exported function in kernel object for KingCobra from workqueue handler.


------------------------------------------------------------------------
r466 | ka_shrinivaasan | 2014-03-17 12:33:14 +0530 (Mon, 17 Mar 2014) | 3 lines

Build generated sources and kernel object files


------------------------------------------------------------------------
r465 | ka_shrinivaasan | 2014-03-17 12:31:34 +0530 (Mon, 17 Mar 2014) | 4 lines

kern.log for KingCobra kernelspace driver test that receives the work_struct payload from workqueue handler in VIRGO queue driver
and prints it stdout


------------------------------------------------------------------------
r464 | ka_shrinivaasan | 2014-03-17 12:27:32 +0530 (Mon, 17 Mar 2014) | 4 lines

Updated Makefile for building KingCobra kernelspace driver kernel objects also.
At build workspace VIRGO queue and KingCobra sources are unified and built using this single Makefile.


------------------------------------------------------------------------
r463 | ka_shrinivaasan | 2014-03-16 19:04:30 +0530 (Sun, 16 Mar 2014) | 9 lines

Rewritten VIRGO workqueue handler with:
- additional boolean flag for using this workqueue for KingCobra
- additional file logging support with filp_xxx() calls
- call_usermodehelper invocation to invoke kingcobra_main entrypoint binary to KingCobra BFT messaging
- fd_install calls (commented at present due to the weird crashes screenshot photos for which have been added to repository) for
file descriptor redirection for stderr and stdout
- more printk()s for debugging


------------------------------------------------------------------------
r462 | ka_shrinivaasan | 2014-03-16 18:53:06 +0530 (Sun, 16 Mar 2014) | 4 lines

- test_logs and screenshots for VIRGO workqueue test with KingCobra
- build generated sources and object files


------------------------------------------------------------------------
r461 | ka_shrinivaasan | 2014-03-16 18:08:01 +0530 (Sun, 16 Mar 2014) | 6 lines

-changed GFP_KERNEL to GFP_ATOMIC kmalloc()s
-added else clause in push_request()
-changed wrapper allocation for work_struct container to kmalloc
and sundry


------------------------------------------------------------------------
r460 | ka_shrinivaasan | 2014-03-12 23:54:37 +0530 (Wed, 12 Mar 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r459 | ka_shrinivaasan | 2014-03-12 23:49:19 +0530 (Wed, 12 Mar 2014) | 4 lines

workqueue handler modified to unwrap the contained work_struct and print the request data populated by push_request() in queue driver module.
Also a new struct virgo_workqueue_struct has been added for using container_of() linux macro. 


------------------------------------------------------------------------
r458 | ka_shrinivaasan | 2014-03-12 23:46:20 +0530 (Wed, 12 Mar 2014) | 7 lines

Additional code for the workqueue wrapper which:
1) envelope the request data in a container virgo_workqueue_request structure 
2) INIT_WORK() the work_struct and
3) queue_work() the work_struct in workqueue
and the build generated sources and object files


------------------------------------------------------------------------
r457 | ka_shrinivaasan | 2014-03-12 23:41:42 +0530 (Wed, 12 Mar 2014) | 3 lines

kern.log for virgo linux workqueue after implementing the container_of() paradigm to pass the data to the work handler


------------------------------------------------------------------------
r456 | ka_shrinivaasan | 2014-03-12 20:14:23 +0530 (Wed, 12 Mar 2014) | 3 lines

Updated /etc/modules  for UMB and VIRGO queuing driver modules


------------------------------------------------------------------------
r455 | ka_shrinivaasan | 2014-03-12 19:58:21 +0530 (Wed, 12 Mar 2014) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r454 | ka_shrinivaasan | 2014-03-12 19:54:09 +0530 (Wed, 12 Mar 2014) | 4 lines

Initial implementation that uses linux kernel's workqueue and handler facility for task scheduling and additional
declarations for that. The kern.log for initial testing of the linux workqueue wrapper has been added to repository


------------------------------------------------------------------------
r453 | ka_shrinivaasan | 2014-03-12 19:51:24 +0530 (Wed, 12 Mar 2014) | 4 lines

Initial implementation that uses linux kernel's workqueue and handler facility for task scheduling and additional
declarations for that.


------------------------------------------------------------------------
r452 | ka_shrinivaasan | 2014-02-25 14:55:34 +0530 (Tue, 25 Feb 2014) | 3 lines

Updated build autogenerated sources and queue kernel object file


------------------------------------------------------------------------
r451 | ka_shrinivaasan | 2014-02-25 14:53:47 +0530 (Tue, 25 Feb 2014) | 3 lines

Updated VIRGO queue kernel module with exported symbols and a simple push-pop test


------------------------------------------------------------------------
r450 | ka_shrinivaasan | 2014-02-25 14:52:04 +0530 (Tue, 25 Feb 2014) | 3 lines

updated VIRGO queue header file


------------------------------------------------------------------------
r449 | ka_shrinivaasan | 2014-02-24 16:34:27 +0530 (Mon, 24 Feb 2014) | 3 lines

VIRGO queue header file having datastructures for VIRGO Queueing driver prototype


------------------------------------------------------------------------
r448 | ka_shrinivaasan | 2014-02-24 16:25:39 +0530 (Mon, 24 Feb 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r447 | ka_shrinivaasan | 2014-02-24 16:18:12 +0530 (Mon, 24 Feb 2014) | 3 lines

Initial prototype implementation for VIRGO queueing driver 


------------------------------------------------------------------------
r446 | ka_shrinivaasan | 2014-02-24 16:16:55 +0530 (Mon, 24 Feb 2014) | 3 lines

Updated VIRGO Design Doc for queueing


------------------------------------------------------------------------
r445 | ka_shrinivaasan | 2014-02-08 12:52:34 +0530 (Sat, 08 Feb 2014) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r444 | ka_shrinivaasan | 2014-01-19 14:35:04 +0530 (Sun, 19 Jan 2014) | 3 lines

Updated and rewritten profile


------------------------------------------------------------------------
r443 | ka_shrinivaasan | 2013-12-30 20:37:59 +0530 (Mon, 30 Dec 2013) | 3 lines

Updated CV


------------------------------------------------------------------------
r442 | ka_shrinivaasan | 2013-12-06 12:20:14 +0530 (Fri, 06 Dec 2013) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r441 | ka_shrinivaasan | 2013-12-06 11:21:43 +0530 (Fri, 06 Dec 2013) | 173 lines

VIRGO version 12.0 Release Notes
--------------------------------
1. New VIRGO memory pooling driver functionality with virgo_malloc(), virgo_set() and virgo_get() system call path and userspace socket or telnet
path has been added.
2. Updated VIRGO Design Document is at - https://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/trunk/virgo-docs/VirgoDesign.txt

----------------------
Important Commits
---------------------

commits as on 1 September 2013
------------------------------
GNU Copyright license and Product Owner Profile (for identity of license issuer) have been committed. Also Virgo Memory Pooling - virgo_malloc() related initial design notes (handwritten scanned) have been committed(http://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/trunk/virgo-docs/VIRGO_Memory_Pooling_virgomalloc_initial_design_notes.pdf)

commits as on 14 September 2013
-------------------------------
Updated virgo malloc design handwritten nodes on kmalloc() and malloc() usage in kernelspace and userspace execution mode of virgo_cloudexec service (http://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/trunk/virgo-docs/VIRGO_Memory_Pooling_virgomalloc_design_notes_2_14September2013.pdf). As described in handwritten notes, virgo_malloc() and related system calls might be needed when a large scale allocation of kernel memory is needed when in kernel space execution mode and large scale userspace memory when in user modes (function and executable modes). Thus a cloud memory pool both in user and kernel space is possible. 

---------------------------------------
VIRGO virtual addressing
---------------------------------------
VIRGO virtual address is defined with the following datatype:

struct virgo_address
{
	int node_id;
	void* addr;
};

VIRGO address translation table is defined with following datatype:

struct virgo_addr_transtable
{
	int node_id;
	void* addr;
};

------------------------------------------------
VIRGO memory pooling prototypical implementation
------------------------------------------------
VIRGO memory pooling implementation as per the design notes committed as above is to be implemented as a prototype under separate directory
under drivers/virgo/memorypooling and $LINUX_SRC_ROOT/virgo_malloc. But the underlying code is more or less similar to drivers/virgo/cpupooling and $LINUX_SRC_ROOT/virgo_clone. 

virgo_malloc() and related syscalls and virgo mempool driver connect to and listen on port different from cpupooling driver. Though all these code can be within cpupooling itself, mempooling is implemented as separate driver and co-exists with cpupooling on bootup (/etc/modules). This enables clear demarcation of functionalities for CPU and Memory virtualization.

Commits as on 17 September 2013
-------------------------------
Initial untested prototype code - virgo_malloc and virgo mempool driver - for VIRGO Memory Pooling has been committed - copied and modified from virgo_clone client and kernel driver service. 

Commits as on 19 September 2013
-------------------------------
3.7.8 Kernel full build done and compilation errors in VIRGO malloc and mempool driver code and more functions code added

Commits as on 23 September 2013
-------------------------------
Updated virgo_malloc.c with two functions, int_to_str() and addr_to_str(), using kmalloc() with full kernel re-build.
(Rather a re-re-build because some source file updates in previous build got deleted somehow mysteriously. This could be related to Cybercrime issues mentioned in https://sourceforge.net/p/usb-md/code-0/HEAD/tree/USBmd_notes.txt )

Commits as on 24 September 2013
-------------------------------
Updated syscall*.tbl files, staging.sh, Makefiles for virgo_malloc(),virgo_set(),virgo_get() and virgo_free() memory pooling syscalls. New testcase test_virgo_malloc for virgo_malloc(), virgo_set(), virgo_get(), virgo_free() has been added to repository. This testcase might have to be updated if return type and args to virgo_malloc+ syscalls are to be changed.

Commits as on 25 September 2013
-------------------------------
All build related errors fixed after kernel rebuild some changes made to function names to reflect their
names specific to memory pooling. Updated /etc/modules also has been committed to repository.

Commits as on 26 September 2013
-------------------------------
Circular dependency error in standalone build of cpu pooling and memory pooling drivers fixed and
datatypes and declarations for CPU pooling and Memory Pooling drivers have been segregated into respective header files (virgo.h and
virgo_mempool.h with corresponding service header files) to avoid any dependency error.

Commits as on 27 September 2013
-------------------------------
Major commits for Memory Pooling Driver listen port change and parsing VIRGO memory pooling commands have been done.

Commits as on 30 September 2013
-------------------------------
New parser functions added for parameter parsing and initial testing on virgo_malloc() works with telnet client with logs in test_logs/

Commits as on 1 October 2013
-----------------------------
Removed strcpy in virgo_malloc as ongoing bugfix for buffer truncation in syscall path.

Commits as on 7 October 2013
----------------------------
Fixed the buffer truncation error from virgo_malloc syscall to mempool driver service which was caused by
sizeof() for a char*. BUF_SIZE is now used for size in both syscall client and mempool kernel service.

Commits as on 9 October 2013 and 10 October 2013
------------------------------------------------
Mempool driver kernelspace virgo mempool ops have been rewritten due to lack of facilities to return a
value from kernel thread function. Since mempool service already spawns a kthread, this seems to be sufficient. Also the iov.iov_len in virgo_malloc has been changed from BUF_SIZE to strlen(buf) since BUF_SIZE
causes the kernel socket to block as it waits for more data to be sent.

Commits as on 11 October 2013
-----------------------------
sscanf format error for virgo_cloud_malloc() return pointer address and sock_release() null pointer exception has been rectified.
Added str_to_addr() utility function.

Commits as on 14 October 2013 and 15 October 2013
-------------------------------------------------
Updated todo list.

Rewritten virgo_cloud_malloc() syscall with:
- mutexed virgo_cloud_malloc() loop
- redefined virgo address translation table in virgo_mempool.h
- str_to_addr(): removed (void**) cast due to null sscanf though it should have worked

Commits as on 18 October 2013
------------------------------
Continued debugging of null sscanf - added str_to_addr2() which uses simple_strtoll() kernel function
for scanning pointer as long long from string and casting it to void*. Also more %p qualifiers where
added in str_to_addr() for debugging.

Based on latest test_virgo_malloc run, simple_strtoll() correctly parses the address string into a long long base 16 and then is reinterpret_cast to void*. Logs in test/

Commits as on 21 October 2013
-----------------------------
Kern.log for testing after vtranstable addr fix with simple_strtoll() added to repository and still the other %p qualifiers do not work and only simple_strtoll() parses the address correctly. 

Commits as on 24 October 2013
-----------------------------
Lot of bugfixes made to virgo_malloc.c for scanning address into VIRGO transtable and size computation. Testcase test_virgo_malloc.c has also been modified to do reinterpret cast of long long into (struct virgo_address*) and corresponding test logs have been added to repository under virgo_malloc/test. 

Though the above sys_virgo_malloc() works, the return value is a kernel pointer if the virgo_malloc executes in the Kernel mode which is more likely than User mode (call_usermodehelper which is circuitous). Moreover copy_from_user() or copy_to_user() may not be directly useful here as this is an address allocation routine. The long long reinterpret cast obfuscates the virgo_address(User or Kernel) as a large integer which is a unique id for the allocated memory on cloud. Initial testing of sys_virgo_set() causes a Kernel Panic as usual probably due to direct access of struct virgo_address*. Alternatives are to use only long long for allocation unique-id everywhere or do copy_to_user() or copy_from_user() of the address on a user supplied buffer. Also vtranstable can be made into a bucketed hash table that maps each alloc_id to a chained virgo malloc chunks than the present sequential addressing which is more similar to open addressing.

Commits as on 25 October 2013
----------------------------
virgo_malloc.c has been rewritten by adding a userspace __user pointer to virgo_get() and virgo_set() syscalls which are internally copied with copy_from_user() and copy_to_user() kernel function to get and set userspace from kernelspace.Header file syscalls.h has been updated with changed syscalls prototypes.Two functions have been added to map a VIRGO address to a unique virgo identifier and viceversa for abstracting hardware addresses from userspace as mentioned in previous commit notes. VIRGO cloud mempool kernelspace driver has been updated to use virgo_mempool_args* instead of void* and VIRGO cloudexec mempool driverhas been updated accordingly during intermodule invocation.The virgo_malloc syscall client has been updated to modified signatures and return types for all mempool alloc,get,set,free syscalls.

Commits as on 29 October 2013
-----------------------------
Miscellaneous ongoing bugfixes for virgo_set() syscall error in copy_from_user().

Commits as on 2 November 2013
-----------------------------
Due to an issue which corrupts the kernel memory, presently telnet path to VIRGO mempool driver has been
tested after commits on 31 October 2013 and 1 November 2013 and is working but again there is an issue in kstrtoul() that returns the wrong address in virgo_cloud_mempool_kernelspace.ko that gives the address for
data to set. 

Commits as on 6 November 2013
-----------------------------
New parser function virgo_parse_integer() has been added to virgo_cloud_mempool_kernelspace driver module which is carried over from
lib/kstrtox.c and modified locally to add an if clause to discard quotes and unquotes. With this the telnet path commands for virgo_malloc()
and virgo_set() are working. Today's kern.log has been added to repository in test_logs/.

Commits as on 7 November 2013
------------------------------
In addition to virgo_malloc and virgo_set, virgo_get is also working through telnet path after today's commit for "virgodata:" prefix in virgo_cloud_mempool_kernelspace.ko. This prefix is needed to differentiate data and address so that toAddressString() can be invoked to sprintf() the address in virgo_cloudexec_mempool.ko. Also mempool command parser has been updated to strcmp() virgo_cloud_get command also. 

Commits as on 11 November 2013
------------------------------
More testing done on telnet path for virgo_malloc, virgo_set and virgo_get commands which work correctly. But there seem to be unrelated
kmem_cache_trace_alloc panics that follow each successful virgo command execution. kern.log for this has been added to repository.

Commits as on 22 November 2013
------------------------------
More testing done on telnet path for virgo_malloc,virgo_set and virgo_set after commenting kernel socket shutdown code in the VIRGO cloudexec
mempool sendto code. Kernel panics do not occur after commenting kernel socket shutdown.

Commits as on 2 December 2013
-----------------------------
Lots of testing were done on telnet path and syscall path connection to VIRGO mempool driver and screenshots for working telnet path (virgo_malloc, virgo_set and virgo_get) have been committed to repository. Intriguingly, the syscall path is suddenly witnessing series of broken pipe erros, blocking errors etc., which are mostly Heisenbugs. 

Commits as on 5 December 2013
------------------------------
More testing on system call path done for virgo_malloc(), virgo_set() and virgo_get() system calls with test_virgo_malloc.c. All three syscalls work in syscall path after lot of bugfixes. Kern.log that has logs for allocating memory in remote cloud node with virgo_malloc, sets data "test_virgo_malloc_data" with virgo_set and retrieves data with virgo_get.




------------------------------------------------------------------------
r440 | ka_shrinivaasan | 2013-12-05 18:43:19 +0530 (Thu, 05 Dec 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r439 | ka_shrinivaasan | 2013-12-05 17:27:54 +0530 (Thu, 05 Dec 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r438 | ka_shrinivaasan | 2013-12-05 17:21:25 +0530 (Thu, 05 Dec 2013) | 3 lines

Updated test_virgo_malloc.c syscall client for virgo_get() with a char[] instead of char* for received value.


------------------------------------------------------------------------
r437 | ka_shrinivaasan | 2013-12-05 17:18:53 +0530 (Thu, 05 Dec 2013) | 7 lines

kern.log for working virgo_malloc(),virgo_set() and virgo_get() system calls:
After commenting sock_release all the 3 calls work and the VIRGO unique id to address mapping and inversion also work end to end
from syscall invocation in test_virgo_malloc.c client to VIRGO mempool driver.

Thus both telnet and syscall paths to VIRGO mempool driver work.


------------------------------------------------------------------------
r436 | ka_shrinivaasan | 2013-12-05 17:14:34 +0530 (Thu, 05 Dec 2013) | 3 lines

All kernel sock_release() invocations have been commented due to kernel panics. Should be uncommented later.


------------------------------------------------------------------------
r435 | ka_shrinivaasan | 2013-12-05 12:23:17 +0530 (Thu, 05 Dec 2013) | 3 lines

Uncommented virgo_get syscall path tests


------------------------------------------------------------------------
r434 | ka_shrinivaasan | 2013-12-05 12:21:12 +0530 (Thu, 05 Dec 2013) | 3 lines

kern.log with working virgo_malloc and virgo_set syscalls path (timestamp 11:36)


------------------------------------------------------------------------
r433 | ka_shrinivaasan | 2013-12-05 12:18:44 +0530 (Thu, 05 Dec 2013) | 13 lines

VIRGO mempool command creations have been modified as:
- allocate a temp buffer and concatenate the virgo mempool command messages with parameters from system call invocation with
strcpy and strcat without kstrdup()
- copy the temp buffer to the buf that is sent as payload to VIRGO mempool driver.
- Earlier code was strcat()-ing to a const char* which could have crashed. With the above no const char* are created.
- After this code change virgo_malloc and virgo_set calls are working , but sock_release crashes as usual in virgo_set which will be
commented in next commits.
- But still there is some unpredictability in connection behaviour and sometimes -32, -107 errors among others do occur. But today's kern.log (which is added to
repository) with timestamp in the range 11:36 has above working virgo_malloc and virgo_set.
- The Virgo Unique ID generation from VIRGO kernel address in virgo_malloc and inverting it to virgo_address within virgo_set system calls
are working as in logs with memcpy() bypassing copy_from_user() which does lot of sanity checks which could have crashed in last months' syscall path testing


------------------------------------------------------------------------
r432 | ka_shrinivaasan | 2013-12-04 19:40:39 +0530 (Wed, 04 Dec 2013) | 4 lines

Today's test kern.log for system call path for virgo_malloc and virgo_set system calls:
virgo_malloc syscall works and virgo_set has a crash in strcat()


------------------------------------------------------------------------
r431 | ka_shrinivaasan | 2013-12-04 19:37:54 +0530 (Wed, 04 Dec 2013) | 13 lines

Ongoing bugfix for syscall path issues like -32 and -107 error codes, and sometimes -512 error codes:
- modified all char* buf to char buf[BUF_SIZE]
- explicit strcpy() to buf from virgo mempool commands.
- lots of guard clauses to prevent negative chunk sizes in virgo_malloc
- commented str_to_addr() invocation
- more debug printk(s)
- all kernel socket datastructures have been moved into the while loop of the virgo_malloc

With the above, the virgo_malloc syscall path works and the virgo_set syscall path also correctly parses
the virgo unique id and creates address from it, but there is a crash within strcat. Today's test kern.log
has been added to repository.


------------------------------------------------------------------------
r430 | ka_shrinivaasan | 2013-12-02 21:12:27 +0530 (Mon, 02 Dec 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r429 | ka_shrinivaasan | 2013-11-29 10:44:23 +0530 (Fri, 29 Nov 2013) | 9 lines

Laptop Screenshots for telnet path test for working virgo_cloud_malloc, virgo_cloud_set and virgo_cloud_get commands that
allocate, set data and retrieve it from a remote cloud node, are added to repository. The buffer is printed that is returned 
from VIRGO mempool driver.This is almost similar to memcached and is a minimum key-value store functionality. This does not do 
any VIRGO unique id obfuscation that is only implemented in system call path.Though the telnet path is working as in screenshots, 
the system call path is plagued by multiple kernel socket related failures that are random and erratic that do not look 
like system call code level errors.



------------------------------------------------------------------------
r428 | ka_shrinivaasan | 2013-11-28 16:01:46 +0530 (Thu, 28 Nov 2013) | 3 lines

Updated buildscript.sh


------------------------------------------------------------------------
r427 | ka_shrinivaasan | 2013-11-28 16:00:07 +0530 (Thu, 28 Nov 2013) | 3 lines

Updated intptrtest binary


------------------------------------------------------------------------
r426 | ka_shrinivaasan | 2013-11-28 15:59:21 +0530 (Thu, 28 Nov 2013) | 3 lines

updated test_virgo_malloc binary


------------------------------------------------------------------------
r425 | ka_shrinivaasan | 2013-11-28 15:58:25 +0530 (Thu, 28 Nov 2013) | 3 lines

Commented debug prints and virgo_get syscall.


------------------------------------------------------------------------
r424 | ka_shrinivaasan | 2013-11-28 15:55:54 +0530 (Thu, 28 Nov 2013) | 3 lines

changed char* to const char*.


------------------------------------------------------------------------
r423 | ka_shrinivaasan | 2013-11-28 15:54:51 +0530 (Thu, 28 Nov 2013) | 4 lines

kern.log with debug printk()s added to print the size and other variables in functions. The size value is printed negative
which points to a serious kernel heap corruption.


------------------------------------------------------------------------
r422 | ka_shrinivaasan | 2013-11-28 15:52:12 +0530 (Thu, 28 Nov 2013) | 7 lines

Changed all GFP_ATOMIC to GFP_KERNEL allocations in all kmalloc()s.
Added more debug printk(s) to analyze the mysterious behaviour in size and sum_alloc_size.
As in kern.log committed along with this, the size parameter becomes negative without any reason
while the mempool driver correctly allocates and sends the address to virgo_malloc syscall client.
This looks like a serious corruption within kernel heap. 


------------------------------------------------------------------------
r421 | ka_shrinivaasan | 2013-11-26 17:23:43 +0530 (Tue, 26 Nov 2013) | 12 lines

Important kern.log during testing of virgo mempool syscall path that has quite a few confusing outputs for same kernel and driver builds:
1.Sometimes the broken pipe error occurs (-107 and -32) and sometimes doesn't during kernel socket connect from syscall.
2.Kernel panic occurs sometimes and sometimes doesn't.
3.Most erratic is the random execution of if(sum_alloc_size==size) which is not executed at all sometimes though size is always 1000 and this causes the
loop to continue while it should have broken.
which is difficult to explain without suspecting lowlevel microcode gimmicks.
4.The simple_strtoll works well in normal mode and erratic in recovery mode.
5.In recovery mode telnet path works well while it is erratic in normal mode.
6.In summary the complete test logs for November 24 to November 26 is quite confusing and difficult to explain.
7.Output behaviours change after multiple executions for same code.


------------------------------------------------------------------------
r420 | ka_shrinivaasan | 2013-11-22 11:55:18 +0530 (Fri, 22 Nov 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r419 | ka_shrinivaasan | 2013-11-22 11:51:28 +0530 (Fri, 22 Nov 2013) | 4 lines

telnet path tests for virgo_cloudexec_mempool driver for virgo_malloc, virgo_get and virgo_set commands. Dt.11/11/2013 had kernel panics which are not in kern.log of 22November2013.
This is probably due to commenting the kernel socket shutdown similar to virgo_malloc syscall.


------------------------------------------------------------------------
r418 | ka_shrinivaasan | 2013-11-20 22:16:15 +0530 (Wed, 20 Nov 2013) | 3 lines

Updated CV in ProductOwnerProfile


------------------------------------------------------------------------
r417 | ka_shrinivaasan | 2013-11-11 19:09:42 +0530 (Mon, 11 Nov 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r416 | ka_shrinivaasan | 2013-11-11 19:05:37 +0530 (Mon, 11 Nov 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r415 | ka_shrinivaasan | 2013-11-11 19:01:24 +0530 (Mon, 11 Nov 2013) | 3 lines

Updated build generated source files and kernel object files.


------------------------------------------------------------------------
r414 | ka_shrinivaasan | 2013-11-11 19:00:28 +0530 (Mon, 11 Nov 2013) | 5 lines

Commented kernel socket shutdown to make it similar to virgo_malloc.c syscall client 
to investigate kmem_cache_trace_alloc panics after each successful execution of virgo_malloc, virgo_set and virgo_get commands in
telnet path.


------------------------------------------------------------------------
r413 | ka_shrinivaasan | 2013-11-11 18:57:40 +0530 (Mon, 11 Nov 2013) | 5 lines

kern.log for working virgo_malloc, virgo_set and virgo_get calls via telnet path.
But there are lot of unrelated kmem_cache_trace_alloc kernel panics after each successful execution of
virgo_malloc,virgo_set and virgo_get command. 


------------------------------------------------------------------------
r412 | ka_shrinivaasan | 2013-11-10 10:45:56 +0530 (Sun, 10 Nov 2013) | 3 lines

Updated CV in ProductOwnerProfile


------------------------------------------------------------------------
r411 | ka_shrinivaasan | 2013-11-07 18:19:04 +0530 (Thu, 07 Nov 2013) | 3 lines

typo fixed.


------------------------------------------------------------------------
r410 | ka_shrinivaasan | 2013-11-07 18:10:29 +0530 (Thu, 07 Nov 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r409 | ka_shrinivaasan | 2013-11-07 18:02:39 +0530 (Thu, 07 Nov 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r408 | ka_shrinivaasan | 2013-11-07 17:55:51 +0530 (Thu, 07 Nov 2013) | 3 lines

kern.log for working virgo_malloc, virgo_set and virgo_get via telnet command path.


------------------------------------------------------------------------
r407 | ka_shrinivaasan | 2013-11-07 17:53:28 +0530 (Thu, 07 Nov 2013) | 3 lines

Updated autogenerated driver kernel object files and build generated source files


------------------------------------------------------------------------
r406 | ka_shrinivaasan | 2013-11-07 17:52:06 +0530 (Thu, 07 Nov 2013) | 5 lines

For virgo_cloud_get(), a prefix "virgodata:" is added which is removed through an strncmp() and if clause
in virgo_cloudexec_mempool.ko driver. With this virgo_malloc, virgo_set and virgo_get work and today's kern.log
has been added in test_logs/


------------------------------------------------------------------------
r405 | ka_shrinivaasan | 2013-11-07 17:48:54 +0530 (Thu, 07 Nov 2013) | 8 lines

*)To differentiate address from data a special prefix virgodata: is prepended to data retrieved
This will be removed by virgo_cloudexec_send_to() module op and only data will be sent to client.
Similar prefix can also be done for address but for the timebeing one prefix is enough to
distinguish address and data.

*)Some printk()s added or modified


------------------------------------------------------------------------
r404 | ka_shrinivaasan | 2013-11-06 19:16:23 +0530 (Wed, 06 Nov 2013) | 3 lines

Updated VIRGO Design Document 


------------------------------------------------------------------------
r403 | ka_shrinivaasan | 2013-11-06 19:06:47 +0530 (Wed, 06 Nov 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r402 | ka_shrinivaasan | 2013-11-06 19:02:14 +0530 (Wed, 06 Nov 2013) | 3 lines

extern declaration for exported function toKernelAddress() in module virgo_cloud_mempool_kernelspace.ko


------------------------------------------------------------------------
r401 | ka_shrinivaasan | 2013-11-06 19:00:29 +0530 (Wed, 06 Nov 2013) | 5 lines

kern.log for telnet path test of virgo_malloc and virgo_set after fixing the address scan error with
new function virgo_parse_integer() carried over from lib/kstrtox.c and locally modified to add an if clause
for quote and unquote.


------------------------------------------------------------------------
r400 | ka_shrinivaasan | 2013-11-06 18:58:11 +0530 (Wed, 06 Nov 2013) | 3 lines

Updated autogenerated source files and build generated driver kernel object files


------------------------------------------------------------------------
r399 | ka_shrinivaasan | 2013-11-06 18:56:17 +0530 (Wed, 06 Nov 2013) | 3 lines

Updated autogenerated source files and driver kernel object files


------------------------------------------------------------------------
r398 | ka_shrinivaasan | 2013-11-06 18:54:49 +0530 (Wed, 06 Nov 2013) | 3 lines

Some cleanup


------------------------------------------------------------------------
r397 | ka_shrinivaasan | 2013-11-06 18:53:34 +0530 (Wed, 06 Nov 2013) | 3 lines

Added more include paths


------------------------------------------------------------------------
r396 | ka_shrinivaasan | 2013-11-06 18:50:59 +0530 (Wed, 06 Nov 2013) | 15 lines

1.Added more #includes kstrtox.h and ctype.h.
2.After a failed effort to make simple_strtoll() and kstrtoll() work without
address scan errors, carried over _parse_integer() from lib/kstrtox.c which underlies
all strtoxxx() functions and modified for VIRGO by
adding an additional if clause for quote and unquote as below. 
Probably this missing clause could be causing the kstrtoll() and simple_strtoll()
which use _parse_integer() in lib/kstrtox.c internally to randomly return junk addresses. But the simple_strtoll()
works well in virgo_malloc client without the above special clause for quotes.
With this new function virgo_cloud_set command correctly sets the address (kern.log for this has been
added to repository with date 6November2013 appended.
3.Added a function printBytes() to print contents of the char* strings.
4.toKernelAddress() has been made inline.
5.More printk()s added.


------------------------------------------------------------------------
r395 | ka_shrinivaasan | 2013-11-04 21:27:02 +0530 (Mon, 04 Nov 2013) | 3 lines

Build generated source and object files for virgo_cloudexec_mempool and virgo_cloud_mempool_kernelspace drivers.


------------------------------------------------------------------------
r394 | ka_shrinivaasan | 2013-11-04 21:25:18 +0530 (Mon, 04 Nov 2013) | 4 lines

Hardcoded string literals in toKernelAdress() which get parsed correctly though function argument doesnot
get parsed. All GFP_ATOMIC have been changed to GFP_KERNEL for kmalloc()s
Argument to toKernelAddress() has been changed to const char*.

------------------------------------------------------------------------
r393 | ka_shrinivaasan | 2013-11-04 21:21:28 +0530 (Mon, 04 Nov 2013) | 3 lines

All GFP_ATOMIC kmalloc(s) have been made into GFP_KERNEL allocations.


------------------------------------------------------------------------
r392 | ka_shrinivaasan | 2013-11-04 21:18:06 +0530 (Mon, 04 Nov 2013) | 5 lines

Kern.log(s) with hardcoded address strings in toKernelAddress() of virgo_cloud_mempool_kernelspace.c that get parsed
correctly with simple_strtoul() and kstrtoul() but something weird happens when the function argument is parsed
and some junk address is parsed. So there is no problem with simple_strtoul() and kstrtoul().


------------------------------------------------------------------------
r391 | ka_shrinivaasan | 2013-11-02 10:09:47 +0530 (Sat, 02 Nov 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r390 | ka_shrinivaasan | 2013-11-01 12:04:46 +0530 (Fri, 01 Nov 2013) | 10 lines

kern.log with working virgo_malloc and virgo_set, but kstrtoul, with kstrdup embedded returns
wrong address. Other permutations of kstrdup done separately etc., causes kernel panic.
This unpredictable behaviour could be either in kstrtoul() or this is similar to earlier
problems of inconsistent kernel blocking sockets caused by external cybercrime issues including a
deliberately injected microcode update or kernel bug that happened few months ago.
Same kstrtoul() code correctly parses in module_init of virgo_cloud_mempool_kernelspace.c
which makes this quite obviously suspicious as to why the problem happens only in toKernelAddress().



------------------------------------------------------------------------
r389 | ka_shrinivaasan | 2013-10-31 22:11:19 +0530 (Thu, 31 Oct 2013) | 3 lines

Laptop screenshot of a working telnet to virgo_mempool_driver for virgo_malloc and virgo_set.


------------------------------------------------------------------------
r388 | ka_shrinivaasan | 2013-10-31 22:06:05 +0530 (Thu, 31 Oct 2013) | 4 lines

two kern.log excerpts for working virgo_malloc and virgo_set that sets a data in remote cloud node.
But there seems to be something different in kstrtoul() parsing in second kern.log.


------------------------------------------------------------------------
r387 | ka_shrinivaasan | 2013-10-31 22:03:11 +0530 (Thu, 31 Oct 2013) | 4 lines

Some changes made to printk() and kstrtoul() invocation and simplified toKernelAddress().
A test kstrtoul() is added to module_init for debugging.


------------------------------------------------------------------------
r386 | ka_shrinivaasan | 2013-10-31 18:47:36 +0530 (Thu, 31 Oct 2013) | 3 lines

kern.log for virgo_cloud_set() test in telnet path.


------------------------------------------------------------------------
r385 | ka_shrinivaasan | 2013-10-31 18:46:37 +0530 (Thu, 31 Oct 2013) | 3 lines

kern.log for virgo_cloud_set() telnet path


------------------------------------------------------------------------
r384 | ka_shrinivaasan | 2013-10-31 18:45:41 +0530 (Thu, 31 Oct 2013) | 3 lines

kern.log for virgo_cloud_set() test through telnet path which works.


------------------------------------------------------------------------
r383 | ka_shrinivaasan | 2013-10-31 18:43:06 +0530 (Thu, 31 Oct 2013) | 3 lines

Updated build generated files and .ko files


------------------------------------------------------------------------
r382 | ka_shrinivaasan | 2013-10-31 18:41:23 +0530 (Thu, 31 Oct 2013) | 6 lines

Updated simple_strtoll() to simple_strtoul() due to kernel panic and both didn't work.
As kernel source mentions these to be obsolete, replaced it with kstrtoul() for scanning
the address from string. But after kstrtoul(), the virgo_cloud_set address, though parsed, shows
wrong value of 0x0000000b always. Kernel logs under test_logs/


------------------------------------------------------------------------
r381 | ka_shrinivaasan | 2013-10-31 18:34:51 +0530 (Thu, 31 Oct 2013) | 3 lines

Updated Makefile for building intptrtest.c


------------------------------------------------------------------------
r380 | ka_shrinivaasan | 2013-10-31 18:33:54 +0530 (Thu, 31 Oct 2013) | 4 lines

Updated test_virgo_malloc testcase with unsigned long
and long instead of long long return type.


------------------------------------------------------------------------
r379 | ka_shrinivaasan | 2013-10-31 18:32:08 +0530 (Thu, 31 Oct 2013) | 3 lines

Updated intptr testcase for miscellaneous cast usecases.


------------------------------------------------------------------------
r378 | ka_shrinivaasan | 2013-10-31 18:30:35 +0530 (Thu, 31 Oct 2013) | 19 lines

Tried almost all options in copy_from_user():
- __copy_from_user() that bypasses checks
- direct memcpy()
- with explicit void* cast
- various sizeof() args
etc., with numerous rebuilds and every time the copy from __user pointer fails and vaddr is set
 to ffffffff always.There seems to be something not obvious and abnormal going on. 
Interestingly even after commenting copy_from_user() the kernel memory gets corrupted though
virgo_unique_id_to_addr() correctly scans and prints the cast address. 
(vaddr gets set to ffffffff in printk() somehow out of nowhere). This happens 
irrespective of allocating the kernel
buffer from stack or with kmalloc(). At present invoking both copy_from_user() and memcpy
which both do not work. Though const pointer could have been used, above should have worked.
Ongoing bugfix. 

Also updated long long to unsigned long for Virgo Unique ID as this corresponds to the C99 uintptr_t
typedef for pointer-to-integer type cast.


------------------------------------------------------------------------
r377 | ka_shrinivaasan | 2013-10-31 18:14:11 +0530 (Thu, 31 Oct 2013) | 4 lines

Changed VIRGO Unique ID type to unsigned long to match with typedef uintptr_t for C99 pointer type.
Kernel (3.7.8) seems to have typedef only of uintptr_t and not intptr_t.


------------------------------------------------------------------------
r376 | ka_shrinivaasan | 2013-10-29 23:32:58 +0530 (Tue, 29 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r375 | ka_shrinivaasan | 2013-10-29 23:30:50 +0530 (Tue, 29 Oct 2013) | 4 lines

kern.log for latest kernel re-(re-re-re...)-build that still shows junk after copy_from_user()
in virgo_set() syscall.


------------------------------------------------------------------------
r374 | ka_shrinivaasan | 2013-10-29 23:28:30 +0530 (Tue, 29 Oct 2013) | 4 lines

Updated test_virgo_malloc.c virgo_set() syscall invocation with char array
and strcpy()


------------------------------------------------------------------------
r373 | ka_shrinivaasan | 2013-10-29 23:26:36 +0530 (Tue, 29 Oct 2013) | 9 lines

Miscellaneous cast related fixes.
copy_from_user() return type is set to long.
More printk() added to investigate why the vaddr and data get junk values
after copy_from_user() which should have worked correctly as this is the
convention in most of the linux drivers.
Also set the length of bytes to BUF_SIZE-1 in copy_from_user()



------------------------------------------------------------------------
r372 | ka_shrinivaasan | 2013-10-29 17:52:03 +0530 (Tue, 29 Oct 2013) | 4 lines

Updated virgo_cloud_set() with kmalloc() for kernel buffer for copying from user data_in pointer.
Also modified copy_from_user() to copy BUF_SIZE-10 bytes.


------------------------------------------------------------------------
r371 | ka_shrinivaasan | 2013-10-28 18:25:19 +0530 (Mon, 28 Oct 2013) | 7 lines

Ongoing bugfix for virgo_cloud_set() Kernel Panic.
Allocated the destination data instead of pointer
before copy_from_user(). Added more printk() for 
debug info. copy_to_user() for Virgo Unique ID is
working.


------------------------------------------------------------------------
r370 | ka_shrinivaasan | 2013-10-28 13:01:02 +0530 (Mon, 28 Oct 2013) | 4 lines

Kern.log debug printks with test_virgo_malloc, after signature changes done in virgo mempool syscalls
for copy_from_user() and copy_to_user()


------------------------------------------------------------------------
r369 | ka_shrinivaasan | 2013-10-28 12:59:15 +0530 (Mon, 28 Oct 2013) | 4 lines

test_virgo_malloc client side test output after virgo mempool syscall signature changes
for doing copy_from_user() and copy_to_user() in the syscall args.


------------------------------------------------------------------------
r368 | ka_shrinivaasan | 2013-10-28 12:56:55 +0530 (Mon, 28 Oct 2013) | 5 lines

Updated test_virgo_malloc testcase with changed signature of virgo_malloc() syscall that
gets the VIRGO unique id from copy_to_user() within syscall. Corresponding test logs are also
being added to repository with datestamp 28October2013


------------------------------------------------------------------------
r367 | ka_shrinivaasan | 2013-10-25 21:25:41 +0530 (Fri, 25 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r366 | ka_shrinivaasan | 2013-10-25 20:01:34 +0530 (Fri, 25 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r365 | ka_shrinivaasan | 2013-10-25 19:55:45 +0530 (Fri, 25 Oct 2013) | 10 lines

Updated all the function arg types to struct virgo_mempool_args* from void* as the 
virgo_cloud_mempool_kernelspace.ko module functions are
directly invoked by virgo_cloudexec_mempool.ko without additional kthread creation in mempool_func()

Also updated toKernelAddress() with simple_strtoll() in addition to sscanf()
as sscanf null for %p seems to be occurring sometimes in driver code also which is 
already happening in virgo_malloc syscall client.



------------------------------------------------------------------------
r364 | ka_shrinivaasan | 2013-10-25 19:50:38 +0530 (Fri, 25 Oct 2013) | 3 lines

Updated autogenerated Module.symvers


------------------------------------------------------------------------
r363 | ka_shrinivaasan | 2013-10-25 19:49:45 +0530 (Fri, 25 Oct 2013) | 4 lines

wrapped virgo_mempool_cmd kstrdup() before strcat as mempool_cmd was overwritten after strcat
Also updated printk() to print mempool args for debug info


------------------------------------------------------------------------
r362 | ka_shrinivaasan | 2013-10-25 19:46:39 +0530 (Fri, 25 Oct 2013) | 3 lines

adding Kbuild to repository


------------------------------------------------------------------------
r361 | ka_shrinivaasan | 2013-10-25 19:45:34 +0530 (Fri, 25 Oct 2013) | 4 lines

Updated the signature of virgo_malloc() with added long long __user* vuid that
will be copied with copy_to_user() and return types to long


------------------------------------------------------------------------
r360 | ka_shrinivaasan | 2013-10-25 19:33:08 +0530 (Fri, 25 Oct 2013) | 4 lines

Changed Function Pointer typedef.
Changed virgo_cloud_mempool_xxxxx(void*) to directly accept virgo_cloud_mempool_xxxxx(virgo_mempool_args*)


------------------------------------------------------------------------
r359 | ka_shrinivaasan | 2013-10-25 19:30:41 +0530 (Fri, 25 Oct 2013) | 10 lines

Changed the return types of virgo mempool syscalls to long from long long. 
Added long long __user* vuid as an arg to virgo_malloc() so that VUID is
copied from kernelspace to userspace using copy_to_user() without disturbing
return type convention of long for syscalls.

Added printk()s in unique id functions.

Testing of syscalls other than virgo_cloud_malloc() causes numerous kernel panics and is ongoing.


------------------------------------------------------------------------
r358 | ka_shrinivaasan | 2013-10-25 19:24:35 +0530 (Fri, 25 Oct 2013) | 4 lines

Testcase for intptr datatype in C99.
If this works in kernelspace,it can be used later for VIRGO Unique ID generation


------------------------------------------------------------------------
r357 | ka_shrinivaasan | 2013-10-25 14:12:18 +0530 (Fri, 25 Oct 2013) | 3 lines

Updated test_virgo_malloc testcase for changed virgo mempool syscall signatures


------------------------------------------------------------------------
r356 | ka_shrinivaasan | 2013-10-25 12:41:04 +0530 (Fri, 25 Oct 2013) | 3 lines

Updated VIRGO design doc


------------------------------------------------------------------------
r355 | ka_shrinivaasan | 2013-10-25 12:35:04 +0530 (Fri, 25 Oct 2013) | 4 lines

Updated VIRGO mempool syscalls for VIRGO unique id args and __user userspace pointers for sending to and
receiving data from kernel with copy_from_user() and copy_to_user()


------------------------------------------------------------------------
r354 | ka_shrinivaasan | 2013-10-25 12:32:34 +0530 (Fri, 25 Oct 2013) | 11 lines

Significant rewrite of virgo mempool syscalls with signature changes for an added __user space pointer
argument for doing copy_from_user() and copy_to_user() from and to the userspace pointer which is a cleaner
way to get and set the userspace address from kernelspace. 
Also the header file syscalls.h has been updated with latest prototype for mempool syscalls.
Two new functions have been added to map the virgo address to a unique id and viceversa to
abstract the hardware addresses from the userspace code. Thus user programs would only see a UVID (unique virgo identifier)
for an address entry chunk allocated on the cloud.

- Ka.Shrinivaasan


------------------------------------------------------------------------
r353 | ka_shrinivaasan | 2013-10-25 12:21:17 +0530 (Fri, 25 Oct 2013) | 4 lines

Two new functions for mapping a unique identifier to a virgo address on the cloud and viceversa
necessary for abstracting hardware addresses to userspace.


------------------------------------------------------------------------
r352 | ka_shrinivaasan | 2013-10-24 18:16:23 +0530 (Thu, 24 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r351 | ka_shrinivaasan | 2013-10-24 17:56:55 +0530 (Thu, 24 Oct 2013) | 3 lines

test_virgo_malloc.c output with long long 


------------------------------------------------------------------------
r350 | ka_shrinivaasan | 2013-10-24 17:55:41 +0530 (Thu, 24 Oct 2013) | 3 lines

Updated test_virgo_malloc binary


------------------------------------------------------------------------
r349 | ka_shrinivaasan | 2013-10-24 17:54:52 +0530 (Thu, 24 Oct 2013) | 3 lines

Updated test_virgo_malloc with long long


------------------------------------------------------------------------
r348 | ka_shrinivaasan | 2013-10-24 12:58:20 +0530 (Thu, 24 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r347 | ka_shrinivaasan | 2013-10-24 12:31:33 +0530 (Thu, 24 Oct 2013) | 4 lines

kern.log for test_virgo_malloc virgo_malloc() syscall testcase.
Corresponding syscall client log is test_virgo_malloc_output.24October2013


------------------------------------------------------------------------
r346 | ka_shrinivaasan | 2013-10-24 12:29:15 +0530 (Thu, 24 Oct 2013) | 5 lines

test_virgo_malloc.c testcase output for virgo_malloc that returns a VIRGO address.
Corresponding kern.log showing vtranstable entry address is
kern_log_test_virgo_malloc_2_virgo_mempool_driver.working_virgo_malloc.24October2013


------------------------------------------------------------------------
r345 | ka_shrinivaasan | 2013-10-24 12:24:32 +0530 (Thu, 24 Oct 2013) | 3 lines

Updated test_virgo_malloc binary


------------------------------------------------------------------------
r344 | ka_shrinivaasan | 2013-10-24 12:22:52 +0530 (Thu, 24 Oct 2013) | 4 lines

Updated test_virgo_malloc.c with reinterpret cast of long int return value from virgo_malloc syscall
Printfs print in both long int and (struct virgo_address*) cast.


------------------------------------------------------------------------
r343 | ka_shrinivaasan | 2013-10-24 12:20:24 +0530 (Thu, 24 Oct 2013) | 8 lines

Due to Kernel Panic all strcat()s have been wrapped with a kstrdup() for guaranteed kernel char* 
test_virgo_malloc.c has been modified with reinterpret cast of long int return value
to a virgo_address pointer and it prints the pointer too. 
There doesn't seem to be a better way to do this as there are almost nil references for
returning a non-"long int " user defined return data type pointer from a kernel syscall. 
Logs for virgo_malloc and Kernel sides have been added to repository.


------------------------------------------------------------------------
r342 | ka_shrinivaasan | 2013-10-22 21:31:16 +0530 (Tue, 22 Oct 2013) | 3 lines

Kern.log test_virgo_malloc debug printk after size computation bugfix and more debug messages 


------------------------------------------------------------------------
r341 | ka_shrinivaasan | 2013-10-22 16:15:04 +0530 (Tue, 22 Oct 2013) | 3 lines

Updated test_virgo_malloc.c and Makefile with bugfixes


------------------------------------------------------------------------
r340 | ka_shrinivaasan | 2013-10-22 16:14:02 +0530 (Tue, 22 Oct 2013) | 4 lines

Added more code comments and if clause for sum of allocated sizes has been changed
Also sock_release has been commented


------------------------------------------------------------------------
r339 | ka_shrinivaasan | 2013-10-22 13:18:45 +0530 (Tue, 22 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r338 | ka_shrinivaasan | 2013-10-21 17:52:41 +0530 (Mon, 21 Oct 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r337 | ka_shrinivaasan | 2013-10-21 17:48:10 +0530 (Mon, 21 Oct 2013) | 4 lines

Kern.log output for virgo_cloud_malloc() test after a kernel rebuild for vtranstable addr fix which is correctly printed in logs. But still there is
sock_release and poll_wait panic.


------------------------------------------------------------------------
r336 | ka_shrinivaasan | 2013-10-21 17:44:58 +0530 (Mon, 21 Oct 2013) | 3 lines

Uncommented all tests


------------------------------------------------------------------------
r335 | ka_shrinivaasan | 2013-10-21 11:44:32 +0530 (Mon, 21 Oct 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r334 | ka_shrinivaasan | 2013-10-18 16:47:22 +0530 (Fri, 18 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r333 | ka_shrinivaasan | 2013-10-18 16:07:08 +0530 (Fri, 18 Oct 2013) | 7 lines

Kern.log for simple_strtoll() in virgo_malloc.c which correctly parses the address in string into 
long long and through reinterpret cast void* is obtained. Line 500 to 600 show that all other %p
formats %p, %pK, %pF, %pS print (null) or 00000000 due to some unknown reason. 

Unclear on how %p was working earlier in virgo_cloud_mempool_kernelspace.ko driver.


------------------------------------------------------------------------
r332 | ka_shrinivaasan | 2013-10-18 16:00:59 +0530 (Fri, 18 Oct 2013) | 6 lines

simple_strtoll() correctly scans the address instead of all other %p formats (%p, %pK, %pF, %S) which return 
either 00000000 due to obfuscation or null for unknown reason. Test Kern.log added under test/

Added missing return for (char*) cast strtoll() scanned pointer. Also modified the printk debug message


------------------------------------------------------------------------
r331 | ka_shrinivaasan | 2013-10-18 12:43:42 +0530 (Fri, 18 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r330 | ka_shrinivaasan | 2013-10-18 12:40:29 +0530 (Fri, 18 Oct 2013) | 3 lines

prototype for str_to_addr2() which invokes simple_strtoll() has been added


------------------------------------------------------------------------
r329 | ka_shrinivaasan | 2013-10-18 12:38:59 +0530 (Fri, 18 Oct 2013) | 6 lines

Added str_to_addr2() function which directly uses simple_strtoll() instead of vsscanf()
Also added lot of other %p qualifiers - %pK, %pF, %pS for debugging the null scanf and this is
becoming more of trial and error which it shouldn't be as the driver %p sscanf() works. Something is
wrong with syscall path.


------------------------------------------------------------------------
r328 | ka_shrinivaasan | 2013-10-18 12:34:31 +0530 (Fri, 18 Oct 2013) | 6 lines

Ongoing debugging for null sscanf in virgo_malloc.c.
As an alternative to sscanf also tested strtoll in userspace which is bit of a hack to get a
pointer from string. Infact the kernel/vsprintf.c in kernel source uses simple_strtoll after parsing the
qualifier. 


------------------------------------------------------------------------
r327 | ka_shrinivaasan | 2013-10-17 19:59:02 +0530 (Thu, 17 Oct 2013) | 24 lines

Updated sscanftest.c with separate pointer for var_sscanf and output in comments. 
Meanwhile, latest kernel build with same vsscanf code still returns null in virgo_malloc.c 
as in kern.log below
------------------------------------------------------------------------------------------
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023661] virgo_mempool_client_thread(): virgo_mempool_ops.virgo_mempool_sendto()
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023665] toAddressString(): address=eea74000, sprintf strAddress=[eea74000]
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023669] virgocloudexec_mempool_sendto(): before kernel_sendmsg() for send buffer: eea74000
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023700] virgocloudexec_mempool_sendto(): kernel_sendmsg() returns ret: 500
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023703] virgocloudexec_mempool_sendto(): Shut down Kernel Side Client Socket with SOCK_WAKE_URG after sendmsg
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023725] virgocloudexec_mempool_sendto(): sock_release invoked on client socket
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023733] virgo_malloc() syscall: recv len=500; received message buf: [eea74000]
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023737] virgo_malloc() syscall: received iov.iov_base:
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023742] str_to_addr(): straddr=[eea74000], address scanned ptr=  (null), address scanned voidptr=  (null)
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023745] str_to_addr(): after var_sscanf(): straddr=[eea74000], voidptr_vargs by vsscanf:   (null)
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023749] virgo_malloc() syscall: vtranstable.vtable[i].addr=  (null)
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023754] virgo_malloc() syscall: next_vtable_entry=2, vtranstable.vtable[next_vtable_entry].node_id=2, vtranstable.vtable[next_vtable_entry].addr=  (null), vtranstable.vtable[next_vtable_entry].hstprt->hostip=127.0.0.1, vtranstable.vtable[next_vtable_entry].hstprt->port=30000
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023758] virgo_malloc() syscall: le32_to_cpus(buf): eea74000
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023783] BUG: unable to handle kernel NULL pointer dereference at 00000010
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023789] IP: [<c14ee1da>] sock_release+0x1a/0x80
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023800] *pdpt = 000000002eb3e001 *pde = 0000000000000000
Oct 17 19:35:08 kashrinivaasan-Inspiron-1545 kernel: [  166.023807] Oops: 0000 [#3] SMP
@                                                                                                        @                                                                                                        @                                                                                                                                                                                               41646,1       99%


------------------------------------------------------------------------
r326 | ka_shrinivaasan | 2013-10-17 17:46:28 +0530 (Thu, 17 Oct 2013) | 3 lines

var_sscanf() function prototype added


------------------------------------------------------------------------
r325 | ka_shrinivaasan | 2013-10-17 17:37:07 +0530 (Thu, 17 Oct 2013) | 3 lines

Added vsscanf to virgo_malloc.c for debugging


------------------------------------------------------------------------
r324 | ka_shrinivaasan | 2013-10-17 16:42:02 +0530 (Thu, 17 Oct 2013) | 5 lines

Updated sscanftest for vsscanf().
Added sscanftest binary to repository
Makefile updated


------------------------------------------------------------------------
r323 | ka_shrinivaasan | 2013-10-17 15:38:14 +0530 (Thu, 17 Oct 2013) | 4 lines

Testcase for sscanf %p modifier for testing null sscanf in virgo_malloc.c
Standalone sscanf works perfectly.


------------------------------------------------------------------------
r322 | ka_shrinivaasan | 2013-10-17 12:05:06 +0530 (Thu, 17 Oct 2013) | 3 lines

Kern.log with str_to_addr() sscanf null return value and pollwait panic in socket_release()


------------------------------------------------------------------------
r321 | ka_shrinivaasan | 2013-10-16 17:51:05 +0530 (Wed, 16 Oct 2013) | 5 lines

Updated str_to_addr() with and without void** cast and both return null in sscanf
which does not happen in virgo_cloud_mempool_kernelspace.ko module. Ongoing testing and 
bugfix


------------------------------------------------------------------------
r320 | ka_shrinivaasan | 2013-10-16 10:53:39 +0530 (Wed, 16 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r319 | ka_shrinivaasan | 2013-10-15 21:58:05 +0530 (Tue, 15 Oct 2013) | 4 lines

Commented mutex due to a kernel panic though it needn't.
Set persistence flag for vtranstable to 0 - not persisted


------------------------------------------------------------------------
r318 | ka_shrinivaasan | 2013-10-15 17:19:54 +0530 (Tue, 15 Oct 2013) | 3 lines

Linux build error fixed for vtranstable mutex


------------------------------------------------------------------------
r317 | ka_shrinivaasan | 2013-10-15 15:15:15 +0530 (Tue, 15 Oct 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r316 | ka_shrinivaasan | 2013-10-15 15:10:31 +0530 (Tue, 15 Oct 2013) | 6 lines

Rewritten virgo_cloud_malloc() syscall with:
- mutexed virgo_cloud_malloc() loop
- redefined virgo address translation table in virgo_mempool.h
- str_to_addr(): removed (void**) cast due to null sscanf though it should have worked


------------------------------------------------------------------------
r315 | ka_shrinivaasan | 2013-10-15 14:57:43 +0530 (Tue, 15 Oct 2013) | 50 lines

Added following fields to VIRGO address translation table for distributed 
persisted storage of the transtable in future, unique id and refcounting

New function str_to_addr() prototype and starting alloc entry for each cloud 
allocation

--------------------------------------------------------------------------
+	/*
+	allocation unique id to uniquely identify all chunks  for that cloud allocation
+	*/
+	int cloud_alloc_id;
+	/*
+	For future use - reference count for this address
+	*/
+	int refcount;


+
+	/*
+	address table of size 3000 for maximum of 3000 cloud nodes
+	*/
+	struct virgo_address vtable[3000];
+
+
+	/*
+	for future use - if some search algorithm is needed for tree representation of transtable 
+	fragments distributed geographically. Each fragment is for maximum of 3000 cloud nodes.
+	*/
+	struct virgo_addr_transtable* vtable_left;
+	struct virgo_addr_transtable* vtable_right;
+
+	/*
+	for future use - Set to 1 if virgo_addr_transtable fragment is persisted in disk
+	*/
+	int fragment_is_disk_persisted;
+
+	/*
+	Mutex to synchronize access to this address table fragment
+	*/
+	struct mutex vtable_fragment_mutex;


+char* str_to_addr(char*);
 
+struct virgo_addr_transtable vtranstable;
+int alloc_id=1;
+int next_vtable_entry=0;



------------------------------------------------------------------------
r314 | ka_shrinivaasan | 2013-10-14 11:26:55 +0530 (Mon, 14 Oct 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r313 | ka_shrinivaasan | 2013-10-14 10:59:03 +0530 (Mon, 14 Oct 2013) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r312 | ka_shrinivaasan | 2013-10-11 21:38:59 +0530 (Fri, 11 Oct 2013) | 6 lines

Added a new function str_to_addr() for sscanf of the kernel address from the buffer received from
mempool driver similar to virgo_cloud_mempool_kernelspace.ko.
But mysteriously the sscanf returns null though same thing works in driver during Testing. Ongoing bugfix



------------------------------------------------------------------------
r311 | ka_shrinivaasan | 2013-10-11 11:50:32 +0530 (Fri, 11 Oct 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r310 | ka_shrinivaasan | 2013-10-11 11:39:08 +0530 (Fri, 11 Oct 2013) | 4 lines

Errors in sscanf format string removed and if-else clause for sock NULL pointer added as sock was becoming NULL (though there is
no reason for sock to become NULL)


------------------------------------------------------------------------
r309 | ka_shrinivaasan | 2013-10-10 21:01:24 +0530 (Thu, 10 Oct 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r308 | ka_shrinivaasan | 2013-10-10 21:00:22 +0530 (Thu, 10 Oct 2013) | 3 lines

kern.log for test_virgo_malloc testing on 10 October 2013


------------------------------------------------------------------------
r307 | ka_shrinivaasan | 2013-10-10 20:58:49 +0530 (Thu, 10 Oct 2013) | 3 lines

changed BUF_SIZE to strlen(buf) for iov.iov_len as kernel socket send was blocking for more data due to BUF_SIZE


------------------------------------------------------------------------
r306 | ka_shrinivaasan | 2013-10-10 20:56:33 +0530 (Thu, 10 Oct 2013) | 3 lines

Updated test_virgo_malloc


------------------------------------------------------------------------
r305 | ka_shrinivaasan | 2013-10-10 20:55:44 +0530 (Thu, 10 Oct 2013) | 3 lines

Updated test_virgo_malloc.c with virgo_cloud_malloc(1000) and commented other syscalls


------------------------------------------------------------------------
r304 | ka_shrinivaasan | 2013-10-09 15:33:29 +0530 (Wed, 09 Oct 2013) | 3 lines

test logs from telnet and test_virgo_malloc to VIRGO mempool driver done on 9 October 2013


------------------------------------------------------------------------
r303 | ka_shrinivaasan | 2013-10-09 15:26:41 +0530 (Wed, 09 Oct 2013) | 37 lines

----------------------------------------------------------------------------------------------------
###Crucial changes made to mempool driver code due to error in return value from kernel thread function###
----------------------------------------------------------------------------------------------------

1. kthread_create()s in mempool_func() and virgocloudexec_mempool_recvfrom() have been 
commented and the virgo mempool functions in virgo_cloud_mempool_kernelspace.ko module
are directly invoked using kernel space intermodule invocation. This seems to be sufficient since the
VIRGO mempool service header creates per request kernel thread already.

2.virgo_cloud_mempool_kernelspace.ko module functions have been updated to use the virgo_mempool.h struct vmargs and casting of args done.


3.parse_virgomempool_command_kernelspace() function within virgo_cloud_mempool_kernelspace.ko 
has been commented since parse_virgomempool_command() within virgo_cloudexec_mempool.ko is in turn used 
to initialize vmargs and invoke the functions in virgo_cloud_mempool_kernelspace.ko

4.New function toAddressStr() has been added to stringify the address for returning it to the virgo mempool
driver client.

5.Preliminary testing with telnet and test_virgo_malloc done and telnet and test_virgo_malloc test logs
have been committed in test_logs/

6.Allocated kernel address is returned as a string to the client as in telnet and kern logs.

7.Header files for virgo mempool driver have been updated for the above and also a kernel lock
virgo_mempool_mutex has been declared which can be used for synchronization.

8.struct vmargs has been updated with more members to test out args from virgo_cloud_mempool_kernelspace.ko
(but this does not work sometimes) for returning values from virgo mempool kernelspace functions.

9.More global declarations have been moved into virgo_cloudexec_mempool.c ops functions for kthread localization and
virgo_mempool ops and ops function signatures have been updated in virgo_mempool.h for adding an extra
pointer parameter in virgocloudexec_mempool_sendto() and return type of virgocloudexec_mempool_recvfrom().

10.More debugging KERN_INFO printk()s added.


------------------------------------------------------------------------
r302 | ka_shrinivaasan | 2013-10-08 18:51:56 +0530 (Tue, 08 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r301 | ka_shrinivaasan | 2013-10-08 18:49:10 +0530 (Tue, 08 Oct 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r300 | ka_shrinivaasan | 2013-10-07 18:00:45 +0530 (Mon, 07 Oct 2013) | 3 lines

Updated VIRGO Design Document


------------------------------------------------------------------------
r299 | ka_shrinivaasan | 2013-10-07 17:56:58 +0530 (Mon, 07 Oct 2013) | 4 lines

Changed sizeof(buffer) to BUF_SIZE everywhere so that buffer can be made a char* instead of a 
char array if needed.


------------------------------------------------------------------------
r298 | ka_shrinivaasan | 2013-10-07 17:53:15 +0530 (Mon, 07 Oct 2013) | 5 lines

Kern.log output for testing of buffer truncation fix for virgo_malloc.c syscall client
Mempool driver receives the full command string but there seems to be a Kernel Panic
due to synchronization and command parsing issues


------------------------------------------------------------------------
r297 | ka_shrinivaasan | 2013-10-07 17:50:29 +0530 (Mon, 07 Oct 2013) | 5 lines

Fixed the buffer truncation error which was due to sizeof() operator instead of BUF_SIZE for the
virgo mempool command string char* that was returning the sizeof pointer which is 4 instead of
buffer size. With this full virgo mempool command string is received by mempool kernel driver


------------------------------------------------------------------------
r296 | ka_shrinivaasan | 2013-10-04 20:01:55 +0530 (Fri, 04 Oct 2013) | 4 lines

Added more printk() for debugging buffer truncation error in syscall path though telnet to
mempool driver with virgo_cloud_malloc command works without error


------------------------------------------------------------------------
r295 | ka_shrinivaasan | 2013-10-04 19:59:45 +0530 (Fri, 04 Oct 2013) | 3 lines

Added more printk() for debugging buffer truncation error in syscall path


------------------------------------------------------------------------
r294 | ka_shrinivaasan | 2013-10-02 00:00:34 +0530 (Wed, 02 Oct 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r293 | ka_shrinivaasan | 2013-10-01 23:16:53 +0530 (Tue, 01 Oct 2013) | 3 lines

Updated test_virgo_malloc.c and binary with debug printk


------------------------------------------------------------------------
r292 | ka_shrinivaasan | 2013-10-01 23:15:41 +0530 (Tue, 01 Oct 2013) | 3 lines

Removed redundant strcpy() as kstrdup() of the virgo malloc commands is done previously


------------------------------------------------------------------------
r291 | ka_shrinivaasan | 2013-10-01 23:12:40 +0530 (Tue, 01 Oct 2013) | 4 lines

Mysterious truncation error in kernel socket recv buffer only in syscall path where as telnet path for virgo_malloc works
Adding Kern.log to repository with this error in today's testing


------------------------------------------------------------------------
r290 | ka_shrinivaasan | 2013-09-30 22:13:53 +0530 (Mon, 30 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r289 | ka_shrinivaasan | 2013-09-30 22:11:13 +0530 (Mon, 30 Sep 2013) | 5 lines

Updated autogenerated .virgo_cloudexec_mempool.o.cmd 
and virgo_cloud_mempool_kernelspace.c with duplicate KERN_INFO removed from printk()



------------------------------------------------------------------------
r288 | ka_shrinivaasan | 2013-09-30 18:57:45 +0530 (Mon, 30 Sep 2013) | 3 lines

test output


------------------------------------------------------------------------
r287 | ka_shrinivaasan | 2013-09-30 18:56:48 +0530 (Mon, 30 Sep 2013) | 3 lines

test output


------------------------------------------------------------------------
r286 | ka_shrinivaasan | 2013-09-30 18:55:47 +0530 (Mon, 30 Sep 2013) | 3 lines

test output


------------------------------------------------------------------------
r285 | ka_shrinivaasan | 2013-09-30 18:50:12 +0530 (Mon, 30 Sep 2013) | 5 lines

Updated staging script and VIRGO memory pooling driver with lots of bugfixes ,new functions for parameter
parsing and minimum working virgo_malloc from telnet (test output logs in test_logs/)



------------------------------------------------------------------------
r284 | ka_shrinivaasan | 2013-09-30 11:21:54 +0530 (Mon, 30 Sep 2013) | 3 lines

Updated ProductOwnerProfile for VIRGO


------------------------------------------------------------------------
r283 | ka_shrinivaasan | 2013-09-30 11:20:53 +0530 (Mon, 30 Sep 2013) | 3 lines

Updated staging.sh script


------------------------------------------------------------------------
r282 | ka_shrinivaasan | 2013-09-27 20:18:29 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated virgo_mempool.h header file for datatype to store memory pooling command parameters after parsing


------------------------------------------------------------------------
r281 | ka_shrinivaasan | 2013-09-27 20:13:36 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r280 | ka_shrinivaasan | 2013-09-27 20:09:21 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated Autogenerated Module.symvers


------------------------------------------------------------------------
r279 | ka_shrinivaasan | 2013-09-27 20:08:25 +0530 (Fri, 27 Sep 2013) | 4 lines

Updated VIRGO Memory Pooling Driver with newly added 
Parser function for parsing VIRGO memory pooling commands sent from remote syscall client


------------------------------------------------------------------------
r278 | ka_shrinivaasan | 2013-09-27 20:04:53 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated virgo_cloud_mempool_kernelspace.ko


------------------------------------------------------------------------
r277 | ka_shrinivaasan | 2013-09-27 20:03:48 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated VIRGO kernel upcall plugin for mempool


------------------------------------------------------------------------
r276 | ka_shrinivaasan | 2013-09-27 20:01:00 +0530 (Fri, 27 Sep 2013) | 5 lines

Rewritten virgo_cloud_mempool.c that has the userspace implementations of
virgo_cloud_malloc(), virgo_cloud_set(), virgo_cloud_get() and virgo_cloud_free() and 
newly implemented command parser function and toAddress() function


------------------------------------------------------------------------
r275 | ka_shrinivaasan | 2013-09-27 19:58:11 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated autogenerated virgo_cloudexec_mempool.mod.c


------------------------------------------------------------------------
r274 | ka_shrinivaasan | 2013-09-27 19:57:01 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated virgo_cloudexec_mempool.ko


------------------------------------------------------------------------
r273 | ka_shrinivaasan | 2013-09-27 19:55:59 +0530 (Fri, 27 Sep 2013) | 3 lines

Updated autogenerated virgo_cloud_mempool_kernelspace.mod.c


------------------------------------------------------------------------
r272 | ka_shrinivaasan | 2013-09-27 19:54:47 +0530 (Fri, 27 Sep 2013) | 4 lines

Kern.log for VIRGO Memory Pooling Syscall and Driver Test
that shows an NXProtected error during testing


------------------------------------------------------------------------
r271 | ka_shrinivaasan | 2013-09-27 19:51:21 +0530 (Fri, 27 Sep 2013) | 3 lines

Changed the VIRGO Memory Pooling Driver listen port to 30000 from 10000


------------------------------------------------------------------------
r270 | ka_shrinivaasan | 2013-09-27 12:35:26 +0530 (Fri, 27 Sep 2013) | 4 lines

test_virgo_clone end to end test on kernelspace virgo cloudexec driver after recent
code revisions for Memory pooling driver


------------------------------------------------------------------------
r269 | ka_shrinivaasan | 2013-09-27 12:32:47 +0530 (Fri, 27 Sep 2013) | 3 lines

VIRGO cloudexec mempool driver initialization test kern.log


------------------------------------------------------------------------
r268 | ka_shrinivaasan | 2013-09-26 12:52:14 +0530 (Thu, 26 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r267 | ka_shrinivaasan | 2013-09-26 12:48:24 +0530 (Thu, 26 Sep 2013) | 3 lines

Bash script for VIRGO clouldexec cpupooling driver standalone build


------------------------------------------------------------------------
r266 | ka_shrinivaasan | 2013-09-26 12:46:05 +0530 (Thu, 26 Sep 2013) | 5 lines

Renamed variables specific to memory pooling to remove circular dependency in standalone driver build
and also changed parameter name passed in to kernelspace execution mode with concatenation of "_kernelspace"
along with kstrdup()


------------------------------------------------------------------------
r265 | ka_shrinivaasan | 2013-09-26 12:42:16 +0530 (Thu, 26 Sep 2013) | 3 lines

Updated Makefile comment


------------------------------------------------------------------------
r264 | ka_shrinivaasan | 2013-09-26 12:40:51 +0530 (Thu, 26 Sep 2013) | 3 lines

Bash script for standalone build of VIRGO cloudexec memeorypool driver


------------------------------------------------------------------------
r263 | ka_shrinivaasan | 2013-09-26 12:38:26 +0530 (Thu, 26 Sep 2013) | 3 lines

Updated VIRGO malloc syscall client with some cleanup


------------------------------------------------------------------------
r262 | ka_shrinivaasan | 2013-09-26 12:23:56 +0530 (Thu, 26 Sep 2013) | 4 lines

All VIRGO Memory Pooling Driver related declarations and datatypes moved in here from virgo.h to remove
circular dependency during build


------------------------------------------------------------------------
r261 | ka_shrinivaasan | 2013-09-26 12:22:00 +0530 (Thu, 26 Sep 2013) | 4 lines

Segregation of VIRGO memory pooling related declarations from CPU Pooling declarations
to remove circular dependency during driver build


------------------------------------------------------------------------
r260 | ka_shrinivaasan | 2013-09-26 12:19:42 +0530 (Thu, 26 Sep 2013) | 3 lines

Segregation of Memory Pooling related declarations from CPU Pooling related declaration with apt nomenclature


------------------------------------------------------------------------
r259 | ka_shrinivaasan | 2013-09-25 20:50:52 +0530 (Wed, 25 Sep 2013) | 3 lines

Linux build error in modpost and initramfs error in bootup in UUID lookup failure for /dev/sda5


------------------------------------------------------------------------
r258 | ka_shrinivaasan | 2013-09-25 20:35:58 +0530 (Wed, 25 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r257 | ka_shrinivaasan | 2013-09-25 20:32:39 +0530 (Wed, 25 Sep 2013) | 3 lines

Moved all memory pooling related function prototypes to virgo_mempool.h


------------------------------------------------------------------------
r256 | ka_shrinivaasan | 2013-09-25 20:31:04 +0530 (Wed, 25 Sep 2013) | 5 lines

Changed Loadabalancer function names specific to Memory Pooling due to linker error in vmlinux in modpost
during full Kernel rebuild. This also resulted in seemingly unrelated error of failed initramfs in
looking up /dev/sda5 by UUID


------------------------------------------------------------------------
r255 | ka_shrinivaasan | 2013-09-25 20:27:10 +0530 (Wed, 25 Sep 2013) | 2 lines

Updated comment

------------------------------------------------------------------------
r254 | ka_shrinivaasan | 2013-09-25 15:22:10 +0530 (Wed, 25 Sep 2013) | 3 lines

Updated /etc/modules for VIRGO Memory Pooling drivers loaded at bootup


------------------------------------------------------------------------
r253 | ka_shrinivaasan | 2013-09-24 13:10:13 +0530 (Tue, 24 Sep 2013) | 2 lines

Updated VIRGO Design Doc 

------------------------------------------------------------------------
r252 | ka_shrinivaasan | 2013-09-24 13:06:26 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated test_virgo_clone binary


------------------------------------------------------------------------
r251 | ka_shrinivaasan | 2013-09-24 13:05:11 +0530 (Tue, 24 Sep 2013) | 3 lines

test_virgo_malloc binary


------------------------------------------------------------------------
r250 | ka_shrinivaasan | 2013-09-24 13:04:16 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated Makefile for test_virgo_malloc testcase


------------------------------------------------------------------------
r249 | ka_shrinivaasan | 2013-09-24 13:03:08 +0530 (Tue, 24 Sep 2013) | 3 lines

Initial commit for virgo_malloc and related syscalls testcase


------------------------------------------------------------------------
r248 | ka_shrinivaasan | 2013-09-24 13:01:09 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated virgo_malloc syscall client with inclusion of virgo_mempool.h header for VIRGO memory pooling related datatypes


------------------------------------------------------------------------
r247 | ka_shrinivaasan | 2013-09-24 12:55:23 +0530 (Tue, 24 Sep 2013) | 3 lines

New Header file for VIRGO Memory Pooling related datatypes


------------------------------------------------------------------------
r246 | ka_shrinivaasan | 2013-09-24 10:43:13 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated syscalls.h for virgo_malloc syscalls - sys_virgo_malloc(), sys_virgo_get(), sys_virgo_set(), sys_virgo_free()


------------------------------------------------------------------------
r245 | ka_shrinivaasan | 2013-09-24 10:40:38 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated Root Makefile for virgo_malloc directory


------------------------------------------------------------------------
r244 | ka_shrinivaasan | 2013-09-24 10:38:48 +0530 (Tue, 24 Sep 2013) | 4 lines

Updated syscall_32.tbl and syscall_64.tbl files for syscall clients to 
VIRGO memory pooling driver - virgo_malloc(), virgo_set(), virgo_get(), virgo_free()


------------------------------------------------------------------------
r243 | ka_shrinivaasan | 2013-09-24 10:35:59 +0530 (Tue, 24 Sep 2013) | 3 lines

Updated staging.sh script for copying .tbl files, syscalls.h, root Makefile etc.,


------------------------------------------------------------------------
r242 | ka_shrinivaasan | 2013-09-23 17:24:20 +0530 (Mon, 23 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r241 | ka_shrinivaasan | 2013-09-23 17:15:27 +0530 (Mon, 23 Sep 2013) | 6 lines

Updated VIRGO memeory pooling client to memory pooling driver with two functions int_to_str() and addr_to_str() to convert
integer and address to char* strings using kmalloc(). Not sure if sprintf and kmalloc can be done together.
 If it doesn't might need an alternative. At present only kernel build works.



------------------------------------------------------------------------
r240 | ka_shrinivaasan | 2013-09-23 17:10:40 +0530 (Mon, 23 Sep 2013) | 3 lines

Updated buildscript.sh for building both cpupooling and memorypooling VIRGO drivers


------------------------------------------------------------------------
r239 | ka_shrinivaasan | 2013-09-21 18:46:38 +0530 (Sat, 21 Sep 2013) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r238 | ka_shrinivaasan | 2013-09-19 19:23:00 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r237 | ka_shrinivaasan | 2013-09-19 19:20:18 +0530 (Thu, 19 Sep 2013) | 3 lines

VIRGO clone .tmp_versions directory


------------------------------------------------------------------------
r236 | ka_shrinivaasan | 2013-09-19 19:17:57 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated buildscript.sh for VIRGO MemPool driver build


------------------------------------------------------------------------
r235 | ka_shrinivaasan | 2013-09-19 19:15:37 +0530 (Thu, 19 Sep 2013) | 3 lines

virgo.h updated for mempoolFunction variable declaration


------------------------------------------------------------------------
r234 | ka_shrinivaasan | 2013-09-19 19:14:26 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO cloud mempool kernelspace driver for kernelspace kmalloc(), kfree(), get and set 


------------------------------------------------------------------------
r233 | ka_shrinivaasan | 2013-09-19 19:12:42 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO CloudExec MemPool Driver for virgo_malloc() etc., with change of cloneFunction to mempoolFunction variable


------------------------------------------------------------------------
r232 | ka_shrinivaasan | 2013-09-19 19:09:54 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated autogenerated Module.symvers


------------------------------------------------------------------------
r231 | ka_shrinivaasan | 2013-09-19 19:07:38 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated autogenerated VIRGO cloud mempool kernelspace mod.c


------------------------------------------------------------------------
r230 | ka_shrinivaasan | 2013-09-19 19:06:23 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO cloud mempool kernelspace driver binary for kernel space kmalloc(),kfree(), get and set


------------------------------------------------------------------------
r229 | ka_shrinivaasan | 2013-09-19 19:03:17 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated VIRGO mempool driver Makefile comments


------------------------------------------------------------------------
r228 | ka_shrinivaasan | 2013-09-19 19:02:10 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated autogenerated virgo cloudexec mempool mod.c


------------------------------------------------------------------------
r227 | ka_shrinivaasan | 2013-09-19 19:00:57 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated virgo cloudexec mempool driver binary - untested


------------------------------------------------------------------------
r226 | ka_shrinivaasan | 2013-09-19 17:48:12 +0530 (Thu, 19 Sep 2013) | 4 lines

Updated virgo_cloud_mempool userspace code containing malloc(), free(), get and set code for data access
Kernel Upcall Plugin has to invoke these functions (user mode function execution of VIRGO) 


------------------------------------------------------------------------
r225 | ka_shrinivaasan | 2013-09-19 17:33:36 +0530 (Thu, 19 Sep 2013) | 3 lines

Updated build generated Module.symvers


------------------------------------------------------------------------
r224 | ka_shrinivaasan | 2013-09-19 17:31:47 +0530 (Thu, 19 Sep 2013) | 3 lines

Initial mempool syscalls client code for virgo_malloc(), virgo_get(), virgo_set(), virgo_free() prototype that builds. Untested.
 

------------------------------------------------------------------------
r223 | ka_shrinivaasan | 2013-09-17 16:50:48 +0530 (Tue, 17 Sep 2013) | 3 lines

Updated VIRGO Design Doc for Mempooling prototype code commits


------------------------------------------------------------------------
r222 | ka_shrinivaasan | 2013-09-17 16:44:32 +0530 (Tue, 17 Sep 2013) | 3 lines

Updated staging.sh script for VIRGO memory pooling feature


------------------------------------------------------------------------
r221 | ka_shrinivaasan | 2013-09-17 16:42:00 +0530 (Tue, 17 Sep 2013) | 14 lines

Initial Prototype code for VIRGO Memory Pooling feature (virgo_malloc() etc.,).
This code is mostly copied from cpupooling directory and changed for Memory Pooling
All the basic functionalities like 2 user modes and Kernel modes execution, multithreaded execution
and code organization remain the same.

New header has been added in include/linux for VIRGO mempool kernel service - virgocloudexecmempoolsvc.h and virgo.h has been modified
to include mempool related virgo_ops declarations.Only the basic VIRGO mempool driver build works in this commit.

This is not tested code as complete testing can be done only after virgo_malloc() syscall is implemented fully which is a work for few months.
At present a not-built, not-tested pseudocode kind of virgo_malloc() is committed under virgo_malloc() for reference which will be 
overridden in future commits.That would be another replication of virgo_clone() and suitably modified for virgo_malloc() and kernel 
 builds for new syscalls take considerable time.


------------------------------------------------------------------------
r220 | ka_shrinivaasan | 2013-09-17 16:39:18 +0530 (Tue, 17 Sep 2013) | 14 lines

Initial Prototype code for VIRGO Memory Pooling feature (virgo_malloc() etc.,).
This code is mostly copied from cpupooling directory and changed for Memory Pooling
All the basic functionalities like 2 user modes and Kernel modes execution, multithreaded execution
and code organization remain the same.

New header has been added in include/linux for VIRGO mempool kernel service.
Only the basic VIRGO mempool driver build works in this commit.

This is not tested code as complete testing can be done only after virgo_malloc() syscall is implemented fully which is a work for few months.
At present a not-built, not-tested pseudocode kind of virgo_malloc() is committed under virgo_malloc/ for reference which will be 
overridden in future commits.That would be another replication of virgo_clone() and suitably modified for virgo_malloc() and kernel 
 builds for new syscalls take considerable time.


------------------------------------------------------------------------
r219 | ka_shrinivaasan | 2013-09-17 16:37:28 +0530 (Tue, 17 Sep 2013) | 15 lines

Initial Prototype code for VIRGO Memory Pooling feature (virgo_malloc() etc.,). 
This code is mostly copied from cpupooling directory and changed for Memory Pooling
All the basic functionalities like 2 user modes and Kernel modes execution, multithreaded execution 
and code organization remain the same.

New header has been added in include/linux for VIRGO mempool kernel service.
Only the basic VIRGO mempool driver build works in this commit. 

This is not tested code as complete testing can be done only after virgo_malloc() syscall is implemented fully which is a work for few months.
At present a not-built, not-tested pseudocode kind of virgo_malloc() is committed under virgo_malloc() for reference which will be 
overridden in future commits.That would be another replication of virgo_clone() and suitably modified for virgo_malloc() and kernel
 builds for new syscalls take considerable time.



------------------------------------------------------------------------
r218 | ka_shrinivaasan | 2013-09-17 12:57:23 +0530 (Tue, 17 Sep 2013) | 3 lines

Updated VIRGO Design Doc for Memory Pooling Prototype driver design


------------------------------------------------------------------------
r217 | ka_shrinivaasan | 2013-09-16 13:50:20 +0530 (Mon, 16 Sep 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r216 | ka_shrinivaasan | 2013-09-14 11:25:32 +0530 (Sat, 14 Sep 2013) | 2 lines

Updated VIRGO Design Doc

------------------------------------------------------------------------
r215 | ka_shrinivaasan | 2013-09-14 11:22:18 +0530 (Sat, 14 Sep 2013) | 3 lines

Updated virgo_malloc() handwritten design notes with kmalloc() and malloc() usage in kernel and user mode execution of virgo_cloudexec kernel service


------------------------------------------------------------------------
r214 | ka_shrinivaasan | 2013-09-14 11:20:37 +0530 (Sat, 14 Sep 2013) | 3 lines

Updated ProductOwnerProfile


------------------------------------------------------------------------
r213 | ka_shrinivaasan | 2013-09-11 20:10:40 +0530 (Wed, 11 Sep 2013) | 2 lines

Updated VIRGO Design Doc

------------------------------------------------------------------------
r212 | ka_shrinivaasan | 2013-09-02 12:17:23 +0530 (Mon, 02 Sep 2013) | 4 lines

Added link to handwritten initial design notes for virgo_malloc()



------------------------------------------------------------------------
r211 | ka_shrinivaasan | 2013-09-02 12:12:54 +0530 (Mon, 02 Sep 2013) | 3 lines

Updated Design Doc for VIRGO for mobile devices and VIRGO File System


------------------------------------------------------------------------
r210 | ka_shrinivaasan | 2013-09-01 11:30:44 +0530 (Sun, 01 Sep 2013) | 3 lines

Updated VIRGO Design Doc - for Memory pooling - virgo_malloc()


------------------------------------------------------------------------
r209 | ka_shrinivaasan | 2013-09-01 11:29:08 +0530 (Sun, 01 Sep 2013) | 4 lines

For identity of issuer of GPL license for VIRGO, I, Srinivasan Kannan (alias) Shrinivas Kannan (alias) Ka.Shrinivaasan,
 am hereby committing my Resume with photograph and details


------------------------------------------------------------------------
r208 | ka_shrinivaasan | 2013-09-01 11:23:16 +0530 (Sun, 01 Sep 2013) | 4 lines

VIRGO Memory Pooling- virgo_malloc() - initial design notes - not comprehensive and is subject to change given the complexities of
VIRGO address-space and virgo_malloc() subtleties


------------------------------------------------------------------------
r207 | ka_shrinivaasan | 2013-08-27 15:04:48 +0530 (Tue, 27 Aug 2013) | 25 lines

GNU General Public License v3.0 for the open source product VIRGO(VIRtualGenericOs)

This product is individually designed and developed since 2008 by the Developer Srinivasan Kannan (alias) Shrinivas Kannan (alias) Ka.Shrinivaasan
(address and contact details below):
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Srinivasan Kannan,
S/O.  P.R.ES.Kannan,
172, Gandhi Adigal Salai,
Kumbakonam-612001, TamilNadu, India.
e-mail :        ka.shrinivaasan@gmail.com
                shrinivas.kannan@gmail.com
                kashrinivaasan@live.com
Mobile :        9791165980, 9003082186
Name spellings in
employer/academic
records :               Srinivasan Kannan (academics, BaaN,Sun
                        Microsystems,Verizon),Shrinivas Kannan(webMethods and
                        CMI), Ka.Shrinivaasan (Global Analytics)
Personal website(research) :- https://sites.google.com/site/kuja27/
Krishna iResearch Open Source: https://sourceforge.net/users/ka_shrinivaasan

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


------------------------------------------------------------------------
r206 | ka_shrinivaasan | 2013-08-24 10:51:35 +0530 (Sat, 24 Aug 2013) | 8 lines

VIRGO version 10.0 tagged - Release Notes - Major release done for Multithreaded Kernel Service Feature:
1. VIRGO kernel service has been made into a multithreaded kernel module that spawns a kernel thread for each request (virgo_clone or other type
of requests
2. For this new multithreading feature global data have been threadlocalized.
3. Tested with test_virgo_clone testcase with parameterIsExecutable(0,1,2 - for executable,function and kernelspace intermodule execution) and
test logs committed under test_logs/


------------------------------------------------------------------------
r205 | ka_shrinivaasan | 2013-08-23 13:58:17 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated VIRGO Design Doc for new Multithreaded Kernel Service Feature


------------------------------------------------------------------------
r204 | ka_shrinivaasan | 2013-08-23 13:53:17 +0530 (Fri, 23 Aug 2013) | 3 lines

Removed some old files from Version Control


------------------------------------------------------------------------
r203 | ka_shrinivaasan | 2013-08-23 13:50:18 +0530 (Fri, 23 Aug 2013) | 3 lines

.tmp_versions deleted from source control


------------------------------------------------------------------------
r202 | ka_shrinivaasan | 2013-08-23 13:48:37 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated test_virgo_clone binary


------------------------------------------------------------------------
r201 | ka_shrinivaasan | 2013-08-23 13:47:28 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated testcase with all values of parameterIsExecutable(0,1,2) and updated Copyright Notice


------------------------------------------------------------------------
r200 | ka_shrinivaasan | 2013-08-23 13:44:26 +0530 (Fri, 23 Aug 2013) | 6 lines

Changes done for Multithreaded VIRGO Kernel Service Feature:
- new kernel thread and function virgo_client_thread spawned that does the recvfrom and sendto work for each clientsocket that is
accepted as parameter in those virgo_ops functions
- Updated Copyright Notice


------------------------------------------------------------------------
r199 | ka_shrinivaasan | 2013-08-23 13:41:41 +0530 (Fri, 23 Aug 2013) | 6 lines

Updated virgo.h header file for Multithreaded VIRGO Kernel Service Feature:
- Moved Static and Global data to VIRGO kernel service module and made them into kernel thread localized data
- Updated Copyright Notice
- Function prototype changes for accepting client socket as parameter in virgo_ops functions - sendto and recvfrom


------------------------------------------------------------------------
r198 | ka_shrinivaasan | 2013-08-23 13:36:59 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated Module.symvers


------------------------------------------------------------------------
r197 | ka_shrinivaasan | 2013-08-23 13:35:52 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated virgo_cloudexec.ko with newly added Multithreaded Kernel Service Feature


------------------------------------------------------------------------
r196 | ka_shrinivaasan | 2013-08-23 13:32:50 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated virgo_cloud_test_kernelspace.ko


------------------------------------------------------------------------
r195 | ka_shrinivaasan | 2013-08-23 13:25:03 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated virgo_cloud_test_kernelspace.o


------------------------------------------------------------------------
r194 | ka_shrinivaasan | 2013-08-23 13:19:16 +0530 (Fri, 23 Aug 2013) | 3 lines

updated autogenerated virgo_cloudexec.mod.c


------------------------------------------------------------------------
r193 | ka_shrinivaasan | 2013-08-23 13:18:03 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated virgo_cloudexec.o


------------------------------------------------------------------------
r192 | ka_shrinivaasan | 2013-08-23 13:17:00 +0530 (Fri, 23 Aug 2013) | 3 lines

autogenerated virgo_cloudexec.mod.o


------------------------------------------------------------------------
r191 | ka_shrinivaasan | 2013-08-23 13:15:49 +0530 (Fri, 23 Aug 2013) | 4 lines

Test_Virgo_Clone testcase outputs in kern.log and kernel upcall usermode logs for new Multithreaded VIRGO Kernel Service Feature for
all values of parameterIsExecutable(0,1,2)


------------------------------------------------------------------------
r190 | ka_shrinivaasan | 2013-08-23 13:11:08 +0530 (Fri, 23 Aug 2013) | 8 lines

Major rewrite for adding Multithreading Feature to VIRGO Kernel Service:
1. All Global Declarations KernelThread Localized for kernel thread created for each virgo_clone request.
2. Updated Copyright Notice
3. Function prototype changes for accepting kernel side clientsocket as argument.

With this every request is serviced by a separate kernel thread 


------------------------------------------------------------------------
r189 | ka_shrinivaasan | 2013-08-23 12:35:34 +0530 (Fri, 23 Aug 2013) | 3 lines

Updated Copyright Notice


------------------------------------------------------------------------
r188 | ka_shrinivaasan | 2013-08-15 11:41:44 +0530 (Thu, 15 Aug 2013) | 3 lines

Updated Copyright Notice


------------------------------------------------------------------------
r187 | ka_shrinivaasan | 2013-08-15 11:15:45 +0530 (Thu, 15 Aug 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r186 | ka_shrinivaasan | 2013-08-11 14:54:45 +0530 (Sun, 11 Aug 2013) | 3 lines

Open Source Products Design and Research Notes


------------------------------------------------------------------------
r185 | ka_shrinivaasan | 2013-08-11 13:44:53 +0530 (Sun, 11 Aug 2013) | 3 lines

Updated VIRGO Design Doc with ToDo and NiceToHave Features


------------------------------------------------------------------------
r184 | ka_shrinivaasan | 2013-08-11 13:42:54 +0530 (Sun, 11 Aug 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r183 | ka_shrinivaasan | 2013-08-09 11:41:15 +0530 (Fri, 09 Aug 2013) | 3 lines

Updated incorrect old comments for Intermodule Kernel Space Invocation Feature


------------------------------------------------------------------------
r182 | ka_shrinivaasan | 2013-08-05 15:23:14 +0530 (Mon, 05 Aug 2013) | 4 lines

Very important intermodule kernel space function invocation testcase log that for Intermodule Kernel Space Function Invocation Feature testing
- reproduced from backup


------------------------------------------------------------------------
r181 | ka_shrinivaasan | 2013-08-05 14:03:18 +0530 (Mon, 05 Aug 2013) | 13 lines

VIRGO version 8.0 tagged:
Due to some highly important commits that have gone in recent days related to 
1.kernel mode intermodule function invocation,
2.kernel upcall usermode logging output redirection so that
Usermode is able to announce to kernel about the user process execution
3.and lot of bug fixes, rewrites in virgo_cloudexec

this new major release 8.0 is tagged which is far more complete cloud platform than previous version VIRGO 7.0

Ka.Shrinivaasan
http://sites.google.com/site/kuja27


------------------------------------------------------------------------
r180 | ka_shrinivaasan | 2013-08-05 12:35:47 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest staging.sh with Copyright Notice added


------------------------------------------------------------------------
r179 | ka_shrinivaasan | 2013-08-05 12:34:32 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest buildscript.sh


------------------------------------------------------------------------
r178 | ka_shrinivaasan | 2013-08-05 12:32:43 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest VIRGO Design Doc


------------------------------------------------------------------------
r177 | ka_shrinivaasan | 2013-08-05 12:26:10 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_kernelupcall binaries build script with virgo_cloud_test_main build commandline


------------------------------------------------------------------------
r176 | ka_shrinivaasan | 2013-08-05 12:23:09 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest autogenerated virgo_cloudexec.mod.o


------------------------------------------------------------------------
r175 | ka_shrinivaasan | 2013-08-05 12:22:07 +0530 (Mon, 05 Aug 2013) | 2 lines

Latest virgo_kernelupcall_plugin.c with modified dlopen() and debug info with printk().

------------------------------------------------------------------------
r174 | ka_shrinivaasan | 2013-08-05 12:20:18 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_kernelupcall_plugin


------------------------------------------------------------------------
r173 | ka_shrinivaasan | 2013-08-05 12:19:21 +0530 (Mon, 05 Aug 2013) | 5 lines

Updated virgo_cloud_test_main.c for parameterIsExecutable=1 to execute a binary in kernel upcall to usermode with printf()s and fork() which
any typical program would do. Testcase kern.log(s) and kernel opened usermode log file that is written to by usermode have been committed to
test_logs/


------------------------------------------------------------------------
r172 | ka_shrinivaasan | 2013-08-05 12:16:15 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest autogenerated virgo_cloudexec.mod.c


------------------------------------------------------------------------
r171 | ka_shrinivaasan | 2013-08-05 12:15:15 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloudexec.ko


------------------------------------------------------------------------
r170 | ka_shrinivaasan | 2013-08-05 12:14:22 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloud_test_kernelspace.ko for intermodule kernelspace function execution


------------------------------------------------------------------------
r169 | ka_shrinivaasan | 2013-08-05 12:13:07 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloudexec.o with output redirection with fd_install for usermode logging and strip_control_M() commits


------------------------------------------------------------------------
r168 | ka_shrinivaasan | 2013-08-05 12:10:33 +0530 (Mon, 05 Aug 2013) | 20 lines

Major rewrite of virgo_cloudexec for output redirection with fd_install:

1. Opened a VFS stdout file called file_stdout and added fd_install for stdout and stderr to that file so that kernel_execve() inherits
these file descriptors and goes upto usermode and all printf()s in usermode executable or functions get logged into this file created by
Kernel. This was earlier difficult due to lack of stdout fd_install in kernel 3.x and seemed to require a copy_from_user() or modification
of kmod.c or netlink listeners. Name of this Kernel-User communication file is hardcoded as virgo_cloudexec_upcall_usermode_log.txt. Lot of testing
was carried out for parameterIsExecutable=0 and parameterIsExecutable=1 with both virgo_clone test case and also telnet. All output logs
have been committed under test_logs/. This is a significant feature addition that makes Kernel To Userspace communication and output redirection
possible which was muted earlier. Though this may be viewed as a security risk, in the hindsight it is a serious feature that enables
Kernel To Usermode logging possible without which logging within user mode was earlier impossible and there was no way to know what user has
executed except by return code which is tedious to decrypt.

2.Important thing is that fd_install code is within virgo module and not within kmod.c. 

3.All bash shell invocations have been dropped and executables are invoked directly. filp_open+fd_install+filp_close code executes now for
each invocation of usermode helper which can be in module init() and exit() as an optimization.
 This was tested but for some reason it didn't work but should have worked.



------------------------------------------------------------------------
r167 | ka_shrinivaasan | 2013-08-05 11:54:47 +0530 (Mon, 05 Aug 2013) | 3 lines

Shell wrapper for virgo_cloud_test_main.c executable for kernel upcall (parameterIsExecutable is 1)


------------------------------------------------------------------------
r166 | ka_shrinivaasan | 2013-08-05 11:52:45 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest libvirgo.so dynamic library that contains the symbols that will be dlsym()ed by the kernel upcall(parameterIsExecutable = 0)


------------------------------------------------------------------------
r165 | ka_shrinivaasan | 2013-08-05 11:50:48 +0530 (Mon, 05 Aug 2013) | 3 lines

testcase function with logging for Kernel To User space communication that prints to a file opened by kernel using dup2 redirection


------------------------------------------------------------------------
r164 | ka_shrinivaasan | 2013-08-05 11:48:55 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloud_test_main executable for kernelupcall usermode execution


------------------------------------------------------------------------
r163 | ka_shrinivaasan | 2013-08-05 11:47:19 +0530 (Mon, 05 Aug 2013) | 3 lines

Latest virgo_cloud_test_kernelspace binary


------------------------------------------------------------------------
r162 | ka_shrinivaasan | 2013-08-05 11:46:00 +0530 (Mon, 05 Aug 2013) | 4 lines

Testcase output logs for kernelupcall usermode logging with parameterIsExecutable=0 and parameterIsExecutable=1 (for usermode execution of a function 
within libvirgo.so and usermode execution of a binary virgo_cloud_test_main respectively)


------------------------------------------------------------------------
r161 | ka_shrinivaasan | 2013-08-05 11:42:36 +0530 (Mon, 05 Aug 2013) | 4 lines

Declaration of new variable file_stdout for usermode logging in kernel upcall and new function strip_control_M() to tokenize based on
\r\n or " " delimiters


------------------------------------------------------------------------
r160 | ka_shrinivaasan | 2013-08-05 11:40:17 +0530 (Mon, 05 Aug 2013) | 3 lines

Updated test_virgo_clone source and binary unit test case for latest virgo_cloudexec 


------------------------------------------------------------------------
r159 | ka_shrinivaasan | 2013-08-02 10:05:23 +0530 (Fri, 02 Aug 2013) | 3 lines

Updated VIRGO Design Doc


------------------------------------------------------------------------
r158 | ka_shrinivaasan | 2013-08-02 10:02:21 +0530 (Fri, 02 Aug 2013) | 3 lines

Output for telnet to virgo cloudexec usermode upcall with bash (parameterIsExecutable=1)


------------------------------------------------------------------------
r157 | ka_shrinivaasan | 2013-08-02 10:00:03 +0530 (Fri, 02 Aug 2013) | 3 lines

ParameterIsExecutable is set to 1 for executing a binary (name sent by virgo_clone()) in usermode with call_usermodehelper


------------------------------------------------------------------------
r156 | ka_shrinivaasan | 2013-08-01 22:48:00 +0530 (Thu, 01 Aug 2013) | 3 lines

Miscellaneous binaries and autogenerated code


------------------------------------------------------------------------
r155 | ka_shrinivaasan | 2013-08-01 22:46:49 +0530 (Thu, 01 Aug 2013) | 3 lines

standalone testcase output for virgo_cloudexec kernel upcall plugin


------------------------------------------------------------------------
r154 | ka_shrinivaasan | 2013-08-01 22:45:26 +0530 (Thu, 01 Aug 2013) | 2 lines

File IO commented due to kernel panic

------------------------------------------------------------------------
r153 | ka_shrinivaasan | 2013-08-01 22:44:15 +0530 (Thu, 01 Aug 2013) | 3 lines

virgo_cloud_test usecase with main() for testing usermode call with executable as parameter


------------------------------------------------------------------------
r152 | ka_shrinivaasan | 2013-08-01 22:42:20 +0530 (Thu, 01 Aug 2013) | 3 lines

Shell script for wrapping virgo_cloud_test_main and output redirection


------------------------------------------------------------------------
r151 | ka_shrinivaasan | 2013-08-01 22:37:00 +0530 (Thu, 01 Aug 2013) | 3 lines

latest virgo_cloud_test_kernelspace.ko


------------------------------------------------------------------------
r150 | ka_shrinivaasan | 2013-08-01 22:35:55 +0530 (Thu, 01 Aug 2013) | 19 lines

Added Bash shell commandline with -c option for call_usermodehelper upcall clauses to pass in remote virgo_clone command message as 
arguments to it. Also tried output redirection but it works some times that too with a fatal kernel panic.

Ideal solutions are :
1. either to do a copy_from_user() for message buffer from user address space (or) 
2. somehow rebuild the kernel with fd_install() pointing stdout to a VFS file* struct. In older kernels like 2.6.x, there is an fd_install code
with in kmod.c (___call_usermodehelper()) which has been redesigned in kernel 3.x versions and fd_install has been removed in kmod.c .
3. Create a Netlink socket listener in userspace and send message up from kernel Netlink socket.

All the above are quite intensive and time consuming to implement.Moreover doing FileIO in usermode helper is strongly discouraged in kernel docs

Since Objective of VIRGO is to virtualize the cloud as single execution "machine", doing an upcall (which would run with root abilities) is 
redundant often and kernel mode execution is sufficient. Kernel mode execution with intermodule function invocation can literally take over
the entire board in remote machine (since it can access PCI bus, RAM and all other device cards)

As a longterm design goal, VIRGO can be implemented as a separate protocol itself and sk_buff packet payload from remote machine
can be parsed by kernel service and kernel_thread can be created for the message.


------------------------------------------------------------------------
r149 | ka_shrinivaasan | 2013-07-30 15:15:33 +0530 (Tue, 30 Jul 2013) | 3 lines

Updated VIRGO Design Doc for Powerful Kernel Space Remote Execution feature.


------------------------------------------------------------------------
r148 | ka_shrinivaasan | 2013-07-30 15:06:26 +0530 (Tue, 30 Jul 2013) | 3 lines

Updated staging.sh script


------------------------------------------------------------------------
r147 | ka_shrinivaasan | 2013-07-30 15:04:22 +0530 (Tue, 30 Jul 2013) | 5 lines

Miscellaneous automatically generated kernel module sources and binaries for virgo_cloudexec.ko and virgo_cloud_test_kernelspace.ko. 
Module.symvers is now updated with exported symbols from both these kernel modules. Also committed is libvirgo.so used by kernel upcall plugin
for usermode execution


------------------------------------------------------------------------
r146 | ka_shrinivaasan | 2013-07-30 14:57:44 +0530 (Tue, 30 Jul 2013) | 4 lines

For parameterIsExecutable=2, a kernel thread is created to invoke exported function symbol virgo_cloud_test_kernelspace present in another 
module and is woken up to be run in kernel addresspace


------------------------------------------------------------------------
r145 | ka_shrinivaasan | 2013-07-30 14:54:35 +0530 (Tue, 30 Jul 2013) | 4 lines

An example usecase for intermodule exported function invocation. A function virgo_cloud_test_kernelspace() is exported and is invoked by
VIRGO kernel service when parameterIsExecutable is set to 2 and a kernel thread is created for exec-ing this function in kernel address space


------------------------------------------------------------------------
r144 | ka_shrinivaasan | 2013-07-30 14:49:20 +0530 (Tue, 30 Jul 2013) | 15 lines

Makefile changes for building both virgo_cloudexec.ko and virgo_cloud_test_kernelspace.ko in this folder itself.

virgo_cloud_test_kernelspace.ko has exported virgo_cloud_test_kernelspace() function which is invoked by
virgo_cloudexec.ko kernel service if the parameterIsExecutable=2 and a kernel thread is created to execute this 
exported function with in kernel space with kernel privileges.

Executing with in kernel space is quite useful in sending commands to a remote cloud node to control low level hardware devices. For example
a security camera or embedded driver can be programmed remotely by arguments sent through virgo_clone() with camera driver replacing the virgo_cloud_test_kernelspace.ko

Thus parameterIsExecutable=2 kernel mode exec is quite a generic transparent fusion of Cloud and Hardware. Usual application level cloud stacks
operate on user address space and thus there is zero or less flexibility in cloud-driving remote hardware.




------------------------------------------------------------------------
r143 | ka_shrinivaasan | 2013-07-30 14:36:26 +0530 (Tue, 30 Jul 2013) | 6 lines

New Kernel Module created for testing intermodule function invocation from VIRGO kernel service (parameterIsExecutable=2)

This directory is marked not needed as code within this has been carried over to virgo_cloudexec and this is committed for future reference
and as a potential stub for implementing some more features in future


------------------------------------------------------------------------
r142 | ka_shrinivaasan | 2013-07-30 14:31:46 +0530 (Tue, 30 Jul 2013) | 3 lines

test_virgo_clone kern.log dmesg output for kernelspace intermodule function invocation testing


------------------------------------------------------------------------
r141 | ka_shrinivaasan | 2013-07-30 14:29:50 +0530 (Tue, 30 Jul 2013) | 3 lines

Updated test_virgo_clone binary


------------------------------------------------------------------------
r140 | ka_shrinivaasan | 2013-07-30 14:28:50 +0530 (Tue, 30 Jul 2013) | 3 lines

Changed test_virgo_clone to accept commandline arguments passed in.


------------------------------------------------------------------------
r139 | ka_shrinivaasan | 2013-07-30 14:25:43 +0530 (Tue, 30 Jul 2013) | 7 lines

Inter-Module exported function invocation:
-----------------------------------------
A test module virgo_cloud_test_kernelspace has been created and a function symbol exported by it is invoked. Added an extern declaration for that
in virgo.h



------------------------------------------------------------------------
r138 | ka_shrinivaasan | 2013-07-29 17:09:35 +0530 (Mon, 29 Jul 2013) | 2 lines

Staging utility script 

------------------------------------------------------------------------
r137 | ka_shrinivaasan | 2013-07-29 17:00:00 +0530 (Mon, 29 Jul 2013) | 3 lines

Updated VIRGO Desgin doc


------------------------------------------------------------------------
r136 | ka_shrinivaasan | 2013-07-29 16:56:10 +0530 (Mon, 29 Jul 2013) | 3 lines

test_virgo_clone output for kernel address space execution in virgo_cloud kernel module in remote node


------------------------------------------------------------------------
r135 | ka_shrinivaasan | 2013-07-29 16:53:43 +0530 (Mon, 29 Jul 2013) | 4 lines

Function declaration for kernel_space_func() added.
parameteIsExecutable has been moved in here. Reading it from virgo_cloud.conf is a to-do


------------------------------------------------------------------------
r134 | ka_shrinivaasan | 2013-07-29 16:51:24 +0530 (Mon, 29 Jul 2013) | 13 lines

1.The wrapper function that based on switch parameterIsExecutable (values 0,1,2) executes the binary or function data from virgo_clone
system call in either kernel or user address-spaces has been added

2.If parameterIsExecutable is set to 2, the data from virgo_clone() is a function and is executed within kernel address-space itself
Presently just an example function is invoked. Intermodule function invocation functionality through this is a to-do.
 
3.New example kernel_space_func() function has been added for kernel thread execution

4.kernel_thread creation for clone_func() wrapper has been changed slightly for switch parameterIsExecutable.

5.Switch parameterIsExecutable has been moved to virgo headers.


------------------------------------------------------------------------
r133 | ka_shrinivaasan | 2013-07-29 16:44:52 +0530 (Mon, 29 Jul 2013) | 3 lines

Updated virgo_kernelupcall_plugin binary


------------------------------------------------------------------------
r132 | ka_shrinivaasan | 2013-07-29 16:43:30 +0530 (Mon, 29 Jul 2013) | 3 lines

Added # for Copyright Notice.


------------------------------------------------------------------------
r131 | ka_shrinivaasan | 2013-07-29 16:41:59 +0530 (Mon, 29 Jul 2013) | 3 lines

Updated virgo_cloud_test with File IO for logging


------------------------------------------------------------------------
r130 | ka_shrinivaasan | 2013-07-29 16:40:45 +0530 (Mon, 29 Jul 2013) | 2 lines

Updated .ko binary

------------------------------------------------------------------------
r129 | ka_shrinivaasan | 2013-07-29 16:39:42 +0530 (Mon, 29 Jul 2013) | 3 lines

updated autogenerated mod.c


------------------------------------------------------------------------
r128 | ka_shrinivaasan | 2013-07-29 16:38:13 +0530 (Mon, 29 Jul 2013) | 4 lines

Updated kernel upcall plugin with file IO for logging . But this does not work with call_usermodehelper() due to ___call_usermodehelper()
having file descriptor set up only for stdin. Would require changes to kernel/kmod.c


------------------------------------------------------------------------
r127 | ka_shrinivaasan | 2013-07-29 16:35:05 +0530 (Mon, 29 Jul 2013) | 4 lines

virgo_kernelupcall plugin's standalone output - without call_usermodehelper() 
with added logging with open(), write(), fsync() system calls


------------------------------------------------------------------------
r126 | ka_shrinivaasan | 2013-07-24 19:09:33 +0530 (Wed, 24 Jul 2013) | 3 lines

Example virgo_cloud config file with loopback ip addresses (comma separated)


------------------------------------------------------------------------
r125 | ka_shrinivaasan | 2013-07-24 17:43:28 +0530 (Wed, 24 Jul 2013) | 8 lines

VIRGO version 7.0 tagged - Release Notes:

1.PRG Loadbalancer
2.Kernel upcall with call_usermodehelper() with two options (parameter as executable and function name) with usermode pthread creation
through a virgo_kernelupcall_plugin
3.test_virgo_clone updated and tested


------------------------------------------------------------------------
r124 | ka_shrinivaasan | 2013-07-24 11:44:30 +0530 (Wed, 24 Jul 2013) | 3 lines

Updated VirgoDesign document


------------------------------------------------------------------------
r123 | ka_shrinivaasan | 2013-07-24 11:39:50 +0530 (Wed, 24 Jul 2013) | 3 lines

Updated buildscript.sh


------------------------------------------------------------------------
r122 | ka_shrinivaasan | 2013-07-24 11:36:57 +0530 (Wed, 24 Jul 2013) | 3 lines

Comments updated


------------------------------------------------------------------------
r121 | ka_shrinivaasan | 2013-07-24 11:32:05 +0530 (Wed, 24 Jul 2013) | 9 lines

Updated test_virgo_clone.c with mangled function name to be sent to virgo kernel service in remote cloud node:
------------------------------------------------------------------------------------------------------------
Mangled name for function prototype "void* virgo_cloud_test(void*)" is sent to virgo_cloudexec kernel service which does
upcall to userspace to invoke the function (within libvirgo.so) in remote cloud node. Kernel upcall usermode helper 
requires mangled names for dlsym(). This also is a unique id for a function. Library libvirgo.so needs to be prebuilt
with all functions that need to be on cloud and should be replicated in all cloud nodes.
Padded right with 2 whitespaces for ^M removal code in kernel module side.


------------------------------------------------------------------------
r120 | ka_shrinivaasan | 2013-07-24 11:28:15 +0530 (Wed, 24 Jul 2013) | 2 lines

updated test_virgo_clone binary

------------------------------------------------------------------------
r119 | ka_shrinivaasan | 2013-07-24 11:27:17 +0530 (Wed, 24 Jul 2013) | 17 lines

test_virgo_clone end to end testing (from virgo_clone client with PRG loadbalancer to virgo cloudexec kernel module with userspace kernel upcall 
execution of the function within libvirgo.so in remote cloud node) kern.log debug messages.

Again weirdly enough, kernel_connect to virgo kernel module randomly hangs (no pattern was observed) and works some times (when it works the output has been captured).
Origin again mysterious (something quite similar to blocking vs non-blocking socket random hang issue witnessed few months ago). Points to
something going on deep with in kernel or to external network related issues (but even loopback ip has this problem).

test_virgo_clone kernel_connect was working without issues few days ago.

With this VIRGO cloud platform has minimal features of loadbalancer, kernel upcall with workqueue, end-to-end transport of data and getting
result back from remote cloud nodei, config file, unit testcases etc., and is of the same genre as SunRPC and can execute both in kernel and
user addressspace in remote cloud node.

- Ka.Shrinivaasan (alias) Shrinivas Kannan (alias) Srinivasan Kannan
  (https://sites.google.com/site/kuja27)


------------------------------------------------------------------------
r118 | ka_shrinivaasan | 2013-07-23 15:43:52 +0530 (Tue, 23 Jul 2013) | 2 lines

Updated VirgoDesign doc

------------------------------------------------------------------------
r117 | ka_shrinivaasan | 2013-07-23 15:36:12 +0530 (Tue, 23 Jul 2013) | 3 lines

virgo_kernelupcall_plugin binary used by virgo_cloudexec kernel service when parameter is mangled name of a function


------------------------------------------------------------------------
r116 | ka_shrinivaasan | 2013-07-23 15:32:00 +0530 (Tue, 23 Jul 2013) | 3 lines

Kernel upcall standalone binaries output


------------------------------------------------------------------------
r115 | ka_shrinivaasan | 2013-07-23 15:31:00 +0530 (Tue, 23 Jul 2013) | 3 lines

Fixed binary needed for kernelupcall with parameterIsExecutable=0 (virgo_clone sends a function name)


------------------------------------------------------------------------
r114 | ka_shrinivaasan | 2013-07-23 15:28:35 +0530 (Tue, 23 Jul 2013) | 3 lines

Kern.log messages for virgo_cloudexec with kernelupcall for function names (parameterIsExecutable=0)


------------------------------------------------------------------------
r113 | ka_shrinivaasan | 2013-07-23 15:26:33 +0530 (Tue, 23 Jul 2013) | 3 lines

virgo_cloud_test cloud function implemented for testing (is built into libvirgo.so)


------------------------------------------------------------------------
r112 | ka_shrinivaasan | 2013-07-23 15:24:44 +0530 (Tue, 23 Jul 2013) | 2 lines

Bash script for building kernel upcall binaries - virgo_kernelupcall_plugin and libvirgo.so

------------------------------------------------------------------------
r111 | ka_shrinivaasan | 2013-07-23 15:19:36 +0530 (Tue, 23 Jul 2013) | 29 lines

Major call_usermodehelper() with dlsym and pthread_create functionality implementation for parameterIsExecutable=0:
--------------------------------------------------------------------------------------------------------------
 Lack of reflection kind of facilities requires map of function_names to pointers_to_functions to be executed
 on cloud has to be lookedup in the map to get pointer to function. This map is not scalable if number of functions are
 in millions and size of the map increases linearly. Also having it in memory is both CPU and memory intensive.
 Moreover this map has to be synchronized in all nodes for coherency and consistency which is another intensive task.
 Thus name to pointer function table is at present not implemented. Suitable way to call a function by name of the function
 is yet to be found out and references in this topic are scarce.

 If parameterIsExecutable is set to 1 the data received from virgo_clone() is not a function but name of executable
 This executable is then run on usermode using call_usermodehelper() which internally takes care of queueing the workstruct
 and executes the binary as child of keventd and reaps silently. Thus workqueue component of kernel is indirectly made use of.
 This is sometimes more flexible alternative that executes a binary itself on cloud and 
 is preferable to clone()ing a function on cloud. Virgo_clone() syscall client or telnet needs to send the message with name of binary.
 If parameterIsExecutable is set to 0 then data received from virgo_clone() is name of a function.

 If parameterIsExecutable is set to 0 then data received from virgo_clone() is name of a function and is executed in else clause
 using dlsym() lookup and pthread_create() in user space. This unifies both call_usermodehelper() and creating a userspace thread
 with a fixed binary which is same for any function. The dlsym lookup requires mangled function names which need to be sent by 
 virgo_clone or telnet. This is far more efficient than a function pointer table. call_usermodehelper() Kernel upcall is done to usermode to exec a fixed binary that would inturn execute the cloneFunction in userspace
 by spawning a pthread. cloneFunction is name of the function and not binary. This clone function will be dlsym()ed 
 and a pthread will be created by the fixed binary. Name of the fixed binary is hardcoded herein as 
 "virgo_kernelupcall_plugin". This fixed binary takes clone function as argument. For testing libvirgo.so has been created from
 virgo_cloud_test.c and separate build script to build the cloud function binaries has been added.

 - Ka.Shrinivaasan



------------------------------------------------------------------------
r110 | ka_shrinivaasan | 2013-07-22 18:23:19 +0530 (Mon, 22 Jul 2013) | 3 lines

call_usermodehelper kern.log printk messages


------------------------------------------------------------------------
r109 | ka_shrinivaasan | 2013-07-22 15:16:17 +0530 (Mon, 22 Jul 2013) | 21 lines

Some functionality addition to clone_func():

Added a flag parameterIsExecutable which switches between whether parameter received from virgo_clone or telnet is:
 1. name of a function (or)
 2. name of a binary

Linux kernel has call_usermodexxx() functions that do upcall to userspace and execute a binary. Presently virgo_clone() is only
for creating a cloned thread in remote cloud node and sends name of a function. To support kernel upcall, based on the flag 
parameterIsExecutable call_usermodehelper() is invoked on the received data which has name of the binary.

If parameterIsExecutable is set to 1 the data received from virgo_clone() is not a function but name of executable
This executable is then run on usermode using call_usermodehelper() which internally takes care of queueing the workstruct
and executes the binary in userspace as child of keventd and reaps silently. Thus workqueue component of kernel is indirectly made use of.
This is sometimes more flexible alternative that executes a binary itself on cloud and 
is preferable to clone()ing a function on cloud. Virgo_clone() syscall client or telnet needs to send the message with name of binary.
If parameterIsExecutable is set to 0 then data received from virgo_clone() is name of a function.

- Ka.Shrinivaasan (alias) Shrinivas Kannan (alias) Srinivasan Kannan
  (http://sites.google.com/site/kuja27)


------------------------------------------------------------------------
r108 | ka_shrinivaasan | 2013-07-17 21:20:09 +0530 (Wed, 17 Jul 2013) | 2 lines

Updated Virgo Design doc

------------------------------------------------------------------------
r107 | ka_shrinivaasan | 2013-07-17 21:17:40 +0530 (Wed, 17 Jul 2013) | 8 lines

moved read_virgo_config() to virgo_cloudexec's module_init function so that all necessary config required by later virgo_clone invocations
are set by driver_init() which in turn calls virgo module_init function. That is each nodes is both a client and kernel service. Each node
would have its cloud config initialized so as to be used by subsequent virgo_clone calls(from same node). All nodes need to have 
replicated copies of the virgo_cloud.conf

This is simple way of initializing config than doing it through basic_setup bootup and is also modularized and delinked from kernel main.c


------------------------------------------------------------------------
r106 | ka_shrinivaasan | 2013-07-17 21:10:41 +0530 (Wed, 17 Jul 2013) | 5 lines

Commented do_virgo_cloud_init() and instead moved the read_virgo_config() into virgo_cloudexec's module init function so that
when the kernel boots up,the driver_init() would call the virgo driver's module init function and would thus all necessary config
would be automatically read much earlier than any virgo_clone sys call is invoked. This looks rather a simpler way to read and set config.


------------------------------------------------------------------------
r105 | ka_shrinivaasan | 2013-07-16 20:05:56 +0530 (Tue, 16 Jul 2013) | 4 lines

Uncommented do_virgo_cloud_init() and invoked read_virgo_clone_config() from do_virgo_cloud_init()
which reads virgo_cloud.conf and sets the exported virgo cloud symbols


------------------------------------------------------------------------
r104 | ka_shrinivaasan | 2013-07-16 20:03:16 +0530 (Tue, 16 Jul 2013) | 3 lines

Commented read_virgo_config() as read_virgo_clone_config() has been implemented and would set the exported symbols when kernel boots up


------------------------------------------------------------------------
r103 | ka_shrinivaasan | 2013-07-16 20:01:06 +0530 (Tue, 16 Jul 2013) | 3 lines

Updated Virgo Design Document


------------------------------------------------------------------------
r102 | ka_shrinivaasan | 2013-07-15 19:48:09 +0530 (Mon, 15 Jul 2013) | 7 lines

Major rewrite of read_virgo_config() with VFS calls for reading virgo_cloud.conf and a new multipurpose
tokenizer function tokenize_list_of_ip_addrs() for tokenizing virgo_cloud.conf comma separated list and
assigning it to node_ip_addrs_in_cloud[] array.

Similar code might have to be replicated in do_virgo_cloud_init() when kernel boots up


------------------------------------------------------------------------
r101 | ka_shrinivaasan | 2013-07-15 19:44:24 +0530 (Mon, 15 Jul 2013) | 3 lines

type declarations for read_virgo_config() and tokenizer function


------------------------------------------------------------------------
r100 | ka_shrinivaasan | 2013-07-15 19:42:51 +0530 (Mon, 15 Jul 2013) | 3 lines

read_virgo_Config() rewritten with VFS calls


------------------------------------------------------------------------
r99 | ka_shrinivaasan | 2013-07-12 13:31:08 +0530 (Fri, 12 Jul 2013) | 2 lines

updated Virgo Design doc

------------------------------------------------------------------------
r98 | ka_shrinivaasan | 2013-07-12 13:19:09 +0530 (Fri, 12 Jul 2013) | 9 lines

Tested latest virgo_clone and virgo_cloudexec with test_virgo_clone.
Again noticed something weird:
- On 11 and 12 July 2013, network was and is horribly slow(and my laptop was apparently hacked on 11 July 2013 - 
password login didn't work which took hours to rectify)
- Virgo cloudexec modules_install which used to install automatically to /lib/modules/'uname -r'/extra, didn't work and I had to manually
copy to /lib/modules (causing old binary to load as in test_virgo_clone latest output committed under virgo_clone/test)
- Something periodically disturbs this net connection and machine (needs to be investigated for cybercrime)


------------------------------------------------------------------------
r97 | ka_shrinivaasan | 2013-07-12 13:10:14 +0530 (Fri, 12 Jul 2013) | 3 lines

Commented the range mapping for PRG host id. Instead added simpler modulus computation to get the host id.


------------------------------------------------------------------------
r96 | ka_shrinivaasan | 2013-07-12 00:52:36 +0530 (Fri, 12 Jul 2013) | 3 lines

More printk(s) added and also Pseudorandom number range mapping computation changed


------------------------------------------------------------------------
r95 | ka_shrinivaasan | 2013-07-10 18:01:05 +0530 (Wed, 10 Jul 2013) | 3 lines

Updated Virgo Design Doc


------------------------------------------------------------------------
r94 | ka_shrinivaasan | 2013-07-10 17:57:51 +0530 (Wed, 10 Jul 2013) | 3 lines

Separate virgo_Config.h header file for extern declarations added due to multiple defintion errors during kernel build


------------------------------------------------------------------------
r93 | ka_shrinivaasan | 2013-07-10 17:56:03 +0530 (Wed, 10 Jul 2013) | 3 lines

#ifndef added 


------------------------------------------------------------------------
r92 | ka_shrinivaasan | 2013-07-10 17:52:25 +0530 (Wed, 10 Jul 2013) | 3 lines

PRG loadbalancer testing - kern.log messages printing the ip addresses (read_virgo_config())


------------------------------------------------------------------------
r91 | ka_shrinivaasan | 2013-07-10 17:50:29 +0530 (Wed, 10 Jul 2013) | 3 lines

#included virgo_config.h for cloud data declaration


------------------------------------------------------------------------
r90 | ka_shrinivaasan | 2013-07-10 17:47:38 +0530 (Wed, 10 Jul 2013) | 6 lines

Modified VIRGO kernel service:
- read_virgo_config() updates
- virgo_config.h included (created for extern declarations of cloud datastructures)
- hardcoded cloud datastructures get printed and are exported correctly (added commented code for kallsyms_lookup if needed)


------------------------------------------------------------------------
r89 | ka_shrinivaasan | 2013-07-09 22:16:28 +0530 (Tue, 09 Jul 2013) | 5 lines

Added utility function read_virgo_config() for testing file IO in virgo module
Also added extern declarations for exported cloud initialization symbols.
Still there is a symbol not found error while executing the module. Probably might require kallsyms lookup (ongoing bugfix)


------------------------------------------------------------------------
r88 | ka_shrinivaasan | 2013-07-09 22:12:57 +0530 (Tue, 09 Jul 2013) | 3 lines

Commented do_virgo_cloud_init() and hardcoded the ip addresses in exported symbols for loadbalancer prototype testing


------------------------------------------------------------------------
r87 | ka_shrinivaasan | 2013-07-08 20:19:03 +0530 (Mon, 08 Jul 2013) | 9 lines

Rewrote (rather ReRewrote) the VFS file read code:
-obtained segment descriptor and replaced file ops read with vfs_read() and reset the descriptor after read.
-File next to read position computation
-initialized the node_ip_addrs_in_cloud with empty string
-commented a printk due to Kernel Panic within it
-Ideally this should be rewritten with sysfs (as per Greg Kroah Hartman's "Things not to do in Kernel"),but for timebeing VFS code suffices for
a prototypical testing of Loadbalancer(especially PRG loadbalancer)


------------------------------------------------------------------------
r86 | ka_shrinivaasan | 2013-07-05 12:01:46 +0530 (Fri, 05 Jul 2013) | 7 lines

- All compilation errors fixed
- do_virgo_cloud_init() rewritten with VFS file I/O calls (filp_open(), file_ops read() etc.,) to read the virgo_cloud.conf config file
- EXPORT_SYMBOL declared for VIRGO cloud related datastructures so as to access them globally (especially from from virgo_clone.c syscall)

Still there is a Kernel Panic in do_Virgo_cloud_init() when kernel boots up. Under investigation.


------------------------------------------------------------------------
r85 | ka_shrinivaasan | 2013-07-05 11:55:46 +0530 (Fri, 05 Jul 2013) | 4 lines

- All compilation errors fixed
- extern declaration for virgo cloud related data structures


------------------------------------------------------------------------
r84 | ka_shrinivaasan | 2013-07-05 11:52:14 +0530 (Fri, 05 Jul 2013) | 6 lines

Added more automation to build script:
-Module.symvers and .config copying from previous build
-cleaning up old build residues
-update-initramfs for loading the modules after build is over


------------------------------------------------------------------------
r83 | ka_shrinivaasan | 2013-07-03 21:11:17 +0530 (Wed, 03 Jul 2013) | 3 lines

Compilation error fixed


------------------------------------------------------------------------
r82 | ka_shrinivaasan | 2013-07-03 21:07:52 +0530 (Wed, 03 Jul 2013) | 3 lines

Compilation error fixed


------------------------------------------------------------------------
r81 | ka_shrinivaasan | 2013-07-03 21:01:40 +0530 (Wed, 03 Jul 2013) | 4 lines

Initial prototypical implementation of Pseudorandom generator based Loadbalancer for virgo_clone() parallelization using get_random_int() done.
More code to be added and testing yet to be done.


------------------------------------------------------------------------
r80 | ka_shrinivaasan | 2013-07-03 12:03:05 +0530 (Wed, 03 Jul 2013) | 3 lines

VIRGO version 6.0 tagged - with lot of major bugs fixed and with Design Doc updated for loadbalancer design options


------------------------------------------------------------------------
r79 | ka_shrinivaasan | 2013-07-02 16:14:56 +0530 (Tue, 02 Jul 2013) | 5 lines

Pseudorandom generator based loadbalancer for VIRGO clone and cloudexec service
(experimental):
Script to calculate the expected number of requests per each node


------------------------------------------------------------------------
r78 | ka_shrinivaasan | 2013-07-02 16:12:51 +0530 (Tue, 02 Jul 2013) | 3 lines

Updated Virgo Doc with loadbalancing options


------------------------------------------------------------------------
r77 | ka_shrinivaasan | 2013-07-01 13:02:52 +0530 (Mon, 01 Jul 2013) | 3 lines

Updated VIRGO doc with Loadbalancer design spec and alternatives


------------------------------------------------------------------------
r76 | ka_shrinivaasan | 2013-07-01 12:35:27 +0530 (Mon, 01 Jul 2013) | 2 lines

VIRGO design doc updated

------------------------------------------------------------------------
r75 | ka_shrinivaasan | 2013-06-28 13:12:44 +0530 (Fri, 28 Jun 2013) | 3 lines

Probable Linux Kernel 3.7.8 kernel_accept() blocking-nonblocking bug (or at some layer below the stack)


------------------------------------------------------------------------
r74 | ka_shrinivaasan | 2013-06-28 12:54:56 +0530 (Fri, 28 Jun 2013) | 3 lines

test_virgo_clone and telnet usecases output after wake_up_process() fix


------------------------------------------------------------------------
r73 | ka_shrinivaasan | 2013-06-28 12:53:01 +0530 (Fri, 28 Jun 2013) | 7 lines

- Added wake_up_process() for clone function task struct after kthread_create(). kthread_run() would be equally sufficient but wake_up_process()
gives flexibility in choice of wakeup timing.
- Again there was a brief problem with blocking and non-blocking sockets ,but with a difference - this time both didn't work (something seems to be
quite erratic in kernel socket accept()) but blocking socket worked after sometime- this is after a reinstallation of 3.7.8 image from kernel.org PPA and kernel rebuild (27 June 2013)
- clone thread wakesup and test_virgo_clone and telnet log in kern.log correctly


------------------------------------------------------------------------
r72 | ka_shrinivaasan | 2013-06-27 12:29:43 +0530 (Thu, 27 Jun 2013) | 3 lines

Concurrency made to 6


------------------------------------------------------------------------
r71 | ka_shrinivaasan | 2013-06-27 12:27:30 +0530 (Thu, 27 Jun 2013) | 3 lines

printk(s) modified to print buf instead of iovec base


------------------------------------------------------------------------
r70 | ka_shrinivaasan | 2013-06-26 18:49:27 +0530 (Wed, 26 Jun 2013) | 3 lines

test_virgo_clone testcase kern.log output with virgo_cloudexec changes done today


------------------------------------------------------------------------
r69 | ka_shrinivaasan | 2013-06-26 18:46:50 +0530 (Wed, 26 Jun 2013) | 7 lines

Major bugfix commit:
- Reenabled blocking socket as it is working again (probably it is blockingi(B)==(NB)nonblocking problem)
- printk(s) modified to print buffer (send and recv) instead of iovec base which print correctly
- tested with test_virgo_clone and works correctly.



------------------------------------------------------------------------
r68 | ka_shrinivaasan | 2013-06-25 17:57:36 +0530 (Tue, 25 Jun 2013) | 3 lines

Updated VIRGO design doc


------------------------------------------------------------------------
r67 | ka_shrinivaasan | 2013-06-25 17:54:20 +0530 (Tue, 25 Jun 2013) | 4 lines

1.Changed BUF_SIZE to buflen
2.Changed GFP_KERNEL to GFP_ATOMIC for atomic allocation of kernel memory


------------------------------------------------------------------------
r66 | ka_shrinivaasan | 2013-06-24 17:06:00 +0530 (Mon, 24 Jun 2013) | 4 lines

Telnet to virgo_cloudexec kernel service port (from user address-space to kernel address-space) works.
Testcase output committed for reference


------------------------------------------------------------------------
r65 | ka_shrinivaasan | 2013-06-12 22:33:53 +0530 (Wed, 12 Jun 2013) | 5 lines

1.Added little endian to CPU byte order conversion for message received over kernel_recvmsg()
2.Added sock_release() for client socket
3.Defined new utility function print_buffer() to output buffer contents


------------------------------------------------------------------------
r64 | ka_shrinivaasan | 2013-06-12 22:30:02 +0530 (Wed, 12 Jun 2013) | 3 lines

Added prototype for print_buffer() function to print buffer contents


------------------------------------------------------------------------
r63 | ka_shrinivaasan | 2013-06-12 22:28:42 +0530 (Wed, 12 Jun 2013) | 7 lines

1. Set the msg_flags to 0
2. Added little endian to cpu byte order conversion for message received through kernel_recvmsg()
3. Added a print_buffer() utility function to print the contents of the buffer
4. Some more printk(s)
5. Added sock_release() for server side client socket


------------------------------------------------------------------------
r62 | ka_shrinivaasan | 2013-06-11 18:07:01 +0530 (Tue, 11 Jun 2013) | 5 lines

1. Lots of printk(s) added.
2. Message header fields and iovec fields related commissions and omissions
3. test_virgo_clone block resolved 


------------------------------------------------------------------------
r61 | ka_shrinivaasan | 2013-06-11 18:02:36 +0530 (Tue, 11 Jun 2013) | 3 lines

Changed nr to 1 and initialized header


------------------------------------------------------------------------
r60 | ka_shrinivaasan | 2013-06-07 18:45:03 +0530 (Fri, 07 Jun 2013) | 9 lines

1. Blocking-Nonblocking weirdo comes haun ting again. Again Blocking doesn't work and Nonblocking kernel_accept works. Hence commented Non-blocking  and
uncommented blocking. Again VIRGO clone syscall client and VIRGO kernel service remain same.
Ran a chkrootkit and found an infected bindshell port. Something is not right.

2. Added Server side  client socket shutdown with SOCK_WAKE_URG

3. Added some printk(s) and commented some.


------------------------------------------------------------------------
r59 | ka_shrinivaasan | 2013-06-06 08:12:37 +0530 (Thu, 06 Jun 2013) | 2 lines

Updated VIRGO design doc

------------------------------------------------------------------------
r58 | ka_shrinivaasan | 2013-06-06 08:10:08 +0530 (Thu, 06 Jun 2013) | 3 lines

Checkin for lot of msghdr related bug resolution (ongoing)


------------------------------------------------------------------------
r57 | ka_shrinivaasan | 2013-06-06 08:07:38 +0530 (Thu, 06 Jun 2013) | 4 lines

Checkin for lot of msghdr related ongoing bug resolutions
in VIRGO clone client


------------------------------------------------------------------------
r56 | ka_shrinivaasan | 2013-05-24 20:44:33 +0530 (Fri, 24 May 2013) | 12 lines

1. Changed PF_INET to AF_INET though internally synonymous
2. Blocking mode works in this commit again. No changes were made in virgo_clone() or driver code. 
Hence making it a blocking kernel service socket from non-blocking. Root cause for this weird behaviour remains unknown and seems
external to both linux and VIRGO codebases as nothing has changed apparently. 
3. Added lot of printk(s) for debugging
4. Removed MSG_DONTWAIT flag for kernel_recvmsg()
5. NULL check modified for clientsock.
6. Console telnet works but still recv length is not right.
7. Due to non-persisting client sock values, declared socket data structures as static.



------------------------------------------------------------------------
r55 | ka_shrinivaasan | 2013-05-24 20:32:04 +0530 (Fri, 24 May 2013) | 3 lines

Made all the socket related data structures static for the time-being


------------------------------------------------------------------------
r54 | ka_shrinivaasan | 2013-05-23 23:00:13 +0530 (Thu, 23 May 2013) | 6 lines

Moved sock_create(),bind() and listen() for kernel server socket from virgo_create() to module init() so that only kernel_accept() is done
within virgo_create() that is within the service infinite loop. 

Also added non-NULL if checks for client socket in sendto() and recvfrom() ops.


------------------------------------------------------------------------
r53 | ka_shrinivaasan | 2013-05-23 12:17:32 +0530 (Thu, 23 May 2013) | 6 lines

First Release Tagging of VIRGO - Cloudexec kernel module service and VirgoClone System Call implementation (work in progress)
since its conceptualization, design and implementation in 2008 ( 5 years ago )

Tagging VIRGO Version 5.0


------------------------------------------------------------------------
r52 | ka_shrinivaasan | 2013-05-22 22:19:57 +0530 (Wed, 22 May 2013) | 3 lines

test_virgo_clone testcase output with nonblocking VIRGO cloudexec service kernel service socket showing sends and recvs


------------------------------------------------------------------------
r51 | ka_shrinivaasan | 2013-05-22 22:17:51 +0530 (Wed, 22 May 2013) | 3 lines

Added more printk(s) for debugging 


------------------------------------------------------------------------
r50 | ka_shrinivaasan | 2013-05-22 22:16:29 +0530 (Wed, 22 May 2013) | 4 lines

Changed Blocking socket to Non-blocking socket due to an unknown problem which did not occur in previous versions.More details in
code comments inline.


------------------------------------------------------------------------
r49 | ka_shrinivaasan | 2013-05-22 22:14:05 +0530 (Wed, 22 May 2013) | 2 lines

Increased concurrency to 5

------------------------------------------------------------------------
r48 | ka_shrinivaasan | 2013-05-20 18:13:06 +0530 (Mon, 20 May 2013) | 3 lines

Updated VIRGO Design Document.


------------------------------------------------------------------------
r47 | ka_shrinivaasan | 2013-05-20 18:09:25 +0530 (Mon, 20 May 2013) | 3 lines

Makefile for test_virgo_clone.c added to repository


------------------------------------------------------------------------
r46 | ka_shrinivaasan | 2013-05-20 18:08:22 +0530 (Mon, 20 May 2013) | 4 lines

virgo_clone() system call connects to virgo cloudexec driver as invoked by syscall number through test_virgo_clone.c
netstat -ntap output committed for reference (showing VIRGO system call kernel client connecting to VIRGO cloud exec
driver with ESTABLISHED state with lot more testing yet to be done).

------------------------------------------------------------------------
r45 | ka_shrinivaasan | 2013-05-20 18:04:33 +0530 (Mon, 20 May 2013) | 3 lines

test_virgo_clone binary committed for ready reference


------------------------------------------------------------------------
r44 | ka_shrinivaasan | 2013-05-20 18:02:22 +0530 (Mon, 20 May 2013) | 3 lines

Added multicore option to modules_install and install. Also added headers_install target.


------------------------------------------------------------------------
r43 | ka_shrinivaasan | 2013-05-17 19:08:26 +0530 (Fri, 17 May 2013) | 3 lines

VIRGO Design Doc updated.


------------------------------------------------------------------------
r42 | ka_shrinivaasan | 2013-05-16 17:12:49 +0530 (Thu, 16 May 2013) | 4 lines

Added /etc/modules to VIRGO version control for reference and to document update-initramfs and modprobe 
to be done before system startup


------------------------------------------------------------------------
r41 | ka_shrinivaasan | 2013-05-16 16:27:54 +0530 (Thu, 16 May 2013) | 3 lines

Util shell script to find recently modified files


------------------------------------------------------------------------
r40 | ka_shrinivaasan | 2013-05-16 16:22:54 +0530 (Thu, 16 May 2013) | 14 lines

commented all boot-time VIRGO initialization code, as it has now been properly moved to VIRGO cloudexec module_init which would
spawn a kernel thread for the service listening at the port 10000.

Moreover this unleashed a pandora's box of linker undefined symbols due to virgo headers that were difficult to resolve. Alternatives
explored were:
1) Statically linking in VIRGO drivers
2) To do something similar to write_threads in NFS driver but even that proved time consuming 
3) Do something within driver_init() and xxx_initcall() which was equally difficult as there were no support for
external modules

Enlisting in /etc/modules and spawning the thread from cloudexec module_init() appeared to be the best possible way to start the listener
while system boots-up


------------------------------------------------------------------------
r39 | ka_shrinivaasan | 2013-05-16 16:15:49 +0530 (Thu, 16 May 2013) | 3 lines

init Makefile(no VIRGO specific changes yet, but committed for completeness)


------------------------------------------------------------------------
r38 | ka_shrinivaasan | 2013-05-16 16:13:18 +0530 (Thu, 16 May 2013) | 3 lines

Added entry for VIRGO cloudexec driver but commented due to build error


------------------------------------------------------------------------
r37 | ka_shrinivaasan | 2013-05-16 16:11:01 +0530 (Thu, 16 May 2013) | 3 lines

commented virgo_clone() entry as this seems to be autogenerated anyway


------------------------------------------------------------------------
r36 | ka_shrinivaasan | 2013-05-16 16:09:15 +0530 (Thu, 16 May 2013) | 11 lines

Updated VIRGO cloudexec driver with:
- EXPORT_SYMBOL to export all module functions via Module.symvers
- #include(d) virgocloudexecsvc.h
- invoked virgo_cloudexec_service() function to start the kernel thread for virgo cloudexec service

With these, along with other commits today, and /etc/modules listing, VIRGO cloudexec kernel thread successfully spawns at listens for requests
at port 10000. 

Thus a minimalistic VIRGO cloudexec kernel extension is ready with testing to be done.


------------------------------------------------------------------------
r35 | ka_shrinivaasan | 2013-05-16 16:03:08 +0530 (Thu, 16 May 2013) | 6 lines

This is a backup folder to keep the VIRGO driver as a Kernel Loadable Module. This is as part of experimentation to
see if VIRGO can be made a statically linked builtin kernel module.

If /etc/modules works well then there is no need for either of the above.


------------------------------------------------------------------------
r34 | ka_shrinivaasan | 2013-05-16 16:00:23 +0530 (Thu, 16 May 2013) | 4 lines

Added VIRGO cloudexec driver to the end of the Kconfig file but commented it due to "invalid format" error
during compilation, must have a relook later.


------------------------------------------------------------------------
r33 | ka_shrinivaasan | 2013-05-16 15:49:42 +0530 (Thu, 16 May 2013) | 6 lines

Updated VIRGO headers:

virgo.h - contains all the typedefs for virgo_cloudexec module
virgocloudexecsvc.h - contains only stuff related to creation of virgo cloudexec kernel thread service


------------------------------------------------------------------------
r32 | ka_shrinivaasan | 2013-05-16 15:47:17 +0530 (Thu, 16 May 2013) | 4 lines

As part of KBUILD_EXTRA_SYMBOLS experimentation tried adding the module exported symbols to KBUILD_VMLINUX_INIT path to solve
vmlinux related linker errors,but commented at present.


------------------------------------------------------------------------
r31 | ka_shrinivaasan | 2013-05-16 15:44:52 +0530 (Thu, 16 May 2013) | 3 lines

changed obj-m to obj-y due to undefined symbol linker error


------------------------------------------------------------------------
r30 | ka_shrinivaasan | 2013-05-16 15:43:03 +0530 (Thu, 16 May 2013) | 3 lines

Adding syscalls Makefile and syscall table for 64-bit to repository


------------------------------------------------------------------------
r29 | ka_shrinivaasan | 2013-05-16 15:40:31 +0530 (Thu, 16 May 2013) | 13 lines

Linux Kbuild scripts for linking vmlinux and doing modpost:

-Added KBUILD_EXTRA_SYMBOLS to link-vmlinux.sh while trying to solve ld error with vmlinux due undefined symbol errors with VIRGO module symbols
-Added KBUILD_EXTRA_SYMBOLS to Makefile.modpost also

But above was just an experimentation while tring to choose one of the three options to load VIRGO at startup:
1) Adding module name to /etc/modules after an update-initramfs
2) Maintaining status-quo of VIRGO as a loadable module
3) VIRGO as a static builtin kernel module

For the timebeing VIRGO has been added to /etc/modules as the simplest solution


------------------------------------------------------------------------
r28 | ka_shrinivaasan | 2013-05-16 15:32:13 +0530 (Thu, 16 May 2013) | 3 lines

Modified buildscript with option for multiprocessing added to make commandline


------------------------------------------------------------------------
r27 | ka_shrinivaasan | 2013-05-08 17:38:19 +0530 (Wed, 08 May 2013) | 3 lines

Documentation comments changed to "VIRGO driver and service for cloudexec"


------------------------------------------------------------------------
r26 | ka_shrinivaasan | 2013-05-07 18:57:50 +0530 (Tue, 07 May 2013) | 3 lines

Kernel OOPS kern.log committed for future reference and for aiding debugging


------------------------------------------------------------------------
r25 | ka_shrinivaasan | 2013-05-07 18:53:13 +0530 (Tue, 07 May 2013) | 3 lines

Added virgo cloud driver directory to build


------------------------------------------------------------------------
r24 | ka_shrinivaasan | 2013-05-07 18:50:11 +0530 (Tue, 07 May 2013) | 3 lines

Linux 3.7.8 Kernel Build Script 


------------------------------------------------------------------------
r23 | ka_shrinivaasan | 2013-05-06 15:00:11 +0530 (Mon, 06 May 2013) | 3 lines

New header file for uniting all VIRGO related declarations, typedefs etc., in a single place


------------------------------------------------------------------------
r22 | ka_shrinivaasan | 2013-05-06 14:56:53 +0530 (Mon, 06 May 2013) | 3 lines

added unistd.h containing syscall declaration and syscall number for virgo_clone() system call


------------------------------------------------------------------------
r21 | ka_shrinivaasan | 2013-05-06 14:34:20 +0530 (Mon, 06 May 2013) | 3 lines

Moved #include(s) to virgo.h under include/linux folder and #include(d) virgo.h in this file


------------------------------------------------------------------------
r20 | ka_shrinivaasan | 2013-05-06 14:32:16 +0530 (Mon, 06 May 2013) | 3 lines

Object target added for VIRGO kernel service


------------------------------------------------------------------------
r19 | ka_shrinivaasan | 2013-05-06 14:30:34 +0530 (Mon, 06 May 2013) | 4 lines

New Kernel Service for VIRGO cloud execution similar to NFS service. Removed all dependencies on SUN RPC headers viz., xxx_ops and xxx_class
and created separate class and ops data structures specific to VIRGO


------------------------------------------------------------------------
r18 | ka_shrinivaasan | 2013-05-06 14:24:17 +0530 (Mon, 06 May 2013) | 3 lines

Added build autogenerated mach-types file to repository for reference


------------------------------------------------------------------------
r17 | ka_shrinivaasan | 2013-05-06 14:22:06 +0530 (Mon, 06 May 2013) | 4 lines

Added the virgo kernel service thread initialization code to basic setup after all init work is completed and a function to
create kernel thread for virgo service


------------------------------------------------------------------------
r16 | ka_shrinivaasan | 2013-05-06 14:19:05 +0530 (Mon, 06 May 2013) | 2 lines

testcase binary for virgo_clone() system call committed for ready download

------------------------------------------------------------------------
r15 | ka_shrinivaasan | 2013-05-06 14:16:24 +0530 (Mon, 06 May 2013) | 3 lines

port number changed


------------------------------------------------------------------------
r14 | ka_shrinivaasan | 2013-05-02 15:19:06 +0530 (Thu, 02 May 2013) | 3 lines

Updated doc for prototype


------------------------------------------------------------------------
r13 | ka_shrinivaasan | 2013-05-02 15:14:46 +0530 (Thu, 02 May 2013) | 5 lines

Ongoing Refactoring of the module code for implementing xprt_ops in SUN RPC headers by
segregating the accept, send and receive functionalities into separate operation functions
mentioned in xprt_ops


------------------------------------------------------------------------
r12 | ka_shrinivaasan | 2013-04-30 21:50:37 +0530 (Tue, 30 Apr 2013) | 10 lines

Bugfix for Kernel OOPS(continued):

- changed AF_INET to PF_INET though linux kernel headers declare them synonymous
- commented MSG_DONTWAIT
- memset() for sockaddr_in
- more printk() for debug info
- removed O_NONBLOCK to avoid the expected EAGAIN error during non-blocking accept in the absence of outstanding requests 
and changed it to a blocking kernel_accept() (probably might require workqueues for non-blocking kernel_accept())


------------------------------------------------------------------------
r11 | ka_shrinivaasan | 2013-04-29 17:44:29 +0530 (Mon, 29 Apr 2013) | 40 lines

Kernel OOPS bugfix (continued):
- added typedef for function pointer return type
- added printk() for logging debug info to /var/kern/kern.log
- changed sock_create() to sock_create_kern()
- some reshuffling of declarations
- other sundry work

Reference: Kernel OOPS throws errno 11 during kernel_accept():
--------------------------------------------------------------
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.753913] sock_create() returns error code: 0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.753935] kernel_accept() returns error code: -11
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.753948] BUG: unable to handle kernel NULL pointer dereference at 00000014
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.754052] IP: [<c14f1180>] sock_recvmsg+0xa0/0x110
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.754121] *pdpt = 000000002cd2a001 *pde = 0000000000000000
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.754193] Oops: 0000 [#1] SMP
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.754238] Modules linked in: virgo_cloudexec(OF+) ppp_deflate zlib_deflate bsd_comp ppp_async crc_ccitt dm_crypt xt_hl ip6t_rt nf_conntrack_ipv6 nf_defrag_ipv6 ipt_REJECT xt_LOG xt_limit xt_tcpudp xt_addrtype bnep nf_conntrack_ipv4 nf_defrag_ipv4 xt_state rfcomm bluetooth parport_pc ppdev ip6table_filter ip6_tables nf_conntrack_netbios_ns nf_conntrack_broadcast nf_nat_ftp nf_nat nf_conntrack_ftp nf_conntrack iptable_filter ip_tables x_tables uvcvideo snd_hda_codec_idt snd_hda_intel snd_hda_codec joydev option videobuf2_core usb_wwan videodev usbserial videobuf2_vmalloc coretemp videobuf2_memops dell_wmi dell_laptop snd_hwdep sparse_keymap snd_pcm snd_seq_midi gpio_ich snd_rawmidi microcode mac_hid snd_seq_midi_event dcdbas snd_seq psmouse binfmt_misc snd_timer snd_seq_device serio_raw lpc_ich snd soundcore snd_page_alloc lp parport ums_realtek usb_storage i915 ahci libahci drm_kms_helper sky2 drm i2c_algo_bit wmi video
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755419] Pid: 4795, comm: insmod Tainted: GF          O 3.7.8-030708-generic #201302141605 Dell Inc. Inspiron 1545                   /0J037P
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755568] EIP: 0060:[<c14f1180>] EFLAGS: 00010246 CPU: 0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755636] EIP is at sock_recvmsg+0xa0/0x110
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755688] EAX: 00000000 EBX: c0000000 ECX: 00000000 EDX: ecd5bd18
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755761] ESI: 00000000 EDI: ecd5bca0 EBP: ecd5bcec ESP: ecd5bc14
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.755835]  DS: 007b ES: 007b FS: 00d8 GS: 00e0 SS: 0068
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.756437] CR0: 80050033 CR2: 00000014 CR3: 2cd04000 CR4: 000407f0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] DR0: 00000000 DR1: 00000000 DR2: 00000000 DR3: 00000000
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] DR6: ffff0ff0 DR7: 00000400
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] Process insmod (pid: 4795, ti=ecd5a000 task=efbd32c0 task.ti=ecd5a000)
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] Stack:
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  00000040 00000000 00000000 ecd5bd18 ecd5bc28 00000000 00000000 00000000
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  00000001 ffffffff 00000000 00000000 00000000 00000000 00000000 efbd32c0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  00000000 00000000 00000000 00000000 ecd5bca0 00000000 00000000 00000000
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983] Call Trace:
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c104c846>] ? console_unlock+0x16/0x30
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c14f122a>] kernel_recvmsg+0x3a/0x50
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<f844d0fe>] virgocloudexec_init+0xfe/0x1000 [virgo_cloudexec]
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c107beac>] ? ttwu_queue+0xac/0xc0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c1044d6c>] ? kmap_atomic_prot+0x4c/0x120
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c1115550>] ? prep_new_page+0x110/0x1d0
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c103d898>] ? default_spin_lock_flags+0x8/0x10
Apr 29 17:28:41 kashrinivaasan-Inspiron-1545 kernel: [ 4881.762983]  [<c1031a9c>] ? native_send_call_func_single_ipi+0x2c/0x

------------------------------------------------------------------------
r10 | ka_shrinivaasan | 2013-04-26 18:30:00 +0530 (Fri, 26 Apr 2013) | 3 lines

Some ongoing bugfix for Kernel OOPS:
-fixed parameter signatures for kernel_xxx() calls in virgo_cloudexec kernel module

------------------------------------------------------------------------
r9 | ka_shrinivaasan | 2013-04-26 18:28:04 +0530 (Fri, 26 Apr 2013) | 5 lines

Some ongoing bugfix for Kernel OOPS:
1. added virgo_clone.mod.c  and kernel object built to repository 
2. fixed some parameter signatures in kernel_xxx() calls


------------------------------------------------------------------------
r8 | ka_shrinivaasan | 2013-04-24 15:48:31 +0530 (Wed, 24 Apr 2013) | 3 lines

Testcase for virgo_clone() system call by its number 350
through syscall()

------------------------------------------------------------------------
r7 | ka_shrinivaasan | 2013-04-23 22:04:44 +0530 (Tue, 23 Apr 2013) | 3 lines

Initial prototype for VIRGO linux kernel extension for cloud (CPU and memory pooling) - VIRGO cloudexec kernel module and virgo_clone() system call


------------------------------------------------------------------------
r6 | ka_shrinivaasan | 2013-04-23 21:46:39 +0530 (Tue, 23 Apr 2013) | 3 lines

deleting due to incorrect commit


------------------------------------------------------------------------
r5 | ka_shrinivaasan | 2013-04-23 20:36:52 +0530 (Tue, 23 Apr 2013) | 2 lines

Initial prototype like code for CPU pooling (virgo_clone() system call and virgo_cloudexec module)

------------------------------------------------------------------------
r4 | ka_shrinivaasan | 2013-04-23 20:33:43 +0530 (Tue, 23 Apr 2013) | 2 lines

Updated design document

------------------------------------------------------------------------
r3 | ka_shrinivaasan | 2013-04-18 12:51:17 +0530 (Thu, 18 Apr 2013) | 3 lines

Virgo linux module extension with cloud capabilities - design document initial version


------------------------------------------------------------------------
r2 | ka_shrinivaasan | 2013-04-05 11:12:12 +0530 (Fri, 05 Apr 2013) | 4 lines

Linux 3.2.0 and Linux 3.7.8 Kernel Build reference commandlines and documents.
Also committed are USBmd module build commandlines for Linux 3.7.8


------------------------------------------------------------------------
r1 | allura | 2013-03-01 09:55:42 +0530 (Fri, 01 Mar 2013) | 1 line

Initial commit
------------------------------------------------------------------------
