%!PS-Adobe-3.0
%%BoundingBox: 18 36 577 806
%%Title: Enscript Output
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Wed Aug 21 16:01:22 2019
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 90

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 559 def
/d_page_h 770 def
/d_header_x 0 def
/d_header_y 755 def
/d_header_w 559 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 559 def
/d_footer_h 0 def
/d_output_w 559 def
/d_output_h 755 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#------------------------------------------------------------------------------------------) s
5 731 M
(-------------) s
5 720 M
(#NEURONRAIN ASFER - Software for Mining Large Datasets) s
5 709 M
(#This program is free software: you can redistribute it and/or modify) s
5 698 M
(#it under the terms of the GNU General Public License as published by) s
5 687 M
(#the Free Software Foundation, either version 3 of the License, or) s
5 676 M
(#\(at your option\) any later version.) s
5 665 M
(#This program is distributed in the hope that it will be useful,) s
5 654 M
(#but WITHOUT ANY WARRANTY; without even the implied warranty of) s
5 643 M
(#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) s
5 632 M
(#GNU General Public License for more details.) s
5 621 M
(#You should have received a copy of the GNU General Public License) s
5 610 M
(#along with this program.  If not, see <http://www.gnu.org/licenses/>.) s
5 599 M
(#------------------------------------------------------------------------------------------) s
5 588 M
(--------------) s
5 577 M
(#K.Srinivasan) s
5 566 M
(#NeuronRain Documentation and Licensing: http://neuronrain-documentation.readthedocs.io/en/) s
5 555 M
(latest/) s
5 544 M
(#Personal website\(research\): https://sites.google.com/site/kuja27/) s
5 533 M
(#------------------------------------------------------------------------------------------) s
5 522 M
(--------------) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(----------------) s
5 478 M
(NeuronRain - Design Objectives) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(----------------) s
5 445 M
(NeuronRain OS is machine learning, cloud primitives enriched linux-kernel fork-off with app) s
5 434 M
(lications in Internet-of-Things. AstroInfer is) s
5 423 M
(the machine learning side of it to learn analytics variables later read as config by linux ) s
5 412 M
(kernel and any device specific driver.) s
5 401 M
(NeuronRain has been partitioned into components so that effective decoupling is achieved e.) s
5 390 M
(g Linux kernel can be realtime OS for realtime less-latency applications, Message Queuing c) s
5 379 M
(an be KingCobra or any other standard MQ product. There are IOT operating systems like http) s
5 368 M
(s://github.com/RIOT-OS/. Linux and IoT - linux on cameras,automobiles etc., - https://lwn.n) s
5 357 M
(et/Articles/596754/. NeuronRain in itself is not just a product but a framework to build pr) s
5 346 M
(oducts. Applications can invoke VIRGO cloud memory,clone,filesystem primitives to create ne) s
5 335 M
(w products on NeuronRain Smart-IoT framework.) s
5 324 M
( ) s
5 302 M
(Copyright attributions for other open source products dependencies:) s
5 291 M
(------------------------------------------------------------------) s
5 280 M
(1.Maitreya's Dreams - http://www.saravali.de \(some bugs were fixed locally in degree comput) s
5 269 M
(ation of textual display mode\)) s
5 258 M
(2.SVMLight -  http://svmlight.joachims.org/ ) s
5 247 M
(3.BioPython and ClustalOmega Multiple Sequence Alignment BioInformatics Tools \(www.biopytho) s
5 236 M
(n.org, www.ebi.ac.uk/Tools/msa/clustalo/ \)) s
5 214 M
(----------------------------) s
5 203 M
(Open Source Design and Academic Research Notes have been uploaded to http://sourceforge.net) s
5 192 M
(/projects/acadpdrafts/files/MiscellaneousOpenSourceDesignAndAcademicResearchNotes_2013-08-1) s
5 181 M
(1.pdf/download) s
5 159 M
(Presently a complete string sequence mining subsystem and classification algorithms with in) s
5 148 M
(dexing have been implemented for mining patterns in rules and encoded strings and executing) s
5 137 M
( those rules \(in special case,an encoded horoscope\). ) s
5 126 M
(*******************************************************************************************) s
5 115 M
(**************) s
5 104 M
(                        AstroInfer Classifiers - Documentation on the dataset files used) s
5 93 M
(*******************************************************************************************) s
5 82 M
(**************) s
5 60 M
(decisiontree-attrvalues.txt - Attributes based on which decision is done and the values the) s
5 49 M
(y can take \(comma separated list\)) s
5 38 M
(decisiontree-test.txt - Test dataset with set of values for attributes in each line) s
5 27 M
(decisiontree-training.txt - Training dataset with set of values for attributes and class it) s
5 16 M
( belongs in each line) s
5 5 M
(test-set.txt - List of article id\(s\) to be classified - NaiveBayes) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(topics.txt - List of classes the article id\(s\) in training set belong to - NaiveBayes) s
5 731 M
(training-set.txt - List of articles id\(s\) already classified - training dataset for NaiveBa) s
5 720 M
(yes) s
5 709 M
(word-frequency.txt - Words and their frequencies of occurrence in all articles - NaiveBayes) s
5 698 M
(words.txt - words, the article id\(s\) having those words and number of occurrences of those ) s
5 687 M
(words within specific article id \(~ separated\)) s
5 665 M
(Above XXX.txt files need to be populated after doing some preprocessing of the articles to ) s
5 654 M
(be classified. Preprocessing might include finding the word frequencies in the articles, fi) s
5 643 M
(nding classes of the articles, finding attributes and possible values of those attributes. ) s
5 632 M
(At present the asfer.enchoros file contains encoded horoscopes for single class of events. ) s
5 621 M
(Thus classification is redundant. But if it has encoded horo strings for all events then to) s
5 610 M
( filter out strings of a particular class of events, classification is needed. ) s
5 588 M
(Python script for autogenerating above txt files has been added under python-src/autogen_cl) s
5 577 M
(assifier_dataset.This script needs to be changed forgenerating training and test set files.) s
5 555 M
(*******************************************************************************************) s
5 544 M
(***************************************************) s
5 533 M
(DESIGN NOTES, THEORETICAL INTERLUDES\(might have errors\), TODO AND NICE TO HAVE FEATURES \(li) s
5 522 M
(st is quite dynamic and might be rewritten depending on feasibility - long-term design goal) s
5 511 M
(s with no deadline\)) s
5 500 M
(*******************************************************************************************) s
5 489 M
(****************************************************) s
5 467 M
(\(FEATURE - DONE-MDL,Entropy,Edit Distance,Compressed Sensing\) 1. Test with Massive Data Set) s
5 456 M
(s of encoded strings for pattern mining. Algorithms for Approximate Kolmogorov Complexity o) s
5 445 M
(r Minimum Description Length \(MDL\), Shannon Entropy, Levenshtein Edit Distance have been im) s
5 434 M
(plemented in Python and C++. Compressed Sensing \(used in Image and Signal Processing\) which) s
5 423 M
( "sense" from "compressed" large data - This involves computing a matrix product AX=B where) s
5 412 M
( X is an image or bitmap and A is a chosen matrix which together give a sketch B. Sketch of) s
5 401 M
( an image bitmap has been implemented.) s
5 379 M
(\(FEATURE - THEORY-POC Implementation-DONE\) 2. An experimental text compression algorithm th) s
5 368 M
(at deletes vowels and stores only consonants as far as meaning is not altered. For example ) s
5 357 M
("follow" could be stored as "fllw". Since on an average every third letter in an english wo) s
5 346 M
(rd is a vowel, approximate compression is 33%. Message is reconstructed using most probable) s
5 335 M
( meaningful word for "fllw" \(For example "follow" could be more probable than "fellow" or v) s
5 324 M
(ice versa\). This is similar to Texting in phones and to some extent encoding in Match Ratin) s
5 313 M
(g \(http://en.wikipedia.org/wiki/Match_rating_approach\). One more example could be "Decision) s
5 302 M
(" which can be compressed as "Dcsn". An interesting phonetic aspect of this is that "Decisi) s
5 291 M
(on" is spelt as "Dee-C-shan", or each vowel following a consonant is subsumed or coalesced ) s
5 280 M
(into the preceding consonant while spelling. Thus "Dcsn" gives 50% compression ratio. PyEnc) s
5 269 M
(hant python package SpellChecker has suggest\(\) function that returns a tuple of closely rel) s
5 258 M
(ated words to a compressed \(or "misspelt"\) word. Conventional WSD algorithms might have to ) s
5 247 M
(be used on this tuple to get the maximum match. Initial testing reveals that the accuracy w) s
5 236 M
(ith spellcheckers is less and this problem requires a non-trivial algorithm which might req) s
5 225 M
(uire error-correcting codes like Reed-Solomon and Berelekamp-Massey assuming the english te) s
5 214 M
(xt as a finite field of alphabets as elements. Predominantly used dictionary-based Lesk's d) s
5 203 M
(isambiguation Algorithm can find the intersection between "follow" and the rest of the cont) s
5 192 M
(ext and "fellow" and rest of the context and choose the word with maximum intersection with) s
5 181 M
( context - this is quite commonsensical too. But the drawback of this disambiguation is tha) s
5 170 M
(t keywords are disambiguated well while other connectives \(is, are, thus,  this, who, why e) s
5 159 M
(tc.,\) in the sentences are not. Another limitation of applying WSD while decompressing is l) s
5 148 M
(ack of meaningful context words at runtime - only compressed words are available and they c) s
5 137 M
(annot be used as disambiguating context creating a circular dependency - disambiguation req) s
5 126 M
(uires decompression and decompression needs disambiguation. For computing maximum likelihoo) s
5 115 M
(d, most probable vowel between 2 consonants can be zeroed in on by a 26*26 table of consona) s
5 104 M
(nt ordered pairs and having vowels between them as probability distribution priors. This is) s
5 93 M
( feasible only if priors are available. For example th-t has \(h,t\) as consonant pairs and a) s
5 82 M
( is most probable vowel than e,i,o and u and th-t is disambiguated as "that". The vowels mi) s
5 71 M
(ssing in compressed text can be represented by a single extra bit. This is an alternative t) s
5 60 M
(o PyEnchant spellcheck suggest\(\) function. This can be Hidden Markov Model also - with miss) s
5 49 M
(ing vowels as hidden states to measure and compressed letters as observations. This require) s
5 38 M
(s forward-backward probabilities computation or Viterbi path which gives most likely word f) s
5 27 M
(or a compressed word. For "th-t" the Markov Model looks like:) s
5 16 M
(                        x1--------x2--------x3------x4) s
5 5 M
(                        |         |         |       |) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                        t         h         -       t   ) s
5 731 M
(and Bayesian for the above is:) s
5 720 M
(        Pr\(x3/[t,h,-,t]\) is directly proportional to Pr\(x3/[t,h]\) * Pr\([t]/x3\) ) s
5 709 M
(and to be precise it is:) s
5 698 M
(        Pr\(x3/[t,h,-,t] = Pr\(x3/[t,h]\) * Pr\([t]/x3\) / Pr\(t\)/Pr\(t,h\) with denominator being ) s
5 687 M
(a pre-computable constant from substring hashtable as below.) s
5 665 M
(Viterbi path would give the most likely path or most likely word for above. ) s
5 643 M
(\(2.1\) Pr\(x3/[t,h]\) is computed from dictionary - number of words having the sequence / tota) s
5 632 M
(l number of words) s
5 621 M
(which is the argmax\( Pr\(a/t,h\), Pr\(e/t,h\), Pr\(i/t,h\), Pr\(o/t,h\), Pr\(u/t,h\)\) and priors are ) s
5 610 M
(computed for the substrings tha, the, thi, tho, thu.) s
5 588 M
(\(2.2\) Pr\(t/x3\) is computed from dictionary similar to the previous for argmax of probabilit) s
5 577 M
(ies for substrings at, et, it, ot, ut.) s
5 555 M
(\(2.3\) If total number words in dictionary is E \(could be 200000 to 300000\) and yi is the nu) s
5 544 M
(mber of words of length i, then y1 + y2 + .... + yn = E .) s
5 522 M
(\(2.4\) Number of substrings of an n bit word is \(n-1\)n/2.) s
5 500 M
(\(2.5\) Thus number of substrings for all words in dictionary is y2 + 3*y3 + 6*y4 + 10*y5 + .) s
5 489 M
(.. + \(n-1\)n*yn/2. Thus number of substrings \(could be significantly more than 500000\) is in) s
5 478 M
(dependent of the text to be decompressed and the substring prior probabilties can be precom) s
5 467 M
(puted and stored in a hash table \(size of the table is = number of substrings * 5 for each ) s
5 456 M
(vowel\). This table has to be huge but does not depend on text to be decompressed. ) s
5 434 M
(\(2.6\) Above is theoretical basis only implementation of which needs precomputing the above ) s
5 423 M
(hashtable. ) s
5 401 M
(\(2.7\) Above experimental compression scheme that ignores vowels gives a string complexity m) s
5 390 M
(easure \(a minimum description length\) similar to Kolmogorov complexity.) s
5 368 M
(\(2.8\) Algebraically, above can be imagined as a Group Action where group G is set of conson) s
5 357 M
(ants \(with the assumption that inverses exist for each consonant with a special "backspace") s
5 346 M
( element added to alphabet set and identity is "space" element\) and set X to act on is the ) s
5 335 M
(set of vowels. Orbit is the set of X elements moved \(g.x\) and if concatenation \(with phonet) s
5 324 M
(ic coalition\) is a group operator then consonants act on vowel sets. For example, the conso) s
5 313 M
(nant "t" acts on "o" from vowel set to give the word "to". The concatenation is non-abelian) s
5 302 M
(.  Interestingly the above phonetic coalition of vowels to an adjoining consonant is the St) s
5 291 M
(abilizer set or set of Fixed points\(g.x=g\). For example, the consonant "d" acting on the vo) s
5 280 M
(wel "e" gives a phonetically coalesced compression "d" \("d" ,"de" and "dee" are phoneticall) s
5 269 M
(y same as "d"\) as a fixedpoint. Thus Orbit-Stabilizer Theorem \( set of cosets of Fixed poin) s
5 258 M
(ts - Quotient group G/G\(x\) -  isomorphic to Orbit\) should apply to the above.  There may be) s
5 247 M
( scenarios where a maximum likely vowel from above argmax\(\) computation does not equal the ) s
5 236 M
(actual vowel expected and for arbitrary non-dictionary strings prior computation is difficu) s
5 225 M
(lt. Thus this algorithm is quite experimental.) s
5 203 M
(\(2.9\) Linguistic words can be construed as a polynomial graph plotted on an x-y axis: x-axi) s
5 192 M
(s represents position of a letter in a text and y-axis represents an alphabet \(vowels and c) s
5 181 M
(onsonants\). From the previous string complexity measure missing vowels are missing points o) s
5 170 M
(n the polynomial. Disambiguating the word is then equivalent to Polynomial Reconstruction P) s
5 159 M
(roblem/List Decoding/Error correcting codes \(Reference: Point 345\) that reconstructs a list) s
5 148 M
( of polynomials \(i.e set of disambiguated words\) from a codeword\(i.e compressed vowelless s) s
5 137 M
(tring\) one of which disambiguates and decompresses the vowelless codeword - polynomial reco) s
5 126 M
(nstructed should include \(almost all\) missing vowels. Text can be represented as a polynomi) s
5 115 M
(al function defined as f:N->Alphabets where N is set of natural numbers. Factoring over thi) s
5 104 M
(s polynomial ring enables text to be represented as products of texts. An implementation of) s
5 93 M
( polynomial encoding of texts has been done in 364. Berlekamp-Welch algorithm creates a sys) s
5 82 M
(tem of equations which themselves are evaluations of two polynomials over finite fields for) s
5 71 M
( all xi \(P\(xi\) = Q\(xi\)/E\(xi\)\) where each xi is from input set of ordered pair of points \(xi) s
5 60 M
(,yi\). This system of equations is solved by Gaussian Elimination to compute Q\(x\)/E\(x\) = P\(x) s
5 49 M
(\). Berlekamp-Welch encodes a text in a different way than plain polynomial curve fitting - ) s
5 38 M
(each letter ordinal in text is a coefficient of a polynomial of degree equal to size of tex) s
5 27 M
(t whereas polynomial encoding of text fits a curve passing through the ordinal values of le) s
5 16 M
(tters in successive positions. This polynomial with ordinal coefficients over a finite fiel) s
5 5 M
(d is then evaluated in n points and transmitted. Recipient reconstructs the original polyno) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(mial from transmission errors in received points by Gaussian Elimination. If transmission e) s
5 731 M
(rror is simulated as removing vowels in original message polynomials, reconstruction by sol) s
5 720 M
(ving system of equations should almost correctly identify missing vowels.) s
5 698 M
(\(2.10\) From point 345 and 346, high level language texts like English,French etc., can be t) s
5 687 M
(hought of as 255-coloring of letter positions where 255 is the size of alphanumeric alphabe) s
5 676 M
(t \(ASCII,Unicode\). Each letter in a text "colors" corresponding letter position in text wit) s
5 665 M
(h an alphabet. From Van Der Waerden and other coloring theorems, there are monochromatic ar) s
5 654 M
(ithmetic progressions in letter positions in high level language texts i.e alphabets in APj) s
5 643 M
( positions are all same for some APj. This implies there is an order in high level context ) s
5 632 M
(sensitive natural language grammars and answers in affirmative the conjecture posited in 34) s
5 621 M
(6.) s
5 599 M
(\(2.11\) Monochromatic arithmetic progressions in letter positions of natural language texts ) s
5 588 M
(implies that finite state automata can be learnt to accept such arithmetic progressions in ) s
5 577 M
(text. For example , text "abaabaabaab..." over alphabets {a,b} has alphabet b in AP positio) s
5 566 M
(ns where AP is 2+3n. Regular language Finite State Automata for this 2-colored infinite str) s
5 555 M
(ing is:) s
5 544 M
(                        a---b---a---a--->b) s
5 533 M
(                                |<-------|) s
5 511 M
(\(2.12\) In terms of vowelless string complexity measure previously, if a 255-colored string ) s
5 500 M
(is simplified to 2-colored string as "Consonant-Vowel-Consonant-Consonant-Vowel-Consonant-C) s
5 489 M
(onsonant-Vowel..." replacing consonant and vowels with "Consonant" and "Vowel" notations, e) s
5 478 M
(nglish language \(and most others\) on an average has an arithmetic progression k+3n of vowel) s
5 467 M
( positions for some constant k.) s
5 445 M
(3. \(FEATURE - THEORY - Pairwise LCS implementation DONE\) KMeans, KNN and other clustering a) s
5 434 M
(nd classification algorithms implemented thus far, group similar encoded strings for astron) s
5 423 M
(omical \(or any other\) data. Clustered strings can further be mined for patterns with orderi) s
5 412 M
(ng by applying a Longest Common Substring algorithm within each cluster. This gives a fine ) s
5 401 M
(grained pattern hidden in the encoded input strings. These longest common substrings can th) s
5 390 M
(en be translated to a rule similar to class association rule \(Frequent item set and GSP alg) s
5 379 M
(orithms are quite expensive and do not fit well for mining patterns in strings\).) s
5 357 M
(4. \(FEATURE - DONE\) Implementation of String Distance measure using different distance meas) s
5 346 M
(ures \(python-src/StringMatch.py\) for comparing Encoded Strings in addition to pairwise and ) s
5 335 M
(Multiple Sequence Alignment.) s
5 313 M
(5. \(FEATURE - DONE\) Construct a Hidden Markov Model with State transitions and Observations) s
5 302 M
(\(events\). If the number of states are exponential then this will be infeasible. A HMM has b) s
5 291 M
(een implemented for text decompression with vowel-removed strings. Also a HMM has been impl) s
5 280 M
(emented for Part-of-Speech tagging, Named Entity Recognition and Conditional Random Fields.) s
5 258 M
(6. \(FEATURE - DONE - continuation of point 3\) Correlate with Rules from Classics \(BPHS, BJ ) s
5 247 M
(etc.,\) with the mined datasets for particular class of events \(Special Case of Mundane Pred) s
5 236 M
(ictive Model is described in items 47 to 51 and basic framework is already implemented\). Th) s
5 225 M
(e Longest Common Substring implementation already mines for most common pattern with in a c) s
5 214 M
(lustered or classified dataset of encoded strings which suffices for astronomical datasets.) s
5 203 M
( Script for parsing the clustered data from classifiers and decoding the longest common pat) s
5 192 M
(tern have been added.) s
5 170 M
(7. \(FEATURE - DONE\) Integrate Classifiers in above String Pattern mining \(classify strings ) s
5 159 M
(and then mine\).) s
5 137 M
(8. \(FEATURE - DONE\) At present fundamental algorithms like - Perceptrons with Gradient Desc) s
5 126 M
(ent, Linear and Logistic Regression, Hidden Markov Model for Text Decompression, KMeans Clu) s
5 115 M
(stering, Naive Bayesian, Decision Tree, SVM \(uses thirdparty OSS\) and kNN Classifiers, Stri) s
5 104 M
(ng Alignment and Distance based algorithms, Knuth-Morris-Pratt String Match Algorithm, Sequ) s
5 93 M
(ence Mining, Deep Learning\(Convolution and Backpropagation\), Social Network Analysis, Senti) s
5 82 M
(ment Analysis - have been implemented specialized for the encoded strings astronomical data) s
5 71 M
(sets.) s
5 49 M
(9. \(FEATURE - DONE\) InterviewAlgorithm code in https://sourceforge.net/p/asfer/code/146/tre) s
5 38 M
(e/python-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit.py and Classification) s
5 27 M
( based on indegrees of wordnet subgraph node in action item 6 above \(as mentioned in http:/) s
5 16 M
(/arxiv.org/abs/1006.4458 , https://sites.google.com/site/kuja27/TAC2010papersubmission.pdf?) s
5 5 M
(attredirects=0 and http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.pro) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ceedings.pdf\). Related Publication Drafts are: https://sites.google.com/site/kuja27/LowerBo) s
5 731 M
(undsForMajorityVotingPseudorandomChoice.pdf?attredirects=0, https://sites.google.com/site/k) s
5 720 M
(uja27/CircuitForComputingErrorProbabilityOfMajorityVoting.pdf?attredirects=0, https://sites) s
5 709 M
(.google.com/site/kuja27/IndepthAnalysisOfVariantOfMajorityVotingwithZFAOC.pdf?attredirects=) s
5 698 M
(0. Test C++ code written in 2006 for computing Majority voting error probability is at: htt) s
5 687 M
(p://sourceforge.net/p/asfer/code/HEAD/tree/cpp-src/miscellaneous/pgood.cpp and python scrip) s
5 676 M
(t written in 2010 is at: http://sourceforge.net/p/asfer/code/HEAD/tree/python-src/pgood.py.) s
5 665 M
( ) s
5 643 M
([Disclaimer and Caveat: Due to radical conclusions that are derivable from the P\(good\) bino) s
5 632 M
(mial coefficients summation infinite series when applied to majority voting with SAT settin) s
5 621 M
(g in perfect zero-error case, all the related points elsewhere in this document on majority) s
5 610 M
( voting + SAT versus psuedorandom choice \(e.g 100% noise stability and circuit lowerbounds ) s
5 599 M
(for it\) are work-in-progress , unreviewed \(excluding those done during 2009-2011\) , not-qui) s
5 588 M
(te rigorous drafts only with possible theoretical errors, which might have commissions-omis) s
5 577 M
(sions and more additions to make as mentioned earlier and this analyzes a very special case) s
5 566 M
( of voting scenario. It is not an attempt to prove or disprove P=NP,but rather an analysis ) s
5 555 M
(of very generic unnatural proof framework based on boolean social choice complexity for pro) s
5 544 M
(ving lowerbounds which might include the question of P=NP. Infact it shrouds entire complex) s
5 533 M
(ity classes underneath it. It is non-conventional and questionable as to whether LHS pseudo) s
5 522 M
(randomness or dictator boolean function can be equated to RHS Majority Voting. This just an) s
5 511 M
(alyzes the special case when there is zero-error or same-error on both sides and the outcom) s
5 500 M
(es of processeses related to pseudorandom/dictator choice and Majority Voting with Voter SA) s
5 489 M
(T oracles are "equally good" where "Goodness" is defined as for all scenarios which could b) s
5 478 M
(e infinite, a PRG/Dictator choice or Majority Voted Choice "make zero-error decisions". It ) s
5 467 M
(is not a statistical mean on both sides in which all probabilities are averaged. More speci) s
5 456 M
(fically, \(in\)tractability of perfect voting is pivotal to this - assuming perfection which ) s
5 445 M
(does away with BP* complexity classes this poses itself as a strong non-trivial counterexam) s
5 434 M
(ple. In theoretical interludes in this document probability of perfection is defined as a f) s
5 423 M
(unction of NoiseSensitivity or NoiseStability which is based on commonsense notion that if ) s
5 412 M
(an entity \(human or software\) has "correct thinking in decision making" outcome "decision" ) s
5 401 M
(is "correct". For example if noisy inputs do not perturb a voter's boolean function, voter ) s
5 390 M
(is 100% stable. This is equivalent to real life scenarios where conflicting inputs from peo) s
5 379 M
(ple make a person to decide incorrectly. A perfect voter is never swayed. Even without equa) s
5 368 M
(ting the 2 sides\(e.g whether there exists a P algorithm for RHS PH or EXP circuit\) above ar) s
5 357 M
(e non-trivial problems. Lot of assumptions have been made in arriving at conclusions in thi) s
5 346 M
(s document, most important being equal stability implies circuit lowerbounds which is based) s
5 335 M
( on a matrix of scenarios where error and noise intersect and 100% noise stability regime i) s
5 324 M
(n percolation crossing events. In general setting, distribution is Poisson binomial with un) s
5 313 M
(equal voter error and Error is not just limited to noise sensitivity but also includes flaw) s
5 302 M
(ed decision tree evaluation which adds one more scenario to matrix. It is more apt to say t) s
5 291 M
(here are no conclusions arrived at from equating LHS and RHS of Pr\(Good\) circuits. Rather i) s
5 280 M
(t raises lot of more open questions and contradictions. A major requirement for proving a s) s
5 269 M
(eparation or containment is that RHS majority voting circuit has to be a complete problem f) s
5 258 M
(or class C whether exact or probabilistic\(BP*\), implying whole L\(RHS\) is in L\(LHS\) because ) s
5 247 M
(LHS is an algorithm for a complete problem. For many probabilistic BP* and PH classes no co) s
5 236 M
(mplete problems are known. Conclusions can be drawn subject to knowledge of complete proble) s
5 225 M
(ms for RHS majority voting circuit.) s
5 203 M
(There are zero error voting systems:) s
5 192 M
(E.g Paxos protocol without byzantine failures - http://research.microsoft.com/en-us/um/peop) s
5 181 M
(le/lamport/pubs/paxos-simple.pdf) s
5 170 M
(]) s
5 159 M
(---------------------------------------------------------------------------) s
5 148 M
(Psuedorandom Choice and Majority Voting \(Majority circuit with SAT inputs\)) s
5 137 M
(---------------------------------------------------------------------------) s
5 126 M
(10. \(THEORY\) https://sites.google.com/site/kuja27/ImplicationRandomGraphConvexHullsAndPerfe) s
5 115 M
(ctVoterProblem_2014-01-11.pdf?attredirects=0&d=1 on decidability of existence of perfect vo) s
5 104 M
(ter and the probability series for a good choice of https://sites.google.com/site/kuja27/Ci) s
5 93 M
(rcuitForComputingErrorProbabilityOfMajorityVoting_2014.pdf?attredirects=0&d=1 are related t) s
5 82 M
(o already well studied problems in social choice theory but problem definition is completel) s
5 71 M
(y different. Arrow's theorem of social choice for an irrational outcome in condorcet electi) s
5 60 M
(on of more than 2 candidates and its complexity theory fourier analysis proof [GilKalai] ar) s
5 49 M
(e described in www.cs.cmu.edu/~odonnell/papers/analysis-survey.pdf. Irrational outcome is a) s
5 38 M
( paradox where the society is "confused" or "ranks circularly" in choice of a candidate in ) s
5 27 M
(multipartisan condorcet voting. Rational outcome converges to 91.2% \(Guilbaud number\) with ) s
5 16 M
(a possibility of 8.8% irrational outcome. ) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Additional References:) s
5 731 M
(---------------------) s
5 720 M
(10.1. Social Choice Theory, Arrow's Theorem and Boolean functions - http://www.ma.huji.ac.i) s
5 709 M
(l/~kalai/CHAOS.pdf) s
5 698 M
(10.2. http://www.project-syndicate.org/commentary/kenneth-arrow-impossibility-theorem-socia) s
5 687 M
(l-welfare-by-amartya-sen-2014-11) s
5 676 M
(10.3. Real life illustration of Arrow's Theorem - http://www.nytimes.com/2016/05/09/upshot/) s
5 665 M
(unusual-flavor-of-gop-primary-illustrates-a-famous-paradox.html - Condorcet Circular choice) s
5 654 M
( paradox, Change in Voter decision when a new Candidate is added and Conflict between indiv) s
5 643 M
(idual decision and group decision - Incompleteness of democratic process.) s
5 632 M
(10.4. How hard is it to control elections [BartholdiToveyTrick] - http://www.sciencedirect.) s
5 621 M
(com/science/article/pii/089571779290085Y - manipulating outcomes of variety of voting schem) s
5 610 M
(es is NP-hard.) s
5 599 M
(10.5. How hard is it to control elections with tiebreaker [MatteiNarodytskaWalsh] - https:/) s
5 588 M
(/arxiv.org/pdf/1304.6174.pdf ) s
5 566 M
(11.\(THEORY\) What is perplexing is the fact that this seems to contravene guarantee of uniqu) s
5 555 M
(e restricted partitions described based on money changing problem and lattices in https://s) s
5 544 M
(ites.google.com/site/kuja27/SchurTheoremMCPAndDistinctPartitions_2014-04-17.pdf?attredirect) s
5 533 M
(s=0 and https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.pdf?attr) s
5 522 M
(edirects=0&d=1 which are also for elections in multipartisan setting \(if condorcet election) s
5 511 M
( is done\). Probably a "rational outcome" is different from "good choice" where rationality ) s
5 500 M
(implies without any paradoxes in ranking alone without giving too much weightage to the "go) s
5 489 M
(odness" of a choice by the elector. Actual real-life elections are not condorcet elections ) s
5 478 M
(where NAE tuples are generated. It is not a conflict between Arrow's theorem as finding atl) s
5 467 M
(east 1 denumerant in multipartisan voting partition is NP-complete \(as it looks\) - which ca) s
5 456 M
(n be proved by ILP as in point 20 of https://sites.google.com/site/kuja27/IntegerPartitionA) s
5 445 M
(ndHashFunctions_2014.pdf?attredirects=0&d=1 - the assumption is that candidates are not ran) s
5 434 M
(ked; they are voted independently in a secret ballot by electors and they can be more than ) s
5 423 M
(3. The elector just chooses a candidate and votes without giving any ordered ranking for th) s
5 412 M
(e candidates which makes it non-condorcet. ) s
5 390 M
(12.\(THEORY\) Moreover Arrow's theorem for 3 candidate condorcet election implies a non-zero ) s
5 379 M
(probability of error in voting which by itself prohibits a perfect voting system. If genera) s
5 368 M
(lized to any election and any number of candidates it could be an evidence in favour of P !) s
5 357 M
(= NP by proving that perfect voter does not exist and using democracy Maj+SAT circuits and ) s
5 346 M
(P\(Good\) probability series convergence \(As described in handwritten notes and drafts http:/) s
5 335 M
(/sourceforge.net/projects/acadpdrafts/files/ImplicationGraphsPGoodEquationAndPNotEqualToNPQ) s
5 324 M
(uestion_excerpts.pdf/download, https://sites.google.com/site/kuja27/ImplicationRandomGraphC) s
5 313 M
(onvexHullsAndPerfectVoterProblem_2014-01-11.pdf?attredirects=0&d=1, https://sites.google.co) s
5 302 M
(m/site/kuja27/LowerBoundsForMajorityVotingPseudorandomChoice.pdf?attredirects=0, https://si) s
5 291 M
(tes.google.com/site/kuja27/CircuitForComputingErrorProbabilityOfMajorityVoting_2014.pdf?att) s
5 280 M
(redirects=0&d=1 and https://sites.google.com/site/kuja27/PhilosophicalAnalysisOfDemocracyCi) s
5 269 M
(rcuitAndPRGChoice_2014-03-26.pdf?attredirects=0\). ) s
5 247 M
(13.\(THEORY\) But it is not known that if Arrow's theorem can be generalized for infinite num) s
5 236 M
(ber of candidates as above and whether such an electoral system is decidable. The possibili) s
5 225 M
(ty of a circular ranking in 3-condorcet election implies that there are some scenarios wher) s
5 214 M
(e voter can err though not exactly an error in making a "good choice" \(or Perfect Voter Pro) s
5 203 M
(blem is decidable in case of 3 candidates condorcet election\).) s
5 181 M
(14.\(THEORY\) Each Voter has a k-SAT circuit which is input to Majority circuit. k-SAT can be) s
5 170 M
( reduced to 3-SAT \(not 2-SAT\) and thus is NP-complete. Error by a Voter SAT circuit implies) s
5 159 M
( that voter votes 0 instead of 1 and 1 instead of 0. This is nothing but the sensitivity of) s
5 148 M
( the voter boolean function i.e number of erroneous variable assignments by the voter that ) s
5 137 M
(change the per-voter decision input to the Majority circuit. Thus more the sensitivity or n) s
5 126 M
(umber of bits to be flipped to change the voter decision, less the probability of error by ) s
5 115 M
(the voter. If sensitivity is denoted by s, 1/q is probability that a single bit is flipped ) s
5 104 M
(and probability of error by the voter is p then p = 1/q^s which is derived by the condition) s
5 93 M
(al probability that Pr[m bits are flipped] = Pr[m-th bit is flipped/\(m-1\) bits already flip) s
5 82 M
(ped]*Pr[\(m-1\) bits are flipped] = 1/q*1/q^\(m-1\) = 1/q^m \(and m=s\) . This expression for p  ) s
5 71 M
(can be substituted in the Probability series defined in https://sites.google.com/site/kuja2) s
5 60 M
(7/CircuitForComputingErrorProbabilityOfMajorityVoting_2014.pdf?attredirects=0&d=1. Probabil) s
5 49 M
(ity of single bit flip is 1/q if the number of variables across all clauses is q and each v) s
5 38 M
(ariable is flipped independent of the other. Error by voter can also be simulated with prob) s
5 27 M
(abilisitc truth tables\(or\) probabilistic CNFs.) s
5 5 M
(For example, a term in the binomial summation becomes:) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(mC\(n+1\) * \(1/q^s\)^\(n+1\) * \(1-1/q^s\)^\(m-n-1\) where m is total number of voter SATs and \(1/q\)) s
5 731 M
( is probability of single variable flip in Voter SAT and s is sensitivity of Voter SAT bool) s
5 720 M
(ean function - s can change for each voter SAT in which case it has to be s1,s2,s3,s4,s5,..) s
5 709 M
(. and the summation requires hypergeometric algorithms.) s
5 687 M
(The Voter SAT circuit has an interesting application of Hastad's Switching Lemma - random p) s
5 676 M
(robabilistic setting of variables known as "restrictions" decreases the decision tree depth) s
5 665 M
( significantly , or, number of variables that determine the Voter SAT outcome reduces signi) s
5 654 M
(ficantly - in other words, random "restricted convincing" of a voter SAT CNF has huge impac) s
5 643 M
(t on number of variables yet to be "convinced".) s
5 621 M
(As done in the Switching Lemma proof, parity circuit can be an AND of ORs \(or OR of ANDs\) w) s
5 610 M
(hich is randomly restricted to switch the connectives in lowest 2 levels to arrive at super) s
5 599 M
(-polynomial lowerbound for parity and hence for each voter SAT. Thus the Parity CNF can be ) s
5 588 M
(the special case of Voter SAT also \(i.e voter wants odd number of variables to be satisfied) s
5 577 M
( - odd voter indeed\). This kind of extends switching lemma to an infinite majority with par) s
5 566 M
(ity oracle case.) s
5 544 M
(Fourier expansion of the unbounded fan-in Majority+SAT circuit is obtained from indicator p) s
5 533 M
(olynomial \(http://www.contrib.andrew.cmu.edu/~ryanod/?p=207\) by substituting fourier polyno) s
5 522 M
(mial for each voter SAT in the majority circuit fourier polynomial. Conjecturally, this exp) s
5 511 M
(ansion might give an infinite summation of multilinear monomials - has some similarities to) s
5 500 M
( permanent computation if represented as an infinite matrix i.e Permanent converges to 1 fo) s
5 489 M
(r this infinite matrix for perfect voting \(?\) and Permanent is #P complete. This is obvious) s
5 478 M
( corollary of Toda's theorem in a special case when RHS of P\(Good\) is a PH=DC circuit becau) s
5 467 M
(se Toda's theorem implies that any PH problem is contained in P^#P\(P with access to #P numb) s
5 456 M
(er_of_sats oracle\). Permanent computes bipartite matchings - non-overlapping edges between ) s
5 445 M
(two disjoint vertex sets - probably pointing to the bipartisan majority voting. This makes ) s
5 434 M
(sense if the entire electorate is viewed as a complete social network graph and voting is p) s
5 423 M
(erformed on this network electorate. Majority voting divides the social network into two di) s
5 412 M
(sjoint sets \(for and against\) with edges among them - division is by maximum matching - "fo) s
5 401 M
(r" voter vertex matched with "against" voter vertex. When this matching is perfect, electio) s
5 390 M
(n is tied. Imperfect matchings result in a clear winner vertex set - which has atleast one ) s
5 379 M
(unmatched vertex is the winner.) s
5 357 M
(Demarcation of linear and exponential sized ciruits: P\(good\) RHS has Circuit SAT for each v) s
5 346 M
(oter with unbounded fanin.) s
5 335 M
(1\) If the variables for each voter SAT are same, then the circuit size is exponential in nu) s
5 324 M
(mber of variables - DC-uniform) s
5 313 M
(2\) else if the variables are different for each SAT, then the circuit is linear in number o) s
5 302 M
(f variables - polynomial size) s
5 280 M
(1\) is more likely than 2\) if lot of variables among voters are common.) s
5 258 M
(There are three possibilities) s
5 247 M
(Circuit lies between 1\) and 2\) - some variables are common across voters - kind of super-po) s
5 236 M
(lynomial and sub-exponential ) s
5 225 M
(Circuit is 1\) - all variables are common across voters - the worst case exponential \(or eve) s
5 214 M
(n ackermann function?\)) s
5 203 M
(Circuit is 2\) - there are no common variables) s
5 181 M
(As an alternative formulation, LHS of the P\(Good\) series can be a dictator boolean function) s
5 170 M
( \(property testing algorithms like BLR, NAE tuples - http://www.contrib.andrew.cmu.edu/~rya) s
5 159 M
(nod/?p=1153\) that always depends on only one variable and not on a Pseudorandom generator. ) s
5 148 M
(Thus how error-free is the assignment to LHS dictator boolean function determines P\(Good\) L) s
5 137 M
(HS\(sensitivity and probabilistic truth tables are the measures applicable as described prev) s
5 126 M
(iously\). Thus both LHS and RHS can be boolean functions with corresponding circuits constru) s
5 115 M
(ctible for them.) s
5 93 M
(Influence of a variable i in a boolean function is Probability[f\(x\) != f\(x with i-th bit fl) s
5 82 M
(ipped\)]. For Majority function influence is ~ 1/sqrt\(n\) from Berry-Esseen Central Limit The) s
5 71 M
(orem - sum of probability distributions of values assigned to boolean random variables conv) s
5 60 M
(erge to Gaussian. Thus in infinite majority a voter is insignificant.  Error in majority vo) s
5 49 M
(ting can be better defined with Stability and Noise Sensitivity measures of a Boolean Funct) s
5 38 M
(ion \(Influence, Stability, Noise, Majority is Stablest theorem etc., - www.cs.cmu.edu/~odon) s
5 27 M
(nell/papers/analysis-survey.pdf\) where correlated pairs of boolean variable tuples form an ) s
5 16 M
(inner product to get the expression : Noise\(f\) = 1/2 - 1/2*Stability\(f\) where Noise is the ) s
5 5 M
(measure of corruption in votes polled while Stability is the resilience of votes polled to ) s
_R
S
%%Page: (8) 8
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(corruption so that outcome is not altered. [But for infinite majority inner product could b) s
5 731 M
(ecome infinite and the measures may lose relevance]. Also related is the Kahn-Kalai-Linial ) s
5 720 M
(Theorem for corrupted voting - http://www.contrib.andrew.cmu.edu/~ryanod/?p=1484 - that der) s
5 709 M
(ives a lower bound for the maximum influence \(log\(n\)/n\). Applications of Noise Sensitivity ) s
5 698 M
(in real-world elections is described in - https://gilkalai.wordpress.com/2009/03/06/noise-s) s
5 687 M
(ensitivity-lecture-and-tales/ , http://www.cs.cmu.edu/~odonnell/slides/mist.pps and percola) s
5 676 M
(tion in http://research.microsoft.com/en-us/um/people/schramm/memorial/spectrumTalk.pdf?tdu) s
5 665 M
(id=\(332400bcf8f14700b3a2167cd09a7aa9\)\(256380\)\(2459594\)\(TnL5HPStwNw-SliT5K_PKao3NElOXgvFug\)\() s
5 654 M
(\) ) s
5 621 M
(As done for sensitivity previously, a term in the P\(Good\) binomial summation becomes:) s
5 610 M
(mC\(n+1\) * product_of_n+1_\(NoiseSensitivityOfVoterSAT\(i\)\) * product_of_m-n-1_\(1-NoiseSensiti) s
5 599 M
(vityOfVoterSAT\(i\)\) where m is total number of voter SATs and the summation requires hyperge) s
5 588 M
(ometric algorithms. Infact it makes sense to have Stability as a zero-error measure i.e the) s
5 577 M
( binomial summation term can be written as mC\(n+1\) * product_of_n+1_\(NoiseSensitivityOfVote) s
5 566 M
(rSAT\(i\)\) * product_of_m-n-1_\(1/2+1/2*StabilityOfVoterSAT\(i\)\) since 1-NoiseSensitivity = 1/2) s
5 555 M
( + 1/2*Stability. Difference between sensitivity and NoiseSensitivity here is that NoiseSen) s
5 544 M
(sitivity and Stability are probabilities and not number of bits and are directly substituta) s
5 533 M
(ble in P\(Good\) series. ) s
5 511 M
(Summation of binomial coefficients in RHS is the collective stability or noise in the infin) s
5 500 M
(ite majority circuit. It converges to 0.5 if NoiseStability is uniform 0.5 for all Voter SA) s
5 489 M
(Ts and in best case converges to 1. This summation connects analysis, non-uniform infinite ) s
5 478 M
(majority voting and complexity theory - Hypergeometric functions, Noise and Stability of Vo) s
5 467 M
(ter Boolean functions, Majority Circuit.) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(---------) s
5 423 M
(P\(Good\) summation is Complementary Cumulative Binomial Distribution Function \(or\) Survival ) s
5 412 M
(Function) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(---------) s
5 379 M
(Goodness Probability of an elected choice is derived in https://sites.google.com/site/kuja2) s
5 368 M
(7/CircuitForComputingErrorProbabilityOfMajorityVoting_2014.pdf . For an above average good ) s
5 357 M
(choice \(i.e a choice which is more than 50% good\) atleast majority populace must have made ) s
5 346 M
(a good decision \(this is axiomatically assumed without proof where all voters have equal we) s
5 335 M
(ightages\). In probability notation this is Pr\(X > n/2\) where X is the binomial random varia) s
5 324 M
(ble denoting the number of electorate who have made a good choice which has to be atleast h) s
5 313 M
(alfway mark. For each Pr\(X=k\) the binomial distribution mass function is nCk\(p\)^k\(1-p\)^k [R) s
5 302 M
(eference: https://en.wikipedia.org/wiki/Binomial_distribution]. Cumulative distributive fun) s
5 291 M
(ction is defined as Pr\(X <= k\) = summation_0_k\(nCk\(p\)^k\(1-p\)^\(n-k\)\) and its complement is P) s
5 280 M
(r\(X > k\) = 1 - Pr\(X <= k\) mentioned as Complementary Cumulative Distributive Function [Refe) s
5 269 M
(rence: https://en.wikipedia.org/wiki/Cumulative_distribution_function] which is also known ) s
5 258 M
(as Survival Function[Reference: https://en.wikipedia.org/wiki/Survival_function].) s
5 236 M
(A plausible proof for the assumption that for an above average good choice atleast half of ) s
5 225 M
(the popluation must have made a good decision:) s
5 214 M
(If there are n inputs to the Majority circuits, the voter inputs with good decision can be ) s
5 203 M
(termed as "Noiseless" and voter inputs with bad decisions can be termed as "Noisy" in Noise) s
5 192 M
( Sensitivity parlance. For infinite majority it is known that\(from http://analysisofboolean) s
5 181 M
(functions.org/\):) s
5 170 M
(        lim  NS\(delta, Majority\(n\)\)  = 1/pi * arccos\(1-2*delta\) \(due to Central Limit Theor) s
5 159 M
(em and Sheppard's Formula\)) s
5 148 M
(        n->infinity) s
5 137 M
(        n odd) s
5 115 M
(where delta is probability of noise and hence bad decision. If delta is assumed to be 0.5 f) s
5 104 M
(or each voter \(each voter is likely to err with probability 0.5\) then above limit becomes:) s
5 93 M
(        1/pi * arccos\(1-1\) = 1/pi * pi/2 = 1/2 which is the Noise \(Goodness or Badness\) of ) s
5 82 M
(the majority circuit as a whole.) s
5 71 M
(From this expected number of bad decision voters can be deduced as E\(x\) = x*p\(x\) = 0.5 * n ) s
5 60 M
(= n/2 \(halfway mark\)) s
5 38 M
(Above is infact a simpler proof for P\(Good\) without any binomial summation series for delta) s
5 27 M
(=0.5. In other words the number of bad decisions are reverse engineered. But P\(Good\) binomi) s
5 16 M
(al summation \(complementary cumulative distributive function\) is very much required in the ) s
5 5 M
(hardest problem where each voter has a judging function to produce an input to Majority fun) s
_R
S
%%Page: (9) 9
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ction and each such judging function is of varied complexities and noise stabilities.) s
5 720 M
(For delta=0.5, NoiseSensitivity of infinite majority=0.5 and both are equal. For other valu) s
5 709 M
(es of delta this is not the case. For example interesting anomalies below surface:) s
5 687 M
(delta=0.3333...:) s
5 676 M
(----------------) s
5 665 M
(NS = 1/pi * arccos\(1 - 2*0.333...\) = 0.3918) s
5 643 M
(delta=0.25:) s
5 632 M
(----------) s
5 621 M
(NS = 1/pi * arccos\(1-2*0.25\) = 0.333...) s
5 599 M
(--------------------------) s
5 588 M
(Chernoff upper tail bound) s
5 577 M
(--------------------------) s
5 566 M
(Upper bound for P\(Good\) binomial distribution can be derived from Chernoff bound \(assuming ) s
5 555 M
(Central Limit Theorem applies to sum of Binomial random variables\)- http://www.cs.berkeley.) s
5 544 M
(edu/~jfc/cs174/lecs/lec10/lec10.pdf - For P\(Good\) series the upper tail bound is needed i.e) s
5 533 M
(. Pr\(Number of voters making good decision > n/2\) which is derivable to 0.5 and 1 exactly w) s
5 522 M
(herein the upper bound is not necessary. But for other cases , upper tail Chernoff bound is) s
5 511 M
(:) s
5 500 M
(        P[X > \(1+delta\)*mean] < {e^delta/\(1+delta\)^\(1+delta\)}^mean) s
5 489 M
(        Total population is n, mean=n*p and \(1+delta\)*mean = n/2) s
5 478 M
(        Thus delta = \(1 - 2*p\)/2*p) s
5 467 M
(        P[X > n/2] < {e^[\(1-2p\)/p]/\(1/2p\)^\(1/2p\)} = {e^\(1-2p\)n * \(2p\)^\(1/2p\)}) s
5 445 M
(When p=0.5 , P[ X > n/2] < 1 which is an upperbound for 0.5.) s
5 434 M
(But intriguingly for p=1 the upper tail bound is:) s
5 423 M
(                \(e^\(-1\)*sqrt\(2\)\)^n      ) s
5 412 M
(which is increasingly less than 1 for high values of n whereas P\(good\) converges to 1 in ex) s
5 401 M
(act case \(why are these different?\). This contradiction arises since in exact derivation of) s
5 390 M
( P[X > n]:) s
5 379 M
(    mC\(n+1\)\(p\)^\(n+1\)\(1-p\)^\(m-n-1\) + mC\(n+2\)\(p\)^\(n+2\)\(1-p\)^\(m-n-2\) + ... + mCm \(p\)^m \(1-p\)^\() s
5 368 M
(m-m\) ) s
5 357 M
(all the terms vanish by zero multiplication except mCm \(p\)^m \(1-p\)^m which becomes:) s
5 346 M
(        mCm*1*0^0 ) s
5 335 M
(and by convention, 0^0 = 1, thereby converging to 1 while the Chernoff upper tail bound dec) s
5 324 M
(reases with n.) s
5 302 M
(--------------------------) s
5 291 M
(Hoeffding upper tail bound) s
5 280 M
(--------------------------) s
5 269 M
(For Bernoulli trials involving binomial distribution summation, Hoeffding Inequality can be) s
5 258 M
( applied for upper tail bound - https://en.wikipedia.org/wiki/Hoeffding%27s_inequality - de) s
5 247 M
(fined by:) s
5 236 M
(        P\(X > \(p+epsilon\)n\) <= exp\(-2*epsilon^2 * n\)) s
5 214 M
(If p+epsilon = 0.5 for halfway mark, epsilon = 1/2 -p.) s
5 203 M
(P\(X > n/2\) <= exp\(-2\(0.5-p\)^2*n\)) s
5 192 M
(For p=1, P\(X > n/2\) <= exp\(-n/2\) which for infinite n converges to 1.) s
5 170 M
(Thus tailbounds above are only less tight estimates and exact summation is better for p=0.5) s
5 159 M
( and 1. ) s
5 137 M
(--------------------------------------------------------------------------------) s
5 126 M
(There are two independent aspects to the P\(Good\) series - Goodness and Hardness:) s
5 115 M
(--------------------------------------------------------------------------------) s
5 104 M
(\(1\) Goodness of Voting:) s
5 93 M
(The convergence of the binomial coefficient summation series in RHS is the "goodness" side ) s
5 82 M
(of the voting expressed in terms of Noise sensitivity and Stability of each Voter's Boolean) s
5 71 M
( Function - whether the voters have exercised their franchise prudently to elect a "good" c) s
5 60 M
(hoice. If the Voter Boolean Functions are all balanced then by Kahn-Kalai-Linial lowerbound) s
5 49 M
( there are n/log\(n\) influential variables that control the decision of each Voter.) s
5 38 M
(\(2\) Hardness of Voting:) s
5 27 M
(The circuit for RHS\(e.g Boolean Function Composition\) and its Fourier polynomial expansion.) s
5 5 M
(Mix of Hardness and Goodness result in variety of BP* classes or P* classes \(if error is un) s
_R
S
%%Page: (10) 10
%%BeginPageSetup
_S
18 36 translate
/pagenum 10 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(bounded\). Goodness is related to Noise Sensitivity and Stability. Probabilistic Hardness is) s
5 731 M
( due to pseudorandomness. Are Goodness and Pseudorandomness related? Yes, because Noise Sen) s
5 720 M
(sitivity occurs when there is a correlation between two strings with flips. Correlation int) s
5 709 M
(urn occurs when flips are pseudorandom. Connection between Stability, Fourier coefficients ) s
5 698 M
(and pseudorandom flip probability are expressed in \(16\) and \(20\) below \(Plancherel's theore) s
5 687 M
(m\).) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(----------------------) s
5 643 M
(\(*IMPORTANT*\) Noise Stability, Noise Sensitivity and Complexity Class BPP \(error in voting\)) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(----------------------) s
5 610 M
(In all points in this document, an assumption is made that Noise Stability and BPP are equi) s
5 599 M
(valent notions. Is this valid? A language L is in BPP if for x in L there exists a Turing M) s
5 588 M
(achine that accepts x and outputs 1 with bounded probability \(e.g 2/3\) and if x not in L, r) s
5 577 M
(ejects x and outputs 0 with bounded probability \(e.g 1/3\). Following table illustrates all ) s
5 566 M
(possible scenarios and where BPP and Noise Stability fill-in \(x/e is correlated, flipped ve) s
5 555 M
(rsion of x\):) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(------) s
5 522 M
(        x                               |    f\(x\) = f\(x/e\)      |       f\(x\) != f\(x/e\) Nois) s
5 511 M
(e    |) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(------) s
5 478 M
(x in L, x/e in L                        |       No error        |       Error              ) s
5 467 M
(     |) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(------) s
5 434 M
(x in L, x/e not in L                    |       Error           |   No error if f\(x\)=1,f\(x/) s
5 423 M
(e\)=0 |) s
5 412 M
(                                        |                       |   else Error             ) s
5 401 M
(|) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(------) s
5 368 M
(x not in L, x/e in L                    |       Error           |   No error if f\(x\)=0,f\(x/) s
5 357 M
(e\)=1 |) s
5 346 M
(                                        |                       |   else Error             ) s
5 335 M
(|) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(------) s
5 302 M
(x not in L, x/e not in L                |       No error        |      Error               ) s
5 291 M
(|) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(------) s
5 247 M
(Third column of the table relates Noise Sensitivity and BPP - it subdivides the Noise Sensi) s
5 236 M
(tivity into 4 probable scenarios. Hence Noise Sensitivity overlaps BPP - explains one half ) s
5 225 M
(of the error. Even after a circuit is denoisified i.e third column is removed, it can still) s
5 214 M
( be in BPP due to the second column possibilities above. Noise sensitivity handles only hal) s
5 203 M
(f the possibilities in the above table for output noise. The second and third rows in secon) s
5 192 M
(d column represent noise in input where the circuit doesn't distinguish inputs correctly \(f) s
5 181 M
(alse positives and false negatives\). This requires derandomization. Thus error-free decisio) s
5 170 M
(n making depends on both denoisification and derandomization. A Turing machine that compute) s
5 159 M
(s all 8 possibilities in the table above without error is 100% perfect decision maker. In t) s
5 148 M
(erms of probability:) s
5 137 M
(        Probability of Good Decision = Input noise stability \(second column\) + Output noise) s
5 126 M
( stability \(third column\)) s
5 115 M
(which can also be stated as:) s
5 104 M
(        Probability of Good Decision = 1-\(Probability of False positives + Probability of F) s
5 93 M
(alse negatives\)) s
5 71 M
(Above is a better ,rather ideal, error probability measure that can be substituted in P\(Goo) s
5 60 M
(d\) RHS binomial distribution summation because it accounts for all possible scenarios of er) s
5 49 M
(rors. Presently, P\(Good\) binomial summation depends only on output noise sensitivity. Compl) s
5 38 M
(exity literature doesn't yet appear to have the theoretical notion of input noise counterpa) s
5 27 M
(rt of output noise sensitivity for boolean functions\(e.g what is the fourier theoretic esti) s
5 16 M
(mation of false positivity similar to the Plancherel version of noise stability?\). Second c) s
5 5 M
(olumn input noise can be written as TotalError-[f\(x\) != f\(x/e\)] where TotalError<=1. Probab) s
_R
S
%%Page: (11) 11
%%BeginPageSetup
_S
18 36 translate
/pagenum 11 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (11) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ility of Good Decision is sum of conditional probabilities of these 8 possibilities in the ) s
5 731 M
(table:) s
5 720 M
(        Probability of Good Decision = Pr\(f\(x\)=f\(x/e\) / x in L, x/e in L\)*Pr\(x in L, x/e in) s
5 709 M
( L\) +) s
5 698 M
(                                       Pr\(f\(x\)!=f\(x/e\) / x in L, x/e in L\)*Pr\(x in L, x/e i) s
5 687 M
(n L\) +) s
5 676 M
(                                        ...) s
5 665 M
(                                       Pr\(f\(x\)!=f\(x/e\) / x not in L, x/e not in L\)*Pr\(x not) s
5 654 M
( in L, x/e not in L\)) s
5 643 M
(Computation of the above conditional probability summation further confounds the estimation) s
5 632 M
( of voter decision error in Judge Boolean Functions.) s
5 610 M
(In other words, a precise estimate of voter or voting error from table above which related ) s
5 599 M
(BP* complexity class and Boolean Noise Sensitivity:) s
5 588 M
(        Probability of Bad Decision =  NoiseSensitivity - {Pr\(f\(x\)=1, f\(x/e\)=0\)/x in L, x/e) s
5 577 M
( not in L}) s
5 566 M
(                                                        - {Pr\(f\(x\)=0, f\(x/e\)=1\)/x not in L,) s
5 555 M
( x/e in L}) s
5 544 M
(                                                        + {Pr\(f\(x\)=f\(x/e\)\)/x in L, x/e not ) s
5 533 M
(in L}) s
5 522 M
(                                                        + {Pr\(f\(x\)=f\(x/e\)\)/x not in L, x/e ) s
5 511 M
(in L}) s
5 500 M
(which may be more or less than NoiseSensitivity depending on cancellation of other conditio) s
5 489 M
(nal probability terms. This is the error term that) s
5 478 M
(has to be substituted for each voter decision making error. Because of this delta, NoiseSen) s
5 467 M
(sitivity \(and NoiseStability\) mentioned everywhere in this document in P\(Good\) binomial sum) s
5 456 M
(mation and majority voting circuit is indeed NoiseSensitivity \(and NoiseStability\) \(+ or -\)) s
5 445 M
( delta. Previous probability coalesces Noise and Error into one expressible quantity - i.e ) s
5 434 M
(denoisification + derandomization.) s
5 412 M
(When Probability of Bad Decision is 0 across the board for all voters, the Pr\(Good\) series ) s
5 401 M
(converges to 100% and previous identity can be equated to zero and NoiseSensity is derived ) s
5 390 M
(as:) s
5 379 M
(        NoiseSensitivity = {Pr\(f\(x\)=1, f\(x/e\)=0\)/x in L, x/e not in L}) s
5 368 M
(                           {Pr\(f\(x\)=0, f\(x/e\)=1\)/x not in L, x/e in L}) s
5 357 M
(                           - {Pr\(f\(x\)=f\(x/e\)\)/x in L, x/e not in L}) s
5 346 M
(                           - {Pr\(f\(x\)=f\(x/e\)\)/x not in L, x/e in L}) s
5 324 M
(Above matrix of 8 scenarios and identity above give somewhat a counterintuitive and startli) s
5 313 M
(ng possibility that NoiseSensitivity of a voter's decision boolean function can be non-zero) s
5 302 M
( despite the convergence of Pr\(Good\) Majority Voting binomial series when some error terms ) s
5 291 M
(do not cancel out in previous expression. This implies that there are fringe, rarest of rar) s
5 280 M
(e cases where voting can be perfect despite flawed decision boolean functions.) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(------) s
5 225 M
(Hastad Switching Lemma, P\(Good\) Majority Voting circuit and Election Approximation or Forec) s
5 214 M
(asting) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(------) s
5 181 M
(Hastad Switching Lemma for circuit of width w and size s with probability of random restric) s
5 170 M
(tion p for each variable states the inequality:) s
5 159 M
(   Pr[DecisionTree\(f/restricted\) > k ] <= \(constant*p*w\)^k ) s
5 148 M
(where p is a function of width w and p is proportional to 1/w. In forecasting, a sample of ) s
5 137 M
(voters and their boolean functions are necessary. If the Majority circuit is PH=DC\(variable) s
5 126 M
(s are common across voters\) or AC\(variables are not so common across voters\), the sampling ) s
5 115 M
(algorithm pseudorandomly chooses a subset from first layer of the circuit's fanin and appli) s
5 104 M
(es random restriction to those Voters' Boolean Circuits which abides by above inequality. T) s
5 93 M
(he rationale is that probability of obtaining required decision tree depth decreases expone) s
5 82 M
(ntially \(RHS mantissa < 1\). Thus the forecast is a 3-phase process:) s
5 71 M
(\(1\) Pseudorandomly choose subset of Voter Boolean Functions in the first layer of the circu) s
5 60 M
(it - This is also a random restriction) s
5 49 M
(\(2\) Randomly Restrict variables in each boolean circuit to get decision trees of required d) s
5 38 M
(epth if voters reveal their blackbox boolean functions) s
5 27 M
(\(3\) Simulated Voting \(and a property testing\) on the restricted boolean functions subset ac) s
5 16 M
(curacy of which is a conditional probability function of \(1\) and \(2\). This could be repetit) s
5 5 M
(ive random restrictions of \(2\) also.) s
_R
S
%%Page: (12) 12
%%BeginPageSetup
_S
18 36 translate
/pagenum 12 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(\(1\) and \(2\) are random restrictions happening in 2 different layers of the circuit - amongs) s
5 720 M
(t voters and amongst variables for each voter .) s
5 698 M
(Alternatively if subset of voters reveal their votes \(1 or 0\) in opinion polls then the abo) s
5 687 M
(ve becomes a Learning Theory problem \(e.g. PAC learning, Learning Juntas or oligarchy of va) s
5 676 M
(riables that dominate\) - how to learn the boolean function of the voters who reveal their v) s
5 665 M
(otes in a secret ballot and extrapolate them to all voters. This is opposite of \(1\),\(2\),\(3\)) s
5 654 M
( and the most likely scenario as voters hold back their decision making algorithms usually.) s
5 643 M
(  From Linial-Mansour-Nisan theorem , class of boolean functions of n variables with depth-) s
5 632 M
(d can be learnt in O\(n^O\(logn^d\)\) with 1/poly\(n\) error. From Hastad Switching Lemma, Parsev) s
5 621 M
(al spectrum theorem \(sum of squares of fourier coefficients\) and LMN theorem , for a random) s
5 610 M
( restriction r, the fourier spectrum is e-concentrated upto degree 3k/r where k is the deci) s
5 599 M
(sion tree depth of the restriction. For a function g that approximates the above majority+S) s
5 588 M
(AT voting circuit f, the distance function measures the accuracy of approximation. ) s
5 566 M
(An interesting parallel to election approximation is to sample fourier spectrum of boolean ) s
5 555 M
(functions of a complexity class C for each voter.\(This seems to be an open problem - http:/) s
5 544 M
(/cstheory.stackexchange.com/questions/17431/the-complexity-of-sampling-approximately-the-fo) s
5 533 M
(urier-transform-of-a-boolean-fu\) . Essentially this implies complexity of approximating a v) s
5 522 M
(oter's boolean function in complexity class C by sampling the fourier coefficients of its s) s
5 511 M
(pectrum and hence election forecasting is C-Fourier-Sampling-Hard.) s
5 489 M
(Points \(53.1\) and \(53.2\) define a Judge Boolean Function with TQBF example that is PSPACE-c) s
5 478 M
(omplete. Each voter in RHS of P\(Good\) has such a TQBF that is input to Majority circuit. TQ) s
5 467 M
(BF is also AP-hard where AP is the set of all languages recognized by an alternating turing) s
5 456 M
( machine \(ATM\) with alternating forall and thereexists states, and it is known that PSPACE=) s
5 445 M
(AP \(http://people.seas.harvard.edu/~salil/cs221/spring10/lec6.pdf\).) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(----------) s
5 401 M
(\(*IMPORTANT*\) Boolean Function Composition \(BFC\) and Majority+SAT voting circuit) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(----------) s
5 368 M
(Boolean Function Composition is described in detail at [AvishayTal] Section 2.3 - http://ec) s
5 357 M
(cc.hpi-web.de/report/2012/163/ - which is defined as f*g = f\(g\(x\)\) and the sensitivity and ) s
5 346 M
(complexity measures of BFC are upperbounded by products of corresponding measures. Majority) s
5 335 M
( Voting circuit for P\(Good\) Binomial summation can be formulated as composition of two func) s
5 324 M
(tions - Majority and SAT i.e Voters' SAT outputs are input to Majority \(or\) Majority*SAT = ) s
5 313 M
(Majority\(SAT1, SAT2,...,SATn\). Hence sensitivity of this composition is upperbounded by sen) s
5 302 M
(sitivity\(MAJn\)*max\(sensitivity\(SATi\)\)  which becomes the "sensitivity of complete electorat) s
5 291 M
(e" . This has a direct bearing on the error probability of voter decision in P\(Good\) binomi) s
5 280 M
(al summation - the psuedorandom choice error probability or dictator boolean function sensi) s
5 269 M
(tivity in LHS and electorate sensitivity obtained from previous composition in RHS should b) s
5 258 M
(e equal in which scenario LHS achieves what RHS does \(or\) there is a PH or EXP collapse to ) s
5 247 M
(P. Circumeventing this collapse implies that these two sensitivity measures cannot be equal) s
5 236 M
( and either Dictator/PRG choice or Majority Voting is better over the other  - a crucial de) s
5 225 M
(duction. Dictator boolean function has a sensitivity measure n \(all variables need to be fl) s
5 214 M
(ipped in worst case as function depends on only one variable\) while the Majority*SAT compos) s
5 203 M
(ition is a maximum of products of 2 sensitivities. Counterintuitively, RHS electorate sensi) s
5 192 M
(tivity can be larger than LHS as there is no SAT composition in Dictator boolean function. ) s
5 181 M
(But the convergence of P\(Good\) binomial coefficient series to 1 when p=1 does not rule out ) s
5 170 M
(the possibility of these two sensitivity measures being equal and when it happens the Stabi) s
5 159 M
(lity is 1 and NoiseSensitivity is 0 on both sides \(assumption: NoiseSensitivity for LHS and) s
5 148 M
( most importantly RHS are computable and have same product closure properties under composi) s
5 137 M
(tion like other sensitivity measures\).) s
5 104 M
([) s
5 93 M
(Quoting Corollary 6.2 in http://eccc.hpi-web.de/report/2012/163/ for inclusions of complexi) s
5 82 M
(ty measures:) s
5 71 M
(                "... C\(f\) \342\\211\244 D\(F\) \342\\211\244 bs\(f\) \302\267 deg\(f\) \342\\211\244 deg\(f\)^3 ..." ) s
5 60 M
(]) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(----) s
5 16 M
(Noise Sensitivity and Probability of Goodness in P\(Good\) LHS and RHS - Elaboration on previ) s
5 5 M
(ous) s
_R
S
%%Page: (13) 13
%%BeginPageSetup
_S
18 36 translate
/pagenum 13 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(----) s
5 720 M
(LHS of P\(Good\):) s
5 709 M
(--------------) s
5 698 M
(\(1\) Depends either on a natural \(psuedo\)random process or a Dictator Boolean Function that ) s
5 687 M
(unilaterally decides outcome.) s
5 665 M
(\(2\) When error is zero, probability of good decision is 1 \(or\) Pr\(f\(x\) != f\(y\)\) is zero whe) s
5 654 M
(re x and y are correlated bit strings obtained by) s
5 643 M
(a bit flip. In other words Noise in input does not alter outcome. If NS is Noise Sensitivit) s
5 632 M
(y, probability of good outcome is 1-NS which is 1/2 + 1/2*Stability. ) s
5 610 M
(RHS of P\(Good\):) s
5 599 M
(---------------) s
5 588 M
(\(1\) Depends on the Noise Sensitivity of Boolean Function Composition - Maj\(n\)*SAT - Majn\(SA) s
5 577 M
(T1, SAT2,....,SATn\).) s
5 555 M
(\(2\) When error is zero, probability of good decision is 1 because nCn*\(1\)^n*\(1-1\)^\(0\) becom) s
5 544 M
(es 1 in summation and all other terms vanish. If each individual voter has different probab) s
5 533 M
(ility of good decision \(which is most likely in real world elections\) then it becomes Poiss) s
5 522 M
(on Probability Distribution trial. Throughout this document, only Binomial Distribution is ) s
5 511 M
(assumed and therefore NoiseStability of voters are assumed to be equal though the individua) s
5 500 M
(l voter boolean functions might differ. In a generic setting each voter can have arbitrary ) s
5 489 M
(decision function which need not be restricted to boolean functions. Throughout this docume) s
5 478 M
(nt, only boolean voter judging functions are assumed.) s
5 456 M
(\(3\) NoiseSensitivity is a fitting measure for voter error or voting error as it estimates t) s
5 445 M
(he probability of how a randomly changed input distorts outcome of an election. Randomly ch) s
5 434 M
(anged input could be wrong assignment by voter, wrong recording by the voting process etc.,) s
5 412 M
(\(4\) Perfect Voter has a SAT or Boolean Function that is completely resilient to correlation) s
5 401 M
( i.e Pr\(f\(x\) != f\(y\)\) = 0. The open question is: is it possible to find or learn such a Vot) s
5 390 M
(er Boolean Function. ) s
5 368 M
(\(5\) Brute Force exponential algorithm to find perfect voter is by property testing:) s
5 357 M
(   - For 2^n bit strings find correlation pairs with random flips - 2^n * \(2^n - 1\) such pa) s
5 346 M
(irs are possible.) s
5 335 M
(   - Test Pr\(f\(x\) != f\(y\)\)) s
5 324 M
(   - This is not a learning algorithm.) s
5 302 M
(\(6\) For perfect voter, probability p of good decision is 1-NS or 1/2+1/2*Stability and has ) s
5 291 M
(to be 1 which makes NS=0 and Stability=1.) s
5 269 M
(\(7\) Open Question: Is there a learning algorithm that outputs a Perfect Voter Decision Bool) s
5 258 M
(ean Function f such that NS=Pr\(f\(x\) != f\(y\)\) = 0 for all correlated pairs x,y? \(Or\) Can LHS) s
5 247 M
( and RHS of P\(Good\) be learnt with NS=0 and Stability=1.Such a function is not influenced b) s
5 236 M
(y any voting or voter errors. Majority is Stablest theorem implies that Majority function i) s
5 225 M
(s the most stable of all boolean functions with least noise, but still it does not make it ) s
5 214 M
(zero noise for perfect stability.) s
5 192 M
(Is there some other function stabler than stablest - answer has to be no - But there is an ) s
5 181 M
(open "Majority is the Least Stable" conjecture which asserts "yes" by [Benjamini-Kalai-Schr) s
5 170 M
(amm]:) s
5 159 M
(For Linear Threshold Functions \(majority, weighted majority et al\) f, Stability\(f\) >= Stabi) s
5 148 M
(lity\(Majn\). ) s
5 137 M
(Majority is Stablest theorem is for small-influence LTFs \(maximum influence of f < epsilon\)) s
5 126 M
(. If existence of perfect voter boolean function is proved it would be a generalization of ) s
5 115 M
(this conjecture. ) s
5 93 M
(An obvious corollary is that for stablest voting boolean function, majority is apt choice \() s
5 82 M
(or\) in the Majority voting circuit each voter has a majority as voter boolean function i.e ) s
5 71 M
(it is a boolean function composition of Majority*Majority = Maj\(Maj1,Maj2,Maj3,...,Majn\). T) s
5 60 M
(his composition of Maj*Maj is the stablest with least noise. This is also depth-2 recursive) s
5 49 M
( majority function mentioned in [RyanODonnell] - definition 2.6 in http://analysisofboolean) s
5 38 M
(functions.org/  and Majority Voting with constituencies in https://sites.google.com/site/ku) s
5 27 M
(ja27/IndepthAnalysisOfVariantOfMajorityVotingwithZFAOC_2014.pdf. Also the 2-phase document ) s
5 16 M
(merit algorithm in http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.pro) s
5 5 M
(ceedings.pdf is a variant of this. A voter with Majority as boolean function trivially deci) s
_R
S
%%Page: (14) 14
%%BeginPageSetup
_S
18 36 translate
/pagenum 14 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(des i.e if more than half of his/her variables are satisfied, outputs 1 without any fancy d) s
5 731 M
(ecision making or judging boolean function circuit \(e.g an EXP-complete adversarial simulat) s
5 720 M
(ion\). By far this is the stablest possible voting scheme unless [Benjamini-Kalai-Schramm] c) s
5 709 M
(onjecture is true or there exists a 100% noise stable percolation boolean function - derive) s
5 698 M
(d in \(17\) and \(18\) below.) s
5 676 M
(\(8\) Theorem 2.45 in http://analysisofbooleanfunctions.org/ is important which proves Stabil) s
5 665 M
(ity and NoiseSensitivity for infinite majority:) s
5 654 M
(    lt \(n->infinity, n odd\) Stability[Majn] = 2/pi*arcsin\(rho\) ) s
5 643 M
(    \(or\)) s
5 632 M
(    lt \(n->infinity, n odd\) NS[delta,Majn] = 2/pi*delta + O\(delta^1.5\) where delta is the p) s
5 621 M
(robability of correlation - flipping x to y. ) s
5 599 M
(\(9\) There are two random variables f\(x\)=f\(y\) and f\(x\) != f\(y\) with respective probabilities) s
5 588 M
(.) s
5 566 M
(\(10\) This implies for infinite electorate, error probability is \(an error that causes x to ) s
5 555 M
(become y with probability delta\): ) s
5 544 M
(    lt \(n->infinity, n odd\) NS[delta,Majn] = 2/pi*delta + O\(delta^1.5\) where delta is the p) s
5 533 M
(robability of correlation - flipping x to y. ) s
5 511 M
(\(11\) probability of good outcome = p = 1-NS:) s
5 500 M
(    p = 1 - lt \(n->infinity, n odd\) NS[delta,Majn] = 1 - 2/pi*delta - O\(delta^1.5\). ) s
5 478 M
(\(12\) If delta = 1:) s
5 467 M
(    lt \(n->infinity, n odd\) NS[delta,Majn] = 2/pi + O\(1\). ) s
5 456 M
(    \(and\)) s
5 445 M
(    probability of good outcome = 1-NS = 1/2+1/2*Stability = 1-2/pi-O\(1\).) s
5 423 M
(\(13\) In P\(Good\) RHS:) s
5 412 M
(--------------------) s
5 401 M
(If the error probability of voter is 0 and probability of good decision is 1 then binomial ) s
5 390 M
(summation becomes nCn*\(p\)^n*\(1-p\)^n = 1 and all other terms are zero. From \(11\) p can be 1 ) s
5 379 M
(only if delta is 0 or no correlation flips exist. This proves the obvious because commonsen) s
5 368 M
(sically votes are perfect iff there is no wrongdoing.) s
5 346 M
(\(14\) In P\(Good\) LHS:) s
5 335 M
(-------------------) s
5 324 M
(If error probability of dictator boolean function is 0 and p=1 then:) s
5 313 M
( p = 1 - NS\(DictatorFunction\)) s
5 302 M
(   = 1 - delta^n) s
5 291 M
(Similar to RHS p=1 iff delta=0 ) s
5 280 M
(Thus if there is no Noise on either side LHS=RHS \(or\) LHS is a P algorithm to RHS EXP or PH) s
5 269 M
(=DC. This depends on existence of perfect voter function defined in \(7\). This just gives a ) s
5 258 M
(counterexample when LHS can be as efficient as RHS and viceversa.) s
5 236 M
(\(15\) [Benjamini-Kalai-Schramm] theorem states the condition for a boolean function to be no) s
5 225 M
(ise sensitive:) s
5 214 M
(A boolean function is noise sensitive if and only if L2 norm \(sum of squares\) of influences) s
5 203 M
( of variables in f tends to zero.) s
5 192 M
(Therefore, for stability any voter boolean function in P\(Good\) RHS should not have the L2 n) s
5 181 M
(orm of influences to tend to zero.) s
5 159 M
(\(16\) "How much increasing sets are positively correlated" by [Talagrand] - http://boolean-a) s
5 148 M
(nalysis.blogspot.in/2007/03/how-much-are-increasing-sets-positively.html - defines the ineq) s
5 137 M
(uality \(Chang's Level-1 inequality\):) s
5 126 M
(        Weight\(f\) = sum_1_to_n\(fouriercoeff\(i\)\) <= O\(mean^2*1/log\(mean\)\) ) s
5 115 M
(where Weight of boolean function f in n variables is the sum of squares of n fourier coeffi) s
5 104 M
(cients and mean is Pr\(f\(x\)=1\)-\(Pr\(f\(x\)=-1\). This is alternatively defined as derivative of ) s
5 93 M
(stability of f wrt rho at rho=0. This measure intuitively quantifies how Pr\(f\(x\)=f\(y\)\) chan) s
5 82 M
(ges as x becomes increasingly correlated with y \(due to random flips\). Related to this, poi) s
5 71 M
(nt \(20\) is derived from Plancherel's theorem which equates E\(f\(x\)g\(x\)\) to summation\(f_fouri) s
5 60 M
(er\(x\)g_fourier\(y\)\). But stability is E\(f\(x\)f\(y/x-correlated\)\). The noise operator E\(f\(y\)\) i) s
5 49 M
(s introduced for each monomial in fourier series by which E\(monomial\(S\)\) = \(rho^|S|*fourier) s
5 38 M
(_f\(S\)\). E\(f\(y\)\) is thus equivalent to a new boolean function g\(x\) for which Plancherel form) s
5 27 M
(ula can be applied - E\(f\(x\)E\(f\(y\)\)\) = summation\(rho^|S|*fourier_f\(S\)^2\) = Noise stability. ) s
5 16 M
(First derivative of Stability wrt rho at rho=0 is Weight\(f\) - in other words this connects ) s
5 5 M
(pseudorandomness with stability of a boolean function in terms of fourier coefficients.) s
_R
S
%%Page: (15) 15
%%BeginPageSetup
_S
18 36 translate
/pagenum 15 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (15) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(\(17\) By Majority is Stablest Theorem if P\(Good\) RHS is a boolean function composition of Ma) s
5 720 M
(j*Maj=Majn\(Maj1,Maj2,...,Majn\) then its stability is derived as:) s
5 709 M
(   \(1-2/pi * arccos\(rho\)\)*\(1-2/pi * arccos\(rho\)\) assuming that stability of the composition) s
5 698 M
( is the product like other measures) s
5 687 M
(If the LHS of P\(Good\) is the Dictator Boolean Function its stability is \(rho\)^n \(because al) s
5 676 M
(l bits have to be flipped\). By equating the two stability measures both sides following exp) s
5 665 M
(ression results:) s
5 654 M
(   [cos\(pi/2*\(1-\(rho\)^n\)\)]^2 = rho) s
5 632 M
(For rho=0:) s
5 621 M
(---------) s
5 610 M
( [cos \(pi/2*\(1-0^n\)\)]^2 = 0 hence LHS=RHS) s
5 588 M
(For rho=1:) s
5 577 M
(---------) s
5 566 M
( [cos \(pi/2*\(1-1^n\)\)]^2 = 1 hence LHS=RHS) s
5 544 M
(But for rho=0.5:) s
5 533 M
(---------------) s
5 522 M
( arccos 1/sqrt\(2\) =  pi/2*\(1-0.5^n\)) s
5 511 M
( n = log\(1-2/pi*0.7071\)/log\(0.5\)) s
5 500 M
( n = 0.863499276 which is quite meaningless probably hinting that for uniform distribution ) s
5 489 M
(the parity size n is < 1. ) s
5 467 M
(\(18\) In RHS the P\(Good\) binomial coefficient summation in terms of Noise Sensitivities of e) s
5 456 M
(ach Voter SAT:) s
5 445 M
(nC0\(1-NS\)^0\(NS\)^n + nC1\(1-NS\)^1\(NS\)^\(n-1\) + nC2\(1-NS\)^2\(NS\)^\(n-2\) + ...) s
5 434 M
(Above summation should ideally converge to holistic Noise Sensitivity of the Boolean Functi) s
5 423 M
(on Composition of Maj*Maj described previously for stablest voting:) s
5 412 M
(       1/2 + 1/2*\(1-2/pi*arccos\(rho\)\)^2 = nC0\(1-NS\)^0\(NS\)^n + nC1\(1-NS\)^1\(NS\)^\(n-1\) + nC2\(1) s
5 401 M
(-NS\)^2\(NS\)^\(n-2\) + ...) s
5 379 M
(If each voter has boolean function with varied Noise Sensitivities, above becomes a Poisson) s
5 368 M
( Trial instead of Bernoulli. Above is a closed form for the goodness of voting expressed as) s
5 357 M
( the binomial coefficient summation which otherwise requires hypergeometric algorithms beca) s
5 346 M
(use for NS=a/b \(!=0.5\) summation becomes \(nC0*\(b-a\)^0a^n + nC1\(b-a\)^1\(a\)^\(n-1\) + nC2\(b-a\)^2) s
5 335 M
(\(a\)^\(n-2\) + ...\)/b^n and closed form is non-trivial as summation is asymmetric whereas the ) s
5 324 M
(case with NS=1/2 is symmetric with all coefficients being plain vanilla binomial coefficien) s
5 313 M
(ts. Previous identity equates Noise Sensitivity of Majority Voting Circuit in two versions:) s
5 302 M
( Boolean Function Composition and Majority with Oracle Voter SAT inputs.) s
5 280 M
(\(19\) There are classes of boolean functions based on percolation crossings \( http://arxiv.o) s
5 269 M
(rg/pdf/1102.5761.pdf - Noise Sensitivity of Boolean Functions and Percolation\) which decide) s
5 258 M
( if the paths \(left-to-right\) in a percolation random graph in which edges are created with) s
5 247 M
( a probability p, have a left-right crossing. Perturbed paths are analogous to correlated b) s
5 236 M
(it strings. [Russo-Seymour-Welsh] theorem states that the percolation crossing boolean func) s
5 225 M
(tions are non-degenerate i.e function depends on all variables \(quite intuitive as to find ) s
5 214 M
(out a left-right crossing entire path has to be analyzed\). Noise Stability Regime of the cr) s
5 203 M
(ossing events [page 68] answers the following question on noise stability of crossing event) s
5 192 M
(s:) s
5 170 M
(For epsilon=o\(1/n^2*alpha4\), Pr[fn\(sequence\)=fn\(sequence with epsilon perturbation\)] tends ) s
5 159 M
(to zero at infinity where alpha4 is the four-arm crossing event probability \(paths cross at) s
5 148 M
( a point on the percolation random graph creating four arms to the boundary from that point) s
5 137 M
(\). In terms of fourier expansion coefficients this is: summation\(fourier_coeff\(S\)^2\) tendin) s
5 126 M
(g to zero, |S| > n^2*alpha4. [Open question: Is such a percolation crossing the perfect vot) s
5 115 M
(ing boolean function required in \(7\) and does it prove BKS Majority is least stable conject) s
5 104 M
(ure? But this happens only when there are infinite number of Z^2 grid cells - n * n is infi) s
5 93 M
(nite]. If this is the only available perfect boolean function with 100% stability, [Benjami) s
5 82 M
(ni-Kalai-Schramm] conjecture is true and both LHS and RHS use only percolation as judge boo) s
5 71 M
(lean functions\(in compositions for each voter - Majority * Percolation\), then LHS=RHS by P\() s
5 60 M
(Good\) binomial summation convergence and LHS is class C algorithm for RHS PH-complete or EX) s
5 49 M
(P-complete algorithm where C is the hardness of LHS pseudorandom choice judge boolean funct) s
5 38 M
(ion. Also noise probability epsilon=o\(1/n^2*alpha4\) can have arbitrarily any value <= 1 dep) s
5 27 M
(ending on n and alpha4.) s
5 5 M
(Open question: If Percolation Boolean Functions are 100% noise stable \(as in infinite grid ) s
_R
S
%%Page: (16) 16
%%BeginPageSetup
_S
18 36 translate
/pagenum 16 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (16) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(previously\), what is the lowerbound of such boolean functions \(or\) how hard and in what com) s
5 731 M
(plexity class C should they be. This infinite version of percolation is a non-uniform polyn) s
5 720 M
(omial circuit class \(grid has n^2 coordinates\).) s
5 698 M
(\(*IMPORTANT* - this requires lot of reviewing - if correct places a theoretical limit on wh) s
5 687 M
(en stability occurs\) From Plancherel's theorem and stability relation mentioned in \(16\), su) s
5 676 M
(mmation\(rho^|S|*fourier_f\(S\)^2\) = Noise stability. When stability is 1, this summation is e) s
5 665 M
(qual to 1. In other words rho^|S1|*fourier_f\(S1\)^2 + rho^|S2|*fourier_f\(S2\)^2 + ...+ - 1 = ) s
5 654 M
(0 which is a univariate polynomial in rho as variable with n roots and degree n. Polynomial) s
5 643 M
( Identity Testing algorithms are required to ensure that this polynomial is non-zero \(coeff) s
5 632 M
(icients are non zero\). The real, positive, roots of this polynomial are the probabilities w) s
5 621 M
(here a boolean function is resilient to noise and 100% stable. It non-constructively shows ) s
5 610 M
(existence of such stable boolean functions. [Talagrand] proved existence of a random CNF wi) s
5 599 M
(th noise sensitivity > Omega\(1\) - described in http://www.cs.cmu.edu/~odonnell/papers/thesi) s
5 588 M
(s.pdf. Noise stability depends on huge [S] as evidenced by stability = summation\(rho^|S|*fo) s
5 577 M
(urier_coeff\(f\(S\)\)^2\). What this implies is that for any boolean function, 100% stability is) s
5 566 M
( attainable at only n points in [0,1]. In other words there is no boolean function which is) s
5 555 M
( 100% noise stable for all points of rho in [0,1]. It also implies that BKS majority is lea) s
5 544 M
(st stable conjecture is true at these points of rho. Since coefficients of this polynomial ) s
5 533 M
(are Fourier coefficients of the boolean function, roots of this polynomial i.e stability po) s
5 522 M
(ints are functions of Fourier coefficients.) s
5 500 M
(\(20\) Noise stability in terms of Fourier coefficient weights is defined as:) s
5 489 M
(        summation\( rho^k * W^k \) for all degree-k weights where W = summation\(fourier_coeff) s
5 478 M
(\(S\)^2\) for all |S|, S in [n]) s
5 456 M
(\(21\) Variant 1 of Percolation as a Judge boolean function is defined in 53.4 below which is) s
5 445 M
( in non-uniform NC1. If this is 100% noise stable judge boolean function for LHS and RHS no) s
5 434 M
(ise stability also converges to 100%, then there is a non-uniform NC1 circuit for RHS PH-co) s
5 423 M
(mplete or EXP-complete DC uniform circuit. This gives a non-uniform algorithm for an RHS un) s
5 412 M
(iform circuit. Variant 2 of Percolation in 53.5 as Judge boolean function is also in non-un) s
5 401 M
(iform NC1 subject to 100% noise stability condition. In 53.6 a sorting network based circui) s
5 390 M
(t is described for Percolation boolean function.) s
5 368 M
(\(22\) Also from Theorem 5.17 - [RyanODonnell] - http://analysisofbooleanfunctions.org/ - for) s
5 357 M
( any rho in [0,1], Stability of Infinite Majority is bounded as:) s
5 346 M
(        2/pi*arcsin \317\\201 \342\\211\244 Stab\317\\201[Majn] \342\\211\244 2/pi*arcsin \317\\201 + O\(1/\(sqrt\(1-rho) s
5 335 M
(^2\)*sqrt\(n\)\)\).) s
5 313 M
(\(23\) Peres' Theorem rephrases above bound for NoiseStability in terms of NoiseSensitivity f) s
5 302 M
(or class of uniform noise stable linear threshold functions f \(which includes Majority\):) s
5 291 M
(        NoiseSensitivity\316\264[f] \342\\211\244 O\(sqrt\(\316\264\)\)) s
5 269 M
(\(24\) From http://arxiv.org/pdf/1504.03398.pdf: [Boppana-Linial-Mansour-Nisan] theorem state) s
5 258 M
(s that influence of a boolean function f of size S and depth d is:) s
5 247 M
(        Inf\(f\) = O\(\(logS\)^d-1\)) s
5 225 M
(\(25\) [Benjamini-Kalai-Schramm] Conjecture \(different from Majority is least stable BKS conj) s
5 214 M
(ecture which is still open\) is the converse of above that states:) s
5 203 M
(Every monotone boolean function f can be epsilon \(e\) approximated by a circuit of depth d a) s
5 192 M
(nd of size exp\(\(K\(e\)*Inf\(f\)\)^1/\(d\342\\210\\2221\)\) for some constant K\(e\). This conjecture was d) s
5 181 M
(isproved by [ODonnell-Wimmer] and strengthened in http://arxiv.org/pdf/1504.03398.pdf.) s
5 159 M
(\(26\) Class of uniform noise stable LTFs in \(23\) are quite apt for Voter Boolean Functions i) s
5 148 M
(n the absence of 100% noise stable functions, which place an upperlimit on decision error. ) s
5 137 M
(Depth hierarchy theorem in http://arxiv.org/pdf/1504.03398.pdf separates on what fraction, ) s
5 126 M
(2 circuits of varying depths agree in outputs.) s
5 104 M
(----------------------) s
5 93 M
(Additional References:) s
5 82 M
(----------------------) s
5 71 M
(14.1 k-SAT and 3-SAT - http://cstheory.stackexchange.com/questions/7213/direct-sat-to-3-sat) s
5 60 M
(-reduction) s
5 49 M
(14.2 k-SAT and 3-SAT - http://www-verimag.imag.fr/~duclos/teaching/inf242/SAT-3SAT-and-othe) s
5 38 M
(r-red.pdf ) s
5 27 M
(14.3 Switching Lemma) s
5 16 M
(14.4 Donald Knuth - Satisfiability textbook chapter - http://www-cs-faculty.stanford.edu/~u) s
5 5 M
(no/fasc6a.ps.gz - Quoted excerpts:) s
_R
S
%%Page: (17) 17
%%BeginPageSetup
_S
18 36 translate
/pagenum 17 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (17) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(" ... Section 7.2.2.2 Satisfiability) s
5 731 M
(Satisfiability is a natural progenitor of every NP-complete problem\342\\200\\231) s
5 720 M
(Footnote:  At the present time very few people believe that P = NP. In other words, almost ) s
5 709 M
(everybody who has studied the subject thinks that satisfiability cannot be decided in polyn) s
5 698 M
(omial time.  The author of this book, however, suspects that N^O\(1\)\342\\200\\223step algorithms) s
5 687 M
( do exist, yet that they\342\\200\\231re unknowable.  Almost all polynomial time algorithms are ) s
5 676 M
(so complicated that they are beyond human comprehension, and could never be programmed for ) s
5 665 M
(an actual computer in the real world.  Existence is different from embodiment. ...") s
5 654 M
(14.5 Majority and Parity not in AC0 - www.cs.tau.ac.il/~safra/ACT/CCandSpaceB.ppt, http://w) s
5 643 M
(ww.math.rutgers.edu/~sk1233/courses/topics-S13/lec3.pdf) s
5 632 M
(14.6 Sampling Fourier Polynomials - http://cstheory.stackexchange.com/questions/17431/the-c) s
5 621 M
(omplexity-of-sampling-approximately-the-fourier-transform-of-a-boolean-fu ) s
5 599 M
(14.7 Kummer's theorem on binomial coefficient summation - quoted from Wikipedia:) s
5 588 M
("In mathematics, Kummer's theorem on binomial coeffients gives the highest power of a prime) s
5 577 M
( number p dividing a binomial coefficient. In particular, it asserts that givenintegers n \342) s
5 566 M
(\\211\245 m \342\\211\245 0 and a prime number p, the maximum integer k such that p^k divides the bino) s
5 555 M
(mial coefficient \\tbinom n m  is equal to the number of carries when m is added to n \342\\210) s
5 544 M
(\\222 m in base p.  The theorem is named after Ernst Kummer, who proved it in the paper Kumm) s
5 533 M
(er \(1852\). It can be proved by writing \\tbinom{n}{m} as \\tfrac{n!}{m! \(n-m\)!} and using Leg) s
5 522 M
(endre's formula.") s
5 500 M
(14.8 Summation of first k binomial coefficients for fixed n:) s
5 489 M
( - http://mathoverflow.net/questions/17202/sum-of-the-first-k-binomial-coefficients-for-fix) s
5 478 M
(ed-n) s
5 467 M
( - https://books.google.co.in/books?id=Tn0pBAAAQBAJ&pg=PA61&lpg=PA61&dq=summation+of+first+) s
5 456 M
(k+binomial+coefficients&source=bl&ots=sqB_iQweyS&sig=ye5TxmCkjP-Ud5JnWilMzqOkDjM&hl=en&sa=X) s
5 445 M
(&ved=0CFgQ6AEwCWoVChMI6rDEo9nVxwIVR0yOCh2AXgpz#v=onepage&q=summation%20of%20first%20k%20bin) s
5 434 M
(omial%20coefficients&f=false) s
5 423 M
(which imply bounds for the summation:) s
5 412 M
( - sum_k_2n\(2nCi\) = 2^2n - sum_0_k-1\(2nCi\)) s
5 401 M
( - 2^2n - sum_0_k-1\(2nCi\) >  2^2n - \(2nCk\) * 2^\(2n\) / 2*\(2nCn\) ) s
5 379 M
(14.9 Probabilistic boolean formulae - truth table with probabilities - simulates the Voter ) s
5 368 M
(Circuit SAT with errors) s
5 357 M
(http://www.cs.rice.edu/~kvp1/probabilisticboolean.pdf) s
5 335 M
(14.10 BPAC circuits \( = Probabilistic CNF?\)) s
5 324 M
(http://www.cs.jhu.edu/~lixints/class/nw.pdf) s
5 302 M
(14.11 Mark Fey's proof of infinite version of May's theorem for 2 candidate majority voting) s
5 291 M
( - Cantor set arguments for levels of infinities - ) s
5 280 M
(https://www.rochester.edu/college/faculty/markfey/papers/MayRevised2.pdf) s
5 258 M
(14.12 Upperbounds for Binomial Coefficients Summation - http://mathoverflow.net/questions/1) s
5 247 M
(7202/sum-of-the-first-k-binomial-coefficients-for-fixed-n - Gallier, Lovasz bounds - where ) s
5 236 M
(Lovasz bound is:) s
5 225 M
(            f\(n,k\)\342\\211\244 2^\(n\342\\210\\2221\)*exp\(\(n\342\\210\\2222k\342\\210\\2222\)^2/4\(1+k\342\\210\\222n\)\)) s
5 214 M
(for f\(n,k\) = sum_i_0_to_k\(nCi\). Proof by Lovasz at: http://yaroslavvb.com/upload/lovasz-pro) s
5 203 M
(of2.pdf) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(14.13 \(*IMPORTANT*\) Connections between Hypergeometric series and Riemann Zeta Function :) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(- http://matwbn.icm.edu.pl/ksiazki/aa/aa82/aa8221.pdf - This relation implies that:) s
5 137 M
(      - P\(good\) binomial coefficient infinite series summation \(and hence the Psuedorandom ) s
5 126 M
(Vs Majority Voting circuit\) which require Hypergeometric functions ) s
5 115 M
(      - and Complement Function circuit special case for RZF \(and hence the Euler-Fourier p) s
5 104 M
(olynomial for Riemann Zeta Function circuit\) ) s
5 93 M
(are deeply intertwined. Kummer theorem gives the p-adic number \(power of a prime that divid) s
5 82 M
(es an integer\) for dividing a binomial coefficient which relates prime powers in Euler prod) s
5 71 M
(uct RZF notation and Binomial coefficients in Majority voting summation. ) s
5 49 M
(Above implies that binomial coefficients can be written in terms of prime powers and vice-v) s
5 38 M
(ersa: P\(good\) series can be written as function of sum of prime powers and Euler Product fo) s
5 27 M
(r RZF can be written in terms of binomial coefficients. Also Euler-Fourier polynomial obtai) s
5 16 M
(ned for complement function circuit \(Expansion of http://arxiv.org/pdf/1106.4102v1.pdf desc) s
5 5 M
(ribed in 10\) can be equated to binomial coefficient summation. If these two apparently unre) s
_R
S
%%Page: (18) 18
%%BeginPageSetup
_S
18 36 translate
/pagenum 18 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (18) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(lated problems of Complexity-Theoretic Majority voting and Analytic-Number-Theoretic Rieman) s
5 731 M
(n Zeta Function are related then complexity lowerbound for some computational problems migh) s
5 720 M
(t hinge on Riemann Zeta Function - for example PH=DC circuit problems .  ) s
5 698 M
(----------------------------------------------------------------------------) s
5 687 M
(14.15 ACC circuits and P\(Good\) RHS circuit) s
5 676 M
(----------------------------------------------------------------------------) s
5 665 M
(ACC circuits are AC circuits augmented with mod\(m\) gates. i.e output 1 iff sum\(xi\) is divis) s
5 654 M
(ible by m. It is known that NEXP is not computable in ACC0 - http://www.cs.cmu.edu/~ryanw/a) s
5 643 M
(cc-lbs.pdf [RyanWilliams]. From \(129\) above the P\(good\) RHS can be an EXP circuit if the bo) s
5 632 M
(olean functions of the voters are of unrestricted depth. Thus open question is: can RHS of ) s
5 621 M
(P\(Good\) which is deterministic EXP, be computed in ACC0. [RyanWilliams] has two theorems. S) s
5 610 M
(econd theorem looks applicable to P\(Good\) RHS circuit i.e "E^NP, the class of languages rec) s
5 599 M
(ognized in 2^O\(n\) time with an NP oracle, doesn\342\\200\\231t have non-uniform ACC circuits of ) s
5 588 M
(2^n^o\(1\) size". Boolean functions are the NP oracles for this P\(Good\) Majority Voting EXP c) s
5 577 M
(ircuit if the variables are common across voters. Applying this theorem places strong super) s
5 566 M
(-exponential lowerbound on the size of the P\(Good\) majority voting circuit. ) s
5 544 M
(--------------------------------------------------------) s
5 533 M
(14.16. Infinite Majority as Erdos Discrepancy Problem) s
5 522 M
(--------------------------------------------------------) s
5 511 M
(Related to \(132\) - May's Theorem proves conditions for infinite majority with sign inversio) s
5 500 M
(ns {+1,-1} and abstention \(zero\). Erdos discrepancy problem which questions existence of in) s
5 489 M
(tegers k,d, and C in sequence of {+1,-1} such that sum_0_to_k\(x\(i*d\)\) > C and has been prov) s
5 478 M
(ed for C=infinite - [TerenceTao] - http://arxiv.org/abs/1509.05363. For spacing d=1, Erdos ) s
5 467 M
(Discrepancy Problem reduces to Infinite Majority and as C is proved to be infinite, it look) s
5 456 M
(s like an alternative proof of non-decrementality condition in Infinite version of May's Th) s
5 445 M
(eorem.) s
5 423 M
(14.17 Noise Sensitivity of Boolean Functions and Percolation - http://arxiv.org/pdf/1102.57) s
5 412 M
(61.pdf, www.ma.huji.ac.il/~kalai/sens.ps) s
5 390 M
(14.18 Binomial distributions, Bernoulli trials \(which is the basis for modelling voter deci) s
5 379 M
(sion making - good or bad - in P\(Good\) series\) - http://www.stat.yale.edu/Courses/1997-98/1) s
5 368 M
(01/binom.htm) s
5 346 M
(14.19 Fourier Coefficients of Majority Function -  http://www.contrib.andrew.cmu.edu/~ryano) s
5 335 M
(d/?p=877,  Majority and Central Limit Theorem - http://www.contrib.andrew.cmu.edu/~ryanod/?) s
5 324 M
(p=866) s
5 302 M
(14.20 Hastad's Switching Lemma - http://windowsontheory.org/2012/07/10/the-switching-lemma/) s
5 291 M
(, http://www.contrib.andrew.cmu.edu/~ryanod/?p=811#lemrand-restr-dt ) s
5 269 M
(14.21 Degree of Fourier Polynomial and Decision tree depth - http://www.contrib.andrew.cmu.) s
5 258 M
(edu/~ryanod/?p=547#propdt-spectrum \(degree of fourier polynomial < decision tree depth, int) s
5 247 M
(uitive to some extent as each multilinear monomial can be thought of as a path from root to) s
5 236 M
( leaf\)) s
5 214 M
(14.22 Judgement Aggregation \(a generalization of majority voting\) - Arriving at a consensus) s
5 203 M
( on divided judgements - http://arxiv.org/pdf/1008.3829.pdf.) s
5 181 M
(14.23 Noise and Influence - [Gil Kalai, ICS2011] - https://gilkalai.files.wordpress.com/201) s
5 170 M
(1/01/ics11.ppt) s
5 148 M
(14.24 Doctrinal Paradox \(or\) Discursive dilemma - Paradoxes in Majority voting where both Y) s
5 137 M
(es and No are possible in judgement aggregations - https://en.wikipedia.org/wiki/Discursive) s
5 126 M
(_dilemma) s
5 104 M
(----------------------------------------------------------) s
5 82 M
(15. \(FEATURE - DONE-Minimum Implementation using NetworkX algorithms\) Add Graph Search \(for) s
5 71 M
( example subgraph isomorphism, frequent subgraph mining etc.,\) for "inferring" a graph from) s
5 60 M
( dataset with edges as relations and nodes as entities\(astronomical or otherwise\).Reference) s
5 49 M
( survey of FSM algorithms: http://cgi.csc.liv.ac.uk/~frans/PostScriptFiles/ker-jct-6-May-11) s
5 38 M
(.pdf. The context of "Graph Search" includes deducing relationships hidden in a text data b) s
5 27 M
(y use of WordNet\(construction of wordnet subgraph by Definition Graph Recursive Gloss Overl) s
5 16 M
(ap etc.,\), mining graph patterns in Social Networks etc., At present a WordNet Graph Search) s
5 5 M
( and Visualizer python script that renders the definition graph and computes core numbers f) s
_R
S
%%Page: (19) 19
%%BeginPageSetup
_S
18 36 translate
/pagenum 19 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (19) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(or unsupervised classification \(subgraph of WordNet projected to a text data\) has been adde) s
5 731 M
(d to repository.) s
5 709 M
(16. \(FEATURE - DONE\) Use of already implemented Bayesian and Decision Tree Classifiers on a) s
5 698 M
(stronomical data set for prediction \(this would complement the use of classifiers for strin) s
5 687 M
(g mining\) - autogen_classifier_dataset/ directory contains Automated Classified Dataset and) s
5 676 M
( Encoded Horoscopes Generation code.) s
5 654 M
(17. \(FEATURE - DONE\) Added Support for datasets other than USGS EQ dataset\(parseUSGSdata.py) s
5 643 M
(\). NOAA HURDAT2 dataset has been parsed and encoded pygen horoscope string dataset has been) s
5 632 M
( autogenerated by parseNOAA_HURDAT2_data.py) s
5 610 M
(18. \(FEATURE - Minimum Functionality DONE-TwitterFollowersGraphRendering, Centrality\) \(Astr) s
5 599 M
(o\)PsychoSocialAnalysis  - Social Network Graph Analysis and Sentiment Analysis of Social Me) s
5 588 M
(dia and drawing inferences on Psychology and Human Opinion Mining in broader sense - for ex) s
5 577 M
(ample, how a social network forms, how opinions, edges and vertices appear over time , Rich) s
5 566 M
(-get-Richer in Random Network Erdos-Renyi Model - which by majority opinion seems to be a b) s
5 555 M
(ad model choice for Social Networking \(Do people flock to popular social groups?\), Bonacich) s
5 544 M
( Power Centrality \(a social prestige measure predating PageRank\) etc.,. Related to point 15) s
5 533 M
(.) s
5 522 M
(------------) s
5 511 M
(References:) s
5 500 M
(-----------) s
5 489 M
(18.1 Networks,Crowds,Markets - http://www.cs.cornell.edu/home/kleinber/networks-book/networ) s
5 478 M
(ks-book.pdf) s
5 467 M
(18.2 Introduction to Social Network Methods - http://faculty.ucr.edu/~hanneman/nettext/) s
5 456 M
(18.3 Bonacich Power Centrality - http://www.leonidzhukov.net/hse/2014/socialnetworks/papers) s
5 445 M
(/Bonacich-Centrality.pdf ) s
5 434 M
(18.4 Modelling Human Emotions - http://www.jmlr.org/proceedings/papers/v31/kim13a.pdf) s
5 423 M
(18.5 Depression Detection - http://www.ubiwot.cn/download/A%20Depression%20Detection%20Mode) s
5 412 M
(l%20Based%20on%20Sentiment%20Analysis%20in%20Micro-blog%20Social%20Network.pdf) s
5 401 M
(18.6 Market Sentiments - http://www.forexfraternity.com/chapter-4-fundamentals/sentiment-an) s
5 390 M
(alysis/the-psychology-of-sentiment-analysis) s
5 379 M
(18.7 Sentiment Analysis - http://www.lct-master.org/files/MullenSentimentCourseSlides.pdf) s
5 368 M
(18.8 Dream Analysis - http://cogprints.org/5030/1/NRC-48725.pdf) s
5 357 M
(18.9 Opinion Mining - http://www.cs.uic.edu/~liub/FBS/SentimentAnalysis-and-OpinionMining.p) s
5 346 M
(df) s
5 335 M
(18.10 Linked - [Albert Laszlo Barabazi] - [Ginestra Bianconi - http://www.maths.qmul.ac.uk/) s
5 324 M
(~gbianconi/Condensation.html] Bose gas theory of networks - Bose-Einstein Condensate is equ) s
5 313 M
(ivalent to evolution of complex networks - Page 101 on Einstein's Legacy - "Nodes in Networ) s
5 302 M
(k are energy levels of subatomic paritcles and Links across nodes are subatomic particles" ) s
5 291 M
(- "Winner takes it all" - particles occupying lowest energy correspond to people flocking t) s
5 280 M
(o a central node in social networks - This finding is from behaviour of large scale network) s
5 269 M
(s viz., WWW, Social networks etc., This Condensate theory has striking applications to Recu) s
5 258 M
(rsive Gloss Overlap Graph construction and using it for unsupervised classification based o) s
5 247 M
(n core numbers - each network and for that matter a graph constructed from text document is) s
5 236 M
( a macrocosmic counterpart of quantum mechanics.) s
5 225 M
(18.11 Small World Experiment and Six Degrees of Separation - [Stanley Milgram] - https://en) s
5 214 M
(.wikipedia.org/wiki/Small-world_experiment) s
5 203 M
(18.12 LogLog estimation of Degrees in Facebook graph - 3.57 Degrees of Separation - https:/) s
5 192 M
(/research.facebook.com/blog/three-and-a-half-degrees-of-separation/) s
5 170 M
(19. \(FEATURE - DONE-PAC Learnt Boolean Conjunction\) Implement prototypical PAC learning of ) s
5 159 M
(Boolean Functions from dataset. Complement Boolean Function construction described in http:) s
5 148 M
(//arxiv.org/abs/1106.4102 is in a way an example of PAC learnt Boolean Function - it is rat) s
5 137 M
(her C Learnt \(Correct Learning\) because there is no probability or approximation. Complemen) s
5 126 M
(t Boolean Function can be PAC learnt \(with upperbounded error\) as follows:) s
5 115 M
(        19.1 There are two datasets - dataset1 of size 2^n of consecutive integers and data) s
5 104 M
(set2 of first n-bit prime numbers of size 2^n) s
5 93 M
(        19.2 Each element of dataset1 is mapped to i-th bit of the corresponding prime numb) s
5 82 M
(er element in the dataset2. Boolean Conjunction is learnt for each of the i mappings.) s
5 71 M
(        19.3 Above step gives i probabilistic, approximate, correct learnt boolean conjunct) s
5 60 M
(ions for each bit of all the prime numbers. ) s
5 49 M
(        19.4 Reference: PAC Learning - http://www.cis.temple.edu/~giorgio/cis587/readings/p) s
5 38 M
(ac.html ) s
5 27 M
(        19.5 PAC Learnt Boolean Conjunction is an approximated Decision Tree.) s
5 16 M
(        19.6 PAC learning is based on Occam's Razor \(no unnecessary variables\)) s
5 5 M
(PAC Learning implementation for learning patterns in Binary encoded first 10000 Prime Numbe) s
_R
S
%%Page: (20) 20
%%BeginPageSetup
_S
18 36 translate
/pagenum 20 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (20) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(rs have been committed to AsFer repository \(Commit Notes 324\)) s
5 720 M
(20. \(FEATURE - DONE\) Integrate AstroInfer to VIRGO-KingCobra-USBmd Platform which makes it ) s
5 709 M
(an Approximately Intelligent Cloud Operating System Framework - a Cloud OS that "learns" ,") s
5 698 M
(decides" from datasets and "drives" using AstroInfer code. AsFer+USBmd+VIRGO+KingCobra inte) s
5 687 M
(grated cloud platform with machine learning features together have been christened as "Kris) s
5 676 M
(hna iResearch Intelligent Cloud Platform" or "NeuronRain". It has to be mentioned here that) s
5 665 M
( NeuronRain cloud differs from traditional cloud in following ways:) s
5 654 M
(        20.1 Usual cloud platforms support only application-application layer RPCs over an ) s
5 643 M
(existing operating system.) s
5 632 M
(        20.2 NeuronRain differs in that aspect by adding new cloud features \(with advanced ) s
5 621 M
(features in development\) like RPC, distributed kernel memory and network filesystem related) s
5 610 M
( system call clients and kernel modules kernelsocket-server-listeners into linux kernel \(a ) s
5 599 M
(fork-off in that respect\)) s
5 588 M
(        20.3 Cloud support within kernelspace has lot of advantages - low network latency b) s
5 577 M
(ecause of kernelspace-kernelspace cloud communication by kernel sockets, userspace to kerne) s
5 566 M
(lspace communication \(a userspace application like telnet can connect to a kernel socket li) s
5 555 M
(stener of a VIRGO driver in kernelspace\), userspace-userspace communication by kernel upcal) s
5 544 M
(ls to userspace from kernelspace.) s
5 533 M
(        20.4 Kernelspace-Kernelspace communication is a privileged mode privy to kernel alo) s
5 522 M
(ne and userspace applications shouldn't be able to access kernelspace socket data.) s
5 511 M
(        20.5 At present the data sent over kernel sockets is not encrypted which requires O) s
5 500 M
(penSSL in kernel. Kernel doesn't have OpenSSL support presently and it is not straightforwa) s
5 489 M
(rd to implement SSL handshake in NeuronRain cloud. But there are MD5 and other hashing libr) s
5 478 M
(aries \(e.g crypto\) available for encrypting data before before they are sent over cloud.) s
5 467 M
(        20.6 There are ongoing efforts to provide Transport Layer Security \(TLS\) in kernel ) s
5 456 M
(sockets which are not yet mainline. Hopefully kernel sockets in future kernel mainline vers) s
5 445 M
(ions would support AF_KTLS sockets and thus NeuronRain cloud implicitly is TLSed :) s
5 434 M
(                20.6.1 KTLS - [DaveWatson - Facebook] - https://lwn.net/Articles/666509/ an) s
5 423 M
(d https://github.com/ktls/af_ktls) s
5 412 M
(                20.6.2 IPSec for kernel sockets - [SowminiVaradhan - Oracle] - http://www.n) s
5 401 M
(etdevconf.org/1.1/proceedings/slides/varadhan-securing-tunneled-kenel-tcp-udp-sockets.pdf) s
5 390 M
(        20.7 Usual userspace-userspace network communication has following routing - user1-) s
5 379 M
(---kernel1----kernel2----user2 for two cloud nodes node1 and node2. NeuronRain cloud commun) s
5 368 M
(ication has following routings - user1----kernel1---kernel2, kernel1---kernel2, user1---ker) s
5 357 M
(nel1--kernel2--user2. With VFS filesystem API in kernel, both userspace and kernelspace mod) s
5 346 M
(e communication can be persisted in filesystem and better than an equivalent application la) s
5 335 M
(yer persistence mechanisms which require lot of internal kernel calls for disk writes. Thus) s
5 324 M
( kernel-kernel communication saves lot of user layer to kernel disk write invocations.) s
5 302 M
(21. \(FEATURE - DONE-Minimum Implementation\) Unsupervised Named Entity Recognition and Part-) s
5 291 M
(of-Speech tagging using Conditional Random Fields\(CRF\) and Viterbi path computation in CRF.) s
5 280 M
( Bayesian Network and Belief propagation might be implemented if necessary - as they are gr) s
5 269 M
(aphical models where graph edges are labelled with conditional probabilities and belief pot) s
5 258 M
(entials respectively and can be part of other larger modules. ) s
5 236 M
(###########################################################################################) s
5 225 M
(#) s
5 214 M
(A.      Design Notes on Mining Numerical Datasets) s
5 203 M
(###########################################################################################) s
5 192 M
(#) s
5 170 M
(22. \(FEATURE - DONE-Minimum Implementation\) Period Three theorem \(www.its.caltech.edu/~mati) s
5 159 M
(lde/LiYorke.pdf\) which is one of the earliest results in Chaotic NonLinear Systems, implies) s
5 148 M
( any data that has a periodicity of 3 can have larger periods. Fractals, Mandelbrot-Julia S) s
5 137 M
(ets have modelled natural phenomena. Thus finding if a data has periodicity or Chaos and if) s
5 126 M
( it has sensitive dependence on initial conditions \(for example logistic equations similar ) s
5 115 M
(to x\(n+1\) = kx\(n\)\(1-x\(n\)\)\) is a way to mine numerical data. Computation of Hausdorff-Besico) s
5 104 M
(vitch Dimension can be implemented to get Fractal Dimension of an uncountable set \(this has) s
5 93 M
( to be visualized as a fractal curve than set of points\). In addition to these, an Implemen) s
5 82 M
(tation of Chaotic PRG algorithms as described in https://sites.google.com/site/kuja27/Chaot) s
5 71 M
(icPRG.pdf?attredirects=0 and https://sites.google.com/site/kuja27/Analysis%20of%20a%20Rando) s
5 60 M
(mized%20Space%20Filling%20Algorithm%20and%20its%20Linear%20Program%20Formulation.pdf?attred) s
5 49 M
(irects=0 can be done.) s
5 27 M
(23. \(FEATURE - DONE\) Entropy of numerical data - Sum of -Pr\(x\)LogPr\(x\) for all possible out) s
5 16 M
(come probabilities for a random variable. This is already computed in Decision Tree Classif) s
5 5 M
(ier as impurity measure of a dataset. Also a python Entropy implementation for texts has be) s
_R
S
%%Page: (21) 21
%%BeginPageSetup
_S
18 36 translate
/pagenum 21 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (21) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(en added to repository - computes weighted average of number of bits required to minimum-de) s
5 731 M
(scribe the text.) s
5 698 M
(###########################################################################################) s
5 687 M
(##################################################) s
5 665 M
(===========================================================================================) s
5 654 M
(================================================) s
5 643 M
(\(THEORY\) DECIDABILITY OF EXISTENCE AND CONSTRUCTION OF COMPLEMENT OF A FUNCTION \(important ) s
5 632 M
(draft additions to http://arxiv.org/pdf/1106.4102v1.pdf - quite experimental, non-conventio) s
5 621 M
(nal and not necessarily correct\)) s
5 610 M
(===========================================================================================) s
5 599 M
(================================================) s
5 577 M
(\(*\)24. \(DONE\) COMPLEMENT OF A FUNCTION - Approximating or Interpolating with a Polynomial: ) s
5 566 M
(This is quite expensive and is undecidable for infinite sets. Better alternative is to appr) s
5 555 M
(oximate with Spline interpolant polynomials, for example, cubic splines which have less app) s
5 544 M
(roximation error. \(On a related note, algorithms described by the author \(that is, myself\) ) s
5 533 M
(in http://arxiv.org/pdf/1106.4102v1.pdf for construction of a complement of a function are ) s
5 522 M
(also in a way eliciting pattern in numerical data. The polynomial interpolation algorithm f) s
5 511 M
(or complement finding can be improved with Spline interpolants which reduce the error and D) s
5 500 M
(iscrete Fourier Transform in addition to Fourier series for the boolean expression. Adding ) s
5 489 M
(this as a note here since TeX file for this arXiv submission got mysteriously deleted and t) s
5 478 M
(he PDF in arXiv has to be updated somehow later.\). A test python script written in 2011 whi) s
5 467 M
(le at CMI for implementing the above is at: http://sourceforge.net/p/asfer/code/HEAD/tree/p) s
5 456 M
(ython-src/complement.py. Also Trigonometric Polynomial Interpolation which is a special cas) s
5 445 M
(e of Polynomial interpolation, has following relation to DFT X\(i\)s:) s
5 434 M
(        p\(t\) = 1/N [X0 + X1*e^\(2*pi*i*t\) + ... upto XN] and ) s
5 423 M
(        p\(n/N\) = xn) s
5 412 M
(Thus DFT amd interpolation coincide in the above.) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(----------------------------) s
5 368 M
(24a. Theorems on prime number generating polynomials - special case is to generate all prim) s
5 357 M
(es or integral complement of xy=z ) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(----------------------------) s
5 324 M
(Legendre - There is no rational algebraic function which always gives primes.) s
5 313 M
(Goldbach - No polynomial with integer coefficients can give primes for all integer values) s
5 302 M
(Jones-Sato-Wada-Wiens - Polynomial of degree 25 in 26 variables whose values are exactly pr) s
5 291 M
(imes exists) s
5 269 M
(Polynomial interpolation and Fourier expansion of the boolean function in http://arxiv.org/) s
5 258 M
(pdf/1106.4102v1.pdf probably would have non-integral coefficients due to the above.) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(-) s
5 214 M
(24b. Circuit construction for the complement function boolean DNF constructed in http://arx) s
5 203 M
(iv.org/pdf/1106.4102v1.pdf) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(-) s
5 170 M
(The DNF constructed for complement function has to be minimized \(through some lowerbound te) s
5 159 M
(chniques\) before it is represented as a circuit because the number of clauses could be expo) s
5 148 M
(nential. The circuit minimization problem has been shown to be NP-complete\(unpublished proo) s
5 137 M
(f by Masek, [GareyJohnson]\). The above complement function boolean DNF would yield a consta) s
5 126 M
(nt depth 2 circuit \(probably after minimization also\) with unbounded fanin. If the size of ) s
5 115 M
(the circuit is polynomial it is in AC \(=NC\). The size of the circuit depends on the boolean) s
5 104 M
( DNF constructed above which inturn depends on input complement set. Thus circuit depends o) s
5 93 M
(n input making it a Non-Uniform AC circuit.  Though complement function is undecidable as d) s
5 82 M
(escribed in http://arxiv.org/pdf/1106.4102v1.pdf, Non-uniform circuits "decide" undecidable) s
5 71 M
( languages by definition.) s
5 49 M
(Old draft of the complement function - https://sites.google.com/site/kuja27/ComplementOfAFu) s
5 38 M
(nction_earlier_draft.pdf?attredirects=0 describes this and proposes a name of co-TC0 as int) s
5 27 M
(eger multiplication is in TC0 \(threshold circuits\) which may not be true if the circuit siz) s
5 16 M
(e is super-polynomial. Super-polynomial size circuits are DC circuits allowing exponential ) s
5 5 M
(size. Assuming polynomial size the above may be named as "Non-uniform co-TC" for lack of be) s
_R
S
%%Page: (22) 22
%%BeginPageSetup
_S
18 36 translate
/pagenum 22 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (22) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(tter naming.) s
5 720 M
(Due to equivalence of Riemann Zeta Function and Euler's theorem - inverse\(infiniteproduct\(1) s
5 709 M
(-1/p\(i\)^z\)\) for all primes p\(i\) - gives a pattern in distribution of primes which is the Ri) s
5 698 M
(emann Hypothesis of Re\(nontrivial zeroes of RZF\)=0.5. Complement function for xy=z obtained) s
5 687 M
( by http://arxiv.org/pdf/1106.4102v1.pdf by polynomial interpolation or Fourier approximati) s
5 676 M
(on polynomial of the DNF boolean formula can thus be conjectured to have a strong relation ) s
5 665 M
(to RZF or even generalize RZF. In circuit parlance, the DNF boolean formula and its minimiz) s
5 654 M
(ed Non-uniform AC\(if polynomial sized\) circuit that outputs prime number bits, thus are rel) s
5 643 M
(ated to non-trivial zeroes of Riemann Zeta Function. Another conjecture that can be made is) s
5 632 M
( that if the real part of the non-trivial zeroes is 0.5 in RZF, then the Non-uniform circui) s
5 621 M
(t family constructed for the above complement function DNF should also have a pattern in th) s
5 610 M
(e circuit graph drawn - subgraphs of the circuit family of graphs have some common structur) s
5 599 M
(e property.) s
5 577 M
(Fourier polynomial of a boolean formula is of the form:) s
5 566 M
(        f\(x\) = Sigma_S\(fouriercoeff\(S\)parityfn\(S\)\)) s
5 544 M
(and is multilinear with variables for each input. S is the restriction or powerset of the b) s
5 533 M
(it positions.) s
5 511 M
(Thus if a prime number is b-bit, there are b fourier polynomials for each bit of the prime.) s
5 500 M
( Thus for x-th prime number fourier expression is,) s
5 489 M
(        P\(x\) = 1+2*fx1\(x\)+2^2*fx2\(x\).....+2^b*fxb\(x\)) s
5 478 M
(where each fxi\(\) is one of the b fourier expansion polynomials for prime bits.) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(----------------------------------------) s
5 434 M
(24c. Riemann Zeta Function written as Euler-Fourier Polynomial :) s
5 423 M
(------------------------------------------------------------) s
5 412 M
(Fourier polynomials for each prime can be substituted in Euler formula and equated to Riema) s
5 401 M
(nn Zeta Function:) s
5 390 M
(RZF = Inverse\(\(1-1/P\(x1\)^s\)\(1-1/P\(x2\)^s\)\)...ad infinitum-----------------------------------) s
5 379 M
(----------------------------------\(1\).) s
5 357 M
(Non-trivial complex zero s is obtained by,) s
5 346 M
(        P\(xi\)^s = 1) s
5 335 M
(        P\(xi\)   = \(1\)^\(1/s\)) s
5 324 M
(        1+2*fx1\(xi\)+2^2*fx2\(xi\).....+2^b*fxb\(xi\) = \(1\)^\(e^\(-i*theta\)/r\) after rewriting in ) s
5 313 M
(phasor notation s=r*e^\(i*theta\).-----------\(2\)) s
5 291 M
(Above links Fourier polynomials for each prime to roots of unity involving non-trivial zero) s
5 280 M
(es of Riemann Zeta Function in RHS. LHS is the xi-th prime number. Since LHS is real withou) s
5 269 M
(t imaginary part, RHS should also be real though exponent involves imaginary part. There ar) s
5 258 M
(e as many roots of unity in RHS as there are prime numbers. The radian is taninverse which ) s
5 247 M
(is semi-determined assuming RH with Re\(s\) = 0.5.) s
5 225 M
(LHS is multilinear with at most b variables for b bits of the prime number. A striking aspe) s
5 214 M
(ct of the above is that Fourier parity function is +1 or -1 and a lot of them might cancel ) s
5 203 M
(out in the above summed up polynomial in LHS after substitution and rewriting.) s
5 181 M
(If s is written as a+ic, then \(1\)^\(1/s\) = \(1\)^\(1/a+ic\) = \(1\)^\(\(a-ic\)/\(a^2+c^2\)\)) s
5 159 M
(If RH is true a=0.5 and above becomes, \(1\)^\(\(0.5-ic\)/\(0.25+c^2\)\).) s
5 137 M
(        1+2*fx1\(xi\)+2^2*fx2\(xi\).....+2^b*fxb\(xi\) = \(1\)^\(\(0.5-ic\)/\(0.25+c^2\)\) -----------\(3\)) s
5 115 M
(Thus imaginary part c has one-to-one correspondence to each prime. Non-trivial zeroes are u) s
5 104 M
(sually found using functional notation of RZF instead of the above - applying Analytic Cont) s
5 93 M
(inuation that extends the domain in steps to be exact. ) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(-------------------------------------------------) s
5 49 M
(24d. Delving deeper into \(1\) above which equates Riemann Zeta Function with Complement Func) s
5 38 M
(tion Fourier Polynomials substituted in Euler's infinite product \(Hereinafter referred to a) s
5 27 M
(s Euler-Fourier polynomial\) - Pattern in primes from above Euler-Fourier polynomial:) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(-------------------------------------------------) s
_R
S
%%Page: (23) 23
%%BeginPageSetup
_S
18 36 translate
/pagenum 23 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (23) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Finding pattern in distribution of primes is equivalent to finding pattern in above set of ) s
5 731 M
(prime bit circuits or fourier polynomials for each prime - The family of circuits for prime) s
5 720 M
(s above has to be mined for circuit DAG subgraph patterns which is more of machine learning) s
5 709 M
( than complexity \(there is almost no complexity theoretic reference to this aspect\). The se) s
5 698 M
(t of fourier polynomials can be mined for linear independence for example. \(1\),\(2\) and \(3\) ) s
5 687 M
(are multiple ways of expressing same relation between complement function boolean circuit a) s
5 676 M
(nd RZF.) s
5 654 M
(Similar to zeros of RZF, Fourier poynomial obtained from Euler's formula by substituting co) s
5 643 M
(mplement function prime bits fourier polynomials gives a very complex polynomial whose degr) s
5 632 M
(ee could be d*s in b variables, where d is the maximum degree in prime bit fourier polynomi) s
5 621 M
(als. In randomized setting, Schwartz-Zippel Lemma can be applied for finding an upperbound ) s
5 610 M
(for number of roots of this Fourier-Euler polynomial which is the traditional tool in Polyn) s
5 599 M
(omial Identity Testing. Using the lemma, number of roots of the above polynomial is <= d*s/) s
5 588 M
( |K| where K is the random finite subset of b variables in the boolean complement function.) s
5 577 M
( If |K| = b, then number of roots is upperbounded by d*s/b.[This is assuming rewriting as \() s
5 566 M
(2\) or \(3\)]. But degree is a complex number d*s \(It is not known if there is a Schwartz-Zipp) s
5 555 M
(el Lemma for complex degree\).  The roots of this Fourier-Euler polynomial should intuitivel) s
5 544 M
(y correspond to zeros of Riemann Zeta Function which probably gives a complexity theoretic ) s
5 533 M
(expression of Riemann Zeta Function \(than Analytic Number Theoretic\). This implies that the) s
5 522 M
(re should be complex roots also to the Euler-Fourier polynomial which itself is puzzling on) s
5 511 M
( what it means to have a complex number in boolean circuits. ) s
5 489 M
(Important thing to note is that what it means to be a zero of the Euler-Fourier polynomial ) s
5 478 M
([\(1\),\(2\) and \(3\)] which has complex degree variable and also boolean variables within each ) s
5 467 M
(clause. RZF just has the s in exponent. Thus Euler-Fourier polynomial is more generic and f) s
5 456 M
(ine-grained. But zeroes of this polynomial are both within the multilinear components and t) s
5 445 M
(he exponents instead of just in exponent in RZF. This might reveal more pattern than what R) s
5 434 M
(H predicts conjecturally. Moreover due to non-uniformity each Fourier polynomial component ) s
5 423 M
(substituted in Euler formula for each prime, is different.) s
5 401 M
(Sensitivity and Block sensitity of the above complement function circuit should also have a) s
5 390 M
( strong relation to prime distribution as sensitivity is the number of input bits or block ) s
5 379 M
(of bits that are to be flipped for change in value of the circuit\(prime bit is the value\) .) s
5 368 M
( For each Fourier polynomial of a prime bit above the sensitivity measure would differ and ) s
5 357 M
( the prime distribution is proportional to collective sensitivity of all the prime bit circ) s
5 346 M
(uit Fourier polynomials . Also the degree of approximating Fourier polynomial is lower boun) s
5 335 M
(ded by sensitivity \(www.cs.cmu.edu/~odonnell/papers/analysis-survey.pdf\).) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(---------) s
5 291 M
(24e. Arithmetic Circuit for Euler Product and RZF - Alternative formulation to Euler-Fourie) s
5 280 M
(r polynomials) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(---------) s
5 236 M
(Instead of a boolean circuit above can be an arithmetic circuit \(with * and + gates with el) s
5 225 M
(ements of some field as inputs to these\) alternatively which is useful in representing poly) s
5 214 M
(nomials. The division in the above Euler product can be replaced by the transform f/g = f/\() s
5 203 M
(1-\(1-g\)\) = f*\(1+\(1-g\)+\(1-g\)^2+...\) by geometric series expansion. This is how division is i) s
5 192 M
(mplemented using powering and hence multiplication in NC circuits. Above Euler product can ) s
5 181 M
(be represented as a depth 3 Pi-Sigma-Pi ----  * for product of each prime clause, + for sub) s
5 170 M
(traction within each clause, * for raising \(1/p\) to power s ---- circuit assuming 1/p. Powe) s
5 159 M
(ring with complex exponent s requires representing s as a 2*2 matrix M\(s\) where a and b are) s
5 148 M
( real and imaginary parts of s:) s
5 137 M
(        ) s
5 126 M
(        M\(s\) =  | a  -b|) s
5 115 M
(                | b   a|) s
5 93 M
(Thus p^s can be written as p^M\(s\) with matrix exponent. Rewriting this as e^\(M\(s\) ln p\) and) s
5 82 M
( expanding as series,) s
5 60 M
(        e^\(M\(s\) ln p\) = 1 + M ln p + M*M lnp^2/2! + ...) s
5 49 M
(and     1 - 1/p^s = 1 - e^\(-M\(s\) ln p\) = 1-\(1-M*ln p+ M*M ln p^2/2! - ...\) = M*ln p - M*M l) s
5 38 M
(n p^2/2! + ... \(alternating +,- terms ad infinitum\) ) s
5 16 M
(Thus each prime clause in the Euler product is written as an infinite summation of 2*2 matr) s
5 5 M
(ix products. Using the transform f/g above division 1/\(1-1/p^s\) for each prime clause in th) s
_R
S
%%Page: (24) 24
%%BeginPageSetup
_S
18 36 translate
/pagenum 24 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (24) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(e Euler product can be reduced to powering. Product gate at root multiplies all such prime ) s
5 731 M
(clauses. Obviously above circuit is exponential and probably is the lowerbound for this cir) s
5 720 M
(cuit. If the product is made finite then a non-uniform arithmetic circuit family is created) s
5 709 M
( depending on input advice and degree of the above polynomial varies. This is an alternativ) s
5 698 M
(e to Euler-Fourier polynomial obtained based on complement function boolean circuit. No Fou) s
5 687 M
(rier polynomial for prime bits is used here but prime power as such is input to arithmetic ) s
5 676 M
(gates.) s
5 654 M
(Instead of Euler formula, circuit for Riemann Zeta Function can be constructed with + gate ) s
5 643 M
(at the root and circuits for n^s \(or e^\(s ln p\)\) computation at the leaves using the above ) s
5 632 M
(series expansion.  For first n terms of RZF, the circuit represents the polynomial \(with s ) s
5 621 M
(replaced by the 2*2 matrix for the complex s\):) s
5 610 M
(        RZF\(n\) = n - M\(s\) * \(ln 2 + ln 3 + ...+ ln n\)/1! + M\(s\)^2 * \( ln 2^2 + ln3^2 +...+ ) s
5 599 M
(lnn^2\)/2! + ... + M\(s\)^n * \(ln2^n + ...+lnn^n\)/n!) s
5 577 M
(The reason for drawing above arithmetic circuit is to represent the Riemann Zeta Function i) s
5 566 M
(n complex plane as a circuit that depends on Matrix representation of complex number field\() s
5 555 M
(determinant of the matrix is the norm\) and relate the roots of it to non-trivial zeroes of ) s
5 544 M
(Riemann Zeta Function. The geometric intuition of Schwartz Zippel lemma is to find the prob) s
5 533 M
(ability of a point being on this circuit represented polynomial's surface. In the above cir) s
5 522 M
(cuit the variable is the Matrix M \(matrix representation for the zero s\). The imaginary par) s
5 511 M
(t is hidden within the 2*2 matrices. The degree of above polynomial is n and is univariate ) s
5 500 M
(in M. Non-uniform Sigma-Pi-Sigma Arithmetic circuit for above restricted version of Riemann) s
5 489 M
( Zeta Function can be constructed similar to the above for arbitrary n. ) s
5 467 M
(Using Taylor series expansion and Jordan Normal Form above can be written as a huge square ) s
5 456 M
(matrix.\(http://en.wikipedia.org/wiki/Matrix_function\). Taylor series for a real function f\() s
5 445 M
(x\) = f\(0\) + f'\(0\)/1! + f''\(0\)/2! + ... and 2*2 matrix for complex zero can be written in Jo) s
5 434 M
(rdan Normal Form as XYX^\(-1\) with Y being the Jordan block of diagonal fixed entries and su) s
5 423 M
(perdiagonal 1s. Evaluating f\(Y\) with Taylor expansion gives a square matrix. Thus Riemann Z) s
5 412 M
(eta Function has a matrix in Jordan Normal Form. Finding zeros of RZF is equivalent to solv) s
5 401 M
(ing system of equations represented as Jordan Nomal Form using Gauss-Jordan Elimination. Th) s
5 390 M
(e matrix is already upper triangular and can be equated to zero matrix. ) s
5 368 M
(Eigen values of Chaotic systems Wave modelling Random matrices \(matrix as random variable\) ) s
5 357 M
(have been shown to have a striking relation to zeros of RZF - Spacing of Random matrix eige) s
5 346 M
(nphases and RZF zeros have been conjectured to be identical \(Montgomery\). From complexity s) s
5 335 M
(tandpoint, the characteristic polynomial or the determinant of such Random Matrices can be ) s
5 324 M
(computed by determinant circuits which have polynomial size and polylog depth.) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(----) s
5 280 M
(24f. Can be ignored - quite Experimental - Different way to reduce the complex exponent in ) s
5 269 M
(\(1\) ) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(----) s
5 236 M
(From \(1\), P\(xi\)^s = 1.) s
5 225 M
(=> P\(xi\) ^ \(k+il\) = 1 where s=k+il) s
5 214 M
(=> P\(xi\)^k * P\(xi\)^\(il\) - 1 = 0) s
5 203 M
( P\(xi\)^k * [cos\(l*ln\(P\(xi\)\)\) + i*sin\(l*ln\(P\(xi\)\)\)] - 1 = 0      -----------------\(4\)) s
5 181 M
(Thus real and imaginary parts can be equated to zero independently as,) s
5 170 M
(        P\(xi\)^k * cos\(l*ln\(P\(xi\)\)\) = 1 ------------------------------------------\(5\)) s
5 148 M
(        P\(xi\)^k * sin\(l*ln\(P\(xi\)\)\) = 0 ------------------------------------------\(6\)) s
5 137 M
(        ) s
5 115 M
(From \(5\) and \(6\), it can be deduced that:) s
5 93 M
(        tan\(l*ln\(P\(xi\)\)\) = 0 ----------------------------------------------------\(7\)) s
5 71 M
(From \(7\), it can be inferred that Re\(s\)=k is not involved and PIT has to be done only on th) s
5 60 M
(e b+1 variables \(b bits in primes and the Im\(s\)=l\). This probably points to the fact that f) s
5 49 M
(or all primes, the prime distribution is independent of the Re\(s\). Series expansion of \(7\) ) s
5 38 M
(gives,) s
5 16 M
(        tan\(T\) = T + T^3/3 + 2*T^5/15 + .... = 0  where T = l*ln\(P\(xi\)\) ---------\(8\)) s
_R
S
%%Page: (25) 25
%%BeginPageSetup
_S
18 36 translate
/pagenum 25 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (25) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(l*ln\(P\(xi\)\) = 0 =>) s
5 720 M
(        l = 0 or ln\(P\(xi\)\) = 0) s
5 709 M
(        P\(xi\) = 1       ) s
5 698 M
(both of which can not hold. ) s
5 676 M
(From \(5\),) s
5 665 M
(        P\(xi\)^k = sec\(l*ln\(P\(xi\)\)\) ----------------------------------------------\(9\)) s
5 643 M
(if T = l*lnP\(xi\), e^\(T/l\) = P\(xi\)) s
5 621 M
(        P\(xi\)^k = e^\(kT/l\) = 1+T^2/2 + 5T^4/24 + 61*T^6/720 + 277T^8/8064 + ... \(expansion ) s
5 610 M
(of sec\) ---------- \(10\)) s
5 588 M
(        1+kT/l + \(kT/l\)^2/2! + \(kT/l\)^3/3! + .... =     1 + T^2/2 + 5T^4/24 + ....\(expansio) s
5 577 M
(n of e^\(KT/l\)\)  --------\(11\) ) s
5 544 M
(\(5\) can also be written as,) s
5 522 M
(        ln P\(xi\)^k      =       ln\(sec\(l*ln\(P\(xi\)\)\)) s
5 500 M
(        k       =       ln[sec\(l*ln\(P\(xi\)\)\)] / lnP\(xi\)  -----------------------------------) s
5 489 M
(------------------------\(12\)) s
5 467 M
(By RH k has to be 0.5 irrespective of RHS.) s
5 445 M
(Approximation of l:) s
5 434 M
(-------------------) s
5 423 M
(By assuming k=0.5 and Using series expansion of cos\(x\) - choosing only first two terms, l i) s
5 412 M
(s approximately,) s
5 390 M
(        P\(xi\) = 1/[cos\(l*lnP\(xi\)\)]^2                    -----------------------------------) s
5 379 M
(------------------------\(13\)) s
5 368 M
(        l = sqrt\(2\)*sqrt\(sqrt\(P\(xi\)\) - 1\) / ln \(P\(xi\)   -----------------------------------) s
5 357 M
(------------------------\(14\)) s
5 335 M
(More on \(7\):) s
5 324 M
(------------) s
5 313 M
(        tan\(l*ln\(P\(xi\)\)\) = 0 implies that l*ln\(P\(xi\)\) = n*pi for some integer n. ) s
5 302 M
(        ln\(P\(xi\)\) = n*pi/l) s
5 291 M
(        P\(xi\) = e^\(n*pi/l\) ----------------------------------------------------------------) s
5 280 M
(------------------------\(15\)) s
5 258 M
(Above equates the Fourier polynomial for xi-th prime in terms of exponent of e with Imagina) s
5 247 M
(ry part l of some RZF zero. It is not necessary that primes have one-one correspondence wit) s
5 236 M
(h zeros in the same order. All above just imply that it is true for some prime\(and its Four) s
5 225 M
(ier polynomial\) and some RZF zero that satisfy these identities.) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(------------------) s
5 181 M
(24g. Ramanujan Graphs, Ihara Zeta Function and Riemann Zeta Function and Special case of Co) s
5 170 M
(mplement Function) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(------------------) s
5 137 M
(A graph is Ramanujan graph if it is d-regular and eigen values of its adjacency matrix are ) s
5 126 M
(sqrt\(d-1\)*2 or d. Ihara zeta function similar to RZF is a Dirichlet series that is based on) s
5 115 M
( prime cycle lengths of a graph defined as ProductOf\(1/1-q^\(-s*p\)\) where s is a zero and p ) s
5 104 M
(prime for a \(q+1\)-regular graph. Thus a reduction is already available from RZF to a graph.) s
5 93 M
( The Ihara Zeta Function satisfies Riemann Hypothesis iff graph is Ramanujan - this follows) s
5 82 M
( from Ihara identity that relates Ihara Zeta Function and the adjacency matrix of a graph. ) s
5 71 M
(Thus proving above conjecture for Euler-Fourier polynomial of complement function for prime) s
5 60 M
(s boolean and arithmetic circuits family might need this gadget using prime cycles.) s
5 38 M
(If a set of p-regular graphs for all primes is considered,then Riemann Zeta Function can be) s
5 27 M
( derived \(using Ihara Zeta Function identity\) as a function of product of Ihara Zeta Functi) s
5 16 M
(ons for these graphs and a function of the determinants of adjacency matrices for these gra) s
5 5 M
(phs divided by an infinite product similar to Euler product with \(1+1/p^s\) clauses instead ) s
_R
S
%%Page: (26) 26
%%BeginPageSetup
_S
18 36 translate
/pagenum 26 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (26) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(of \(1-1/p^s\). This requires computing product of determinants of a function of adjancency m) s
5 731 M
(atrices for these graphs. A regular connected graph is Ramanujan if and only if it satisfie) s
5 720 M
(s RH. Zeroes of the individual Ihara zeta functions are also zeroes of this product for the) s
5 709 M
( set of graphs and hence for the RZF. Intuitively the product might imply set of all paths ) s
5 698 M
(of all possible lengths across these graphs. Determinant of the product of adjacent matrice) s
5 687 M
(s is product of determinants of the matrices and equating it to zero yields eigenvalues. Al) s
5 676 M
(l these graphs have same number of edges and vertices. The eigen values then are of the for) s
5 665 M
(m sqrt\(q^\(2-2a\)+q^\(2a\)+2q\) were s=a+ib for each of the regular graphs. The RHS of Ihara Zet) s
5 654 M
(a Function can be written as [\(1+1/q^s\)\(1-1/q^s\)]^[V-E] and the product gives the RZF and t) s
5 643 M
(he other series mentioned above. Eigen values can be atmost q.) s
5 621 M
([If an eigen value is t \(<= q\), then it can be derived that) s
5 610 M
(        q^s = q + \(or\) - sqrt\(q^2 -4t\) / 2) s
5 599 M
(where s=a+ib. Setting a=0.5 is creating a contradiction apparently  which is above divided ) s
5 588 M
(by sqrt\(q\) \(while equating real and imaginary parts for q^\(ib\) or e^\(ib*logq\)- needs to be ) s
5 577 M
(verified if this kind of derivation is allowed in meromorphic functions\).]) s
5 544 M
(Above and the Informal notes in https://sites.google.com/site/kuja27/RamanujanGraphsRiemann) s
5 533 M
(ZetaFunctionAndIharaZetaFunction.pdf?attredirects=0&d=1 can further be simplified as follow) s
5 522 M
(s to get RZF in terms of IZF identity.) s
5 500 M
(Disclaimer: It is not in anyway an attempted proof or disproof of RH as I am not an expert ) s
5 489 M
(in analytical number theory. Hence arguments might be elementary. Following was found seren) s
5 478 M
(dipitously as a surprise while working on special case of circuits for complement function ) s
5 467 M
(for primes and it does not have direct relation to complementation - Fourier polynomial for) s
5 456 M
( Complement Function generalizes Riemann Hypothesis in a sense. Moreover, Notion of complem) s
5 445 M
(enting a function is absent in mathematical literature I have searched so far except in mat) s
5 434 M
(hematical logic. Following are derived based on Ihara Identity of Ihara Zeta Function.[http) s
5 423 M
(s://lucatrevisan.wordpress.com/2014/08/18/the-riemann-hypothesis-for-graphs/#more-2824] for) s
5 412 M
( a prime+1 regular graph.) s
5 390 M
(\(1\) For some i-th prime+1 regular graph \(i.e q+1 regular graph where qi is prime\),) s
5 379 M
(                        [1+qi^-s]                               1) s
5 368 M
(        -----------------------------------------       = -------------- ) s
5 357 M
(        [zi\(s\)det\(I-A*qi^-s + qi^\(1-2s\)*I]^\(1/|V|-|E|\)       [1-qi^-s]) s
5 324 M
(\(2\) Infinite product of the above terms for all prime+1 regular graphs gives the RZF in rig) s
5 313 M
(ht in terms of) s
5 302 M
(Ihara Zeta Function Identities product on the left -  The infinite set of prime+1 regular g) s
5 291 M
(raphs relate to) s
5 280 M
(RZF zeros.) s
5 258 M
(\(3\) For non-trivial zeros s=a+ib,RZF in RHS is zero and thus either numerator product is ze) s
5 247 M
(ro or denominator product tends to infinity ) s
5 225 M
(\(4\) From Handshake Lemma, it can be derived that a q-regular graph with order n\(=|V| vertic) s
5 214 M
(es\) has) s
5 203 M
(q*n/2 edges \(=|E| edges\)) s
5 181 M
(\(5\) If numerator is set to zero in LHS, ) s
5 170 M
(                q^\(a+ib\) = -1) s
5 159 M
(and) s
5 148 M
(                cos\(blogq\) + isin\(blogq\) = -1/q^a which seems to give further contradiction) s
5 126 M
(\(6\) If denominator is set to infinity in LHS,) s
5 115 M
(        [z1*z2*.....det\(\)det\(\)....]^1/|V|-|E| = Inf ) s
5 104 M
(                        \(or\)) s
5 93 M
(        [z1*z2*.....det\(\)det\(\)....]^1/|E|-|V| = 0 ) s
5 71 M
(for some term in the infinite product of LHS which implies that) s
5 60 M
(        [z1*z2*.....det\(\)det\(\)....] = 0 which is described earlier above in the notes. ) s
5 38 M
(\(7\) More derivations of the above are in the notes uploaded in  handwritten preliminary dra) s
5 27 M
(fts at: ) s
5 16 M
(        \(7.1\) https://sites.google.com/site/kuja27/RZFAndIZF_25October2014.pdf?attredirects) s
5 5 M
(=0&d=1) s
_R
S
%%Page: (27) 27
%%BeginPageSetup
_S
18 36 translate
/pagenum 27 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (27) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        \(7.2\) http://sourceforge.net/p/asfer/code/HEAD/tree/python-src/ComplFunction_DHF_PV) s
5 731 M
(sNP_Misc_Notes.pdf) s
5 720 M
(        ) s
5 709 M
(\(8\) By equating the determinant in \(6\) above to zero, written notes in \(7\) derive values of) s
5 698 M
( s=a+ib for non-Ramanujan prime+1 regular graphs for the expressions in points \(1\) to \(6\) a) s
5 687 M
(bove. They seem to suggest that RH is true with elementary complex arithmetic without using) s
5 676 M
( any complex analysis, with or without any assumption on the eigenvalue surprisingly - assu) s
5 665 M
(ming q^s + q^\(1-s\) = v \(v can be set to any eigenvalue - can be atmost q+1 for the q+1-regu) s
5 654 M
(lar non-ramanujan graph\) and solving for s=a+ib - gives a=1/2 and thus for both ramanujan a) s
5 643 M
(nd non-ramanujan graphs as eigen value becomes irrelevant - needs lot of reviewing - becaus) s
5 632 M
(e it implies that graph formulation above of Riemann Hypothesis is true for all prime+1 reg) s
5 621 M
(ular graphs by applying Ihara Identity of Ihara Zeta Function and thus Riemann Hypothesis i) s
5 610 M
(s true. The choice of prime+1 regularity is just a contrived gadget to equate to Riemann Ze) s
5 599 M
(ta Function through an infinite product. Crucial fact is the independence of eigen value in) s
5 588 M
( the previous derivation whenever the graph regularity is prime+1, thus directly connecting) s
5 577 M
( prime numbers and real part of Riemann Zeta Function non-trivial zero.) s
5 555 M
(\(9\) Above doesn't look circular also because infinite product of characteristic polynomials) s
5 544 M
( - determinants - are independent of infinite product of Ihara Zeta Functions preceding the) s
5 533 M
(m in denominator - this happens only when the product z1*z2*... is not zero i.e when the gr) s
5 522 M
(aphs are non-ramanujan. The infinite product of determinants of the form det\(I-A\(qi\)^\(-s\)+\() s
5 511 M
(qi\)^\(1-2s\)I\) when solved for zero do not depend on eigenvalue and s is assumed nowhere. Ind) s
5 500 M
(ependence of eigen value implies all possible graphs. Further the last step is independent ) s
5 489 M
(of regularity q too. Had it been circular, the eigenvalue for Ramanujan graph should have o) s
5 478 M
(ccurred somewhere in the derivation throwing back to square one.) s
5 456 M
(\(10\) Expression in \(1\) for a prime+1 regular graph can also be equated to Euler-Fourier pol) s
5 445 M
(ynomial mentioned in \(24c\) per-prime term for each prime+1 regular graph - LHS is a graph w) s
5 434 M
(hile RHS is a fourier polynomial for boolean circuit for a prime - P\(xi\). Thus pattern in p) s
5 423 M
(rime polynomials in RHS are related to patterns in graphs on left:) s
5 412 M
(                        [1+qi^-s]                               1) s
5 401 M
(        -----------------------------------------       = -------------- ) s
5 390 M
(        [zi\(s\)det\(I-A*qi^-s + qi^\(1-2s\)*I]^\(1/|V|-|E|\)       [1-P\(xi\)^-s]) s
5 368 M
(\(11\) qi can be replaced with Fourier polynomial P\(xi\),and the above becomes:) s
5 357 M
(                [1-P\(xi\)^-2s] = [zi\(s\)det\(I-A*P\(xi\)^-s + P\(xi\)^\(1-2s\)*I]^\(1/|V|-|E|\)) s
5 346 M
(        \(or\)    [1-P\(xi\)^-2s]^\(|V|-|E|\) = [zi\(s\)det\(I-A*P\(xi\)^-s + P\(xi\)^\(1-2s\)*I]) s
5 324 M
(\(12\) LHS of \(11\) can be expanded with binomial series. Thus Euler-Fourier polynomial is coa) s
5 313 M
(lesced into Ihara identity to give Euler-Fourier-Ihara polynomial for a prime\(and hence cor) s
5 302 M
(responding prime+1 regular graph\). Partial Derivatives of the above polynomial look crucial) s
5 291 M
( in deciphering pattern in primes - for example doe\(s\)/doe\(P\(xi\)\). ) s
5 269 M
(\(13\) ACC circuits have support for mod\(m\) gates. Thus a trivial circuit for non-primality i) s
5 258 M
(s set of mod\(i\) circuits - 1,2,3,...,sqrt\(N\) - that output 1 to an OR gate up \(factor gates) s
5 247 M
( output 1\). This non-primality circuit is equivalent to complement of complement function c) s
5 236 M
(ircuit for xy=z described previously \(and it can be stated in its dual form also\).) s
5 214 M
(\(14\) The Fourier polynomial of a prime P\(xi\) is holographic in the sense that it has inform) s
5 203 M
(ation of all primes due to the multiplexor construction.) s
5 181 M
(\(15\) Without any assumption on Ihara and Riemann Zeta Functions, for any \(q+1\)-regular grap) s
5 170 M
(h for prime q, just solving for eigenvalue in det[-[A - I*\(q^s + q^\(1-s\)\)]] to get Real\(s\) ) s
5 159 M
(= 0.5 looks like an independent identity in itself where A is adj matrix of graph. It neith) s
5 148 M
(er requires Riemann Zeta Function nor Ihara Zeta Function to arrive at Real\(s\)=0.5.) s
5 126 M
(\(16\) In \(15\), even the fact that q has to be prime is redundant.  Just solving for q^s + q^) s
5 115 M
(\(1-s\) = some_eigen_value gives Real\(s\)=0.5. In such a scenario what the set {Imaginary\(s\)} ) s
5 104 M
(contains is quite non-trivial. It need not be same as {Imaginary\(RZF_zero\)}.) s
5 82 M
(\(17\) Assuming Real\(s\)=0.5 from 7.1 and 7.2, it can be derived with a little more steps that) s
5 71 M
( eigen_value = 2*sqrt\(q\)*cos\(b*log\(q\)\) - eigen value depends only on imaginary\(s\) and regul) s
5 60 M
(arity.) s
5 38 M
(\(18\) It is not known if {Imaginary\(RZF_zero\)} = {Imaginary\(s\)}. If not equal this presents ) s
5 27 M
(a totally different problem than RZF and could be a disjoint_set/overlap/superset of RZF ze) s
5 16 M
(roes.) s
_R
S
%%Page: (28) 28
%%BeginPageSetup
_S
18 36 translate
/pagenum 28 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (28) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\(19\) Maximum eigen value of \(q+1\)-regular graph is \(q+1\) and the infinite set {Imaginary\(s\)) s
5 731 M
(} can be derived from eigen_value=2*sqrt\(q\)*cos\(b*log\(q\)\) in \(17\) for infinite set of \(q+1\)) s
5 720 M
(-regular graphs.) s
5 698 M
(\(20\) An experimental python function to iterate through all {Imaginary\(s\)} mentioned in \(19) s
5 687 M
(\) supra has been included in complement.py. Because of the restriction that cos\(\) is in [-1) s
5 676 M
(,1], eigen_value <= 2*sqrt\(q\) which has a trivial value of q=1 when eigen_value=q+1.) s
5 654 M
(\(21\) \(SOME EXPERIMENTATION ON DISTRIBUTION OF PRIMES\) List of primes read by complement.py ) s
5 643 M
(is downloaded from https://primes.utm.edu/lists/. IharaIdentity\(\) function in complement.py) s
5 632 M
( evaluates Imaginary\(s\)=b=arccos\(v/\(2*sqrt\(q\)\)\)/log\(q\) by incrementing v by small steps in ) s
5 621 M
(a loop till it equals 2*sqrt\(q\). This allows v to be in the range [0,2*sqrt\(q\)] whereas Ram) s
5 610 M
(anujan graphs require it to be 2*sqrt\(q-1\) or q. Hence non-ramanujan graphs are also allowe) s
5 599 M
(d. Logs in testlogs/ print all Imaginary\(s\) iterations of this eigenvalues for all 10000 pr) s
5 588 M
(imes. arccos\(\) function returns radians which is a cyclic measure and hence can take x+2*y*) s
5 577 M
(pi where y=0,1,2,3,4,5,6,... which could be arbitrarily large infinite set. Logs print only) s
5 566 M
( x with y=0 and not all cycles. Prima facie visual comparison shows this set to be differen) s
5 555 M
(t from Imaginary\(RZF\) for x alone which could be inaccurate. Sifting through all cycles and) s
5 544 M
( verifying if these are indeed Im\(\) parts of RZF might be an arduous task and could be unde) s
5 533 M
(cidable too because two infinite sets have to be compared for equality. But theoretically t) s
5 522 M
(he Re\(\) part of \(2\) which is infinite product of \(1\) equivalent to Riemann Zeta Function is) s
5 511 M
( 0.5 for all while Im\(\) part is computationally intensive. Crucial evidence that comes out ) s
5 500 M
(of it is the possibility of cyclic values of radians in b=arccos\(v/\(2*sqrt\(q\)\)/log\(q\) which) s
5 489 M
( implies a fixed \(prime, eigenvalue\) ordered tuple correspond to infinitely many b\(s\) \(Im\(\)) s
5 478 M
( parts\). Thus 2*sqrt\(q\)*cos\(b*log\(q\)\) = eigen_value is a generating function mining pattern) s
5 467 M
( in distribution of primes. Rephrasing, b has generating function: b <= \(x + 2*y*pi\)/logq, ) s
5 456 M
(where 0 <= x <= pi/2. SequenceMining.py also has been applied to binary representation of f) s
5 445 M
(irst 10000 prime numbers \(Commit Notes 273 below\) which is learning theory way of finding p) s
5 434 M
(atterns in distribution in primes. Logs for the most frequent sequences in prime strings in) s
5 423 M
( binary have been committed in testlogs/. These binary sequences mined from first 10000 pri) s
5 412 M
(mes have been plotted in decimal with R+rpy2 function plotter. Function plot in decimal sho) s
5 401 M
(ws sinusoidal patterns in mined sequences with periodic peaks and dips as the length of seq) s
5 390 M
(uence increases i.e the mined sequences in prime binary strings periodically have leftmost ) s
5 379 M
(bits set to 1 and rightmost bits set to 1 and viceversa which causes decimals to vacillate ) s
5 368 M
(significantly. Primes are not regular and context-free languages which are known from forma) s
5 357 M
(l languages theory. The function doing complementation in complement.py can be translated t) s
5 346 M
(o Turing Machine by programming languages Brainfuck and Laconic which is equivalent to a la) s
5 335 M
(mbda function for complement.) s
5 313 M
(----------------------------------------------------) s
5 302 M
(24h. PAC Learning and Complement Function Construction) s
5 291 M
(----------------------------------------------------) s
5 280 M
(Complement Boolean Function construction described in http://arxiv.org/abs/1106.4102 is in ) s
5 269 M
(a way an example of PAC learnt Boolean Function - it is rather C Learnt \(Correct Learning\) ) s
5 258 M
(because there is no probability or approximation. Complement Boolean Function can be PAC le) s
5 247 M
(arnt \(with upperbounded error\) as follows:) s
5 236 M
(        - There are two datasets - dataset1 of size 2^n of consecutive integers and dataset) s
5 225 M
(2 of first n-bit prime numbers of size 2^n ) s
5 214 M
(        - Each element of dataset1 is mapped to i-th bit of the corresponding prime number ) s
5 203 M
(element in the dataset2. Boolean Conjunction is learnt for each of the i mappings \(PAC Lear) s
5 192 M
(ning Algorithm: http://www.cis.temple.edu/~giorgio/cis587/readings/pac.html\).) s
5 181 M
(        - Above step gives n probabilistic, approximate, correct learnt boolean conjunction) s
5 170 M
(s for each bit of all the 2^n prime numbers.) s
5 159 M
(        - An example PAC Boolean Conjunction Learner is at: http://sourceforge.net/p/asfer/) s
5 148 M
(code/HEAD/tree/python-src/PACLearning.py) s
5 126 M
(---------------------------------------------------------------------------------) s
5 115 M
(24i. Star Complexity and Complement Function Circuit Lowerbound \(related to 198\)) s
5 104 M
(---------------------------------------------------------------------------------) s
5 93 M
(Star Complexity of a Boolean Circuit is the minimum number of AND and OR gates required in ) s
5 82 M
(monotone circuit graph. Size lowerbound for Complement Function circuit can thus be lowerbo) s
5 71 M
(unded by Strong Magnification Lemma \(Stasys Jukna - http://www.thi.informatik.uni-frankfurt) s
5 60 M
(.de/~jukna/ftp/graph-compl.pdf\) - Size\(ComplementCircuit\) >= Star\(ComplementCircuitGraph\) -) s
5 49 M
( \(2 + o\(1\)\)*n . Mapping from Boolean Circuit to Graph is done through a bipartite graph gad) s
5 38 M
(get wherein a boolean variable x\(v1,v2\) iff there is an edge from v1 to v2 in the bipartite) s
5 27 M
( graph and replacing each boolean literal by an OR of two new variables. Star Complexity vi) s
5 16 M
(ews Boolean Circuits as a graph and for most graphs it is Omega\(n^2/logn\). Obtaining Size L) s
5 5 M
(owerbounds for arbitrary complement functions is non-trivial.) s
_R
S
%%Page: (29) 29
%%BeginPageSetup
_S
18 36 translate
/pagenum 29 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (29) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(----------------------------) s
5 720 M
(24j. Additional references:) s
5 709 M
(----------------------------) s
5 698 M
(24.1 Google groups thread reference 2003 \(OP done by self\): https://groups.google.com/forum) s
5 687 M
(/#!search/ka_shrinivaasan%7Csort:relevance%7Cspell:false/sci.math/RqsDNc6SBdk/Lgc0wLiFhTMJ) s
5 676 M
(24.2 Math StackExchange thread 2013: http://math.stackexchange.com/questions/293383/complem) s
5 665 M
(ent-of-a-function-f-2n-n-in-mathbbn-0-n-rightarrow-n1) s
5 654 M
(24.3 Theory of Negation - http://mentalmodels.princeton.edu/skhemlani/portfolio/negation-th) s
5 643 M
(eory/ and a quoted excerpt from it :) s
5 632 M
("... The principle of negative meaning: negation is a function that takes a single argument) s
5 621 M
(, which is a set of fully explicit models of possibilities, and in its core meaning this fu) s
5 610 M
(nction returns the complement of the set...") s
5 599 M
(24.4 Boolean Complementation [0 or 1 as range and domain] is a special case of Complement F) s
5 588 M
(unction above \(DeMorgan theorem - http://www.ctp.bilkent.edu.tr/~yavuz/BOOLEEAN.html\)) s
5 577 M
(24.5 Interpolation - http://caig.cs.nctu.edu.tw/course/NM07S/slides/chap3_1.pdf ) s
5 566 M
(24.6 Formal Concept Analysis - http://en.wikipedia.org/wiki/Formal_concept_analysis, http:/) s
5 555 M
(/ijcai.org/papers11/Papers/IJCAI11-227.pdf) s
5 544 M
(24.7 Prime generating polynomials - http://en.wikipedia.org/wiki/Formula_for_primes) s
5 533 M
(24.8 Patterns in primes - every even number > 2 is sum of 2 primes - Goldbach conjecture : ) s
5 522 M
(http://en.wikipedia.org/wiki/Goldbach%27s_conjecture) s
5 511 M
(24.9 Arbitrarily Long Arithmetic progressions - Green-Tao theorem: http://en.wikipedia.org/) s
5 500 M
(wiki/Green%E2%80%93Tao_theorem) s
5 489 M
(24.10 Prime generating functions - https://www.sonoma.edu/math/colloq/primes_sonoma_state_9) s
5 478 M
(_24_08.pdf) s
5 467 M
(24.11 Hardness of Minimizing and Learning DNF Expressions - https://cs.nyu.edu/~khot/papers) s
5 456 M
(/minDNF.pdf) s
5 445 M
(24.12 DNF Minimization - http://users.cms.caltech.edu/~umans/papers/BU07.pdf) s
5 434 M
(24.13 DNF Minimization - http://www.cs.toronto.edu/~toni/Papers/mindnf.pdf) s
5 423 M
(24.14 Riemann Zeta Function Hypothesis - all non-trivial\(complex\) zeroes of RZF have Re\(z\) ) s
5 412 M
(= 0.5 - http://en.wikipedia.org/wiki/Riemann_hypothesis. ) s
5 401 M
(24.15 Frequent Subgraph Mining - http://research.microsoft.com/pubs/173864/icde08gsearch.pd) s
5 390 M
(f) s
5 379 M
(24.16 Frequent Subgraph Mining - http://glaros.dtc.umn.edu/gkhome/fetch/papers/sigramDMKD05) s
5 368 M
(.pdf) s
5 357 M
(24.17 Roots of polynomials - Beauty of Roots - http://www.math.ucr.edu/home/baez/roots/) s
5 346 M
(24.18 Circuit lowerbounds \(Gate Elimination, Nechiporuk, Krapchenko, etc\) - http://cs.brown) s
5 335 M
(.edu/~jes/book/pdfs/ModelsOfComputation_Chapter9.pdf) s
5 324 M
(24.19 Schwartz-Zippel Lemma for Polynomial Identity Testing - http://en.wikipedia.org/wiki/) s
5 313 M
(Schwartz%E2%80%93Zippel_lemma) s
5 302 M
(24.20 Schwartz-Zippel Lemma for PIT of multilinear polynomials - http://www.cs.huji.ac.il/~) s
5 291 M
(noam/degree.ps) s
5 280 M
(24.21 Analysis of Boolean Functions - http://analysisofbooleanfunctions.org/) s
5 269 M
(24.22 Riemann-Siegel Formula for computation of zeros - http://numbers.computation.free.fr/) s
5 258 M
(Constants/Miscellaneous/zetaevaluations.html) s
5 247 M
(24.23 RZF zeros computation - http://math.stackexchange.com/questions/134362/calculating-th) s
5 236 M
(e-zeroes-of-the-riemann-zeta-function ) s
5 225 M
(24.24 Online Encyclopedia of Integer Sequences for Prime numbers - all theorems and article) s
5 214 M
(s related to primes - https://oeis.org/search?q=2%2C3%2C5%2C7%2C11%2C13%2C17%2C19%2C23%2C29) s
5 203 M
(%2C31%2C37%2C41%2C43%2C47%2C&language=english&go=Search) s
5 192 M
(24.25 Intuitive proof of Schwartz-Zippel lemma - http://rjlipton.wordpress.com/2009/11/30/t) s
5 181 M
(he-curious-history-of-the-schwartz-zippel-lemma/) s
5 170 M
(24.26 Random Matrices and RZF zeros - http://www.maths.bris.ac.uk/~majpk/papers/67.pdf) s
5 159 M
(24.27 Circuit for determinant - S. J. Berkowitz. On computing the determinant in small para) s
5 148 M
(llel time using a small number of processors. Inf. Prod. Letters 18, pp. 147\342\\200\\223150, 1) s
5 137 M
(984.) s
5 126 M
(24.28 Mangoldt Function, Ihara Zeta Function, Ramanujan Graphs - http://lucatrevisan.wordpr) s
5 115 M
(ess.com/2014/08/18/the-riemann-hypothesis-for-graphs/#more-2824) s
5 104 M
(24.29 Multiplicity of an eigen value in k-regular graph - http://math.stackexchange.com/que) s
5 93 M
(stions/255334/the-number-of-connected-components-of-a-k-regular-graph-equals-the-multiplici) s
5 82 M
(t) s
5 71 M
(24.30 PAC Learning - http://www.cis.temple.edu/~giorgio/cis587/readings/pac.html) s
5 60 M
(24.31 Pattern in Prime Digits - [Oliver-Kannan Soundarrajan] - http://arxiv.org/abs/1603.03) s
5 49 M
(720 - Prime numbers which are juxtaposed avoid ending in same digit. This has direct bearin) s
5 38 M
(g on Fourier polynomial of prime complement function and Euler-Fourier polynomial derived a) s
5 27 M
(bove which is binary representation of a prime and a special case of function complementati) s
5 16 M
(on. If decimal representation of adjacent primes is repulsive in last digit, then last bina) s
5 5 M
(ry bits \(LSB\) output by the complement circuit should be too.) s
_R
S
%%Page: (30) 30
%%BeginPageSetup
_S
18 36 translate
/pagenum 30 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (30) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(24.32 Pattern in Prime Digits - http://www.nature.com/news/peculiar-pattern-found-in-random) s
5 731 M
(-prime-numbers-1.19550 - above with assumption of Hardy-Littlewood k-tuple conjecture a gen) s
5 720 M
(eralization of twin primes conjecture to all prime constellations.) s
5 709 M
(24.33 Pattern in Primes - Ulam's Spiral - [Stainslaw Ulam] - https://www.alpertron.com.ar/U) s
5 698 M
(LAM.HTM - Prime numbers are clustered along diagonals of anticlockwise spiral of integers 1) s
5 687 M
(,2,3,4,5,6,... ad infinitum.) s
5 676 M
(24.34 Theory of Negation \(Broken URL in 24.3 updated\) - http://mentalmodels.princeton.edu/p) s
5 665 M
(apers/2012negation.pdf) s
5 654 M
(24.35 Prime Number Theorem - n-th prime is ~ O\(nlogn\)) s
5 643 M
(24.36 Riemann Hypothesis prediction of prime distribution - Integral_2_p\(n\)_[dt/logt] = n +) s
5 632 M
( O\(sqrt\(n\(logn\)^3\)) s
5 621 M
(24.37 Brainfuck Turing Machine Compiler - https://esolangs.org/wiki/Brainfuck) s
5 610 M
(24.38 Laconic Turing Machine Compiler - https://esolangs.org/wiki/Laconic) s
5 599 M
(24.39 Circuit Complexity Lowerbound for Explicit Boolean Functions - http://logic.pdmi.ras.) s
5 588 M
(ru/~kulikov/papers/2011_3n_lower_bound_mfcs.pdf - 3n  - o\(n\)) s
5 577 M
(24.40 Star Complexity of Boolean Function Circuit - [Stasys Jukna] - http://www.thi.informa) s
5 566 M
(tik.uni-frankfurt.de/~jukna/ftp/graph-compl.pdf) s
5 555 M
(24.41 Random Matrices, RZF zeroes and Quantum Mechanics - https://www.ias.edu/ideas/2013/pr) s
5 544 M
(imes-random-matrices) s
5 533 M
(24.42 Jones-Sato-Wada-Wiens Theorem - Polynomial of 25 degree-26 variables for Prime Diopha) s
5 522 M
(ntine set - http://www.math.ualberta.ca/~wiens/home%20page/pubs/diophantine.pdf) s
5 511 M
(24.43 Energy levels of Erbium Nuclei and zeros of Riemann Zeta Function - http://seedmagazi) s
5 500 M
(ne.com/content/article/prime_numbers_get_hitched/) s
5 478 M
(###########################################################################################) s
5 467 M
(####################################################) s
5 434 M
(25. \(FEATURE - DONE\) Approximating with some probability distribution - Gaussian, Binomial ) s
5 423 M
(etc., that model the probability of occurence of a datapoint in the set. Kullback-Leibler D) s
5 412 M
(ivergence python implementation which computes distance in terms of amount of bits between ) s
5 401 M
(two probability distribution has been added to python-src/. Minimum of the distance for dif) s
5 390 M
(ferent standard distributions with a dataset is the closest distribution approximation for ) s
5 379 M
(the dataset.) s
5 357 M
(\(FEATURE - DONE\) 26. Streaming algorithms - Finding Frequency moments, Heavy Hitters\(most p) s
5 346 M
(rominent items\), Distinct Elements etc., in the numerical dataset. Usually numerical data o) s
5 335 M
(ccur in streams making these best choice for mining numerical data. ) s
5 324 M
(\(FEATURE - DONE\) 26.1 Implementation of LogLog and HyperLogLog Counter\(cardinality - distin) s
5 313 M
(ct elements in streamed multiset\), CountMinSketch-CountMeanMinSketch \(Frequencies and heavy) s
5 302 M
( hitters\) and Bloom Filters\(membership\)) s
5 291 M
(\(FEATURE - DONE\) 26.2 Parser and non-text file Storage framework for Realtime Streaming Dat) s
5 280 M
(a - Hive, HBase, Cassandra, Spark and Pig Scripts and Clients for Storage Backends have bee) s
5 269 M
(n implemented. The Storage is abstracted by a generator - architecture diagram at: http://s) s
5 258 M
(ourceforge.net/p/asfer/code/HEAD/tree/asfer-docs/BigDataStorageAbstractionInAsFer.jpg) s
5 247 M
(\(FEATURE - DONE\) 26.3 Python scripts for Stock Quotes Data and Twitter tweets stream search) s
5 236 M
( data for a query.) s
5 225 M
(-------------) s
5 214 M
(References:) s
5 203 M
(-------------) s
5 192 M
(26.4 https://gist.github.com/debasishg/8172796 ) s
5 170 M
(27. \(FEATURE - DONE\) Usual Probabilistic Measures of Mean, Median, Curve fitting on the num) s
5 159 M
(eric data. Python+RPy2+R implementation wrapper has been added to repository \(python-src/No) s
5 148 M
(rms_and_Basic_Statistics.py\)) s
5 126 M
(28. \(FEATURE - DONE - using python, R+rpy2\) Application of Discrete Fourier Transform\(using) s
5 115 M
( R\), LOESS\(using R\), Linear Polynomial Approximate Interpolation\(using R\), Logistic Regress) s
5 104 M
(ion and Gradient Descent) s
5 82 M
(29. \(FEATURE - DONE\) Least Squares Method on datapoints y\(i\)s for some x\(i\)s such that f\(x\)) s
5 71 M
(~y needs to be found. Computation of L0, L1 and L2 norms. Python+RPy2+R implementation wrap) s
5 60 M
(per has been added to repository \(python-src/Norms_and_Basic_Statistics.py\)) s
5 38 M
(\(FEATURE - DONE\)30. K-Means and kNN Clustering\(if necessary and some training data is avail) s
5 27 M
(able\) - unsupervised and supervised clustering based on coordinates of the numerical datase) s
5 16 M
(t) s
_R
S
%%Page: (31) 31
%%BeginPageSetup
_S
18 36 translate
/pagenum 31 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (31) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(31. \(FEATURE - DONE\) Discrete Hyperbolic Factorization - Author has been working on a facto) s
5 731 M
(rization algorithm with elementary proof based on discretization of a hyperbola since 2000 ) s
5 720 M
(and there seems to be some headway recently in 2013. To confirm the polylog correctness, a ) s
5 709 M
(minimal implementation of Discrete Hyperbolic Factorization \(and could be even less than po) s
5 698 M
(lylog due to a weird upperbound obtained using stirling formula\) has been added to AstroInf) s
5 687 M
(er repository at: http://sourceforge.net/p/asfer/code/HEAD/tree/cpp-src/miscellaneous/Discr) s
5 676 M
(eteHyperbolicFactorizationUpperbound.cpp with factors output logs.) s
5 654 M
(32. \(FEATURE - DONE\) Multiple versions of Discrete Hyperbolic Factorization algorithms have) s
5 643 M
( been uploaded as drafts in https://sites.google.com/site/kuja27:) s
5 632 M
(         32.1\) http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicFactoriz) s
5 621 M
(ation_UpperboundDerivedWithStirlingFormula_2013-09-10.pdf/download and ) s
5 610 M
(         32.2\) http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolyloga) s
5 599 M
(rithmicSieveForIntegerFactorization_updated_rectangular_interpolation_search_and_StirlingFo) s
5 588 M
(rmula_Upperbound.pdf/download\(and multiple versions due to various possible algorithms for ) s
5 577 M
(search and upperbound technique used\) ) s
5 544 M
(33. \(DONE\) NC PRAM version of Discrete Hyperbolic Factorization:) s
5 533 M
(        33.1\) An updated NC PRAM version of Discrete Hyperbolic Factorization has been uplo) s
5 522 M
(aded at:) s
5 511 M
(http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveFor) s
5 500 M
(IntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound.pdf/download that does) s
5 489 M
( PRAM k-merge of discrete tiles in logarithmic time before binary search on merged tile.) s
5 467 M
(        33.2\) Preliminary Design notes for CRCW PRAM implementation of the above is added t) s
5 456 M
(o repository at: http://sourceforge.net/p/asfer/code/237/tree/ImplementationDesignNotesForD) s
5 445 M
(iscreteHyperbolicFactorizationInPRAM.jpg. This adds a tile_id to each tile so that during b) s
5 434 M
(inary search, the factors are correctly found since coordinate info gets shuffled after k-t) s
5 423 M
(ile merge.) s
5 390 M
(34. \(FEATURE - DONE\) An updated draft version of PRAM NC algorithm for Discrete Hyperbolic ) s
5 379 M
(Factorization has been uploaded - with a new section for Parallel RAM to NC reduction, disa) s
5 368 M
(mbiguation on input size \(N and not logN is the input size for ANSV algorithm and yet is in) s
5 357 M
( NC - in NC2 to be exact - \(logN\)^2 time and polynomial in N PRAM processors - NC circuit d) s
5 346 M
(epth translates to PRAM time and NC circuit size to number of PRAMs\):) s
5 335 M
(        34.1 LaTeX - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPo) s
5 324 M
(lylogarithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_u) s
5 313 M
(pdateddraft.tex/download) s
5 291 M
(        34.2 PDF - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPoly) s
5 280 M
(logarithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_upd) s
5 269 M
(ateddraft.pdf/download) s
5 247 M
(---------------------) s
5 236 M
(Additional references:) s
5 225 M
(---------------------) s
5 214 M
(        34.3 Above PRAM k-merge algorithm implies Factorization is in NC, a far more audaci) s
5 203 M
(ous claim than Factorization in P. It has been disputed if PRAM is indeed in NC because of ) s
5 192 M
(input size being N and not logN. But there have been insurmountable evidences so far which ) s
5 181 M
(all point to PRAM model being equivalent to NC circuits in certain conditions and NC circui) s
5 170 M
(t nodes can simulate PRAM with polylog upperbound on number of bits [HooverGreenlawRuzzo]- ) s
5 159 M
(https://homes.cs.washington.edu/~ruzzo/papers/limits.pdf . References for this are in LaTex) s
5 148 M
( and PDF links previously and also mentioned below in "Additional References") s
5 126 M
(        34.4\) \(IMPORTANT OPTIMIZATION OVER 34.1, 34.2 ABOVE\) Instead of [BerkmanSchieberVis) s
5 115 M
(hkin] an O\(logloglogN\) algorithm can be used described in \(since the numbers in tiles are w) s
5 104 M
(ithin a known range - 1 to N - for factorization of N in discretized tesselated hyperbolic ) s
5 93 M
(arc\) - Triply-Logarithmic Parallel Upper and Lower Bounds for Minimum and Range Minima over) s
5 82 M
( Small Domains \(Omer Berkman, Yossi Matias, Prabhakar Ragde\) - 1998 - http://www.sciencedir) s
5 71 M
(ect.com/science/article/pii/S0196677497909056. This algorithm internally applies [BerkmanSc) s
5 60 M
(hieberVishkin] but lemmas 2.3 and 3.1 mentioned in [BerkmanMatiasPrabhakar] preprocess the ) s
5 49 M
(input within a known domain [1..N]. This takes O\(logloglogN\) time using \(logN\)^3/logloglogN) s
5 38 M
( processors for each merging problem and O\(logloglogN\) time using N/logloglogN processors o) s
5 27 M
(verall. This algorithm can therefore supersede 34.1 and 34.2.) s
5 5 M
(        34.5\) Randomized Algorithms ,Rajeev Motwani and Prabhakar Raghavan, Chapter 12 on D) s
_R
S
%%Page: (32) 32
%%BeginPageSetup
_S
18 36 translate
/pagenum 32 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (32) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(istributed and Parallel Algorithms, also describes input size and randomized algorithms for) s
5 731 M
( Parallel sort - Definition 12.1 of NC \(Page 336\) - "NC consists of languages that have PRA) s
5 720 M
(M algorithms with O\(logN\) time and O\(N^k\) PRAM processors".) s
5 698 M
(        34.6\) Also an alternative merge algorithm in constant depth polysize circuit descri) s
5 687 M
(bed in Chandra-Stockmeyer-Vishkin [http://cstheory.com/stockmeyer@sbcglobal.net/csv.pdf] ca) s
5 676 M
(n be applied \(but it is for merging two lists of m, m-bit numbers where as the above factor) s
5 665 M
(ization needs merging two lists of O\(m\), log\(m\)-bit numbers\)) s
5 643 M
(        34.7\) [RichardKarp-VijayaRamachandran] define the inclusion of PRAM models in NC in) s
5 632 M
( page 29 of http://digitalassets.lib.berkeley.edu/techreports/ucb/text/CSD-88-408.pdf - NCk) s
5 621 M
( in EREWk in CREWk in CRCWk=ACk in NC\(k+1\). [KarpRamachandran] cite [HooverKlawePippenger] ) s
5 610 M
(- Bounding Fanout in Logical Networks - http://dl.acm.org/citation.cfm?id=322412 - for this) s
5 599 M
( inclusion. Thus references for PRAM=NC imply All Nearest Smaller Values \(ANSV\) CRCW PRAM a) s
5 588 M
(lgorithm [BerkmanSchieberVishkin] is also in NC counterintuitively despite the input size b) s
5 577 M
(eing N=n \(and not logN\).) s
5 555 M
(        34.8\) Parallel RAM survey - http://www.cs.utoronto.ca/~faith/PRAMsurvey.ps) s
5 533 M
(        34.9\) Related: Quantum Search using Grover Algorithm over unsorted lists can be don) s
5 522 M
(e in O\(sqrt\(N\)\) - https://en.wikipedia.org/wiki/Grover's_algorithm. This is another counter) s
5 511 M
(intuitive fact that a quantum search on unsorted lists is slower than ANSV Parallel RAM alg) s
5 500 M
(orithm.) s
5 478 M
(        34.10\) Recent Advances in All Nearest Smaller Values algorithms:) s
5 467 M
(                34.10.1\) ANSV in hypercube - Kravets and Plaxton - http://www.cs.utexas.edu) s
5 456 M
(/~plaxton/pubs/1996/ieee_tpds.ps) s
5 445 M
(                34.10.2\) ANSV lowerbound - Katajainen - http://www.diku.dk/~jyrki/Paper/CAT) s
5 434 M
(S96.ps - omega\(n\) processors with omega\(logn\) time) s
5 423 M
(                34.10.3\) ANSV in BSP machines - Chun Hsi Huang - http://www.cse.buffalo.edu) s
5 412 M
(/tech-reports/2001-06.ps) s
5 401 M
(        ) s
5 390 M
(        34.11\) The crucial fact in the above is not the practicality of having order of n p) s
5 379 M
(arallel processors with RAM to get the logarithmic time lowerbound \(which looks costly in n) s
5 368 M
(umber of PRAMs wise\), but the equivalence of PRAM to NC which is theoretically allowed desp) s
5 357 M
(ite input size being n instead of logn \(because each PRAM cell mapped to a circuit element ) s
5 346 M
(can have polylogn bits and polyn such PRAMs are allowed\) which is sufficient for Discrete H) s
5 335 M
(yperbolic Factorization to be in NC.) s
5 313 M
(        34.12\) Rsync - PhD thesis - chapters on external and internal sorting - https://www) s
5 302 M
(.samba.org/~tridge/phd_thesis.pdf) s
5 280 M
(        34.13\) Handbook of Parallel Computing - [SanguthevarRajasekaran-JohnReif] - http://) s
5 269 M
(www.engr.uconn.edu/~rajasek/HandbookParallelComp.pdf,  https://books.google.co.in/books?id=) s
5 258 M
(OF9hk4oC6FIC&pg=PA179&lpg=PA179&dq=PRAM+NC+equivalence&source=bl&ots=LpYceSocLO&sig=GtslRh1) s
5 247 M
(I1AveOLo0kTylSzyDd48&hl=en&sa=X&ved=0ahUKEwi_1OfmuKbJAhUCHY4KHTpdAfoQ6AEISTAI#v=onepage&q=P) s
5 236 M
(RAM%20NC%20equivalence&f=false) s
5 214 M
(        34.14\) [Eric Allender] - NC^1 and EREW PRAM - March 1990 - https://groups.google.co) s
5 203 M
(m/forum/#!topic/comp.theory/0a5Y_DSkOao - "... Since NC^1 is contained in DLOG, and many pe) s
5 192 M
(ople suspect that the containment is proper, it seems unlikely that NC^1 corresponds to log) s
5 181 M
( time on an EREW PRAM ..." - contradicts 34.7.) s
5 159 M
(        34.15\) Efficient and Highly Parallel Computation - [JeffreyFinkelstein] - https://c) s
5 148 M
(s-people.bu.edu/jeffreyf/static/pdf/parallel.pdf - "... NC represents the class of language) s
5 137 M
(s decidable by a CREW PRAM with a polynomial number of processors running in polylogarithmi) s
5 126 M
(c parallel time. Languages in NC are considered highly parallel ...".  [Berkman-Schieber-Vi) s
5 115 M
(shkin] algorithm - www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/ansv.ps - for ANSV is for ) s
5 104 M
(both CREW PRAM of O\(logn, n/logn\) and CRCW PRAM of O\(loglogn, n/loglogn\) and thus former is) s
5 93 M
( in NC.) s
5 71 M
(        34.16\) There is a commercially available Parallel CRCW RAM chip implementation by N) s
5 60 M
(VIDIA CUDA GPUs - http://developer.nvidia.com/cuda and XMT research project - www.umiacs.um) s
5 49 M
(d.edu/users/vishkin/XMT/ but not for CREW PRAM which is a limitation of implementing All Ne) s
5 38 M
(arest Smaller Values PRAM merge for discretized hyperbolic arc and doing a benchmark.) s
5 16 M
(        34.17\) StackExchange thread on Consequences of Factorization in P - http://cstheory) s
5 5 M
(.stackexchange.com/questions/5096/consequences-of-factoring-being-in-p . Factorization in P) s
_R
S
%%Page: (33) 33
%%BeginPageSetup
_S
18 36 translate
/pagenum 33 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (33) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( is unlikely to have any significant effect on existing class containments, though practica) s
5 731 M
(l ecommerce becomes less secure.) s
5 709 M
(        34.18\) What happened to PRAM - http://blog.computationalcomplexity.org/2005/04/what) s
5 698 M
(-happened-to-pram.html - Quoted excerpts from comments - "... I don't understand why some C) s
5 687 M
(S theory people apologize for the PRAM. NC is robust and interesting as a complexity class,) s
5 676 M
( and an easy way to show that a problem is in NC is to give a PRAM algorithm. That's all th) s
5 665 M
(e argument I need for the PRAM's existence. And yes, I've heard all of the arguments about ) s
5 654 M
(why the PRAM is completely unrealistic ...") s
5 632 M
(        34.19\) [Page 29 - HooverGreenlawRuzzo] - "... but there is no a priori upper bound ) s
5 621 M
(on the fanout of a gate. Hoover, Klawe, and Pippenger show that conversion to bounded fanou) s
5 610 M
(t entails at most a constant factor increase in either size or depth [160]...") s
5 588 M
(        34.20\) \(DONE-BITONIC SORT IMPLEMENTATION\) In the absence of PRAM implementation, NC) s
5 577 M
( Bitonic Sort has been invoked as a suitable alternative in parallel tile merge sort step o) s
5 566 M
(f Parallel Discrete Hyperbolic Factorization Implementation. Commit Notes 261-264 and 265-2) s
5 555 M
(71 below have details on this. Bitonic Sort on SparkCloud requires O\(\(logn\)^2\) time with O\() s
5 544 M
(n^2logn\) parallel comparators \(which simulate PRAM but comparators required are more than P) s
5 533 M
(RAMs\). With this NC factorization has been implemented on a Spark cloud.) s
5 511 M
(        34.21\) An important point to note in above is that an exhaustive search in parallel) s
5 500 M
( would always find a factor, but in how many steps is the question answered by NC computati) s
5 489 M
(onal geometric search. This is 1-dimensional geometric factorization counterpart of 2-dimen) s
5 478 M
(sional Graham's Scan and Jarvis March for Convex Hull of n points. A parallel algorithm in ) s
5 467 M
(O\(n\) steps wouldn't have qualified to be in NC. Above NC algorithm scans just an one-dimens) s
5 456 M
(ional tesselated merged tiles of a hyperbolic arc in O\(\(logn\)^2\) for merge + O\(logn\) for se) s
5 445 M
(arch and doesn't scan more than 1-dimension. Parallel tesselation of O\(n\) long hyperbolic a) s
5 434 M
(rc to create locally sorted tile segments requires < O\(logn\) steps only if number of proces) s
5 423 M
(sors is > O\(n/logn\). Hence it adheres to all definitions of NC. Thus total parallel work ti) s
5 412 M
(me is O\(\(logn\)^2\) + O\(logn\) + O\(logn\) = O\(\(logn\)^2\). Here again N=n.) s
5 390 M
(        34.22\) NC Computational Geometric algorithms - [AggarwalChazelleGuibasDunlaingYap] ) s
5 379 M
(- https://www.cs.princeton.edu/~chazelle/pubs/ParallelCompGeom.pdf) s
5 357 M
(        34.23\) Parallel Computational Geometry Techniques - [MikhailAtallah] - http://docs.) s
5 346 M
(lib.purdue.edu/cgi/viewcontent.cgi?article=1021&context=cstech - Section 3.1 - Sorting and ) s
5 335 M
(Merging - "...best hypercube bound for Parallel Sorting is O\(logn\(loglogn\)^2\) - [CypherPlax) s
5 324 M
(ton] - http://dl.acm.org/citation.cfm?id=100240 ...") s
5 302 M
(        34.24\) [DexterKozen-CheeYap] - Cell Decomposition is in NC - http://anothersample.n) s
5 291 M
(et/order/fe1d53539cff07d3e836ccc499d443b38b2848ba - This is a deep Algebraic Geometry/Topol) s
5 280 M
(ogy result for Cell Decomposition by constructing NC circuit for it. Coincidentally, the co) s
5 269 M
(nnection between NC factorization and geometry conjectured in 35 below is already present a) s
5 258 M
(s evidenced by this. This algorithm is for Cell decomposition of a manifold in arbitrary di) s
5 247 M
(mensions - a set of disjoint union of cells created by intersecting polynomials. For NC fac) s
5 236 M
(torization, the polynomial of interest is hyperbola. Illustration in [Kozen-Yap] - page 517) s
5 225 M
( - is for 0,1,2-dimension cells with 2 polynomials - parabola and circle. This corresponds ) s
5 214 M
(to tesselation step of factorization where a continuous hyperbola is discretized into disjo) s
5 203 M
(int union of cells.) s
5 181 M
(        34.25\) Cell decomposition for tesselation of hyperbola can be created in two ways. ) s
5 170 M
(In the first example, set of polynomials are {hyperbola, stepfunction1, stepfunction2, y=k ) s
5 159 M
(forall integer k}. Geometrically the hyperbola is bounded above and below by 2 step functio) s
5 148 M
(ns i.e hyperbola intersects a grid of x-y axes lines. This creates 2-dimensional cells abov) s
5 137 M
(e and below hyperbola ensconced between 2 step functions which are homeomorphic to R^2 \(the) s
5 126 M
(re is a bijective map between cells and R^2 - Topology - James Munkres}. Each cell has same) s
5 115 M
( sign for a polynomial {above=+1, on=0, below=-1}. This cell decomposition is in NC. Cells ) s
5 104 M
(above and below hyperbola have to be merged to get squared tesselation.) s
5 82 M
(        34.26\) In another example Cell decomposition is created by intersection of integer ) s
5 71 M
(y-axis lines and hyperbola which results in set of 0-cells \(discrete set of points on hyper) s
5 60 M
(bola\).) s
5 38 M
(        34.27\) NVIDIA CUDA Parallel Bitonic Sort Implementation Reference - http://develope) s
5 27 M
(r.download.nvidia.com/compute/cuda/1.1-Beta/x86_website/Data-Parallel_Algorithms.html, Linu) s
5 16 M
(x code - http://developer.download.nvidia.com/compute/cuda/1.1-Beta/Projects/bitonic.tar.gz) s
_R
S
%%Page: (34) 34
%%BeginPageSetup
_S
18 36 translate
/pagenum 34 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (34) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        34.28\) Tiling of Hyperbolic curve: The discretization step of a hyperbola to form s) s
5 731 M
(et of contiguous tiled segments has been mentioned as "Tesselation" throughout this documen) s
5 720 M
(t which could be a misnomer. Precise equivalent of this tiling is pixelation in Computer Gr) s
5 709 M
(aphics where an image bitmap is downsampled to create a low-resolution approximation of ima) s
5 698 M
(ge - in this example, an image of hyperbolic curve is pixelated to g et a tiled set of segm) s
5 687 M
(ents \(http://demonstrations.wolfram.com/PixelizationOfAFont/ shows how a letter A is pixela) s
5 676 M
(ted to create stylized pixelated A\).) s
5 654 M
(        34.29\) The tiling of hyperbolic curve is done by deltax = N/[y\342\\210\\227\(y+1\)] which) s
5 643 M
( is a process similar to low-pass filter or Box Blur in Graphics. In a parallel setting wit) s
5 632 M
(h PRAMs or Parallel Bitonic Sort, the preprocessing step required is the tiled hyperbolic a) s
5 621 M
(rc already in place spread out across all nodes of total number O\(N/logN\). This naive tilin) s
5 610 M
(g though not as sophisticated as Box Blur Gaussian Filter, needs time O\(logN\) for each node) s
5 599 M
( i.e delta computation per coordinate is O\(1\) and each node is allotted O\(logN\) long arc se) s
5 588 M
(gment and thus O\(1*logN\) per node.) s
5 566 M
(        34.30\) Above algorithm ignores Communication Complexity across PRAMs or Comparator ) s
5 555 M
(nodes on a Cloud.) s
5 533 M
(        34.31\) Comparison of Parallel Sorting Algorithms \(Bitonic, Parallel QuickSort on NV) s
5 522 M
(IDIA CUDA GPU etc.,\) - http://arxiv.org/pdf/1511.03404.pdf. Bitonic Sort has the best paral) s
5 511 M
(lel performance in most usecases.) s
5 489 M
(        34.32\) NC-PRAM Equivalence and Parallel Algorithms - [David Eppstein] - https://www) s
5 478 M
(.ics.uci.edu/~eppstein/pubs/EppGal-ICALP-89.pdf) s
5 456 M
(        34.33\) Parallel Merge Sort - [Richard Cole - https://www.cs.nyu.edu/cole/] - best k) s
5 445 M
(nown theoretical parallel sorting algorithm - requires O\(logn\) time with n processors and t) s
5 434 M
(hus in NC - https://www.semanticscholar.org/paper/Parallel-Merge-Sort-Cole/6b67df5d908993ec) s
5 423 M
(a7c03a564b5dcb1c4c8db999/pdf) s
5 401 M
(        34.34\) NC-PRAM equivalence - http://courses.csail.mit.edu/6.854/06/notes/n32-parall) s
5 390 M
(el.pdf) s
5 368 M
(        34.35\) Theorem 13 - PRAM\(polylog,log\) = uniform-NC - www.wisdom.weizmann.ac.il/~ode) s
5 357 M
(d/PS/CC/l27.ps - This mentions that Communication Complexity in PRAM model is assumed to be) s
5 346 M
( O\(1\) and thus negligible though practically PRAMs are unrealistic.) s
5 324 M
(        34.36\) PRAM Implementation Techniques - http://www.doc.ic.ac.uk/~nd/surprise_95/jou) s
5 313 M
(rnal/vol4/fcw/report.html - "... However to say that an algorithm is in NC does not mean th) s
5 302 M
(at it can be efficiently implemented on a massively parallel system...") s
5 280 M
(        34.37\) Logarithm Time Cost Parallel Sorting - [Lasse Natvig] - Survey on Batcher's ) s
5 269 M
(Bitonic Sort, AKS Sorting Network, Richard Cole's Parallel Sort - www.idi.ntnu.no/~lasse/pu) s
5 258 M
(blics/SC90.ps - Bitonic Sort is faster in practice though Richard Cole Parallel Sorting is ) s
5 247 M
(the fastest and most processor-efficient known.) s
5 225 M
(        34.38\) What is wrong with PRAM - "Too much importance is placed on NC . In particul) s
5 214 M
(ar, algorithms which have \342\\200\\234fast\342\\200\\235 runtimes but use, for example, O\(n^2\) proc) s
5 203 M
(essors are simply of no use" - Section 3.2 - https://people.eecs.berkeley.edu/~jrs/meshpape) s
5 192 M
(rs/SuThesis.pdf) s
5 170 M
(        34.39\) NC-PRAM equivalence - https://www.ida.liu.se/~chrke55/courses/APP/ps/f2pram-) s
5 159 M
(2x2.pdf - "set of problems solvable on PRAM in polylogarithmic time O\(\(logn\)^k\) k>0, using ) s
5 148 M
(only n^O\(1\) processors \(i. e. a polynomial number\) in the size n of the input instance") s
5 126 M
(        34.40\) Number of PRAMs in NC definition - http://cs.stackexchange.com/questions/397) s
5 115 M
(21/given-a-pram-may-use-arbitrarily-many-processors-why-is-hamiltonian-cycle-not-i) s
5 93 M
(        34.41\) EURO-PAR 1995 - Input size in Parallel RAM algorithms - https://books.google) s
5 82 M
(.co.in/books?id=pVpjOwUHEigC&pg=PA245&lpg=PA245&dq=size+of+input+in+PRAM&source=bl&ots=uZ9G) s
5 71 M
(eONqtg&sig=6YHl4CvNUdFERPe8p192hdB1Kc0&hl=en&sa=X&ved=0ahUKEwiZ3_z20qTOAhVJGJQKHX8bALIQ6AEI) s
5 60 M
(OTAG#v=onepage&q=size%20of%20input%20in%20PRAM&f=false - "... Third, inputs are usually mea) s
5 49 M
(sured by their size. We use overall number of array elements ...") s
5 27 M
(        34.42\) Batcher's Bitonic Sort is in NC - https://web.cs.dal.ca/~arc/teaching/CS4125) s
5 16 M
(/Lectures/03b-ParallelAnalysis.pptx - also other) s
5 5 M
(PRAM algorithms are in NC.) s
_R
S
%%Page: (35) 35
%%BeginPageSetup
_S
18 36 translate
/pagenum 35 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (35) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(        34.43\) Brief Overview of Parallel Algorithms, Work-Time Efficiency and NC - [Blello) s
5 720 M
(ch] - http://www.cs.cmu.edu/~scandal/html-papers/short/short.html - "... Examples of proble) s
5 709 M
(ms in NC include sorting, finding minimum-cost spanning trees, and finding convex hulls ...) s
5 698 M
(". Work-Time Efficiency is more about optimizing number of processors required \(with polylo) s
5 687 M
(g time\) and two algorithms with differing work-time are both theoretically in NC.) s
5 665 M
(        34.44\) Sorting n integers is in NC - [BussCookGuptaRamachandran] - www.math.ucsd.ed) s
5 654 M
(u/~sbuss/ResearchWeb/Boolean2/finalversion.ps) s
5 632 M
(        34.45\) PRAM and Circuit Equivalence - [Savage] - http://cs.brown.edu/~jes/book/pdfs) s
5 621 M
(/ModelsOfComputation.pdf - Lemma 8.14.1) s
5 599 M
(        34.46\) Efficient Parallel Computation = NC - [AroraBarak] - http://theory.cs.prince) s
5 588 M
(ton.edu/complexity/book.pdf - Theorem 6.24 - Simpler version of 34.3) s
5 566 M
(        34.47\) Parallel sorting and NC - http://courses.csail.mit.edu/6.854/06/notes/n32-pa) s
5 555 M
(rallel.pdf) s
5 533 M
(        34.48\) Parallel sorting in PRAM model - http://www.math.ias.edu/~avi/PUBLICATIONS/M) s
5 522 M
(YPAPERS/MW87/MW87.pdf ) s
5 500 M
(        34.49\) Parallel Sorting is in NC - http://www.toves.org/books/distalg/distalg.pdf -) s
5 489 M
( Section 5 \(Page 17\)) s
5 467 M
(        34.50\) Parallel K-Merge Algorithm for merging k sorted tiles into a single sorted l) s
5 456 M
(ist - LazyMerge - www.cs.newpaltz.edu/~lik/publications/Ahmad-Salah-IEEE-TPDS-2016.pdf) s
5 434 M
(        34.51\) Timsort and its parallel implementation in Java, Python and Android for para) s
5 423 M
(llel merge sort of arrays - https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html) s
5 412 M
(#parallelSort-int:A- . Timsort exploits order in unsorted lists. Java implementation is bas) s
5 401 M
(ed on ForkJoinPool work-stealing pattern \(similar to router-worker-dealer pattern in ZeroMQ) s
5 390 M
(\) and parallelism is equal to number of processors.Cloud Bitonicsort SparkPython implementa) s
5 379 M
(tion in NeuronRain AsFer could be more time efficient than Arrays.parallelSort\(\) in Java 8 ) s
5 368 M
(as it implements Batcher Sort on Cloud.) s
5 346 M
(        34.52\) Comparison of Parallel and Sequential Sorts - https://github.com/darkobozida) s
5 335 M
(r/sequential-vs-parallel-sort) s
5 313 M
(        34.53\) Trigonometric Functions over Finite Galois Fields \(of prime power order\) - h) s
5 302 M
(ttps://arxiv.org/pdf/1501.07502.pdf - Defines trigonometric functions \(hyperbola is also a ) s
5 291 M
(trigonometic function - class of hyperbolic functions\) on discrete objects like a finite fi) s
5 280 M
(eld yielding a function on a set of complex points\(Gaussian integers\). This abstracts and r) s
5 269 M
(educes to discretization step of hyperbolic factorization but requires prime power sized fi) s
5 258 M
(nite field.) s
5 236 M
(        34.54\) Adaptive Bitonic Sorting - http://epubs.siam.org/doi/abs/10.1137/0218014 - v) s
5 225 M
(ery old paper \(1989\) on PRAM implementation of bitonic sort - NeuronRain AsFer implements b) s
5 214 M
(itonic sorting on Spark Cloud and parallelizes comparators on cloud \(34.20\) effectively tre) s
5 203 M
(ating cloud as sorting network with cloud communication complexity assumed as constant in a) s
5 192 M
(verage case.) s
5 170 M
(        34.55\) Efficient Parallel Sorting - improvement of Cole's Parallel Sort and AKS sor) s
5 159 M
(ting networks: sorting networks can be implemented in EREW PRAM - [Goodrich] - https://arxi) s
5 148 M
(v.org/pdf/1306.3000v1.pdf - [Godel's Lost Letter and P=NP - Richard Lipton - Galactic Sorti) s
5 137 M
(ng Networks - https://rjlipton.wordpress.com/2014/04/24/galactic-sortning-networks/]) s
5 115 M
(        34.56\) Computational Pixelation Geometry Theorems - https://arxiv.org/pdf/1105.2831) s
5 104 M
(v1.pdf - defines planar pixelation of a continuous curve and proves Intermediate Value Theo) s
5 93 M
(rem for Pixelation geometry. This is exactly the discretization step of this hyperbolic fac) s
5 82 M
(torization algorithm. This formalizes the discretization mentioned in 34.29 where each pixe) s
5 71 M
(lated tile is a set of intermediate values between f\(x\) and f\(x+1\) for interval [x,x+1] whe) s
5 60 M
(re f = N/x for N to be factorized.) s
5 38 M
(        34.57\) Approximating a function graph by planar pixelation - http://www3.nd.edu/~ln) s
5 27 M
(icolae/Pixelations-beam.pdf - this applies advanced topology and geometry for pixelation of) s
5 16 M
( any function graph. Presently pixelation of hyperbola graph is done in very simple, primit) s
5 5 M
(ive way as mentioned in 34.29.) s
_R
S
%%Page: (36) 36
%%BeginPageSetup
_S
18 36 translate
/pagenum 36 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (36) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(        34.58\) Resource Oblivious Sorting on Multicores - [RichardCole-VijayaRamachandran] ) s
5 720 M
(- https://arxiv.org/pdf/1508.01504v1.pdf - New parallel merge sort algorithm for multicore ) s
5 709 M
(machines \(SPMS - SamplePartitionMergeSort\) with parallel execution time in O\(logN*loglogN\).) s
5 698 M
( Multicores are equivalent to Asynchronous PRAMs \(each core executes asynchronously\) and th) s
5 687 M
(us it is an NC sorting algorithm.) s
5 665 M
(        34.59\) NC and various categories of PRAMs - https://pdfs.semanticscholar.org/5354/9) s
5 654 M
(9cf0c2faaaa6df69529605c87b511bd2226.pdf - CRCW PRAM can be simulated by EREW PRAM with poly) s
5 643 M
(logarithmic increase in time.) s
5 621 M
(        34.60\) PRAM-NC equivalence, definition of input size - ftp://ftp.cs.utexas.edu/pub/) s
5 610 M
(techreports/tr85-17.pdf - atom is an indivisible unit of bit string, input is sequence of a) s
5 599 M
(toms, input size is length of this sequence.) s
5 577 M
(        34.61\) PRAM model and precise definition of input size in PRAM models - https://www) s
5 566 M
(.cs.fsu.edu/~engelen/courses/HPC-adv-2008/PRAM.pdf - input size is length of sequence n = 2) s
5 555 M
(^k ,not number of bits k=logn, and each element in the sequence is a set of bits - input si) s
5 544 M
(ze to a PRAM algorithm is exponential in number of bits and differs from sequential algorit) s
5 533 M
(hms which have input size in just number of bits.) s
5 511 M
(        34.62\) Simulation of Parallel RAMs by Circuits - http://www.cstheory.com/stockmeyer) s
5 500 M
(@sbcglobal.net/sv.pdf) s
5 478 M
(        34.63\) PRAM Models and input size - [Joseph JaJa] - https://www.cs.utah.edu/~hari/t) s
5 467 M
(eaching/bigdata/book92-JaJa-parallel.algorithms.intro.pdf - "...ALGORITHM 1.3 \(Matrix Multi) s
5 456 M
(plication on the PRAM\) Input: Two n x n matrices A and B stored in the shared memory, where) s
5 445 M
( n = 2^k .  The initialized local variables are n, and the triple of indices \(i, j, I\) iden) s
5 434 M
(tifying the processor. ...", https://people.ksp.sk/~ppershing/data/skola/JaJa.pdf - Chapter) s
5 423 M
( 4 - Searching, Merging, Sorting) s
5 401 M
(        34.64\) Input Size for PRAMs, NC-PRAM equivalence, Cook-Pippenger Thesis, Brent's Sp) s
5 390 M
(eedup Lemma - www.csl.mtu.edu/cs5311.ck/www/READING/pram.ps.gz - Section on Input/Output Co) s
5 379 M
(nvention in PRAMs and Parallel MergeSort in EREW PRAM - Input size to Parallel Merge Sort i) s
5 368 M
(s the length of array of integers to be sorted and is not logarithmic in length of array. T) s
5 357 M
(his requires parallel time O\(\(logN\)^2\) which is the depth of equivalent NC circuit. Computa) s
5 346 M
(tional Geometric Discrete Hyperbolic Factorization described above discretizes hyperbola in) s
5 335 M
(to segments of sorted tiles of numbers on a 2 dimensional plane and merge-sorts them. This ) s
5 324 M
(obviously requires O\(\(logN\)^2\) time to find a factor with additional O\(logN\) binary search.) s
5 313 M
( Brent Speedup Lemma applies because, the tile segments can be statically allocated to each) s
5 302 M
( specific processor in tiling phase.) s
5 280 M
(        34.65\) Pixelation of Polygons - On Guarding Orthogonal Polygons with Bounded Treewi) s
5 269 M
(dth - [Therese Biedl and Saeed Mehrabi] - Page 160 - http://2017.cccg.ca/proceedings/CCCG20) s
5 258 M
(17.pdf - CCCG 2017, Ottawa, Ontario, July 26\342\\200\\22328, 2017 - Computational Geometric def) s
5 247 M
(inition of standard pixelation divides a polygon into rectangles and adjoining rectangles a) s
5 236 M
(re vertices connected to form a planar pixelation graph. Similar notion of pixelation holds) s
5 225 M
( for pixelating hyperbola pq=N for finding factors p and q of integer N. Art Gallery proble) s
5 214 M
(m in computational geometry finds minimum number of vantage points to guard the art gallery) s
5 203 M
(. If hyperbolic curve is considered as an art gallery, and guards have visibility only in v) s
5 192 M
(ertical and horizontal directions, pixelation creates set of rectangles bounded by vantage ) s
5 181 M
(points ensconcing the hyperbola. This illuminates the hyperbola completely.) s
5 170 M
( ) s
5 159 M
(        34.66\) A Comparison of Parallel Sorting Algorithms on Different Architectures- [NAN) s
5 148 M
(CY M. AMATO, RAVISHANKAR IYER, SHARAD SUNDARESAN, YAN WU] - https://parasol.tamu.edu/public) s
5 137 M
(ations/download.php?file_id=191) s
5 115 M
(        34.67\) Bitonic Sort Implementation - [Amrutha Mullapudi] - https://www.cse.buffalo.) s
5 104 M
(edu//faculty/miller/Courses/CSE633/Mullapudi-Spring-2014-CSE633.pdf - input size is n=2^k a) s
5 93 M
(nd parallel execution time O\(logn^2\) for Batcher Bitonic Sort - Hyperbolic Pixelated Factor) s
5 82 M
(ization is in NC because bitonic sort is in NC and is also optimal if O\(logn\) depth AKS sor) s
5 71 M
(ting networks are used, because O\(n\) * O\(logn\) = O\(nlogn\) which is serial sorting time lowe) s
5 60 M
(rbound.) s
5 38 M
(        34.68\) PRAMs and Multicore architectures - http://blog.computationalcomplexity.org/) s
5 27 M
(2008/04/revenge-of-parallelism.html ) s
5 16 M
( ) s
5 5 M
(        34.69\) NC and PRAMs - http://www.cse.iitd.ernet.in/~subodh/courses/CSL860/slides/3p) s
_R
S
%%Page: (37) 37
%%BeginPageSetup
_S
18 36 translate
/pagenum 37 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (37) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ram.pdf) s
5 720 M
(        34.70\) Geometric Searching, Ray Shooting Queries - [Michael T.Goodrich] - http://ww) s
5 709 M
(w.ics.uci.edu/~goodrich/pubs/42.pdf - Section 42.5 - Ray Shooting is defined as searching a) s
5 698 M
( point location in set of line segments by shooting a ray from a point outside the set of l) s
5 687 M
(ine segments. It is an open problem to find an efficient data structure for parallel ray sh) s
5 676 M
(ooting which searches n points in parallel by shooting n light rays. Previous Hyperbolic Fa) s
5 665 M
(ctorization can also be rephrased as parallel shooting problem which searches the factor po) s
5 654 M
(ints on the pixelated hyperbolic tile segments in parallel from an external point outside t) s
5 643 M
(he hyperbola and answers the open question in affirmative.) s
5 621 M
(        34.71\) Planar Point Location in Parallel - ftp://ftp.cs.brown.edu/pub/techreports/8) s
5 610 M
(9/cs89-45a.pdf - Section 4 - Point Location problem is defined as searching a query point q) s
5 599 M
( in a set of line segments. Discretized/Pixelated Hyperbola has number of line segments in ) s
5 588 M
(O\(loglogN\). Finding factors \(p,q\) such that pq=N is planar point location problem which sea) s
5 577 M
(rches for the factors in the tiled hyperbolic line segments.Point Location can be done in p) s
5 566 M
(arallel by PRAM.) s
5 544 M
(        34.72\) One dimensional Point Location - https://www.csun.edu/~ctoth/Handbook/chap38) s
5 533 M
(.pdf - Section 38.1 - List searching - Tiled hyperbolic line segments are one dimensional i) s
5 522 M
(ntervals and number of intervals are O\(loglogN\). Searching this list amounts to finding a f) s
5 511 M
(actor of N.) s
5 489 M
(        34.73\) Hoover-Klawe-Pippenger Algorithm for converting arbitrary circuit to bounded) s
5 478 M
( fanout 2 - [Ogihara-Animesh] - http://www.cs.rochester.edu/u/ogihara/research/DNA/cec.ps.g) s
5 467 M
(z) s
5 445 M
(        34.74\) PRAM definition of NC - [Kristoffer Arnsfelt Hansen] - https://users-cs.au.d) s
5 434 M
(k/arnsfelt/CT08/scribenotes/lecture7.pdf) s
5 412 M
(        34.75\) Factorization, Planar Point Location in parallel, Cascading, Polygon pixelat) s
5 401 M
(ion of hyperbola - [Mikhail Atallah] - https://pdfs.semanticscholar.org/1043/702e1d4cc71be4) s
5 390 M
(6388cc12cd981ee5ad9cb4.pdf -Section 4.5 - Art Gallery) s
5 379 M
( Pixelation of Hyperbola pq=N \(described in 465\) creates a polygon covering it and Factors ) s
5 368 M
(of N are points located in the vertices of this polygon: Parallel Planar Point Location alg) s
5 357 M
(orithms involve Cascading technique to find the factor query points p and q on the faces of) s
5 346 M
( this polygon. Cascading algorithms execute in multiple levels of the processor tree per st) s
5 335 M
(age and there are logarithmic number of stages - O\(logN\) parallel time. Cascading derives i) s
5 324 M
(ts nomenclature from relay nature of computation. Node at height h is "woken-up" and comput) s
5 313 M
(es its subtree only after certain number of stages e.g h. This reduces integer factorizatio) s
5 302 M
(n to Parallel Planar Point Location on Polygon.) s
5 280 M
(        34.76\) Multicores,PRAMs,BSP and NC - [Vijaya Ramachandran] - https://womenintheory.) s
5 269 M
(files.wordpress.com/2012/05/vijaya-wit12.pdf) s
5 247 M
(        34.77\) Word Size in a PRAM - https://hal.inria.fr/inria-00072448/document - Equatio) s
5 236 M
(n 5 - logN <= w \(N is input size and w word size\)) s
5 214 M
(        34.78\) Prefix Sum Computation and Parallel Integer Sorting - [Sanguthevar Rajasekar) s
5 203 M
(an, Sandeep Sen] - http://www.cse.iitd.ernet.in/~ssen/journals/acta.pdf - "...Specifically,) s
5 192 M
( we show that if the word length is sufficiently large, the problem of integer sorting redu) s
5 181 M
(ces to the problem of prefix sum computation. As a corollary we get an integer sorting algo) s
5 170 M
(rithm that runs in time O\(log n\) using n/log n processors with a word length of n^epsilon, ) s
5 159 M
(for any constant epsilon > 0....") s
5 137 M
(        34.79\) AMD Kaveri Heterogeneous System Architecture and hUMA - treats CPU and GPUs ) s
5 126 M
(equally, best suited for algorithms involving binary searches, zero-copy \(GPU and CPU have ) s
5 115 M
(access to memory by pointers\) - an example for Parallel RAM -  https://www.anandtech.com/sh) s
5 104 M
(ow/7677/amd-kaveri-review-a8-7600-a10-7850k/6, https://pdfs.semanticscholar.org/90ec/1e63da) s
5 93 M
(44821d94c86047fa2f728504d89a4d.pdf) s
5 71 M
(        34.80\) Philosophical implications of Factorization in NC - NC in BPNC in RNC in QNC) s
5 60 M
( in BQP in DQP in EXP - https://www.math.ucdavis.edu/~greg/zoology/diagram.xml - Presently ) s
5 49 M
(factorization is known to be in BQP and NC-PRAM factorization implies factorization is in N) s
5 38 M
(C, implying a decoherence from Quantum to Classical world - Rabi Oscillations - https://www) s
5 27 M
(.youtube.com/watch?v=OONFQgwbV9I - superposed quantum state |p> = Sigma\(|ai>si\) settles in ) s
5 16 M
(one of the classical states si on interaction with classical world. No cloning theorem impl) s
5 5 M
(ies quantum state cannot be replicated. Since NC-PRAM equivalence is in BQP, a natural ques) s
_R
S
%%Page: (38) 38
%%BeginPageSetup
_S
18 36 translate
/pagenum 38 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (38) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(tion arises: Are Parallel RAMs replicated quantum states and thus violate No Cloning?) s
5 720 M
(        34.81\) An Oracle Result for relativized BQP and P - [Fortnow-Rogers] - https://arxi) s
5 709 M
(v.org/pdf/cs/9811023.pdf - There exists an oracle A for which P^A = BQP^A - Theorems 4.1,4.) s
5 698 M
(2,4.3 - Pages 9-10 - This is significant because  with respect to some oracle, Quantum comp) s
5 687 M
(utation is equivalent to and can be simulated by Deterministic Classical Computation in pol) s
5 676 M
(ynomial time. In the context of PRAM-NC factorization, this theorem applies because NC^A is) s
5 665 M
( in P^A \(Christopher Wilson - https://link.springer.com/chapter/10.1007/3-540-16486-3_111\) ) s
5 654 M
(for any oracle A. Sequential Optimization for Computational Geometric Factorization mention) s
5 643 M
(ed in 506 implies a weaker result - Factorization is in P. An example Oracle for Factorizat) s
5 632 M
(ion is the set of beacons \(approximate factors\) obtained by Ray-Shooting queries. Shor's Qu) s
5 621 M
(antum Factorization \(mentioned in 350\) involves period finding - finding period r such that) s
5 610 M
( f\(x\)=f\(x+r\). Ray shooting queries are also period finding algorithms in the sense that gap) s
5 599 M
(s between prime factors are estimated approximately - if f is a ray shooting query oracle A) s
5 588 M
(, querying f returns the next prime factor pf\(n+1\) = pf\(n\) + gap \(exactly or approximately\)) s
5 577 M
( in classical deterministic polynomial time which is in NC^A or P^A. Ray shooting can be pe) s
5 566 M
(rformed in both P and BQP from the previous equivalence of period finding and prime factor ) s
5 555 M
(gap ray shooting i.e in P^A and BQP^A. ) s
5 533 M
(        34.82\) Factorization by Planar Point Location and Persistent Binary Search Trees - ) s
5 522 M
([Sarnak-Tarjan] - https://pdfs.semanticscholar.org/731f/a2d06bd902b9fd7f3d5c3a17485edfe4133) s
5 511 M
(c.pdf - Planar Point Location problem is defined as locating the polygon containing the que) s
5 500 M
(ry point in a subdivision of 2D plane by the line segments creating the polygons. Persisten) s
5 489 M
(t Binary Search Trees are versioned Binary Trees which support insert/delete and preserve t) s
5 478 M
(he past history of the Binary Search Tree for queries. Factorization is a Planar Point Loca) s
5 467 M
(tion problem - Pixelated hyperbolic tile segments create set of polygons \(arrays of pixels ) s
5 456 M
(forming a rectangle of dimension 1 * length_of_tile_segment\) and these polygons divide 2D p) s
5 445 M
(lane. Factor points \(pixels\) are located in some of these polygons. Planar Point Location r) s
5 434 M
(etrieves the polygon containing the factor point in O\(logN\) time. This retrieved polygon ti) s
5 423 M
(le segment can in turn be binary searched in O\(logN\) time because of implicit sortedness \(e) s
5 412 M
(ither x or y axis points are strictly ascending\). To be in NC, Parallel RAM Construction of) s
5 401 M
( Persistent Binary Search Tree is necessary.) s
5 379 M
(        34.83\) Factorization by Planar Point Location - [PARALLEL TRANSITIVE CLOSURE AND PO) s
5 368 M
(INT LOCATION IN PLANAR STRUCTURES, ROBERTO TAMASSIA AND JEFFREY S. VITTER] - Parallel RAM c) s
5 357 M
(onstruction of Bridge Separator Tree for Planar Point Location - http://citeseerx.ist.psu.e) s
5 346 M
(du/viewdoc/download?doi=10.1.1.72.4319&rep=rep1&type=pdf - Separators are st-paths in plana) s
5 335 M
(r subdivision graph formed by the hyperbolic line segments of pixel-array polygons on 2D pl) s
5 324 M
(ane. "...The separator tree uses O\(n\) space and supports point location queries in O\(\(logn\)) s
5 313 M
(^2\) time, where n is the number of vertices of S [33]..." - Lemma 4.5 - "... Let S be a reg) s
5 302 M
(ular subdivision with n vertices. The bridged separator tree for point location in S can be) s
5 291 M
( constructed by an EREW PRAM in O\(log n\) time using n/log n processors, which is optimal ..) s
5 280 M
(.". Thus a factor point N=pq within some of the hyperbolic pixel-array polygons can be foun) s
5 269 M
(d in O\(\(logN\)^2 + logN\) = O\(\(logN\)^2\) PRAM time and O\(N/logN\) processors. Number of rectang) s
5 258 M
(le polygons in planar subdivision created by the hyperbolic pixel-array = N of vertices 4*N) s
5 247 M
(. This concurs with O\(\(logN\)^2\) to O\(\(logN\)^3\) PRAM time for Segment Trees. This factorizat) s
5 236 M
(ion by parallel planar point location is work-optimal and is in NC requiring N/logN process) s
5 225 M
(ors.) s
5 203 M
(        34.84\) Criticism and defence of PRAM model - [Casanova-Legrand-Robert] - Parallel A) s
5 192 M
(lgorithms - http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.466.8142&rep=rep1&type) s
5 181 M
(=pdf - Section 1.5 - "...NC is the class of all problems which, with a polynomial number of) s
5 170 M
( PUs, can be solved in polylogarithmic time. An algorithm of size n is polylogarithmic if i) s
5 159 M
(t can be solved in O\(log\(n\)^c \) time with O\(n^k\) PUs, where c and k are constants. Problems) s
5 148 M
( in NC can be solved efficiently on a parallel computer ... common criticism of the PRAM mo) s
5 137 M
(del is the unrealistic assumption of an immediately addressable unbounded shared parallel m) s
5 126 M
(emory. ... \342\\200\242 Theory is not everything: theoretical results are not to be taken as is a) s
5 115 M
(nd implemented by engineers.  \342\\200\242 Theory is also not nothing: the fact that an algorithm) s
5 104 M
( cannot in general be implemented as is does not mean it is meaningless. ...") s
5 82 M
(        34.85\) Parallel Point in Planar Subdivision - Design and Analysis of Parallel Algor) s
5 71 M
(ithms - [Selim Akl] - https://dl.acm.org/citation.cfm?id=63471 - Section 11.2.2 - Point in ) s
5 60 M
(Planar Subdivision) s
5 38 M
(        34.86\) Alternatives to Parallel RAM - QSM - http://theory.stanford.edu/~matias/pape) s
5 27 M
(rs/qsm.pdf - [Philip b.Gibbons, Yossi Matias, Vijaya Ramachandran] -  Parallel RAM algorith) s
5 16 M
(ms lay stress on sharing memory by processing elements while Bridging models like QSM, LogP) s
5 5 M
( and BSP \(Bulk Synchronous Parallel\) rely on Message Passing between processors having loca) s
_R
S
%%Page: (39) 39
%%BeginPageSetup
_S
18 36 translate
/pagenum 39 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (39) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(l non-shared memory and communicating with peer elements within finite number of messages \() s
5 731 M
(h-relation\). Each computation is termed a superstep constrained by barrier synchronization ) s
5 720 M
(amongst the processors performing local computation. ) s
5 698 M
(        34.87\) Communication Efficient Parallel Sorting - [Michael T.Goodrich] - https://ww) s
5 687 M
(w.ics.uci.edu/~goodrich/pubs/parsort-pre.pdf - Parallel Sorting on BSP instead of PRAMs - f) s
5 676 M
(ootnote 1 - page 247: PRAM is a BSP model having h-relation = 1 and therefore BSP is in NC ) s
5 665 M
(by this PRAM simulation.) s
5 643 M
(        34.88\) PRAM and Bulk Synchronous Parallel - http://www.cse.iitd.ernet.in/~subodh/co) s
5 632 M
(urses/COL730/pdfslides/6pram.pdf - Schematic diagram for Barrier Synchronization Superstep) s
5 610 M
(        34.89\) Bridging model for Parallel Computation - http://web.mit.edu/6.976/www/hando) s
5 599 M
(ut/valiant2.pdf - [Leslie G.Valiant] - "... that even the most general model, the CRCW PRAM) s
5 588 M
(, can be simulated optimally on the BSP model given sufficient slack if g is regarded as a ) s
5 577 M
(constant..." - slack is the ratio of number of virtual processors \(v=plogp\) to physical pro) s
5 566 M
(cessors \(p\) = plogp/p and g is the ratio of total computation performed by all local nodes ) s
5 555 M
(per second to total number of data words delivered per second.) s
5 533 M
(        34.90\) Definition of NC - Computational Complexity - [Christos Papadimitriou] - Pag) s
5 522 M
(e 375 - Problems solvable by polynomial number of PRAMs in polylogarithmic depth.) s
5 500 M
(        34.91\) NOW-Sort - https://people.eecs.berkeley.edu/~fox/summaries/database/nowsort.) s
5 489 M
(html - High-Performance Sorting on Networks of Workstations - MinuteSort) s
5 478 M
(        ) s
5 467 M
(        34.92\) NSort - Parallel Sorting - http://citeseerx.ist.psu.edu/viewdoc/summary?doi=) s
5 456 M
(10.1.1.23.1823 ) s
5 434 M
(        34.93\) Improved Sorting Networks - [R.L. \(Scot\) Drysdale, Frank H. Young] - https:/) s
5 423 M
(/search.proquest.com/openview/3d400dff715e308df20e8812113844d7/1?pq-origsite=gscholar&cbl=6) s
5 412 M
(66313 - SIAM Journal of Computing Volume 4, Number 3, 1975) s
5 390 M
(        34.94\) Definition of Sorting Networks - Runtime of Sorting Networks is its depth an) s
5 379 M
(d there exists an O\(logN\) depth Sorting Network - https://courses.engr.illinois.edu/cs573/f) s
5 368 M
(a2012/lec/lec/19_sortnet.pdf - implies sorting networks is in NC.) s
5 346 M
(        34.95\) Ajtai-Komlos-Szemeredi \(AKS\) Sorting Network - Proof of existence of O\(logN\)) s
5 335 M
( depth Sorting Network - https://www.cl.cam.ac.uk/teaching/1415/AdvAlgo/lec2_ann.pdf - Sort) s
5 324 M
(ing Networks are graphs consisting of input and comparator wires. Input wires are connected) s
5 313 M
( by comparator at specific points. Inputs traversing this graph while finding a comparator ) s
5 302 M
(are swapped if top wire has greater value than bottom wire. This process propagates till th) s
5 291 M
(e output is reached. Output gates contain sorted integers. Logdepth sorting networks are co) s
5 280 M
(nstructed by Bipartite Expander Graphs - approximate halvers - which split the inputs into ) s
5 269 M
(two sets of smallest and largest in two halves of the wires \(bitonic\). This implies computa) s
5 258 M
(tional geometric sorting networks of O\(logN\) time for sorting the hyperbolic tile segments ) s
5 247 M
(and finding the factors by binary search but constant in O\(logN\) is notoriously huge.) s
5 225 M
(        34.96\) Complexity of Boolean Functions - [Ingo Wegener] - Blue Book - https://eccc.) s
5 214 M
(weizmann.ac.il/resources/pdf/cobf.pdf - Circuit lowerbounds are difficult because efficienc) s
5 203 M
(y has to be proved over all possible circuits computing a function - Theorem 7.5 - Page 402) s
5 192 M
( - Boolean function on n variables can be computed by a PRAM time lowerbound of Omega\(loglo) s
5 181 M
(gn\). This lowerbound is relevant to Computational geometric factorization by binary searchi) s
5 170 M
(ng hyperbolic tile pixelation on PRAMs\(number of variables = number of bits in integer to f) s
5 159 M
(actorize\). Integer factorization circuits on PRAMs \(e.g PRAM circuits for parallel planar p) s
5 148 M
(oint location algorithms to locate a factor point on hyperbolic arc bow\) have polylogarithm) s
5 137 M
(ic depth \(parallel time\) and for each PRAM in the longest path from root to leaf of the cir) s
5 126 M
(cuit, this lowerbound applies. Factorization lowerbound for all PRAMs along this longest pa) s
5 115 M
(th is Omega\(\(logN\)^k*logloglogN\) if n=logN.) s
5 93 M
(        34.97\) List of Parallel Planar Point Location Algorithms - Table 42.5.1 - Parallel ) s
5 82 M
(Geometric Searching Algorithms - https://www.ics.uci.edu/~goodrich/pubs/42.pdf) s
5 60 M
(        34.98\) Parallel Planar Point Location - [Atallah-Goodrich-Cole] - Purdue e-Pubs - h) s
5 49 M
(ttps://pdfs.semanticscholar.org/f80e/bfe40dfbfad40659ff82e80cb632a3feeeb8.pdf?_ga=2.2110713) s
5 38 M
(14.671597020.1548674481-1949614478.1548674481 - Section 4.2 - Factorization is a planar poi) s
5 27 M
(nt location problem - Hyperbolic arc pixelation creates juxtaposed rectangular polygons of ) s
5 16 M
(tile segments each of them internally sorted. Factorization N=pq amounts to finding the pol) s
5 5 M
(ygon \(segment\) containing the point N which is O\(logN\) in CREW PRAM time. Binary Searching ) s
_R
S
%%Page: (40) 40
%%BeginPageSetup
_S
18 36 translate
/pagenum 40 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (40) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(this implicitly sorted polygon yields the factor point \(p,q\) and additional O\(logN\) time.Ti) s
5 731 M
(les are computed by the relation delta = N/[x\(x+1\)]) s
5 709 M
(        34.99\) Optimal Bounds for Decision Problems on the CRCW PRAM - [Beame-Hastad] - htt) s
5 698 M
(ps://homes.cs.washington.edu/~beame/papers/crcwparity.pdf - "...Optimal Q\(logn/log logn\) lo) s
5 687 M
(wer bounds on the time for CRCW PRAMS with polynomially bounded numbers of processors or me) s
5 676 M
(mory cells to compute parity and a number of related problems are proven..." - Corollary 4.) s
5 665 M
(2 - these lowerbounds apply to all sorting problems on CRCW PRAMs and to k-mergesort/segmen) s
5 654 M
(t tree of hyperbolic segments in computational geometric factorization. ) s
5 632 M
(        34.100\) BSP versus PRAM - Survey - https://web.njit.edu/~alexg/courses/cis668/Fall2) s
5 621 M
(000/handsub5.pdf) s
5 599 M
(35. \(THEORY\) Above Discrete Hyperbolic Factorization can be used as a numerical dataset ana) s
5 588 M
(lysis technique. Discrete Hyperbolic Factorization uses only elementary geometric principle) s
5 577 M
(s which can be fortified into an algebraic geometry result, because of strong connection be) s
5 566 M
(tween geometry \(hyperbola\) and algebra \(unique factorization theorem\) for integer rings - e) s
5 555 M
(xcluding Kummer's theorem for counterexamples when Unique Factorization is violated\(e.g \(sq) s
5 544 M
(rt\(5\)+1\)\(sqrt\(5\)-1\)/4 = 2*3 = 6\).) s
5 522 M
(###########################################################################################) s
5 511 M
(#############################) s
5 500 M
(B.      EXPERIMENTAL NON-STATISTICAL INFERENCE MODEL BASED ON ALREADY KNOWN THEORETICAL COM) s
5 489 M
(PUTER SCIENCE RESULTS:) s
5 478 M
(###########################################################################################) s
5 467 M
(#############################) s
5 445 M
(36.1. \(FEATURE - DONE-WordNet Visualizer implementation for point 15\) The classification us) s
5 434 M
(ing Interview Algorithm Definition Graph \(obtained from Recursive Gloss Overlap algorithm d) s
5 423 M
(escribed in http://arxiv.org/abs/1006.4458 , https://sites.google.com/site/kuja27/TAC2010pa) s
5 412 M
(persubmission.pdf?attredirects=0 and http://www.nist.gov/tac/publications/2010/participant.) s
5 401 M
(papers/CMI_IIT.proceedings.pdf \) wordnet node indegrees can classify a same document in mul) s
5 390 M
(tiple classes without any training set \(unsupervised\). Thus same document will be in multip) s
5 379 M
(le classes. This can be visualized as one stack per class and documents in same class are p) s
5 368 M
(ushed into a stack corresponding to each class. When a same document is across multiple cla) s
5 357 M
(sses, a document can be visualized as a "hyperedge" of a hypergraph that transcends multipl) s
5 346 M
(e class nodes. Here each class node in this non-planar graph \(or multi-planar graph\) is a s) s
5 335 M
(tack.) s
5 313 M
(36.2. \(THEORY\) Thus if number of classes and documents are infinite, an infinite hypergraph) s
5 302 M
( is obtained. This is also somewhat a variant of an inverted index or a hashtable where in ) s
5 291 M
(addition to hashing ,the chained buckets across the keys are interconnected \(Quite similar ) s
5 280 M
(to https://sites.google.com/site/kuja27/SurvivalIndexBasedTxnTimeoutManager.pdf?attredirect) s
5 269 M
(s=0 and https://sites.google.com/site/kuja27/PhDThesisProposal.pdf?attredirects=0\). This is) s
5 258 M
( also similar to "Connectionism" in Computational Psychology which allows cycles or interco) s
5 247 M
(nnections in Perceptrons and Neural Networks. An old version of this was written in an old ) s
5 236 M
(deleted blog few years ago in 2006 at: http://shrinivaskannan.blogspot.com. If the relation) s
5 225 M
( between Hash Functions and Integer Partitions is also applied as described using Generatin) s
5 214 M
(g Functions in https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions.pdf?at) s
5 203 M
(tredirects=0 then an upperbound on number of possible Hypergraphs \(visualizing them as inte) s
5 192 M
(rconnected Hash tables\) can be derived which is a stronger notion to prove.) s
5 170 M
(37.\(FEATURE - PoC WordNet Visualizer Closure DONE\) Above multiplanar hypergraph is quite re) s
5 159 M
(lated as a theoretical construct to a Pushdown Automata for Context Free Grammar. Also the ) s
5 148 M
(Definition Graph Construction using Recursive Gloss Overlap is a Context-Sensitive counterp) s
5 137 M
(art of Parse Trees obtained for Context Free Grammar, but ignoring Parts-Of-Speech Tagging ) s
5 126 M
(and relying only on the relation between words or concepts within each sentence of the docu) s
5 115 M
(ment which is mapped to a multipartite or general graph. Infact this Definition Graph and C) s
5 104 M
(oncept Hypergraph constructed above from indegrees quite resemble a Functional Programming ) s
5 93 M
(Paradigm where each relationship edge is a Functional Program subroutine and the vertices a) s
5 82 M
(re the parameters to it. Thus a hyperedge could be visualized as Composition Operator of Fu) s
5 71 M
(nctional Programs including FP routines for Parts-of-Speech if necessary [WordNet or above ) s
5 60 M
(Concept Hypergraph can be strengthened with FPs like LISP, Haskell etc.,]. RecursiveNeuralN) s
5 49 M
(etworks\(MV-RNN and RNTN\) have a notion of compositionality quite similar to Functional Prog) s
5 38 M
(ramming in FPs \(Reference: http://nlp.stanford.edu/~socherr/EMNLP2013_RNTN.pdf \) but for tr) s
5 27 M
(ee structures. Applying the compositionality for Concept Hypergraphs constructed above usin) s
5 16 M
(g FPs is a possible research direction.) s
_R
S
%%Page: (41) 41
%%BeginPageSetup
_S
18 36 translate
/pagenum 41 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (41) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(38.\(THEORY\) But above is not context free because context is easily obtainable from the hyp) s
5 731 M
(eredge which connects multiple classes. As an experimental gadget above seems to represent ) s
5 720 M
(an alternative computational model for context sensitivity and also process of human though) s
5 709 M
(t. This needs HyperEdge Search algorithms for hypergraph. A Related Neuropsychological noti) s
5 698 M
(on of Hippocampus Memory Allocation in Human Brain can be found in http://people.seas.harva) s
5 687 M
(rd.edu/~valiant/Hippocampus.pdf. Also a similar gadget is a special case of Artificial Neur) s
5 676 M
(al Network - http://en.wikipedia.org/wiki/Hopfield_network - Hopfield Network - used to mod) s
5 665 M
(el human associative memory \(pattern based memory retrieval than address based retrieval\). ) s
5 654 M
(Hyperedges of the above hypergraph can be memory vectors retrieved in an associative memory) s
5 643 M
(.) s
5 621 M
(39.\(THEORY\) An interesting academic question to pose is - "Does the above hypergraph have a) s
5 610 M
( strong connectivity and a diameter upperbounded by a constant?". Equivalently, is the coll) s
5 599 M
(ection of universal knowledge close-knit or does nature connect seemingly unrelated concept) s
5 588 M
(s beyond what is "observable"? For example, path algorithms for Hypergraphs etc., can be ap) s
5 577 M
(plied to check s-t connectivity of two concepts. Some realworld linear programming and opti) s
5 566 M
(mization problems which have strong natural applications are KnapSack problem,Tiling Proble) s
5 555 M
(m or Packing problem that occur in everyday life of humanbeings \(packing items for travel, ) s
5 544 M
(arranging on a limited space etc.,\). Thus the concept hypergraph might have a path connecti) s
5 533 M
(ng these.  ) s
5 511 M
(40.\(THEORY\) A recent result of Rubik's cube \(http://www.cube20.org/\) permutations to get so) s
5 500 M
(lution having a constant upperbound \(of approximately 20-25 moves\) indicates this could be ) s
5 489 M
(true \(if all intermediary states of Rubik's transitions are considered as vertices of a con) s
5 478 M
(vex polytope of Concepts then isn't this just a Simplex algorithm with constant upperbound?) s
5 467 M
( Is every concept reachable from any other within 20-25 moves? Or if the above hypergraph i) s
5 456 M
(s considered as a variant of Rubik's Cube in higher dimensions, say "Rubik's Hypercube" the) s
5 445 M
(n is every concept node reachable from the other within 20 logical implication moves or is ) s
5 434 M
(the diameter upperbounded by 20?\).  Most problems for hypergraph are NP-Complete which are ) s
5 423 M
(in P for graphs thus making lot of path related questions computationally harder. Counting ) s
5 412 M
(the number of paths in hypergraph could be #P-Complete. There was also a recent study on co) s
5 401 M
(nstant upperbound for interconnectedness of World Wide Web document link graph which furthe) s
5 390 M
(r substantiates it \(http://www9.org/w9cdrom/160/160.html - paragraph on diameter of the Str) s
5 379 M
(ongly Connected Component Core of WWW\). Probably this is a special case of Ramsey theory th) s
5 368 M
(at shows order emerging in large graphs \(monochromatic subgraphs in an arbitrary coloring o) s
5 357 M
(f large graph\).) s
5 335 M
(41.\(THEORY\) Mapping Rubik's Cube to Concept Wide Hypergraph above - Each configuration in R) s
5 324 M
(ubik's Cube transition function can be mapped to a class stack node in the Concept Hypergra) s
5 313 M
(ph. In other words a feature vector uniquely identifies each node in each class stack verte) s
5 302 M
(x of the Hypergraph. Thus move in a Rubik's cube is nothing but the hyperedge or a part of ) s
5 291 M
(the hyperedge that contains those unique vectors. Thus hyperedges signify the Rubik's cube ) s
5 280 M
(moves. For example if each class stack vertex is denoted as c\(i\) for i-th class and each el) s
5 269 M
(ement of the stack is denoted by n\(i\) i.e. nth element of stack for class i, then the order) s
5 258 M
(ed pair [c\(i\),n\(i\)] uniquely identifies a node in class stack and correspondingly uniquely ) s
5 247 M
(identifies an instantaneous face configuration of a Rubik's Hypercube\(colored subsquares re) s
5 236 M
(present the elements of the feature vector\). Thus any hyperedge is a set of these ordered p) s
5 225 M
(airs that transcend multiple class stacks.) s
5 203 M
(42.\(THEORY\) The Multiplanar Primordial Field Turing Machine model described by the author i) s
5 192 M
(n "Theory of Shell Turing Machines" in [http://sites.google.com/site/kuja27/UndecidabilityO) s
5 181 M
(fFewNonTrivialQuestions.pdf?attredirects=0] with multiple dimensions seems to be analogous ) s
5 170 M
(to the above. If dimension info is also added to each plane in above hypergraph then both a) s
5 159 M
(bove formulations and Shell Turing Machines look strikingly similar. One more salient featu) s
5 148 M
(re of this hypergraph is that each class node stack indirectly encodes timing information f) s
5 137 M
(or events from bottom to top of the stack and height of each stack independently varies. Th) s
5 126 M
(us this is more than just a hypergraph. There also exists a strong similarity with Evocatio) s
5 115 M
(n WordNet \(one word "reminding" or "evocative" of the other\) - http://wordnet.cs.princeton.) s
5 104 M
(edu/downloads.html - difference being above is a hypergraph of facts or concepts rather tha) s
5 93 M
(n just words. The accuracy of sense disambiguation is high or even 100% because context is ) s
5 82 M
(the hyperedge and also depends on how well the hyperedges are constructed connecting the cl) s
5 71 M
(ass stack vertices.) s
5 49 M
(43.\(THEORY\) Instead of a wordnet if a relationship amongst logical statements \(First Order ) s
5 38 M
(Logic etc.,\) by logical implication is considered then the above becomes even more importan) s
5 27 M
(t as this creates a giant Concept Wide Web as mentioned in [http://sourceforge.net/projects) s
5 16 M
(/acadpdrafts/files/ImplicationGraphsPGoodEquationAndPNotEqualToNPQuestion_excerpts.pdf/down) s
5 5 M
(load] and thus is an alternative knowledge representation algorithm.) s
_R
S
%%Page: (42) 42
%%BeginPageSetup
_S
18 36 translate
/pagenum 42 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (42) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(44.\(THEORY\)  Implication graphs of logical statements can be modelled as a Random Growth Ne) s
5 720 M
(twork where a graph is randomly grown by adding new edges and vertices over a period of lea) s
5 709 M
(rning. ) s
5 687 M
(45.\(THEORY\)  If a statistical constraint on the degree of this graph is needed, power law d) s
5 676 M
(istributions \(Zipf, Pareto etc.,\) can be applied to the degrees of the nodes along with Pre) s
5 665 M
(ferential Attachment of newborn nodes.) s
5 643 M
(46.\(THEORY\) Set cover or Hitting Set of Hypergraph is a Transversal of hypergraph which is ) s
5 632 M
(a subset of set of vertices in the hypergraph that have non-empty intersection with every h) s
5 621 M
(yperedge. Transversal of the above Concept Wide Hypergraph is in a way essence of the knowl) s
5 610 M
(edge in the hypergraph as in real world what this does is to grasp some information from ea) s
5 599 M
(ch document \(which is a hyperedge of class vertices\) and produces a "summary nucleus subgra) s
5 588 M
(ph" of the knowledge of the encompassing hypergraph.) s
5 566 M
(47.\(THEORY\)  Random walk on the above concept hypergraph, Cover time etc., which is a marko) s
5 555 M
(v process. Probably, Cover time of the hypergraph could be the measure of time needed for l) s
5 544 M
(earning the concept hypergraph.) s
5 522 M
(48.\(THEORY - IMPLEMENTATION - DONE\)  Tree decomposition or Junction Trees of concept hyperg) s
5 511 M
(raph with bounded tree width constant.[If Junction tree is constructed from Hypergraph mode) s
5 500 M
(lled as Bayesian Network, then message passing between the treenodes can be implemented, bu) s
5 489 M
(t still needs to be seen as what this message passing would imply for a junction tree of co) s
5 478 M
(ncept hypergraph above.]. A tree width measure computing script for Recursive Gloss Overlap) s
5 467 M
( graph for a text document has been added in python-src/InterviewAlgorithm which is a stand) s
5 456 M
(ard graph complexity measure.) s
5 434 M
(49.\(THEORY\)  2\(or more\)-dimensional random walk model for thinking process and reasoning \(S) s
5 423 M
(occer model in 2-dimensions\):) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-----------------------------) s
5 390 M
(As an experimental extension of point 47 for human reasoning process,  random walk on non-p) s
5 379 M
(lanar Concept hypergraph \(collective wisdom gained over in the past\) or a planar version of) s
5 368 M
( it which is 2-dimensional can be theorized. Conflicts in human mind could mimick the bipar) s
5 357 M
(tite competing sets that make it a semi-random walk converging in a binary "decision". Semi) s
5 346 M
( randomness is because of the two competing sets that drive the "reasoning" in opposite dir) s
5 335 M
(ections. If the planar graph is generalized as a complex plane grid with no direction restr) s
5 324 M
(ictions \(more than 8\), and the direction is anything between 0 to 2*pi radians, then the di) s
5 313 M
(stance d after N steps is sqrt\(N\) \(summation of complex numbers and the norm of the sum\) wh) s
5 302 M
(ich gives an expression for decision making time in soccer model.\(related: http://web.archi) s
5 291 M
(ve.org/web/20041210231937/http://oz.ss.uci.edu/237/readings/EBRW_nosofsky_1997.pdf\). In oth) s
5 280 M
(er words, if mental conflict is phrased as "sequence of 2 bipartite sets of thoughts relate) s
5 269 M
(d by causation" then "decision" is dependent on which set is overpowering. That is the corr) s
5 258 M
(esponding graph vertices are 2-colored, one color for each set and yet not exactly a bipart) s
5 247 M
(ite graph as edges can go between nodes of same set. Brownian Motion is also a related to t) s
5 236 M
(his. Points \(53.1\) and \(53.2\)  describe a Judge Boolean Function \(with TQBF example\) which ) s
5 225 M
(is also a decision making circuit for each voter in P\(Good\) summation with interactive prov) s
5 214 M
(er-verifier kind of adversarial notions based on which a voter makes a choice.  ) s
5 203 M
( ) s
5 181 M
(##################################################################################) s
5 170 M
(C.      Slightly Philosophical - Inferences from conflicting opinions:) s
5 159 M
(################################################################################## ) s
5 137 M
(50. \(DONE\) As an example, if there are "likes" and "dislikes" on an entity which could be a) s
5 126 M
(nything under universe - human being, machine, products, movies, food etc., then a fundamen) s
5 115 M
(tal and hardest philosophical question that naturally has evaded an apt algorithm: Is there) s
5 104 M
( a way to judge an entity in the presence of conflicting witnesses - "likes" and "dislikes") s
5 93 M
( - and how to ascertain the genuineness of witnesses. In http://arxiv.org/abs/1006.4458 and) s
5 82 M
( http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf this ) s
5 71 M
(has been the motivation for Interview Algorithm and P\(Good\) error probability for majority ) s
5 60 M
(voting which is the basis for this. Moreover the opinions of living beings are far from cor) s
5 49 M
(rect due to inherent bias and prejudices which a machine cannot have.) s
5 27 M
(51. \(DONE\) Another philosophical question is what happens to the majority voting when every) s
5 16 M
( voter or witness is wrong intentionally or makes an error by innocous mistake.[http://sour) s
5 5 M
(ceforge.net/projects/acadpdrafts/files/ImplicationGraphsPGoodEquationAndPNotEqualToNPQuesti) s
_R
S
%%Page: (43) 43
%%BeginPageSetup
_S
18 36 translate
/pagenum 43 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (43) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(on_excerpts.pdf/download]. This places a theoretical limitation on validity of "perceptiona) s
5 731 M
(l judgement" vis-a-vis the "reality".) s
5 709 M
(52. \(THEORY\) There is a realword example of the above - An entity having critical acclaim d) s
5 698 M
(oes not have majority acclaim often. Similarly an entity having majority acclaim does not h) s
5 687 M
(ave critical acclaim. Do these coincide and if yes, how and when? This could be a Gaussian ) s
5 676 M
(where tails are the entities getting imperfect judgements and the middle is where majority ) s
5 665 M
(and critical acclaim coincide.) s
5 643 M
(53. \(THEORY\) Items 50,51,52 present the inherent difficulty of perfect judgement or perfect) s
5 632 M
( inference. On a related note,Byzantine algorithms have similar issues of deciding on a cou) s
5 621 M
(rse of action in the presence of faulty processors or human beings and faulty communication) s
5 610 M
(s between them. Thus, probably above problem reduces to Byzantine i.e Faulty human beings o) s
5 599 M
(r machines vote "like" or "dislike" on an entity and a decision has to be taken. This is al) s
5 588 M
(so in a way related to Boolean Noise Sensitivity where collective intelligence of an entity) s
5 577 M
( can be represented as a "judging" boolean function and its decision tree. This "judge" boo) s
5 566 M
(lean function accepts arguments from two opposing parties and outputs 1 or 0 in favour of o) s
5 555 M
(ne of them. How perfect is this "judge" depends on NoiseSensitivity of its boolean function) s
5 544 M
(. Thus a perfect judge boolean function is 100% NoiseStable even though attempts are made t) s
5 533 M
(o confuse it through noise inputs.) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(------------------------------) s
5 489 M
(53.1 \(THEORY\) Judge Boolean Function \(there doesn't seem to be an equivalent to this in lit) s
5 478 M
(erature - hence it is defined as below\):) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(------------------------------) s
5 445 M
(A Judge Boolean function f:\(0,1\)^n->\(0,1\) has two classes of input sets of bit sets \(x1,x2,) s
5 434 M
(x3,...\) and \(y1,y2,y3,...\) corresponding to two adversarial parties x and y and outputs 0 \() s
5 423 M
(in favor of x\) or 1 \(in favor of y\) based on the decision tree algorithm internal to f. Eac) s
5 412 M
(h xi and yi are sets of bits and hence input is set of sets \(Intuitively such classes of bo) s
5 401 M
(olean functions should be part of interactive proof systems.\). This function is quite relev) s
5 390 M
(ant to P\(Good\) summation because:) s
5 379 M
(        - LHS PRG/Dictator boolean function choice can also be thought of as randomly chose) s
5 368 M
(n Judge boolean function \(from a set of judge boolean functions\) defined above. NoiseStabil) s
5 357 M
(ity of this Judge boolean function is its efficacy.) s
5 346 M
(        - In RHS, each voter has a judge boolean function above and NoiseStability of Boole) s
5 335 M
(an Function Composition of Maj*Judge is its efficacy.) s
5 324 M
(        - An example: From https://sites.google.com/site/kuja27/InterviewAlgorithmInPSPACE.) s
5 313 M
(pdf?attredirects=0, Judge Boolean Function can be a Quantified Boolean Formula \(QBF\) i.e \(T) s
5 302 M
(here exists f\(xi\) \(For all g\(yk\) ...\(\(\(...\)\)\). Intuitively this simulates a debate transcri) s
5 291 M
(pt \(prover-verifier\) between x and y that is moderated by the QBF judge boolean function. O) s
5 280 M
(f interest is the NoiseStability of this QBF.) s
5 269 M
(        - QBF is PSPACE-complete and hence Judge Boolean Function is PSPACE-complete. ) s
5 258 M
(        - Thus LHS of P\(good\) is in PSPACE \(a pseudorandomly chosen Judge Boolean Function\)) s
5 247 M
( while RHS of P\(good\) is still in PH=DC where each voter's Judge Boolean Function is fed in) s
5 236 M
(to Majority circuit inputs, because, if the QBF is of finite depth then RHS is depth-restri) s
5 225 M
(cted and due to this RHS is in PH=DC. Thus if P\(Good\) probability is 1 on either side then ) s
5 214 M
(there exists a PSPACE algorithm for PH implying PSPACE=PH than an intimidatingly unacceptab) s
5 203 M
(le P=PH. If there is no quantifier depth restriction on either side both LHS and RHS can gr) s
5 192 M
(ow infinitely making both of them EXP. This makes Judge Boolean Function somewhat a plausib) s
5 181 M
(le Voter Oracle than simple boolean functions - each voter is intrinisically allowed an int) s
5 170 M
(elligence to make a choice amongst 2 adversaries.) s
5 159 M
(        - Since Judgement or Choice among two adversaries is a non-trivial problem, it is b) s
5 148 M
(etter to have each Voter's SAT in RHS and that of pseudorandom choice in LHS to be in the h) s
5 137 M
(ardest of complexity classes known. Thus interpretation of convergence of P\(Good\) series de) s
5 126 M
(pends on hardness of judgement boolean function \(it could be from simple 2-SAT,3-SAT,k-SAT ) s
5 115 M
(upto PSPACE-QBFSAT and could be even more upto Arithmetic Hierarchy\) some of which might ha) s
5 104 M
(ve circuit_complexity\(LHS\) == circuit_complexity\(RHS\) while some might not. ) s
5 93 M
(        - Reference: QBF-SAT solvers and connections to Circuit Lower Bounds - [RahulSantha) s
5 82 M
(nam-RyanWilliams] - http://web.stanford.edu/~rrwill/QBFSAT_SODA15.pdf) s
5 71 M
(        - A complex Judging scenario: Doctrinal Paradox \(or\) Discursive dilemma - Paradoxes) s
5 60 M
( in Majority voting where both Yes and No are possible in judgement aggregations - https://) s
5 49 M
(en.wikipedia.org/wiki/Discursive_dilemma. [Open question: What is the majority circuit or b) s
5 38 M
(oolean equivalent of such a paradox with both Yes and No votes]) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(------------------------------) s
_R
S
%%Page: (44) 44
%%BeginPageSetup
_S
18 36 translate
/pagenum 44 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (44) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(53.2 \(THEORY\) P\(Good\) Convergence, Voter TQBF function, PH-completeness and EXP-completenes) s
5 731 M
(s - Adversarial reduction) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(------------------------------) s
5 698 M
(P\(Good\) RHS is in PH if depth restricted and in EXP if depth unrestricted. LHS is a pseudor) s
5 687 M
(andomly chosen Judge Boolean Function. PH-completeness or EXP-completeness of RHS remains t) s
5 676 M
(o be proven \(if not obvious\). PH is the set of all problems in polynomial hierarchy - PH=U ) s
5 665 M
(sigma\(p,i\). For every i there exists a problem in sigma\(p,i\) that is sigma\(p,i\)-complete. I) s
5 654 M
(f there exists a PH-complete problem then PH collapses to sigma\(p,i\) for some level i.[Arij) s
5 643 M
(it Bishnu - http://www.isical.ac.in/~arijit/courses/spring2010/slides/complexitylec12.pdf] ) s
5 632 M
(. Hence it remains an open question if there exists a PH-complete problem. Thus instead of ) s
5 621 M
(depth restriction, the hardest depth unrestricted EXP circuit class\(EXP=DC\) is analyzed as ) s
5 610 M
(a Judge Boolean Function. There are known EXP-complete problems e.g. Generalized Chess with) s
5 599 M
( n*n board and 2n pawns - [Fraenkel - http://www.ms.mff.cuni.cz/~truno7am/slozitostHer/ches) s
5 588 M
(sExptime.pdf]. In RHS, each voter has a Judge Boolean Function, output of which is input to) s
5 577 M
( Majority circuit. This Judge Boolean Function can be shown to be EXP-complete by reduction) s
5 566 M
( from Chess. Reduction function is as below:) s
5 555 M
(Each Voter can be thought of as simulator of both adversaries in Chess i.e Voter TQBF has t) s
5 544 M
(wo sets of inputs x1,x2,x3,... and y1,y2,y3,... Each xi is a move of adversary1-simulated-b) s
5 533 M
(y-voter while each yi is a move of adversary2-simulated-by-voter. Voter thus makes both sid) s
5 522 M
(es of moves and votes for x or y depending on whichever simulation wins. Thus there is a re) s
5 511 M
(duction from generalized Chess EXP-complete problem to Voter Judge Boolean Function \(specia) s
5 500 M
(l cases of Chess with n constant are PSPACE-complete\). Hence RHS is a Majority\(n\) boolean f) s
5 489 M
(unction composed with EXP-complete Judge Boolean Function \(assumption: voters vote in paral) s
5 478 M
(lel\). When P\(Good\) summation converges to 1\(i.e Judge Boolean Function has zero noise and 1) s
5 467 M
(00% stability existence of which is still an open problem\), LHS is an EXP-complete algorith) s
5 456 M
(m for RHS which is harder than EXP-complete - it is still quite debatable as to how to affi) s
5 445 M
(x notation to above RHS - probably it is P/EXP\(access to an oracle circuit\) or P*EXP\(compos) s
5 434 M
(ition\).RHS of P\(Good\) belongs to a family of hardest of boolean functions. [Kabanets - http) s
5 423 M
(://www.cs.sfu.ca/~kabanets/papers/thes-double.pdf] describes various classes of hard boolea) s
5 412 M
(n functions and Minimum Circuit Size Problem [is there a circuit of size at most s for a bo) s
5 401 M
(olean function f] and also constructs a read-once\(each variable occurs once in the branchin) s
5 390 M
(g\) branching program hard boolean function [Read-Once Branching Programs - http://www.math.) s
5 379 M
(ias.edu/~avi/PUBLICATIONS/MYPAPERS/RWY97/proc.pdf, Bounded Width polysize Branching Program) s
5 368 M
(s and non-uniform NC1 - http://www.complexity.ethz.ch/education/Lectures/ComplexityHS10/Scr) s
5 357 M
(iptChapterTwelve] . In a general setting, RHS of P\(Good\) summation is m-EXP-complete \(stair) s
5 346 M
(case exponents\). RHS always has a fixed complexity class \(PH-complete or EXP-complete or NE) s
5 335 M
(XP-complete if RHS is non-deterministically evaluated\) while only complexity class of LHS c) s
5 324 M
(hanges due to pseudorandomly chosen Judge Boolean Function. Even Go is EXP-complete which h) s
5 313 M
(as close to 10^170 possibilities which is greater than chess - same person simulates both s) s
5 302 M
(ides of adversaries and captures territory by surrounding.) s
5 280 M
(A special case of Complexity of Quantified 3-CNF Boolean Forumlas is analyzed in http://ecc) s
5 269 M
(c.hpi-web.de/report/2012/059/download/ - if 3CNF quantified boolean formulas of n variables) s
5 258 M
( and poly\(n\) size can be decided in 2^\(n-n^\(0.5+e\)\) time deterministically, NEXP is not con) s
5 247 M
(tained in NC1/poly. This has direct implications for P\(Good\) majority voting circuit - if L) s
5 236 M
(HS is 100% noise stable NC1/poly percolation boolean function circuit and RHS is Quantified) s
5 225 M
( 3-CNF QBFs as Judge Boolean Functions decidable in 2^\(n-n^\(0.5+e\)\) time then, since NEXP i) s
5 214 M
(n RHS can not have NC1/poly circuits, RHS P\(Good\) summation shouldn't be equal to LHS which) s
5 203 M
( implies that RHS NEXPTIME Quantified 3-CNF decidable in 2^\(n-n^\(0.5+e\)\) time cannot be 100) s
5 192 M
(% noise stable. There are other NEXP-complete problems viz., Succinct 3-SAT. The 100% noise) s
5 181 M
( stability regime for percolation boolean function is described in [http://arxiv.org/pdf/11) s
5 170 M
(02.5761.pdf - page 68]) s
5 148 M
(Depth Hierarchy Theorem ,a recent result in 2015 in http://arxiv.org/pdf/1504.03398.pdf pro) s
5 137 M
(ved PH to be infinite relative to some and random oracles i.e PH does not collapse with res) s
5 126 M
(pect to oracles, which mounts the evidence in favour of non-existence of PH-Complete proble) s
5 115 M
(ms, but does not rule them out.) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(--------------------) s
5 71 M
(53.3 \(THEORY- *IMPORTANT* \) Conditions for complexity classes of LHS and RHS of P\(Good\) sum) s
5 60 M
(mation being equated) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(--------------------) s
5 27 M
(RHS of P\(Good\) is either PH-complete or EXP-complete as mentioned in 53.2.) s
5 16 M
(LHS of P\(Good\) is a pseudorandomly chosen Judge Boolean Function while RHS is a huge mixtur) s
5 5 M
(e of judge boolean functions of almost all conceivable complexity classes depending on vote) s
_R
S
%%Page: (45) 45
%%BeginPageSetup
_S
18 36 translate
/pagenum 45 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (45) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(r which together make the DC-circuit. LHS thus can belong to any of the complexity classes ) s
5 731 M
(depending on the pseudorandom choice.) s
5 709 M
(Probability of LHS Judge Boolean Function belonging to a complexity class C with NoiseStabi) s
5 698 M
(lity p is =) s
5 687 M
(Probability of LHS PRG choice Judge Boolean Function in complexity class C * Probability of) s
5 676 M
( Goodness in terms of NoiseStability of PRG choice =) s
5 665 M
( c/n * p where c is the number of judge boolean functions in complexity class C and n is th) s
5 654 M
(e total number of judge boolean functions) s
5 632 M
(When p=1 and c=n LHS is 1 and is a complexity class C algorithm to RHS PH-complete or EXP-c) s
5 621 M
(omplete DC circuit when RHS P\(Good\) summation in terms of NoiseStabilities also converges t) s
5 610 M
(o 1. Thus complexity_class\(LHS\) has a very high probability of being unequal to complexity_) s
5 599 M
(class\(RHS\). This is the perfect boolean function problem \(in point 14 above\) rephrased in p) s
5 588 M
(robabilities. This is very tight condition as it requires:) s
5 577 M
(  - boolean function composition in RHS is in some fixed circuit complexity class \(PH-compl) s
5 566 M
(ete or EXP-complete\) and only LHS complexity class varies depending on pseudorandom choice) s
5 555 M
(  - LHS has to have 100% noise stability) s
5 544 M
(  - RHS has to have 100% noise stability) s
5 533 M
(Thus above conditions are to be satisified for equating complexity classes in LHS and RHS t) s
5 522 M
(o get a lowerbound result. Also convergence assumes binomial complementary cumulative mass ) s
5 511 M
(distribution function as mentioned in 14 above which requires equal probabilities of succes) s
5 500 M
(ses for all voters \(or equal noise stabilities for all voter boolean functions\). Hence vote) s
5 489 M
(rs may have different decision boolean functions but their noise stabilities have to be sim) s
5 478 M
(ilar. If this is not the case, P\(Good\) series becomes a Poisson trial with unequal probabil) s
5 467 M
(ities.) s
5 445 M
(If LHS and RHS of P\(Good\) are not equatable, probability of goodness of LHS and RHS can var) s
5 434 M
(y independently and have any value. LHS and RHS are equatable only if the probability of go) s
5 423 M
(odness \(in terms of noise stabilities on both sides\) is equal on both sides. \(e.g 0.5 and 1) s
5 412 M
(\). Basically what this means is that LHS is an algorithm as efficient as that of RHS. If a ) s
5 401 M
(pseudorandom choice judge boolean function has 100% noise stability then such a choice is f) s
5 390 M
(rom the huge set of boolean functions on RHS .This is an assumption based on the fact that ) s
5 379 M
(any random choice process has to choose from existing set. Also when LHS pseudorandom judge) s
5 368 M
( boolean function choice is 100% noise stable, if RHS had LHS as one of its elements it wou) s
5 357 M
(ld have forced RHS to be 100% and noise stabilities of all other judge boolean functions in) s
5 346 M
( RHS to 0%. Because of this RHS has to exclude LHS pseudorandom choice judge boolean functi) s
5 335 M
(on. That is:) s
5 324 M
(        cardinality\(RHS\) + cardinality\(LHS\) = cardinality\(Universal set of judge boolean fu) s
5 313 M
(nctions\) \(or\)) s
5 302 M
(        cardinality\(RHS\) + 1 = cardinality\(Universal set\)) s
5 291 M
(which is the proverbial "one and all". ) s
5 269 M
(Assuming there exists a boolean percolation function with noise stability 100%, voter with ) s
5 258 M
(such a boolean function could be a pseudorandom choice in LHS and RHS has to exclude this f) s
5 247 M
(unction.) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(-) s
5 203 M
(53.4 \(THEORY\) Variant 1 of Percolation as a Judge boolean function \(related to 14 above\)) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(-) s
5 170 M
(Percolation boolean function returns 1 if there is a left-right crossing event in a path wi) s
5 159 M
(thin the Z^2 grid random graph else 0. The definition of percolation is modified slightly a) s
5 148 M
(s below to obtain a ranking of 2 adversaries:) s
5 137 M
(There are n parameters on which the voter or a judge weighs two adversaries a and b \(each t) s
5 126 M
(ake the 2 coordinates in the grid\) and scores them as set of ordered pairs \(a1,b1\),\(a2,b2\),) s
5 115 M
(\(a3,b3\),...,\(an,bn\) where each ai is the score given by voter for adversary a on parameter ) s
5 104 M
(i and each bi is the score given by voter for adversary n on parameter i. These coordinates) s
5 93 M
( are plotted on the grid and a left-right traversal of these coordinates is done via a path) s
5 82 M
( that covers all of them. At each coordinate, total score summations of ai\(s\) and bi\(s\) so ) s
5 71 M
(far traversed are computed. The boolean function outputs 1 if sum\(ai\) > sum\(bi\) favouring a) s
5 60 M
(dversary a and outputs 0 if sum\(ai\) < sum\(bi\) favouring adversary b. This is just a 2 candi) s
5 49 M
(date ranking variant of 3-candidate condorcet elections. In terms of circuit complexity, th) s
5 38 M
(is is an iterated integer addition circuit\(in non-uniform NC1\) which inputs to a comparator) s
5 27 M
( circuit\(in AC0 - [Chandra-Stockmeyer-Vishkin] - http://cstheory.com/stockmeyer@sbcglobal.n) s
5 16 M
(et/csv.pdf\) which together make non-uniform NC1 \(since AC0 is contained in NC1\). Thus this ) s
5 5 M
(variant of percolation decides based on sum of integral scores than left-right crossing. It) s
_R
S
%%Page: (46) 46
%%BeginPageSetup
_S
18 36 translate
/pagenum 46 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (46) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( always has a left-right crossing and there are no random graph edges.) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(--) s
5 698 M
(53.5 \(THEORY\) Variant 2 of Percolation as a Judge boolean function \(related to 14 above\)) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(--) s
5 665 M
(53.5.1 Both x and y axes have the criteria common to both adversaries a and b as coordinate) s
5 654 M
(s.) s
5 643 M
(53.5.2 If adversary a is equal to b for a criterion c, then there is a horizontal left-righ) s
5 632 M
(t edge with probability p.) s
5 621 M
(53.5.3 If adversary b is better than a for criterion c, then there is a vertical edge \(down) s
5 610 M
(-top\) with probability p.) s
5 599 M
(53.5.4 If adversary a is better than b for criterion c, then there is a vertical edge \(top-) s
5 588 M
(down\) with probability p.) s
5 577 M
(-----------------) s
5 566 M
(53.5.5 Example 1:) s
5 555 M
(-----------------) s
5 544 M
(criterion    a    b) s
5 533 M
(c1           5    4 \(top-down\)) s
5 522 M
(c2           3    5 \(down-top\)) s
5 511 M
(c3           2    2 \(left-right\)) s
5 500 M
(c4           4    6 \(down-top\)) s
5 489 M
(c5           7    8 \(down-top\)) s
5 478 M
(        --------------------) s
5 467 M
(            21    25  \(a < b\)) s
5 456 M
(        --------------------) s
5 445 M
(----------------) s
5 434 M
(53.5.6 Example 2:) s
5 423 M
(----------------) s
5 412 M
(criterion    a    b) s
5 401 M
(c1           2    1 \(top-down\)) s
5 390 M
(c2           7    2 \(top-down\)) s
5 379 M
(c3           5    5 \(left-right\)) s
5 368 M
(c4           3    8 \(down-top\)) s
5 357 M
(c5           9    7 \(top-down\)) s
5 346 M
(        ---------------------) s
5 335 M
(            26    23  \(a > b\)) s
5 324 M
(        ---------------------) s
5 313 M
(53.5.7 Length of each edge is proportional to the difference between score\(a\) and score\(b\) ) s
5 302 M
(at criterion c.) s
5 291 M
(53.5.8 Lemma: a is better than b implies a top-down crossing event and b is better than a i) s
5 280 M
(mplies down-top crossing event.) s
5 269 M
(Proof: If a is better than b in majority of the criteria then the path is more "top-down"-i) s
5 258 M
(sh due to 53.5.4 \(top-left to bottom-right\) and if b is better than a then path is more "do) s
5 247 M
(wn-top"-ish due to 53.5.3 \(bottom-left to top-right\). Thus this formulation of percolation ) s
5 236 M
(subdivides left-right paths into two classes top-down and down-top and all paths are left-r) s
5 225 M
(ight paths.) s
5 214 M
(53.5.9 Above variant of percolation boolean function returns 1 if path is top-down \(a > b\) ) s
5 203 M
(else 0 if path is down-top \(a < b\).) s
5 192 M
(53.5.10 Previous description is an equivalence reduction of percolation and judging two adv) s
5 181 M
(ersaries.) s
5 170 M
(53.5.11 To differentiate top-down and down-top left-right paths, comparator circuits \(const) s
5 159 M
(ant depth, polysize\) and non-uniform NC1 circuit for integer addition of scores are require) s
5 148 M
(d. Together this is also a non-uniform NC1 circuit \(for infinite grid\) similar to Variant1 ) s
5 137 M
(in 53.4.) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(--------------) s
5 93 M
(53.6 \(THEORY\) Circuit for Percolation as a Judge Boolean Function) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(--------------) s
5 60 M
(For an m * m grid with random edges, maximum length of the left-right path is m^2 \(traverse) s
5 49 M
(s all grid cells\). Each boolean function is a path that is represented as set of coordinate) s
5 38 M
(s on grid. If these coordinates form a left-right crossing, then circuit has value 1. Each ) s
5 27 M
(coordinate on the grid requires 2logm bits. Hence maximum input bits required is m^2 * 2log) s
5 16 M
(m = O\(m^2*logm\). Coordinates are sorted on left coordinate left-right ascending by a Sortin) s
5 5 M
(g Netwok \(e.g Batcher-sortingnetworks, Ajtai-Komlos-Szemeredi-AKS-sortingnetworks, Parallel) s
_R
S
%%Page: (47) 47
%%BeginPageSetup
_S
18 36 translate
/pagenum 47 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (47) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( Bitonic Sort - http://web.mst.edu/~ercal/387/slides/Bitonic-Sort97.pdf\). This function out) s
5 731 M
(puts, with the sorted coordinates as inputs:) s
5 720 M
(  - 1 if both x-axis coordinate of the leftmost ordered pair is 0 and x-axis coordinate of ) s
5 709 M
(the rightmost ordered pair is m) s
5 698 M
(  - else 0) s
5 687 M
(which requires comparators. Sorting networks of depth O\(\(logn\)^2*n\) and size O\(n\(logn\)^2\) e) s
5 676 M
(xist for algorithms like Bitonic sort, Merge sort, Shell sort et.,. AKS sorting network is ) s
5 665 M
(of O\(logn\) depth and O\(nlogn\) size. For n=m^2, AKS sorting network is of O\(log\(m^2\)\) depth ) s
5 654 M
(and O\(m^2log\(m^2\)\) size. Thus percolation circuit consists of:) s
5 643 M
(  - Sorting network that sorts the coordinates left-right in NC1 or NC2) s
5 632 M
(  - Comparator circuits in constant depth and polynomial size) s
5 621 M
(which together are in NC. This is non-uniform NC with advice strings as the circuit depends) s
5 610 M
( on percolation grid - e.g BP.\(NC/log\) where advice strings are the grid coordinates and th) s
5 599 M
(e circuit has bounded error \(Noise+delta\). [If the left-right paths are classified as top-d) s
5 588 M
(own and down-top paths for ranking two adversaries \(in 53.5 above\) additional comparator ci) s
5 577 M
(rcuits are required for finding if right coordinate is in top or down half-space. This is b) s
5 566 M
(y comparing the y-axis of the leftmost and rightmost in sorted ordered pairs and output 1 i) s
5 555 M
(f y-axis of leftmost lies between m/2 and m and y-axis of rightmost lies between 0 and m/2 ) s
5 544 M
(\(top-down\) and output 0 else \(down-top\).]) s
5 522 M
(Above percolation circuit based on Sorting networks is not optimal for arbitrarily large in) s
5 511 M
(puts. As per Noise Stability Regime [page 68 - http://arxiv.org/pdf/1102.5761.pdf - Christo) s
5 500 M
(phe Garban, Jeffrey E.Steif], for epsilon=o\(1/n^2*alpha4\), Pr[fn\(crossing event sequence\)=f) s
5 489 M
(n\(crossing event sequence with epsilon perturbation\)] tends to zero at infinity where alpha) s
5 478 M
(4 is the four-arm crossing event probability \(paths cross at a point on the percolation ran) s
5 467 M
(dom graph creating four arms to the boundary from that point\). In terms of fourier expansio) s
5 456 M
(n coefficients this is: summation\(fourier_coeff\(S\)^2\) tending to zero, |S| > n^2*alpha4. Ci) s
5 445 M
(rcuit for this arbitrarily large percolation grid would be infinitely huge though can be te) s
5 434 M
(rmed as non-uniform NC sorting-network+comparator and hence a non-uniform circuit for an un) s
5 423 M
(decidable problem. Noise stability tending to zero depends not just on input, but on "infin) s
5 412 M
(ite-input".) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(-------------) s
5 368 M
(53.7 \(THEORY\) P/Poly and P\(Good\) LHS and RHS - Karp-Lipton and Meyer's Theorems) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(-------------) s
5 335 M
(P/poly is the circuit class of polynomial size with polynomial advice strings and unrestric) s
5 324 M
(ted depth. Thus P/poly is non-uniform circuit class.  Hence non-uniform NC is in P/poly. In) s
5 313 M
( 53.4, 53.5 and 53.6 example non-uniform NC1 circuits \(subject to 100% noise stablility\) Pe) s
5 302 M
(rcolation boolean function were described. These are in P/poly as non-uniform NC is in P/po) s
5 291 M
(ly and thus LHS of P\(Good\) is in P/poly. Hence when LHS and RHS binomial coefficient summat) s
5 280 M
(ions converge to 100% noise stability satisfying the conditions in 53.3, LHS is a P/poly al) s
5 269 M
(gorithm to RHS EXPTIME DC uniform circuit \(because both sides are depth unrestricted\). To b) s
5 258 M
(e precise LHS is an NC/poly circuit. If the advice string is logarithmic size, it is NC/log) s
5 247 M
( and there is a known result which states that NP in P/log implies P=NP. For percolation bo) s
5 236 M
(olean functions with 100% noise stability regime \(page 68 - http://arxiv.org/pdf/1102.5761.) s
5 225 M
(pdf\), if the grid boundaries are the only advice strings, boundary coordinates can be speci) s
5 214 M
(fied in log\(N\) bits and hence LHS is in NC/log.) s
5 192 M
(If RHS is simply NP \(if depth restricted and unlikely for arbitrary number of electorate\) t) s
5 181 M
(hen LHS is a P/poly algorithm to RHS NP implying NP is contained in P/poly. By Karp-Lipton ) s
5 170 M
(theorem NP in P/poly implies that PH collapses to second-level i.e sigma\(p,2\) and from [Arv) s
5 159 M
(ind, Vikraman; K\303\266bler, Johannes; Sch\303\266ning, Uwe; Schuler, Rainer \(1995\)] NP in P/poly impl) s
5 148 M
(ies AM=MA.) s
5 126 M
(EXPTIME version of this is Meyer's Theorem which states that if EXPTIME is in P/poly \(which) s
5 115 M
( is the hardest case for RHS of P\(good\) and can be m-EXPTIME\) then EXPTIME = sigma\(p,2\) \\in) s
5 104 M
(tersection pi\(p,2\) and EXPTIME=MA. When RHS of P\(good\) is a DC uniform EXPTIME circuit, P\(g) s
5 93 M
(ood\) convergence subject to availability of 100% noise stable percolation boolean functions) s
5 82 M
( satisfying conditions in 53.3, implies that EXPTIME=MA.) s
5 60 M
(References:) s
5 49 M
(----------) s
5 38 M
(53.7.1 Relation between NC and P/poly - http://cs.stackexchange.com/questions/41344/what-is) s
5 27 M
(-the-relation-between-nc-and-p-poly) s
5 16 M
(53.7.2 P/poly - https://en.wikipedia.org/wiki/P/poly) s
5 5 M
(53.7.3 Karp-Lipton Theorem - https://en.wikipedia.org/wiki/Karp%E2%80%93Lipton_theorem) s
_R
S
%%Page: (48) 48
%%BeginPageSetup
_S
18 36 translate
/pagenum 48 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (48) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(53.7.4 NP in P/poly implies AM=MA - [Arvind, Vikraman; K\303\266bler, Johannes; Sch\303\266ning, Uwe; S) s
5 731 M
(chuler, Rainer \(1995\),] - http://www.informatik.hu-berlin.de/forschung/gebiete/algorithmenI) s
5 720 M
(I/Publikationen/Papers/ma-am.ps.gz) s
5 709 M
(53.7.5 BPP,PH,P/poly,Meyer's theorem etc., - http://www.cs.au.dk/~arnsfelt/CT10/scribenotes) s
5 698 M
(/lecture9.pdf) s
5 687 M
(53.7.6 Descriptive Complexity - https://books.google.co.in/books?id=kWSZ0OWnupkC&pg=PA177&l) s
5 676 M
(pg=PA177&dq=NC1/poly&source=bl&ots=6oGGZVk4fa&sig=Y_4syLFZ-nTj4L0qrBxxWve75EA&hl=en&sa=X&ve) s
5 665 M
(d=0CBsQ6AEwAGoVChMI66v6tqqSyQIVyZCOCh2uMwyr) s
5 654 M
(53.7.7 Non-uniform computation - https://courses.engr.illinois.edu/cs579/sp2009/slides/cc-s) s
5 643 M
(09-lect10.pdf) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(--------------------------------) s
5 599 M
(53.8 \(THEORY\) An example Majority+SAT majority voting circuit, P\(Good\) convergence and some) s
5 588 M
( observations on Noise Stability) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(--------------------------------) s
5 555 M
(Let the number of voters be 8 \(=2^3\). Each voter has a boolean function of 3 variables - x1) s
5 544 M
(,x2 and x3. From Boolean Function Composition, this is defined as Maj\(SAT1\(x1,x2,x3\),SAT2\(x) s
5 533 M
(1,x2,x3\),...,SAT8\(x1,x2,x3\)\). Each variable xi corresponds to a criterion i and xi=1 if and) s
5 522 M
( only if the criterion i is satisfied in 2-candidate voting \(candidate0 and candidate1\). Th) s
5 511 M
(us all voters should vote xi=1 if the candidate1 satisfies criterion xi. If some of the vot) s
5 500 M
(ers vote xi=0 even though the candidate1 satisifes criterion xi, then it becomes noise in t) s
5 489 M
(he boolean function. This composition has exponential size in number of inputs \(32 = 2^3 + ) s
5 478 M
(3*2^3\) = O\(n*exp\(n\)\)\). For negation NOT gates are allowed and it is not necessarily a monot) s
5 467 M
(one circuit. If the variables are different for each voter, there are 24 variables and circ) s
5 456 M
(uit is polynomial in input size - O\(n^k\).This illustrates the pivotality of noise when vote) s
5 445 M
(rs have a variable in common.) s
5 423 M
(If the RHS doesn't converge to 1 and thus is in BPP and Noise Stability of LHS is 100% \(e.g) s
5 412 M
( by PRG choice of a percolation function\) then LHS is a P/poly algorithm for RHS BPP. This ) s
5 401 M
(implies BPP is in P/poly , an already known amplification result. Infact this result implie) s
5 390 M
(s something stronger: Since BPP is in P/poly, even if RHS doesn't converge, there is always) s
5 379 M
( a P/poly algorithm in LHS by amplification.) s
5 357 M
(If the RHS has a perfect k-SAT boolean decision function for all voters, size of the circui) s
5 346 M
(t is super-polynomial and sub-exponential\(if exponential, circuit is DC uniform\), P\(Good\) s) s
5 335 M
(eries converges to 100% and LHS is 100% noise stable Percolation function, then LHS is a P/) s
5 324 M
(poly algorithm for RHS NP-complete instance. Special case is when RHS has only one voter - ) s
5 313 M
(LHS is P/poly \(or NC/poly or NC/log\) and RHS is NP-complete\(assuming k-SAT of RHS voter is ) s
5 302 M
(100% noise stable\) - and thus there is a P/poly circuit for NP in such a special case. From) s
5 291 M
( [Karp-Lipton] \(53.7\) if NP is in P/poly, PH collapses to second level and AM=MA. If LHS is) s
5 280 M
( P/log and RHS is NP, then P=NP. Thus 100% noise stable boolean function in LHS has huge ra) s
5 269 M
(mifications and the P\(Good\) summation, its circuit version devour complexity arena in toto ) s
5 258 M
(and variety of results can be concluded subject to noise stability.) s
5 236 M
(If LHS of P\(Good\) is in NC/log \(Percolation as Judge boolean function\) and RHS doesn't conv) s
5 225 M
(erge to 100% \(i.e Majority*SAT boolean function composition has < 100% noise stability\), LH) s
5 214 M
(S is a more efficient NC/log algorithm for RHS BP* hard circuit\(e.g RHS is single voter wit) s
5 203 M
(h a SAT judge boolean function without 100% noise stability and thus in BPP\). BPP is alread) s
5 192 M
(y known to have P/poly circuits and this implies a better bound that BPP is in NC/log. BPP ) s
5 181 M
(is not known to have complete problems in which case , NC/log algorithm for RHS BPP-complet) s
5 170 M
(e problem would imply NC/log = BPP for the single voter RHS with 3-SAT judging function wit) s
5 159 M
(h < 100% noise stability.) s
5 137 M
(Subtlety 1: For single voter in RHS with a 3-SAT voter judge boolean function, RHS is NP-co) s
5 126 M
(mplete from voting complexity standpoint irrespective of noise stability\(Goodness of voting) s
5 115 M
(\). But if noise stability is the criterion and 3-SAT is not noise stable 100%, RHS is a BPP) s
5 104 M
( problem. This is already mentioned in point 14 above\(2 facets of voting - judging hardness) s
5 93 M
( and goodness\).) s
5 71 M
(Subtlety 2: [Impagliazzo-Wigderson] theorem states that if there exists a decision problem ) s
5 60 M
(with O\(exp\(n\)\) runtime and Omega\(exp\(n\)\) circuit size, then P=BPP. P\(Good\) RHS being a DC u) s
5 49 M
(niform circuit can have exponential size if variables are common across voter judge boolean) s
5 38 M
( functions, but is questionable if it is a decision problem of runtime O\(exp\(n\)\) - for m-EX) s
5 27 M
(PTIME circuits this bound could be O\(staircase_exp\(n\)\).) s
5 5 M
(NC/log circuits can be made into a uniform circuits by hardwiring advice strings which are ) s
_R
S
%%Page: (49) 49
%%BeginPageSetup
_S
18 36 translate
/pagenum 49 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (49) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(logarithmic size. There are 2^\(log\(n\)\) = n advice strings possible for NC/log circuit with ) s
5 731 M
(O\(logn\) depth and O\(n^k\) size. The n advice strings are added as hardwired gates into NC/lo) s
5 720 M
(g circuit which doesnot alter the polynomial size of the circuit. Due to this NC/log is in ) s
5 709 M
(NC and hence in P. For NC/log LHS with 100% noise stability, if RHS is BPP-complete with < ) s
5 698 M
(100% noise stability, LHS is NC/log algorithm for BPP-complete problem \(or\) BPP is in NC/lo) s
5 687 M
(g and hence in P. But P is in BPP. Together this implies P=BPP if LHS is NC/log and RHS is ) s
5 676 M
(a BPP-complete majority voting circuit\(special case: one voter with less than 100% noise st) s
5 665 M
(ability and 3-SAT boolean function\). This leads to the question: Is there a 3-SAT voter jud) s
5 654 M
(ge boolean function with 100% noise stability? Is percolation with 100% noise stability reg) s
5 643 M
(ime reducible to 3-SAT? If yes, then LHS [P/log, NC/log or P/poly] percolation boolean func) s
5 632 M
(tion with 100% noise stability solves RHS NP-complete problem and hence NP is in P/poly, PH) s
5 621 M
( collapses to second level and AM=MA \(or\) NP is in [P/log, NC/log] and P=NP.) s
5 599 M
(References:) s
5 588 M
(----------) s
5 577 M
(53.8.1 Pseudorandomness - [Impagliazzo-Wigderson] - http://people.seas.harvard.edu/~salil/p) s
5 566 M
(seudorandomness/pseudorandomness-Aug12.pdf) s
5 555 M
(53.8.2 XOR Lemma [Yao] and [Impagliazzo-Wigderson] theorem - theory.stanford.edu/~trevisan/) s
5 544 M
(pubs/stv99stoc.ps) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(------------------------) s
5 500 M
(53.9 \(THEORY\) Possible Scenarios in P\(Good\) LHS and RHS summation) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(------------------------) s
5 467 M
(53.9.1 LHS = RHS is 100%                -   LHS and RHS are equally efficient \(and can be e) s
5 456 M
(quated to get a lowerbound if equal error implies a lowerbound which is still doubtful. Mor) s
5 445 M
(e about this in 53.16\).) s
5 434 M
(53.9.2 LHS is < 100% and RHS is < 100%  -   RHS is more efficient than LHS and both sides a) s
5 423 M
(re in BP* classes) s
5 412 M
(and LHS < RHS) s
5 401 M
(53.9.3 LHS is < 100% and RHS is < 100%  -   LHS and RHS are equally efficient \(and can be e) s
5 390 M
(quated to get a lowerbound if equal error implies a lowerbound which is still doubtful. Mor) s
5 379 M
(e about this in 53.16\). Both are in BP* classes) s
5 368 M
(and LHS = RHS) s
5 357 M
(53.9.4 LHS is < 100% and RHS is < 100%  -   LHS is more efficient than RHS and both sides a) s
5 346 M
(re in BP* classes) s
5 335 M
(and LHS > RHS) s
5 324 M
(53.9.5 LHS is 100% and RHS is < 100%    -   LHS is more efficient than RHS. LHS is non-BP a) s
5 313 M
(lgorithm to RHS BP* algorithm. \(e.g P/poly algorithm for BPP\)) s
5 302 M
(53.9.6 LHS is < 100% and RHS is 100%    -   RHS is more efficient than LHS. RHS is non-BP a) s
5 291 M
(lgorithm to LHS BP* algorithm.) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(-------------------------) s
5 247 M
(53.10 \(THEORY\) Dictatorship, k-juntas testing and P\(Good\) circuit - simulation) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(-------------------------) s
5 214 M
(LHS of P\(Good\) is a pseudorandom choice judge boolean function. It has to be tested for dic) s
5 203 M
(tatorship and k-junta property. This step adds to) s
5 192 M
(the hardness of LHS. What is the probability of LHS pseudorandom choice being a dictator or) s
5 181 M
( k-junta boolean function? This probability is independent of Goodness probability of LHS w) s
5 170 M
(hich is the noise stability. If the size of the population is n and k out of n are having d) s
5 159 M
(ictators or k-juntas as judge boolean functions, probability of LHS being dictator or k-jun) s
5 148 M
(tas is k/n. Following steps are required:) s
5 137 M
(        - PRG Choice outputs a Judge boolean function candidate for LHS.) s
5 126 M
(        - Dictatorship or k-juntas testing algorithm is executed for this candidate PRG cho) s
5 115 M
(ice.) s
5 104 M
(Expected number of steps required for choosing a dictator via PRG is arrived at by Bernoull) s
5 93 M
(i trial. Repeated PRG choices are made and property tested for dictatorship and k-juntas. P) s
5 82 M
(robability of PRG choice being a dictator is k/n. Probability p\(t\) that after t trials a di) s
5 71 M
(ctator or k-juntas is found:) s
5 60 M
(p\(t\) = \(1-k/n\)^\(t-1\)\(k/n\) = \(n-k\)^\(t-1\) * k/n^t) s
5 38 M
(If t is the random variable, expectation of t is:) s
5 27 M
(E\(t\) = sigma\(t*p\(t\)\) = sigma\(\(n-k\)^\(t-1\)*tk/n^t\)) s
5 5 M
(For a property testing algorithm running in O\(q\), time required in finding a dictator or k-) s
_R
S
%%Page: (50) 50
%%BeginPageSetup
_S
18 36 translate
/pagenum 50 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (50) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(juntas is O\(q*sigma\(\(n-k\)^\(t-1\)*tk/n^t\)\)) s
5 720 M
(For k=0:) s
5 709 M
(        E\(t\) = 0) s
5 698 M
(For k=1:) s
5 687 M
(        E\(t\) = sigma\(\(n-1\)^\(t-1\) * t/n^t\) = 1/n + \(n-1\)*2/n^2 + \(n-1\)^2*3/n^3 + ...) s
5 676 M
(             < 1/n + 2n/n^2 + 3n^2/n^3 + ...) s
5 665 M
(             = 1+2+3+...+n/n) s
5 654 M
(             = n\(n+1\)/2n) s
5 643 M
(             = \(n+1\)/2) s
5 632 M
(Thus to find one dictator approximately \(n+1\)/2 PRG expected choices are required. Above is) s
5 621 M
( not necessarily an exact process by which LHS arises but just a simulation of one special ) s
5 610 M
(scenario.) s
5 588 M
([Axiomatically k shouldn't be greater than 1 i.e there shouldn't be more than one dictator ) s
5 577 M
(or juntas. Philosophical proof of this is by contradiction. Every element in a population s) s
5 566 M
(et is subservient to a dictator by definition. The meaning of "dictator" here is global uni) s
5 555 M
(queness for all voters and not locally unique to a voter boolean function. If there are 2 d) s
5 544 M
(ictators population-wide, this definition is violated.]) s
5 522 M
(References:) s
5 511 M
(-----------) s
5 500 M
(53.10.1 Dictatorship,k-juntas testing - [Oded Goldreich] - http://www.wisdom.weizmann.ac.il) s
5 489 M
(/~oded/PDF/pt-junta.pdf) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(---------------------------------) s
5 445 M
(\(THEORY-*IMPORTANT*\) 53.11 Hastad-Linial-Mansour-Nisan \(HLMN\) Theorem and Noise Stable bool) s
5 434 M
(ean functions - Denoisification 1) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(---------------------------------) s
5 401 M
(Hastad-Linial-Mansour-Nisan Theorem states that for a boolean function f:{0,1}^n->{0,1} com) s
5 390 M
(puted by circuit of size < s and depth < d, if the) s
5 379 M
(fourier coefficients for large S are epsilon-concentrated:) s
5 368 M
(        sigma\(fourier_coeff\(S\)^2\) < epsilon for |S| > t where t = O\(\(log s/epsilon\)^\(1/d-1\)) s
5 357 M
(\).) s
5 346 M
(Above implies that:) s
5 335 M
(        t = O\(log s/epsilon\)^\(d-1\) = k*\(log s/epsilon\)^\(d-1\) for some constant k.) s
5 324 M
(        \(t/k\)^\(1/d-1\) = log\(s/epsilon\)) s
5 313 M
(        s = epsilon*2^\(\(t/k\)^1/\(d-1\)\)) s
5 302 M
(For a noisy boolean function f with rho probability of flip, the noise operator T is applie) s
5 291 M
(d to the Fourier expansion of f:) s
5 280 M
(        T\(f\) = sigma\(rho^|S|*fourier_coeff\(S\)*parity\(S\)\) for S in [n] and each Fourier coef) s
5 269 M
(ficient of T\(f\) = rho^|S|*fourier_coeff\(S\)) s
5 258 M
(From HLMN theorem, applying noise operator above \(this needs to be verified\) to noisy boole) s
5 247 M
(an function circuit Fourier spectrum:) s
5 236 M
(        if sigma\([rho^|S|*fourier_coeff\(S\)]^2\) <= epsilon, |S| > t where t=O\(\(log s/epsilon) s
5 225 M
(\)^\(d-1\)\),) s
5 214 M
(        size s = sigma\([rho^|S|*fourier_coeff\(S\)]^2\)*2^[\(t/k\)^1/\(d-1\)] substituting for eps) s
5 203 M
(ilon and |S| > t.) s
5 192 M
(        Thus size of the circuit exponentially depends on t - size of parity sets S in [n] ) s
5 181 M
(- |S| - which can have maximum value of n\(number of inputs\).) s
5 159 M
(If f is 100% noise stable, from Plancherel theorem:) s
5 148 M
(        sigma\(rho^|S|*f\(S\)^2\) = 1, S in [n]) s
5 137 M
(Stability can be written as:) s
5 126 M
(        sigma_S_<_t\(rho^|S|*f\(S\)^2\) + sigma_S_>=_t\(rho^|S|*f\(S\)^2\) = 1) s
5 115 M
(        [1 - sigma_S_<=_t\(rho^|S|*f\(S\)^2\)] = sigma_S_>_t\(rho^|S|*f\(S\)^2\)) s
5 104 M
(Since rho < 1:) s
5 93 M
(        epsilon = sigma_S_>_t_\(\(rho^|S|*f\(S\)\)^2\) < epsilon_stable = sigma_S_>_t_\(rho^|S|*f\() s
5 82 M
(S\)^2\) , |S| > t) s
5 71 M
(        epsilon_stable can also be written as = sigma_S_<_t_\(1-rho^|S|*f\(S\)^2\), |S| < t) s
5 49 M
(        s = sigma[f\(S\)^2] * 2^\(t/k\)^1/\(d-1\)\) , t=O\(\(log s/epsilon\)^\(d-1\)\), |S| > t) s
5 38 M
(        s_stable = [1-sigma_S_<_t\(rho^|S|*f\(S\)^2\)]*2^\(\(t/k\)^1/\(d-1\)\)  , t=O\(\(log s_stable/e) s
5 27 M
(psilon_stable\)^\(d-1\)\), |S| < t) s
5 16 M
(        \(or\)) s
5 5 M
(        s_stable = sigma\(rho^|S|*[fourier_coeff\(S\)]^2\)*2^[\(t/k\)^1/\(d-1\)] , t=O\(\(log s_stabl) s
_R
S
%%Page: (51) 51
%%BeginPageSetup
_S
18 36 translate
/pagenum 51 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (51) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(e/epsilon_stable\)^\(d-1\)\), |S| > t.) s
5 731 M
(s_stable is the size of the 100% noise stable circuit for f.) s
5 720 M
(From above, t with noise operator is:) s
5 709 M
(        t\(noise_operator\)=O\(log s/sigma\(rho^|S|*f\(S\)^2\)\), |S| > t \(or\)) s
5 698 M
(        t\(noise_operator\)=O\(log s/\(1-sigma_S_<_t\(rho^|S|*f\(S\)^2\)\)\), |S| < t) s
5 687 M
(which is substituted for t in s_stable above and t without noise operator is:) s
5 676 M
(        t=O\(log s/sigma\(f\(S\)^2\)\), |S| > t) s
5 665 M
(which implies that t\(noise_operator\) > t since denominator summation of fourier coefficient) s
5 654 M
(s is attenuated by rho^|S| i.e the lowerbound of t in exponent for size increases due to no) s
5 643 M
(ise operator. This should be the case for both expressions of s_stable above using Plancher) s
5 632 M
(el version of stability. This has strong relation to non-uniformity as rho is set of pseudo) s
5 621 M
(random number strings for flip corresponding to values of rho where stability=1 which are a) s
5 610 M
(dvice strings to the circuit. The exponent t\(noise_separator\) increases as rho in denominat) s
5 599 M
(or of log\(s/epsilon_stable\) increases - correlation due to random flip increases - implying) s
5 588 M
( that circuit size depends on increased lowerbound for log\(s/epsilon_stable\) which is a log) s
5 577 M
(arithmic increase in exponent that becomes a polynomial increase in size \(because of 2^log\() s
5 566 M
(\)\). Thus 100% stability requires polynomial increase in circuit size which implies a P/poly) s
5 555 M
( circuit for 100% noise stability. For example, if LHS of P\(Good\) has Percolation circuit i) s
5 544 M
(n P/Poly, with polynomial increase in size 100% noise stability can be obtained. If LHS of ) s
5 533 M
(P\(Good\) has percolation circuit in NC/poly, polynomial increase in size for 100% noise stab) s
5 522 M
(ility would still be in NC/poly, with additional gates adding to depth with bounded fanin. ) s
5 511 M
(Moreover, from \(53.8\), an LHS with 100% noise-stable NC/poly circuit \(if percolation is in ) s
5 500 M
(NC/poly and not P/poly\) for an RHS BPP-complete \(i.e RHS binomial summation need not conver) s
5 489 M
(ge with 100% noise stability\) means BPP is in P and P=BPP.) s
5 467 M
(*Implication 1 of above: If RHS is in BPP \(e.g a 3-SAT voter judge boolean function circuit) s
5 456 M
( with < 100% noise stability or bounded error\) with polynomial size additional gates, it be) s
5 445 M
(comes 100% noise stable i.e a BPP circuit becomes NP-complete instance. But BPP is already ) s
5 434 M
(known to be in P/poly and hence BPP has polynomial size circuits. Hence size\(BPP_circuit\) +) s
5 423 M
( polynomial size addition for stability is still a polynomial = P/poly circuit which makes ) s
5 412 M
(RHS to be 100% noise stable NP-complete from <100% BPP problem. This implies NP has P/poly ) s
5 401 M
(circuits surprisingly and NP in P/poly implies PH collapses to second level sigma\(pi,2\), an) s
5 390 M
(d also AM=MA.) s
5 368 M
(*Implication 2 of above: If LHS of P\(Good\) has BP.\(NC/log\) circuit due to <100% noise stabi) s
5 357 M
(lity, with polynomial size increase it can be derandomized or denoisified to 100% noise sta) s
5 346 M
(ble circuit. NC/log is in P/log. With polynomial size increase P/log is still P/log. If RHS) s
5 335 M
( is BPP it can be denoisified as mentioned in Implication 1 to NP-complete instance. Thus b) s
5 324 M
(oth LHS and RHS converge in P\(Good\) binomial summation and RHS is NP-complete and LHS is P/) s
5 313 M
(log. Thus NP is in P/log implying P=NP.) s
5 291 M
(Points 53.4, 53.5, 53.6 and 53.7 describe P/poly, NC/poly and NC/log circuits for Percolati) s
5 280 M
(on Boolean Functions subject to 100% noise stability regime. Important disclaimer is that a) s
5 269 M
(bove considers only denoisification and just denoisification may not be sufficient to remov) s
5 258 M
(e errors in BP* circuits. As described in 14 on "Noise Stability and Complexity Class BPP" ) s
5 247 M
(table of error scenarios, there might be cases where both denoisification\(removing errors i) s
5 236 M
(n column three\) and derandomization\(removing errors in column two\) might be required that c) s
5 225 M
(ould add to the circuit size. But since BPP is in P/poly \(Adleman's theorem\) this is just a) s
5 214 M
(nother polynomial overhead in size. Thus increase in size due to denoisification + derandom) s
5 203 M
(ization = poly\(n\) + poly\(n\) = poly\(n\) in P/poly.) s
5 181 M
(Noise sensitive NC/log percolation circuit in LHS of P\(Good\) is in BP\(NC/log\) which require) s
5 170 M
(s denoisification and derandomization. Is BP\(NC/log\) in P/log? If yes, this could imply P=N) s
5 159 M
(P when RHS is an error-free NP-complete k-SAT instance \(denoisified and derandomized BPP\). ) s
5 148 M
(BP\(NC/log\) can be denoisified with poly\(n\) additional gates from derivation above from HMLN) s
5 137 M
( theorem which makes NC/log to be in P/log. Next step of derandomization is by naive enumer) s
5 126 M
(ation of all possible pseudorandom advice strings. Assumption here is that length of pseudo) s
5 115 M
(random strings required for derandomizing percolation is log\(n\) which is sufficient to spec) s
5 104 M
(ify any point on an axis in the percolation grid. If log\(n\) bit pseudorandom advice is enum) s
5 93 M
(erated there are 2^\(logn\)=n possible pseudorandom strings which is poly\(n\) addition in circ) s
5 82 M
(uit size again. P/log circuit is executed for all 2^\(logn\) psuedorandom strings which makes) s
5 71 M
( the total runtime n*poly\(n\)=poly\(n\). Thus derandomization takes as input a denoisified P/l) s
5 60 M
(og circuit , adds poly\(n\) gates to it and outputs a circuit that has runtime poly\(n\) with l) s
5 49 M
(ogarithmic advice i.e P/log. This has a strange consequence that NP can have P/log circuits) s
5 38 M
( and P=NP \(Implication 2\) contrary to popular belief if logarithmic advice is valid. Equiva) s
5 27 M
(lently for error-free , denoisified and derandomized PH-Complete problems in RHS \(assuming ) s
5 16 M
(PH-complete problems exist - from \(53.2\) above\), denoisified and derandomized P/log circuit) s
5 5 M
( in LHS implies P=PH - collapse of polynomial hierarchy.) s
_R
S
%%Page: (52) 52
%%BeginPageSetup
_S
18 36 translate
/pagenum 52 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (52) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(---------------------------------) s
5 709 M
(\(THEORY-*IMPORTANT*\) 53.12 Hastad-Linial-Mansour-Nisan \(HLMN\) Theorem and Noise Stable bool) s
5 698 M
(ean functions - Denoisification 2) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(---------------------------------) s
5 665 M
(Above version derived by rewriting HLMN in terms of s\(size\) and t\(size of fourier basis\) is) s
5 654 M
( not too appealing. Basically, rate of change of circuit size with respect to noise is requ) s
5 643 M
(ired and may not be necessary if denoisification is a subproblem of larger derandomization.) s
5 632 M
( It then reduces to the question of how size of circuit increases with derandomization, spe) s
5 621 M
(cifically for BPNC percolation circuits - Since BPP is in P/poly, is BPNC in NC/poly or NC/) s
5 610 M
(log.  From Linial-Mansour-Nisan Theorem - Lemma 7 \(Main Lemma\) - http://www.ma.huji.ac.il/~) s
5 599 M
(ehudf/courses/anal09/LMN.pdf - Circuit size and Fourier coefficients are related as:) s
5 588 M
(        For |S| > t, Summation\(fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 577 M
(For Noise-operated Fourier Spectra, the summation is augmented with rho\(noise operator\):) s
5 566 M
(        For |S| > t, Summation\(rho^|S|*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 555 M
(Applying Plancherel theorem and stability=1:) s
5 544 M
(    ---------------------------------------------------------------------------------------) s
5 533 M
(--------------------------------) s
5 522 M
(    |   For |S| < t, 1-Summation\(rho*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)       ) s
5 511 M
(                          |) s
5 500 M
(    |   => [1-Summation\(rho^|S|*fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= Size          ) s
5 489 M
(                          |) s
5 478 M
(    ---------------------------------------------------------------------------------------) s
5 467 M
(--------------------------------) s
5 456 M
(which is the circuit size lowerbound in terms of noise probability and fourier coefficients) s
5 445 M
(. As rho increases from 0 to 1, lowerbound for) s
5 434 M
(size decreases, that is, low noise requires high circuit size. Partial Derivative of size b) s
5 423 M
(ound wrt rho:) s
5 412 M
(    -Summation\(fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= doe\(Size\)/doe\(rho\)) s
5 401 M
(which points to exponential - in t and d - decrease in size \(because t=O\(n\) and d=O\(functio) s
5 390 M
(n\(n\)\) with linear increase in rho \(noise\) due to negative sign and vice versa. Consequences) s
5 379 M
( of this are significant. Though derandomization could result in polysize circuits, denoisi) s
5 368 M
(fication does not necessarily add poly\(n\) size and in worst case could be exponential too. ) s
5 357 M
(For NC circuits, t=O\(n\) and d=O\(polylog\(n\)\) , denoisification results in 2^O\(n^\(1/polylog\(n) s
5 346 M
(\)\)\) increase in size which is superpolynomial. Stability=1 is the point when LHS and RHS of) s
5 335 M
( P\(Good\) binomial summation converge i.e both sides are equally efficient and are perfect v) s
5 324 M
(oter boolean functions not affected by input noise. Therefore BPNC can not be denoisified i) s
5 313 M
(n polynomial circuit size even if it can be derandomized to be in NC with polynomial size \() s
5 302 M
(i.e if BPNC is in NC/poly\). Thus percolation NC circuit in LHS cannot be made 100% stable w) s
5 291 M
(ith denoisification with mere polynomial size and has superpolynomial size lowerbound. This) s
5 280 M
( implies when RHS is also 100% stable circuit size of RHS is atleast superpolynomial. Rephr) s
5 269 M
(asing:) s
5 258 M
(        -----------------------------------------------------------------------------------) s
5 247 M
(----------------------) s
5 236 M
(        | P\(Good\) binomial summation in its circuit version can not have polynomial size ci) s
5 225 M
(rcuits          |) s
5 214 M
(        | when LHS and RHS converge with 100% noise stability.                             ) s
5 203 M
(                |) s
5 192 M
(        -----------------------------------------------------------------------------------) s
5 181 M
(----------------------) s
5 159 M
(For example, if LHS is a percolation logdepth circuit and RHS is single voter with 3-SAT NP) s
5 148 M
(-complete circuit, when LHS and RHS are both 100% noise stable and derandomized \(rho=0\):) s
5 126 M
(        LHS circuit size >= O\(2^n^\(1/polylog\(n\)\)\) = superpolynomial, quasiexponential lower) s
5 115 M
(bound, depth is polylog\(n\)) s
5 104 M
(implying LHS percolation circuit could become superpolynomial sized when noise stability is) s
5 93 M
( 1 and not in NC despite being logdepth.) s
5 71 M
(        RHS circuit size >= O\(2^n^\(1/d\)\) = higher superpolynomial, quasiexponential lowerbo) s
5 60 M
(und, depth is arbitrary ,could be constant for 3-CNF) s
5 49 M
(and thus LHS and RHS circuits are equally efficient algorithms with differing circuit sizes) s
5 38 M
(. As RHS is NP-complete, LHS is size lowerbound for RHS - LHS has lesser superpolynomial si) s
5 27 M
(ze than RHS where d\(depth of RHS which could be a constant 3\) < polylog\(n\)\(depth of LHS\).) s
5 16 M
([Open question: Does this imply superpolynomial size lowerbounds for NP and thus P != NP]) s
_R
S
%%Page: (53) 53
%%BeginPageSetup
_S
18 36 translate
/pagenum 53 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (53) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(Reference:) s
5 720 M
(-----------) s
5 709 M
(53.12.1 Derandomizing BPNC - [Periklis Papakonstantinou] - http://iiis.tsinghua.edu.cn/~pap) s
5 698 M
(akons/pdfs/phd_thesis.pdf) s
5 687 M
(53.12.2 Derandomization basics - [Salil] - Enumeration - http://people.seas.harvard.edu/~sa) s
5 676 M
(lil/pseudorandomness/basic.pdf) s
5 665 M
(53.12.3 Simplified Hitting Sets Derandomization of BPP - [Goldreich-Vadhan-Wigderson] - htt) s
5 654 M
(p://www.wisdom.weizmann.ac.il/~oded/COL/gvw.pdf - where hitting sets are set of strings at ) s
5 643 M
(least one element of which is accepted by any circuit that accepts atleast half of its inpu) s
5 632 M
(ts \(i.e randomized algorithms in RP and BPP\). Hitting Set generators H expand k\(n\) to n so ) s
5 621 M
(that a function f returns f\(H\(k\(n\)\)\)=1 always where f is in RP or BPP.) s
5 610 M
(53.12.4 Derandomizing BPNC - Existence of Hitting Set Generators for BPNC=NC - [Alexander E) s
5 599 M
(.Andreev, Andrea E.F.Clementi, Jose D.P.Rolim] - http://ac.els-cdn.com/S0304397599000249/1-) s
5 588 M
(s2.0-S0304397599000249-main.pdf?_tid=e56d3a1e-ad3d-11e5-a4ef-00000aacb35e&acdnat=1451291885) s
5 577 M
(_fbff7c6ae94326758cf8d6d7b7a84d7b) s
5 566 M
(53.12.5 Linial-Mansour-Nisan Theorem - Lemma 7 \(Main Lemma\) - http://www.ma.huji.ac.il/~ehu) s
5 555 M
(df/courses/anal09/LMN.pdf:) s
5 544 M
(        For |A| > t, Summation\(fourier_coeff\(A\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 533 M
(53.12.6 The Computational Complexity Column [Allender-Clementi-Rolim-Trevisan] - theory.sta) s
5 522 M
(nford.edu/~trevisan/pubs/eatcs.ps) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(--------------------------) s
5 478 M
(53.13. \(THEORY\) Partial Derivative of Circuit size wrt rho \(noise probability\) - increase i) s
5 467 M
(n circuit size for Denoisification) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(--------------------------) s
5 434 M
(From 53.11 above, size of denoisified circuit from HMLN theorem, and Stability in terms of ) s
5 423 M
(Fourier coefficients with noise operator is:) s
5 412 M
(        s_stable = [1-sigma_S_<_t\(rho^|S|*f\(S\)^2\)]*2^\(\(t/k\)^1/\(d-1\)\)  , t=O\(\(log s_stable/e) s
5 401 M
(psilon_stable\)^\(d-1\)\), |S| < t) s
5 390 M
(        \(or\)) s
5 379 M
(        s_stable = sigma\(rho^|S|*[fourier_coeff\(S\)]^2\)*2^[\(t/k\)^1/\(d-1\)] , t=O\(\(log s_stabl) s
5 368 M
(e/epsilon_stable\)^\(d-1\)\), |S| > t.) s
5 357 M
(Lower bound of exponent increases as sigma\(rho^|S|*f\(S\)^2\) decreases in denominator of expo) s
5 346 M
(nent subject to stability constraint:) s
5 335 M
(        [1 - sigma_S_<=_t\(rho^|S|*f\(S\)^2\)] = sigma_S_>_t\(rho^|S|*f\(S\)^2\)) s
5 324 M
(which implies that sigma_S>t_\(rho^|S|*f\(S\)^2\) decreases when sigma_S<t_\(rho^|S|*f\(S\)^2\) inc) s
5 313 M
(reases. This is Consequence of HMLN theorem that t acts as an inflexion point for Fourier s) s
5 302 M
(pectrum with noise operator - area integral from 0 to t is concentrated greater than area i) s
5 291 M
(ntegral from t to n.) s
5 269 M
(Partial derivative of Circuit size wrt to rho can be derived as:) s
5 258 M
(        delta_s/delta_rho = sigma_S>t_\(|s|*rho^\(|s|-1\) * f\(S\)^2\) / \(1 - sigma_S<t_\(rho^|S|*) s
5 247 M
(f\(S\)^2\)\) where delta_s is increase in size of circuit with delta_rho increase in noise prob) s
5 236 M
(ability. When rho=0, increase in circuit size is 0 \(obvious base case\). When rho=1, which i) s
5 225 M
(s the worst case, increase in circuit size is = sigma_S>t_\(|S|*f\(S\)^2\) / f\(S\)^2 which is up) s
5 214 M
(perbounded by n - poly\(n\) increase in size.) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(----------------------) s
5 170 M
(53.14. \(THEORY\) Hastad-Linial-Mansour-Nisan Theorem, Circuit size, Noise Stability and BP* ) s
5 159 M
(classes) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(----------------------) s
5 126 M
(Percolation circuit defined previously has:) s
5 115 M
(- Sorting Network for creating path sequentially on grid \(NC logdepth and polysize\)) s
5 104 M
(- Comparators \(Constant depth and polysize\) are required for comparing the leftmost and rig) s
5 93 M
(htmost coordinates.) s
5 82 M
(Together Percolation is in non-uniform NC. This circuit depends on number of points on the ) s
5 71 M
(left-right path which is poly\(n\).) s
5 60 M
(Therefore percolation is in NC/poly because size of list of advice strings could be O\(\(n^2\)) s
5 49 M
(log\(n^2\)\) and it may not have NC/log circuits.) s
5 38 M
(From Linial-Mansour-Nisan Theorem - Lemma 7 \(Main Lemma\) - http://www.ma.huji.ac.il/~ehudf/) s
5 27 M
(courses/anal09/LMN.pdf:) s
5 16 M
(        For |A| > t, Summation\(fourier_coeff\(A\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 5 M
(With noise operator, noise stability=1 from Plancherel's theorem:) s
_R
S
%%Page: (54) 54
%%BeginPageSetup
_S
18 36 translate
/pagenum 54 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (54) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    ---------------------------------------------------------------------------------------) s
5 731 M
(--------------------------------) s
5 720 M
(    |   For |S| < t, 1-Summation\(rho^|S|*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)   ) s
5 709 M
(                          |) s
5 698 M
(    |   Corollary: For |S| > t, Summation\(rho^|S|*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/) s
5 687 M
(d\)/20\)                            |) s
5 676 M
(    |   => [1-Summation\(rho^|S|*fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= Size          ) s
5 665 M
(                          |) s
5 654 M
(    ---------------------------------------------------------------------------------------) s
5 643 M
(--------------------------------) s
5 632 M
(When denoisified, rho=0 and lowerbound for size:) s
5 621 M
(        [1-\(0^0*f\(phi\)^2+0+0+..\)]*2^\(\(t^\(1/d\)/20\)-1\) <= size) s
5 610 M
(        [1-f\(phi\)^2]*2^\(\(t^\(1/d\)/20\)-1\) <= size \(as all other coefficients vanish\)) s
5 599 M
(when t=n, the size is lowerbounded by :) s
5 588 M
(        [1-f\(phi\)^2]*2^\(\(n^\(1/d\)/20\)-1\)) s
5 577 M
(which is superpolynomial. This implies an NC/poly polysize circuit when denoisified becomes) s
5 566 M
( O\(2^\(\(n^\(1/polylog\(n\)/20\)-1\) .) s
5 544 M
(From the table that describes relation between Noise and Error\(BP* and PP\) in 14 previously) s
5 533 M
(, it is evident that Noise intersects Error) s
5 522 M
(if following is drawn as a Venn Diagram i.e. Noise stability solves just a fraction of tota) s
5 511 M
(l error, and remaining requires derandomization.) s
5 500 M
(In other words, Noisy circuit could be error-free and Noise-free circuit could have error.) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(------) s
5 467 M
(        x                               |    f\(x\) = f\(x/e\)      |       f\(x\) != f\(x/e\) Nois) s
5 456 M
(e    |) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(------) s
5 423 M
(x in L, x/e in L                        |       No error        |       Error              ) s
5 412 M
(     |) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(------) s
5 379 M
(x in L, x/e not in L                    |       Error           |   No error if f\(x\)=1,f\(x/) s
5 368 M
(e\)=0 |) s
5 357 M
(                                        |                       |   else Error             ) s
5 346 M
(|) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(------) s
5 313 M
(x not in L, x/e in L                    |       Error           |   No error if f\(x\)=0,f\(x/) s
5 302 M
(e\)=1 |) s
5 291 M
(                                        |                       |   else Error             ) s
5 280 M
(|) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(------) s
5 247 M
(x not in L, x/e not in L                |       No error        |      Error               ) s
5 236 M
(|) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(------) s
5 192 M
(Noise percolation circuit in P\(Good\) summation converges in noise stability regime:) s
5 181 M
(        lt Pr[f\(w\(n\)\) != f\(w\(n\)/e\)] = 0, e=1/\(alpha4*n^2\)) s
5 170 M
(        n -> inf) s
5 159 M
(Infinite f\(n\) is representable as Non-uniform NC/poly circuit though undecidable because tu) s
5 148 M
(ring machine computing the above limit is not in recursive but recursively enumerable langu) s
5 137 M
(ages.) s
5 115 M
(For a 3-CNFSAT boolean function with noise, size of circuit is lowerbounded as:) s
5 104 M
(     [1-Summation\(rho^|S|*fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= Size , for constant ) s
5 93 M
(depth d.) s
5 82 M
(For rho=1,) s
5 71 M
(     [1-Summation\(fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= Size , for constant depth d,) s
5 60 M
( |S| < t.) s
5 38 M
(Gist of the above:) s
5 27 M
(53.14.1 Size of percolation logdepth circuit \(with noise\) rho=1:) s
5 16 M
(        \(f\([n]\)^2\) * 2^\(n^\(1/polylog\(n-1\)/20\)-1\) <= size) s
5 5 M
(53.14.2 Size of depth d circuit \(with noise\) rho=1:) s
_R
S
%%Page: (55) 55
%%BeginPageSetup
_S
18 36 translate
/pagenum 55 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (55) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        \(f\([n]\)^2\) * 2^\(\(n-1\)^\(1/d/20\)-1\) <= size) s
5 731 M
(53.14.3 Size of percolation logdepth circuit \(with noise\) rho=0:) s
5 720 M
(        \(1-f\([phi]\)^2\) * 2^\(n^\(1/polylog\(n\)/20\)-1\) <= size, phi is empty set) s
5 709 M
(53.14.4 Size of depth d circuit \(with noise\) rho=0:) s
5 698 M
(        \(1-f\([phi]\)^2\) * 2^\(n^\(1/d/20\)-1\) <= size, phi is empty set) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(------------------) s
5 654 M
(53.15 \(THEORY\) Special Case of HLMN theorem for PARITY as 3-SAT and counterexample for poly) s
5 643 M
(nomial circuit size) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(------------------) s
5 610 M
(From HMLN theorem:) s
5 599 M
(     Summation\(fourier_coeff\(S\)^2\) * 2^\(\(t^\(1/d\)/20\)-1\) <= Size , for constant depth d, |S|) s
5 588 M
( > t.) s
5 577 M
(When t=n-1, fourier series has only coefficient for the parity set that has all variables:) s
5 566 M
(        fourier_coeff\([n]\)^2 * 2^\(\(\(n-1\)^\(1/d\)/20\)-1\) <= size, for constant depth d.) s
5 555 M
(For a circuit of size polynomial \(n^k\) and depth 3:) s
5 544 M
(        summation\(fourier_coeff\([n]\)^2\) <= n^k / 2^\(\(t^\(1/3\)/20\)-1\).) s
5 533 M
(and for t=n-1:) s
5 522 M
(        fourier_coeff\([n]\)^2 <= n^k / 2^\(\(\(n-1\)^\(1/3\)/20\)-1\).) s
5 511 M
(From definition of fourier coefficients:) s
5 500 M
(        fourier_coeff\([n]\) = summation\(f\(x\)*\(-1\)^\(parity\(xi\)\)\)/2^n for all x in {0,1}^n) s
5 489 M
(Maximum of fourier_coeff\([n]\) occurs when f\(x\)=1 for \(-1\)^parity\(xi\) = 1 and when f\(x\)=-1 f) s
5 478 M
(or \(-1\)^parity\(xi\) = -1 together summing to 2^n.) s
5 467 M
(        Maximum\(fourier_coeff\([n]\)\) = 2^n/2^n = 1 \(this implies all other fourier coefficie) s
5 456 M
(nts are zero\)) s
5 445 M
(Which happens when f\(x\) is equivalent to Parity function.) s
5 434 M
(An example PARITY as 3-CNFSAT from DIMACS32 XORSAT [Jing Chao Chen - http://arxiv.org/abs/c) s
5 423 M
(s/0703006] that computes parity of n=3 variables x1,x2,x3 is:) s
5 412 M
(        \(x1 V not x2 V not x3\) /\\ \(not x1 V x2 V not x3\) /\\ \(not x1 V not x2 V x3\) /\\ \(x1 V) s
5 401 M
( x2 V x3\)) s
5 390 M
(Previous PARITY SAT accepts odd parity strings. Complementing variables in each clause make) s
5 379 M
(s it accept even parity:) s
5 368 M
(        \(not x1 V x2 V x3\) /\\ \(x1 V not x2 V x3\) /\\ \(x1 V x2 V not x3\) /\\ \(not x1 V not x2 ) s
5 357 M
(V not x3\)) s
5 346 M
(Assumption: PARITY as 3-CNFSAT has polynomial size.) s
5 335 M
(PARITY 3-SAT is satisified by odd parity bit strings and is NP-complete because this is sea) s
5 324 M
(rch version of parity - it searches for strings that have odd parity. Complementing each cl) s
5 313 M
(ause would make it satisfy even parity bit strings.  This example PARITY as 3-SAT with vari) s
5 302 M
(ables in each clause complemented maximizes the fourier coefficient to 1 at S=[n].For |S| <) s
5 291 M
( n by pigeonhole principle if one coefficient at |S|=n is enough to make it 1 others have t) s
5 280 M
(o be either all zero or cancel out each other. An extension of this 3-CNF for arbitrary n s) s
5 269 M
(hould be recursively obtainable from the above example by XOR-ing with additional variables) s
5 258 M
( and simplifying and also by Tseitin Transformation \(https://en.wikipedia.org/wiki/Tseytin_) s
5 247 M
(transformation\) which converts arbitrary combinatorial logic to CNF.) s
5 236 M
(=>    1^2 <=  n^k / 2^\(\(\(n-1\)^\(1/3\)/20\)-1\) which is a contradiction to assumption \(denomina) s
5 225 M
(tor is exponential\) that PARITY 3-SAT has polynomial size \(n^k\) circuits.) s
5 203 M
(From above, for some circuit size of PARITY as 3-CNFSAT, there exists t\(=O\(n\)\) such that:) s
5 192 M
(      2^\(\(\(t\)^\(1/3\)/20\)-1\) <=  size / summation\(f\(S\)^2\) , |S| > t) s
5 181 M
(      2^\(\(\(t\)^\(1/3\)/20\)-1\) <=  size \(for all t < n-1, fourier coefficients of PARITY 3-SAT ) s
5 170 M
(are 0, and this bound is meaningful only for t=n-1\).) s
5 159 M
(i.e for all values of t, circuit size is bounded from below by a quantity exponential in fu) s
5 148 M
(nction of n \(which could be O\(n\), W\(n\) or Theta\(n\).If this is O\(n\), might imply a lowerboun) s
5 137 M
(d by upperbound - reminiscent of Greatest Lower Bound in a Lattice if Complexity Classes fo) s
5 126 M
(rm a Lattice\). LHS of the inequality can have values of t from 1 to n-1 and only one value ) s
5 115 M
(of this can be chosen lowerbound. If LHS is not a function of n, it leads to a contradictio) s
5 104 M
(n that 2 PARITY 3SAT circuits of varying sizes can have constant lowerbound. Also finding M) s
5 93 M
(inimum Circuit Size problem is believed to be in NP but not known to be NP-Complete\(http://) s
5 82 M
(web.cs.iastate.edu/~pavan/papers/mcsp.pdf\).) s
5 71 M
(\(How can a special case of NP-complete problem have superpolynomial size circuits? Is this ) s
5 60 M
(a counterexample and thus implies superpolynomial size circuits for all problems in NP and ) s
5 49 M
(P != NP. Because of this correctness of above counterexample has to be reviewed\)) s
5 27 M
(References:) s
5 16 M
(------------) s
5 5 M
(53.15.1  Circuit Complexity Lecture notes - [Uri Zwick] - http://cs.tau.ac.il/~zwick) s
_R
S
%%Page: (56) 56
%%BeginPageSetup
_S
18 36 translate
/pagenum 56 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (56) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(53.15.2  Lecture notes - [Nader Bshouty] - http://cs.technion.ac.il/~bshouty) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(-------------------) s
5 698 M
(53.16 \(THEORY\) P/poly, Percolation and PARITY as 3-CNFSAT in 53.15) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(-------------------) s
5 665 M
(53.16.1 NP in P/poly \(NP having polynomial size circuits\) implies AM=MA and PH collapses to) s
5 654 M
( sigma2 /\\ pi2.) s
5 643 M
(53.16.2 PARITYSAT in 53.15 which is a special case of NP-complete has superpolynomial size ) s
5 632 M
(circuits.) s
5 621 M
(53.16.3 If Percolation is in NC/poly and both LHS and RHS of P\(Good\) converge to 100% noise) s
5 610 M
( stability, does it imply an NC/poly lowerbound for) s
5 599 M
(arbitrary circuit size in RHS? In other words what does it imply when 2 circuits of varying) s
5 588 M
( size have equal stability - Do two boolean circuits of equal decision error \(NoiseStabilit) s
5 577 M
(y + or - delta\) with different sizes imply a lowerbound? E.g NC/poly circuit for PH=DC \(if ) s
5 566 M
(PH-complete\) circuit implying PH in NC/poly.) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(------------) s
5 522 M
(53.16.3.1 If equal error \(NoiseStability +/- delta\) with different circuit sizes implies a ) s
5 511 M
(lowerbound:) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(------------) s
5 478 M
(There is an inherent conflict between 53.16.1, 53.16.3 which are conditions for polynomial ) s
5 467 M
(size circuits for NP and 53.16.2 which implies superpolynomial circuit size for a special c) s
5 456 M
(ase of NP-complete 3-SAT problem. This contradiction is resolveable if following is true:) s
5 445 M
(        - LHS of P\(Good\) is percolation NC/poly circuit in 100% noise stability regime.) s
5 434 M
(        - RHS of P\(Good\) is non-percolation circuit of arbitrary size \(e.g. DC circuit of e) s
5 423 M
(xponential size , superpolynomial size NP circuit from 53.15 and 53.16.2 etc.,\).) s
5 412 M
(        - LHS NC/poly 100% noise stability implies a lowerbound when RHS \(e.g superpolynomi) s
5 401 M
(al size NP circuit from 53.15 and 53.16.2\) is also 100% noise stable contradicting superpol) s
5 390 M
(ynomial size lowerbound for NP from 53.16.2. Contradiction is removed only if RHS of P\(Good) s
5 379 M
(\) is never 100% noise stable and hence LHS is not equatable to RHS i.e P\(Good\) summation ha) s
5 368 M
(s to be divergent and never converges to 100% while LHS is 100%. Major implications of this) s
5 357 M
( divergence are:) s
5 346 M
(        - the individual voter error/stability cannot be uniform 0.5 or 1 across the board ) s
5 335 M
(for all voters - voters have varied error probabilities.) s
5 324 M
(        - varied stability/sensitivity per voter implies RHS majority voting is Poisson Dis) s
5 313 M
(tribution.) s
5 302 M
(        - for probabilities other than 0.5 and 1, RHS P\(good\) summation becomes hypergeomet) s
5 291 M
(ric series requiring non-trivial algorithms which might or might not converge.) s
5 280 M
(        - This assumes that RHS does not have a boolean function that is 100% noise stabili) s
5 269 M
(ty regime similar to LHS Percolation.) s
5 258 M
(        - Superpolynomial size for NP-complete PARITY3SAT \(kind of a promise problem\) impli) s
5 247 M
(es P != NP and P != NP implies either a Poisson distribution or a hypergeometric series tha) s
5 236 M
(t might or might not converge.) s
5 225 M
(In other words a democratic decision making which does not involve percolation is never per) s
5 214 M
(fect and thus BKS conjecture has to be true berating majority i.e there exists atleast one ) s
5 203 M
(function - percolation - stabler than stablest majority.) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(------------------) s
5 159 M
(53.16.3.2 If equal error \(NoiseStability +/- delta\) with different circuit sizes doesn't im) s
5 148 M
(ply a lowerbound:) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(------------------) s
5 115 M
(        - LHS of P\(Good\) is percolation NC/poly circuit in 100% noise stability regime.) s
5 104 M
(        - RHS of P\(Good\) is of arbitrary size \(e.g. superpolynomial size NP circuit from 53) s
5 93 M
(.16.2\).) s
5 82 M
(        - LHS NC/poly 100% noise stability doesn't imply a lowerbound when RHS \(e.g superpo) s
5 71 M
(lynomial size NP circuit from 53.16.2\) is also 100% noise stable. It doesn't contradict con) s
5 60 M
(vergence of P\(Good\) summation to 100%, superpolynomial size lowerbound for NP from 53.16.2 ) s
5 49 M
(and BKS conjecture has to be trivially true i.e Both LHS and RHS of P\(Good\) are equally sta) s
5 38 M
(ble.) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(--------------) s
_R
S
%%Page: (57) 57
%%BeginPageSetup
_S
18 36 translate
/pagenum 57 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (57) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(53.17 \(THEORY\) Oracle results and P=NP and PH) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(--------------) s
5 709 M
(From [Baker-Gill-Solovay] there are oracles A and B such that P^A = P^B and P^A != P^B impl) s
5 698 M
(ying natural proofs involving relativizing oracles cannot answer P=NP question. Also PH is ) s
5 687 M
(shown to be infinite with oracle access recently. Because of this all points in this docume) s
5 676 M
(nt avoid oracle arguments and only use fourier series of boolean functions and boolean func) s
5 665 M
(tion compositions for circuit lowerbounds for P\(Good\) voting circuits.) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(--------------) s
5 621 M
(53.18 \(THEORY\) P\(Good\) circuit special case counterexample in PH collapse) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(--------------) s
5 588 M
(LHS of P\(Good\) - a sigma\(p,k\) hard \(could be dictatorial or PRG\) circuit with 100% \(noise s) s
5 577 M
(tability +/- delta\) \(assuming such exists\)) s
5 566 M
(RHS of P\(Good\) - a sigma\(p,k+1\) hard majority voting circuit with 100% \(noise stability +/-) s
5 555 M
( delta\) \(assuming such exists\)) s
5 533 M
(If above converging P\(good\) LHS and RHS imply a lowerbound , LHS sigma\(p,k\) lowerbounds RHS) s
5 522 M
( sigma\(p,k+1\) implying PH collapses to some level k.) s
5 511 M
(The matrix of noise versus BPP in 53.14 and 14 imply noise and BPP intersect, but if only c) s
5 500 M
(lasses in \(sigma\(p,k\) - BPP\) are chosen for voter boolean functions, derandomization is not) s
5 489 M
( required and noise stability is sufficient to account for total error. If there is a PH-co) s
5 478 M
(mplete problem, PH collapses to some level,but implication in other direction is not known ) s
5 467 M
(i.e collapse of PH implying PH-completeness - if both directions are true then this proves ) s
5 456 M
(non-constructively that there exists a PH-complete problem. Every level k in PH has a QBFSA) s
5 445 M
(T\(k\) problem that is complete for sigma\(p,k\) class. To prove PH-completeness from PH-collap) s
5 434 M
(se, all problems in all PH levels should be reducible to a PH-complete problem i.e all QBFS) s
5 423 M
(AT\(k\) complete problems should be reducible to a QBFSAT\(n\)-complete problem for k < n. Intu) s
5 412 M
(itively this looks obvious because QBFSAT\(n\) can generalize all other QBFSAT\(k\) by hardcodi) s
5 401 M
(ng some variables through a random restriction similar to Hastad Switching Lemma.) s
5 379 M
(Equating sigma\(p,k\) with sigma\(p,k+l\) is probably the most generic setting for P\(Good\) circ) s
5 368 M
(uits discounting arithmetic hierarchy.) s
5 346 M
(Example sigma\(p,k\)-complete QBFSAT\(k\) boolean function:) s
5 335 M
(        there exists x1 for all x2 there exists x3 ... QBF1\(x1,x2,x3,...,xk\)) s
5 313 M
(Example sigma\(p,k+1\)-complete QBFSAT\(k+1\) boolean function:) s
5 302 M
(        there exists x1 for all x2 there exists x3 ... QBF2\(x1,x2,x3,...,xk,x\(k+1\)\)) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(--------------) s
5 258 M
(53.19 \(THEORY\) Depth Hierarchy Theorem for P\(Good\) circuits) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(--------------) s
5 225 M
(Average case Depth Hierarchy Theorem for circuits by [Rossman-Servedio-Tan] - http://arxiv.) s
5 214 M
(org/abs/1504.03398 - states that any depth \(d-1\) circuit that agrees with a boolean functio) s
5 203 M
(n f computed by depth-d circuit on \(0.5+o\(1\)\) fraction of all inputs must have exp\(n^omega\() s
5 192 M
(1/d\)\) size. This theorem is quite useful in election forecast and approximation where it is) s
5 181 M
( difficult to learn a voter boolean function exactly.) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(--------------) s
5 137 M
(53.20 \(THEORY\) Ideal Voting Rule) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(--------------) s
5 104 M
([Rousseau] theorem states that an ideal voting rule is the one which maximizes number of vo) s
5 93 M
(tes agreeing with outcome [Theorem 2.33 in http://analysisofbooleanfunctions.org/]. The ide) s
5 82 M
(al-ness in this theorem still doesn't imply goodness of voting which measures how "good" is) s
5 71 M
( the outcome rather than how "consensual" it is - fact that majority concur on some decisio) s
5 60 M
(n is not sufficient to prove that decision is correct which is measured by noise stability ) s
5 49 M
(+/- delta. Because of this P\(good\) summation is quite crucial to measure hardness alongwith) s
5 38 M
( goodness.) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(--------------) s
_R
S
%%Page: (58) 58
%%BeginPageSetup
_S
18 36 translate
/pagenum 58 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (58) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(53.21 \(THEORY\) Plancherel's Theorem, Stability polynomial and Lowerbounds in 53.18) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(--------------) s
5 709 M
(Stability polynomial can be applied to QBFSAT\(k\) and QBFSAT\(k+1\) in 53.18.) s
5 687 M
(By Plancherel's Theorem, Stability of a boolean function with noise rho is written as polyn) s
5 676 M
(omial in rho:) s
5 665 M
(        Stability\(f\) = sigma\(rho^|S|*f\(S\)^2\) , S in [n]) s
5 654 M
(which can be equated to 1 to find roots of this polynomial - noise probabilities - where 10) s
5 643 M
(0% stability occurs.) s
5 621 M
(From HLMN theorem for sigma\(p,k\)-complete QBFSAT\(k\):) s
5 610 M
(        sigma\(f\(A1\)^2\) <= 2*\(M1\)*2^\(-t1^\(1/d1\)/20\)  , |A1| > t1) s
5 588 M
(From HLMN theorem for sigma\(p,k+1\)-complete QBFSAT\(k+1\):) s
5 577 M
(        sigma\(f\(A2\)^2\) <= 2*\(M2\)*2^\(-t2^\(1/d2\)/20\) , |A2| > t2) s
5 555 M
(When noise stability is 100%:) s
5 544 M
(        Stability\(QBFSAT\(k\)\) = sigma\(rho1^|S1|*f\(S1\)^2\) = 1, S1 in [n]) s
5 533 M
(        Stability\(QBFSAT\(k+1\)\) = sigma\(rho2^|S2|*f\(S2\)^2\) = 1, S2 in [n]) s
5 522 M
(where rho1 and rho2 are variables each in the polynomial for QBFSAT\(k\) and QBFSAT\(k+1\). Sol) s
5 511 M
(ving these polynomials gives the points where 100% stability occurs in both QBFSATs. By cho) s
5 500 M
(osing non-zero, real, positive roots of these polynomials as noise probabilities, 100% stab) s
5 489 M
(ility can be attained for QBFSAT\(k\) in LHS and QBFSAT\(k+1\) in RHS. Noise probabilities need) s
5 478 M
( not be equal in LHS and RHS. This is not an average case bound but lies as special case so) s
5 467 M
(mewhere between best case and worst case. If delta due to BPP is ignored, equal stability i) s
5 456 M
(mplies lowerbound - LHS sigma\(p,k\) lowerbounds RHS sigma\(p,k+1\) and PH collapses to level k) s
5 445 M
(. If collapse implies completeness as mentioned in 53.18 , this suffices to prove existence) s
5 434 M
( of a PH-complete problem non-constructively. Thus Stability implying Lowerbound has enormo) s
5 423 M
(us implications for separation results.) s
5 401 M
(Above deduction on PH collapse and possible PH-completeness contradicts 53.15 counterexampl) s
5 390 M
(e for NP having superpolynomial size circuits and hence P !=NP, because PH-completeness cou) s
5 379 M
(ld imply P=PH \(when LHS of P\(Good\) is an [NC/log in P] percolation circuit - unlikely if pe) s
5 368 M
(rcolation has only NC/poly circuits - which is 100% stable and RHS is PH-complete and 100% ) s
5 357 M
(stable\) and therefore P=NP. Resolution of this contradiction requires:) s
5 346 M
(        - Equal decision error \( stability +/- delta \) does not imply lowerbound.) s
5 335 M
(        - Roots of sigma\(rho^|S|*f\(S\)^2\) - 1 = 0 can only be complex with Re+Im parts and c) s
5 324 M
(an't be real.) s
5 313 M
(        - sigma\(rho^|S|*f\(S\)^2\) - 1 = 0 is zero polynomial where all coefficients are zero.) s
5 302 M
(        - PH-collapse does not imply PH-completeness.) s
5 280 M
(Stability polynomial above with rho as variable can be applied to any circuit to find the n) s
5 269 M
(oise probabilities where 100% stability is attained without machinery like size and depth h) s
5 258 M
(ierarchies, if equal stability implies lowerbounds. Indirectly 100% stability implies size ) s
5 247 M
(bound - when rho=1, Stability polynomial grows and concides with HLMN theorem for circuit s) s
5 236 M
(ize lowerbound as mentioned above.) s
5 192 M
(54\(THEORY\). Would the following experimental gadget work? It might, but impractical:) s
5 181 M
(A voter gadget spawns itself into liker, disliker and neutral parallel threads on an entity) s
5 170 M
( to be judged. The neutral thread gathers inputs from liker and disliker threads and gets a) s
5 159 M
( weighted sum on them to classify the entity as "like-able" or "dislike-able". Thus real-wo) s
5 148 M
(rld classification or judgement and perception seem mythical. \(And how is weightage decided) s
5 137 M
(? Can this be using SentiWordNet score?\). Theoretically, this is similar to Judge Boolean F) s
5 126 M
(unctions defined in 53.* above, specifically when a voter decides by interactive proof syst) s
5 115 M
(em adversarial simulation \(likes and dislikes are reducible to provers and verifiers\) which) s
5 104 M
( is EXPTIME-complete. Implementation of this gadget is thus EXPTIME-complete.) s
5 82 M
(55\(THEORY\). Evocation is a realworld everyday phenomenon - a word reminding of the other. P) s
5 71 M
(ositive thought chooses the right evocation and a negative thought chooses the negative evo) s
5 60 M
(cation in the absence of context to disambiguate. For example, for a pessimist "fall" means) s
5 49 M
( "falling down" while for an optimist "fall" could mean "windfall or sudden gain". For a pe) s
5 38 M
(stimist\(\(optimist+pessimist\)/2\), fall could mean one of the "seasons" or even nothing. Mind) s
5 27 M
( sees what it chooses to see. Pessimism and Optimism are probably mathematically definable ) s
5 16 M
(as accumulated weighted thoughts of past occurrences and any future thought or decision is ) s
5 5 M
(driven by this "accumulated past" which acts as an implicit "disambiguator". This accumulat) s
_R
S
%%Page: (59) 59
%%BeginPageSetup
_S
18 36 translate
/pagenum 59 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (59) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ed past or a Karma is reminiscent of above hypergraph of class stacks. ) s
5 720 M
(56\(THEORY\). A crude way to automatically disambiguate is to lookup the corresponding class ) s
5 709 M
(stack and analyze only bounded height of events from the top of the stack. Bounded height w) s
5 698 M
(ould imply analyzing only a small window of the past events. For example, looking up the cl) s
5 687 M
(ass stack from top to bottom for limited height of 2 for "fall" might have hyperedges "tree) s
5 676 M
( fall, heavy rain fall". Thus automatic disambiguation context could be the tuple of tuples) s
5 665 M
( [[tree], [heavy, rain]] gathered from each hyperedge analyzed from top. Then this tuple of) s
5 654 M
( tuples has to be weighted to get majority. Alternatively, each tuple in this tuple set, as) s
5 643 M
( a random variable, could be assigned a belief potential or a conditional probability of oc) s
5 632 M
(currence based on occurrence of other tuples in the set. Thus a Bayesian Belief Network can) s
5 621 M
( be constructed and by propagating belief potential, probability of each tuple can be compu) s
5 610 M
(ted. Most disambiguating tuple is the one with high belief propagation output. Alternativel) s
5 599 M
(y, elements of the set of tuples above can be construed as Observations and the State - the) s
5 588 M
( most disambiguating tuple - is Hidden and needs to be measured. Thus a Hidden Markov Model) s
5 577 M
( can be built. Emission probabilities for an Observation at a State are to be given as prio) s
5 566 M
(rs - probability of a tuple being observed for a word or "class". Importantly each stack is) s
5 555 M
( grown over time and is a candidate for Markov process with the restriction - node at heigh) s
5 544 M
(t h is dependent only on node at height \(h-1\) - height encodes timestamp. \(But this makes t) s
5 533 M
(he inference semi-statistical\). Consequently, this gives a Trellis from which a Viterbi pat) s
5 522 M
(h can be extracted. Forward-Backward probabilities can be computed \(Either generative or di) s
5 511 M
(scriminative model can be applied, generative being costlier\) using this Markov property an) s
5 500 M
(d deeming the stack itself as a dynamically grown Hidden Markov Model where the Observation) s
5 489 M
(s are the tuples\(hyperedges\) and the hidden state is the document that disambiguates. Using) s
5 478 M
( the Forward-Backward algorithm, the State\(hyperedge\) which maximizes the Probability of en) s
5 467 M
(ding up in that State is the most disambiguating document hyperedge = argmax [Pr\(State\(t\)=H) s
5 456 M
(yperedge\(e\) / ObservedTuples\(1..t\)] i.e The tuple or hyperedge that has highest forward con) s
5 445 M
(ditional probability in the Trellis transition. This assumes the Hypergraph node stack as a) s
5 434 M
( Markov Chain. Moreover, State need not be a hyperedge. State is rather a "meaningful conte) s
5 423 M
(xt". As in above example, uttering "fall" would kickoff a Forward-Backward computation on t) s
5 412 M
(he Hypergraph node class stack for "fall" considering the stack as a Hidden Markov Model an) s
5 401 M
(d would output the argmax State \(which is not limited to hyperedge\) as above. \(Handwritten ) s
5 390 M
(illustration at: https://sites.google.com/site/kuja27/NotesOnConceptHypergraphHMM_and_Impli) s
5 379 M
(cationGraphConvexHulls_2013-12-30.pdf?attredirects=0&d=1\). Above assumption that node at he) s
5 368 M
(ight \(h-1\) implies node at height h is quite experimental and is just to model how the huma) s
5 357 M
(n neuropsycological process of "evocation" works on uttering a word. There is no real-life ) s
5 346 M
(application to this - an event at height \(h-1\) need not imply an event at height h.) s
5 324 M
(57\(THEORY\). Thus Sentiment Mining techniques can be used for the above hypergraph to get th) s
5 313 M
(e overall sentiment of the hypergraph past. Probably each hyperedge might have to be analyz) s
5 302 M
(ed for positive or negative sentiment to get grand total. Citation graph maxflow in http://) s
5 291 M
(arxiv.org/abs/1006.4458 already gives a SentiWordnet based algorithm to weight each edge of) s
5 280 M
( a citation graph. Citations can be generalized as "like" or "dislike" opinions on entities) s
5 269 M
( as mentioned above.) s
5 247 M
(58\(THEORY\). Thus not only documents but also events in human life can be modelled as above ) s
5 236 M
(hypergraph to get a graphical model of the past and a PsychoProfiling of an individual coul) s
5 225 M
(d be arrived at using Sentiment mining. Thus, item 18 about "AstroPschoAnalysis" is feasibl) s
5 214 M
(e by two parallel paths which converge - Psychoprofiling by above concept or event hypergra) s
5 203 M
(ph for a human being and equating it with results from Astronomical+Astrological analysis d) s
5 192 M
(one through String Multiple Sequence Alignment mining.) s
5 170 M
(##################################################################################) s
5 159 M
(59. Initial Design Notes for - Mundane Predictive Model:) s
5 148 M
(##################################################################################) s
5 126 M
(- \(FEATURE - DONE\) DecisionTree, NaiveBayes and SVM classifiers and horoscope encoders are ) s
5 115 M
(already in the AstroInfer codebase. ) s
5 104 M
(- \(FEATURE - DONE\) Encode the dataset which might be USGS or NOAA\(Science on a Sphere\) data) s
5 93 M
(sets or anyother dataset available after getting text horos for these using Maitreya's Drea) s
5 82 M
(ms textclient \(AstroInfer version\)) s
5 71 M
(- \(FEATURE - DONE\) Above gives encoded horoscope strings for all classes of mundane events ) s
5 60 M
(in both Zodiacal and AscendantRelative formats \(autogenerated by Python scripts in python-s) s
5 49 M
(rc/\)) s
5 38 M
(- \(FEATURE - DONE\) Above set is a mix of encoded strings for all events which can be classi) s
5 27 M
(fied using one of the classifiers above.) s
5 16 M
(- \(FEATURE - DONE\) For each class the set of encoded horo strings in that class can be pair) s
5 5 M
(wise or multiple-sequence aligned to get the pattern for that class) s
_R
S
%%Page: (60) 60
%%BeginPageSetup
_S
18 36 translate
/pagenum 60 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (60) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- \(FEATURE - DONE\) There are two sets for each class after running the classifiers - one se) s
5 731 M
(t is AscendantRelative and the other is Zodiacal) s
5 720 M
(- \(FEATURE - DONE\) The above steps give the mined astronomical patterns for all observed mu) s
5 709 M
(ndane events - Pattern_Mundane_Observed_AscRelative and Pattern_Mundane_Observed_Zodiacal) s
5 687 M
(60. \(FEATURE - DONE\) Above has implemented a basic Class and Inference Model that was envis) s
5 676 M
(aged in 2003. Class is the set-theoretic notion of sets sharing common underlying theme. Us) s
5 665 M
(ing VC Dimension is a way to determine accuracy of how well the dataset is "shattered" by t) s
5 654 M
(he classes. ) s
5 632 M
(61. \(THEORY\) Now on to mining the classics for patterns: For all classes of events, running) s
5 621 M
( the classifier partitions the rules in a classic into set of rules or patterns for that cl) s
5 610 M
(ass. Here again there are two sets for each class - Pattern_Mundane_Classic_AscRelative and) s
5 599 M
( Pattern_Mundane_Classic_Zodiacal) s
5 577 M
(62. \(THEORY\) Thus correlation of the two sets *_Observed_* and *_Classic_* \(each set has 2 ) s
5 566 M
(subsets\) for percentage similarity using any known similarity coefficient would unravel any) s
5 555 M
( cryptic pattern hidden astronomical datasets for that event and would be a circumstantial ) s
5 544 M
(and scientific proof of rules in astrological classics with strong theoretical footing and ) s
5 533 M
(would also bring to light new rules earlier unknown.) s
5 511 M
(63. \(THEORY and IMPLEMENTATION\) More  importantly, for example, if a non-statistical,astrol) s
5 500 M
(ogical model of rainfall is computed based on a classical rule which says that "Venus-Mercu) s
5 489 M
(ry in single sign or Venus-Sun-Mercury in close proximity degrees with Sun in the middle ca) s
5 478 M
(uses copious rainfall" is used as a model, expected output of the model could be "Between 2) s
5 467 M
(8October2013 and 15December2013 there could be peak monsoon activity in ----- longitude ---) s
5 456 M
(- latitude with --- percentage probability". And thus this could be a Medium Range Weather ) s
5 445 M
(Forecasting tool. A python script that searches the Astronomical Data for mined rules from ) s
5 434 M
(Sequence Mining of Astronomical Data has been added to python-src/. It uses Maitreya's Drea) s
5 423 M
(ms Ephemeris text client for getting astronomical data for range of date, time and longitud) s
5 412 M
(e and latitude. This script prints matching date, time and longitude and latitude when a ru) s
5 401 M
(le for a weather phenomenon occurs as mined by sequence mining.) s
5 379 M
(64. \(FEATURE - DONE-related to 65 and 139\) Integrate AstroInfer,USB-md,KingCobra and VIRGO ) s
5 368 M
(into an approximately intelligent cloud OS platform that not just executes code statically ) s
5 357 M
(but also dynamically learns from the processes \(say through log files, executables, executi) s
5 346 M
(on times etc., and builds predictive models\).) s
5 335 M
(USB-md Design Document: http://sourceforge.net/p/usb-md/code-0/HEAD/tree/USBmd_notes.txt) s
5 324 M
(VIRGO Design Document: http://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/trunk/virgo-do) s
5 313 M
(cs/VirgoDesign.txt) s
5 302 M
(KingCobra Design Document: http://sourceforge.net/p/kcobra/code-svn/HEAD/tree/KingCobraDesi) s
5 291 M
(gnNotes.txt) s
5 280 M
(This AsFer+USBmd+VIRGO+KingCobra would henceforth be known as "Krishna iResearch Intelligen) s
5 269 M
(t Cloud OS - NeuronRain ") s
5 247 M
(65. \(THEORY and IMPLEMENTATION\) Related to point 64 - Software Analytics - source code and ) s
5 236 M
(logs analytics - related to Program comprehension - point 139 on BigData Analytics has more) s
5 225 M
( on this. Recently added VIRGO kernel_analytics module is in a way a software analytics mod) s
5 214 M
(ule which reads config file set by the machine learning software after mining the kernel lo) s
5 203 M
(gs and objects. Kernel Analytics VIRGO driver module at present reads key-value pairs writt) s
5 192 M
(en to by the AsFer Machine Learning code from /etc/virgo_kernel_analytics.conf. Optionally,) s
5 181 M
( AsFer code can directly modify the kernel tunable parameters learnt by AsFer \(https://www.) s
5 170 M
(kernel.org/doc/Documentation/kernel-parameters.txt\) through modprobe or "echo -n ${value} >) s
5 159 M
( /sys/module/${modulename}/parameters/${parm}" for existing modules while virgo_kernel_anal) s
5 148 M
(ytics.conf is read for VIRGO specific modules. Graph Isomorphism of Program Slice Dependenc) s
5 137 M
(y Graphs for 2 codebases mentioned in https://sites.google.com/site/kuja27/PhDThesisProposa) s
5 126 M
(l.pdf is also a Software Analytics problem. There are Slicing and Graph Isomorphism tools a) s
5 115 M
(lready available. Recently there has been a SubExponential Time algorithm for GI - [Lazlo B) s
5 104 M
(abai]. Kernel Analytics config in filesystem requires reloading. New feature to set the ker) s
5 93 M
(nel analytics key-value pairs directly from userspace to kernel memory locations dynamicall) s
5 82 M
(y has been added via boost::python C++ and CPython extensions - described in 217.SATURN Pro) s
5 71 M
(gram Analysis Framework has been integrated into VIRGO Linux - error logs of SATURN are AsF) s
5 60 M
(er analyzable - more on this in 232. SourceForge VIRGO repository does not contain SATURN .) s
5 49 M
(db files in saturn_program_analysis/saturn_program_analysis_trees/. They are committed only) s
5 38 M
( in GitHub saturn_program_analysis/saturn_program_analysis_trees/ . Spark code computing Cy) s
5 27 M
(clomatic Complexity of codebase from SATURN generated .dot files has been committed in pyth) s
5 16 M
(on-src/software_analytics/ . This requires VIRGO Linux saturn program analysis driver gener) s
5 5 M
(ated .dot files.) s
_R
S
%%Page: (61) 61
%%BeginPageSetup
_S
18 36 translate
/pagenum 61 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (61) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(        AsFer Python -----> Boost::Python C++ Extension ------> VIRGO memory system calls -) s
5 720 M
(-------> VIRGO Linux Kernel Memory Drivers) s
5 709 M
(        /\\                                                                                 ) s
5 698 M
(             V) s
5 687 M
(         |                                                                                 ) s
5 676 M
(             |) s
5 665 M
(         ---------------------------------------------<------------------------------------) s
5 654 M
(--------------) s
5 643 M
(        AsFer Python -----> CPython Extensions ------> VIRGO memory system calls --------> ) s
5 632 M
(VIRGO Linux Kernel Memory Drivers) s
5 621 M
(         /\\                                                                                ) s
5 610 M
(             V) s
5 599 M
(         |                                                                                 ) s
5 588 M
(             |) s
5 577 M
(         ---------------------------------------------<------------------------------------) s
5 566 M
(--------------) s
5 544 M
(        AsFer Python -----> VIRGO SATURN program analyzer .dot files --------> Spark ----> ) s
5 533 M
(Cyclomatic Complexity) s
5 511 M
(----------) s
5 500 M
(References:) s
5 489 M
(----------) s
5 478 M
(65.1  Analytics of Device Driver code - http://research.microsoft.com/en-us/groups/sa/drive) s
5 467 M
(rmine_asplos14.pdf) s
5 456 M
(65.2  Logging - http://research.microsoft.com/en-US/groups/sa/loggingpractice.pdf) s
5 445 M
(65.3  Law of leaky abstraction - http://www.joelonsoftware.com/Articles/LeakyAbstractions.h) s
5 434 M
(tml ) s
5 423 M
(65.4  Function Point Analysis - http://www.bfpug.com.br/Artigos/Albrecht/MeasuringApplicati) s
5 412 M
(onDevelopmentProductivity.pdf) s
5 401 M
(65.5  Function Point Analysis and Halstead Complexity Measures - https://en.wikipedia.org/w) s
5 390 M
(iki/Halstead_complexity_measures) s
5 379 M
(65.6  Cyclomatic Complexity of a Program - Euler Characteristic of program flow graph \(E - ) s
5 368 M
(V + 2\) - Approximate code complexity.) s
5 346 M
(66. \(THEORY\) Encoding a document with above Hypergraph of Class stack vertices and Hyperedg) s
5 335 M
(es - This hypergraph of concepts can also be used as a steganographic encoding tool for obf) s
5 324 M
(uscating a document \(somewhat an encryption of different kind\). For example, each document ) s
5 313 M
(is a hyperedge in this hypergraph of class stack vertices. By choosing a suitable encoding ) s
5 302 M
(function every concept or a word can be replaced with some element within each class stack ) s
5 291 M
(vertex. This encoding function chooses some element in each class stack - f\(word or concept) s
5 280 M
( C1 in a document\) = a different word or concept C2 in the class stack vertex that contains) s
5 269 M
( C1. This function f has to be one-one and onto so that it is invertible to get the origina) s
5 258 M
(l document. This function can be anything modulo the height of that stack. Thus a plain tex) s
5 247 M
(t meaningful document can encrypt another meaningful hidden document without any ciphertext) s
5 236 M
( generation.) s
5 214 M
(67. An automaton or Turing machine model for data or voice \(or musical\) samples - Voice sam) s
5 203 M
(ples or musical notations are discrete in time and occur in stream. As an experimental rese) s
5 192 M
(arch,  explore on possibility of automatically constructing an automaton or Turing machine ) s
5 181 M
(that recognizes these languages \(RE or CFG\) where the notes are the alphabets. ) s
5 159 M
(\(FEATURE - DONE\) 68. Music Pattern Mining - Computational Music - Alternatively, a Discrete) s
5 148 M
( Fourier Transform on a set of data or voice samples gives a set of frequencies - a traditi) s
5 137 M
(onal DSP paradigm.) s
5 126 M
(-----------) s
5 115 M
(References:) s
5 104 M
(-----------) s
5 93 M
(68.1 https://ccrma.stanford.edu/~jos/st/) s
5 71 M
(69. \(FEATURE - Audacity FFT - DONE\) Music Pattern Mining - Experimental Idea of previous tw) s
5 60 M
(o points is to mine patterns in discrete data and voice\(music for example\) samples. Music a) s
5 49 M
(s an expression of mathematics is widely studied as Musical Set Theory - Transpositions and) s
5 38 M
( Inversions \(E.g http://en.wikipedia.org/wiki/Music_and_mathematics, http://www.ams.org/sam) s
5 27 M
(plings/feature-column/fcarc-canons, http://www-personal.umd.umich.edu/~tmfiore/1/musictotal) s
5 16 M
(.pdf\). Items 56,57 and 58 could help mining deep mathematical patterns in classical and oth) s
5 5 M
(er music and as a measure of similarity and creativity. In continuation of 68, following ex) s
_R
S
%%Page: (62) 62
%%BeginPageSetup
_S
18 36 translate
/pagenum 62 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (62) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(periment was done on two eastern Indian Classical audio clips having similar raagas:) s
5 731 M
(        69.1 FFT of the two audio files were done by Audacity and frequency domain files we) s
5 720 M
(re obtained with sampling size of 65536, Hanning Window, Log frequency) s
5 709 M
(        69.2 FFTs of these two have been committed in music_pattern_mining/. Similarity is ) s
5 698 M
(observed by peak decibel frequency of ~ 500Hz in both FFTs - Similarity criterion here is t) s
5 687 M
(he strongest frequency in the sample though there could be others like set of prominent fre) s
5 676 M
(quencies, amplitudes etc.,. Frequencies with low peaks are neglected as noise.) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(-----) s
5 632 M
(70-79 \(THEORY - EventNet Implementation DONE\) EventNet and Theoretical analysis of Logical ) s
5 621 M
(Time:) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(-----) s
5 577 M
(70. In addition to Concept wide hypergraph above, an interesting research could be to creat) s
5 566 M
(e an EventNet or events connected by causation as edge \(there is an edge \(x,y\) if event x c) s
5 555 M
(auses event y\). Each event node in this EventNet is a set of entities that take part in tha) s
5 544 M
(t event and interactions among them.This causation hypergraph if comprehensively constructe) s
5 533 M
(d could yield insights into apparently unrelated events.This is hypergraph because an event) s
5 522 M
( can cause a finite sequence of events one after the other, thereby including all those eve) s
5 511 M
(nt vertices. For simplicity,it can be assumed as just a graph. This has some similarities w) s
5 500 M
(ith Feynman Diagrams and Sum-over-histories in theoretical physics.) s
5 478 M
(71. Each event node in the node which is a set as above, can have multiple outcomes and hen) s
5 467 M
(ce cause multiple effects. Outcome of an interaction amongst the elements of an event node ) s
5 456 M
(is input to the adjacent event node which is also a set. Thus there could be multiple outgo) s
5 445 M
(ing outcome edges each with a probability. Hence the EventNet is a random, directed, acycli) s
5 434 M
(c graph \(acyclic assuming future cannot affect past preventing retrocausality\). Thus EventN) s
5 423 M
(et is nothing but real history laid out as a graph. Hypothetically,  if every event from be) s
5 412 M
(ginning of the universe is causally connected as above, an indefinite ever growing EventNet) s
5 401 M
( is created. ) s
5 379 M
(72. If the EventNet is formulated as a Dynamic Graph with cycles instead of Static Graph as) s
5 368 M
( above where there causal edges can be deleted, updated or added, then the above EventNet a) s
5 357 M
(llows changing the past theoretically though impossible in reality. For example, in an Even) s
5 346 M
(tNet grown upto present, if a causal edge is added from a present node to past or some caus) s
5 335 M
(al edge is deleted or updated in the past, then "present" causes "past" with or without cyc) s
5 324 M
(les in the graph.) s
5 302 M
(73. EventNet can be partitioned into "Past","Present" and "Future" probably by using some M) s
5 291 M
(axFlow-MinCut Algorithms. The Cut of the graph as Flow Network is the "Present" and either ) s
5 280 M
(side of the Cut is "Past" and "Future".) s
5 258 M
(74. A recreational riddle on the EventNet: Future\(Past\) = Present. If the Future is modelle) s
5 247 M
(d as a mathematical function, and if Past is fixed and Present is determined by 100% freewi) s
5 236 M
(ll and can have any value based on whimsical human actions, then is the function Future\(\) w) s
5 225 M
(ell-defined?) s
5 203 M
(75. Conjecture: Undirected version of EventNet is Strongly Connected or there is no event i) s
5 192 M
(n EventNet without a cause \(outgoing edge\) or an effect\(incoming edge\).) s
5 170 M
(76. Events with maximum indegree and outdegree are crucial events that have deep impact in ) s
5 159 M
(history.) s
5 137 M
(77. Events in each individual entity's existence are subgraphs of universal EventNet. These) s
5 126 M
( subgraphs overlap with each other.) s
5 104 M
(78. There is an implicit time ordering in EventNet due to each causation edge. This is a "L) s
5 93 M
(ogical Clock" similar to Lamport's Clock. In a cloud \(e.g VIRGO Linux nodes, KingCobra MAC ) s
5 82 M
(currency transactions\) the EventNet is spread across the nodes and each node might have a s) s
5 71 M
(ubgraph of the giant EventNet. ) s
5 49 M
(79. EventNet can also be viewed as a Bayesian Network.) s
5 27 M
(--------------------------------) s
5 16 M
(80. \(THEORY\) Mining EventNet for Patterns: ) s
5 5 M
(---------------------------------) s
_R
S
%%Page: (63) 63
%%BeginPageSetup
_S
18 36 translate
/pagenum 63 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (63) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(As an old saying goes "history repeats itself". Or does it really? Are there cycles of even) s
5 731 M
(ts? Such questions warrant checking the EventNet for cycles. But the above EventNet is acyc) s
5 720 M
(lic by definition.This probably goes under the item 48 above that models the events as a hy) s
5 709 M
(pergraph based on classification of events which is different from EventNet altogether. Alt) s
5 698 M
(ernatively, the EventNet nodes which are events with set of partakers and their interaction) s
5 687 M
(s,can be mined for commonalities amongst them. Thus checking any pair of event nodes separa) s
5 676 M
(ted by a path of few edges \(and thus separated in logical time\) for common pattern suffices) s
5 665 M
( and this recursively continues. ) s
5 643 M
(Frequent Subgraph Mining of above EventNet \(i.e whether a subgraph "repeats" with in the su) s
5 632 M
(pergraph\) as mentioned in Graph Search feature above could find patterns in events history.) s
5 621 M
(\(Reference: Graph growing algorithms in chapter "Graph Mining", Data Mining, Han and Kamber) s
5 610 M
(\)) s
5 588 M
(There is a striking resemblance of EventNet to sequence mining algorithm CAMLS - a refined ) s
5 577 M
(Apriori algorithm - \(http://www.cs.bgu.ac.il/~yarongon/papers/camls.dasfaa2010.pdf\) which i) s
5 566 M
(s for mining a sequence of events - each event has intraevent partakers  occurring at diffe) s
5 555 M
(rent points in time with gaps. EventNet mining is infact a generalization of linear time in) s
5 544 M
( CAMLS to distributed logical clock defined as EventNet causation infinite graph above. The) s
5 533 M
( topological orderings of EventNet can be mined using CAMLS. Sequence Mining python script ) s
5 522 M
(that implements Apriori GSP has been added to repository and it can be applied to topologic) s
5 511 M
(ally sorted EventNet graphs as well.) s
5 489 M
(----------------------------) s
5 478 M
(81-86. \(THEORY\) Fractal nature of events:) s
5 467 M
(-----------------------------) s
5 456 M
(81. Are events self-similar or exhibit fractal nature? This as in item 71, needs mining the) s
5 445 M
( event nodes which are sets of partakers for self-similarity. A fractal event is the one wh) s
5 434 M
(ich has a cycle and any arbitrary point on the cycle has a cycle attached at that point and) s
5 423 M
( so on. An example of fractal event is the Hindu Vedic Calendar that has Major cycles, subc) s
5 412 M
(ycles, cycles within cycles that occur recursively implying that calendar is self-similar. ) s
5 401 M
(How to verify if the EventNet graph has a fractal nature or how to prove that a graph is "F) s
5 390 M
(ractal" in general? Would it be Ramsey theory again?) s
5 368 M
(82. EventNet is a Partial Order where there may not be edges of causality between some elem) s
5 357 M
(ents. Thus a Topological Sort on this EventNet directed,acyclic graph gives many possible o) s
5 346 M
(rderings of events. If history of the universe assuming absolute time is formulated as Even) s
5 335 M
(tNet, then the topological sort does not give a unique ordering of events which is counteri) s
5 324 M
(ntuitive to absolute time.\(Is this sufficient to say there is no absolute time?\). ) s
5 302 M
(83. EventNet on history of events in the universe is quite similar to Directed Acyclic Grap) s
5 291 M
(h based Scheduling of tasks with dependencies on parallel computers. Thus universe is akin ) s
5 280 M
(to a Infinitely Massive Parallel Computer where events are dynamically scheduled with parta) s
5 269 M
(kers, outcomes and with non-determinism. Even static scheduling is NP-Complete.) s
5 247 M
(84. In the above EventNet, each node which is a set can indeed be a graph also with freewil) s
5 236 M
(l interactions amongst the set members as edges. This gives a graph G1 with each node being) s
5 225 M
( replaced by a graph G2. This is a fractal graph constructed naturally and notions of Outer) s
5 214 M
( products or Tensor products or Kronecker products with each entry in adjacency matrix repl) s
5 203 M
(aced by another adjacency matrix apply. By definition each node can be replaced by differen) s
5 192 M
(t graph.) s
5 170 M
(85. Similar to Implication graphs as Random Growth Graphs, EventNet also qualifies as a Ran) s
5 159 M
(dom Growth Network as events happen randomly and new edges are added whenever events happen) s
5 148 M
( \(with previous Kronecker Tensor model\). Rich-Get-Richer paradigm can also hold where nodes) s
5 137 M
( with more adjacent nodes are more likely to have future adjacent nodes. \(A related notion ) s
5 126 M
(of Freewill Interactions in http://sites.google.com/site/kuja27/UndecidabilityOfFewNonTrivi) s
5 115 M
(alQuestions.pdf?attredirects=0 is worth mentioning here\). ) s
5 93 M
(86. Regularity Lemma can be used as a tool to test Implication and EventNet Random Growth G) s
5 82 M
(raphs - specifically seems to have an application in EventNet Kronecker Graph model above w) s
5 71 M
(here each node is replaced by a graph and thus can be construed as epsilon-partition of the) s
5 60 M
( vertices that differ infinitesimally in density. Each element in the partition is the even) s
5 49 M
(t.) s
5 27 M
(*******************************************************************************************) s
5 16 M
(*************) s
5 5 M
(87.                                     COMMIT RELATED NOTES) s
_R
S
%%Page: (64) 64
%%BeginPageSetup
_S
18 36 translate
/pagenum 64 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (64) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(*******************************************************************************************) s
5 731 M
(*************) s
5 709 M
(\(FEATURE- DONE\) commits as on 3 September 2013) s
5 698 M
(------------------------------) s
5 687 M
(DecisionTree, NaiveBayes and SVM classifier code has been integrated into AstroInfer toplev) s
5 676 M
(el invocation with boolean flags) s
5 654 M
(\(FEATURE- DONE\) commits as on 6 September 2013) s
5 643 M
(------------------------------) s
5 632 M
(In addition to USGS data, NOAA Hurricane dataset HURDAT2 has been downloaded and added to r) s
5 621 M
(epository. Asfer Classifier Preprocessor script has been updated to classify set of article) s
5 610 M
(s listed in articlesdataset.txt using NaiveBayesian or DecisionTree Classifiers and trainin) s
5 599 M
(g and test set text files are also autogenerated. New parser for NOAA HURDAT2 datset has be) s
5 588 M
(en added to repository. With this datasets HTML files listed in articlesdataset.txt are cla) s
5 577 M
(ssified by either classifiers and segregated into "Event Classes".Each dataset document is ) s
5 566 M
(of proprietary format and requires parser for its own to parse and autogenerate the date-ti) s
5 555 M
(me-longlat text file.Date-time-longlat data for same "Event Class" will be appended and col) s
5 544 M
(lated into single Date-time-longlat text file for that "Event Class".) s
5 522 M
(\(FEATURE- DONE\) commits as on 12 September 2013) s
5 511 M
(-------------------------------) s
5 500 M
(1.asfer_dataset_segregator.py and asfer_dataset_segregator.sh - Python and wrapper shell sc) s
5 489 M
(ript that partitions the parsed datasets which contain date-time-long-lat data based on cla) s
5 478 M
(ssifier output grepped by the invoker shell script - asfer_dataset_segregator.sh -  and wri) s
5 467 M
(tes the names of parsed dataset files which are classified into Event Class "<class>" into ) s
5 456 M
(text files with names of regular expression "EventClassDataSet_<class>.txt") s
5 434 M
(2.DateTimeLongLat data for all datasets within an event class \(text file\) need to be collat) s
5 423 M
(ed into a single asfer.enchoros.<classname>.zodiacal or asfer.enchoros.<classname>.ascrelat) s
5 412 M
(ive. For this a Python script MaitreyaToEncHoroClassified.py has been added to repository t) s
5 401 M
(hat reads the segregated parsed dataset files generated by asfer_dataset_aggregator.sh and ) s
5 390 M
(invokes maitreya_textclient for all date-time-long-lat data within all parsed datasets for ) s
5 379 M
(a particular event class - "EventClassDataset_<class>.txt" and also creates autogenerated a) s
5 368 M
(sfer.enchoros.<class>.zodiacal and asfer.enchoros.<class>.ascrelative encoded files) s
5 346 M
(\(FEATURE- DONE\) commits as on 2 November 2013) s
5 335 M
(-----------------------------) s
5 324 M
(Lot of commits for implementation of Discrete Hyperbolic Factorization with Stirling Formul) s
5 313 M
(a Upperbound \(http://sourceforge.net/p/asfer/code/HEAD/tree/cpp-src/miscellaneous/DiscreteH) s
5 302 M
(yperbolicFactorizationUpperbound.cpp\) have gone in. Overflow errors prevent testing large n) s
5 291 M
(umbers.\(URLs:) s
5 280 M
(         1\) Multiple versions of Discrete Hyperbolic Factorization uploaded in http://sites) s
5 269 M
(.google.com/site/kuja27/ ) s
5 258 M
(         2\) Handwritten by myself - http://sourceforge.net/projects/acadpdrafts/files/Discr) s
5 247 M
(eteHyperbolicFactorization_UpperboundDerivedWithStirlingFormula_2013-09-10.pdf/download and) s
5 236 M
(         3\) Latex version - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyper) s
5 225 M
(bolicPolylogarithmicSieveForIntegerFactorization_updated_rectangular_interpolation_search_a) s
5 214 M
(nd_StirlingFormula_Upperbound.pdf/download) s
5 203 M
(\)) s
5 181 M
(\(FEATURE- DONE\) commits as on 20 November 2013 and 21 November 2013) s
5 170 M
(----------------------------------------------------) s
5 159 M
(1. Lots of testing done on Discrete Hyperbolic Factorization sequential implementation and ) s
5 148 M
(logs have been added to repository.) s
5 126 M
(2. An updated draft of PRAM NC version of Discrete Hyperbolic Factorization has been upload) s
5 115 M
(ed at: ) s
5 104 M
(http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveFor) s
5 93 M
(IntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound.pdf/download that does) s
5 82 M
( PRAM merge of discrete tiles in logarithmic time before binary search on merged tile.) s
5 60 M
(3. Preliminary Design notes for CRCW PRAM implementation of the above is added to repositor) s
5 49 M
(y at: http://sourceforge.net/p/asfer/code/237/tree/ImplementationDesignNotesForDiscreteHype) s
5 38 M
(rbolicFactorizationInPRAM.jpg. This adds a tile_id to each tile so that during binary searc) s
5 27 M
(h, the factors are correctly found since coordinate info gets shuffled after k-tile merge.) s
_R
S
%%Page: (65) 65
%%BeginPageSetup
_S
18 36 translate
/pagenum 65 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (65) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------) s
5 731 M
(88.Tagging as on 16 December 2013) s
5 720 M
(-------------------------------) s
5 709 M
(AsFer version 12.0 and VIRGO version 12.0 have been tagged on 6 December 2013 \(updated the ) s
5 698 M
(action items above\).) s
5 676 M
(\(THEORY\) 89. More reference URLs for Parallel RAM design of above NC algorithm for Discrete) s
5 665 M
( Hyperbolic Factorization for merging sorted lists:) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(------------------------------------------) s
5 632 M
(1.http://arxiv.org/pdf/1202.6575.pdf?origin=publication_detail) s
5 621 M
(2.https://electures.informatik.uni-freiburg.de/portal/download/3/6951/thm15%20-%20parallel%) s
5 610 M
(20merging.ppt \(Ranks of elements\)) s
5 599 M
(3.http://cs.brown.edu/courses/csci2560/syllabus.html \(Lecture Notes on CREW PRAM and Circui) s
5 588 M
(t Equivalence used in the NC algorithm for Discrete) s
5 577 M
(Hyperbolic Factorization above - http://cs.brown.edu/courses/csci2560/lectures/lect.24.pdf\)) s
5 566 M
(4.http://cs.brown.edu/courses/csci2560/lectures/lect.22.ParallelComputationIV.pdf) s
5 555 M
(5.http://www.cs.toronto.edu/~bor/Papers/routing-merging-sorting.pdf) s
5 544 M
(6.http://www.compgeom.com/~piyush/teach/AA09/slides/lecture16.ppt) s
5 533 M
(7.Shift-and-subtract algorithm for approximate square root computation implemented in Linux) s
5 522 M
( kernel \(http://lxr.free-electrons.com/source/lib/int_sqrt.c\) which might be useful in find) s
5 511 M
(ing the approximate square root in discretization of hyperbola \(Sequential version of Discr) s
5 500 M
(ete Hyperbolic Factorization\)) s
5 489 M
(8.http://research.sun.com/pls/apex/f?p=labs:bio:0:120 - Guy Steele - approximate square roo) s
5 478 M
(t algorithm ) s
5 467 M
(9.http://cstheory.stackexchange.com/questions/1558/parallel-algorithms-for-directed-st-conn) s
5 456 M
(ectivity - related theoretical discussion thread on PRAM algorithms for st-connectivity) s
5 445 M
(10.PRAM and NC algorithms - http://www.cs.cmu.edu/afs/cs/academic/class/15750-s11/www/hando) s
5 434 M
(uts/par-notes.pdf) s
5 423 M
(11. An Efficient Parallel Algorithm for Merging in the Postal Model - http://etrij.etri.re.) s
5 412 M
(kr/etrij/journal/getPublishedPaperFile.do?fileId=SPF-1043116303185) s
5 401 M
(12. Parallel Merge Sort - http://www.inf.fu-berlin.de/lehre/SS10/SP-Par/download/parmerge1.) s
5 390 M
(pdf) s
5 379 M
(13. NC and PRAM equivalence - www.cs.tau.ac.il/~safra/ACT/CCandSpaceB.ppt) s
5 368 M
(14. Extended version of BerkmanSchieberVishkin ANSV algorithm - http://www1.cs.columbia.edu) s
5 357 M
(/~dany/papers/highly.ps.Z \(has some references to NC, its limitations, higly parallelizable) s
5 346 M
( - loglog algorithms\) - input to this ANSV algorithm is elements in array \(of size N\) and n) s
5 335 M
(ot number of bits \(logN\) which is crucial to applying this to merge tree of factorization a) s
5 324 M
(nd proving in NC.) s
5 313 M
(15. Structural PRAM algorithms \(with references to NC\) - http://www.umiacs.umd.edu/users/vi) s
5 302 M
(shkin/PUBLICATIONS/icalp91.ps) s
5 291 M
(16. Parallel Algorithms FAQ - NC, RAM and PRAM - Q24 - http://nptel.ac.in/courses/106102114) s
5 280 M
(/downloads/faq.pdf ) s
5 258 M
(17. Defintions related to PRAM model - http://pages.cs.wisc.edu/~tvrdik/2/html/Section2.htm) s
5 247 M
(l - Input to PRAM is N items stored in N memory locations - \(For factorization, this direct) s
5 236 M
(ly fits in as the O\(N\) ~ Pi^2/6 * N coordinate product integers stored in as many locations) s
5 225 M
( - for discretized tiles of hyperbola\)) s
5 203 M
(18. Reduction from PRAM to NC circuits - http://web.cse.ohio-state.edu/~gurari/theory-bk/th) s
5 192 M
(eory-bk-sevense6.html#Q1-80006-21 \(The SIMULATE_RAM layer in each step is a subcircuit that) s
5 181 M
( is abstracted as a node in NC circuit. This subcircuit performs the internal computation o) s
5 170 M
(f PRAM processor in that NC circuit node at some depth i. The NC circuit is simulated from ) s
5 159 M
(PRAM model as - depth is equal to PRAM time and size is equal to number of processors.\). Th) s
5 148 M
(us for Discrete Hyperbolic Factorization, the ANSV PRAM mergetree of polylogdepth is simula) s
5 137 M
(ted as NC circuit with this reduction. Thus though each array element in ANSV is a logN bit) s
5 126 M
( integer, the SIMULATE_RAM abstraction reduces it to a node in NC circuit that processes th) s
5 115 M
(e input and propagates the output to next step towards root. ) s
5 93 M
(19. Length of input instance in PRAM \(n or N\) - http://web.cse.ohio-state.edu/~gurari/theor) s
5 82 M
(y-bk/theory-bk-sevense2.html#Q1-80002-3 - "... When no confusion arises, because of the obv) s
5 71 M
(ious relationship between the number N of values in the input and the length n of the input) s
5 60 M
(, N and n are used interchangeably. ...". For ANSV algorithm, the number N of values in the) s
5 49 M
( input array and the length n of the input are the same \(N=n\) and due to this it runs in po) s
5 38 M
(lyloglogtime in input size O\(loglogN\) and with polynomial processors N/loglogN. ) s
5 16 M
(20. Quoted abstract - "... The all nearest smaller values problem is defined as follows. Le) s
5 5 M
(t A = \(a1 ; a2 ; : : : ; an \) be n elements drawn from a totally ordered domain. For each a) s
_R
S
%%Page: (66) 66
%%BeginPageSetup
_S
18 36 translate
/pagenum 66 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (66) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(i , 1 <= i <= n, find the two nearest elements in A that are smaller than ai \(if such exist) s
5 731 M
(s\): the left nearest smaller element aj \(with j <= i\) and the right nearest smaller element) s
5 720 M
( ak \(with k >= i\). We give an O\(log log n\) time optimal parallel algorithm for the problem ) s
5 709 M
(on a CRCW PRAM ...". Thus N=n.) s
5 687 M
(21. SIMULATE_RAM subcircuit in point 18 - Number of bits allowed per PRAM cell in PRAM to N) s
5 676 M
(C reduction - http://hall.org.ua/halls/wizzard/books2/limits-to-parallel-computation-p-comp) s
5 665 M
(leteness-theory.9780195085914.35897.pdf - pages 33-36 - quoted excerpts - "... Let M be a C) s
5 654 M
(REW-PRAM that computes in parallel time t\(n\) = \(log n\)^O\(1\) and processors p\(n\) = n^O\(1\) . ) s
5 643 M
(Then there exists a constant c and a logarithmic space uniform Boolean circuit family, {\316\261n) s
5 632 M
( }, such that \316\261n on input x1 , . . . , xn computes output y1,1 , y1,2 , . . . , yi,j , . .) s
5 621 M
( . , where yi,j is the value of bit j of shared memory cell i at time t\(n\), for 1 \342\\211\244 i ) s
5 610 M
(\342\\211\244 p\(n\) \342\\210\\227 t\(n\) and 1 \342\\211\244 j \342\\211\244 c*t\(n\) ...". Thus number of bits allowed p) s
5 599 M
(er PRAM memory location is upperbounded by polylogn. For ANSV algorithm underlying the Disc) s
5 588 M
(rete Hyperbolic Factorization, maximum number of bits per PRAM cell is thus logN where N is) s
5 577 M
( the integer to factorize \(and maximum number of PRAM cells is  ~ pi^2/6 *N\) thereby much b) s
5 566 M
(elow the above polylogN bound for number of bits per PRAM cell for creating a uniform NC ci) s
5 555 M
(rcuit from PRAM model. ) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(--------------------) s
5 500 M
(\(THEORY\) 90.Some notes on extensions to Integer partitions and Hash Functions ) s
5 489 M
(\(https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions.pdf?attredirects=0\)) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(--------------------) s
5 456 M
(1. Riemann sums \(discrete approximation of Riemann integral\) of all the functions correspon) s
5 445 M
(ding to the hash functions are same. Thus all such functions form an equivalence class.\(Ass) s
5 434 M
(uming each partition created by the hash functions as a function plot\)) s
5 412 M
(2. Hardy-Ramanujan asymptotic bound for partition function p\(n\) is ~ O\(e^\(pi*sqrt\(0.66*n\)\)/) s
5 401 M
(\(4*1.732*n\) which places a bound on number of hash functions also.\(http://en.wikipedia.org/) s
5 390 M
(wiki/Partition_\(number_theory\)\)) s
5 368 M
(3. If m-sized subsets of the above O\(m!*e^\(sqrt\(n\)\)/n\) number of hash functions are conside) s
5 357 M
(red as a \(k,u\)-universal or \(k,u\)-independent family of functions\(Pr\(f\(x1\)=y1...\) < u/m^k,t) s
5 346 M
(hen follwing the notation in the link mentioned above, this m-sized subset family of hash f) s
5 335 M
(unctions follow the Pr\(f\(x1\)=y1 & ...\) < u/m^n where n is number of keys and m is the numbe) s
5 324 M
(r of values. \(m! is for summation over \(m,lamda\(i\)\) for all partitions\)) s
5 302 M
(4. Thus deriving a bound for number of possible hash functions in terms of number of keys a) s
5 291 M
(nd values could have bearing on almost all hashes including MD5 and SHA.) s
5 269 M
(5. Birthday problem and Balls and Bins problem - Since randomly populating m bins with n ba) s
5 258 M
(lls and probability of people in a congregation to have same birthday are a variant of Inte) s
5 247 M
(ger partitioning and thus hash table bucket chaining, bounds for birthday problem and Chern) s
5 236 M
(off bounds derived for balls and bins could be used for Hash tables also \(http://en.wikiped) s
5 225 M
(ia.org/wiki/Birthday_problem, http://www.cs.ubc.ca/~nickhar/W12/Lecture3Notes.pdf\)) s
5 203 M
(6. Restricted partitions which is the special case of integer partitions has some problems ) s
5 192 M
(which are NP-complete. Money changing problem which is finding number of ways of partitioni) s
5 181 M
(ng a given amount of money with fixed denominations\(Frobenius number\) is NP-complete\(http:/) s
5 170 M
(/citeseer.uark.edu:8080/citeseerx/showciting;jsessionid=92CBF53F1D9823C47F64AAC119D30FC4?ci) s
5 159 M
(d=3509754, Naoki Abe 1987\). Number of partitions with distinct and non-repeating parts foll) s
5 148 M
(ow Roger-Ramanujan identities \(2 kinds of generating functions\).) s
5 126 M
(7. The special of case of majority voting which involves integer partitions described in ht) s
5 115 M
(tps://sites.google.com/site/kuja27/IndepthAnalysisOfVariantOfMajorityVotingwithZFAOC_2014.p) s
5 104 M
(df requires a hash function that non-uniformly distributes the keys into hashes so that no ) s
5 93 M
(two chains are equal in size \(to simulate voting patterns without ties between candidates\).) s
5 82 M
( This is the special case of restricted partitions with distinct and non-repeating parts of) s
5 71 M
( which money changing is the special case and finding a single solution is itself NP-comple) s
5 60 M
(te. ) s
5 38 M
(8. Thus Majority voting can be shown to be NP-complete in 2 ways:) s
5 27 M
(        8.1 by Democracy circuit \(Majority with SAT\) in http://sourceforge.net/projects/aca) s
5 16 M
(dpdrafts/files/ImplicationGraphsPGoodEquationAndPNotEqualToNPQuestion_excerpts.pdf/download) s
5 5 M
( and https://sites.google.com/site/kuja27/PhilosophicalAnalysisOfDemocracyCircuitAndPRGChoi) s
_R
S
%%Page: (67) 67
%%BeginPageSetup
_S
18 36 translate
/pagenum 67 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (67) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ce_2014-03-26.pdf) s
5 731 M
(        8.2 by reduction from an NP-hard instance of Restricted Partition problem like Mone) s
5 720 M
(y changing problem for Majority voting with constituencies described in https://sites.googl) s
5 709 M
(e.com/site/kuja27/IndepthAnalysisOfVariantOfMajorityVotingwithZFAOC_2014.pdf) s
5 687 M
(9. Infact the above two ways occur in two places in the process of democratic voting: The d) s
5 676 M
(emocracy circuit is needed when a single candidate is elected while the restricted partitio) s
5 665 M
(n in second point is needed in a multi-partisan voting where multiple candidates are voted ) s
5 654 M
(for.) s
5 632 M
(10. Point 8.2 above requires a restricted partition with distinct non-repeating parts. Ther) s
5 621 M
(e are many results on this like Roger-Ramanujan identities, Glaisher theorem and its specia) s
5 610 M
(l case Euler's theorem which equate number of partitions with parts divisible by a constant) s
5 599 M
( and distinctiveness of the parts \(odd, differing by some constant etc.,\). Such a restricte) s
5 588 M
(d partition is needed for a tiebreaker and hence correspond bijectively to  hash collision ) s
5 577 M
(chaining.) s
5 555 M
(11. An interesting manifestation of point 10 is that nothing in real-life voting precludes ) s
5 544 M
(a tie and enforces a restricted partition, with no two candidates getting equal votes, wher) s
5 533 M
(e all voters take decisions independent of one another\(voter independence is questionable t) s
5 522 M
(o some extent if swayed by phenomena like "votebank","herd mentality" etc.,\) thereby theore) s
5 511 M
(tically invalidating the whole electoral process. ) s
5 489 M
(12. Counting Number of such restricted partitions is a #P-complete problem - https://www.ma) s
5 478 M
(th.ucdavis.edu/~deloera/TALKS/denumerant.pdf. ) s
5 456 M
(13. If a Hash table is recursive i.e the chains themselves are hashtables and so on... then) s
5 445 M
( this bijectively corresponds to a recurrence relation for partition function \(expressing a) s
5 434 M
( partition of a higher integer in terms of lower integer\).) s
5 412 M
(14. If the hash table chains are alternatively viewed as Compositions of an integer \(ordere) s
5 401 M
(d partitions\) then there are 2^\(n-1\) maximum possible compositions.\(http://en.wikipedia.org) s
5 390 M
(/wiki/Composition_\(number_theory\)\)) s
5 368 M
(15. In the summation over all parts of partitions derived in https://sites.google.com/site/) s
5 357 M
(kuja27/IntegerPartitionAndHashFunctions.pdf if m==n then it is the composition in point 14 ) s
5 346 M
(above and thus summation over all parts of partitions is greater than or equal to 2^\(n-1\) s) s
5 335 M
(ince some permutations might get repeated across partitions. Thus the summation expresses g) s
5 324 M
(eneralized restricted composition\(summation_over_all_partitions_of_n\(\(n,lamda\(i\)\)>=2^\(n-1\)\)) s
5 313 M
(.) s
5 291 M
(16. Logarithm of above summation then is equal to \(n-1\) and thus can be equated to any part) s
5 280 M
(ition of n. Thus any partition can be written as a series which is the combinatorial functi) s
5 269 M
(on of parts in all individual partitions.) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(-----------------) s
5 225 M
(91. Updated drafts on Integer partitions and hash function \(with points in 80 above\) , Circ) s
5 214 M
(uits for Error probability in Majority Voting) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(------------------) s
5 181 M
(1. https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.pdf?attredire) s
5 170 M
(cts=0&d=1) s
5 159 M
(2. https://sites.google.com/site/kuja27/CircuitForComputingErrorProbabilityOfMajorityVoting) s
5 148 M
(_2014.pdf?attredirects=0&d=1) s
5 126 M
(-----------------------------------------------------------------------------------) s
5 115 M
(92. Reference URLs for restricted integer partitions with distinct parts) s
5 104 M
(-----------------------------------------------------------------------------------) s
5 93 M
(\(for http://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.pdf?attredir) s
5 82 M
(ects=0&d=1\)) s
5 71 M
(1. Generating function - http://math.berkeley.edu/~mhaiman/math172-spring10/partitions.pdf) s
5 60 M
(2. Schur's theorem for asymptotic bound for number of denumerants - http://en.wikipedia.org) s
5 49 M
(/wiki/Schur's_theorem) s
5 38 M
(3. Frobenius problem - http://www.math.univ-montp2.fr/~ramirez/Tenerif3.pdf) s
5 27 M
(4. Locality Sensitive Hashing \(that groups similar keys into a collision bucket chain using) s
5 16 M
( standard metrics like Hamming Distance\) - http://hal.inria.fr/inria-00567191/en/,  http://) s
5 5 M
(web.mit.edu/andoni/www/LSH/index.html, http://en.wikipedia.org/wiki/Locality-sensitive_hash) s
_R
S
%%Page: (68) 68
%%BeginPageSetup
_S
18 36 translate
/pagenum 68 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (68) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ing) s
5 731 M
(5. Locality Sensitive Hashing and Lattice sets \(of the diophantine form a1*x1+a2*x2+...+an*) s
5 720 M
(xn\) -  http://hal.inria.fr/docs/00/56/71/91/PDF/paper.pdf) s
5 709 M
(6. Minhash and Jaccard similarity coefficient - http://en.wikipedia.org/wiki/MinHash#Jaccar) s
5 698 M
(d_similarity_and_minimum_hash_values \(similar to LSH that emphasizes on hash collisions for) s
5 687 M
( similarity measures between sets e.g bag of words of URLs\)) s
5 665 M
(-------------------------------------------------------------------------------------) s
5 654 M
(\(THEORY\) 93. Reduction from Money Changing Problem or 0-1 Integer LP to Restricted Partitio) s
5 643 M
(ns with distinct parts) s
5 632 M
(-------------------------------------------------------------------------------------) s
5 621 M
(If the denominations are fixed as 1,2,3,4,5,....,n then the denumerants to be found are fro) s
5 610 M
(m the diaphantine equation:) s
5 599 M
(a1*1 + a2*2 + a3*3 + a4*4 + a5*5 + ...+ an*n) s
5 588 M
(\(with ai = 0 or 1\). GCD of all ai\(s\) is 1. Thus Schur's theorem for MCP or Coin Problem app) s
5 577 M
(lies.) s
5 566 M
(Integet 0-1 LP NP-complete problem can also be reduced to above diophantine format instead ) s
5 555 M
(of MCP. Finding one such denumerant with) s
5 544 M
(boolean values is then NP-complete and hence finding one partition with distinct non-repeat) s
5 533 M
(ing parts is NP-complete \(needed in multipartisan) s
5 522 M
(majority vote\).) s
5 500 M
(---------------------------------------------------) s
5 489 M
(\(FEATURE- DONE\) 94. Commits as on 23 April 2014) s
5 478 M
(---------------------------------------------------) s
5 467 M
(Updated pgood.cpp with some optimizations for factorial computations and batched summation ) s
5 456 M
(to circumvent overflow to some extent.) s
5 445 M
(For Big decimals IEEE 754 with 112+ bits precision is needed for which boost::multiprecisio) s
5 434 M
(n or java.math.BigDecimal might have to be used.) s
5 412 M
(--------------------------------------------------) s
5 401 M
(\(FEATURE- DONE\) 95. Commits as on 7 July 2014) s
5 390 M
(--------------------------------------------------) s
5 379 M
(Initial implementation of a Chaos attractor sequence implementation committed to repository) s
5 368 M
(.) s
5 346 M
(--------------------------------------------------) s
5 335 M
(\(FEATURE- DONE\) 96. Commits as on 8 July 2014) s
5 324 M
(--------------------------------------------------) s
5 313 M
(Python-R \(rpy2\) code for correlation coefficient computation added to above Chaos attractor) s
5 302 M
( implementation.) s
5 280 M
(--------------------------------------------------------------------) s
5 269 M
(\(FEATURE- DONE\) 97. Time Series Analysis - Commits as on 9 July 2014) s
5 258 M
(--------------------------------------------------------------------) s
5 247 M
(DJIA dataset, parser for it and updated ChaosAttractor.py for chaotic and linear correlatio) s
5 236 M
(n coefficient computation of DJIA dataset) s
5 225 M
(have been committed.) s
5 203 M
(--------------------------------------------------) s
5 192 M
(\(FEATURE- DONE\) 98. Commits as on 10 July 2014) s
5 181 M
(--------------------------------------------------) s
5 170 M
(Python\(rpy2\) script for computing Discrete Fourier Transform for DJIA dataset has been adde) s
5 159 M
(d \(internally uses R\). [python-src/DFT.py]) s
5 137 M
(--------------------------------------------------) s
5 126 M
(\(FEATURE- DONE\) 99. Commits as on 11 July 2014) s
5 115 M
(--------------------------------------------------) s
5 104 M
(Python\(rpy2\) script for spline interpolation of DJIA dataset and plotting a graph of that u) s
5 93 M
(sing R graphics has been added. [python-src/Spline.py]) s
5 71 M
(--------------------------------------------------) s
5 60 M
(\(FEATURE- DONE\) 100. Commits as on 15 July 2014 and 16 July 2014) s
5 49 M
(--------------------------------------------------) s
5 38 M
(Doxygen documentation for AsFer, USBmd, VIRGO, KingCobra and Acadpdrafts have been committe) s
5 27 M
(d to GitHub at https://github.com/shrinivaasanka/Krishna_iResearch_DoxygenDocs. LOESS local) s
5 16 M
( polynomial regression fitting code using loess\(\) function in R has been added at python-sr) s
5 5 M
(c/LOESS.py. Approximate linear interpolation code using approx\(\) and approxfun\(\) in R has b) s
_R
S
%%Page: (69) 69
%%BeginPageSetup
_S
18 36 translate
/pagenum 69 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (69) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(een added at python-src/Approx.py) s
5 720 M
(-------------------------------------------------) s
5 709 M
(\(FEATURE- DONE\) 101.Commits as on 23 July 2014) s
5 698 M
(-------------------------------------------------) s
5 687 M
(Draft additions to http://arxiv.org/pdf/1106.4102v1.pdf are in the Complement Function item) s
5 676 M
( above. An R graphics rpy2 script RiemannZetaFunctionZeros.py has been added to parse the f) s
5 665 M
(irst 100000 zeros of RZF and plot them using R Graphics.) s
5 643 M
(--------------------------------------------------------------------) s
5 632 M
(\(FEATURE - THEORY - Visualizer Implementation DONE\) 102. Dense Subgraphs of the WordNet sub) s
5 621 M
(graphs from Recursive Gloss Overlap) s
5 610 M
(--------------------------------------------------------------------) s
5 599 M
(http://arxiv.org/abs/1006.4458 and http://www.nist.gov/tac/publications/2010/participant.pa) s
5 588 M
(pers/CMI_IIT.proceedings.pdf have been extended for a summary creation algorithm from WordN) s
5 577 M
(et subgraphs of Recursive Gloss Overlap by filtering out low degree vertices\(https://sites.) s
5 566 M
(google.com/site/kuja27/DocumentSummarization_using_SpectralGraphTheory_RGOGraph_2014.pdf?at) s
5 555 M
(tredirects=0&d=1\). For undirected graphs there is a notion of k-core of a graph which is an) s
5 544 M
( induced subgraph of degree k vertices. Since Wordnet is a directed graph, recently there a) s
5 533 M
(re measures to measure degeneracy\(D-cores - http://www.graphdegeneracy.org/dcores_ICDM_2011) s
5 522 M
(.pdf\). Graph peeling is a process of removing edges to create a dense subgraph. This can be) s
5 511 M
( better visualized using visual wordnet implementations: ) s
5 500 M
(        102.1 http://kylescholz.com/projects/wordnet/) s
5 489 M
(        102.2 http://www.visuwords.com) s
5 478 M
(        102.3 http://www.visualthesaurus.com/browse/en/Princeton%20WordNet) s
5 456 M
(------------------------------------------------------------------) s
5 445 M
(103. AsFer version 14.9.9 release tagged on 9 September 2014) s
5 434 M
(------------------------------------------------------------------) s
5 423 M
(-------------------------------------------------------------------) s
5 412 M
(\(FEATURE- DONE\) 104. Commits as on 9 October 2014) s
5 401 M
(-------------------------------------------------------------------) s
5 390 M
(Initial python script implementation for Text compression committed with logs and screensho) s
5 379 M
(t. Decompression is still hazy and needs some more algorithmic work. ) s
5 357 M
(------------------------------------------------------------------) s
5 346 M
(\(FEATURE- DONE\) 105. Commits as on 21 October 2014) s
5 335 M
(------------------------------------------------------------------) s
5 324 M
(An experimental POC python implementation that uses Hidden Markov Model for decompression h) s
5 313 M
(as been committed. But it depends on one-time computing a huge number of priors and their a) s
5 302 M
(ccuracy.) s
5 280 M
(------------------------------------------------------------------) s
5 269 M
(\(THEORY\) 106. Creating a summary graph from EventNet) s
5 258 M
(------------------------------------------------------------------) s
5 247 M
(EventNet graph for historical cause and effect described above can be huge of the order of ) s
5 236 M
(trillion vertices and edges. To get a summary of the) s
5 225 M
(events might be necessary at times - similar to a document summarization. Summarizing a gra) s
5 214 M
(ph of event cause-effects requires giving importance to most important events in the graph ) s
5 203 M
(- vertices with high number of degrees \(indegrees + outdegrees\) . This is nothing but findi) s
5 192 M
(ng k-core of a graph which is a maximal connected subgraph of EventNet where every vertex i) s
5 181 M
(s of degree atleast k.) s
5 159 M
(-----------------------------------------------------------------) s
5 148 M
(\(FEATURE- DONE\) 107. Commits as on 1 November 2014) s
5 137 M
(-----------------------------------------------------------------) s
5 126 M
(A minimal PAC learning implementation in python to learn a Boolean Conjunction from dataset) s
5 115 M
( has been added to repository.) s
5 93 M
(-----------------------------------------------------------------) s
5 82 M
(\(FEATURE- DONE\) 108. Commits as on 4 November 2014) s
5 71 M
(-----------------------------------------------------------------) s
5 60 M
(Initial implementation for Minimum Description Length has been added to repository.) s
5 38 M
(-----------------------------------------------------------------) s
5 27 M
(\(FEATURE- DONE\) 109. Commits as on 6 November 2014) s
5 16 M
(-----------------------------------------------------------------) s
5 5 M
(Python Shannon Entropy implementation for texts has been added to repository and is invoked) s
_R
S
%%Page: (70) 70
%%BeginPageSetup
_S
18 36 translate
/pagenum 70 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (70) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( in MinimumDescLength.py MDL computation.) s
5 720 M
(-----------------------------------------------------------------) s
5 709 M
(\(FEATURE- DONE\) 110. Commits as on 7 November 2014) s
5 698 M
(-----------------------------------------------------------------) s
5 687 M
(Python Kraft Inequality MDL implementation has been committed.) s
5 665 M
(-----------------------------------------------------------------) s
5 654 M
(\(FEATURE- DONE\) 111. Commits as on 11 November 2014) s
5 643 M
(-----------------------------------------------------------------) s
5 632 M
(C++ implementation for Wagner-Fischer Dynamic Programming algorithm that iteratively comput) s
5 621 M
(es Levenshtein Edit Distance than recursively has been added to repository.) s
5 599 M
(-----------------------------------------------------------------) s
5 588 M
(\(FEATURE - DONE\) 112. Expirable objects) s
5 577 M
(-----------------------------------------------------------------) s
5 566 M
(Setting expiry to an object is sometimes essential to control updates and access to an obje) s
5 555 M
(ct. Example application of this - A JPEG image) s
5 544 M
(should be accessible or displayable for only a finite number of times and after that it has) s
5 533 M
( to self-destruct. Though doing this in C++ is ) s
5 522 M
(straightforward with operator overloading, in C it looks non-trivial. Presently only C++ im) s
5 511 M
(plementation is added to repository.) s
5 489 M
(-----------------------------------------------------------------------------) s
5 478 M
(\(FEATURE- DONE\) 113. Commits as on 11 November 2014 - Expirable template class implementati) s
5 467 M
(on ) s
5 456 M
(-----------------------------------------------------------------------------) s
5 445 M
(Similar to weak_ptr and shared_ptr, a generic datatype that wraps any datatype and sets an ) s
5 434 M
(expiry count to it has been added to repository ) s
5 423 M
(in cpp-src/expirable/ . For example, a bitmap or a JPEG image can be wrapped in expirable c) s
5 412 M
(ontainer and it can be access-controlled. ) s
5 401 M
(If expiry count is 1, the object \(an image for example\) can be written to or displayed only) s
5 390 M
( once and thus a singleton.  Presently this is ) s
5 379 M
(only for rvalues. Implementing for lvalues \(just a usage without assignment should be able ) s
5 368 M
(to expire an object\) seems to be a hurdle as ) s
5 357 M
(there is no operator overloading available for lvalues - i.e there is no "access" operator ) s
5 346 M
(to overload. This might be needed for KingCobra) s
5 335 M
(MAC electronic money also.\(std::move\(\) copy-by-move instead of a std::swap\(\) copy-by-swap i) s
5 324 M
(diom\)) s
5 302 M
(----------------------------------------------------------------------------) s
5 291 M
(\(FEATURE- DONE\) 114. Commits as on 12 November 2014 ) s
5 280 M
(----------------------------------------------------------------------------) s
5 269 M
(Expirable template in asferexpirable.h has been updated with 2 operator=\(\)) s
5 258 M
(functions for copy-assignment and move-assignment which interally invoke) s
5 247 M
(std::swap\(\) and std::move\(\). Explicit delete\(s\) are thus removed. Also example) s
5 236 M
(testcase has been updated to use a non-primitive datatype.) s
5 214 M
(----------------------------------------------------------------------------) s
5 203 M
(\(FEATURE- DONE\) 115. Commits as on 13 November 2014) s
5 192 M
(----------------------------------------------------------------------------) s
5 181 M
(Overloaded operator*\(\) function added for expiry of "access" to objects. With this problem ) s
5 170 M
(mentioned in 113 in tracking access or just usage is) s
5 159 M
(circumvented indirectly. ) s
5 137 M
(---------------------------------------------------------------------------) s
5 126 M
(\(FEATURE- DONE\) 116. Commits as on 15 November 2014) s
5 115 M
(---------------------------------------------------------------------------) s
5 104 M
(Python implementation for Perceptron and Gradient has been added to repository.) s
5 82 M
(---------------------------------------------------------------------------) s
5 71 M
(\(FEATURE- DONE\) 117. Commits as on 17 November 2014) s
5 60 M
(---------------------------------------------------------------------------) s
5 49 M
(Python implementation for Linear and Logistic Regression in 2 variables.) s
5 27 M
(---------------------------------------------------------------------------) s
5 16 M
(\(FEATURE- DONE\) 118. Commits as on 20 November 2014) s
5 5 M
(---------------------------------------------------------------------------) s
_R
S
%%Page: (71) 71
%%BeginPageSetup
_S
18 36 translate
/pagenum 71 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (71) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(C++ implementation of K-Means clustering with edit distance as metric has been added to) s
5 731 M
(repository.) s
5 709 M
(---------------------------------------------------------------------------) s
5 698 M
(\(FEATURE- DONE\) 119. Commits as on 21 November 2014) s
5 687 M
(---------------------------------------------------------------------------) s
5 676 M
(C++ implementation of k-Nearest Neighbour clustering has been added to repository.) s
5 654 M
(---------------------------------------------------------------------------) s
5 643 M
(120. Commits as on 24 November 2014) s
5 632 M
(---------------------------------------------------------------------------) s
5 621 M
(Bugfixes to kNN implementation.) s
5 599 M
(---------------------------------------------------------------------------) s
5 588 M
(\(FEATURE- DONE\) 121. Commits as on 25 November 2014) s
5 577 M
(---------------------------------------------------------------------------) s
5 566 M
(Python script for decoding encoded horoscope strings \(from Maitreya's Dreams\) has been adde) s
5 555 M
(d to) s
5 544 M
(repository.) s
5 522 M
(--------------------------------------------------------------------------) s
5 511 M
(122. \(FEATURE - DONE\) Commits as on 3 December 2014) s
5 500 M
(--------------------------------------------------------------------------) s
5 489 M
(Initial implementation for EventNet:) s
5 478 M
(-----------------------------------) s
5 467 M
(1. EventNet python script has inputs from two text files - EventNetEdges.txt and EventNetVe) s
5 456 M
(rtices.txt - which define the event vertices and the causations amongst them with partakers) s
5 445 M
( in each event node) s
5 434 M
(2. This uses GraphViz \(that in turn writes a dot file\) and python-graph+gv packages) s
5 423 M
(3. GraphViz writes to EventNet.graphviz.pdf and EventNet.gv.png rendered and visualized gra) s
5 412 M
(ph files.) s
5 401 M
(4. Above text files are disk-stored and can be grown infinitely.) s
5 390 M
(5. EventNetVertices.txt has the format:) s
5 379 M
(        <event vertex> - <csv of partakers in the event vertex>) s
5 368 M
(   EventNetEdges.txt has the format:) s
5 357 M
(        <ordered pairs of vertices for each causation edge>) s
5 346 M
(6. Topological Sorting of EventNet using python-graph algorithms package) s
5 324 M
(----------------------------------------------------------------------------------------) s
5 313 M
(\(THEORY\) 123. EventNet - partakers of events and an application of EventNet to a related pr) s
5 302 M
(oblem) s
5 291 M
(----------------------------------------------------------------------------------------) s
5 280 M
(Event vertices have partakers of event as defined in 122. Point 84-86 previously defined Ev) s
5 269 M
(entNet as) s
5 258 M
(a fractal graph tensor where each vertex is a graph or partakers. Alternative formulation o) s
5 247 M
(f this is) s
5 236 M
(where the partakers are just key words or persons in that event. For example, a fictitious ) s
5 225 M
(story can be translated into a giant EventNet where each vertex is an event with correspond) s
5 214 M
(ing partakers in it. It could be difficult to find edges among the partakers \(Ideally the e) s
5 203 M
(dges are conversations among the partakers of an event specific to this example\). As an app) s
5 192 M
(roximation, the partakers could be simply the keywords parsed from that set of conversation) s
5 181 M
(s. Complexity or connectedness and number of topological orderings possible for this transl) s
5 170 M
(ated EventNet is a measure of elegance.) s
5 148 M
(---------------------------------------------------------------------------------------) s
5 137 M
(\(FEATURE- DONE\) 124. Commits as on 4 December 2014) s
5 126 M
(---------------------------------------------------------------------------------------) s
5 115 M
(EventNet - a cloudwide event ordering with unique id implementation) s
5 104 M
(--------------------------------------------------------------------) s
5 93 M
(EventNet has 2 input files for vertices and edges with partakers and ) s
5 82 M
(writes an output file with ordering of the events) s
5 60 M
(Input - EventNetVertices.txt has the format:) s
5 49 M
(       <event vertex> - <csv of partakers> - <tuples of conversations amongst the partakers) s
5 38 M
( # separated>) s
5 27 M
(       partakers could be machine id\(s\) or IP addresses and thread id\(s\) and the conversati) s
5 16 M
(ons being the        messages to-and-fro across the partakers, which create an IntraEvent G) s
5 5 M
(raph of Conversations) s
_R
S
%%Page: (72) 72
%%BeginPageSetup
_S
18 36 translate
/pagenum 72 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (72) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(       within each event vertex) s
5 720 M
(Input - EventNetEdges.txt has the format:) s
5 709 M
(       <event vertex1, event vertex2>) s
5 687 M
(Output - EventNetOrdering.txt has the format:) s
5 676 M
(       <index in chronologically ascending order> - <event id>) s
5 654 M
(EventNet script thus is run in a central node which has the input files above that is) s
5 643 M
(updated by all the nodes in cloud. Outgoing edge from an event vertex has partakers from mu) s
5 632 M
(ltiple) s
5 621 M
(events and thus is an outcome of the event. If the input files are split and stored in mult) s
5 610 M
(iple cloud) s
5 599 M
(nodes, the topological sorts for multiple input files have to be merged to create a single ) s
5 588 M
(cloudwide) s
5 577 M
(ordering. ) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-------) s
5 533 M
(\(THEORY\) 125. Massive EventNet computation ) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(-------) s
5 500 M
(Each conversation of the events needs to create a log message that is sent to the EventNet ) s
5 489 M
(service) s
5 478 M
(which updates the input vertices and edges files. The python EventNet script run optionally) s
5 467 M
( on a hadoop) s
5 456 M
(cluster mapreduce recomputes the topological ordering periodically. This is quite tedious a) s
5 445 M
( process that can flood the cloud with log messages enabled by config boolean flag or compi) s
5 434 M
(le time #ifdef.  ) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-------) s
5 390 M
(\(FEATURE- DONE\) 126. Commits as on 5 December 2014) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-------) s
5 357 M
(Initial C++ Boost::graph based implementation for EventNet has been added to repository.) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-------) s
5 313 M
(\(THEORY\) 127. 2-dimensional random walks for decision making \(experimental\)) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-------) s
5 280 M
(Continued from point 49 above, the psychological process of decision making \(in a mental co) s
5 269 M
(nflict with) s
5 258 M
(two opposing directions\) is akin to a game theoretical notion of Nash Equilibrium - where a) s
5 247 M
( huge payoff) s
5 236 M
(matrix is constructed for the random walk directions as strategies for the two conflicting ) s
5 225 M
(decisions. There could be Nash Equilibria where decision1 doesn't gain from changing the ra) s
5 214 M
(ndom walk direction and decision2 doesn't gain from changing the direction \(max\(column\),max) s
5 203 M
(\(row\)\). These equilibria are like a win-win or a dilemma . For that matter this should appl) s
5 192 M
(y to decision trees as well. Related application of equilibria for epidemic and malware are) s
5 181 M
( at: http://www.aaai.org/ocs/index.php/AAAI/AAAI14/paper/view/8478) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(--) s
5 137 M
(128. Commits as on 9 December 2014) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(--) s
5 104 M
(Bugfixes for DOT file generation and toposort in C++ EventNet implementation. ) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(--) s
5 60 M
(129. \(THEORY\) Draft Updates to https://sites.google.com/site/kuja27/CircuitForComputingErro) s
5 49 M
(rProbabilityOfMajorityVoting_2014.pdf?attredirects=0&d=1 - P\(Good\) series computation) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(--) s
5 16 M
(For even number of finite population \(electorate\) the binomial coefficient summation in uni) s
5 5 M
(form distribution has an extra coefficient which when summed up tends to zero at infinity. ) s
_R
S
%%Page: (73) 73
%%BeginPageSetup
_S
18 36 translate
/pagenum 73 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (73) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Thus P\(Good\) series converges to,) s
5 720 M
(        \(2^n - nC\(n/2\)\)/2^\(n+1\) = 0.5 - epsilon where epsilon=sqrt\(1/\(2*n*pi\)\) limit for wh) s
5 709 M
(ich vanishes at infinity) s
5 687 M
(\(or\) probability of good choice is epsilon less than 50% for finite even number of electora) s
5 676 M
(te for uniform distribution - a weird counterintuitive special case. Thus the counterexampl) s
5 665 M
(e for P Vs NP is still valid at infinity if infinite majority is decidable\(related to decid) s
5 654 M
(ability of infinite-candidate condorcet election , May's theorem and Arrow's theorem\) . Wri) s
5 643 M
(tten notes for this are at: http://sourceforge.net/p/asfer/code/568/tree/python-src/ComplFu) s
5 632 M
(nction_DHF_PVsNP_Misc_Notes.pdf. What this implies is the LHS is PRG circuit in NC or P whi) s
5 621 M
(le the RHS is a humongous infinite majority+SAT \(oracle\) circuit - unbounded fan-in constan) s
5 610 M
(t depth circuit. This then becomes an NP-complete Circuit SAT problem - http://www.cs.berke) s
5 599 M
(ley.edu/~luca/cs170/notes/lecture22.pdf. ) s
5 577 M
(If this infinite-ness breaches the polynomiality then what is quite puzzling is that RHS be) s
5 566 M
(comes a Direct Connect DC circuit equivalent to PH\(Polynomial Hierarchy\). Quoted excerpts f) s
5 555 M
(rom Arora-Barak for DC uniform circuits:) s
5 533 M
("... ) s
5 522 M
(6.6) s
5 511 M
(Circuits of exponential size) s
5 500 M
(As noted, every language has circuits of size O\(n^2^n \). However, actually finding these ci) s
5 489 M
(rcuits may) s
5 478 M
(be difficult\342\\200\\224 sometimes even undecidable. If we place a uniformity condition on the) s
5 467 M
( circuits, that) s
5 456 M
(is, require them to be efficiently computable then the circuit complexity of some languages) s
5 445 M
( could) s
5 434 M
(exceed n^2^n . In fact it is possible to give alternative definitions of some familiar comp) s
5 423 M
(lexity classes,) s
5 412 M
(analogous to the definition of P in Theorem 6.7.) s
5 401 M
(Definition 6.28 \(DC-Uniform\)) s
5 390 M
(Let {C n } n\342\\211\2451 be a circuit family. We say that it is a Direct Connect uniform \(DC uni) s
5 379 M
(form\) family if,) s
5 368 M
(given hn, ii, we can compute in polynomial time the i th bit of \(the representation of\) the) s
5 357 M
( circuit C n .) s
5 346 M
(More concretely, we use the adjacency matrix representation and hence a family {C n } n\342) s
5 335 M
(\\210\\210N is DC) s
5 324 M
(uniform iff the functions SIZE, TYPE and EDGE defined in Remark ?? are computable in polyno) s
5 313 M
(mial) s
5 302 M
(time.) s
5 291 M
(Note that the circuits may have exponential size, but they have a succinct representation i) s
5 280 M
(n) s
5 269 M
(terms of a TM which can systematically generate any required node of the circuit in polynom) s
5 258 M
(ial) s
5 247 M
(time.) s
5 236 M
(Now we give a \(yet another\) characterization of the class PH, this time as languages comput) s
5 225 M
(able) s
5 214 M
(by uniform circuit families of bounded depth. We leave it as Exercise 13.) s
5 192 M
(Theorem 6.29) s
5 181 M
(L \342\\210\\210 P H iff L can be computed by a DC uniform circuit family {C n } that) s
5 170 M
(\342\\200\242 uses AND, OR, NOT gates.) s
5 159 M
(O\(1\)) s
5 148 M
(\342\\200\242 has size 2^n) s
5 137 M
(and constant depth \(i.e., depth O\(1\)\).) s
5 126 M
(\342\\200\242 gates can have unbounded \(exponential\) fanin.) s
5 115 M
(\342\\200\242 the NOT gates appear only at the input level.) s
5 104 M
(If we drop the restriction that the circuits have constant depth, then we obtain exactly EX) s
5 93 M
(P) s
5 82 M
(...") s
5 60 M
(The RHS Majority+SAT circuit has all characteristics satisfying the DC-uniformity in the th) s
5 49 M
(eorem above - size can be exponential, unbounded fanin, depth is constant \(each Voter Circu) s
5 38 M
(it SAT CNF is AND of ORs - depth 3\) and NOT gates are required only in leaf nodes of the Vo) s
5 27 M
(ter Circuit SAT. Thus the counterexample could imply very,very importantly that P could be ) s
5 16 M
(equal to PH or EXP \(P=PH or P=EXP based on depth restricted or unrestricted\) in infinite or) s
5 5 M
( exponential case respectively - could have tumultuous ramifications for complexity theory ) s
_R
S
%%Page: (74) 74
%%BeginPageSetup
_S
18 36 translate
/pagenum 74 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (74) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(as a whole as it goes beyond P=NP question - for perfect voter scenario described in point ) s
5 731 M
(133 - all circumstantial evidences above point to this. ) s
5 709 M
(It is not necessary that per voter SAT is same for all voters. Each voter can have unrestri) s
5 698 M
(cted depth SAT clauses \(in real world ,each voter decides on his-her own volition and depth) s
5 687 M
( of their SAT circuits can vary based on complexity of per-individual decision making algor) s
5 676 M
(ithm\) - due to which RHS zero-error DC circuit need not be in PH but in EXP.) s
5 654 M
(even if a BQP algorithm is used in voting outside the purview of PH but in EXP, it doesn't ) s
5 643 M
(change the above unless:) s
5 632 M
( - perfection is impossible i.e there cannot be zero-error processes in the universe) s
5 621 M
( - DC-circuit is not drawable \(or undecidable if it can be constructed\)) s
5 610 M
( - infinite majority is undecidable \(so circuit is DC non-uniform and not DC-uniform\)) s
5 599 M
( - the voter CNF can only be 2-SAT \(which is highly unlikely\) and not k-SAT or 3-SAT) s
5 566 M
(129.1 Toda's theorem and P\(good\) circuit above:) s
5 555 M
(------------------------------------------------) s
5 544 M
(PH is contained in P^#P \(or\) P with #no-of-solutions-to-SAT oracle \(Toda's theorem\). ) s
5 533 M
(If zero-error Majority+SAT voting DC uniform circuit is in PH then due to LHS=RHS of the P\() s
5 522 M
(good\) series convergence \(in cases of p=0,p=1 and p=0.5 as derived in http://sourceforge.ne) s
5 511 M
(t/p/asfer/code/916/tree/cpp-src/miscellaneous/MajorityVotingErrorProbabilityConvergence.JPG) s
5 500 M
(\), ) s
5 489 M
(PH collapses\(?\) to P \(quite unbelievably\):) s
5 478 M
(LHS Pseudorandom choice is in P while RHS Majority+SAT is in PH=DC circuit \(restricted dept) s
5 467 M
(h\) or EXP \(unrestricted depth\)) s
5 456 M
(\(i.e there is a P algorithm for PH\). ) s
5 445 M
(if P=PH:) s
5 434 M
(  P=PH is in P^#P by Toda's theorem ) s
5 412 M
(if P=EXP:) s
5 401 M
( P=PH=EXP in P^#P or P=PH=EXP=P^#P \(which is a complete collapse\)) s
5 379 M
([p=0.5 is the uniform distribution which is a zero bias space while for other probabilities) s
5 368 M
( some bit patterns are less likely - epsilon-bias spaces]) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(--) s
5 313 M
(130. \(THEORY\) Counterexample definition for P Vs NP) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(--) s
5 280 M
(Majority Circuit with SAT voter inputs with finite odd number of voters, in uniform distrib) s
5 269 M
(ution) s
5 258 M
(converges to 1/2 same as LHS for pseudorandom choice. Even number of voters is a special ca) s
5 247 M
(se described) s
5 236 M
(previously. Also both LHS and RHS converge to 1 if probability is 1 \(without any errors in ) s
5 225 M
(pseudorandom choice and majority voting\) which is counterintuitive in the sense that LHS no) s
5 214 M
(nprobabilistically achieves in PTIME what RHS does in NPTIME.) s
5 192 M
(---------------------------------------------------------) s
5 181 M
(131. \(THEORY\) Infinite majority and SAT+Majority Circuit) s
5 170 M
(---------------------------------------------------------) s
5 159 M
(Infinite version of majority circuit is also a kind of heavy hitters problem for streaming ) s
5 148 M
(algorithms where majority has to be found in an infinite bitstream of output from majority ) s
5 137 M
(circuits for voters\(http://en.wikipedia.org/wiki/Streaming_algorithm#Heavy_hitters\). But no) s
5 126 M
(nuniform distribution still requires hypergeometric series. Moreover the SAT circuit is NP-) s
5 115 M
(complete as the inputs are unknown and is P-Complete only for non-variable gates\(Circuit Va) s
5 104 M
(lue Problem\). Odd number of electorate does not give rise to above extra coefficient in sum) s
5 93 M
(mation and is directly deducible to 0.5.) s
5 71 M
(----------------------------------------------------------) s
5 60 M
(132. \(THEORY\) May's Theorem of social choice ) s
5 49 M
(----------------------------------------------------------) s
5 38 M
(May's Theorem: In a two-candidate election with an odd number of voters, majority rule is t) s
5 27 M
(he only voting system that is anonymous, neutral, and monotone, and that avoids the possibi) s
5 16 M
(lites of ties. ) s
_R
S
%%Page: (75) 75
%%BeginPageSetup
_S
18 36 translate
/pagenum 75 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (75) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(May's theorem is 2-candidate analog of Arrow's Theorem for 3-candidate condorcet voting. Ma) s
5 731 M
(y's theorem for 2 candidate simple majority voting defines a Group Decision Function which ) s
5 720 M
(is valued at -1, 0 or 1 \(http://www.jmc-berlin.org/new/theorems/MaysTheorem.pdf\) for negati) s
5 709 M
(ve, abstention and positive vote for a candidate. For 2 candidates, positive vote for one c) s
5 698 M
(andidate is negative for the other \(entanglement\).In the democracy circuit \(SAT+Majority\) t) s
5 687 M
(he SAT clauses are kind of Group Decision Functions but with only binary values without any) s
5 676 M
( abstention. This is kind of alternative formulation - corollary - for May's theorem. Arrow) s
5 665 M
('s theorem does not apply for 2 candidate simple majority voting. May's theorem stipulates ) s
5 654 M
(the conditions of anonymity,neutrality,decisiveness,monotonicity which should apply to the ) s
5 643 M
(Majority+SAT circuit decision function as well. Neutrality guarantees that all outcomes are) s
5 632 M
( equally probable without bias which might imply that only uniform distribution is allowed ) s
5 621 M
(in 2 candidate Majority+SAT voting. Thus there is a reduction from May's theorem to SAT+Maj) s
5 610 M
(ority democracy circuit. May's theorem does not apply to ties.This has been generalized to ) s
5 599 M
(infinite electorate by Mark Fey. Anonymity is secret balloting. Monotonicity is non-decreme) s
5 588 M
(ntal \(e.g by losing votes a losing candidate is not winner and vice versa\).) s
5 566 M
(Additional References:) s
5 555 M
(----------------------) s
5 544 M
(132.1 May's theorem - http://www.math.cornell.edu/~mec/Summer2008/anema/maystheorem.html) s
5 522 M
(------------------------------------------------------------------------------------) s
5 511 M
(133. \(THEORY\) Pseudorandom number generator and Majority voting for choice on a set) s
5 500 M
(------------------------------------------------------------------------------------) s
5 489 M
(Let S be a set of elements with "goodness" attribute for each element. Choice using LHS and) s
5 478 M
( RHS on this set is by a PRG and a majority voting circuit with SAT inputs. LHS for pseudor) s
5 467 M
(andom choice consists of two steps:) s
5 456 M
(133.1 Accuracy of the PRG - how random or k-wise independent the PRG is - this is usually b) s
5 445 M
(y construction of a PRG \(Blum-Micali, Nisan etc.,\) ) s
5 434 M
(133.2 Goodness of chosen element - PRG is used to choose an element from the set - this mim) s
5 423 M
(icks the realworld phenomenon of non-democractic social or non-social choices. Nature itsel) s
5 412 M
(f is the PRG or RG in this case. After choice is made, how "good" is the chosen is independ) s
5 401 M
(ent of \(133.1\). Proof is by contradiction - if it were dependent on PRG used then a disting) s
5 390 M
(uisher can discern the PRGs from True Randomness by significant fraction.) s
5 379 M
(133.3 Thus if the set S is 100% perfect - all elements in it are the best - LHS of P\(Good\) ) s
5 368 M
(is 1. Similarly the RHS is the majority voting within these "best" elements which can never) s
5 357 M
( err \(i.e their SAT clauses are all perfect\) that converges to 1 by binomial coefficient su) s
5 346 M
(mmation in uniform distribution.) s
5 324 M
(From the aforementioned,it is evident that for a 100% perfect set,both PRG\(LHS\) and Majorit) s
5 313 M
(y+SAT\(RHS\) Voting are two choice algorithms of equal outcome but with differing lowerbounds) s
5 302 M
(\(with p=0.5 both LHS and RHS are in BPP or BPNC,but when p=1 then RHS is NP and LHS is P or) s
5 291 M
( NC\). The set in toto is a black-box which is not known to the PRG or individual voters who) s
5 280 M
( are the constituents of it.) s
5 258 M
(--------------------------------------------------------------------------------) s
5 247 M
(\(FEATURE- DONE\) 134.Commits as on 8 January 2015) s
5 236 M
(--------------------------------------------------------------------------------) s
5 225 M
(134.1 C++ implementation for Longest Common Substring has been added to repository with log) s
5 214 M
(s. Datasets were the clustered encoded strings output by KMeans clustering C++ implementati) s
5 203 M
(on.) s
5 192 M
(134.2 AsFer+USBmd+VIRGO+KingCobra+Acadpdrafts - version 15.1.8 release tagged.) s
5 159 M
(--------------------------------------------------------------------------------) s
5 148 M
(135. \(THEORY\) Updates, Corrigenda and References to Space Filling Algorithm in :) s
5 137 M
(https://sites.google.com/site/kuja27/Analysis%20of%20a%20Randomized%20Space%20Filling%20Alg) s
5 126 M
(orithm%20and%20its%20Linear%20Program%20Formulation.pdf?attredirects=0) s
5 115 M
(--------------------------------------------------------------------------------) s
5 104 M
(135.1 The standard LP form can be obtained by slack variables \(with only equalities\) - ment) s
5 93 M
(ioned as free variables in above - http://ocw.mit.edu/courses/sloan-school-of-management/15) s
5 82 M
(-053-optimization-methods-in-management-science-spring-2013/tutorials/MIT15_053S13_tut06.pd) s
5 71 M
(f ) s
5 49 M
(135.2 Pseudorandom generator with linear stretch in NC1 - http://homepages.inf.ed.ac.uk/mcr) s
5 38 M
(yan/mfcs01.ps) s
5 27 M
(- ... " The notion of deterministically expanding a short seed into a long string that ... ) s
5 16 M
(the question of whether strong pseudorandom generators actually exist is a huge ... hardnes) s
5 5 M
(s assumption, that there is a secure pseudorandom generator in NC1 " ... [Kharitonov]) s
_R
S
%%Page: (76) 76
%%BeginPageSetup
_S
18 36 translate
/pagenum 76 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (76) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(135.3 This space filling algorithm is in NC \(using Tygar-Rief\) with an assumption that mult) s
5 720 M
(iplicative inverse problem is almost always not in RNC. ) s
5 698 M
(135.4 Tygar-Rief algorithm outputs n^c bits in parallel \(through its PRAM processors\) for n) s
5 687 M
(=logN for some composite N and is internal to the algorithm. For the sake of disambiguation) s
5 676 M
(, the number of bit positions in grid corresponding to the LP is set to Z.  ) s
5 654 M
(135.5 Above pseudorandom bits have to be translated into the coordinate positions in the gr) s
5 643 M
(id which is Z. In other words, pseudorandom bits are split into Z substrings \(n^c/logZ = Z\)) s
5 632 M
( because each coordinate in the grid of size 2^logZ/2 * 2^logZ/2 is notated by the tuple of) s
5 621 M
( size\(logZ/2, logZ/2\)) s
5 599 M
(135.6 Constant c can be suitably chosen as previously to be c = log\(Z*logZ\)/logn \(n need no) s
5 588 M
(t be equal to Z\)) s
5 566 M
(135.7 Either the n^c sized pseudorandom string can be split sequentially into \(logZ/2+logZ/) s
5 555 M
(2\) sized substring coordinate tuples \(or\) an additional layer of pseudorandomness can be ad) s
5 544 M
(ded to output the coordinate tuples by psuedorandomly choosing the start-end of substrings ) s
5 533 M
(from n^c size string, latter being a 2-phase pseudo-pseudo-random generator) s
5 511 M
(135.8 In both splits above, same coordinate tuple might get repeated - same bit position ca) s
5 500 M
(n be set to 1 more than once. Circumventing this requires a Pseudorandom Permutation which ) s
5 489 M
(is a bijection where Z substrings do not repeat and map one-one and onto Z coordinates on g) s
5 478 M
(rid. With this assumption of a PRP all Z coordinates are set to 1 \(or\) the P-Complete LP is) s
5 467 M
( maximized in this special case, in NC.) s
5 445 M
(135.9 There are Z substrings created out of the 2^n^c pseudorandom strings generated by Tyg) s
5 434 M
(ar-Rief Parallel PRG. Hence non-repeating meaningful substrings can be obtained only from Z) s
5 423 M
(!/2^n^c fraction of all pseudorandom substrings.) s
5 401 M
(135.10 Maximizing the LP can be reduced to minimizing the collisions \(or\) repetitive coordi) s
5 390 M
(nate substrings above thus filling the grid to maximum possible. An NC algorithm to get non) s
5 379 M
(-repetitive sequence of coordinates is to add the index of the substring to the each split ) s
5 368 M
(substring to get the hashed coordinates in the grid. For example in the 2*2 grid, if the pa) s
5 357 M
(rallel PRG outputs 01011100 as the pseudorandom bit string, the substrings are 01, 01, 11 a) s
5 346 M
(nd 00 which has a collision. This is resolved by adding the index binary \(0,1,2,3\) to corre) s
5 335 M
(sponding substring left-right or right-left. Thus 01+00, 01+01, 11+10, 00+11 - \(001,010,101) s
5 324 M
(,011\) - are the non-repetitive hashed coordinates. The carryover can be avoided by choosing) s
5 313 M
( the PRG output string size. This is a trivial bijection permutation.) s
5 291 M
(135.11 The grid filling can be formulated as a Cellular Automaton of a different kind - by ) s
5 280 M
(setting or incrementing the 8 neighbour bit positions of a coordinate to 1 while setting or) s
5 269 M
( incrementing a coordinate to 1.) s
5 247 M
(135.12 Instead of requiring the non-repetitive coordinate substrings mentioned in \(10\) supr) s
5 236 M
(a, the grid filling can be a multi-step algorithm as below which uses the Cellular Automato) s
5 225 M
(n mentioned in \(11\).) s
5 203 M
(------------------------------------) s
5 192 M
(135.13 Cellular Automaton Algorithm:) s
5 181 M
(------------------------------------) s
5 170 M
(\(Reference for reductions below: http://cstheory.com/stockmeyer@sbcglobal.net/csv.pdf [Chan) s
5 159 M
(dra-Stockmeyer-Vishkin]\)) s
5 148 M
([http://sourceforge.net/p/asfer/code/HEAD/tree/asfer-docs/AstroInferDesign.txt and ) s
5 137 M
(https://github.com/shrinivaasanka/asfer-github-code/blob/master/asfer-docs/AstroInferDesign) s
5 126 M
(.txt ]) s
5 104 M
(The circuits described in [ChandraStockmeyerVishkin] are constant depth circuits [AC0] and ) s
5 93 M
(thus in [NC1]  \(unbounded to bounded fanin logdepth reduction\)) s
5 71 M
(From wikipedia - Linear programs are problems that can be expressed in canonical form:) s
5 60 M
(c^T * X) s
5 49 M
(subject to AX <= b ) s
5 38 M
(and X >= 0 ) s
5 16 M
(maximize X) s
5 5 M
(subject to AX <= some maximum limit) s
_R
S
%%Page: (77) 77
%%BeginPageSetup
_S
18 36 translate
/pagenum 77 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (77) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(and X >= 0  ) s
5 720 M
(Below Cellular Automaton Monte Carlo NC algorithm for grid filling assumes that:) s
5 709 M
(C=[1,1,1,...1]) s
5 698 M
(A=[1,1,1....1] in the above and the vector of variables X is mapped to the grid - sequentia) s
5 687 M
(lly labelled in ascending from top-left to bottom-right, row-by-row and column-by-column. T) s
5 676 M
(hough this limits the number of variables to be a square, additional variables can be set t) s
5 665 M
(o a constant.) s
5 632 M
(Grid cells \(or variables in above grid\) are initialized to 0.) s
5 610 M
(loop_forever) s
5 599 M
({) s
5 588 M
(        \(135.13.1\) Parallel Pseudorandom Generator \(Tygar-Rief\) outputs bit string which ar) s
5 577 M
(e split into coordinates of grid and corresponding Grid cells are incremented instead of ov) s
5 566 M
(erwriting. This simulates parallel computation in many natural processes viz., rain. This i) s
5 555 M
(s in NC. This is related to Randomness Extractors - https://en.wikipedia.org/wiki/Randomnes) s
5 544 M
(s_extractor - if rainfall from cloud can be used a natural weak entropy parallel randomness) s
5 533 M
( source \(or strong?\) - predicting which steam particle of a cloud would become a droplet is) s
5 522 M
( heavily influenced by the huge number of natural variables - fluid mechanics comes into fo) s
5 511 M
(rce and this happens in parallel. Extractor is a stronger notion than Pseudorandom Generato) s
5 500 M
(r. Extracting parallel random bits can also be done from a fluid mechanical natural process) s
5 489 M
(es like turbulent flows.) s
5 478 M
(        \(135.13.2\) Each grid cell has a constant depth Comparison Circuit that outputs 1 if) s
5 467 M
( the grid cell value exceeds 1. This is in AC0\(constant-depth, polynomial size\).) s
5 456 M
(        \(135.13.3\) If above Comparison gate outputs 1, then another NC circuit can be const) s
5 445 M
(ructed that finds the minimum of grid neigbours of a cell \(maximum 8 neighbours for each ce) s
5 434 M
(ll in 2-dimensional grid\), decrements the central cell value and increments the minimum nei) s
5 423 M
(ghbour cell. This can be done by a sorting circuit defined in [ChandraStockMeyerVishkin]. T) s
5 412 M
(his simulates a percolation of a viscous fluid that flows from elevation to lowlying and ma) s
5 401 M
(kes even. Each grid cell requires the above comparator and decrement NC circuit.) s
5 390 M
(}) s
5 368 M
(Above can be diagramatically represented as: \(for N=a*b cells in grid in parallel\)) s
5 357 M
(------------------------------------------------------------------------------) s
5 346 M
(        ) s
5 335 M
(                cell\(1,1\)       ..............     cell\(a,b\)) s
5 324 M
(                ----------------------------------------------  ) s
5 313 M
(                PRG in parallel         ....    PRG in parallel) s
5 302 M
(                      ||                                ||) s
5 291 M
(                Comparison              ....       Comparison) s
5 280 M
(                      ||                                ||      ) s
5 269 M
(        Minimum of 8 neighbours         ....      Minimum of 8 neighbours) s
5 258 M
(                      ||                                ||) s
5 247 M
(                Increment                           Increment  ) s
5 236 M
(                and                                 and) s
5 225 M
(                Decrement                           Decrement) s
5 203 M
(135.14 For example, a 3*3 grid is set by pseudorandom coordinate substrings obtained from P) s
5 192 M
(arallel PRG \(6,7,7,8,9,1,3,3,2\) as follows with collisions \(grid coordinates numbered from ) s
5 181 M
(1-9 from left-to-right and top-to-bottom\):) s
5 170 M
(                ) s
5 159 M
(                1  1  2) s
5 148 M
(                0  0  1) s
5 137 M
(                2  1  1) s
5 115 M
(Above can be likened to a scenario where a viscous fluid is unevenly spread at random from ) s
5 104 M
(heavens.) s
5 93 M
(By applying cellular automaton NC circuit algorithm above, grid becomes: \(minimizes collisi) s
5 82 M
(ons,maximizes variables and LP\)) s
5 60 M
(                1  1  1) s
5 49 M
(                1  1  1) s
5 38 M
(                1  1  1) s
5 16 M
(Above can be likened to a scenario where each 8-neighbour grid cell underneath computes the) s
5 5 M
( evened-out cellular automaton in parallel. Size of the NC circuit is polynomial in LP vari) s
_R
S
%%Page: (78) 78
%%BeginPageSetup
_S
18 36 translate
/pagenum 78 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (78) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ables n and is constant depth as the neighbours are constant \(ChandraStockmeyerVishkin\)) s
5 731 M
(Thus there are 2 NC + 1 AC circuits which together maximize the special case of P-Complete ) s
5 720 M
(LP instance without simplex where each grid coordinate is an LP variable. 135.13.1 \(randoml) s
5 709 M
(y strewn fluid\) is independent of 135.13.2 and 135.13.3 \(percolation of the fluid\). This is) s
5 698 M
( both a Monte-Carlo and Las Vegas algorithm. The Parallel coordinate generation with Tyger-) s
5 687 M
(Reif Parallel PRG is Monte Carlo Simulation where as there is a guaranteed outcome with 100) s
5 676 M
(% possibility due to Comparison and Increment-Decrement circuits.) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(---) s
5 632 M
(135.15 References on Cellular Automata, Parallel Computation of CA, Fluid Dynamics, Navier-) s
5 621 M
(Stokes equation, Percolation Theory etc.,:) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(---) s
5 588 M
(135.15.1 http://www.nt.ntnu.no/users/skoge/prost/proceedings/acc11/data/papers/1503.pdf) s
5 577 M
(135.15.2 http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.52.8377) s
5 566 M
(135.15.3 http://www.stephenwolfram.com/publications/academic/cellular-automaton-fluids-theo) s
5 555 M
(ry.pdf) s
5 544 M
(135.15.4 Constant Depth Circuits - http://www.cs.berkeley.edu/~vazirani/s99cs294/notes/lec5) s
5 533 M
(.ps) s
5 522 M
(135.15.5 Complexity Theory Companion - https://books.google.co.in/books?id=ysu-bt4UPPIC&pg=) s
5 511 M
(PA281&lpg=PA281&dq=Chandra+Stockmeyer+Vishkin+AC0&source=bl&ots=fzmsGWrZXi&sig=jms3hmJoeiHs) s
5 500 M
(f5dq-vnMHUOU54c&hl=ta&sa=X&ei=jjcqVYrNFc25uATkvICoDA&ved=0CCAQ6AEwAQ#v=onepage&q=Chandra%20) s
5 489 M
(Stockmeyer%20Vishkin%20AC0&f=false) s
5 478 M
(135.15.6 Pseudorandom Permutation in Parallel - https://www.nada.kth.se/~johanh/onewaync0.p) s
5 467 M
(s) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(-) s
5 423 M
(135.16 A related algorithm - filling a square with infinitely many inscribed circles) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-) s
5 390 M
(Let S be a square of unit area. This square is filled with infinitely many circles of varyi) s
5 379 M
(ng radii. This) s
5 368 M
(can be expressed in terms of geometric equations for circle - x\(i\)^2 +y\(i\)^2 = r\(i\)^2. Each) s
5 357 M
( \(x\(i\),y\(i\)\) is a coordinate on the circle of radius r\(i\). Since x\(i\) and y\(i\) are < 1, let) s
5 346 M
( x\(i\) = 1/a\(i\) and y\(i\) = 1/b\(i\) for some integers a\(i\) and b\(i\). At infinity the square is) s
5 335 M
( filled with above infinite number of circles that cover the unit area \(has some analogies ) s
5 324 M
(to set cover and VC-dimension-shattering\). This can be written as the infinite summation pi) s
5 313 M
(*\(1/a\(1\)^2 + 1/b\(1\)^2 + 1/a\(2\)^2 + 1/b\(2\)^2 + ....\) = 1 \(or sum of areas of all circles equ) s
5 302 M
(als the unit area of square\). Thus this equation is a quadratic program instead of a linear) s
5 291 M
( program. This is extensible to higher dimensions also \(filling a hypercube with infinite n) s
5 280 M
(umber of n-spheres\). For example, in 3 dimensions, set of spherical bubbles of varying radi) s
5 269 M
(i covers the entire cube.) s
5 247 M
(135.17 Above grid can be alternatively formulated as a Voronoi Diagram where Parallel PRG r) s
5 236 M
(andomly sets multiple points on the plane and a tesselation of the plane covers these point) s
5 225 M
(s. Instead of squares a Delaunay Triangulation is obtained from the dual of the Voronoi dia) s
5 214 M
(gram.) s
5 192 M
(Reference:) s
5 181 M
(----------) s
5 170 M
(135.18. Circle Packing and Grid Filling - http://11011110.livejournal.com/332331.html - Fil) s
5 159 M
(ling a square with non-overlapping circles of maximum radii which is formulated as Dual of ) s
5 148 M
(LP relaxation problem for matching where the constraints are that circles do not overlap i.) s
5 137 M
(e sum of radii <= distance between centroids and objective function maximizes the radii var) s
5 126 M
(iables.) s
5 115 M
(135.19. 135.16 is a slight variant of Kepler's Theorem [Proof - [Hales] - https://sites.goo) s
5 104 M
(gle.com/site/thalespitt/] - filling a cube with small spheres has maximum density ~74%) s
5 93 M
(135.20 Maximizing Sum of Radii of Balls - [Eppstein] - http://www.ics.uci.edu/~eppstein/pub) s
5 82 M
(s/Epp-CCCG-16-slides.pdf) s
5 71 M
(135.21 Thue's Theorem For packing of discs on 2D - http://www.math.stonybrook.edu/~tony/wha) s
5 60 M
(tsnew/dec00/paper.html - Circle packing in 2-dimension has maximum density \(Pi/[2*sqrt\(3\)] ) s
5 49 M
(~ 90.69%\) when circles are arranged in hexagonal lattice. The LP formulation in https://5d9) s
5 38 M
(9cf42-a-62cb3a1a-s-sites.googlegroups.com/site/kuja27/Analysis%20of%20a%20Randomized%20Spac) s
5 27 M
(e%20Filling%20Algorithm%20and%20its%20Linear%20Program%20Formulation.pdf and Cellular Autom) s
5 16 M
(aton Algorithm Version above for Optimum Space Filling of a 2D plane by Monte-Carlo Paralle) s
5 5 M
(l Random process are RNC algorithmic solutions to Thue'e theorem \(e.g natural process of Ra) s
_R
S
%%Page: (79) 79
%%BeginPageSetup
_S
18 36 translate
/pagenum 79 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (79) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(in tiles earth in parallel by droplets of small radii and ultimately whole plane is covered) s
5 731 M
(, difference being allowance of circle overlaps\) maximizing the variable points on plane ha) s
5 720 M
(ving value 1.) s
5 709 M
(135.22 Circle Packing Theorem and Planarity - [Koebe-Andreev-Thurston] - Graph is planar if) s
5 698 M
( and only if it is K5,K3,3 minor-free and is an intersection graph which has edges drawn be) s
5 687 M
(tween centroids of every pair of tangential closely packed coins of varied radii as vertice) s
5 676 M
(s \(https://gitlab.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/Advanced) s
5 665 M
(ComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt\).Previous L) s
5 654 M
(inear Programming and Cellular Automaton algorithms for space filling by circular solids an) s
5 643 M
(d drops of fluids are random circle packings of 2-D space which are not necessarily close. ) s
5 632 M
(Random Close Packing is described in 461.) s
5 610 M
(------------------------------------------------------------------------------) s
5 599 M
(\(FEATURE- DONE\) 136. Commits as on 28,29 January 2015) s
5 588 M
(------------------------------------------------------------------------------) s
5 577 M
(Python parser script to translate Longest Common Substring extracted from clustered or clas) s
5 566 M
(sified) s
5 555 M
(set of encoded strings has been added to repository.) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(--) s
5 511 M
(\(FEATURE - DONE\) 137. Mining the Astronomical Datasets using KMeans and kNN - sequence of a) s
5 500 M
(lgorithms in AstroInfer) s
5 489 M
(- Commits as on 4 February 2015) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(--) s
5 456 M
(1. MaitreyaToEnchoros.py - This scripts reads a text file with set of date,time and long/la) s
5 445 M
(t for a specific class of events \(at present it has earthquakes of 8+ magnitude from 1900\).) s
5 434 M
( This script creates two encoded files asfer.enchoros.zodiacal and asfer.enchoros.ascrelati) s
5 423 M
(ve using Maitreya's Dreams opensource CLI.) s
5 412 M
(2. asfer.cpp is executed with doClustering=true by which kNN and KMeans clustered data are ) s
5 401 M
(obtained.) s
5 390 M
(3. asferkmeansclustering.cpp and asferkNNclustering.cpp implement the KMeans and kNN respec) s
5 379 M
(tively.) s
5 368 M
(4. Set of strings from any of the clusters has to be written manually in asfer.enchoros.clu) s
5 357 M
(stered  ) s
5 346 M
(5. asferlongestcommonsubstring.cpp - Within each cluster a pairwise longest common substrin) s
5 335 M
(g is found out.) s
5 324 M
(6. TranslateClusterPairwiseLCS.py - Translates the longest common substring to textual rule) s
5 313 M
( description mined from above dataset. Mined rules are grep-ed in python-src/MinedRulesFrom) s
5 302 M
(Datasets.earthquakes. Thus the astronomy dataset cpp-src/earthquakesFrom1900with8plusmag.tx) s
5 291 M
(t \(or cpp-src/magnitude8_1900_date.php.html\) ends up as the set of automatically mined rule) s
5 280 M
(s.) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(----) s
5 236 M
(\(FEATURE - DONE\) 138. Commandline sequence for Mining Astronomical Datasets \(e.g Earthquake) s
5 225 M
(s as above\) ) s
5 214 M
(using KMeans and kNN - Commits as on 4 February 2015) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(----) s
5 181 M
(138.1 In asfer.cpp, set doClustering=true and build asfer binary) s
5 170 M
(138.2 Set asfer.enchoros to asfer.enchoros.ascrelative or asfer.enchoros.zodiacal) s
5 159 M
(138.3 $./asfer 2>&1 > logfile1) s
5 148 M
(138.4 From logfile1 get maximum iteration clustered data for any cluster and update asfer.e) s
5 137 M
(nchoros.clustered) s
5 126 M
(138.5 In asfer.cpp set doLCS=true and build asfer binary) s
5 115 M
(138.6 $./asfer 2>&1 > logfile2) s
5 104 M
(138.7 grep "Longest Common Substring for" logfile2 2>&1 > python-src/asfer.ClusterPairwiseL) s
5 93 M
(CS.txt) s
5 82 M
(138.8 sudo python TranslateClusterPairwiseLCS.py | grep "Textually" 2>&1 >> MinedRulesFromD) s
5 71 M
(atasets.earthquakes) s
5 49 M
(----------------------------------------------------------------------------------------) s
5 38 M
(\(FEATURE - DONE\) 139. BigData Analytics subsystem \(related to point 64,65 on software analy) s
5 27 M
(tics\) ) s
5 16 M
(----------------------------------------------------------------------------------------) s
5 5 M
(139.1 \(DONE\) As mentioned in commit notes\(13February2015\) below, new multipurpose Java Hado) s
_R
S
%%Page: (80) 80
%%BeginPageSetup
_S
18 36 translate
/pagenum 80 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (80) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(op MapReduce ) s
5 731 M
(code has been added to a bigdata_analytics/ directory. At present it computes the frequenci) s
5 720 M
(es of astronomical entities in the MinedRulesFromDatasets textfile obtained from clustering) s
5 709 M
(+LCS. ) s
5 687 M
(139.2 VIRGO Linux Kernel has following design choices to interface with the machine learnin) s
5 676 M
(g code ) s
5 665 M
(in AsFer :) s
5 654 M
(        139.2.1 \(DONE\) the kernel module does an upcall to userspace asfer code - already t) s
5 643 M
(his facility exists in VIRGO linux drivers) s
5 632 M
(        139.2.2 \(INITIAL VIRGO COMMITS - DONE\) the analytics subsystem creates a policy con) s
5 621 M
(fig file /etc/virgo_kernel_analytics.conf having key-value pairs for each config variable b) s
5 610 M
(y mining the datasets with classification+clustering+any-hadoop-based-analytics. This is re) s
5 599 M
(ad by a VIRGO Linux kernel module - kernel_analytics - with VFS calls and sets\(and exports ) s
5 588 M
(symbols\) the runtime config variables that indirectly determine the kernel behaviour. These) s
5 577 M
( exported analytics variables can be read by other interested kernel modules in VIRGO Linux) s
5 566 M
(, USB-md and KingCobra \(and obviously mainline kernel itself\). An example Apache Spark pyth) s
5 555 M
(on script which mines the most frequent IP address from Uncomplicated Fire Wall and some de) s
5 544 M
(vice driver info from logs in /var/log/kern.log and /var/log/udev which can be set as a con) s
5 533 M
(fig key-value in /etc/virgo_kernel_analytics.conf has been added to AsFer repository. Dynam) s
5 522 M
(ic setting of kernel analytics key-value pairs has been implemented with Boost::Python C++ ) s
5 511 M
(and CPython C Extensions which obviates /etc/virgo_kernel_analytics.conf reload.) s
5 500 M
(        139.2.3 \(INITIAL ASFER COMMITS - DONE\) kernel module implements the machine learnin) s
5 489 M
(g algorithm in C \(C++ in kernel is not preferable - http://harmful.cat-v.org/software/c++/l) s
5 478 M
(inus\) which doesn't reuse existing code and hence less attractive. Despite this caveat, a P) s
5 467 M
(oC Boost::Python C++ invocation of VIRGO memory system calls works - VIRGO linux has been m) s
5 456 M
(ade an extension Python C++ and C module which is invoked from Python userspace. Commits fo) s
5 445 M
(r this are described in 217. This is a tradeoff between pure C kernelspace and pure python/) s
5 434 M
(C/C++ userspace.) s
5 412 M
(Diagrams depicting the above options have been uploaded at: http://sourceforge.net/p/asfer/) s
5 401 M
(code/HEAD/tree/asfer-docs/AsFerVIRGOLinuxKernelInterfaceDesignChoices.jpg) s
5 368 M
(----------------------------------------------------------------------------------) s
5 357 M
(\(FEATURE - DONE\) Commits as on 4 February 2015) s
5 346 M
(----------------------------------------------------------------------------------) s
5 335 M
(C++ implementation of Knuth-Morris-Pratt String Match Algorithm added to repository.) s
5 313 M
(----------------------------------------------------------------------------------) s
5 302 M
(\(FEATURE - DONE\) Commits as on 9 February 2015) s
5 291 M
(----------------------------------------------------------------------------------) s
5 280 M
(Python+R script for DFT analysis of multimedia data has been added to repository.) s
5 258 M
(----------------------------------------------------------------------------------) s
5 247 M
(\(FEATURE - DONE\) Commits as on 13 February 2015) s
5 236 M
(----------------------------------------------------------------------------------) s
5 225 M
(Initial commits for BigData Analytics \(for mined astro datasets\) using Hadoop 2.6.0 MapRedu) s
5 214 M
(ce:) s
5 192 M
(- new folder bigdata_analytics has been added) s
5 181 M
(- hadoop_mapreduce is subfolder of above) s
5 170 M
(- A Hadoop Java MapReduce implementation to compute frequencies of astronomical entities in) s
5 159 M
( MinedRulesFromDatasets.earthquakes \(obtained from clustering+LCS earlier in python-src\) ha) s
5 148 M
(s been added with compiled bytecode and jar\(MinedRulesFromDatasets_MapReducer.java\)) s
5 137 M
(- This jar was executed on a Single Node Hadoop Cluster as per the documentation at:) s
5 126 M
(        - http://hadoop.apache.org/docs/stable/hadoop-mapreduce-client/hadoop-mapreduce-cli) s
5 115 M
(ent-core/MapReduceTutorial.html) s
5 104 M
(        - http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleClus) s
5 93 M
(ter.html) s
5 82 M
(- The HDFS filesystem data is in hdfs_data - /user/root output with frequencies are in user) s
5 71 M
(root_output and namenode and datanode logs are in hadooproot_logs\(part_r_0000 has the frequ) s
5 60 M
(encies\)) s
5 49 M
(- hdfs_data also has commandlines history and the console output logs for above.) s
5 27 M
(--------------------------------------------------------------------) s
5 16 M
(\(FEATURE - DONE\) Commits as on 17 February 2015) s
5 5 M
(--------------------------------------------------------------------) s
_R
S
%%Page: (81) 81
%%BeginPageSetup
_S
18 36 translate
/pagenum 81 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (81) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Python implementations for LogLog and HyperLogLog cardinality estimation for streamed multi) s
5 731 M
(set data have been added to repository.) s
5 709 M
(--------------------------------------------------------------------) s
5 698 M
(\(FEATURE - DONE\) Commits as on 18 February 2015) s
5 687 M
(--------------------------------------------------------------------) s
5 676 M
(Python implementations for CountMinSketch\(frequencies and heavy-hitters\) and BloomFilter\(me) s
5 665 M
(mbership\) for Streaming Data have been added to repository.) s
5 643 M
(--------------------------------------------------------------------) s
5 632 M
(\(FEATURE - DONE\) Commits as on 19,20 February 2015) s
5 621 M
(--------------------------------------------------------------------) s
5 610 M
(Python clients for Apache Hive and HBase have been added to repository and invoked from) s
5 599 M
(Stream Abstract Generator script as 2-phase streamer for Streaming_<algorithm> scripts.) s
5 588 M
(Hive,Pig,HBase HDFS and script data added to repository in java-src/bigdata_analytics.) s
5 566 M
(---------------------------------------------------------------------------------) s
5 555 M
(\(FEATURE - DONE\) 140. Schematic for Apache Cassandra/Hive/HBase <=> AsFer Streaming_<algori) s
5 544 M
(thm> scripts interface ) s
5 533 M
(---------------------------------------------------------------------------------) s
5 511 M
(\($\) BigData Source\(e.g MovieLens\) => Populated in Apache Cassandra, Apache HiveQL CLI\(CREAT) s
5 500 M
(E TABLE..., LOAD DATA LOCAL INPATH...\),HBase shell/python client\(create 'stream_data','cf'.) s
5 489 M
(..\) \(or\) Apache PigLatin) s
5 467 M
(\($\) Apache Hive or HBase SQL/NoSQL or Cassandra table => Read by Apache Hive or HBase or Ca) s
5 456 M
(ssandra python client => StreamAbstractGenerator => Iterable,Generator => Streaming_<algori) s
5 445 M
(thm> scripts) s
5 423 M
(--------------------------------------------------------------------) s
5 412 M
(\(FEATURE - DONE\) Commits as on 25 February 2015) s
5 401 M
(--------------------------------------------------------------------) s
5 390 M
(Added the Hive Storage client code for Streaming Abstract Generator __iter__ overridden fun) s
5 379 M
(ction. With this Streaming_<algorithm> scripts can instantiate this class which mimicks the) s
5 368 M
( streaming through iterable with three storages - HBase, File and Hive.) s
5 346 M
(--------------------------------------------------------------------) s
5 335 M
(\(DONE\) 141. Classpaths required for Pig-to-Hive interface - for pig grunt shell in -x local) s
5 324 M
( mode) s
5 313 M
(--------------------------------------------------------------------) s
5 302 M
(1. SLF4J jars) s
5 291 M
(2. DataNucleus JDO, core and RDBMS jars \(has to be version compatible\) ) s
5 280 M
(in pig/lib and hive/lib directories:) s
5 269 M
(datanucleus-api-jdo-3.2.6.jar) s
5 258 M
(datanucleus-core-3.2.10.jar) s
5 247 M
(datanucleus-rdbms-3.2.9.jar) s
5 236 M
(3. Derby client and server jars) s
5 225 M
(4. Hive Shims jars) s
5 214 M
(hive-shims-0.11.0.jar) s
5 203 M
(5. All Hadoop core jars in /usr/local/hadoop/share/hadoop:) s
5 192 M
(common hdfs httpfs kms mapreduce tools yarn) s
5 181 M
(6. HADOOP_CONF_DIR\($HADOOP_HOME/etc/hadoop\) is also required in classpath.) s
5 159 M
(--------------------------------------------------------------------) s
5 148 M
(\(DONE\) 142. Classpaths required for Pig-to-HBase interface) s
5 137 M
(--------------------------------------------------------------------) s
5 126 M
(In addition to the jars above, following cloudera trace jars are required:) s
5 115 M
(htrace-core-2.01.jar and htrace-1.45.jar) s
5 93 M
(hadoop2_core_classpath.sh shell script in bigdata_analytics exports all the jars in \(141\) a) s
5 82 M
(nd \(142\).) s
5 60 M
(--------------------------------------------------------------------) s
5 49 M
(\(FEATURE - DONE\) Commits as on 26 February 2015) s
5 38 M
(--------------------------------------------------------------------) s
5 27 M
(Pig-HBase stream_data table creation and population related Pig scripts, HDFS data and scre) s
5 16 M
(enshots have been added to repository.) s
_R
S
%%Page: (82) 82
%%BeginPageSetup
_S
18 36 translate
/pagenum 82 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (82) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(--------------------------------------------------------------------) s
5 731 M
(\(FEATURE - DONE\) Commits as on 27 February 2015) s
5 720 M
(--------------------------------------------------------------------) s
5 709 M
(Cassandra Python Client has been added to repository and Streaming_AbstractGenerator.py has) s
5 698 M
( been) s
5 687 M
(updated to invoke Cassandra in addition to Hive,HBase and File storage. Cassandra data have) s
5 676 M
( been added) s
5 665 M
(in bigdata_analytics/) s
5 643 M
(--------------------------------------------------------------------) s
5 632 M
(143. \(FEATURE - DONE\) Storage Abstraction in AsFer - Architecture Diagram) s
5 621 M
(--------------------------------------------------------------------) s
5 610 M
(Architecture diagram for Hive/Cassandra/HBase/File NoSQL and other storage abstraction impl) s
5 599 M
(emented in python has been uploaded at: http://sourceforge.net/p/asfer/code/HEAD/tree/asfer) s
5 588 M
(-docs/BigDataStorageAbstractionInAsFer.jpg) s
5 566 M
(--------------------------------------------------------------------) s
5 555 M
(144. \(FEATURE - DONE\) Apache Spark and VIRGO Linux Kernel Analytics and Commits as on 6 Mar) s
5 544 M
(ch 2015) s
5 533 M
(--------------------------------------------------------------------) s
5 522 M
(1. Prerequisite: Spark built with Hadoop 2.6.0 with maven commandline:) s
5 511 M
(mvn -Pyarn -Phadoop-2.4 -Dhadoop.version=2.6.0 -DskipTests package) s
5 489 M
(2. Spark Python RDD MapReduce Transformation script for parsing the most frequent source IP) s
5 478 M
( address) s
5 467 M
(from Uncomplicated FireWall logs in /var/log/kern.log has been added to repository. This pa) s
5 456 M
(rsed) s
5 445 M
(IP address can be set as a config in VIRGO kernel_analytics module \(/etc/virgo_kernel_analy) s
5 434 M
(tics.conf\)) s
5 412 M
(--------------------------------------------------------------------) s
5 401 M
(\(FEATURE - DONE\) Commits as on 10 March 2015) s
5 390 M
(--------------------------------------------------------------------) s
5 379 M
(Spark python script updated for parsing /var/log/udev and logs in python-src/testlogs.) s
5 368 M
(\(spark-submit Commandline: bin/spark-submit /media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9) s
5 357 M
(ef78d8c8ea22/home/kashrinivaasan/KrishnaiResearch_OpenSource/asfer-code/python-src/SparkKer) s
5 346 M
(nelLogMapReduceParser.py  2> /media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea22/ho) s
5 335 M
(me/kashrinivaasan/KrishnaiResearch_OpenSource/asfer-code/python-src/testlogs/Spark_Logs.ker) s
5 324 M
(nlogUFWandHUAWEIparser.10March2015\)) s
5 302 M
(--------------------------------------------------------------------) s
5 291 M
(145. \(FEATURE - DONE\) Commits as on 26 March 2015) s
5 280 M
(--------------------------------------------------------------------) s
5 269 M
(New python script to fetch stock quotes by ticker symbol that can be used for Streaming_<al) s
5 258 M
(gorithm> scripts has been added.) s
5 236 M
(--------------------------------------------------------------------) s
5 225 M
(146. \(FEATURE - DONE\) Commits as on 2 April 2015) s
5 214 M
(--------------------------------------------------------------------) s
5 203 M
(New Python script to get Twitter tweets stream data for a search query has been added.) s
5 181 M
(--------------------------------------------------------------------) s
5 170 M
(147. \(FEATURE - DONE\) Related to Item 3 - Sequence Mining Implementation - Commits as on 3 ) s
5 159 M
(April 2015) s
5 148 M
(--------------------------------------------------------------------) s
5 137 M
(Python class that implements Apriori GSP algorithm for mining frequent subsequences in orde) s
5 126 M
(red sequences) s
5 115 M
(dataset has been added to repository. Though exponential, together with Longest Common Subs) s
5 104 M
(equence, Apriori GSP gives a near accurate subsequences - befitting trend of the dataset. F) s
5 93 M
(or example the logs added to repository print the candidate support after 5 iterations \(whi) s
5 82 M
(ch can be modified\) for asfer.enchoros dataset thereby eliciting a pattern in astronomical ) s
5 71 M
(objects.) s
5 49 M
(148. An example Class Association Rule Learnt from Sequence Mining:) s
5 38 M
(--------------------------------------------------------------) s
5 27 M
(For length 6 most frequent subsequences in earthquake astronomical data from 1900 are: \('co) s
5 16 M
(njoinedplanets',frequency\)) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (83) 83
%%BeginPageSetup
_S
18 36 translate
/pagenum 83 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (83) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(--------------------------) s
5 731 M
([\('0', 313\), \('4', 313\), \('8', 313\), \('3', 313\), \('7', 313\), \('2', 313\), \('6', 313\), \('1', ) s
5 720 M
(313\), \('5', 313\), \('9', 313\), \('a', 313\), \('14', 121\), \('46', 66\), \('56', 51\), \('13', 51\), ) s
5 709 M
(\('34', 42\), \('45', 36\), \('9a', 33\), \('79', 31\), \('24', 30\), \('16', 30\), \('69', 29\), \('7a', ) s
5 698 M
(29\), \('146', 29\), \('36', 26\), \('12', 25\), \('57', 24\), \('68', 23\), \('6a', 22\), \('49', 22\), \() s
5 687 M
('47', 22\), \('28', 21\), \('58', 21\), \('8a', 21\), \('78', 21\), \('134', 20\), \('25', 20\), \('35', ) s
5 676 M
(20\), \('23', 18\), \('29', 18\), \('48', 18\), \('27', 17\), \('3a', 17\), \('4a', 17\), \('59', 16\), \(') s
5 665 M
(37', 16\), \('67', 15\), \('5a', 14\), \('17', 14\), \('38', 13\), \('346', 12\), \('26', 11\), \('124', ) s
5 654 M
(11\), \('39', 11\), \('15', 11\), \('145', 11\), \('14a', 10\), \('456', 9\), \('348', 8\), \('2a', 8\), \() s
5 643 M
('247', 7\), \('345', 7\), \('1a', 7\), \('469', 7\), \('147', 7\), \('356', 7\), \('378', 6\), \('156', 6) s
5 632 M
(\), \('69a', 5\), \('249', 5\), \('179', 5\), \('167', 5\), \('358', 5\), \('37a', 4\), \('347', 4\), \('27) s
5 621 M
(9', 4\), \('46a', 4\), \('79a', 4\), \('568', 4\), \('169', 4\), \('57a', 4\), \('18', 4\), \('1456', 4\),) s
5 610 M
( \('679', 4\), \('149', 4\), \('359', 4\), \('137', 3\), \('135', 3\), \('1469', 3\), \('13a', 3\), \('368) s
5 599 M
(', 3\), \('1345', 3\), \('123', 3\), \('125', 3\), \('268', 3\), \('1346', 3\), \('24a', 3\), \('1347', 3) s
5 588 M
(\), \('56a', 3\), \('1256', 3\), \('1348', 3\), \('59a', 3\), \('457', 3\), \('256', 3\), \('1468', 3\), \() s
5 577 M
('468', 3\), \('467', 3\), \('1356', 3\), \('168', 3\), \('1378', 3\), \('19', 3\), \('234', 3\), \('68a',) s
5 566 M
( 3\), \('1247', 3\), \('148', 3\), \('136', 2\), \('67a', 2\), \('29a', 2\), \('349', 2\), \('167a', 2\), ) s
5 555 M
(\('38a', 2\), \('123a', 2\), \('78a', 2\), \('245', 2\), \('247a', 2\), \('248', 2\), \('4568', 2\), \('12) s
5 544 M
(48', 2\), \('258', 2\), \('1247a', 2\), \('359a', 2\), \('158', 2\), \('36a', 2\), \('47a', 2\), \('23a',) s
5 533 M
( 2\), \('12a', 1\), \('26a', 1\), \('1349', 1\), \('2349', 1\), \('139', 1\), \('1467', 1\), \('349a', 1\)) s
5 522 M
(, \('678', 1\), \('49a', 1\), \('126', 1\), \('127', 1\), \('34a', 1\), \('379', 1\), \('3568', 1\), \('23) s
5 511 M
(469', 1\), \('2349a', 1\), \('179a', 1\), \('124a', 1\), \('3479', 1\), \('369', 1\), \('27a', 1\), \('39) s
5 500 M
(a', 1\), \('458', 1\), \('459', 1\), \('578', 1\), \('16a', 1\), \('259', 1\), \('257', 1\), \('1678', 1\)) s
5 489 M
(, \('368a', 1\), \('17a', 1\), \('134a', 1\), \('1458', 1\), \('159', 1\), \('3469', 1\), \('2345', 1\), ) s
5 478 M
(\('2346', 1\), \('13479', 1\), \('479', 1\), \('169a', 1\), \('469a', 1\)]) s
5 456 M
(-------------------) s
5 445 M
(indices for planets:) s
5 434 M
(-------------------) s
5 423 M
( * 0 - for unoccupied) s
5 412 M
( * 1 - Sun) s
5 401 M
( * 2 - Moon) s
5 390 M
( * 3 - Mars) s
5 379 M
( * 4 - Mercury) s
5 368 M
( * 5 - Jupiter) s
5 357 M
( * 6 - Venus) s
5 346 M
( * 7 - Saturn) s
5 335 M
( * 8 - Rahu) s
5 324 M
( * 9 - Ketu) s
5 302 M
(Some inferences can be made from above:) s
5 291 M
(-------------------------------------- ) s
5 280 M
(By choosing the creamy layer of items with support > 30 \(out of 313 historic events\) - ~10%) s
5 269 M
(:) s
5 258 M
([\('14', 121\), \('46', 66\), \('56', 51\), \('13', 51\), \('34', 42\), \('45', 36\), \('9a', 33\), \('79') s
5 247 M
(, 31\), \('24', 30\), \('16', 30\)]) s
5 225 M
(Above implies that:) s
5 214 M
(-------------------) s
5 203 M
(Earthquakes occur most likely when, following happen - in descending order of frequencies:) s
5 192 M
(- Sun+Mercury \(very common\)) s
5 181 M
(- Mercury+Venus ) s
5 170 M
(- Jupiter+Venus) s
5 159 M
(- Sun+Mars) s
5 148 M
(- Mars+Mercury) s
5 137 M
(- Mercury+Jupiter) s
5 126 M
(- Ketu is in Ascendant) s
5 115 M
(- Saturn+Ketu) s
5 104 M
(- Moon+Mercury) s
5 93 M
(- Sun+Venus) s
5 71 M
(Machine Learnt pattern above strikingly coincides with some combinations in Brihat Samhita ) s
5 60 M
(\(Role of Mars, Nodes, and 2 heavy planets, Mercury-Venus duo's role in weather vagaries\) an) s
5 49 M
(d also shows some new astronomical patterns \(Sun+Mars and Jupiter+Venus as major contributo) s
5 38 M
(rs\). Above technique is purely astronomical and scientific with no assumptions on astrology) s
5 27 M
(.) s
5 5 M
(Some recent major intensity earthquakes having above sequence mined astronomical conjunctio) s
_R
S
%%Page: (84) 84
%%BeginPageSetup
_S
18 36 translate
/pagenum 84 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (84) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ns :) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(----) s
5 709 M
(Sendai Earthquake - 11 March 2011 14:46 - Sun+Mars in Aquarius, Mercury+Jupiter in Pisces) s
5 698 M
(Nepal Earthquake - 25 April 2015 11:56 - Sun+Mars+Mercury in Aries ) s
5 687 M
(Chile Earthquake - 16 September 2015 22:55 -  Sun+Mars+Jupiter in Leo ) s
5 676 M
(All three have Sun+Mars coincidentally.) s
5 665 M
( ) s
5 643 M
(---------------------------------------------------------------) s
5 632 M
(\(FEATURE - DONE\) Commits as on 5 April 2015 ) s
5 621 M
(---------------------------------------------------------------) s
5 610 M
(Textual translation of Class Association Rules added to SequenceMining.py with logs.) s
5 588 M
(---------------------------------------------------------------) s
5 577 M
(\(FEATURE - DONE\) Commits as on 13 April 2015) s
5 566 M
(---------------------------------------------------------------) s
5 555 M
(Python implementation of :) s
5 544 M
(   - Part-of-Speech tagging using Maximum Entropy Equation of Conditional Random Fields\(CRF) s
5 533 M
(\) and ) s
5 522 M
(   - Viterbi path computation in HMM-CRF for Named Entity Recognition has been added to rep) s
5 511 M
(ository.) s
5 489 M
(--------------------------------------------------------------) s
5 478 M
(\(FEATURE - DONE\) Commits as on 15 April 2015) s
5 467 M
(--------------------------------------------------------------) s
5 456 M
(Named Entity Recognition Python script updated with:) s
5 445 M
(  - More PoS tags) s
5 434 M
(  - Expanded HMM Viterbi probabilities matrix) s
5 423 M
(  - Feature function with conditional probabilities on previously labelled word) s
5 401 M
(--------------------------------------------------------------) s
5 390 M
(\(FEATURE - DONE\) Commits as on 17 April 2015) s
5 379 M
(--------------------------------------------------------------) s
5 368 M
(Twitter Streaming python script updated with GetStreamFilter\(\) generator object for streami) s
5 357 M
(ng tweets data.) s
5 335 M
(-------------------------------------------------------------) s
5 324 M
(\(FEATURE - DONE\) 149. Commits as on 10 May 2015) s
5 313 M
(-------------------------------------------------------------) s
5 302 M
(A Graph Search NetworkX+MatPlotLib Visualizer for WordNet has been implemented in python an) s
5 291 M
(d has been added to repository. This is an initial code and more algorithms to mine relatio) s
5 280 M
(nships within a text data would be added using WordNet as ontology - with some similarities) s
5 269 M
( to WordNet definition subgraph obtained in http://sourceforge.net/p/asfer/code/HEAD/tree/p) s
5 258 M
(ython-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit.py. But in this script v) s
5 247 M
(isualization is more important.) s
5 225 M
(-------------------------------------------------------------) s
5 214 M
(\(FEATURE - DONE\) Commits as on 12 May 2015) s
5 203 M
(-------------------------------------------------------------) s
5 192 M
(WordNet Visualizer script has been updated to take and render the WordNet subgraph computed) s
5 181 M
( by Recursive Gloss Overlap algorithm in:) s
5 170 M
(- http://arxiv.org/abs/1006.4458) s
5 159 M
(- http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf) s
5 148 M
(- https://sites.google.com/site/kuja27/PresentationTAC2010.pdf?attredirects=0) s
5 126 M
(------------------------------------------------------------) s
5 115 M
(\(FEATURE - DONE\) 150. Commits as on 14 May 2015) s
5 104 M
(------------------------------------------------------------) s
5 93 M
(Updated WordNet Visualizer with:) s
5 82 M
(- bidirectional edges) s
5 71 M
(- graph datastructure changed to dictionary mapping a node to a list of nodes \(multigraph\)) s
5 60 M
(- With these the connectivity has increased manifold as shown by gloss overlap) s
5 49 M
(- the graph nodes are simply words or first element of lemma names of the synset) s
5 38 M
(- more networkx drawing layout options have been added) s
5 16 M
(Added code for:) s
5 5 M
(- removing self-loops in the WordNet subgraph) s
_R
S
%%Page: (85) 85
%%BeginPageSetup
_S
18 36 translate
/pagenum 85 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (85) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- for computing core number of each node \(maximum k such that node is part of k-core decomp) s
5 731 M
(osition\)) s
5 709 M
(In the input example, nodes "India" and "China" have core numbers 15 and 13 respectively wh) s
5 698 M
(ich readily classify the document to belong to) s
5 687 M
(class "India and China". Thus a new unsupervised classifier is obtained based on node degre) s
5 676 M
(es.) s
5 654 M
(------------------------------------------------------------) s
5 643 M
(\(FEATURE - DONE\) Commits as on 16 May 2015) s
5 632 M
(------------------------------------------------------------) s
5 621 M
(- added sorting the core numbers descending and printing the top 10% core numbers which are) s
5 610 M
( prospective classes the document could belong to.) s
5 599 M
(This is a new unsupervised text classification algorithm and is based on recursive gloss ov) s
5 588 M
(erlap algorithm in http://arxiv.org/abs/1006.4458 and) s
5 577 M
(http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf. A maj) s
5 566 M
(or feature of this algorithm is that it is more precise in finding the class of a document ) s
5 555 M
(as intrinsic merit is computed by mapping a text to subgraph of wordnet, than conventional ) s
5 544 M
(text classification and clustering based on distance metrics and training data.) s
5 522 M
(------------------------------------------------------------) s
5 511 M
(\(FEATURE - DONE\) 151. Commits as on 18 May 2015) s
5 500 M
(------------------------------------------------------------) s
5 489 M
(An interesting research was done on the wordnet subgraph obtained by Recursive Gloss Overla) s
5 478 M
(p algorithm:) s
5 467 M
(- PageRank computation for the WordNet subgraph was added from NetworkX library. This is pr) s
5 456 M
(obably one of the first applications of PageRank to) s
5 445 M
(a graph other than web link graph.) s
5 434 M
(- The objective was to find the most popular word in the subgraph obtained by the Random Wa) s
5 423 M
(lk Markov Model till it stabilized \(PageRank\)) s
5 412 M
(- The resultant word with maximum pagerank remarkably coincides with the most probable clas) s
5 401 M
(s of the document and is almost similar in) s
5 390 M
(ranking to core numbers of nodes ranked descending.) s
5 379 M
(- Some random blog text was used.) s
5 368 M
(- Above was mentioned as a theoretical statement in 5.12 of http://www.nist.gov/tac/publica) s
5 357 M
(tions/2010/participant.papers/CMI_IIT.proceedings.pdf) s
5 335 M
(--------------------------------------------------------------) s
5 324 M
(\(FEATURE - DONE\) Commits as on 19 May 2015) s
5 313 M
(--------------------------------------------------------------) s
5 302 M
(A primitive text generation from the definition graph has been implemented by:) s
5 291 M
(- computing the k-core of the graph above certain degree k so that the core is dense) s
5 280 M
(- each edge is mapped to a relation - at present "has" , "is in" are the only 2 relations \() s
5 269 M
(more could be added based on) s
5 258 M
(hypernyms\)) s
5 247 M
(- Each edge is output as "X <relation> Y") s
5 236 M
(- Above gives a nucleus text extracted from the original document) s
5 225 M
(- It implements the theory mentioned in: https://sites.google.com/site/kuja27/DocumentSumma) s
5 214 M
(rization_using_SpectralGraphTheory_RGOGraph_2014.pdf?attredirects=0&d=1) s
5 192 M
(-------------------------------------------------------------) s
5 181 M
(\(FEATURE - DONE\) Commits as on 20 May 2015) s
5 170 M
(-------------------------------------------------------------) s
5 159 M
(Hypernyms/Hyponyms based sentence construction added to WordNet Visualizer. The core-number) s
5 148 M
( and pagerank based classifier was tested with more inputs. The accuracy and relevance of t) s
5 137 M
(he word node with topmost core number and pagerank for RGO graph looks to be better than th) s
5 126 M
(e traditional supervised and unsupervised classifiers/clusterers. The name of the class is ) s
5 115 M
(inferred automatically without any training inputs or distance metrics based only on densit) s
5 104 M
(y of k-core subgraphs.) s
5 82 M
(-------------------------------------------------------------) s
5 71 M
(\(FEATURE - DONE\) Commits as on 21 May 2015) s
5 60 M
(-------------------------------------------------------------) s
5 49 M
(Updated the Visualizer to print the WordNet closure of hypernyms and hyponyms to generate a) s
5 38 M
( blown-up huge sentence. The closure\(\) operator) s
5 27 M
(uncovers new vertices and edges in the definition graph \(strict supergraph of RGO graph\) an) s
5 16 M
(d it is a mathematically generated sentence) s
5 5 M
(\(similar to first order logic and functional programming compositionality\) and mimicks an i) s
_R
S
%%Page: (86) 86
%%BeginPageSetup
_S
18 36 translate
/pagenum 86 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (86) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(deal human-thinking process \(psychological process of evocation which is complete closure i) s
5 731 M
(n human brain on a word utterance\).) s
5 709 M
(-------------------------------------------------------------) s
5 698 M
(\(FEATURE - DONE\) 151. Commits as on 22,23,24 May 2015) s
5 687 M
(-------------------------------------------------------------) s
5 676 M
(Added code for computing recursive composition of lambda functions over the RGO graph relat) s
5 665 M
(ions\(edges\):) s
5 654 M
(- For this the Depth First Search Tree of the graph is computed with NetworkX) s
5 643 M
(- The lambda function is created for each edge) s
5 632 M
(- Composition is done by concatenating a recursive parenthesisation string of lambda expres) s
5 621 M
(sions:) s
5 610 M
(        for each DFS edge:) s
5 599 M
(                Composed_at_tplus1 = Composed_at_t\(lambda <edge>\) ) s
5 588 M
(- DFS is chosen as it mimicks a function invocation stack) s
5 577 M
(- Lambda composition closure on the Recursive Gloss Overlap graph has been rewritten to cre) s
5 566 M
(ate a huge lambda composition string with parentheses. Also two new lambda function relatio) s
5 555 M
(ns have been introduced - "subinstance of" and "superinstance of". These are at present mos) s
5 544 M
(t likely do) s
5 533 M
(not exist in WordNet parlance, because the Recursive Gloss OVerlap algorithm grows a graph ) s
5 522 M
(recursively from WordNet Synset definition tokenization.) s
5 511 M
(- Thus a tree is built which is made into a graph by pruning duplicate edges and word verti) s
5 500 M
(ces. WordNet graph does not have a depth. RGO algorithm adds one more dimension to WordNet ) s
5 489 M
(by defining above relations. These are different from hyper/hypo-nymns. During recursive gl) s
5 478 M
(oss overlap, if Y is in Synset definition of X, Y is " subinstance of" X and X is "superins) s
5 467 M
(tance of" Y.) s
5 456 M
(- Thus RGO in a way adds new hierarchical recursive relationships to WordNet based on Synse) s
5 445 M
(t definition.) s
5 434 M
(- The lambda composition obtained above is a mathematical or lambda calculus representation) s
5 423 M
( of a text document - Natural Language reduced to Lambda calculus compositionality operator) s
5 412 M
(.) s
5 390 M
(--------------------------------------------------------------) s
5 379 M
(\(FEATURE - DONE\) Commits as on 26 May 2015) s
5 368 M
(--------------------------------------------------------------) s
5 357 M
(Added initial code for Social Network Analyzer for Twitter following to create a NetworkX g) s
5 346 M
(raph and render it with MatPlotLib.) s
5 324 M
(---------------------------------------------------------------) s
5 313 M
(\(FEATURE - DONE\) Commits as on 3 June 2015) s
5 302 M
(---------------------------------------------------------------) s
5 291 M
(Bonacich Power Centrality computation added to Twitter Social Network Analyzer using PageRa) s
5 280 M
(nk computation.) s
5 258 M
(---------------------------------------------------------------) s
5 247 M
(\(FEATURE - DONE\) Commits as on 4 June 2015) s
5 236 M
(---------------------------------------------------------------) s
5 225 M
(- Eigen Vector Centrality added to Twitter Social Network Analyzer.) s
5 214 M
(- File storage read replaced with Streaming_AbstractGenerator in Streaming_HyperLogLogCount) s
5 203 M
(er.py and Streaming_LogLogCounter.py) s
5 181 M
(--------------------------------------------------------------) s
5 170 M
(\(FEATURE - DONE\) 152. Commits as on 7 June 2015) s
5 159 M
(--------------------------------------------------------------) s
5 148 M
(New Sentiment Analyzer script has been added to repository:) s
5 137 M
(- This script adds to WordNet Visualizer with Sentiment analysis using SentiWordNet from NL) s
5 126 M
(TK corpus) s
5 115 M
(- added a Simple Sentiment Analysis function that tokenizes the text and sums up positivity) s
5 104 M
( and negativity score) s
5 93 M
(- A non-trivial Sentiment Analysis based on Recursive Gloss Overlap graph - selects top ver) s
5 82 M
(tices with high core numbers) s
5 71 M
(and elicits the positivity and negativity of those vertex words.) s
5 60 M
(- Above is intuitive as cores of the graph are nuclei centering the document and the sentim) s
5 49 M
(ents of the vertices of those cores) s
5 38 M
(are important which decide the sentiment of the whole document.) s
5 27 M
(- Analogy: Document is akin to an atom and the Recursive Gloss Overlap does a nuclear fissi) s
5 16 M
(on to extricate the inner strucure of a document) s
5 5 M
(\(subatomic particles are the vertices and forces are edges\)) s
_R
S
%%Page: (87) 87
%%BeginPageSetup
_S
18 36 translate
/pagenum 87 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (87) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- Instead of core numbers, page_rank can also be applied \(It is intriguing to see that clas) s
5 731 M
(ses obtained from core_numbers ) s
5 720 M
(and page_rank coincide to large extent\) and it is not unusual to classify a document in mor) s
5 709 M
(e than one class \(as it is more realistic\).) s
5 687 M
(Above script can be used for any text including social media and can be invoked as a utilit) s
5 676 M
(y from SocialNetworkAnalysis_<brand> scripts.) s
5 665 M
(Microblogging tweets are more crisp and "emotionally precise" i.e. extempore - convey insta) s
5 654 M
(ntaneous sentiment \(without much of a preparation\) ) s
5 632 M
(------------------------------------------------------------------) s
5 621 M
(\(FEATURE - DONE\) Commits as on 8 June 2015) s
5 610 M
(------------------------------------------------------------------) s
5 599 M
(Commits for:) s
5 588 M
( - fixing errors due to NLTK API changes in lemma_names\(\), definition\(\) ... [ variables mad) s
5 577 M
(e into function calls ]) s
5 566 M
( - Unicode errors) s
5 555 M
( - Above were probably either due to Ubuntu upgrade to 15.04 which might have added some un) s
5 544 M
(icode dependencies and/or recent changes to NLTK 3.0) s
5 533 M
(   \(SentimentAnalyzer.py already has been updated to reflect above\)) s
5 511 M
(------------------------------------------------------------------) s
5 500 M
(\(FEATURE - DONE\) Commits as on 10 June 2015) s
5 489 M
(------------------------------------------------------------------) s
5 478 M
(Sentiment Analysis for twitter followers' tweets texts added to SocialNetworkAnalysis_Twitt) s
5 467 M
(er.py which invokes SentimentAnalyzer.py) s
5 445 M
(------------------------------------------------------------------) s
5 434 M
(\(FEATURE - DONE\) Commits as on 13 June 2015) s
5 423 M
(------------------------------------------------------------------) s
5 412 M
(Sentiment Analysis for tweet stream texts added to SocialNetworksAnalysis_Twitter.py which ) s
5 401 M
(invokes SentimentAnalyzer.py) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(---------------------) s
5 357 M
(153. \(FEATURE - THEORY - Minimum Implementation DONE\) Sentiment Analysis as lambda function) s
5 346 M
( composition of the Recursive Gloss Overlap WordNet subgraph) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(---------------------) s
5 313 M
(SentiWordNet based scoring of the tweets and texts have some false positives and negatives.) s
5 302 M
( But the lambda composition of the) s
5 291 M
(Recursive Gloss Overlap graph is done by depth-first-search - set of composition trees whic) s
5 280 M
(h overlap. If each edge is replaced by) s
5 269 M
(a function of sentiment scores of two vertex words, then lambda composition performed over ) s
5 258 M
(the graph is a better representation of sentiment) s
5 247 M
(of the document. This is at present a conjecture only. An implementation of this has been a) s
5 236 M
(dded to SentimentAnalyzer.py by doing a Belief) s
5 225 M
(Propagation of a sentiment potential in the Recursive Gloss Overlap graph considering it as) s
5 214 M
( a Bayesian graphical model.) s
5 192 M
(--------------------------------------------------------------------------) s
5 181 M
(Commits as on 15 June 2015) s
5 170 M
(---------------------------) s
5 159 M
(NeuronRain - \(AsFer+USBmd+VIRGO+KingCobra\) - version 15.6.15 release tagged) s
5 148 M
(Most of features and bugfixes are in AsFer and VIRGO) s
5 137 M
(--------------------------------------------------------------------------) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(---------------) s
5 93 M
(154. \(FEATURE - DONE\) Belief Propagation and RGO - Commits as on 20 June 2015) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(---------------) s
5 60 M
(SentimentAnalyzer is updated with a belief propagation algorithm \(Pearl\) based Sentiment sc) s
5 49 M
(oring by) s
5 38 M
(considering Recursive Gloss Overlap Definition Graph as graphical model and sentiwordnet sc) s
5 27 M
(ore for) s
5 16 M
(edge vertices as the belief potential propagated in the bayesian network \(RGO graph\). Since) s
5 5 M
( the) s
_R
S
%%Page: (88) 88
%%BeginPageSetup
_S
18 36 translate
/pagenum 88 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (88) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(sentiment is a collective belief extracted from a text rather than on isolated words and th) s
5 731 M
(e) s
5 720 M
(sentiwordnet scores are probabilities if normalized, Sentiment Analysis is reduced to Belie) s
5 709 M
(f Propagation problem.) s
5 698 M
(The previous Belief Propagation function is invoked from SocialNetworkAnalysis_<> code to S) s
5 687 M
(entiment Analyze tweet stream.) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(-----------------------------------------------) s
5 643 M
(155. Updates to https://sites.google.com/site/kuja27/DocumentSummarization_using_SpectralGr) s
5 632 M
(aphTheory_RGOGraph_2014.pdf?attredirects=0&d=1) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(-----------------------------------------------) s
5 599 M
(Algorithms and features based on Recursive Gloss Overlap graph:) s
5 588 M
(155.1 RGO visualizer) s
5 577 M
(155.2 RGO based Sentiment Analyzer - Belief Propagation in RGO as a graphical model) s
5 566 M
(155.3 Graph Search in text - map a text to wordnet relations by RGO graph growth - prints t) s
5 555 M
(he graph edges which are relations hidden in ) s
5 544 M
(a text) s
5 533 M
(155.4 New unsupervised text classifier based in RGO core numbers and PageRank) s
5 522 M
(155.5 Social Network Analyzer \(Tweets analysis by RGO graph growth\)) s
5 511 M
(155.5 Lambda expression construction from the RGO graph ) s
5 500 M
(155.6 Sentence construction by composition of edges) s
5 478 M
(----------------------------------------------------------------------------) s
5 467 M
(156. \(FEATURE - DONE\) Commits as on 4 July 2015 - RGO sentiment analyzer on cynical tweets) s
5 456 M
(----------------------------------------------------------------------------) s
5 445 M
(Added query for a "elections" to stream tweets related to it. Few sample cynical tweets wer) s
5 434 M
(e sentiment-analyzed with) s
5 423 M
(RGO Belief Propagation SentimentAnalyzer that gives negative sentiment scores as expected w) s
5 412 M
(hereas trivial SentiWordNet score summation  ) s
5 401 M
(gives a positive score wrongly.) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-------------------------) s
5 357 M
(157. \(THEORY\) Recursive Gloss Overlap graphical model as a Deep Learning algorithm that is ) s
5 346 M
(an alternative to Perceptrons - for text data) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-------------------------) s
5 313 M
(Point 155 mentions the diverse applications of Recursive Gloss Overlap algorithm each of wh) s
5 302 M
(ich touch upon multiple facets of Machine Learning \(or\) Deep Learning. Instead of a multi-l) s
5 291 M
(ayered perceptron and a backpropagation on it which have the standard notation \(W . X + bia) s
5 280 M
(s\) and have to be built, the wordnet RGO subgraph presents itself readily as a deep learnin) s
5 269 M
(g model without any additional need for perceptrons with additional advantage that complete) s
5 258 M
( graph theory results apply to it\(core numbers, pageranks, connectivity etc.,\), making it a) s
5 247 M
( Graph-theoretical learning instead of statistical \(for text data\). ) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(------------------------) s
5 203 M
(158. \(THEORY\) Graph Discovery \(or\) Graph Guessing and EventNet \(related to EventNet points ) s
5 192 M
(70-79\)) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(------------------------) s
5 159 M
(EventNet mentioned previously is an infinite cause-effect graph of event vertices with part) s
5 148 M
(akers for each event ) s
5 137 M
(\(kind of a PetriNet yet different\). A special case of interest is when only few subgraphs o) s
5 126 M
(f a giant EventNet is available and it is) s
5 115 M
(often necessary to discover or guess the complete graph of causality with partakers. A fami) s
5 104 M
(liar example is a crime scene investigation) s
5 93 M
(where:) s
5 82 M
( - it is necessary to recreate the complete set of events and their causalities with partak) s
5 71 M
(ers of a crime \(reverse-engineering\)) s
5 60 M
( - but only few clues or none are available - which are akin to very sparse subgraphs of th) s
5 49 M
(e crime scene EventNet) s
5 38 M
( - Guessing \(100-x\)% of the graph from x% clue subgraphs can be conjectured to be an NP pro) s
5 27 M
(blem - because non-deterministic polynomially an) s
5 16 M
(EventNet path can be guessed. As a counting problem this is #P-complete \(set of all paths a) s
5 5 M
(mong known subgraphs of an unknown supergraph\). But there is only one accepting path \(could) s
_R
S
%%Page: (89) 89
%%BeginPageSetup
_S
18 36 translate
/pagenum 89 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (89) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( be in Unambigous Logspace if the number of states is in logspace\) ) s
5 720 M
(Another example: set of blind men try to make out an object by touch.) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(-----------------------) s
5 676 M
(159. \(THEORY\) Pattern Grammar and Topological Homeomorphism of Writing Deformations) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(-----------------------) s
5 643 M
(Grammar for patterns like texts, pictures similar to RE,CFG etc., for pattern recognition:) s
5 632 M
(   - example text grammar:  <a> := <o> <operator> <\)>) s
5 621 M
(   - example text grammar:  <d> := <o> <operator> <l>) s
5 610 M
(   - example text grammar:  <v> := <\\> <operator> </>) s
5 599 M
(Previous grammar is extensible to any topological shapes. For example, handwriting of 2 ind) s
5 588 M
(ividuals are) s
5 577 M
(homeomorphic deformations.) s
5 555 M
(References:) s
5 544 M
(-----------) s
5 533 M
(159.1 Topology and Graphics - https://books.google.co.in/books?id=vCc8DQAAQBAJ&pg=PA263&lpg) s
5 522 M
(=PA263&dq=homeomorphism+and+handwriting&source=bl&ots=L_9kNgTcmF&sig=l-PfRL_jjcuF0L-2dJ5ruk) s
5 511 M
(rC4CM&hl=en&sa=X&ved=0ahUKEwji8bDJ683QAhWBQY8KHQ3qAuEQ6AEIHzAA#v=onepage&q=homeomorphism%20) s
5 500 M
(and%20handwriting&f=false) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(----------------------) s
5 456 M
(160. \(THEORY\) Cognitive Element) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(----------------------) s
5 423 M
(An element of a list or group is cognitive with respect to an operator if it "knows" about ) s
5 412 M
(all or subset of other elements of list or group where "knowing" is subject to definition o) s
5 401 M
(f operation as below:) s
5 390 M
(   - In list 2,3,5,7,17 - 17 knows about 2,3,5,7 in the sense that 17 = 2+3+5+7 with + oper) s
5 379 M
(ator) s
5 368 M
(   - In list "addon","add","on" - "addon" knows about "add" and "on" with concatenation ope) s
5 357 M
(rator ) s
5 346 M
(   - In list "2,3,6,8,9,10,..." - 6 knows about 2 and 3, 10 knows about 2 and 5 with factor) s
5 335 M
(ization as operator.) s
5 324 M
(This might have an equivalent notion in algebra. Motivation for this is to abstract cogniti) s
5 313 M
(on as group operator. Essentially, this reduces) s
5 302 M
(to an equivalence relation graph where elements are related by a cognitive operator edge.) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(----------------------------) s
5 258 M
(161. \(THEORY\) Philosophical intuition for P\(Good\) summation - Continuation of \(129\) and oth) s
5 247 M
(er previous related points.) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(----------------------------) s
5 214 M
(The apparent paradox in Perfect Voting can be reconciled as below to some extent:) s
5 203 M
(- Voting is done in parallel in real-world elections and not serially) s
5 192 M
(- Votes are counted in parallel - iterated integer addition in NC1 \(http://www.ccs.neu.edu/) s
5 181 M
(home/viola/classes/gems-08/lectures/le8.pdf\)) s
5 170 M
(- Thus if RHS is just Circuit-Value Problem and not a Circuit-SAT then LHS getting equated ) s
5 159 M
(to RHS is not unusual - both can be NC or P-Complete) s
5 148 M
(- Separation of RHS from LHS happens only when the Circuit-SAT is required in RHS.) s
5 137 M
(- P\(Good\) convergence in perfect voting implies that Voter SAT is not necessary if there is) s
5 126 M
( perfection \(proving the obvious\). This is) s
5 115 M
(true even though the PRG is imperfect that operates to choose on a perfect set.) s
5 104 M
(- Parallelism implies NC circuits) s
5 93 M
(- Above applies to infinite majority also \(Mark Fey\)) s
5 82 M
(- RHS in worst-case can be EXP-Complete if the Majority+Voter SAT oracle circuit is of unre) s
5 71 M
(stricted depth and lot of variables are common across all voters. Proving EXP-completeness ) s
5 60 M
(is ignored as it is evident from definition of DC circuits. Thus LHS has a P or NC algorith) s
5 49 M
(m to RHS EXP-Complete problem \(something seemingly preposterous unless perfection is prohib) s
5 38 M
(ited and voters do not have common variables in their boolean functions\)) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(--------------) s
_R
S
%%Page: (90) 90
%%BeginPageSetup
_S
18 36 translate
/pagenum 90 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (90) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(162. \(THEORY\) Majority Voting Circuit with Boolean Function Oracles) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(--------------) s
5 709 M
(If each voter has a boolean function to decide which has fanout > 1 gates instead of a form) s
5 698 M
(ula, RHS Majority Voting becomes generic.) s
5 687 M
(Decision tree, Certificate,  and other complexity measures automatically come into reckonin) s
5 676 M
(g. Thus RHS circuit is an infinite \(non-uniform\) majority circuit with boolean function cir) s
5 665 M
(cuit DAGs or oracles.) s
5 643 M
(References:) s
5 632 M
(-----------) s
5 621 M
(162.1 http://www.cs.cmu.edu/~odonnell/papers/barbados-aobf-lecture-notes.pdf) s
5 610 M
(162.1 http://www.math.u-szeged.hu/~hajnal/research/papers/dec_surv.gz) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(--------------) s
5 566 M
(163. \(THEORY\) Parity and Constant Depth - intuition \(not a formal proof, might have errors\)) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(--------------) s
5 533 M
(Inductive Hypothesis:) s
5 522 M
(---------------------) s
5 511 M
(For depth d and n variables parity has n^k sized circuit.) s
5 489 M
(For n+1 variables:) s
5 478 M
(-----------------) s
5 467 M
(       XOR gate) s
5 456 M
(       /      \\) s
5 445 M
(n-variable   \(n+1\)th variable) s
5 434 M
(circuit     ) s
5 412 M
(Each XOR gate is of atleast depth 2 or 3 with formula - \(x /\\ not y\) V \(not x /\\ y\). Thus f) s
5 401 M
(or each additional variable added depth gets added by atleast 2 contradicting the constant ) s
5 390 M
(depth d in hypothesis above though size is polynomial.) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(--------------) s
5 346 M
(164. \(FEATURE - DONE\) Commits as on 16 September 2015) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(--------------) s
5 313 M
(cpp-src/cloud_move - Implementation of Move Semantics for Cloud objects:) s
5 302 M
(-------------------------------------------------------------------------) s
5 291 M
(This expands on the usual move semantics in C++ and implements a Perfect Forwarding of obje) s
5 280 M
(cts over cloud. A move client invokes the T&& rvalue reference move constructor to move\(ins) s
5 269 M
(tead of copying\) a local memory content to a remote machine in userspace. Functionality sim) s
5 258 M
(ilar to this in kernelspace is required for transactional currency move in KingCobra - http) s
5 247 M
(://sourceforge.net/p/kcobra/code-svn/HEAD/tree/KingCobraDesignNotes.txt and https://github.) s
5 236 M
(com/shrinivaasanka/kingcobra-github-code/blob/master/KingCobraDesignNotes.txt. Though kerne) s
5 225 M
(l with C++ code is not advised ,kingcobra driver can make an upcall to userspace move clien) s
5 214 M
(t and server executables and perfom currency move with .proto currency messages.) s
5 192 M
(VIRGO kernel sockets code has been carried over and changed for userspace that uses traditi) s
5 181 M
(onal sockaddr_in and htons.) s
5 159 M
(C++ sockets reference code adapted for std::move - for use_addrinfo clause:) s
5 148 M
(- getaddrinfo linux man pages) s
5 137 M
(- http://codebase.eu/tutorial/linux-socket-programming-c/ \(addrinfo instead of usual sockad) s
5 126 M
(dr_in and htons\)) s
5 104 M
(Move semantics schematic:) s
5 93 M
(-------------------------) s
5 82 M
(                                    &) s
5 71 M
( member fn temp arg lvalue <-------source data rvalue) s
5 60 M
(                  |                  /) s
5 49 M
(              &   |                 / && \(removes a temp copy\)) s
5 38 M
(                  |                /) s
5 27 M
(                  V               /) s
5 16 M
(client proxy destination lvalue<-/) s
5 5 M
(                  |) s
_R
S
%%Page: (91) 91
%%BeginPageSetup
_S
18 36 translate
/pagenum 91 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (91) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                  |-------------------------> cloud server destination) s
5 720 M
(lvalue reference& does additional copy which is removed by rvalue reference&& to get the rv) s
5 709 M
(alue directly. Move client proxies the remote object and connects to Move server and the ob) s
5 698 M
(ject is written over socket.) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(-) s
5 654 M
(165. \(FEATURE - DONE\) Commits as on 18 September 2015) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-) s
5 621 M
(Cloud Perfect Forwarding - Google Protocol Buffer Currency :) s
5 610 M
(------------------------------------------------------------) s
5 599 M
(Currency object has been implemented with Google Protocol Buffers - in cloud_move/protocol_) s
5 588 M
(buffers/ src_dir and out_dir directories. Currency has been defined in src_dir/currency.pro) s
5 577 M
(to file. Choice of Protocol Buffer over other formats is due to:) s
5 566 M
(- lack of JSON format language specific compilers) s
5 555 M
(- XML is too complicated) s
5 544 M
(- Protocol Buffers also have object serialization-to-text member functions in generated C++) s
5 533 M
( classes.) s
5 511 M
(Protocol Buffer compilation after change to currency object:) s
5 500 M
(protoc -I=src_dir/ --cpp_out=out_dir/ src_dir/currency.proto) s
5 478 M
(------------------------------------------------------------------------------------------) s
5 467 M
(166. \(THEORY\) Related to 65 - Debug Analytics \(as part of Software Analytics\)) s
5 456 M
(------------------------------------------------------------------------------------------) s
5 445 M
(Debugging software is painful process with repetitive labour - For example kernel and devic) s
5 434 M
(e driver development has the following lifecycle:) s
5 423 M
(1. Writing the kernel patch code for some deep kernel panics.) s
5 412 M
(2. Kernel incremental or full build.) s
5 401 M
(3. Test the patch.) s
5 390 M
(\(1\),\(2\) and \(3\) are sometimes frustratingly repetitive. If the debugging is represented as ) s
5 379 M
(a state machine automaton, the cycles in automaton are the time consuming phases. Thus Debu) s
5 368 M
(g Analytics can be defined as the problem to find the most efficient debug state machine au) s
5 357 M
(tomaton without cycles or with least number of cycles and cycles of least length.) s
5 335 M
(References:) s
5 324 M
(166.1 Learning Finite State Machines - https://www.cs.upc.edu/~bballe/other/phdthesis.pdf) s
5 302 M
(------------------------------------------------------------------------------------------) s
5 291 M
(167. \(THEORY\) Prestige based ranking and Condorcet Elections) s
5 280 M
(------------------------------------------------------------------------------------------) s
5 269 M
(Web Search Engine Rankings by prestige measures are n-tuples of rankings \(for n candidate w) s
5 258 M
(eb pages where n could be few billions\) which are not condorcet rankings. Arrow's Theorem f) s
5 247 M
(or 3-candidate condorcet election allows a winner if and only if there is dictatorship. If ) s
5 236 M
(there are m search engines each creating n-tuples of condorcet rankings \(NAE tuples\), then ) s
5 225 M
(conjecturally there shouldn't be a voting rule or a meta search engine that circumvents cir) s
5 214 M
(cular rankings and produces a reconciled ranking of all NAE tuples from m search engines.) s
5 192 M
(--------------------------------------------------------------------------) s
5 181 M
(168. \(FEATURE - DONE\) Commits as on 20,21,22 October 2015) s
5 170 M
(--------------------------------------------------------------------------) s
5 159 M
(Initial code for LinkedIn crawl-scrape. Uses Python-linkedin from https://github.com/ozgur/) s
5 148 M
(python-linkedin with) s
5 137 M
(some additional parsing for url rewriting and wait for authurl input:) s
5 126 M
(- prints a linkedin url which is manually accessed through curl or browser) s
5 115 M
(- created redirect_url with code is supplied to raw_input "authurl:") s
5 104 M
(- parses the authcode and logs-in to linkedin to retrieve profile data; get_connections\(\) c) s
5 93 M
(reates a forbidden error) s
5 71 M
(Logs for the above has been added to testlogs) s
5 49 M
(---------------------------------------------------------------------------) s
5 38 M
(169. \(FEATURE - DONE\) Commits as on 28 October 2015) s
5 27 M
(---------------------------------------------------------------------------) s
5 16 M
(Deep Learning Convolution Perceptron Python Implementation.) s
_R
S
%%Page: (92) 92
%%BeginPageSetup
_S
18 36 translate
/pagenum 92 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (92) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(---------------------------------------------------------------------------) s
5 731 M
(170. \(FEATURE - DONE\) Commits as on 29 October 2015, 1 November 2015) s
5 720 M
(---------------------------------------------------------------------------) s
5 709 M
(Deep Learning BackPropagation Multilayered Perceptron Python Implementation.) s
5 687 M
(---------------------------------------------------------------------------) s
5 676 M
(171. Commits as on 3 November 2015) s
5 665 M
(---------------------------------------------------------------------------) s
5 654 M
(DeepLearning BackPropagation implementation revamped with some hardcoded data removal.) s
5 632 M
(----------------------------------------------------------------------------------------) s
5 621 M
(172. \(FEATURE - DONE\) Hurricane Datasets Sequence Mining - Commits as on 4 November 2015) s
5 610 M
(----------------------------------------------------------------------------------------) s
5 599 M
(Miscellaneous code changes:) s
5 588 M
(---------------------------) s
5 577 M
(- Weight updates in each iteration are printed in DeepLearning_BackPropagation.py) s
5 566 M
(- Changed maitreya_textclient path for Maitreya's Dreams 7.0 text client; Updated to read H) s
5 555 M
(URDAT2 NOAA Hurricane Dataset \(years 1851-2012\) in MaitreyaToEncHoro.py) s
5 544 M
(- Maximum sequence length set to 7 for mining HURDAT2 asfer.enchoros.seqmining) s
5 533 M
(- New files asfer.enchoros.ascrelative.hurricanes, asfer.enchoros.zodiacal.hurricanes have ) s
5 522 M
(been added which are created by MaitreyaToEncHoro.py) s
5 511 M
(- an example chartsummary for Maitreya's Dreams 7.0 has been updated) s
5 500 M
(- 2 logs for SequenceMining for HURDAT2 encoded datasets and Text Class Association Rules l) s
5 489 M
(earnt by SequenceMining.py Apriori GSP have been added to testlogs/) s
5 478 M
(- Increased number of iterations in BackPropagation to 100000; logs for this with weights p) s
5 467 M
(rinted are added in testlogs/; shows a beautiful convergence and error tapering \(~10^-12\)) s
5 445 M
(===================================================) s
5 434 M
(Sorted Candidate support for all subsequence lengths - gives an approximate pattern in data) s
5 423 M
(set:) s
5 412 M
([\('0', 1333\), \('4', 1333\), \('8', 1333\), \('3', 1333\), \('7', 1333\), \('2', 1333\), \('6', 1333\),) s
5 401 M
( \('1', 1333\), \('5', 1333\), \('9', 1333\), \('a', 1333\), \('14', 613\), \('46', 315\), \('67', 261\),) s
5 390 M
( \('78', 190\), \('59', 189\), \('49', 186\), \('34', 180\), \('57', 165\), \('45', 161\), \('13', 159\),) s
5 379 M
( \('56', 158\), \('58', 147\), \('12', 134\), \('23', 128\), \('146', 116\), \('36', 115\), \('8a', 113\)) s
5 368 M
(, \('25', 108\), \('9a', 106\), \('346', 103\), \('69', 99\), \('26', 98\), \('24', 95\), \('134', 90\), ) s
5 357 M
(\('16', 83\), \('6a', 81\), \('35', 77\), \('38', 75\), \('149', 75\), \('68', 73\), \('467', 73\), \('28') s
5 346 M
(, 71\), \('2a', 71\), \('569', 70\), \('29', 66\), \('367', 66\), \('4a', 64\), \('37', 59\), \('567', 59) s
5 335 M
(\), \('3a', 57\), \('457', 56\), \('27', 55\), \('7a', 55\), \('47', 51\), \('145', 50\), \('3467', 49\), ) s
5 324 M
(\('5a', 48\), \('124', 44\), \('79', 41\), \('14a', 38\), \('1346', 37\), \('459', 36\), \('17', 32\), \(') s
5 313 M
(126', 29\), \('246', 29\), \('1459', 28\), \('46a', 27\), \('59a', 25\), \('1a', 25\), \('15', 25\), \('1) s
5 302 M
(56', 25\), \('39', 24\), \('345', 23\), \('13467', 22\), \('1345', 22\), \('3457', 22\), \('19', 22\), \() s
5 291 M
('13457', 22\), \('1457', 21\), \('234', 21\), \('136', 20\), \('1367', 20\), \('2346', 18\), \('3567', ) s
5 280 M
(18\), \('356', 18\), \('78a', 17\), \('258', 16\), \('259', 16\), \('169', 16\), \('135', 14\), \('146a',) s
5 269 M
( 14\), \('278', 14\), \('67a', 13\), \('49a', 13\), \('469', 13\), \('13567', 12\), \('679', 12\), \('178) s
5 258 M
(', 12\), \('1356', 12\), \('237', 12\), \('3679', 12\), \('4569', 11\), \('678', 11\), \('268', 11\), \(') s
5 247 M
(456', 11\), \('57a', 11\), \('129', 10\), \('28a', 10\), \('238', 10\), \('68a', 10\), \('147', 10\), \(') s
5 236 M
(23a', 10\), \('459a', 10\), \('267', 10\), \('26a', 9\), \('23467', 9\), \('247', 9\), \('16a', 9\), \('2) s
5 225 M
(56', 9\), \('2569', 9\), \('137', 8\), \('249', 8\), \('1246', 8\), \('257', 8\), \('36a', 8\), \('168', ) s
5 214 M
(8\), \('1567', 8\), \('12a', 7\), \('346a', 7\), \('1459a', 7\), \('245', 7\), \('2459', 7\), \('2367', 7) s
5 203 M
(\), \('236', 7\), \('1268', 6\), \('567a', 6\), \('25a', 6\), \('1247', 6\), \('79a', 5\), \('47a', 5\), \() s
5 192 M
('149a', 4\), \('29a', 4\), \('1469', 4\), \('126a', 4\), \('19a', 4\), \('2469', 4\), \('37a', 3\), \('67) s
5 181 M
(9a', 3\), \('24a', 3\), \('367a', 3\), \('268a', 3\), \('1367a', 3\), \('58a', 3\), \('147a', 3\), \('367) s
5 170 M
(9a', 3\), \('357', 3\), \('123', 2\), \('69a', 2\), \('246a', 2\), \('56a', 2\), \('1268a', 2\), \('124a') s
5 159 M
(, 2\), \('1234', 2\), \('1249', 2\), \('4569a', 2\), \('1567a', 2\), \('2459a', 2\), \('1357', 2\), \('16) s
5 148 M
(8a', 2\), \('35a', 2\), \('569a', 2\), \('1346a', 2\), \('1246a', 2\), \('349', 1\), \('34a', 1\), \('137) s
5 137 M
(a', 1\), \('467a', 1\), \('38a', 1\), \('2345', 1\), \('237a', 1\), \('267a', 1\), \('27a', 1\), \('39a',) s
5 126 M
( 1\), \('247a', 1\), \('123467', 1\), \('1247a', 1\), \('134a', 1\), \('13467a', 1\), \('12345', 1\), \(') s
5 115 M
(12346', 1\), \('239', 1\), \('3467a', 1\)]) s
5 104 M
(size of dataset =  1333) s
5 82 M
(=========================================) s
5 71 M
(Sun , Mercury ,) s
5 60 M
(=========================================) s
5 49 M
(Class Association Rule  12  mined from dataset: with frequencies: 23.6309077269  percentage) s
5 38 M
(=========================================) s
5 27 M
(Mercury , Venus ,) s
5 16 M
(=========================================) s
5 5 M
(Class Association Rule  13  mined from dataset: with frequencies: 19.5798949737  percentage) s
_R
S
%%Page: (93) 93
%%BeginPageSetup
_S
18 36 translate
/pagenum 93 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (93) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(=========================================) s
5 731 M
(Venus , Saturn ,) s
5 720 M
(=========================================) s
5 709 M
(Class Association Rule  14  mined from dataset: with frequencies: 14.2535633908  percentage) s
5 698 M
(=========================================) s
5 687 M
(Saturn , Rahu ,) s
5 676 M
(=========================================) s
5 665 M
(Class Association Rule  15  mined from dataset: with frequencies: 14.1785446362  percentage) s
5 654 M
(=========================================) s
5 643 M
(Jupiter , Ketu ,) s
5 632 M
(=========================================) s
5 621 M
(Class Association Rule  16  mined from dataset: with frequencies: 13.9534883721  percentage) s
5 610 M
(=========================================) s
5 599 M
(Mercury , Ketu ,) s
5 588 M
(=========================================) s
5 577 M
(Class Association Rule  17  mined from dataset: with frequencies: 13.503375844  percentage) s
5 566 M
(=========================================) s
5 555 M
(Mars , Mercury ,) s
5 544 M
(=========================================) s
5 533 M
(Class Association Rule  18  mined from dataset: with frequencies: 12.3780945236  percentage) s
5 522 M
(=========================================) s
5 511 M
(Jupiter , Saturn ,) s
5 500 M
(=========================================) s
5 489 M
(Class Association Rule  19  mined from dataset: with frequencies: 12.0780195049  percentage) s
5 478 M
(=========================================) s
5 467 M
(Mercury , Jupiter ,) s
5 456 M
(=========================================) s
5 445 M
(Class Association Rule  20  mined from dataset: with frequencies: 11.9279819955  percentage) s
5 434 M
(=========================================) s
5 423 M
(Sun , Mars ,) s
5 412 M
(=========================================) s
5 401 M
(Class Association Rule  21  mined from dataset: with frequencies: 11.8529632408  percentage) s
5 390 M
(=========================================) s
5 379 M
(Jupiter , Venus ,) s
5 368 M
(=========================================) s
5 357 M
(Class Association Rule  22  mined from dataset: with frequencies: 11.0277569392  percentage) s
5 346 M
(=========================================) s
5 335 M
(Jupiter , Rahu ,) s
5 324 M
(=========================================) s
5 313 M
(Class Association Rule  23  mined from dataset: with frequencies: 10.0525131283  percentage) s
5 302 M
(=========================================) s
5 291 M
(Sun , Moon ,) s
5 280 M
(=========================================) s
5 269 M
(Class Association Rule  24  mined from dataset: with frequencies: 9.60240060015  percentage) s
5 258 M
(=========================================) s
5 247 M
(Moon , Mars ,) s
5 236 M
(=========================================) s
5 225 M
(Class Association Rule  25  mined from dataset: with frequencies: 8.70217554389  percentage) s
5 214 M
(=========================================) s
5 203 M
(Sun , Mercury , Venus ,) s
5 192 M
(=========================================) s
5 181 M
(Class Association Rule  26  mined from dataset: with frequencies: 8.6271567892  percentage) s
5 170 M
(=========================================) s
5 159 M
(Mars , Venus ,) s
5 148 M
(=========================================) s
5 137 M
(Class Association Rule  27  mined from dataset: with frequencies: 8.47711927982  percentage) s
5 126 M
(=========================================) s
5 115 M
(Rahu , Ascendant ,) s
5 104 M
(=========================================) s
5 93 M
(Class Association Rule  28  mined from dataset: with frequencies: 8.10202550638  percentage) s
5 82 M
(=========================================) s
5 71 M
(Moon , Jupiter ,) s
5 60 M
(=========================================) s
5 49 M
(Class Association Rule  29  mined from dataset: with frequencies: 7.951987997  percentage) s
5 38 M
(=========================================) s
5 27 M
(Ketu , Ascendant ,) s
5 16 M
(=========================================) s
5 5 M
(Class Association Rule  30  mined from dataset: with frequencies: 7.72693173293  percentage) s
_R
S
%%Page: (94) 94
%%BeginPageSetup
_S
18 36 translate
/pagenum 94 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (94) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(=========================================) s
5 731 M
(Mars , Mercury , Venus ,) s
5 720 M
(=========================================) s
5 698 M
(Above are excerpts from the logs added to testlogs/ for Sequence mined from HURDAT2 dataset) s
5 687 M
( for hurricanes from 1851 to 2012. Similar to the sequence mining done for Earthquake datas) s
5 676 M
(ets, some of the mined sequences above are strikingly similar to astronomical conjunctions ) s
5 665 M
(already mentioned in few astrological classics \(E.g Sun-Mercury-Venus - the legendary Sun f) s
5 654 M
(lanked by Mercury and Venus, Mercury-Venus\) and many others look quite new \(e.g prominence ) s
5 643 M
(of Venus-Saturn\). Though these correlations can be dismissed as coincidental, these pattern) s
5 632 M
(s are output automatically through a standard machine learning algorithm like Sequence Mini) s
5 621 M
(ng on astronomical datasets without any non-scientific assumptions whatsoever. Scientific c) s
5 610 M
(orroboration of the above might require knowhow beyond purview of computer science - e.g Oc) s
5 599 M
(eanography, Gravitational Effects on Tectonic Geology etc.,) s
5 577 M
(===========================================================================================) s
5 566 M
(======================) s
5 555 M
(173. \(FEATURE - DONE\) BigData Storage Backend Abstraction subsystem for AsFer - Commits as ) s
5 544 M
(on 5 November 2015 :) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(----------------------) s
5 511 M
(- These are initial minimal commits for abstracting storage of ingested bigdata for AsFer M) s
5 500 M
(achine Learning code) s
5 489 M
(- A dependency injection implementation of database-provider-specific objects is added to r) s
5 478 M
(epository.) s
5 467 M
(- Presently MySQLdb based MySQL backend has been implemented with decoupled configuration w) s
5 456 M
(hich are injected into Abstract Backend class to build an object graph. Python injector lib) s
5 445 M
(rary based on Google Guice Dependency Injection Framework \(https://pythonhosted.org/injecto) s
5 434 M
(r/\) is used for this.  Logs for a sample MySQL query has been added to testlogs/) s
5 412 M
(Schematic Dependency Injected Object Graph:) s
5 401 M
(-------------------------------------------) s
5 390 M
(                                        Injector ==========================================) s
5 379 M
(=================) s
5 368 M
(                                                                                           ) s
5 357 M
(           |) s
5 346 M
(                                                                                           ) s
5 335 M
(           |) s
5 324 M
(                                                                                           ) s
5 313 M
(           V) s
5 302 M
(                MySQL_Configuration ---injects config ----> MySQL_DBBackend ---- injects co) s
5 291 M
(nnection ----> Abstract_DBBackend ---> exec_query\(\)) s
5 280 M
(                                                                                           ) s
5 269 M
(          /\\) s
5 258 M
(                                                                                           ) s
5 247 M
(           |) s
5 236 M
(                xxx_Configuration ---injects config ----> xxx_DBBackend ---- injects connec) s
5 225 M
(tion -----------|) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(-----------------------------) s
5 181 M
(174. \(FEATURE - DONE\) AsFer C++ - Python Integration - Embedding Python in AsFer C++ - Comm) s
5 170 M
(its as on 11 November 2015) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(-----------------------------) s
5 137 M
(Python Embedding in C++ implementation has been added and invoked from asfer main entrypoin) s
5 126 M
(t with a boolean flag. This at present is not based on boost::python and directly uses CPyt) s
5 115 M
(hon API. Logs for this has been added in cpp-src/testlogs. With this all AsFer machine lear) s
5 104 M
(ning algorithms can be invoked from asfer.cpp main\(\) through commandline as: $./asfer <pyth) s
5 93 M
(on-script>.) s
5 71 M
(Schematic Diagram:) s
5 60 M
(-----------------) s
5 49 M
(        AsFer C++ -----> C Python Embedding ------> AsFer Python  --------> Machine Learnin) s
5 38 M
(g algorithms on Spark RDD datasets) s
5 27 M
(        /\\                                                                                 ) s
5 16 M
(             V) s
5 5 M
(         |                                                                                 ) s
_R
S
%%Page: (95) 95
%%BeginPageSetup
_S
18 36 translate
/pagenum 95 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (95) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(             |) s
5 731 M
(         --------------------<--------- userspace upcall ---------------VIRGO kernel analyt) s
5 720 M
(ics and other kernel modules) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(-------------------------------------) s
5 676 M
(175. \(FEATURE - DONE\) Config File Support for AsFer C++ and Python Machine Learning Algorit) s
5 665 M
(hms - Commits as on 12 November 2015) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(-------------------------------------) s
5 632 M
(Config File support for asfer has been added. In asfer.cpp main\(\), read_asfer_config\(\) is i) s
5 621 M
(nvoked which reads config in asfer.conf and executes the enabled AsFer algorithms in C++ an) s
5 610 M
(d Embedded Python. Config key-values are stored in a map.) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(-----------------) s
5 566 M
(176. \(THEORY\) Isomorphism of two Document Definition Graphs) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-----------------) s
5 533 M
(http://arxiv.org/abs/1006.4458 and http://www.nist.gov/tac/publications/2010/participant.pa) s
5 522 M
(pers/CMI_IIT.proceedings.pdf describe the Recursive Gloss Overlap Algorithm to construct a ) s
5 511 M
(Definition Graph from a text document with WordNet or any other Ontology. If Definition Gra) s
5 500 M
(phs extracted from two documents are Isomorphic, then it can be deduced that there is an in) s
5 489 M
(trinsic structural similarity between the two texts ignoring grammatical variations, though) s
5 478 M
( vertices differ in their labelling. [SubExponentialTIME algorithm for GI - Lazlo Babai - h) s
5 467 M
(ttp://people.cs.uchicago.edu/~laci/update.html]) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(--) s
5 423 M
(177. Commits as on 13 November 2015) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(--) s
5 390 M
(    - Corrections to Convolution Map Neuron computation with per-coordinate weight added) s
5 379 M
(    - Removed hardcoded convolution stride and pooling width in the class) s
5 368 M
(    - testlogs following input bitmap features have been added with the output of 5 neurons) s
5 357 M
( in final layer:) s
5 346 M
(        - Without Zero inscribed) s
5 335 M
(        - With Zero inscribed in bitmap as 1s) s
5 324 M
(        - With Bigger Zero inscribed in bitmap as 1s) s
5 313 M
(        - With Biggest Zero inscribed in bitmap as 1s) s
5 302 M
(      The variation of final neural outputs can be gleaned as the size of the pattern incre) s
5 291 M
(ases from none to biggest. ) s
5 280 M
(      The threshold has to be set to neural output without patterns. Anything above it show) s
5 269 M
(s a pattern.) s
5 258 M
(    - Added a config variable for invoking cloud perfect forwarding binaries in KingCobra i) s
5 247 M
(n asfer.conf) s
5 236 M
(    - config_map updated in asfer.cpp for enableCloudPerfectForwarding config variable) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(---) s
5 192 M
(178. \(THEORY\) Approximate Machine Translation with Recursive Gloss Overlap Definition Graph) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(---) s
5 159 M
(For natural language X \(=English\) an RGO graph can be constructed \(based on algorithms in h) s
5 148 M
(ttp://arxiv.org/abs/1006.4458 and http://www.nist.gov/tac/publications/2010/participant.pap) s
5 137 M
(ers/CMI_IIT.proceedings.pdf\). This definition graph is a subgraph of WordNet-English. Each ) s
5 126 M
(vertex is a word from English dictionary. New RGO graph for language Y is constructed from ) s
5 115 M
(RGO\(X\) by mapping each vertex in RGO\(X\) to corresponding word in language Y. RGO\(X\) and RGO) s
5 104 M
(\(Y\) are isomorphic graphs. Sentences in language Y can be constructed with lamda compositio) s
5 93 M
(n closure on the RGO\(Y\) graph implemented already. This is an approximation for machine tra) s
5 82 M
(nslation between two natural languages. I) s
5 71 M
(n the converse direction, text graphs of 2 texts in 2 different natural languages can be ve) s
5 60 M
(rified for Graph Isomo) s
5 49 M
(rphism. Isomorphic text graphs in two natural languages prima facie indicate the texts are ) s
5 38 M
(similarly organized an) s
5 27 M
(d have same meaning.) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (96) 96
%%BeginPageSetup
_S
18 36 translate
/pagenum 96 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (96) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(------------) s
5 731 M
(179. \(FEATURE - DONE\) Web Spider Implementation with Scrapy Framework - Commits as on 16 No) s
5 720 M
(vember 2015) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(------------) s
5 687 M
(Initial commits for a Web Spider - Crawl and Scrape - done with Scrapy framework. Presently) s
5 676 M
( it crawls Google News for a query and scrapes the search results to output a list of lines) s
5 665 M
( or a digest of the news link texts. This output file can be used for Sentiment Analysis wi) s
5 654 M
(th Recursive Gloss Overlap already implemented.  Complete Scrapy project hierarchy is being) s
5 643 M
( added to the repository with spider in WebSpider.py and) s
5 632 M
(crawled items in items.py) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(-----------------) s
5 588 M
(180. \(FEATURE - DONE\) Sentiment Analyzer Implementation for Spidered Texts - Commits as on ) s
5 577 M
(16 November 2015) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(-----------------) s
5 544 M
(Sentiment Analyzer implementation for Crawled-Scraped Google News Search result texts with ) s
5 533 M
(testlogs and screenshots of the RGO graph has) s
5 522 M
(been added. This has been made a specialized analyzer for spidered texts different from twi) s
5 511 M
(tter analyzer.) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(---------------) s
5 467 M
(181. Commits as on 17 November 2015) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(---------------) s
5 434 M
(Requirements.txt for package dependencies have been added to asfer-docs/.) s
5 423 M
(WebSpider Crawl-Scraped URLs descriptions are inserted into MySQL table \(asfer_webspider\) b) s
5 412 M
(y importing backend/Abstract_DBBackend.py MySQL) s
5 401 M
(implementation. Logs for this Scrapy crawl has been added to webspider/testlogs. WebSpider.) s
5 390 M
(py parse\(\) has been updated with MySQL_DBBackend execute_query\(\)s.  __init__.py have been a) s
5 379 M
(dded for directory-as-package imports.) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(---------------) s
5 335 M
(182. Commits as on 19 November 2015) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(---------------) s
5 302 M
(- Added more stop words in spidered text and commented text generation in SocialNetworkAnal) s
5 291 M
(ysis_WebSpider.py) s
5 280 M
(- logs and screenshots for this has been added to testlogs/) s
5 269 M
(- crawl urls in WebSpider.py has been updated) s
5 258 M
(- Added more edges in definition graph by enumerating all the lemma names of a keyword in p) s
5 247 M
(revious iteration. This makes the graph dense) s
5 236 M
(and probability of a node having more k-core number increases and classification is more ac) s
5 225 M
(curate.) s
5 214 M
(- logs and screenshots for updated web spidered news texts of two topics "Theoretical Compu) s
5 203 M
(ter Science" and "Chennai" have been added) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(---------------) s
5 159 M
(183. Commits as on 20 November 2015) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(---------------) s
5 126 M
(- Updated Spidered text for Sentiment Analysis) s
5 115 M
(- Changed the Sentiment Analysis scoring belief potential propagation algorithm:) s
5 104 M
(  - Two ways of scoring have been added - one is based on DFS tree of k-core subgraph of th) s
5 93 M
(e larger wordnet subgraph and the other is based on top core numbered vertices of the wordn) s
5 82 M
(et subgraph) s
5 71 M
(  - Sentiment thus is computed only for the core of the graph which is more relevant to the) s
5 60 M
( crux or class of the document and less pertinent) s
5 49 M
(vertices are ignored.) s
5 38 M
(  - the fraction score is multiplied by a heuristic factor to circumvent floating points) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(---------------) s
_R
S
%%Page: (97) 97
%%BeginPageSetup
_S
18 36 translate
/pagenum 97 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (97) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(184. Commits as on 23 November 2015) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(---------------) s
5 709 M
(- Updated SentimentAnalyzer.py and SocialNetworkAnalysis_Twitter.py scripts with core numbe) s
5 698 M
(r and k-core DFS belief potential propagation) s
5 687 M
(similar to SocialNetworkAnalysis_WebSpider.py.) s
5 676 M
(- logs and screenshots for twitter followers graph and tweet RGO graph Sentiment Analysis h) s
5 665 M
(ave been added.) s
5 654 M
(- Example tweet is correctly automatically classified into "Education" class based on top c) s
5 643 M
(ore number of the vertices and top PageRank. Again this is an intriguing instance where Top) s
5 632 M
( core numbered vertices coincide with Top PageRank vertices which is probably self-evident ) s
5 621 M
(from the fact that PageRank is a Markov Model Converging Random Walk and PageRank matrix mu) s
5 610 M
(ltiplication is influenced by high weightage vertices \(with lot of incoming links\)) s
5 599 M
(Sentiment Analysis of the tweet:) s
5 588 M
(- K-Core DFS belief_propagated_posscore: 244.140625) s
5 577 M
(  K-Core DFS belief_propagated_negscore: 1.0) s
5 566 M
(- Core Number belief_propagated_posscore: 419095.158577) s
5 555 M
(  Core Number belief_propagated_negscore: 22888.1835938) s
5 544 M
(- Above Sentiment Analysis rates the tweet with positive tonality.) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(---------------) s
5 500 M
(185. Commits as on 25 November 2015) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(---------------) s
5 467 M
(- New WordNetPath.py file has been added to compute the path in a WordNet graph between two) s
5 456 M
( words) s
5 445 M
(- WordNetSearchAndVisualizer.py text generation code has been updated for importing and inv) s
5 434 M
(oking path_between\(\) function in WordNetPath.py) s
5 423 M
(by which set of sentences are created from the RGO WordNet subgraph. This path is obtained ) s
5 412 M
(from common hypernyms for two word vertices for each of the edges in RGO WordNet subgraph. ) s
5 401 M
(RGO graph is a WordNet+ graph as it adds a new relation "is in definition of" to the existi) s
5 390 M
(ng WordNet) s
5 379 M
(that enhances WordNet relations. Each edge in RGO graph is made a hyperedge due to this hyp) s
5 368 M
(ernym path finding.) s
5 357 M
(- logs and screenshots have been added for above) s
5 335 M
(The text generated for the hypernym paths in WordNet subgraph in testlogs/ is quite primiti) s
5 324 M
(ve and sentences are connected with " is related to " phrase. More natural-looking sentence) s
5 313 M
(s can be created with randomly chosen phrase connectives and random sentence lengths.) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(---------------) s
5 269 M
(186. Commits as on 4 December 2015) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(---------------) s
5 236 M
(All the Streaming_<>.py Streaming Algorithm implementations have been updated with:) s
5 225 M
(- hashlib ripemd160 hash MD algorithm for hash functions and return hexdigest\(\)) s
5 214 M
(- USBWWAN byte stream data from USBmd print_buffer\(\) logs has been added as a Data Storage ) s
5 203 M
(and Data Source) s
5 192 M
(- logs for the above have been added to testlogs/) s
5 181 M
(- Streaming Abstract Generator has been updated with USB stream data iterable and parametri) s
5 170 M
(zed for data source and storage) s
5 159 M
(- Some corrections to the scripts) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(---------------) s
5 115 M
(187. Commits as on 7 December 2015) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(---------------) s
5 82 M
(- USB stream file storage name updated in Streaming_AbstractGenerator) s
5 71 M
(- Corrections to CountMinSketch - hashing updated to include rows \(now the element frquenci) s
5 60 M
(es are estimated almost exactly\)) s
5 49 M
(- logs for above updated to CountMinSketch) s
5 38 M
(Added Cardinality estimation with LogLog and HyperLogLog counters for USB stream datasets) s
5 27 M
(- HyperLogLog estimation: ~110 elements) s
5 16 M
(- LogLog estimation: ~140 elements) s
_R
S
%%Page: (98) 98
%%BeginPageSetup
_S
18 36 translate
/pagenum 98 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (98) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(---------------) s
5 720 M
(188. Commits as on 8 December 2015) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(---------------) s
5 687 M
(- Updated the Streaming LogLogCounter and HyperLogLogCounter scripts to accept StreamData.t) s
5 676 M
(xt dataset from Abstract Generator and added a) s
5 665 M
(Spark MapReducer script for Streaming Data sets for comparison of exact data with Streaming) s
5 654 M
(_<algorithm>.py estimations.) s
5 643 M
(- Added logs for the Counters and Spark MapReducer script on the StreamData.txt) s
5 632 M
(- LogLog estimation: ~133) s
5 621 M
(- HyperLogLog estimation: ~106) s
5 610 M
(- Exact cardinality: 104) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(---------------) s
5 566 M
(189. \(FEATURE - DONE\) Commits as on 9 December 2015) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(---------------) s
5 533 M
(- New python implementation for CountMeanMinSketch Streaming Data Frequency Estimation has ) s
5 522 M
(been added which is an improved version of) s
5 511 M
(CountMinSketch that computes median of average of estimator rows in sketch) s
5 500 M
(- Corrections to CountMinSketch hashing algorithms and Sketch width-depth as per the error ) s
5 489 M
(bounds has been made) s
5 478 M
(- Spark MapReducer prints the number of elements in the stream data set) s
5 467 M
(- Logs for the above have been added to testlogs) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(----------------) s
5 423 M
(190. \(FEATURE - DONE\) Commits as on 11 December 2015) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(----------------) s
5 390 M
(Dependency Injection code commits for MongoDB backend - With this MongoDB is also a storage) s
5 379 M
( backend for AsFer algorithms similar to MySQL:) s
5 368 M
(- Abstract_DBBackend.py has been updated for both MySQL and MongoDB injections) s
5 357 M
(- MongoDB configuration and backend connect/query code has been added. Backend is either po) s
5 346 M
(pulated by Robomongo or pymongo reading from the) s
5 335 M
(Streaming Abstract Generator iterable framework.) s
5 324 M
(- With this AsFer supports both SQL\(MySQL\) and NoSQL\(file,hive,hbase,cassandra backends in ) s
5 313 M
(Streaming Abstract Generator\).) s
5 302 M
(- log with a simple NoSQL table with StreamingData.txt and USBWWAN data has been added to t) s
5 291 M
(estlogs/.) s
5 280 M
(- MongoDB configuration has a database\(asfer-database\) and a collection\(asfer-collection\).) s
5 269 M
(- MongoDB_DBBackend @provides pymongo.collection.Collection which is @inject-ed to Abstract) s
5 258 M
(_DBBackend) s
5 247 M
(- Abstract_DBBackend changes have been reflected in Scrapy Web Spider - backend added as ar) s
5 236 M
(gument in execute_query\(\)) s
5 225 M
(- Abstract_DBBackend.py has a subtle problem:) s
5 214 M
(        - Multiple @inject\(s\) are not supported in Python Injector) s
5 203 M
(        - only the innermost @inject works and outer @inject throws a __init__ argument err) s
5 192 M
(ors in webspider/) s
5 181 M
(        - Conditional @inject depending on backend is required but at present switching the) s
5 170 M
( order of @inject\(s\) circumvents this) s
5 159 M
(- most recent scrapy crawl logs for this have been added to webspider/testlogs) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(----------------) s
5 115 M
(191. \(THEORY\) An update and additions to runtime analysis of Recursive Gloss Overlap Algori) s
5 104 M
(thm in TAC 2010) s
5 93 M
(\(http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf\)) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(----------------) s
5 60 M
(Analysis of runtime in the link above is too cryptic. An updated analysis of steps are give) s
5 49 M
(n here:) s
5 38 M
(- Nodes at topmost level are keywords in document. For each subsequent recursion step follo) s
5 27 M
(wing analysis is per keyword.) s
5 16 M
(- Nodes at level i-1 are computed \(base case\) : x^\(i-1\) where x is average size of gloss de) s
5 5 M
(finition) s
_R
S
%%Page: (99) 99
%%BeginPageSetup
_S
18 36 translate
/pagenum 99 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (99) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- Naive pairwise comparison of overlap is done at level i-1 which makes it x^2\(i-1\)) s
5 731 M
(- Tree isomorphism algorithms can be optionally applied to reduce number of nodes getting r) s
5 720 M
(ecomputed. There are) s
5 709 M
(polytime algorithms for subtree isomorphisms \(www.cs.bgu.ac.il/~dekelts/publications/subtre) s
5 698 M
(e.pdf\)) s
5 687 M
(- Nodes at level i-1 are reduced by Overlap\(i-1\) : x^\(i-1\) - Overlap\(i-1\)) s
5 676 M
(- Maximum number Nodes at level i - are from gloss expansion of those at i-1 : \(x^\(i-1\) - O) s
5 665 M
(verlap\(i-1\)\)*x) s
5 654 M
(- Thus total time at level i is: Time_for_pairwise_comparison_to_find_gloss_verlap + Time_f) s
5 643 M
(or_removing_isomorphic_nodes) s
5 632 M
(T\(i\) = sigma\([x^\(i-1\) - Overlap\(i-1\)]^2 + subtree_isomorphism\(i\)\)\)) s
5 621 M
(- Above is naively upperbounded to O\(x^\(2d\)\) [as subtree isomorphism is polynomial in super) s
5 610 M
(tree and subtree vertices and is only an optimization step that can be ignored]. For W keyw) s
5 599 M
(ords in the document time bound is O\(W*x^\(2d\)\).) s
5 588 M
(- If number of vertices in RGO multipartite graph \(ignoring isomorphism\) constructed above ) s
5 577 M
(is V=O\(x^\(d\)\), runtime is O\(W*V^2\)  which is) s
5 566 M
(far less than O\(E*V^2\) mentioned in TAC 2010 link because number of keywords in toplevel ar) s
5 555 M
(e less than number of edges created during recursion which depend on x and exponentially on) s
5 544 M
( d. For example after first recursion completion, number of edges are W*x.) s
5 533 M
(- On a related note runtime for intrinsic merit ranking of the RGO wordnet subgraph can not) s
5 522 M
( be equated per-se to ranking from prestige-based search engines as RGO is objective graph-) s
5 511 M
(theoretic ranking \(does not require massive bot-crawling, indexing and link graph construct) s
5 500 M
(ion\) and PageRank is subjective prestige based ranking\(depends on crawling, indexing and ti) s
5 489 M
(me needed for link graph construction\). Standard publicly available PageRank iteratively co) s
5 478 M
(mputes random walk matrix multiplication for link graphs for billions of nodes on WWW and t) s
5 467 M
(his runtime has to be apportioned per-node. Time and Space for crawling and indexing have a) s
5 456 M
(lso to be accounted for per-node. Naive bound for PageRank per node is O\(time_for_iterative) s
5 445 M
(_matrix_multiplication_till_convergence/number_of_nodes\). Matrix multiplication is O\(n^omeg) s
5 434 M
(a\) where omega~2.3. Thus pagerank bound per node is O\(\(\(n^omega\)*iterations\)/n\) assuming se) s
5 423 M
(rial PageRank computation. Parallel Distributed Versions of PageRank depend on network size) s
5 412 M
( and scalable.) s
5 401 M
(- Parallel Recursive Gloss Overlap graph construction on a cloud could reduce the runtime t) s
5 390 M
(o O\(W*V^2/c\) where c is size of the cloud.) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(--------------------) s
5 346 M
(192. \(FEATURE - DONE\) Commits as on 14 December 2015) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(--------------------) s
5 313 M
(- New Interview Algorithm script with NetworkX+Matplotlib rendering and takes as input a ra) s
5 302 M
(ndomly crawled HTML webpage\(uses beautiful soup to) s
5 291 M
(rip off script and style tags and write only text in the HTML page\) has been added) s
5 280 M
(- Above script also computes the graph theoretic connectivity of the RGO wordnet subgraph b) s
5 269 M
(ased on Menger's theorem - prints number of nodes) s
5 258 M
(required to disconnect the graph or equivalently number of node indpendent paths) s
5 247 M
(- logs and screenshots for the above have been added) s
5 236 M
(- WebSpider.py has been updated to crawl based on a crawling target parameter - Either a st) s
5 225 M
(reaming website\(twitter, streamed news etc.,\) or a) s
5 214 M
(HTML webpage) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(----------------------------------) s
5 170 M
(193. \(FEATURE - DONE\) RGO graph complexity measures for intrinsic merit of a text document ) s
5 159 M
(- Commits as on 15 December 2015) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(----------------------------------) s
5 126 M
(- Interview Algorithm Crawl-Visual script has been updated with a DOT graph file writing wh) s
5 115 M
(ich creates a .dot file for the RGO graph constructed) s
5 104 M
(- Also variety of connectivity and graph complexity measures have been added) s
5 93 M
(- Importantly a new Tree Width computing script has been added. NetworkX does not have API ) s
5 82 M
(for tree width, hence a naive script that iterates) s
5 71 M
(through all subgraphs and finds intersecting subgraphs to connect them and form a junction ) s
5 60 M
(tree, has been written. This is a costly measure compared to intrinsic merit which depends ) s
5 49 M
(only on graph edges,vertices and depth of recursive gloss overlap. Tree decomposition of gr) s
5 38 M
(aph is NP-hard.) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(-------------------) s
_R
S
%%Page: (100) 100
%%BeginPageSetup
_S
18 36 translate
/pagenum 100 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (100) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(194. Commits as on 16 December 2015) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-------------------) s
5 709 M
(- TreeWidth implementation has been corrected to take as input set of edges of the RGO grap) s
5 698 M
(h) s
5 687 M
(- TreeWidth for set of subgraphs less than an input parameter size is computed as TreeWidth) s
5 676 M
( computation is exponential in graph size) s
5 665 M
(and there are MemoryErrors in python for huge set of all subgraphs. For example even a smal) s
5 654 M
(l graph with 10 nodes gives rise to 1024) s
5 643 M
(possible subgraphs) s
5 632 M
(- Spidered text has been updated to create a small RGO graph) s
5 621 M
(- Logs and screenshots have been added) s
5 610 M
(- Each subgraph is hashed to create a unique string for each subgraph) s
5 599 M
(- TreeWidth is printed by finding maximum set in junction tree) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(------------------) s
5 555 M
(195. \(THEORY\) WordNet, Evocation, Neural networks, Recursive Gloss Overlap and Circuit Comp) s
5 544 M
(lexity) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(------------------) s
5 511 M
(WordNet and Evocation WordNet are machine learning models based on findings from psychologi) s
5 500 M
(cal experiments. Are WordNet and Neural networks) s
5 489 M
(related? Evocation WordNet which is network of words based on how evocative a word is of an) s
5 478 M
(other word readily translates to a neural network.) s
5 467 M
(This is because a machine learning abstraction of neuron - perceptron - takes weights, inpu) s
5 456 M
(ts and biases and if the linear program of these breach a threshold, output is activated. E) s
5 445 M
(vocative WordNet can be formulated as a neuron with input word as one end of an edge and th) s
5 434 M
(e output word as the other end - a word evokes another word. Each edge of an Evocation Word) s
5 423 M
(Net or even a WordNet is a single input neuron and WordNet is one giant multilayered percep) s
5 412 M
(tron neural network. Since Threshold circuits or TC circuit complexity class are theoretica) s
5 401 M
(l equivalents of a machine learning neuron model \(threshold gate outputs 1 if more than k o) s
5 390 M
(f inputs are 1 and thus an activation function of a neuron\), WordNet is hence a gigantic no) s
5 379 M
(n-uniform TC circuit of Threshold gates. Further TCk is in NC\(k+1\). This implies that all p) s
5 368 M
(roblems depending on WordNet are inherently parallelizable in theory and Recursive Gloss Ov) s
5 357 M
(erlap algorithm that depends on WordNet subgraph construction in http://www.nist.gov/tac/pu) s
5 346 M
(blications/2010/participant.papers/CMI_IIT.proceedings.pdf and updates to it in \(191\) above) s
5 335 M
( are non-uniformly parallelizable.) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(-----------------) s
5 291 M
(196. \(FEATURE - DONE\) Mined Rule Search in Astronomical Data - Commits as on 17 December 20) s
5 280 M
(15) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(-----------------) s
5 247 M
(- New Mined Class Association Rule Search script has been added. This script searches the a) s
5 236 M
(stronomical data with parsed Maitreya Text client) s
5 225 M
(data with date, time and longitude-latitude queries.) s
5 214 M
(- Where this is useful is after mining the astronomical data with SequenceMining, there is ) s
5 203 M
(a necessity to search when a particular mined rule occurs. This is an experimental, non-con) s
5 192 M
(ventional automated weather prediction \(but not necessarily unscientific as it requires exp) s
5 181 M
(ertise beyond computer science to establish veracity\).) s
5 170 M
(- Logs for this has been added in testlogs/ and chartsummary.rulesearch) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(------------) s
5 126 M
(197. Commits as on 18 December 2015) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(------------) s
5 93 M
(- Interview Algorithm crawl-visual script changed for treewidth invocation) s
5 82 M
(- Spidered text changed) s
5 71 M
(- Rule Search script corrected to use datetime objects) s
5 60 M
(- Rule Search script corrected to use timedelta for incrementing date and time) s
5 49 M
(- logs and screenshots for above) s
5 38 M
(- Junction Tree for RGO graph - logs and screenshots) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(------------) s
_R
S
%%Page: (101) 101
%%BeginPageSetup
_S
18 36 translate
/pagenum 101 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (101) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(198. \(THEORY\) Star Complexity of Graphs - Complement Function circuit and Unsupervised Clas) s
5 731 M
(sification with RGO graph) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(------------) s
5 698 M
(Star complexity of a graph defined in [Stasys Jukna] - http://www.thi.informatik.uni-frankf) s
5 687 M
(urt.de/~jukna/ftp/graph-compl.pdf) s
5 676 M
( is the minimum number of union and intersection operations of star subgraphs required to c) s
5 665 M
(reate the larger graph which is strikingly relevant to the necessity of quantitative intrin) s
5 654 M
(sic merit computation in Recursive Gloss Overlap algorithm [http://www.nist.gov/tac/publica) s
5 643 M
(tions/2010/participant.papers/CMI_IIT.proceedings.pdf]. Each star subgraph of the definitio) s
5 632 M
(n graph is an unsupervised automatically found class a text belongs to. Apart from this sta) s
5 621 M
(r complexity of a boolean circuit graph for Complement Function http://arxiv.org/pdf/1106.4) s
5 610 M
(102v1.pdf and in particular for Prime complement special case should have direct relationsh) s
5 599 M
(ip conjecturally to pattern in primes because boolean formula for the graph depends on prim) s
5 588 M
(e bits.) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(--------------) s
5 544 M
(199. \(FEATURE - DONE\) Tornado Webserver, REST API and GUI for NeuronRain - Commits as on 22) s
5 533 M
( December 2015) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(--------------) s
5 500 M
(Commits for NeuronRain WebServer-RESTfulAPI-GUI based on tornado in python-src/webserver_re) s
5 489 M
(st_ui/:) s
5 478 M
(- NeuronRain entrypoint based on tornado that reads a template and implements GET and POST ) s
5 467 M
(methods) s
5 456 M
(- templates/ contains renderable html templates) s
5 445 M
(- testlogs/ has neuronrain GUI logs) s
5 434 M
(- RESTful API entrypoint <host:33333>/neuronrain) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(--------------) s
5 390 M
(200. \(FEATURE - DONE\) NeuronRain as SaaS and PaaS - for commits above in \(199\)) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(--------------) s
5 357 M
(RESTful and python tornado based Graphical User Interface entrypoint that reads from variou) s
5 346 M
(s html templates and passes on) s
5 335 M
(incoming concurrent requests to NeuronRain subsystems - AsFer, VIRGO, KingCobra, USBmd and ) s
5 324 M
(Acadpdrafts - has bee added. Presently implements) s
5 313 M
(simplest possible POST form without too much rendering \(might require flask, twisted, jinja) s
5 302 M
(2 etc.,\) for AsFer algorithms execution.) s
5 291 M
(This exposes a RESTful API for commandline clients like cURL. For example a cURL POST is do) s
5 280 M
(ne to NeuronRain as:) s
5 269 M
(cURL POST: curl -H "Content-Type: text/plain" -X POST -d '{"component":"AsFer","script":"<s) s
5 258 M
(cript_name>","arguments":"<args>"}' http://localhost:33333/neuronrain where REST url is <ho) s
5 247 M
(st:port>/neuronrain.  Otherwise REST clients such as Advanced RESTful Client browser app ca) s
5 236 M
(n be used.) s
5 225 M
(With this NeuronRain is Software-As-A-Service \(SaaS\) Platform deployable on VIRGO linux ker) s
5 214 M
(nel cloud, cloud OSes and containers like Docker.) s
5 203 M
(More so, it is Platform-As-A-Service \(PaaS\) when run on a VIRGO cloud.) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(-----------------------------------------) s
5 159 M
(201. \(FEATURE - DONE\) Apache Spark MapReduce Parallel Computation of Interview Algorithm Re) s
5 148 M
(cursive Gloss Overlap Graph Construction) s
5 137 M
( - Commits as on 24 December 2015) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(-----------------------------------------) s
5 104 M
(- 2 python files for Spark MapReduce of Recursive Gloss Overlap graph construction has been) s
5 93 M
( added to repository) s
5 82 M
(- These two implement Interview Algorithm Recursive Gloss Overlap graph construction and Ma) s
5 71 M
(p-Reduce functions that parallellize) s
5 60 M
(each recursion step computing the gloss tokens from previous recursion level. This is the m) s
5 49 M
(ost important part of the algorithm which) s
5 38 M
(consumes lot of time in serial version along with overlap computation. Apache Spark has bee) s
5 27 M
(n recently gaining importance over its plain Hadoop counterpart and is many times faster th) s
5 16 M
(an Hadoop in benchmarks.) s
5 5 M
(- In this implementation, Resilient Distributed Dataset is the set of tokens in each recurs) s
_R
S
%%Page: (102) 102
%%BeginPageSetup
_S
18 36 translate
/pagenum 102 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (102) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ion level and is parallelly computable in a) s
5 731 M
(huge Spark cluster.) s
5 720 M
(- For example if Spark cluster has 10000 nodes, and each level of recursion produces X numb) s
5 709 M
(er of gloss tokens for graph vertices, time) s
5 698 M
(complexity in Spark is O\(X/10000\) where as serial version is O\(X\) with negligible network o) s
5 687 M
(verhead. Spark has in-memory datasets which) s
5 676 M
(minimizes network latency because of disk access.) s
5 665 M
(- There were lot of implementation issues to make the parallellism. Map and Reduce function) s
5 654 M
(s use namedtuples to return data. With more than one) s
5 643 M
(field in namedtuple, there are internal pickling issues in Py4J - Python4Java which PySpark) s
5 632 M
( internally invokes to get streamed socket bytes from) s
5 621 M
(Java side of the object wrapped as an iterable. This prevents returning multiple values - f) s
5 610 M
(or example Synsets - in Map-Reduce functions.) s
5 599 M
(- So only tokens at a level are map-reduced and returned while the prevlevelsynsets \(requir) s
5 588 M
(ed for adding edges across vertices\) are "pickled") s
5 577 M
(with a properietary asfer_pickle_load\(\) and asfer_pickle_dump\(\) functions that circumvents ) s
5 566 M
(the python and java vagaries in pickling.) s
5 555 M
(- With proprietary pickling and Map-Reduce functions, Recursive Gloss Overlap graph has bee) s
5 544 M
(n constructed in parallel. Screenshots for this has been added in testlogs.) s
5 533 M
(- Proprietary pickling is done to a text file which is also added to repository. This file ) s
5 522 M
(is truncated at the end of each recursion.) s
5 511 M
(- Subtlety here is that maximum number of tokens at a recursion level t = number_of_tokens_) s
5 500 M
(at_level_\(t-1\) * maximum_size_of_gloss_per_word\(s\)) s
5 489 M
(which grows as series = number_of_words*\(1 + s + s^2 + s^3 + ... + s^t_max\). Size of a docu) s
5 478 M
(ment - number of words - can be upperbounded by a constant \(d\) due to finiteness of average) s
5 467 M
( text documents in realworld ignoring special cases of huge webpages with PDF/other.) s
5 456 M
(- If size of the Spark cluster is O\(f\(d\)*s^t_max\), each recursion step is of time O\(d*s^t_m) s
5 445 M
(ax/f\(d\)*s^t_max\)=O\(d/f\(d\)\) and total time for all levels is O\(d*t_max/f\(d\)\) which is rankin) s
5 434 M
(g time per text document. This bound neglects optimization from overlaps and isomorphic nod) s
5 423 M
(es removal and is worst case upperbound. For ranking n documents this time bound becomes O\() s
5 412 M
(n*d*t_max/f\(d\)\). For constant t_max this bound is O\(n*d/f\(d\)\) - and thus linearly scalable.) s
5 401 M
(- Maximum size of gloss per word \(s\) is also an upper-boundable constant. With constant d a) s
5 390 M
(nd t_max , size of cluster O\(f\(d\)*s^t_max\) is constant too independent of number of documen) s
5 379 M
(ts.) s
5 368 M
(- Example: For set of 1000 word documents with f\(d\)=log\(d\), max gloss size 5 and recursion ) s
5 357 M
(depth 2, size of cluster is O\(log\(1000\)*25\)~250 nodes with runtime for ranking n documents ) s
5 346 M
(= O\(n*1000*t_max/log\(1000\)=O\(n*100*t_max\) which is O\(n\) for constant t_max.) s
5 335 M
(- Above is just an estimate of approximate speedup achievable in Spark cluster. Ideally run) s
5 324 M
(time in Spark cloud should be on the lines of analysis in \(191\) - O\(n*d*s^2\(t_max\)/f\(d\)*s^t) s
5 313 M
(_max\) = O\(n*d*s^t_max/f\(d\)\).) s
5 302 M
(- Thus runtime upperbound in worst case is O\(n*d*s^t_max/f\(d\)\) for cluster size O\(f\(d\)*s^t_) s
5 291 M
(max\).) s
5 280 M
(- If cluster autoscales based on number of documents also, size is a function of n and henc) s
5 269 M
(e previous size bound is changed to O\(g\(n\)*f\(d\)*s^t_max\) and corresponding time bound = O\(n) s
5 258 M
(*d*s^2\(t_max\)/\(f\(d\)*s^t_max*g\(n\)\)\) = O\(n*d*s^t_max/\(f\(d\)*g\(n\)\)\)) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(---------------------) s
5 214 M
(202. \(THEORY\) Recursive Gloss Overlap, Cognitive and PsychoLinguistics and Language Compreh) s
5 203 M
(ension) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(---------------------) s
5 170 M
(Recursive Gloss Overlap algorithm constructs a graph from text documents. Presently WordNet) s
5 159 M
( is probably the only solution available to) s
5 148 M
(get relations across words in a document. But the algorithm does not assume WordNet alone. ) s
5 137 M
(Any future available algorithms to create relational graphs from texts should be able to ta) s
5 126 M
(ke the place of WordNet. Evocation WordNet \(http://wordnet.cs.princeton.edu/downloads/evoca) s
5 115 M
(tion.zip\) is better than WordNet as it closely resembles a neural network model of a word e) s
5 104 M
(vocative of the other word and has stronger psychological motivation. There have been effor) s
5 93 M
(ts to combine FrameNet, VerbNet and WordNet into one graph. Merit of a document is independ) s
5 82 M
(ent of grammar and language in which it is written. For example a text in English and Frenc) s
5 71 M
(h with grammatical errors delving on the same subject are equivalently treated by this algo) s
5 60 M
(rithm as language is just a pointer to latent information buried in a document. Process of ) s
5 49 M
(Language Comprehension is a field of study in Cognitive and Psychological Linguistics. Prob) s
5 38 M
(lem with prestige based subjective rankings is that same document might get varied reviews ) s
5 27 M
(from multiple sources and consensus with majority voting is required. This is somewhat cont) s
5 16 M
(rary to commonsense because it assumes majority decision is correct 100% \(this is exactly t) s
5 5 M
(he problem analyzed by P\(Good\) binomial summation and majority voting circuits elsewhere in) s
_R
S
%%Page: (103) 103
%%BeginPageSetup
_S
18 36 translate
/pagenum 103 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (103) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( this document\). In complexity parlance prestige rankings are in BP* classes. Objective ran) s
5 731 M
(kings are also in BP* classes because of dependency on the framework like WordNet to extrac) s
5 720 M
(t relationships without errors, but less costlier than prestige rankings - major cost savin) s
5 709 M
(g being lack of dependence on WWW link graph crawling to rank a document.) s
5 687 M
(Intuition for Recursive Gloss Overlap for weighing natural language texts is from computati) s
5 676 M
(onal linguistics, Eye-Movement tracking and Circuit of the Mind [Leslie Valiant]. Human pro) s
5 665 M
(cess of comprehending language, recursion as an inherent trait of human faculty and evoluti) s
5 654 M
(on of language from primates to human is described in http://www.sciencemag.org/content/298) s
5 643 M
(/5598/1569, www.ncbi.nlm.nih.gov/pubmed/12446899 and http://ling.umd.edu/~colin/courses/hon) s
5 632 M
(r218l_2007/honr218l_presentation7.ppt by [Hauser, NoamChomsky and Fitch] with an example pa) s
5 621 M
(rt-of-speech recursive tree of a sentence. For example, a human reader's eye usually scans ) s
5 610 M
(each sentence in a text document word by word left-to-right, concatenating the meanings of ) s
5 599 M
(the words read so far. Usually such a reader assumes grammatical correctness \(any grammatic) s
5 588 M
(al anamoly raises his eyebrows\) and only accrues the keyword meanings and tries to connect ) s
5 577 M
(them through a meaningful path between words by thinking deep into meaning of each word. Th) s
5 566 M
(is is exactly simulated in Recursive Gloss Overlap graph where gloss overlaps connect the w) s
5 555 M
(ords recursively. Fast readers have reasonably high eye-movement, sometimes randomly. The v) s
5 544 M
(aried degree of this ability to form an accurate connected visualization of a text probably) s
5 533 M
( differentiates people's intellectual wherewithal to draw inferences. From theory of comput) s
5 522 M
(ation perspective, recursive gloss overlap constructs a disambiguated Context Sensitive gra) s
5 511 M
(ph from Natural language text a superset of context free grammars. But natural languages ar) s
5 500 M
(e suspected to be subset of larger classes of context sensitive languages accepted by Linea) s
5 489 M
(r Bounded Automata. Thus reverse engineering a text from the recursive gloss overlap graph ) s
5 478 M
(may yield a language larger than natural languages. Information loss due to text-to-graph t) s
5 467 M
(ranslation should only be grammatical ideally \(e.g Parts of Speech, connectives etc.,\) beca) s
5 456 M
(use for comparing two documents for information quality, grammar shouldn't be a factor unle) s
5 445 M
(ss there are fringe cases where missing grammar might change the meaning of a document. Cor) s
5 434 M
(rections for pre-existing grammatical errors are not responsibilities of this algorithm. Th) s
5 423 M
(is fringe case should be already taken care of by preprocessing ingestion phase that proof-) s
5 412 M
(reads the document for primitive grammatical correctness though not extensive and part-of-s) s
5 401 M
(peech. Recursive Gloss Overlap graph constructed with Semantic Net frameworks like WordNet,) s
5 390 M
( Evocation WordNet, VerbNet, FrameNet, ConceptNet, SentiWordNet etc., can be fortified by m) s
5 379 M
(ingling Part-of-Speech trees for sentences in a document with already constructed graph. Th) s
5 368 M
(is adds grammar information to the text graph.) s
5 346 M
(Psycholinguistics have the notion of event related potentials - when brain reacts excessive) s
5 335 M
(ly to anamolous words in neural impulses. Ideal intrinsic merit rankings should also accoun) s
5 324 M
(t for such ERP data to distinguish unusual sentences, but datasets for ERPs are not widely ) s
5 313 M
(accessible except SentiWordNet. Hence Recursive Gloss Overlap is the closest possible for c) s
5 302 M
(omparative study of multiple documents that ignores parts-of-speech, subjective assessments) s
5 291 M
( and focuses only on intrinsic information content and relatedness.) s
5 269 M
(A thought experiment of intrinsic merit versus prestige ranking:) s
5 258 M
(Performance of an academic personality is measured first by accolades,awards,grades etc., w) s
5 247 M
(hich form the societal opinion - prestige \(citations\). That is prestige is created from int) s
5 236 M
(rinsic merit. But measuring merit from prestige is anachronistic because merit precedes pre) s
5 225 M
(stige. Ideally prestige and intrinsic merit should coincide when the algorithms are equally) s
5 214 M
( error-free. In case of error, prestige and merit are two intersecting worlds where documen) s
5 203 M
(ts without merit might have prestige and vice-versa. Size of the set-difference is measure ) s
5 192 M
(of error.) s
5 159 M
(References:) s
5 148 M
(-----------) s
5 137 M
(202.1 Circuits of the Mind - [Leslie Valiant] - http://dl.acm.org/citation.cfm?id=199266) s
5 126 M
(202.2 Mind Grows Circuits - Lambda calculus and circuit modelling of mind - [Rina Panigrahy) s
5 115 M
(, Li Zhang] - http://arxiv.org/pdf/1203.0088v2.pdf) s
5 104 M
(202.3 Psycholinguistics Electrified - EEG and SQUID Event Related Electric Potentials \(ERP\)) s
5 93 M
( peaking for anamolous words - N400 experiment - http://kutaslab.ucsd.edu/people/kutas/pdfs) s
5 82 M
(/1994.HP.83.pdf) s
5 71 M
(202.4 Word Associations and Evocations - http://hci.cse.ust.hk/projects/evocation/index.htm) s
5 60 M
(l) s
5 49 M
(202.5 Combining WordNet, VerbNet, FrameNet - http://web.eecs.umich.edu/~mihalcea/papers/shi) s
5 38 M
(.cicling05.pdf) s
5 27 M
(202.6 Computational Psycholinguistics - PoS Parsers - http://www.coli.uni-saarland.de/~croc) s
5 16 M
(ker/courses/comp_psych/comp_psych.html) s
5 5 M
(202.7 Brain Data for Psycholinguistics - http://personality.altervista.org/docs/14yg-al_bra) s
_R
S
%%Page: (104) 104
%%BeginPageSetup
_S
18 36 translate
/pagenum 104 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (104) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(insent@jlcl.pdf) s
5 731 M
(202.8 ConceptNet 5 - http://conceptnet5.media.mit.edu/) s
5 720 M
(202.9 Sanskrit WordNet - http://www.cfilt.iitb.ac.in/wordnet/webswn/) s
5 709 M
(202.10 IndoWordNet - http://www.cfilt.iitb.ac.in/indowordnet/index.jsp) s
5 698 M
(202.11 Brain Connectivity and Multiclass Hopfield Network - Associative memory - http://www) s
5 687 M
(.umiacs.umd.edu/~joseph/Wangetal_Neuroinformatics2015.pdf) s
5 676 M
(202.12 Text Readability Measures, Coherence, Cohesion - http://www.readability.biz/Coherenc) s
5 665 M
(e.html) s
5 654 M
(202.13 MultiWordNet for European Languages - http://multiwordnet.fbk.eu/english/home.php) s
5 643 M
(202.14 Coherence and Text readability indices \(Coh-Metrix, FleschKincaid, Brain Overload et) s
5 632 M
(c.,\) - http://lingured.info/clw2010/downloads/clw2010-talk_09.pdf - Coherence measures how ) s
5 621 M
(connected the document is and thus closely related to Intrinsic Merit obtained by WordNet s) s
5 610 M
(ubgraph for a text.) s
5 599 M
(202.15 Readability and WordNet - http://www.aclweb.org/anthology/O08-1) s
5 588 M
(202.16. Semantic Networks \(Frames, Slots and Facets\) and WordNet - http://onlinelibrary.wil) s
5 577 M
(ey.com/doi/10.1207/s15516709cog2901_3/epdf - describes various graph connectivity measures ) s
5 566 M
(viz., Clustering coefficient for the probability that neighbours of a node are neighbours t) s
5 555 M
(hemselves , Power-Law distribution of degree of a random node. WordNet is modern knowledge ) s
5 544 M
(representation framework inspired by Semantic Networks which is a graph of Frames with Slot) s
5 533 M
(s and Facets for edges amongst Frames.) s
5 522 M
(202.17 Text Network Analysis - Extracting a graph relation from natural language text - htt) s
5 511 M
(p://noduslabs.com/publications/Pathways-Meaning-Text-Network-Analysis.pdf \(2011\) - Parses k) s
5 500 M
(eywords from texts and connects the keyword nodes by relation edges with weights - an alter) s
5 489 M
(native to WordNet where connections are based on co-occurrence/proximities of words within ) s
5 478 M
(a certain window. Two words are connected conceptually if they co-occur \(similar to Latent ) s
5 467 M
(Semantic Indexing by SVD\).) s
5 456 M
(202.18 Text Network Analysis - Networks from Texts - http://vlado.fmf.uni-lj.si/pub/network) s
5 445 M
(s/doc/seminar/lisbon01.pdf) s
5 434 M
(202.19 Six Degrees - Science in Connected Age - [Duncan J.Watts] - Pages 141-143 - Groundbr) s
5 423 M
(eaking result by [Jon Kleinberg] - https://www.kth.se/social/files/5533a99bf2765470d3d8227d) s
5 412 M
(/kleinberg-smallworld.pdf which studies Milgram's Small World Phenomenon by probability of ) s
5 401 M
(finding paths between two nodes on a lattice of nodes: Probability of an edge between 2 nod) s
5 390 M
(es is inversely proportional to the clustering coefficient \(r\). The delivery time \(or\) path) s
5 379 M
( between 2 nodes is optimum when r=2 and has an inverted bell-curve approximately. When r i) s
5 368 M
(s less than 2 and greater than 2 delivery time is high i.e finding the path between two nod) s
5 357 M
(es is difficult. In the context of judging merit by definition graph of a document, documen) s
5 346 M
(t is "meaningful" if it is "relatively easier" to find a path between two nodes\(Resnik,Jian) s
5 335 M
(g-Conrath concept similarity and distance measures\). This assumes the definition graph is m) s
5 324 M
(odelled as a random graph. Present RGO definition graph algorithm does not create a random,) s
5 313 M
( weighted graph - this requires probabilistic weighted ontology. Statically, Kleinberg's re) s
5 302 M
(sult implies that document definition graphs with r=2 are more "meaningful, readable and vi) s
5 291 M
(sualizable" and can be easily understood where r is proportional to word-word edge distance) s
5 280 M
( measures \(Resnik,Jiang-Conrath\).) s
5 269 M
(202.20 Align,Disambiguate,Walk distance measures - http://wwwusers.di.uniroma1.it/~navigli/) s
5 258 M
(pubs/ACL_2013_Pilehvar_Jurgens_Navigli.pdf) s
5 247 M
(202.21 Coh Metrix - Analysis of Text on Cohesion and Language - https://www.ncbi.nlm.nih.go) s
5 236 M
(v/pubmed/15354684 - quantifies text for meaningfulness, relatedness and readability) s
5 225 M
(202.22 Homophily in Networks - [Duncan J.watts] - Pages 152-153 - https://arxiv.org/pdf/con) s
5 214 M
(d-mat/0205383.pdf - This result implies in a social network where each vertex is a tuple of) s
5 203 M
( more than one dimension, and similarity between any two tuples s and j is defined as dista) s
5 192 M
(nce to an adjacent node j of s which is close to t, and any message from sender s reaches r) s
5 181 M
(eceiver t in minimum length of intermediaries - optimal when number of dimensions are 2 or ) s
5 170 M
(3 - Kleinberg condition is special case of this.) s
5 159 M
(202.23 Six Degrees - [Duncan J.Watts] - Triadic closure of Anatole Rapoport - Clustering Co) s
5 148 M
(efficient - Page 58) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(-------------------------) s
5 104 M
(203. Apache Spark MapReduce Parallel Computation of Interview Algorithm Recursive Gloss Ove) s
5 93 M
(rlap Graph Construction) s
5 82 M
(- Commits as on 25 December 2015) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(-------------------------) s
5 49 M
(- Added more parallelism to python-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicM) s
5 38 M
(erit_Crawl_Visual_Spark.py. New map-reduce functions) s
5 27 M
(for computing parents \(backedges in the recursion\) have been added - mapFunction_Parents\(\),) s
5 16 M
( reduceFunction_Parents\(\), SparkMapReduce_Parents\(\)) s
5 5 M
(in python-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py) s
_R
S
%%Page: (105) 105
%%BeginPageSetup
_S
18 36 translate
/pagenum 105 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (105) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- These functions take the previous level tokens as inputs instead if synsets) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(-) s
5 698 M
(204. Commits as on 28 December 2015) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(-) s
5 665 M
(- Updated MapReduce functions in Spark Recursive Gloss Overlap implementation) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-) s
5 621 M
(205. Commits as on 29 December 2015) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(-) s
5 588 M
(- Updated python-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_) s
5 577 M
(Spark.py for choosing parallel spark mapreduce or) s
5 566 M
(serial parents backedges computation based on a boolean function.) s
5 555 M
(- This is because Recursive tokens mapreduce computation \(Spark_MapReduce\) is faster than s) s
5 544 M
(erial version.) s
5 533 M
(But serial parents computation is faster than parallel parents computation ironically\(Spark) s
5 522 M
(_MapReduce_Parents\).) s
5 511 M
(This happens on single node Spark cluster.  So, parents computation has been made configura) s
5 500 M
(ble\(serial or parallel\)) s
5 489 M
(- Logs and Screenshots for various texts experimented have been added to testlogs/) s
5 478 M
(- python-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py ma) s
5 467 M
(preduce uses best_matching_synset\(\) for) s
5 456 M
(disambiguation now which was commented earlier.) s
5 445 M
(- MapFunction_Parents\(\) has a pickling problem in taking a tuple of synset objects as input) s
5 434 M
( arg due to which synsets have to be recomputed that) s
5 423 M
( causes the slowdown mentioned above compared to serial parents\(\) version. MapFunction_Pare) s
5 412 M
(nts\(\) has been rewritten to take previous level gloss tokens in lieu of synsets to circumve) s
5 401 M
(nt pickling issues.) s
5 390 M
(- Slowdown could be resolved on a huge cluster.) s
5 379 M
(- Thus this is a mix of serial+parallel implementation.) s
5 368 M
(- Logs,DOT file and Screenshots for mapreduced parents\(\) computation) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(--) s
5 324 M
(206. Commits as on 30 December 2015) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(--) s
5 291 M
(Some optimizations and redundant code elimination in python-src/InterviewAlgorithm/Intervie) s
5 280 M
(wAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.py) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(--) s
5 236 M
(207. Commits as on 31 December 2015) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(--) s
5 203 M
(- Spark Recursive Gloss Overlap Intrinsic Merit code has been optimized and some minutiae b) s
5 192 M
(ugs have been resolved.) s
5 181 M
(- Map function for parents computation in Spark cluster has been updated to act upon only t) s
5 170 M
(he previous recursion level glosses) s
5 159 M
(by proprietary pickling of the keyword into a file storage and loading it, and not as a fun) s
5 148 M
(ction argument) s
5 137 M
(- Problems with previous level gloss tokens were almost similar to MapReduce functions of t) s
5 126 M
(he recursion) s
5 115 M
(- New pickling file for parents computation in Spark has been added) s
5 104 M
(- logs and screenshots have been added to testlogs) s
5 93 M
(- With this, Spark Intrinsic Merit computation is highly parallellized apt for large clouds) s
5 82 M
(- Also a parents_tokens\(\) function that uses gloss tokens instead of synsets has been added) s
5 71 M
(- New pickling dump\(\) and load\(\) functions have been added for keyword storage) s
5 60 M
(- pickling is synchronized with python threading lock acquire\(\) and release\(\). Shouldn't be) s
5 49 M
( necessary because of) s
5 38 M
(Concurrent Read Exclusive Write \(CREW\) of keyword, but for safer side to prevent Spark-inte) s
5 27 M
(rnal races.) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (106) 106
%%BeginPageSetup
_S
18 36 translate
/pagenum 106 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (106) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(--) s
5 731 M
(208. Commits as on 1,2,3,4,5,6,7 January 2016) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(--) s
5 698 M
(- Added sections 53.14, 53.15 for HLMN and PARITY 3-SAT in 53) s
5 687 M
(- updated spidered text) s
5 676 M
(- best_matching_synset\(\) enabled in mapreduce backedges computation which accurately disamb) s
5 665 M
(iguates the graph. Spark single node cluster is) s
5 654 M
(significantly slower than serial version of parents\(\) computation with only python calls pr) s
5 643 M
(obably due to costly Python4Java) s
5 632 M
(back-and-forth stream socket reads.) s
5 621 M
(- logs, DOT file and screenshots for single node Spark cluster have been added to testlogs/) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(--) s
5 577 M
(209. Commits as on 8 January 2016) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(--) s
5 544 M
(- In InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py increased ) s
5 533 M
(local threads to 2 \(for dual core cpu\(s\)\) for) s
5 522 M
(all SparkContexts instantiated) s
5 511 M
(- Added screenshot and logs for 2 local threads SparkContext mapreduce) s
5 500 M
(- Reference: Berkeley EdX Spark OpenCourse - https://courses.edx.org/c4x/BerkeleyX/CS100.1x) s
5 489 M
(/asset/Week2Lec4.pdf) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(-) s
5 445 M
(210. Commits as on 10 January 2016) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(-) s
5 412 M
(NeuronRain Enterprise \(GitHub\) version 2016.1.10 released.) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(-) s
5 368 M
(211. Commits as on 11 January 2016) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(-) s
5 335 M
(Added section 53.16 for an apparent contradiction between polysize and superpolynomial size) s
5 324 M
( among P/poly, Percolation and) s
5 313 M
(special case of HLMN theorem.) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(-------------------------------------) s
5 269 M
(212. \(FEATURE - DONE\) Principal Component Analysis \(PCA\) and Singular Value Decomposition \() s
5 258 M
(SVD\) - Commits as on 12 January 2016) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(-------------------------------------) s
5 225 M
(Python rpy2 wrapper implementation for :) s
5 214 M
(        - Principal Component Analysis\(PCA\)) s
5 203 M
(        - Singular Value Decomposition\(SVD\)) s
5 192 M
(which invoke R PCA and SVD functions and plot into 2 separate pdf files has been added to r) s
5 181 M
(epository.) s
5 170 M
(Logs for an example have been added to testlogs/) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(-----------------------------) s
5 126 M
(213. \(FEATURE - DONE\) Kullback-Leibler Divergence - Commits as on 17 January 2016) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-----------------------------) s
5 93 M
(Kullback-Leibler Divergence implementation:) s
5 82 M
(-------------------------------------------) s
5 71 M
(Approximate distance between 2 probability distributions with logs) s
5 60 M
(in terms of weighted average distance represented as bits) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(-----------------------------) s
5 16 M
(214. \(FEATURE - DONE\) Basic Statistics - Norms and Median - Commits as on 19 January 2016) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (107) 107
%%BeginPageSetup
_S
18 36 translate
/pagenum 107 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (107) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-----------------------------) s
5 731 M
(Implementation for basic statistics - L1, L2 norms, median etc.,) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(-----------------------------) s
5 687 M
(215. Commits as on 20 January 2016) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(-----------------------------) s
5 654 M
(- Updated AsFer Design Document for Psycholinguistics of Reading a Text document and Recurs) s
5 643 M
(ive Gloss Overlap) s
5 632 M
(- Added Standard Deviation and Chi-Squared Test R functions to python-src/Norms_and_Basic_S) s
5 621 M
(tatistics.py) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(----------------------------) s
5 577 M
(216. \(THEORY\) Recursive Lambda Function Growth Algorithm - Psycholinguistic Functional Prog) s
5 566 M
(ramming simulation of Human Reader Eye Movement Tracking and its special setting applicatio) s
5 555 M
(n in Recursive Gloss Overlap) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(----------------------------) s
5 522 M
(Example sentence:) s
5 511 M
(California Gas Leak Exposes Growing Natural Gas Risks.) s
5 489 M
(A left-right scan of the human reading groups the sentence into set of phrases and connecti) s
5 478 M
(ves and grows top-down gloss overlap graphs:) s
5 467 M
(p1 - California Gas Leak) s
5 456 M
(p2 - Exposes) s
5 445 M
(p3 - Growing Natural Gas Risks) s
5 423 M
(For each phrase left-right, meaning is created by recursive gloss overlap disambiguated gra) s
5 412 M
(ph construction top-down \(graph is constructed left-right, top-down\):) s
5 401 M
(p1 - graph g1) s
5 390 M
(p2 - graph g2) s
5 379 M
(p3 - graph g3) s
5 357 M
(Prefix graph construction and functional programming:) s
5 346 M
(Above sentence has three prefix phrases and graphs- p1, p1-p2, p1-p2-p3 in order \(and g1, g) s
5 335 M
(1-g2, g1-g2-g3\). As reader scans the sentence, meaning is built over time period by lambda ) s
5 324 M
(function composition.  Function f1 is applied to g1,g2 - f1\(g1,g2\) - f1\(g1\(California Gas L) s
5 313 M
(eak\), g2\(Exposes\)\) - which returns a new graph for prefix p1-p2.  Function f2 is applied to) s
5 302 M
( f1\(g1,g2\) and g3 - f2\(f1\(g1,g2\),g3\(Growing Natural Gas Risks\)\) - which returns a new graph) s
5 291 M
( for sentence p1-p2-p3. This is recursively continued and above example can be generalized ) s
5 280 M
(to arbitrarily long sentences.) s
5 258 M
(This formulation does not depend on just semantic graphs - graphs g1,g2 and g3 could be fun) s
5 247 M
(ctional programming subroutines too, which makes f2\(f1\(g1,g2\),g3\) as one complete function ) s
5 236 M
(composition tree. In previous example, for each phrase a function is defined and finally th) s
5 225 M
(ey are composed:) s
5 214 M
(p1 - function g1  - california_gas_leak\(\)) s
5 203 M
(p2 - function g2  - exposes\(\)) s
5 192 M
(p3 - function g3  - growing_natural_gas_risks\(\)) s
5 181 M
(f3 = f2\(f1\(g1,g2\),g3\)) s
5 159 M
(How functions f1,f2,g1,g2,g3 are internally implemented is subjective. These functions are ) s
5 148 M
(dynamically created and evaluated on the fly. Grouping sentences into phrases and connectiv) s
5 137 M
(es has to be a preprocessing step that uses PoS NER tagger - even a naive parsing for langu) s
5 126 M
(age connectives should suffice. Return values of these functions are functions themselves -) s
5 115 M
( this is standard "First Class Object" concept in higher order lambda calculus - https://en) s
5 104 M
(.wikipedia.org/wiki/First-class_citizen . These functions themselves might invoke smaller s) s
5 93 M
(ubroutines internally which build meaning and return to previous level. Recursive Gloss Ove) s
5 82 M
(rlap implements a special case of this where f1,f2 are gloss overlap functions and g1,g2,g3) s
5 71 M
( are wordnet subgraphs. Its Spark implementation does a "Parallel-Read, Top-Down Graph cons) s
5 60 M
(truction" as against left-right read. In a more generic alternative, these functions could ) s
5 49 M
(be deep learning neural networks, LISP subroutines etc., that compute "meaning" of the corr) s
5 38 M
(esponding phrase. If the reading is not restricted to left-right, the composition tree shou) s
5 27 M
(ld ideally look like a balanced binary tree per sentence. This is a kind of "Mind-Grows-Fun) s
5 16 M
(ctions" formalism similar to the Mind-Grows-Circuit paradigm in [Rina Panigrahy, Li Zhang] ) s
5 5 M
(- http://arxiv.org/pdf/1203.0088v2.pdf. It is questionable as to what does "Meaning" mean -) s
_R
S
%%Page: (108) 108
%%BeginPageSetup
_S
18 36 translate
/pagenum 108 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (108) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( is it a graph, neural electric impulse in brain etc., and the question itself is self-refe) s
5 731 M
(rencing godel sentence: What is meant by meaning? - which may not have answers in an axioma) s
5 720 M
(tic system because word "meaning" has to be defined by something more atomic than "meaning") s
5 709 M
( itself.) s
5 687 M
(As an ideal human sense of "meaning" stored in brain is vague and requires a "Consciousness) s
5 676 M
( and Freewill" theory, only a computation theoretic definition of meaning \(i.e a circuit gr) s
5 665 M
(aph\) is axiomatically assumed. Thus above lambda function composition is theoretically equi) s
5 654 M
(valent to boolean function composition \(hence circuit composition\). With this the above rec) s
5 643 M
(ursive lambda function growth algorithm bridges two apparently disconnected worlds - comple) s
5 632 M
(xity theory and machine learning practice - and hence a computational learning theory algor) s
5 621 M
(ithm only difference being it learns a generic higher-order lambda function \(special case i) s
5 610 M
(s recursive gloss overlap\) from text alphabet strings rather than a boolean function from b) s
5 599 M
(inary strings over {0,1} alphabet. Essentially every lambda function should have a circuit ) s
5 588 M
(by Church-Turing thesis and its variants - Church-Turing thesis which states that any human) s
5 577 M
( computable function is turing-computable is still an axiom without proof on which computer) s
5 566 M
( science has been founded. Because of this equivalence of lambda functions and Turing machi) s
5 555 M
(nes, the lambda function learning algorithm essentially covers all possible complexity clas) s
5 544 M
(ses which include Recursively Enumerable languages. Theoretically, concepts of noise sensit) s
5 533 M
(ivity, influence which measure the probability of output change for flipped input should ap) s
5 522 M
(ply to this lambda function learning algorithm for text documents - For example typo or err) s
5 511 M
(or in grammar that affects the meaning.) s
5 489 M
(Learning theory perspective of the previous - From Linial-Mansour-Nisan theorem , class of ) s
5 478 M
(boolean functions of n variables with depth-d can be learnt in O\(n^O\(logn^d\)\) with 1/poly\(n) s
5 467 M
(\) error. Consequentially, Above Lambda Function Growth for depth d can be encoded as a circ) s
5 456 M
(uit \(a TC circuit in wordnet special case\) that has n inputs where n are number of keywords) s
5 445 M
( in text \(each word is boolean encoded to a binary string of constant length\) and learnt in) s
5 434 M
( O\(n^O\(logn^d\)\) with 1/poly\(n\) error. This learning theory bound has striking resemblance t) s
5 423 M
(o parallel Recursive Gloss Overlap bound of O\(n1*d1*s^t_max/\(g\(n1\)*f\(d1\)\)\) for n1 documents) s
5 412 M
( with d1 keywords each on a cluster. Equating to LMN bound gives rise to interesting implic) s
5 401 M
(ation that average number of gloss per keyword = log\(number_of_keywords\) which is too high ) s
5 390 M
(gloss size per word\(other variables equated as n=d1,t_max=d\). Therefore recursive gloss ove) s
5 379 M
(rlap could be faster than LMN learning algorithm.) s
5 357 M
(References:) s
5 346 M
(-----------) s
5 335 M
(216.1 Eye Movement Tracking - https://en.wikipedia.org/wiki/Psycholinguistics#Eye-movements) s
5 324 M
(216.2 Eye Movements in Text Comprehension - Fixations, Saccades, Regressions - http://www.j) s
5 313 M
(ove.com/video/50780/using-eye-movements-to-evaluate-cognitive-processes-involved-text) s
5 302 M
(216.3 Symbol Grounding Problem and learning from dictionary definitions - http://aclweb.org) s
5 291 M
(/anthology//W/W08/W08-2003.pdf - "...In the path from a word, to the definition of that wor) s
5 280 M
(d, to the definition of the words in the definition of that word, and so on, through what s) s
5 269 M
(ort of a structure are we navigating \(Ravasz & Barabasi, 2003; Steyvers & Tenenbaum, 2005\)?) s
5 258 M
( Meaning is compositional: ..." - Symbol grounding is the problems of infinite regress whil) s
5 247 M
(e affixing meaning to words. As defined by Frege, word is a referent and meaning is its def) s
5 236 M
(inition and the two are different. This paper lays theoretical foundations for Graphical On) s
5 225 M
(tologies like WordNet etc., Process of meaning grasping is defined in terms of finding a Gr) s
5 214 M
(ounding set of vertices of an ontology which is equal to a Feedback Vertex Set of the graph) s
5 203 M
(. Feedback Vertex Set is subset of vertices of an ontology graph removal of which causes th) s
5 192 M
(e directed graph to be cycle-less. This is an NP-complete problem. Definition graph constru) s
5 181 M
(ction in Recursive Gloss Overlap creates a subgraph of an ontology projected onto the text ) s
5 170 M
(document.) s
5 159 M
(216.4 TextGraphs - graph representation of texts - https://sites.google.com/site/textgraphs) s
5 148 M
(2017/) s
5 137 M
(216.5 Symbol Grounding Problem - http://users.ecs.soton.ac.uk/harnad/Papers/Harnad/harnad90) s
5 126 M
(.sgproblem.html - " ... \(1\) Suppose the name "horse" is grounded by iconic and categorical ) s
5 115 M
(representations, learned from experience, that reliably discriminate and identify horses on) s
5 104 M
( the basis of their sensory projections.  \(2\) Suppose "stripes" is similarly grounded.  Now) s
5 93 M
( consider that the following category can be constituted out of these elementary categories) s
5 82 M
( by a symbolic description of category membership alone: \(3\) "Zebra" = "horse" & "stripes"[) s
5 71 M
(17] ... Once one has the grounded set of elementary symbols provided by a taxonomy of names) s
5 60 M
( \(and the iconic and categorical representations that give content to the names and allow t) s
5 49 M
(hem to pick out the objects they identify\), the rest of the symbol strings of a natural lan) s
5 38 M
(guage can be generated by symbol composition alone,[18] ...") s
5 27 M
(216.6 Understanding Natural Language - [Terry Winograd] - https://dspace.mit.edu/handle/172) s
5 16 M
(1.1/7095#files-area - Chapter 3 - Inference - Meaning of sentences are represented as relat) s
5 5 M
(ions between objects. Recursive Lambda Function Growth described previously has a lambda fu) s
_R
S
%%Page: (109) 109
%%BeginPageSetup
_S
18 36 translate
/pagenum 109 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (109) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(nction for each relation. Relations/Lambda Functions are mostly verbs/adverbs/adjectives an) s
5 731 M
(d arguments of lambda functions are objects/nouns.) s
5 720 M
(216.7 Grounded Cognition - [Barsalou] - http://matt.colorado.edu/teaching/highcog/readings/) s
5 709 M
(b8.pdf - How Language is Grounded - "...Phrasal structures embed recursively..." - Neuroima) s
5 698 M
(geing evidences for Grounded cognition) s
5 676 M
(--------------------------------------------------------------------------------------) s
5 665 M
(217. Commits as on 21 January 2016) s
5 654 M
(--------------------------------------------------------------------------------------) s
5 643 M
(- Corrected Chi-squared test input args) s
5 632 M
(- logs added to testlogs/) s
5 610 M
(--------------------------------------------------------------------------------------) s
5 599 M
(218. Commits as on 27 January 2016) s
5 588 M
(--------------------------------------------------------------------------------------) s
5 577 M
(Updated Sections 14 and 216.) s
5 555 M
(--------------------------------------------------------------------------------------) s
5 544 M
(219. Commits as on 29 January 2016) s
5 533 M
(--------------------------------------------------------------------------------------) s
5 522 M
(-  Uncommented both commandlines in cpp-src/asferpythonembedding.sh) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(-----------------) s
5 489 M
(220. \(FEATURE - DONE\)  Python-C++-VIRGOKernel and Python-C-VIRGOKernel boost::python and cp) s
5 478 M
(ython implementations:) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(----------------) s
5 445 M
(- It is a known idiom that Linux Kernel and C++ are not compatible.) s
5 434 M
(- In this commit an important feature to invoke VIRGO Linux Kernel from userspace python li) s
5 423 M
(braries via two alternatives have been added.) s
5 412 M
(- In one alternative, C++ boost::python extensions have been added to encapsulate access to) s
5 401 M
( VIRGO memory system calls - virgo_malloc\(\), virgo_set\(\), virgo_get\(\), virgo_free\(\). Initia) s
5 390 M
(l testing reveals that C++ and Kernel are not too incompatible and all the VIRGO memory sys) s
5 379 M
(tem calls work well though initially there were some errors because of config issues.) s
5 368 M
(- In the other alternative, C Python extensions have been added that replicate boost::pytho) s
5 357 M
(n extensions above in C - C Python with Linux kernel) s
5 346 M
(works exceedingly well compared to boost::python.) s
5 335 M
(- This functionality is required when there is a need to set kernel analytics configuration) s
5 324 M
( variables learnt by AsFer Machine Learning Code) s
5 313 M
(dynamically without re-reading /etc/virgo_kernel_analytics.conf.) s
5 302 M
(- This completes a major integration step of NeuronRain suite - request travel roundtrip to) s
5 291 M
(-and-fro top level machine-learning C++/python) s
5 280 M
(code and rock-bottom C linux kernel - bull tamed ;-\).) s
5 269 M
(- This kind of python access to device drivers is available for Graphics Drivers already on) s
5 258 M
( linux \(GPIO - for accessing device states\)) s
5 247 M
(- logs for both C++ and C paths have been added in cpp_boost_python_extensions/ and cpython) s
5 236 M
(_extensions.) s
5 225 M
(- top level python scripts to access VIRGO kernel system calls have been added in both dire) s
5 214 M
(ctories:) s
5 203 M
(        CPython - python cpython_extensions/asferpythonextensions.py) s
5 192 M
(        C++ Boost::Python - python cpp_boost_python_extensions/asferpythonextensions.py) s
5 181 M
(- .so, .o files with build commandlines\(asferpythonextensions.build.out\) for "python setup.) s
5 170 M
(py build" have been added) s
5 159 M
(in build lib and temp directories.) s
5 148 M
(- main implementations for C++ and C are in cpp_boost_python_extensions/asferpythonextensio) s
5 137 M
(ns.cpp and cpython_extensions/asferpythonextensions.c) s
5 115 M
(- Schematic Diagram:) s
5 104 M
(--------------------) s
5 93 M
(        AsFer Python -----> Boost::Python C++ Extension ------> VIRGO memory system calls -) s
5 82 M
(-------> VIRGO Linux Kernel Memory Drivers) s
5 71 M
(        /\\                                                                                 ) s
5 60 M
(             V) s
5 49 M
(         |                                                                                 ) s
5 38 M
(             |) s
5 27 M
(         ---------------------------------------------<------------------------------------) s
5 16 M
(--------------) s
5 5 M
(        AsFer Python -----> CPython Extensions ------> VIRGO memory system calls --------> ) s
_R
S
%%Page: (110) 110
%%BeginPageSetup
_S
18 36 translate
/pagenum 110 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (110) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(VIRGO Linux Kernel Memory Drivers) s
5 731 M
(         /\\                                                                                ) s
5 720 M
(             V) s
5 709 M
(         |                                                                                 ) s
5 698 M
(             |) s
5 687 M
(         ---------------------------------------------<------------------------------------) s
5 676 M
(--------------) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(---------------------) s
5 632 M
(221. Commits as on 2 February 2016) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(---------------------) s
5 599 M
(- Uncommented PyArg_ParseTuple\(\) to read in the key-value passed from Python layer) s
5 588 M
(- Unified key-value in Python layer and within CPython code with : delimiter) s
5 577 M
(- added Py_BuildValue\(\) to return vuid - VIRGO Unique ID - to python and commented virgo_fr) s
5 566 M
(ee\(\) so that a parallel code) s
5 555 M
(can connect to kmem cache and do a virgo_get on this vuid - this is a precise scenario wher) s
5 544 M
(e Read-Copy-Update fits in so that) s
5 533 M
(multiple versions can co-exist at a time) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(---------------------) s
5 489 M
(222. \(THEORY\) Recursive Lambda Function Growth Algorithm - 216 elaborated with examples) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(---------------------) s
5 456 M
(Boolean function learning and PAC learning are special cases of this Lambda function learni) s
5 445 M
(ng algorithm because any) s
5 434 M
(intermediate lambda function can be a boolean function too.) s
5 412 M
(Algorithms steps for English Natural Language Procssing - Parallel read:) s
5 401 M
(------------------------------------------------------------------------) s
5 390 M
(- Approximate midpoint of the sentence is known apriori) s
5 379 M
(- Language specific connectives are known apriori \(e.g is, was, were, when, who etc.,\)) s
5 368 M
(- Sentence is recursively split into phrases and connectives and converted into lambda func) s
5 357 M
(tions with balanced number of nodes in left and right subtrees) s
5 346 M
(- Root of each subtree is unique name of the function) s
5 324 M
(Example Sentence1:) s
5 313 M
(-----------------) s
5 302 M
(PH is infinite relative to random oracle.) s
5 280 M
(Above sentence is translated into a lambda function composition tree as:) s
5 269 M
(relative\(is\(PH, infinite\), to\(random,oracle\)\)\) which is a tree of depth 3) s
5 247 M
(In this example every word and grammatical connective is a lambda function that takes some ) s
5 236 M
(arguments and returns a partial "purport" or "meaning" of that segment of sentence. These p) s
5 225 M
(artial computations are aggregated bottom-up and culminate in root.) s
5 203 M
(Example Sentence2:) s
5 192 M
(-----------------) s
5 181 M
(Farming and Farmers are critical to success of a country like India.) s
5 159 M
(Above sentence is translated into a lambda function composition tree as:) s
5 148 M
(Critical\(are\(and\(Farming,Farmers\)\), a\(success\(to,of\), like\(country, India\)\)\)) s
5 126 M
(This composition is slightly different from Part-of-Speech trees and inorder traversal of t) s
5 115 M
(he tree yields original sentence.) s
5 104 M
(As functions are evaluated over time period, at any time point there is a partially evaluat) s
5 93 M
(ed composition prefix tree which operates on) s
5 82 M
(rest of the sentence to be translated yet - these partial trees have placeholder templates ) s
5 71 M
(that can be filledup by a future lambda function) s
5 60 M
(from rest of the sentence.) s
5 38 M
(Each of these lambda functions can be any of the following but not limited to:) s
5 27 M
(- Boolean functions) s
5 16 M
(- Generic mathematical functions) s
5 5 M
(- Neural networks \(which include all Semantic graphs like WordNet etc.,\)) s
_R
S
%%Page: (111) 111
%%BeginPageSetup
_S
18 36 translate
/pagenum 111 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (111) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- Belief propagated potentials assigned by a dictionary of English language and computed bo) s
5 731 M
(ttom-up) s
5 720 M
(- Experimental theory of Cognitive Psycholinguistics - Visuals of corresponding words - thi) s
5 709 M
(s is the closest simulation of process of cognition and comprehension because when a senten) s
5 698 M
(ce is read by a human left-right, visuals corresponding to each word based on previous expe) s
5 687 M
(rience are evoked and collated in brain to create a "movie" meaning of the sentence. For ex) s
5 676 M
(ample, following sentence:) s
5 654 M
(        Mobile phones operate through towers in each cellular area that transmit signals.) s
5 632 M
(with its per-word lambda function composition tree :) s
5 610 M
(        in\(operate\(mobile phones, through\(tower\)\), that\(each\(cellular area\), transmit\(signa) s
5 599 M
(ls\)\)\)) s
5 577 M
(evokes from left-to-right visuals of Mobile phones, towers, a bounded area in quick success) s
5 566 M
(ion based on user's personal "experience" which are merged to form a visual motion-pictured) s
5 555 M
( meaning of the sentence. Here "experience" is defined as the accumulated past stored in br) s
5 544 M
(ain which differs from one person to the other. This evocation model based on an infinite h) s
5 533 M
(ypergraph of stacked thoughts as vertices and edges has been described earlier in sections ) s
5 522 M
(35-49 and 54-59. This hypergraph of thoughts grows over time forming "experiences". For som) s
5 511 M
(e words visual storage might be missing, blurred or may not exist at all. An example for th) s
5 500 M
(is non-visualizable entity in above sentence is "transmit" and "signal" which is not a tang) s
5 489 M
(ible. Thus the lambda function composition of these visuals are superimposed collations of ) s
5 478 M
(individual lambda functions that return visuals specific to a word, to create a sum total a) s
5 467 M
(nimated version. Important to note is that these lambda functions are specific to each read) s
5 456 M
(er which depend on pre-built "experience" hypergraph of thoughts which differs for each rea) s
5 445 M
(der. This explains the phenomenon where the process of learning and grasping varies among p) s
5 434 M
(eople. Hypergraph model also explains why recent events belonging to a particular category ) s
5 423 M
(are evoked more easily than those in distant past - because nodes in stack can have associa) s
5 412 M
(ted potential which fades from top to down and evocation can be modelled as a hidden markov) s
5 401 M
( model process on a stack node in the thought hypergraph top-down as the markov chain. Reph) s
5 390 M
(asing, thoughts stored as multiplanar hypergraphs with stack vertices act as a context to r) s
5 379 M
(eader-specific lambda functions. If stack nodes of thought hypergraph are not markov models) s
5 368 M
( - node at depth t need not imply node at depth t-1 - topmost node is the context disambigu) s
5 357 M
(ating visual returned by the lambda function for that word. This unifies storage and comput) s
5 346 M
(ation and hence a plausible cerebral computational model - striking parallel in non-human t) s
5 335 M
(uring computation is the virtual address space or tape for each process serving as context.) s
5 313 M
(The language of Sanskrit with Panini's Grammar fits the above lambda calculus framework wel) s
5 302 M
(l because in Sanskrit case endings and sentence meaning are independent of word orderings. ) s
5 291 M
(For example following sentence in Sanskrit:) s
5 280 M
(        Sambhala Grama Mukhyasya VishnuYashas Mahatmana: ... \( Chieftain of Sambhala Villag) s
5 269 M
(e, Vishnuyashas the great ...\)) s
5 247 M
(can be rearranged and shuffled without altering the meaning, a precise requisite for lambda) s
5 236 M
( function composition tree representation of a sentence, which is tantamount to re-ordering) s
5 225 M
( of parameters of a lambda function.) s
5 203 M
(As an alternative to WordNet:) s
5 192 M
(----------------------------) s
5 181 M
(Each lambda function carries dictionary meaning of corresponding word with placeholders for) s
5 170 M
( arguments.) s
5 159 M
(For example, for word "Critical" corresponding lambda function is defined as:) s
5 148 M
(        Critical\(x1,x2\)) s
5 137 M
(If dictionary meanings of critical are defined with placeholders:) s
5 126 M
(        1\) Disapproval of something -) s
5 115 M
(        2\)  - is Important to something -) s
5 104 M
(there is a need for disambiguation and 2\) has to be chosen based either on number of argume) s
5 93 M
(nts or disambiguation using lesk algorithm or more sophisticated one. If Second meaning fit) s
5 82 M
(s context then, lambda function Critical\(x1,x2\) returns:) s
5 71 M
(        x1 is important to something x2) s
5 60 M
(Thus WordNet can be replaced by something more straightforward. These steps can be recursed) s
5 49 M
( top-down to expand the meaning - in above example "important" might have to be lookedup in) s
5 38 M
( dictionary. This simulates basic human process of language learning and comprehension.) s
5 16 M
(This algorithm accepts natural languages that are between Context Free Languages and Contex) s
5 5 M
(t Sensitive Languages.) s
_R
S
%%Page: (112) 112
%%BeginPageSetup
_S
18 36 translate
/pagenum 112 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (112) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(References:) s
5 720 M
(222.1 Charles Wikner - Introductory Sanskrit - http://sanskritdocuments.org/learning_tutori) s
5 709 M
(al_wikner/) s
5 698 M
(222.2 Michael Coulson - Teach yourself - Sanskrit - http://www.amazon.com/Complete-Sanskrit) s
5 687 M
(-Teach-Yourself-Language/dp/0071752668\)) s
5 665 M
(-------------------------------------------------------------------------------------) s
5 654 M
(223. Commits as on 4 February 2016) s
5 643 M
(-------------------------------------------------------------------------------------) s
5 632 M
( - Updated AsFer Design Document with more references for Discrete Hyperbolic Factorization) s
5 621 M
( in NC - PRAM-NC equivalence) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(------) s
5 588 M
(\(FEATURE - DONE\) C++ - Input Dataset Files nomenclature change for NeuronRain Enterprise) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(------) s
5 555 M
(- 3 new input files cpp-src/asfer.enterprise.encstr, cpp-src/asfer.enterprise.encstr.cluste) s
5 544 M
(red, cpp-src/asfer.enterprise.encstr.kNN) s
5 533 M
(have been added which contain set of generic binary strings for KMeans, KNN clustering and ) s
5 522 M
(Longest Common Subsequence of a clustered set .) s
5 511 M
(- Code changes for above new input files have been done in asfer.cpp and new class\(asferenc) s
5 500 M
(odestr.cpp and asferencodestr.h\) has been added) s
5 489 M
(for generic string dataset processing) s
5 478 M
(- Changes for generic string datasets have been done for kNN and KMeans clustering) s
5 467 M
(- logs for clustering and longest common subsequence have been added) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(------) s
5 434 M
(\(FEATURE - DONE\) Python - Input Dataset Files nomenclature change for NeuronRain Enterprise) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(------) s
5 401 M
(- 1 new input file  python-src/asfer.enterprise.encstr.seqmining has been added for Sequenc) s
5 390 M
(e Mining of generic string dataset -) s
5 379 M
(presently contains set of generic binary strings .) s
5 368 M
(- Code changes for above new input files have been done in SequenceMining.py) s
5 357 M
(- logs for SequenceMining of binary strings with maximum subsequence length of 15 have been) s
5 346 M
( added) s
5 324 M
(---------------------------------------------------------------------------------------) s
5 313 M
(224. Commits as on 4 February 2016) s
5 302 M
(---------------------------------------------------------------------------------------) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(-------------------------------) s
5 269 M
(\(FEATURE - DONE\) Crucial commits for Performance improvements and Cython build of Spark Int) s
5 258 M
(erview algorithm implementation) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(-------------------------------) s
5 225 M
(- New setup.py has been added to do a Cythonized build of PySpark Interview algorithm MapRe) s
5 214 M
(duce script) s
5 203 M
(- Commandline for cython build: python setup.py build_ext --inplace) s
5 192 M
(- This compiles python spark mapreduce script into a .c file that does CPython bindings and) s
5 181 M
( creates .o and .so files) s
5 170 M
(- FreqDist has been commented which was slowing down the bootstrap) s
5 159 M
(- MapReduce function has been updated for NULL object checks) s
5 148 M
(- Thanks to Cython, Performance of Spark MapReduce has performance shootup by factor of alm) s
5 137 M
(ost 100x - Spark GUI job execution time) s
5 126 M
(shown for this interview execution is ~10 seconds excluding GUI graph rendering which requi) s
5 115 M
(res few minutes. This was earlier taking few hours.) s
5 104 M
(- With Cython ,essentially Spark-Python becomes as fast as C implementation.) s
5 93 M
(- DOT file, Output log, Spark logs and Screenshot has been added) s
5 82 M
(- This completes important benchmark and performance improvement for Recursive Gloss Overla) s
5 71 M
(p Graph construction on local Spark single node) s
5 60 M
(cluster.) s
5 49 M
(- Above Cythonizes just a small percentage of Python-Spark code. If complete python executi) s
5 38 M
(on path is Cythonized and JVM GC and Heap tunables for Spark are configured, this could inc) s
5 27 M
(rease throughput significantly further. Also Spark's shuffling parameters tuning could redu) s
5 16 M
(ce the communication cost.) s
_R
S
%%Page: (113) 113
%%BeginPageSetup
_S
18 36 translate
/pagenum 113 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (113) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-----------------------------------------------------------------------------------------) s
5 731 M
(225. Commits as on 5 February 2016) s
5 720 M
(-----------------------------------------------------------------------------------------) s
5 709 M
(------------------------------------------------------------------------) s
5 698 M
(Further optimizations to Spark-Cython Interview algorithm implementation:) s
5 687 M
(-------------------------------------------------------------------------) s
5 676 M
(- webspidered text for RGO graph construction updated) s
5 665 M
(- PySpark-Cython build commandlines added as a text file log) s
5 654 M
(- Commented unused python functions - shingling and jaccard coefficient) s
5 643 M
(- threading.Lock\(\) Spark thread pickling synchronizer variable made global in MapReducer) s
5 632 M
(- renamed yesterday's logs and screenshot to correct datetime 4 February 2016) s
5 621 M
(- Added a new special graph node ["None"] for special cases when no parents are found in ba) s
5 610 M
(ckedges computation in MapReducer. This makes a) s
5 599 M
(default root in the RGO graph as shown in matplotlib networkx graph plot) s
5 588 M
(- Spark logs show time per RDD job - an example MapReduce job takes 335 milliseconds) s
5 577 M
(- Tried Cythonizing InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.py but there i) s
5 566 M
(s a serious cython compiler error in) s
5 555 M
(Matplotlib-PyQt. Hence those changes have been backed out.) s
5 544 M
(- DOT file and Cython C file have been updated) s
5 522 M
(-----------------------------------------------------------------------------------------) s
5 511 M
(226. Commits as on 8 February 2016) s
5 500 M
(-----------------------------------------------------------------------------------------) s
5 489 M
(- PySpark-Cythonized Interview Algorithm implementation generated graph has been pruned to ) s
5 478 M
(remove edges invoving "None" vertices which were) s
5 467 M
(added during Spark MapReduce based on a config variable.) s
5 456 M
(- Logs and Screenshots for the above have been added to testlogs/) s
5 445 M
(- Some benchmark results parsed from the Spark logs with commandline - "for i in `grep Fini) s
5 434 M
(shed InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.2localthreads.CythonOptimized) s
5 423 M
(.8February2016.out |grep TaskSetManager| awk '{print $14}'`; do sum=$\(expr $sum + $i\); done) s
5 412 M
(":) s
5 401 M
(        - Total time in milliseconds - 99201) s
5 390 M
(        - Number of jobs - 113) s
5 379 M
(        - Average time per mapreduce job in milliseconds - 877) s
5 368 M
(Thus a merit computation of sample document with few lines \(33 keywords\) requires ~100 seco) s
5 357 M
(nds in local Spark cluster. This excludes NetworkX and other unoptimized code overhead.) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(----------------------------------------) s
5 313 M
(227. \(THEORY\) Graph Edit Distance in Interview Algorithm, PySpark-Cython Interview Algorith) s
5 302 M
(m benchmarks and Merit in Recursive Lambda Function Growth Algorithm) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(----------------------------------------) s
5 269 M
(Interview Algorithm to assess merit, throughout this document, refers to 3 algorithms - Cit) s
5 258 M
(ation graph maxflow\(which includes standard radius,eccentricity and diameter measures of th) s
5 247 M
(e graph\), Recursive Lambda Function growth and Graph edit distance \(or Q&A\) based interview) s
5 236 M
( between a pair of documents.  Recent result about impossibility of better algorithms for e) s
5 225 M
(dit distance \(Backurs-Indyk - http://arxiv.org/abs/1412.0348 - edit distance cannot be comp) s
5 214 M
(uted in subquadratic time unless Strong Exponential Time Hypothesis is false\) finds its app) s
5 203 M
(lications in Graph edit distance for Interview Algorithm Questions&Answering where one docu) s
5 192 M
(ment's Recursive Gloss Overlap graph is compared for distance from another graph's RGO Word) s
5 181 M
(Net subgraph \(http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedi) s
5 170 M
(ngs.pdf\). Graph edit distance is a special case of edit distance when graph edges are encod) s
5 159 M
(ed as strings. A better algorithm to find edit distance between 2 documents' wordnet subgra) s
5 148 M
(phs ,therefore implies SETH is false.) s
5 126 M
(Previous benchmarks for PySpark-Cython parallel interview algorithm implementation could sc) s
5 115 M
(ale significantly on a cluster with ~100 Spark nodes with parallel runtime of ~800 millisec) s
5 104 M
(onds. If all Java Spark code is JVM tuned and python modules are Cythonized fully, even thi) s
5 93 M
(s could be bettered bringing it to order of few milliseconds.) s
5 71 M
(Computing Intrinsic Merit of a text with Recursive Lambda Function growth could involve mul) s
5 60 M
(titude of complexity notions:) s
5 49 M
(        - Depth of Composition tree for a text) s
5 38 M
(        - Size of resultant lambda function composition e.g size of WordNet subgraphs, neur) s
5 27 M
(al nets, complexity of context disambiguation with thought hypergraph psychological model e) s
5 16 M
(nunciated in 222.) s
5 5 M
(        - In essence, this reduces to a lowerbound of lambda function composition - boolean) s
_R
S
%%Page: (114) 114
%%BeginPageSetup
_S
18 36 translate
/pagenum 114 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (114) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( circuit lowerbounds are special cases of lambda function composition lowerbounds. Since th) s
5 731 M
(ought hypergraph disambiguator is reader dependent, each reader might get different merit v) s
5 720 M
(alue for same document which explains the real-life phenomenon of "subjectivity". To put it) s
5 709 M
( simply, Objectivity evolves into Subjectivity with "experience and thought" context. Evalu) s
5 698 M
(ating merit based on thought context is non-trivial because disambiguating a word visually ) s
5 687 M
(as mentioned in 222 requires traversal of complete depth of thought hypergraph - it is like) s
5 676 M
( billions of stacks interconnected across making it tremendously multiplanar - a thought ve) s
5 665 M
(rsioning system. This explains another realword phenomenon of experiential learning: An exp) s
5 654 M
(erienced person "views" a text differently from a relatively less experienced person.) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(-----------------------------) s
5 610 M
(228. \(THEORY\) Thought Versioning - ThoughtNet and EventNet - Psychophilosophical Digression) s
5 599 M
( - Might have) s
5 588 M
(some parallels in Philosophical Logic - related to points \(70-79\)) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(-----------------------------) s
5 555 M
(\(*\) This postulates an experimental model for a "Logical Brain". It makes no assumptions ab) s
5 544 M
(out neural synapses, firing etc., though a graph can be mapped to a neural network with som) s
5 533 M
(e more reductions. The computation side is taken care of by Recursive Lambda Function Growt) s
5 522 M
(h \(which might invoke neural learning etc.,\) while the storage is simulated with a giant Th) s
5 511 M
(oughtNet - together this is a turing-computable model for natural language processing which) s
5 500 M
( is subjective to each individual. This model makes an assumption of pre-existing conscious) s
5 489 M
(ness or an equivalent to account for emotions and sentiments.) s
5 467 M
(\(*\) ThoughtNet is built over time from inception of life - books a person reads, events in ) s
5 456 M
(life, interactions etc., - are lambda-evaluated and stored. This is were the computation an) s
5 445 M
(d storage distinction seems to vanish - It is not a machine and tape but rather a machineta) s
5 434 M
(pe \(analogy: space and time coalescing to spacetime\). Evaluated lambda functions themselves) s
5 423 M
( are stored in ThoughtNet not just thoughts data - storage contains computation and computa) s
5 412 M
(tion looksup storage.) s
5 390 M
(\(*\) Thought Versioning System - tentatively named ThoughtNet - mentioned in 227 is a genera) s
5 379 M
(lization of Evocation WordNet as a multiplanar graph with stacked thoughts as vertices. Eac) s
5 368 M
(h stack corresponds to a class an experience or thought is binned - visually or non-visuall) s
5 357 M
(y.) s
5 335 M
(\(*\) An approximate parallel to ThoughtNet versioning is the Overlay FileSystems in Unixen. ) s
5 324 M
(Overlay filesystems store data one over the other in layers which play "obscurantist" and p) s
5 313 M
(revent the bottom truth from being out. This follows a Copy-up-on-write \(CUOW\) - a data in ) s
5 302 M
(bottom layer is copied up and modified and stays overlaid. File access systems calls "see" ) s
5 291 M
(only "topmost" layer. In ThoughtNet this roughly translates to Thought edges of particular ) s
5 280 M
(class-stack node placed one over the other and grown over period of time. ThoughtNet thus p) s
5 269 M
(resents an alternative to Overlay storage where a layer with maximum argmax\(\) potential can) s
5 258 M
( be chosen.) s
5 236 M
(\(*\) EventNet when unified with ThoughtNet makes a cosmic storage repository, all pervasive.) s
5 225 M
( Thoughts are stored with accompanied potentials - which could be electric potentials - som) s
5 214 M
(e stronger thoughts might have heavy potentials compared to insignificant thoughts. How thi) s
5 203 M
(s potentials arise in first place is open to question. Rather than numeric and sign represe) s
5 192 M
(ntation of sentiments, this ThoughtNet model proposes "coloring" of the emotions - akin to ) s
5 181 M
(edge coloring of graphs. ThoughtNet is a giant pulp of accrued knowledge in the form of obs) s
5 170 M
(erved events stored as hyperedges. Here a distinction has to be made between Wisdom and Kno) s
5 159 M
(wledge - Knowledge measures "To know" while Wisdom measures "To know how to know". Common k) s
5 148 M
(nowledge in Logic \("We know that you know that We know ... ad infinitum"\) thus still does n) s
5 137 M
(ot explain wisdom \(Does wisdom gain from knowledge and vicecersa?\). ThoughtNet is only a kn) s
5 126 M
(owledge representation and Wisdom remains open to interpretation - probably recursive lambd) s
5 115 M
(a function growth fills-in this gap - it learns how to learn.) s
5 93 M
(\(*\) For example, an event with pleasant happening might be stored with high potential of po) s
5 82 M
(sitive polarity as against a sad event with a negative polarity potential. Repetitive event) s
5 71 M
(s with high potentials reinforce - potentials get added up. This extends SentiWordNet's con) s
5 60 M
(cept of postivity, negativity and objectivity scoring for words. It is not a necessity that) s
5 49 M
( Hidden Markov Models are required for finding a right evocative \(mentioned in 56\). Trivial) s
5 38 M
( argmax\(all potentials per stack class\) is sufficient to find the most relevant evocative h) s
5 27 M
(yperedge. This explains the phenomenon where an extremely happy or sad memory of a class li) s
5 16 M
(ngers for long duration despite being old whereas other memories of same class fade away th) s
5 5 M
(ough relatively recent. Emotions affecting potentials of thought hyperedges is explained fu) s
_R
S
%%Page: (115) 115
%%BeginPageSetup
_S
18 36 translate
/pagenum 115 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (115) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(rther below.) s
5 720 M
(\(*\) EventNet is a cosmic causality infinite graph with partaker nodes whereas ThoughtNet is) s
5 709 M
( per partaker node. This evocation model is experimental only because a void exists in this) s
5 698 M
( simulation which can be filledup only by consciousness and egoself. Example: A sentence "S) s
5 687 M
(omething does not exist" implies it existed in past or might exist in future and thus self-) s
5 676 M
(refuting. Otherwise mention of "something" should have never happened.) s
5 654 M
(\(*\) EventNet is a parallelly created Causality graph - event vertices occur in parallel acr) s
5 643 M
(oss universe and causation edges are established in parallel. This is like a monte-carlo Ra) s
5 632 M
(ndomized NC circuit that grows a random graph in parallel.) s
5 610 M
(\(*\) Previous evocation model with HMM or maximum potential need not be error-free - it can ) s
5 599 M
(be derailed since human understanding at times can be derailed - because humans are inheren) s
5 588 M
(tly vulnerable to misunderstand ambiguous texts. Hence above evocation might return a set o) s
5 577 M
(f edges than a unique edge which has to be further resolved by additional information for d) s
5 566 M
(isambiguation. For example, rather than individual words a sentence as a block might requir) s
5 555 M
(e disambiguation: In the Cognitive Psycholinguistics model which stores thoughts as visuals) s
5 544 M
( mentioned in 222, there is a chance of derailment because of evocation returning multiple ) s
5 533 M
(edges when human emotions are involved \(Love, Anger, Sarcasm, Pathos etc.,\). ThoughNet base) s
5 522 M
(d disambiguation simulates subjective human reasoning more qualitatively specific to each i) s
5 511 M
(ndividual and accurately than usual statistical sentiment inferences which are mere numbers) s
5 500 M
( and do not consider individual specific perception of a text. This also explains how an "i) s
5 489 M
(mage"/"perception" is engineered over a time period which depends on thoughts stored.) s
5 478 M
(-----------------------------------------------------------------) s
5 467 M
(Thought experiment for this defective disambiguation is as below) s
5 456 M
(-----------------------------------------------------------------) s
5 445 M
(\(*\) Example Sentence 1: "Love at first sight is the best". Considering two persons reading ) s
5 434 M
(this sentence with drastically different ThoughtNet contexts - one person has multiple good) s
5 423 M
( followed by bad experiences stored as ThoughtNet hypergraph edges with stronger postive an) s
5 412 M
(d negative potentials and the argmax\(\) disambiguated evocative edges returned could be ther) s
5 401 M
(efore both quite positive and negative inducing him to either like or abhor this sentence b) s
5 390 M
(ased on whichever wins the mind conflict \(i.e whichever potential positive or negative is o) s
5 379 M
(verpowering\), while the other person has a pure romantic history with good experiences alon) s
5 368 M
(e disambiguated evocation in which case is uniquely positive. This is real-world simulation) s
5 357 M
( of "confused" thought process when emotions rule. In other words emotions determine the po) s
5 346 M
(larity and extent of potentials tagged to each thought hyperedge and more the emotional con) s
5 335 M
(flict, larger the chance of difficulty in unique disambiguation and derailment. It is not a) s
5 324 M
( problem with ThoughtNet model,but it is fundamental humane problem of emotions which spill) s
5 313 M
( over to ThoughtNet when accounted for. If human reasoning is ambiguous so is this model. T) s
5 302 M
(his danger is even more pronounced when lambda compositions of visuals are involved than ju) s
5 291 M
(st sentences. As an example, a test human subject is repeatedly shown visuals related to lo) s
5 280 M
(ve reinforcing the potentials of hyperedges belonging to a class of "Love" and subject is b) s
5 269 M
(ootstrapped for future realtime love. This artificially creates an illusory backdrop of "tr) s
5 258 M
(ained data" ThoughtNet context - a kind of "Prison Experiment for Behavioural Modification ) s
5 247 M
(Under Duress" - the distinction between reality and imagination gets blurred - e.g Stanford) s
5 236 M
( Prison Experiment. Machine learning programs cannot quantify emotions through statistics \() s
5 225 M
(in the absence of data about how emotions are stored in brain, does emotion originate from ) s
5 214 M
(consciousness etc.,\) and hence creating a visualized meaning through recursive lambda compo) s
5 203 M
(sition of natural language texts have a void to fill. If emotions are Turing-computable, th) s
5 192 M
(e lambda function composition makes sense. ThoughtNet model with potentials, thus, simulate) s
5 181 M
(s human grasp of a text with provisions for emotions. No existing machine learning model at) s
5 170 M
( present is known to reckon emotions and thought contexts.) s
5 148 M
(\(*\) Example Sentence 2: "You are too good for any contest". This sentence has sarcastic ton) s
5 137 M
(e for a human reader. But can sarcasm be quantified and learned? Usual statistical machine ) s
5 126 M
(learning algorithms doing sentiment analysis of this sentence might just determine positivi) s
5 115 M
(ty, negativity or objectivity ignoring other fine-grained polarities like "rave, ugly, pejo) s
5 104 M
(rative, sarcastic etc.,". Trivial sentiment analysis rates this as positive while for a hum) s
5 93 M
(an it is humiliating. This is an example when lambda composition of visuals fares better co) s
5 82 M
(mpared to textual words. Visually this lambda-composes to a collated thought-enacted movie ) s
5 71 M
(of one person talking to another having a discourteous, ridiculing facial expression. Lambd) s
5 60 M
(a functions for this visual compositions could invoke face-feature-vector-recognition algor) s
5 49 M
(ithms which identify facial expressions. In social media texting smileys\(emoticons\) convey ) s
5 38 M
(emotions \(e.g tongue-in-cheek\). Thus disambiguating the above text sentence accurately depe) s
5 27 M
(nds on a pre-existing visually stored ThoughtNet context of similar sarcastic nature - a pe) s
5 16 M
(rson with prior visual ThoughtNet experience hyperedge similar to sarcastic sentence above ) s
5 5 M
(is more capable of deciphering sarcasm than person without it. This prior edge is "training) s
_R
S
%%Page: (116) 116
%%BeginPageSetup
_S
18 36 translate
/pagenum 116 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (116) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( data" for the model and is stored with an edge-coloring of configurable choosing. Marking ) s
5 731 M
(sentiments of Thought edges with edge coloring is more qualitative and coarse grained than ) s
5 720 M
(numbering - each of the emotions Love, Hate, Sorrow, Divinity etc can be assigned a color. ) s
5 709 M
(As ThoughtNet is grown from beginning of life, stacked up thoughts are colored where the se) s
5 698 M
(ntiment coloring is learnt from environment. For example, first time a person encounters th) s
5 687 M
(e above sentence he may not be familiar with sarcasm, but he might learn it is sarcastic fr) s
5 676 M
(om an acquaintance and this learning is stored with a "sarcastic" sentiment coloring in mul) s
5 665 M
(tiplanar thoughtnet hypergraph. Intensity of coloring determines the strength of thought st) s
5 654 M
(ored. Next instances of evocations ,for example "too good" and "contest" which is the cruci) s
5 643 M
(al segment, return the above edge if intensely colored \(in a complex setting, the lambda co) s
5 632 M
(mposition tree is returned ,not just the sentence\).) s
5 610 M
(\(*\) Example Poetry 3 - lambda evaluation with shuffled connectives, is shown below with nes) s
5 599 M
(ted parenthesization - Each parenthesis scope evaluates a lambda function and composed to a) s
5 588 M
( tree - [Walrus-Carpenter - Alice in Wonderland]:) s
5 577 M
(\(\("The time has come,"\) \(the Walrus said\),) s
5 566 M
(\("To talk of many things:\)) s
5 555 M
(\(Of shoes--and ships--and sealing-wax--\)) s
5 544 M
(\(Of cabbages--and kings--\)) s
5 533 M
(And \(why \(the sea is boiling hot--\)\)) s
5 522 M
(And \(whether \(pigs have wings."\)\)\)) s
5 511 M
(This lambda composition itself can be classified in classes viz., "time", "poetry", "sea" e) s
5 500 M
(tc., \(in special case of gloss overlap this is easy to classify by computing high core numb) s
5 489 M
(ers of the graph\). Above evaluation itself is stored in ThoughtNet as hyperedge in its enti) s
5 478 M
(rety as the "meta-learning", and not just "knowledge",and an edge coloring for sentiment ca) s
5 467 M
(n be assigned. During future evocation, say utterance of word "time", the edge returned is ) s
5 456 M
(the most intensely colored edge.) s
5 434 M
(\(*\) Perfect design of Psycholinguistic text comprehension must involve ego-centric theory s) s
5 423 M
(pecific to each reader as mentioned previously. Combining EventNet and ThoughtNet throws an) s
5 412 M
(other challenge: When did ThoughtNet begin? Who was the primordial seed of thought? EventNe) s
5 401 M
(t on the other hand can be axiomatically assumed to have born during BigBang Hyperinflation) s
5 390 M
( and the resultant "ultimate free lunch". Invoking Anthropic principle - "I think,therefore) s
5 379 M
( I am", "I exist because I am supposed to exist" etc., - suggests the other way i.e EventNe) s
5 368 M
(t began from ThoughtNet. Then, did consciousness create universe? Quoting an Indological te) s
5 357 M
(xt - Hymn of creation - Nasadiya Sukta - "Even non-existence did not exist in the beginning) s
5 346 M
(" which concurs with aforementioned paradoxes. This theorizes duality arose from singularit) s
5 335 M
(y throwing spanner into spokes of linguistics which are based on duality of synonyms and an) s
5 324 M
(tonyms. That is a glaringly discordant note in achieving a perfect artificial intelligence.) s
5 313 M
( Thus conscious robot may never be a reality.) s
5 291 M
(\(*\) Above exposition is required to get to the bottom of difficulties in formalising "what ) s
5 280 M
(is meant by meaning" and "intrinsic merit" in perfect sense. Graph theoretic intrinsic meri) s
5 269 M
(t algorithms might require quantum mechanical concepts like Bose-Einstein condensate mentio) s
5 258 M
(ned in 18.10 i.e In recursive gloss overlap graph context, word vertices are energy levels ) s
5 247 M
(and edges amongst words are subatomic particles.) s
5 225 M
(\(*\) If ThoughtNet begot EventNet by anthropic principle, there is a possibility language wa) s
5 214 M
(s born before something existed in reality. For example, word "Earth" existed before Earth ) s
5 203 M
(was created. This presents another circular paradox - ThoughtNet implies EventNet implies T) s
5 192 M
(houghtNet ... because events create thoughts and anthropic principle implies thought create) s
5 181 M
(d events. This also implies thought created brain and its constituents which in turn think ) s
5 170 M
(and "understand meaning" of a text - sort of Supreme consciousness splitting itself into in) s
5 159 M
(dividual consciousness.) s
5 137 M
(\(*\) Another counterexample: A cretan paradox like sentence - "This sentence is a lie" - whi) s
5 126 M
(ch is true if it is false and false if true - Lambda function composition algorithm is beyo) s
5 115 M
(nd the scope of such sentences. This sentence exhibits 2 levels of truths and falsehoods - ) s
5 104 M
(Truth/Falsehood  within a sentence and Truth/Falsehood outside the sentence - in former obs) s
5 93 M
(erver and observed are one and the same and in the latter observer stands aloof from observ) s
5 82 M
(ed) s
5 60 M
(\(*\) If there are two levels of Truth/Falsehoods similar to stratified realities defined in ) s
5 49 M
(https://sites.google.com/site/kuja27/UndecidabilityOfFewNonTrivialQuestions.pdf, above para) s
5 38 M
(dox "This sentence is a lie" ican be analyzed \(kind of Godel sentence proving languages are) s
5 27 M
( incomplete\) as below with TRUE/FALSE and true/false being two levels of this nest:) s
5 16 M
(        - This sentence is a lie - true - self-refuting and circular) s
5 5 M
(        - This sentence is a lie - TRUE - not self-refuting because TRUE transcends "true") s
_R
S
%%Page: (117) 117
%%BeginPageSetup
_S
18 36 translate
/pagenum 117 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (117) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        - This sentence is a lie - false - self-refuting and circular) s
5 731 M
(        - This sentence is a lie - FALSE - not self-refuting because FALSE transcends "fals) s
5 720 M
(e") s
5 698 M
(\(*\) \(QUITE PRESUMPTIVE, THIS MIGHT HAVE A PARALLEL IN LOGIC BUT COULDN'T FIND IT\) In other ) s
5 687 M
(words, the sentence "\(It is TRUE that \(this sentence is a lie\)\)" is different from "\(It is ) s
5 676 M
(true that this sentence is a lie\)" - in the former the observer is independent of observed ) s
5 665 M
(sentence \(complete\) where as in the latter observer and observed coalesce \(incomplete\) - TR) s
5 654 M
(UE in former has scope beyond the inner sentence while true in latter is scope-restricted t) s
5 643 M
(o the inner sentence. If Truth and Falsehood are scoped with a universe of discourse, above) s
5 632 M
( paradox seems to get reconciled and looks like an extension of Incompleteness theorems in ) s
5 621 M
(logic. Natural languages and even Formal Logic have only one level of boolean truth/falseho) s
5 610 M
(od and thus previous is mere a theoretical fancy.) s
5 588 M
(\(*\) Above philosophical dissection of meaning has striking similarities to quantum mechanic) s
5 577 M
(s - If language has substructure abiding by quantum mechanics [e.g Bose-Einstein model for ) s
5 566 M
(recursive gloss overlap wordnet subgraph], the links across words which correspond to subat) s
5 555 M
(omic particles must obey Heisenberg uncertainty principle also i.e As a linguistic parallel) s
5 544 M
(, 100% accurate meaning may never be found by any model of computation. This can not be rul) s
5 533 M
(ed out if network is a random graph with probabilities for edges.) s
5 511 M
(\(*\) Levels of Truth are reminiscent of Tarski's Undefinability of Truth Theorem - https://p) s
5 500 M
(lato.stanford.edu/entries/goedel-incompleteness/#TarTheUndTru - There are two levels of lan) s
5 489 M
(guages - Inner Object Language and Outer Meta Language - Truth of statements in inner objec) s
5 478 M
(t languages are determined in outer meta language. An example sentence in object language i) s
5 467 M
(s the Cretan Paradox - "All cretans are liars". In previous example, "this sentence is a li) s
5 456 M
(e" is defined in object language \(English\) and is a self-referential Goedel sentence. Truth) s
5 445 M
( of this sentence has to be decided in metalanguage. Another example paradox sentence in ob) s
5 434 M
(ject language is: "This is bigger than the biggest". Can truth of this be determined in obj) s
5 423 M
(ect language? This can be geometrically interpreted: If object language and metalanguage ar) s
5 412 M
(e vector spaces of dimensions k and k+l, any sentence in object language is a vector of dim) s
5 401 M
(ension k \(e.g word2vec representation extended to sentence2vec\) and truth of it has to be d) s
5 390 M
(ecided in metalanguage space of dimensions k+l. In object language space there can not be a) s
5 379 M
(n entity bigger than biggest - e.g set of concentric circles limited by outermost circle an) s
5 368 M
(d truth of this sentence is "False". But when this sentence is projected to a k+l metalangu) s
5 357 M
(age vector space, a circle "bigger" in k+l dimension vectorspace can exist, than the "bigge) s
5 346 M
(st" circle in k dimension vectorspace and truth is "True". Example of dimensions in a natur) s
5 335 M
(al language are Parts-of-Speech.) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(-------) s
5 291 M
(229. \(THEORY\) Bose-Einstein Condensate model for Recursive Gloss Overlap based Classificati) s
5 280 M
(on) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(-------) s
5 247 M
(Bose-Einstein condensate fitness model by [Ginestra Bianconi] described in 18.10 for any co) s
5 236 M
(mplex network graph is:) s
5 225 M
(        Fitness of a vertex = 2^\(-b*Energy\) where b is a Bose-Einstein condensate function.) s
5 203 M
(Here fitness of a vertex is defined as ability to attract links to itself - Star complexity) s
5 192 M
(. It is not known if ability of a word to attract links from other words is same as intrins) s
5 181 M
(ic merit of a document in recursive gloss overlap context - prima facie both look equal. As) s
5 170 M
( energy of a node decreases, it attracts increased number of node edges. In Recursive Gloss) s
5 159 M
( Overlap graph, node with maximum core number or PageRank must have lowest energy and hence) s
5 148 M
( the Fittest. Previous equation is by applying Einstein derivation of Satyendranath Bose's ) s
5 137 M
(Planck's formula for Quantum mechanics where in a critical temperature above zero kelvin mo) s
5 126 M
(st of the particles "condense" in lowest energy level. This was proved in 1995-2001 by NIST) s
5 115 M
( lab \(http://bec.nist.gov/\).) s
5 93 M
(Applying the above model to a relational graph obtained from text document implies graph th) s
5 82 M
(eoretic representation of language has lurking quantum mechanical traits which should apply) s
5 71 M
( to all semantic graphs and ontologies viz.,WordNet, ConceptNet etc.,. For example, when a ) s
5 60 M
(winner word vertex takes all links to other words, the winner word becomes a dictator and t) s
5 49 M
(hus the only class a document can belong to. Thus Bose-Einstein condensate can be mapped to) s
5 38 M
( a Dictator boolean function. This should ideally be extensible to structural complexity of) s
5 27 M
( circuit graphs i.e gate within a neural net TC circuit version of WordNet with maximum fan) s
5 16 M
(in and fanout has lowest energy where neighbours flock. If energy implies information entro) s
5 5 M
(py in a document, low energy implies low entropy of a text i.e sigma\(p log p\) of a text as ) s
_R
S
%%Page: (118) 118
%%BeginPageSetup
_S
18 36 translate
/pagenum 118 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (118) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(bag of words probability distribution, decreases as text document increasingly becomes less) s
5 731 M
( chaotic and vice-versa holds too. As a document becomes more chaotic with high entropy and) s
5 720 M
( energy, fitness per word vertex decreases as there are multiple energy centres within it. ) s
5 709 M
(Hence low entropy is equivalent to presence of a high fitness word vertex in the graph.) s
5 687 M
(Analogy: Recursive Gloss Overlap graph can be construed as a 3 dimensional rubbersheet with) s
5 676 M
( low energy words as troughs. Deepest troughs are words \(lowest energy levels\) that classif) s
5 665 M
(y a document.) s
5 643 M
(Reference:) s
5 632 M
(---------) s
5 621 M
(229.1 Linked [Albert Laszlo Barabasi] - Chapter 8 - Einstein's Legacy) s
5 610 M
(229.2 Bianconi-Barabasi Bose-Einstein Condensation in Networks, Simplicial Complexes, Intri) s
5 599 M
(nsic Fitness - http://www.eng.ox.ac.uk/sen/files/symposium2017/bianconi.pdf) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(-------------) s
5 555 M
(230. \(THEORY\) Expander Graphs, Bose-Einstein Condensate Fitness model and Intrinsic Merit) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-------------) s
5 522 M
(Edge expander graphs are defined with Cheeger's constant for minimum high edge boundary per) s
5 511 M
( vertex subset:) s
5 500 M
(        minimum\(|boundary\(S\)|/|S|\), 1 < |S| < n/2) s
5 489 M
(where boundary\(S\) of a subset S of vertices of G \(V\(G\)\) is:) s
5 478 M
(        boundary\(S\) = { \(u,v\) | u in S, v in V\(G\) \\ S}) s
5 467 M
(From Bose-Einstein condensate fitness model, ability of a vertex to attract links increases) s
5 456 M
( with decreasing energy of a vertex. This implies) s
5 445 M
(boundary\(S\) expands with presence of low energy vertices. Thus Bose-Einstein condensate mod) s
5 434 M
(el translates into an edge expander construction. Also high expansion implies high star com) s
5 423 M
(plexity. Recursive Gloss Overlap graph with a low energy vertex is a high edge expander and) s
5 412 M
( easiliy classifiable to a topic with core numbers.) s
5 390 M
(Measuring intrinsic merit \(and therefore fitness if both are equivalent concepts\) by edge e) s
5 379 M
(xpansion \(Cheeger's constant\) over and above usual connectivity measures formalises a stron) s
5 368 M
(ger notion of "meaningfulness" of a text document. For example High Cheeger's constant of R) s
5 357 M
(GO graph implies high intrinsic merit of a text.) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-----------------------) s
5 313 M
(231. \(THEORY\) Sentiment analysis and ThoughtNet Continuum - Fine grained emotions and evoca) s
5 302 M
(tion - related to 228) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(-----------------------) s
5 269 M
(\(*\) ThoughtNet need not be a discrete hypergraph but a continuum of edges and nodes. Analog) s
5 258 M
(y: Set of countably infinite natural numbers and continuum of uncountably infinite reals. I) s
5 247 M
(t is difficult to visualize a continuum as a graph - no graph theoretic gadget exists for a) s
5 236 M
( continuum graph - Infinite graph is countable, Continuum graph is uncountable. By diagonal) s
5 225 M
(ization, continuum could be as hard as halting problem.) s
5 214 M
(\(*\) Each feature of a visual thought is a class stack node in ThoughtNet. Number of feature) s
5 203 M
(s per visual could be thousands. Visual is flattened) s
5 192 M
(into a hyperedge across class stack nodes corresponding to feature vector vertices.) s
5 181 M
(---------------------) s
5 170 M
(\(*\) Example schematic:) s
5 159 M
(----------------------) s
5 148 M
(                -------->Lambda computation---------) s
5 137 M
(returns         |                                  |  stores thought hyperedges) s
5 126 M
(evocatives      |                                  |) s
5 115 M
(                ---------ThoughtNet <---------------) s
5 104 M
(\(*\) Colors of Thought hyperedges are determined by sentimentality of class stack nodes. The) s
5 93 M
( class stack nodes are colored too, not just edges. If an edge transcends various colored c) s
5 82 M
(lass stack nodes, resultant color of thought hyperedge is a function of colors of constitue) s
5 71 M
(nt class stack nodes:) s
5 60 M
(        Edge sentiment color of ThoughtNet Hyperedge = weight_function\(node colors in the h) s
5 49 M
(yperedge\).) s
5 38 M
(\(*\) Node colors are priors. How these priors are decided for each class stack node is the m) s
5 27 M
(ainstay of emotional inference. This requires assumption of Desire/Prejudice/Bounded Ration) s
5 16 M
(ality/Irrational Exuberance arising from Consciousness or equivalent. This irrationality cr) s
5 5 M
(eates a pre-conceived potential per class stack node, though no edges may be part of the cl) s
_R
S
%%Page: (119) 119
%%BeginPageSetup
_S
18 36 translate
/pagenum 119 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (119) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ass at all. Irrationality has to be assumed to be an independent variable and atomic becaus) s
5 731 M
(e if it is not, what it depends on is a question. Though previous inquisition on Sentiments) s
5 720 M
(, Meaning et al border on Theology, it is inevitable to exclude the emotional root causes w) s
5 709 M
(hile working on a close-to-perfect mathematical simulation of human sentiments.) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(-------------------) s
5 665 M
(232. VIRGO commits for AsFer Software Analytics with SATURN Program Analysis - 29 February ) s
5 654 M
(2016, 1 March 2016) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-------------------) s
5 621 M
(-------------------------------------------------------------------------------------) s
5 610 M
(Software Analytics - SATURN Program Analysis added to VIRGO Linux kernel drivers) s
5 599 M
(-------------------------------------------------------------------------------------) s
5 588 M
(- SATURN \(saturn.stanford.edu\) Program Analysis and Verification software has been) s
5 577 M
(integrated into VIRGO Kernel as a Verification+SoftwareAnalytics subsystem) s
5 566 M
(- A sample driver that can invoke an exported function has been added in drivers - saturn_p) s
5 555 M
(rogram_analysis) s
5 544 M
(- Detailed document for an example null pointer analysis usecase has been created in virgo-) s
5 533 M
(docs/VIRGO_SATURN_Program_Analysis_Integration.txt) s
5 522 M
(- linux-kernel-extensions/drivers/virgo/saturn_program_analysis/saturn_program_analysis_tre) s
5 511 M
(es/error.txt is the error report from SATURN) s
5 500 M
(- SATURN generated preproc and trees are in linux-kernel-extensions/drivers/virgo/saturn_pr) s
5 489 M
(ogram_analysis/preproc and) s
5 478 M
(linux-kernel-extensions/drivers/virgo/saturn_program_analysis/saturn_program_analysis_trees) s
5 467 M
(/) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(-----------------) s
5 423 M
(233. \(FEATURE-DONE\) Commits as on 3 March 2016 - PERL WordNet::Similarity subroutine for pa) s
5 412 M
(ir of words) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(-----------------) s
5 379 M
(*\) New perl-src folder with perl code for computing WordNet Distance with Ted Pedersen et a) s
5 368 M
(l WordNet::Similarity CPAN module) s
5 357 M
(*\) Logs for some example word distances have been included in testlogs. Some weird behaviou) s
5 346 M
(r for similar word pairs - distance is 1 instead of 0. Probably a clockwise distance rather) s
5 335 M
( than anticlockwise.) s
5 313 M
(This leverages PERLs powerful CPAN support for text data processing. Also python can invoke) s
5 302 M
( PERL with PyPerl if necessary.) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(----------------) s
5 258 M
(234. \(FEATURE-DONE\) PERL WordNet::Similarity build and python issues notes) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(----------------) s
5 225 M
(- NLTK WordNet corpora despite being 3.0 doesnot work with WNHOME setting \(errors in except) s
5 214 M
(ion files and locations of lot of files are wrongly pointed to\)) s
5 203 M
(- Only Direct download from Princeton WordNet 3.0 works with WNHOME.) s
5 192 M
(- Tcl/Tk 8.6 is prerequisite and there is a build error "missing result field in Tk_Inter" ) s
5 181 M
(in /usr/include/tcl8.6/tcl.h. Remedy is to enable USE_INTERP_RESULT flag with macro: #defin) s
5 170 M
(e USE_INTERP_RESULT  1 in this header and then do:) s
5 159 M
(        make Makefile.PL) s
5 148 M
(        make) s
5 137 M
(        make install) s
5 126 M
(in WordNet::Similarity with WNHOME set to /usr/local/WordNet-3.0.) s
5 115 M
(- PyPerl is no longer in active development - so only subprocess.call\(\) is invoked to execu) s
5 104 M
(te perl with shell=False.) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(----------------) s
5 60 M
(235. \(THEORY\) Dream Sentiment Analysis with ThoughtNet - related to 18 and 228) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(----------------) s
5 27 M
(Dream Analysis in http://cogprints.org/5030/1/NRC-48725.pdf \(mentioned in 18.8\) scores drea) s
5 16 M
(ms based on polarity with bag of words representation- dreams are known to be related to Li) s
5 5 M
(mbic and Paralimbic systems in brain. Insofar as theories pertaining to ThoughtNet describe) s
_R
S
%%Page: (120) 120
%%BeginPageSetup
_S
18 36 translate
/pagenum 120 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (120) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(d in 18 and 228 are concerned, only conscious evocatives arising from events are described.) s
5 731 M
( Going a step further, can ThoughtNet account for interpretation of dreams? Dreams, psychol) s
5 720 M
(ogically, are known to be vagaries of suppressed thoughts manifesting in subsconscious stat) s
5 709 M
(e. ThoughtNet stores thoughts of experiences,visuals and events as hyperedges consciously. ) s
5 698 M
(A dream model is proposed where in subsconscious/RapidEyeMovement state, Thought hyperedges) s
5 687 M
( momentarily disintegrate and re-arrange to form new edges manifesting as dream visuals. On) s
5 676 M
(ce dream expires, these dream edges are dissolved and original ThoughtNet is restored. Befo) s
5 665 M
(re dissolution, dream might be stored if potentially strong. This explains why some dreams ) s
5 654 M
(linger after wakeup. Caveat: this is just a theory of dream analysis based on some thought ) s
5 643 M
(experimentation and has no scientific backing. This model makes an assumption that dream hy) s
5 632 M
(peredges are functions of preexisting ThoughtNet hyperedges which is not quite right becaus) s
5 621 M
(e there are exceptional phenomena like extra-sensory perception where visions of future are) s
5 610 M
( observed by few individuals which could not have arisen from past experience and thoughts.) s
5 599 M
( ESP implies brain has faculty to foresee inherently in a superconsicous state which is sub) s
5 588 M
(dued in normal conscious state. It is more accurate to say that dream hyperedges are functi) s
5 577 M
(ons of both past thought hyperedges and superconscious hidden variables which might explain) s
5 566 M
( ESP.) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-----------------) s
5 522 M
(236. \(THEORY\) Regularity Lemma and Ramsey Number of Recursive Gloss Overlap graph and Thoug) s
5 511 M
(htNet) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-----------------) s
5 478 M
(Throughout this document, ranking of documents which is so far a pure statistical and machi) s
5 467 M
(ne learning problem is viewed from Graph Theory and Lambda Function growth perspective - th) s
5 456 M
(eory invades what was till now engineering.  Both Regularity Lemma and Ramsey theory elucid) s
5 445 M
(ate order in large graphs. Regularity Lemma has a notion of density which is defined as:) s
5 434 M
(        d\(V1, V2\) = |E\(V1, V2\)|/|V1||V2|) s
5 423 M
(where V1 and V2 are subsets of vertices V\(G\) for a graph G and E\(V1,V2\) are edges among sub) s
5 412 M
(sets V1 and V2. Density is a quantitative measure of graph complexity and intrinsic connect) s
5 401 M
(edness merit of a text document. Ramsey Number R\(a,b\) of a graph is the least number such t) s
5 390 M
(hat there always exists a graph of vertex order R\(a,b\) with a clique of size a or an indepe) s
5 379 M
(ndent set of size b. Typically associated with "Party problem" where it is required to find) s
5 368 M
( minimum number of people to be invited so that a people know each other or b people do not) s
5 357 M
( know each other, Ramsey number of ThoughtNet sentiment colorings - e.g bipartisan red-blue) s
5 346 M
( colorings for 2 thought hyperedge sentiment polarities - provides a theoretical bound on s) s
5 335 M
(ize of ThoughtNet as such so that order arises in a motley mix of emotionally tagged though) s
5 324 M
(ts - a clique of similar sentimental edges emerges. Similar application of Ramsey number ho) s
5 313 M
(lds good for Recursive Gloss Overlap graph also - a document's graph can have cliques and i) s
5 302 M
(ndependent sets with vertex colorings for word sentiments.) s
5 280 M
(===========================================================================================) s
5 269 M
(===============================) s
5 258 M
(237. \(FEATURE-DONE\) Commits as on 11 March 2016 - Deep Learning Convolution - Multi Feature) s
5 247 M
( Convolution Map Kernel Filters) s
5 236 M
(===========================================================================================) s
5 225 M
(===============================) s
5 214 M
(- Convolution Network supports Multiple Feature Maps \(presently 3\)) s
5 203 M
(- New example bitmap for feature recognition of pattern "3" inscribed as 1s has been introd) s
5 192 M
(uced) s
5 181 M
(- Final neural network from Max pooling layer now is randomized with randint\(\) based weight) s
5 170 M
(s for) s
5 159 M
(each of the 10 neurons) s
5 148 M
(- Logs for this have been committed to testlogs) s
5 137 M
(- Logs show a marked swing in Maxpooling map where the segments of pattern "3" are pronounc) s
5 126 M
(ed.) s
5 115 M
(- Final neural layer shows a variegated decision from each neuron for corresponding 3 convo) s
5 104 M
(lution maps) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(--------------------) s
5 60 M
(238. \(FEATURE-DONE\) Commits as on 14 March 2016) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(--------------------) s
5 27 M
(    - Some bugs resolved) s
5 16 M
(    - Added one more example with no pattern) s
5 5 M
(    - Convolution is computed for all 3 bitmap examples) s
_R
S
%%Page: (121) 121
%%BeginPageSetup
_S
18 36 translate
/pagenum 121 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (121) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    - Final neuron layer now is a function of each point in all maxpooling layers) s
5 731 M
(    - The existence of pattern is identified by the final output of each of 10 neurons) s
5 720 M
(    - Patterns 0 and 3 have a greater neural value than no pattern. Gradation of neural val) s
5 709 M
(ue indicates intensity of pattern.) s
5 698 M
(    - Above is a very fundamental pattern recognition for 2 dimensional data. Sophisticated) s
5 687 M
( deconvolution is explained in http://arxiv.org/abs/1311.2901 which reverse engineers pooli) s
5 676 M
(ng layers with Unpooling.) s
5 665 M
(    - 3 logs for this commit have been included in testlogs/) s
5 654 M
(    - random weighting has been removed.) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(--------------------) s
5 610 M
(239. \(THEORY\) Deep Learning Convolution Network and a boolean function learning algorithm o) s
5 599 M
(f different kind) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(--------------------) s
5 566 M
(Deep Learning Convolution Network for Image Pattern Recognition elicits features from the i) s
5 555 M
(mage considered as 2-dimensional array. In the) s
5 544 M
(Deep Learning implementation in python-src/ image is represented as {0,1}* bitmap blob. Eac) s
5 533 M
(h row of this bit map can be construed as satisfying assignment to some boolean function to) s
5 522 M
( be learnt. Thus the 2-dimensional bitmap is set of assignments satisfying a boolean functi) s
5 511 M
(on - A boolean function learnt from this data - by some standard algorithms viz., PAC learn) s
5 500 M
(ing, Hastad-Linial-Mansour-Nisan fourier coefficient concentration bounds and low-degree po) s
5 489 M
(lynomial approximation \(learning phase averages the coefficients from all sample points and) s
5 478 M
( prediction phase uses this averaged fourier coefficient\) - accepts the image as input. Dee) s
5 467 M
(p Learning Convolution Network is thus equivalent to a boolean function learnt from an imag) s
5 456 M
(e - quite similar to HMLN low-degree learning, deep learning convolution also does weighted) s
5 445 M
( averaging in local receptive field feature kernel map layers, maxpooling layer and final n) s
5 434 M
(euron layers with binary output. Essentially convolution learns a TC circuit. It presuppose) s
5 423 M
(s existence of set of satisfying assignments which by itself is a #P-complete problem. This) s
5 412 M
( connects two hitherto unrelated concepts - Image Recognition and Satisifiability - into a ) s
5 401 M
(learning theory algorithm for 2-dimensional binary data. Same learning theory approach may ) s
5 390 M
(not work for BackPropagation which depend on 4 standard Partial Differential Equations.) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(--------------------) s
5 346 M
(240. \(FEATURE-DONE\) Commits as on 15 March 2016) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(--------------------) s
5 313 M
(- DeepLearning BackPropagation implementation:) s
5 302 M
(        - An example Software Analytics usecase for CPU and Memory usage has been included) s
5 291 M
(        - Number of Backpropagation weight update iterations has been increased 10 fold to ) s
5 280 M
(3000000.) s
5 269 M
(        - logs for some iterations have been included in testlogs/) s
5 258 M
(- DeepLearning Convolution Network implementation:) s
5 247 M
(        - Image patterns have been changed to 0, 8 and no-pattern.) s
5 236 M
(        - Final neuron layer weights have been changed by squaring to scale down the output) s
5 225 M
( - this differentiates patterns better.) s
5 214 M
(        - logs for this have been included in testlogs/) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(-------------------) s
5 170 M
(241. \(THEORY and IMPLEMENTATION\) ThoughtNet and Reinforcement Learning) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(-------------------) s
5 137 M
(Reinforcement Learning is based on following schematic principle of interaction between env) s
5 126 M
(ironment and agent learning from environment. ThoughtNet described in 228 and previous is a) s
5 115 M
(n environmental context that every human agent has access to in decision making. This makes) s
5 104 M
( human thought process and thought-driven-actions to be a special case of Reinforcement Lea) s
5 93 M
(rning. Reinforcement Learning is itself inspired by behavioural psychology.) s
5 71 M
(                                ---------> ThoughtNet context \(environment\) ------) s
5 60 M
(        action \(evocation\)      |                                                |  reward ) s
5 49 M
(and state transition \(most potent evocative thought\)) s
5 38 M
(                                |<----------- Text Document \(agent\) ------<----- |) s
5 16 M
(Schematic above illustrates text document study as reinforcement learning. During left-righ) s
5 5 M
(t reading of text, evocation action is taken per-word which accesses ThoughtNet storage and) s
_R
S
%%Page: (122) 122
%%BeginPageSetup
_S
18 36 translate
/pagenum 122 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (122) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( returns a reward which is the strongest thought edge. State transition after each evocatio) s
5 731 M
(n is the partially evaluated lambda composition prefix mentioned in 222 - this prefix is up) s
5 720 M
(dated after reading each word left-right. Human practical reading is most of the time lopsi) s
5 709 M
(ded - it is not exactly left-right but eye observes catchy keywords and swivels/oscillates ) s
5 698 M
(around those pivots creating a balanced composition tree. Error in disambiguation can be si) s
5 687 M
(mulated with a model similar to what is known as "Huygen's Gambler's Ruin Theorem" which av) s
5 676 M
(ers that in any Gambling/Betting game, player always has a non-zero probability of becoming) s
5 665 M
( insolvent - this is through a Bernoulli trial sequence as below with fair coin toss \(proba) s
5 654 M
(bility=0.5\):) s
5 643 M
(        - 1\) First coin flip - Pr\(doubling1\) = 0.5, Pr\(bankrupt1\) = 0.5) s
5 632 M
(        - 2\) Second coin flip - Pr\(bankrupt2\) = Pr\(bankrupt1\)*0.5 = 0.25) s
5 621 M
(        - 3\) Third coin flip - Pr\(bankrupt3\) = Pr\(bankrupt2\)*0.5 = 0.125) s
5 610 M
(        ....) s
5 599 M
(By union bound probability of gambler going bankrupt after infinite number of coin flips is) s
5 588 M
( 1. This convergence to 1 applies to unfair biased coin tosses also. This theorem has usefu) s
5 577 M
(l application in ThoughtNet reinforcement learning disambiguation. Reward is defined as pro) s
5 566 M
(bability of most potent evocative thought being retrieved from ThoughtNet \(this is when ret) s
5 555 M
(urn value is set of hyperedges and not unique - probability of reward is 1/size_of_set_retu) s
5 544 M
(rned\) and state transition is akin to consecutive coin flips. This proves that probability ) s
5 533 M
(of imperfect disambiguation is eventually 1 even though reward probability is quite close t) s
5 522 M
(o 1.) s
5 500 M
(A ThoughtNet Reinforcement Learning implementation has been committed as part of python-src) s
5 489 M
(/DeepLearning_ReinforcementLearningMonteCarlo.py) s
5 467 M
(References:) s
5 456 M
(-----------) s
5 445 M
(241.1 Reinforcement Learning - [Richard Sutton] - http://webdocs.cs.ualberta.ca/~sutton/boo) s
5 434 M
(k/the-book.html, https://www.dropbox.com/s/b3psxv2r0ccmf80/book2015oct.pdf?dl=0.) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-----------------------------------) s
5 390 M
(242. \(FEATURE-BENCHMARK-DONE\) Interview Algorithm PySpark-Cython implementation benchmark w) s
5 379 M
(ith and without Spark configurables) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(-----------------------------------) s
5 346 M
(This benchmark is done with both:) s
5 335 M
(InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.py) s
5 324 M
(InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py) s
5 313 M
(both precompiled with Cython to create .c source files and .so libraries.) s
5 291 M
(Number of keywords in newly crawled web page: 35) s
5 269 M
(---------------------------) s
5 258 M
(With spark-defaults.conf :) s
5 247 M
(---------------------------) s
5 236 M
(Execution 1:) s
5 225 M
(------------) s
5 214 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 203 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 192 M
(viewAlgorithm/testlogs# for i in `grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl) s
5 181 M
(_Visual_Spark.2localthreads.CythonOptimized.16March2016.out |grep TaskSetManager| awk '{pri) s
5 170 M
(nt $14}'`) s
5 159 M
(> do) s
5 148 M
(> sum=$\(expr $sum + $i\)) s
5 137 M
(> done) s
5 115 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 104 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 93 M
(viewAlgorithm/testlogs# echo $sum) s
5 82 M
(243058) s
5 71 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 60 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 49 M
(viewAlgorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Sp) s
5 38 M
(ark.2localthreads.CythonOptimized.16March2016.out |grep TaskSetManager| awk '{print $14}'|w) s
5 27 M
(c -l) s
5 16 M
(156) s
5 5 M
(Per task time in milliseconds: ~1558) s
_R
S
%%Page: (123) 123
%%BeginPageSetup
_S
18 36 translate
/pagenum 123 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (123) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(------------) s
5 720 M
(Execution 2:) s
5 709 M
(------------) s
5 698 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 687 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 676 M
(viewAlgorithm/testlogs# for i in `grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl) s
5 665 M
(_Visual_Spark.2localthreads.CythonOptimized2.16March2016.out |grep TaskSetManager| awk '{pr) s
5 654 M
(int $14}'`) s
5 643 M
(> do) s
5 632 M
(> sum=$\(expr $sum + $i\)) s
5 621 M
(> done) s
5 610 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 599 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 588 M
(viewAlgorithm/testlogs# echo $sum) s
5 577 M
(520074) s
5 566 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 555 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 544 M
(viewAlgorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Sp) s
5 533 M
(ark.2localthreads.CythonOptimized2.16March2016.out |grep TaskSetManager| awk '{print $14}'|) s
5 522 M
(wc -l) s
5 511 M
(312) s
5 500 M
(Per task time in milliseconds: ~1666) s
5 478 M
(------------------------------) s
5 467 M
(Without spark-defaults.conf) s
5 456 M
(------------------------------) s
5 445 M
(Execution 3:) s
5 434 M
(------------) s
5 423 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 412 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 401 M
(viewAlgorithm/testlogs# echo $sum) s
5 390 M
(69691) s
5 379 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 368 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 357 M
(viewAlgorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Sp) s
5 346 M
(ark.2localthreads.CythonOptimized3.16March2016.out |grep TaskSetManager| awk '{print $14}'|) s
5 335 M
(wc -l) s
5 324 M
(156) s
5 313 M
(Per task time in milliseconds: ~446 which is twice faster than earlier benchmark done in Fe) s
5 302 M
(bruary 2016 and almost 4 times faster than previous 2 executions with spark-defaults.conf e) s
5 291 M
(nabled.) s
5 269 M
(A spark-defaults.conf file has been committed to repository \(Reference: http://spark.apache) s
5 258 M
(.org/docs/latest/configuration.html\). With Spark configuration settings for memory and mult) s
5 247 M
(icore, something happens with Spark performance which is counterintuitive despite document ) s
5 236 M
(size being almost same.) s
5 214 M
(----------------------------------------------------------) s
5 203 M
(243. Commits \(1\) as on 16,17 March 2016) s
5 192 M
(----------------------------------------------------------) s
5 181 M
(PySpark-Cython Interview Algorithm for Merit - Benchmark) s
5 170 M
(----------------------------------------------------------) s
5 159 M
(- 3 executions with and without spark-defaults.conf config settings have been benchmarked) s
5 148 M
(- Cython setup.py has been updated to compile both InterviewAlgorithmWithIntrinisicMerit_Cr) s
5 137 M
(awl_Visual_Spark.py and InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py) s
5 126 M
(to create .c and .so files) s
5 115 M
(- Benchmark yields some intriguing results:) s
5 104 M
(        - Executions with spark-defaults.conf enabled are 4 times slower than executions wi) s
5 93 M
(thout spark-defaults.conf) s
5 82 M
(        - Execution without spark config is twice faster than earlier benchmark) s
5 71 M
(- Logs and screenshots for above have been committed to testlogs) s
5 60 M
(- Text document has been recrawled and updated \(number of keywords almost same as previous ) s
5 49 M
(benchmark\)) s
5 38 M
(- Spark config file has been committed) s
5 16 M
(---------------------------------------------------------------) s
5 5 M
(244. Commits \(2\) as on 16,17 March 2016) s
_R
S
%%Page: (124) 124
%%BeginPageSetup
_S
18 36 translate
/pagenum 124 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (124) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(---------------------------------------------------------------) s
5 731 M
(More benchmarking of PySpark-Cython Intrinsic Merit computation) s
5 720 M
(----------------------------------------------------------------) s
5 709 M
(- Enabled Spark RDD cacheing with cache\(\) - storage level MEMORY) s
5 698 M
(- Recompiled .c and .so with Cython) s
5 687 M
(- uncommented both lines in Cython setup.py) s
5 676 M
(- logs and screenshots for above have been committed in testlogs/) s
5 665 M
(- locking.acquire\(\) and locking.release\(\) have been commented) s
5 654 M
(- With this per task duration has been brought down to ~402 milliseconds on single node clu) s
5 643 M
(ster. Ideally on a multinode cluster) s
5 632 M
(when tasks are perfectly distributable, this should be the runtime.) s
5 610 M
(--------------------------------------------------------------------------------) s
5 599 M
(With spark-defaults.conf - multiple contexts disabled and reuse worker enabled) s
5 588 M
(--------------------------------------------------------------------------------) s
5 577 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 566 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 555 M
(viewAlgorithm/testlogs# echo $sum) s
5 544 M
(246796) s
5 533 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 522 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 511 M
(viewAlgorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Sp) s
5 500 M
(ark.2localthreads.CythonOptimized.17March2016.out |grep TaskSetManager| awk '{print $14}'|w) s
5 489 M
(c -l) s
5 478 M
(156) s
5 467 M
(Per task time milliseconds: ~1582) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(----------) s
5 423 M
(Without spark-defaults.conf - locking.acquire\(\)/release\(\) disabled and Spark RDD cacheing e) s
5 412 M
(nabled) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(----------) s
5 379 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 368 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 357 M
(viewAlgorithm/testlogs# echo $sum) s
5 346 M
(248900) s
5 335 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 324 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 313 M
(viewAlgorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Sp) s
5 302 M
(ark.2localthreads.CythonOptimized2.17March2016.out |grep TaskSetManager| awk '{print $14}'|) s
5 291 M
(wc -l) s
5 280 M
(618) s
5 269 M
(Per task time milliseconds: ~402 \(fastest observed thus far per task; Obviously something i) s
5 258 M
(s wrong with spark-defaults.conf enabled\)) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(-----------------------------------) s
5 214 M
(245. \(FEATURE-BENCHMARK-DONE\) Interview Algorithm PySpark-Cython implementation benchmark w) s
5 203 M
(ith Spark configurables) s
5 192 M
(- Commits as on 21 March 2016) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(-----------------------------------) s
5 159 M
(Following benchmark was done with a new spark-defaults.conf \(committed as spark-defaults2.c) s
5 148 M
(onf\):) s
5 126 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 115 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 104 M
(viewAlgorithm/testlogs# echo $sum) s
5 93 M
(965910) s
5 82 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 71 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/Inter) s
5 60 M
(viewAlgorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Sp) s
5 49 M
(ark.2localthreads.CythonOptimized.21March2016.out |grep TaskSetManager| awk '{print $14}'|w) s
5 38 M
(c -l) s
5 27 M
(618) s
5 16 M
(Time per task in milliseconds: ~1562 \(Again, with spark-defaults.conf with some additional ) s
5 5 M
(settings, there is a blockade\)) s
_R
S
%%Page: (125) 125
%%BeginPageSetup
_S
18 36 translate
/pagenum 125 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (125) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-------------------------------------) s
5 709 M
(246. \(THEORY\) Learning a variant of Differential Privacy in Social networks) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(-------------------------------------) s
5 676 M
(Nicknames/UserIds in social media are assumed to be unique to an individual. Authentication) s
5 665 M
( and authorization with Public-Key Infrastructure) s
5 654 M
(is assumed to guarantee unique identification. In an exceptional case, if more than one per) s
5 643 M
(son shares a userid intentionally or because of cybercrime to portray a false picture of ot) s
5 632 M
(her end, is it possible to distinguish and learn such spoof behaviour? This is a direct opp) s
5 621 M
(osite of differential privacy [Cynthia Dwork - http://research.microsoft.com/pubs/64346/dwo) s
5 610 M
(rk.pdf] where 2 databases differing in one element are indistinguishable to queries by a ra) s
5 599 M
(ndomized algorithm with coin tosses. But in previous example of shared id\(s\) in social netw) s
5 588 M
(ork, distinguisher should be able to discern the cases when a remote id is genuine and spoo) s
5 577 M
(fed/shared - probably suitable name for it is Differential Identification. This can theoret) s
5 566 M
(ically happen despite all PKI security measures in place when id is intentionally shared i.) s
5 555 M
(e a coalition of people decide to hoodwink PKI by sharing credentials and the receiving end) s
5 544 M
( sees them as one. For example, if a chat id is compromised by a coalition, the chat transc) s
5 533 M
(ript is no longer credible reflection of the other end, and receiving end may not be aware ) s
5 522 M
(of this at all. Here chat transcript is a mix of both genuine and spoofed portrayal of othe) s
5 511 M
(r end. An example statistical Learning algorithm for distinguishing when spoof happened ana) s
5 500 M
(lyzes the chat transcript conversations with genuine chat as priors if there is a prior ava) s
5 489 M
(ilable. Non-statistically, it is not known how a boolean function learner would look like f) s
5 478 M
(or this example. A special case is when a coalition is unnecessary. The remote end can be a) s
5 467 M
( single individual garnering collective wisdom from multiple sources to present a deceptive) s
5 456 M
( portrayal of multitude.) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(-------------------------------------) s
5 412 M
(247. \(FEATURE-DONE\) Commits as on 24 March 2016 - Code Optimizations - Cacheing and Loop in) s
5 401 M
(variant - Interview Algorithm) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(-------------------------------------) s
5 368 M
(- New Cacheing datastructures have been included for storing already found previous level b) s
5 357 M
(ackedge vertices for each level and) s
5 346 M
(already found gloss tokens. Presently these caches are python dictionaries only and in a di) s
5 335 M
(stributed setting this can be replaced with an) s
5 324 M
(object key-value stores like memcached.\(InterviewAlgorithm/InterviewAlgorithmWithIntrinisic) s
5 313 M
(Merit_SparkMapReducer.py\)) s
5 302 M
(- There was an inefficient loop invariant computation for prevelevesynsets_tokens which has) s
5 291 M
( been moved to outermost while.\(InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_Cr) s
5 280 M
(awl_Visual_Spark.py\)) s
5 269 M
(- spark-default2.conf has been updated with few more Spark config settings) s
5 258 M
(- Spidered text has been recrawled) s
5 247 M
(- logs and screenshots for this commits have been included in testlogs/) s
5 236 M
(- Cython .c , .so files have been rebuilt) s
5 225 M
(- Cacheing above in someway accomplishes the isomorphic node removal by way of Cache lookup) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(-------------------------------) s
5 181 M
(248. \(FEATURE-BENCHMARK-DONE\) Intrinsic Merit PySpark-Cython implementation - With and With) s
5 170 M
(out cacheing) s
5 159 M
(- Commits as on 25 March 2016) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(-------------------------------) s
5 126 M
(1.Cache md5 hashkey has been changed to be the complete tuple \(tokensofprevlevel,keyword\) -) s
5 115 M
( the rationale is to have perfect) s
5 104 M
(uniqueness to find backvertices for a keyword and gloss from previous recursion step.) s
5 93 M
(2.Following benchmark was done by disabling and enabling lookupCache and lookupCacheParents) s
5 82 M
( boolean flags.) s
5 71 M
(3.Cache values are "Novalue" string literals by default initialized in lambda and the Cache) s
5 60 M
( updates are not append\(\)s but) s
5 49 M
(simple key-value assignments.) s
5 38 M
(--) s
5 27 M
(Number of keywords: 7) s
5 16 M
(Without Cacheing: 9 minutes for all tasks \(including NetworkX and graphics rendering times ) s
5 5 M
(which is quite considerable\)) s
_R
S
%%Page: (126) 126
%%BeginPageSetup
_S
18 36 translate
/pagenum 126 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (126) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(With Cacheing: 9 minutes for all tasks \(including NetworkX and graphics rendering times whi) s
5 731 M
(ch is quite considerable\)) s
5 709 M
(Summation of individual task times in milliseconds and averaging sometimes gives misleading) s
5 698 M
(ly high duration per task though) s
5 687 M
(total execution is faster. Because of this start-end time duration is measured. For above e) s
5 676 M
(xample Cacheing has no effect because) s
5 665 M
(there are no repetitions cached to do lookup. Logs and screenshots with and without cachein) s
5 654 M
(g have been committed to testlogs/) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(-------------------------------) s
5 610 M
(249. \(THEORY\) An alternative USTCONN LogSpace algorithm for constructing Recursive Gloss Ov) s
5 599 M
(erlap Graph) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(-------------------------------) s
5 566 M
(Benchmarks above are selected best from multiple executions. Sometimes a mysterious slowdow) s
5 555 M
(n was observed with both CPUs clocking 100%) s
5 544 M
(load which could be result of JVM Garbage Collection for Spark processes among others. Thes) s
5 533 M
(e benchmarks are thus just for assessing feasibility of Spark clustering only and a perfect) s
5 522 M
( benchmark might require a cloud of few thousand nodes for a crawled webpage. At present th) s
5 511 M
(ere is no known standard algorithm to convert a natural language text to a relational graph) s
5 500 M
( without WordNet and internally looking up some *Net ontology to get path relations between) s
5 489 M
( two words could be indispensable theoretically speaking. This is the reverse process of Gr) s
5 478 M
(aph Traversals - Breadth First and Depth First - traversal is the input text and a graph ha) s
5 467 M
(s to be extracted from it. For n keywords, there are n^2 ordered pairs of word vertices pos) s
5 456 M
(sible for each of which WordNet paths have to be found. This is Undirected ST Connectivity ) s
5 445 M
(in graphs for which there are quite a few algorithms known right from [Savitch] theorem upt) s
5 434 M
(o [OmerReingold] ZigZag product based algorithm in logspace. This is more optimal compared ) s
5 423 M
(to all pairs shortest paths on WordNet. This algorithm does not do deep learning recursion ) s
5 412 M
(top-down to learn a graph from text. For all pairs this is  better than O\(n^3\) which is upp) s
5 401 M
(erbound for All Pairs Shortest Paths. These n^2 pairs of paths overlap and intersect to cre) s
5 390 M
(ate a graph. Presently implemented Recursive Gloss Overlap learns deeper than all pairs UST) s
5 379 M
(CONN algorithm because it uses "superinstance" notion - whether x is in definition of y - s) s
5 368 M
(omething absent in WordNet jargon. This algorithm is quadratic in number of words where as ) s
5 357 M
(Recursive Gloss Overlap is linear - O\(n*d*s^tmax/cpus\) - counterintuitively.) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-------------------------------) s
5 313 M
(250. Commits as on 29 March 2016) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-------------------------------) s
5 280 M
(- New subroutine for printing WordNet Synset Path between 2 words - this prints edges relat) s
5 269 M
(ed by hypernyms and hyponyms) s
5 258 M
(- an example log has been committed in testlogs/) s
5 236 M
(From the example path in logs, distance is more of a metapath than a thesaurus-like path im) s
5 225 M
(plemented in Recursive Gloss Overlap in NeuronRain. Due to this limitation of WordNet hyper) s
5 214 M
(-hyponyms the usual unsupervised classifier based on core numbers of the graph translated f) s
5 203 M
(rom text would not work as accurately with straightforward WordNet paths. This necessitates) s
5 192 M
( the superinstance relation which relates two words k and l: k is in definition of l.) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(----------------------------) s
5 148 M
(251. \(FEATURE-DONE\) Commits \(1\) as on 30 March 2016 - MemCache Integration with Spark-Cytho) s
5 137 M
(n Intrinsic Merit Computation) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(----------------------------) s
5 104 M
(- In this commit, native python dictionary based cache lookup for Spark_MapReduce\(\) and Spa) s
5 93 M
(rk_MapReduce_Parents\(\) is replaced with) s
5 82 M
(standard MemCache Distributed Object Cacheing get\(\)/set\(\) invocations.) s
5 71 M
(- Logs and Screenshots for above have been committed to testlogs/) s
5 60 M
(- Prerequisites are MemCached \(ubuntu apt package\) and Python-memcache \(pip install\) librar) s
5 49 M
(ies) s
5 38 M
(- a recrawled webpage has been merit-computed) s
5 27 M
(- MemCached is better than native dict\(s\) because of standalone nature of Cache Listener wh) s
5 16 M
(ich can be looked up from) s
5 5 M
(anywhere on cloud) s
_R
S
%%Page: (127) 127
%%BeginPageSetup
_S
18 36 translate
/pagenum 127 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (127) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-------------------------------------) s
5 709 M
(252. \(FEATURE-DONE\) Commits \(2\) as on 30 March 2016 - Spark-Cython Intrinsic Merit computat) s
5 698 M
(ion with spark-defaults.conf enabled) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(-------------------------------------) s
5 665 M
(- spark-defaults2.conf has been enabled with extra java options for performance \(reference:) s
5 654 M
( http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\)) s
5 643 M
(- lookupCache and lookupCacheParents boolean flags have been done away with because memcach) s
5 632 M
(e has been enabled by default for subgraph cacheing) s
5 621 M
(- With this spark logs show more concurrency and less latency. Dynamic allocation was in co) s
5 610 M
(nflict with number of executors and executors has been hence commented in spark-defaults2.c) s
5 599 M
(onf) s
5 588 M
(- text document has been updated to have ~10 keywords. This took almost 7 minutes which loo) s
5 577 M
(ks better than one with spark-defaults.conf disabled) s
5 566 M
(- Screenshot and logs have been committed in testlogs/) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-----------------------------------) s
5 522 M
(253. \(FEATURE-DONE\) Commits as on 1 April 2016) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(-----------------------------------) s
5 489 M
(Loopless Map function for Spark_MapReduce\(\)) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(-----------------------------------) s
5 456 M
(- new Map function MapFunction2\(\) has been defined which doesn't loop through all keywords ) s
5 445 M
(per level, but does the glossification per keyword) s
5 434 M
(which is aggregated by Reduce step. MapFunction\(\) does for loop for all keywords per level.) s
5 423 M
(- a dictionary cacheing with graphcachelocal has been done for lookup of already gloss-toke) s
5 412 M
(nized keywords. This couldn't be memcached due to a weird error that resets the graphcachel) s
5 401 M
(ocal to a null which shouldn't have.) s
5 390 M
(- This has a execution time of 6 minutes overall for all tasks compared to for-loop Map fun) s
5 379 M
(ction in Spark_MapReduce\(\).) s
5 368 M
(- logs and screenshots for Loopless Map with and without graphcachelocal have been committe) s
5 357 M
(d) s
5 346 M
(- Rebuilt Cython .c, .o, .so, intrinsic merit log and DOT files) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(-----------------------------------) s
5 302 M
(254. \(THEORY\) Hypercontractivity - Bonami-Beckner Theorem Inequality, Noise Operator and p-) s
5 291 M
(Norm of Boolean functions) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(-----------------------------------) s
5 258 M
(Hypercontractivity implies that noise operator attenuates a boolean function and makes it c) s
5 247 M
(lose to constant function. Hypercontractivity is) s
5 236 M
(defined as:) s
5 225 M
(        |Trhof|q <= |f|p where 0 <= rho <= sqrt\(\(p-1\)\(q-1\)\) for some p-norm and q-norm) s
5 214 M
(and in its expanded form as:) s
5 203 M
(        sigma\(rho^|S|*\(1/2^n*sigma\(|f\(x\)|^q*\(-1\)^\(parity\(xi\)\)\)\)^\(1/q\)*parity\(S\)\) <= \(1/2^n*) s
5 192 M
(sigma\(|f\(x\)|^p\)^\(1/p\)) s
5 181 M
(Hypercontractivity upperbounds a noisy function's q-norm by same function's p-norm without ) s
5 170 M
(noise. For 2-norm, by Parseval's theorem which gives 2-norm as sigma\(f\(S\)^2\), hypercontract) s
5 159 M
(ivity can be directly applied to Denoisification in 53.11 and 53.12 as it connects noisy an) s
5 148 M
(d noiseless boolean function norms.) s
5 126 M
(Reference:) s
5 115 M
(----------) s
5 104 M
(254.1 Bonami-Beckner Hypercontractivity - http://theoryofcomputing.org/articles/gs001/gs001) s
5 93 M
(.pdf) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(----------------------------------------------) s
5 49 M
(255. \(THEORY\) Hypercontractivity, KKL inequality,Social choice boolean functions  - Denoisi) s
5 38 M
(fication 3) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(----------------------------------------------) s
5 5 M
(For 2-norm, Bonami-Beckner inequality becomes:) s
_R
S
%%Page: (128) 128
%%BeginPageSetup
_S
18 36 translate
/pagenum 128 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (128) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        sigma[\(rho^|S|*fourier_coeff\(S\)^2\)^\(2/2\)] <= [1/2^n*\(sigma\(f\(x\)^p\)^2/p\)]) s
5 720 M
(For boolean functions f:{0,1}^n -> {-1,0,1}, [Kahn-Kalai-Linial] inequality is special case) s
5 709 M
( of previous:) s
5 698 M
(        For rho=p-1 and p=1+delta, sigma\(delta^|S|*fourier_coeff\(S\)^2\) <= \(Pr[f!=0]\)^2/\(1+d) s
5 687 M
(elta\)) s
5 676 M
(where p-norm is nothing but a norm on probability that f is non-zero \(because Pr[f!=0] is a) s
5 665 M
( mean of all possible f\(x\) at 2^n points\).) s
5 643 M
(From 53.12 size of a noisy boolean function circuit has been bounded as: Summation\(rho^|S|*) s
5 632 M
(fourier_coeff\(S\)^2\) * 2^\(\(t^\(1/d\)/20\)-1\) <= Size) s
5 621 M
(for |S| > t. From KKL inequality, 2-norm in LHS can be set to maximum of \(Pr[f!=0]\)^2/\(1+de) s
5 610 M
(lta\) in 53.12 and Size lowerbound is obtained for) s
5 599 M
(a denoisified circuit:) s
5 588 M
(        \(Pr[f!=0]\)^2/\(1+delta\) * 2^\(\(t^\(1/d\)/20\)-1\) <= Size) s
5 577 M
(which is exponential when delta=1 and Pr[f!=0] is quite close to 1 i.e f is 1 or -1 for mos) s
5 566 M
(t of the inputs.) s
5 544 M
(If f is 100% noise stable, from Plancherel theorem:) s
5 533 M
(        sigma\(rho^|S|*f\(S\)^2\) = 1, S in [n]) s
5 522 M
(        For |S| < t=n, 1-Summation\(rho^|S|*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 511 M
(        But for rho=p-1 and p=1+delta, 1-Summation\(delta^|S|*fourier_coeff\(S\)^2\) >  1-\(Pr[f) s
5 500 M
(!=0]\)^2/\(1+delta\) from KKL inequality.) s
5 489 M
(        For |S| < t=n,  1-\(Pr[f!=0]\)^2/\(1+delta\) < 1-Summation\(rho^|S|*fourier_coeff\(S\)^2\) ) s
5 478 M
(<= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 467 M
(=>  0.5*\(1-\(Pr[f!=0]\)^2/\(1+delta\)\)*2^\(t^\(1/d\)/20\) < 0.5*\(1-Summation\(rho^|S|*fourier_coeff\() s
5 456 M
(S\)^2\)\)*2^\(t^\(1/d\)/20\) <= Size) s
5 434 M
(Again denoisification by letting rho and delta tend to 0 in above, places an exponential lo) s
5 423 M
(werbound, with constant upperbound on depth, on a noiseless circuit size. In above size bou) s
5 412 M
(nd Lt n^\(1/n\) = 1 for n tending to infinity \(Real analysis result - http://www.jpetrie.net/) s
5 401 M
(2014/10/12/proof-that-the-limit-as-n-approaches-infinity-of-n1n-1-lim_n-to-infty-n1n-1/\). P) s
5 390 M
(ercolation in 100% noise stable regime can have NC/poly circuits while above stipulates the) s
5 379 M
( lowerbound for noiseless circuits to be exponential when depth is constant. It implies NC/) s
5 368 M
(Poly formulation of percolation has unrestricted depth which is obvious because 100% noise ) s
5 357 M
(stability regime is attained when n tends to infinity. Randomized algorithm equivalent of P) s
5 346 M
(ercolation implies Percolation is in RP or RNC with pseudorandom advice which vindicates de) s
5 335 M
(randomized NC representation for percolation. This leads to an important result if 100% sta) s
5 324 M
(bility implies lowerbound: LHS is an NC/Poly Percolation circuit in 100% noise stability re) s
5 313 M
(gime of polynomial size. RHS is exponential, denoisified, 100% stable circuit of arbitrary ) s
5 302 M
(hardness. From 53.9 and 53.16, RHS has an NC/Poly lowerbound e.g if RHS is PH-complete then) s
5 291 M
( PH in P/poly. From Toda's theorem, PH is in P^#P and there is a known result that P^#P in ) s
5 280 M
(P/Poly implies P^#P = MA. Unifying:) s
5 269 M
(PH in P^#P in P/Poly => P^#P=MA. \(assumption: NC/Poly is in P/Poly because any logdepth, po) s
5 258 M
(lysize bounded fanin circuit has polysize gates\)) s
5 247 M
(NC/log percolation circuit would imply collapse of polynomial hierarchy - RHS PH-complete i) s
5 236 M
(s lowerbounded by LHS NC/log in P and trivially P=NP.) s
5 214 M
(Percolation boolean functions have a notion of revealment - that is, there exists a randomi) s
5 203 M
(zed algorithm corresponding to each percolation boolean function which has coin toss advice) s
5 192 M
( to query the next bit and revealment is the maximum probability that a bit index i in [n] ) s
5 181 M
(is queried in these sets of bits B in [n]- it reveals the secret in randomness. Thus LHS Pe) s
5 170 M
(rcolation in Pr\(Good\) circuit can be simulated by a randomized algorithm with revealment. I) s
5 159 M
(n such a case, advice strings are random coin tosses. This revealment has close resemblance) s
5 148 M
( to random restrictions - each restriction brings down a variable by revealing it finally l) s
5 137 M
(eading to a constant function. Following theorem connects Fourier weights of percolation an) s
5 126 M
(d Randomized revealments:) s
5 115 M
(        Sigma\(fourier_coeff\(S\)^2\) <= revealment*constant*2-norm\(f\)) s
5 93 M
(There is a special case in which size of advice list can be brought down to logn from n for) s
5 82 M
( Z\(n\) grid. Set of logn points are pseudorandomly chosen from n points. This logn sized sub) s
5 71 M
(set when sorted would still point to left-right trend unless leftmost and rightmost are not) s
5 60 M
( in sample. This places Percolation in NC/log which could imply a PH collapse mentioned pre) s
5 49 M
(viously. This is an exponential decrease in size of advice.) s
5 27 M
(Reference:) s
5 16 M
(----------) s
5 5 M
(255.1 Randomized Algorithms and Percolation - http://math.univ-lyon1.fr/~garban/Slides/Newt) s
_R
S
%%Page: (129) 129
%%BeginPageSetup
_S
18 36 translate
/pagenum 129 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (129) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(on.pdf) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(--------------------------------) s
5 698 M
(256. \(THEORY\) Majority Voting in Multipartisan Elections) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(--------------------------------) s
5 665 M
(Uptill now, P\(Good\) majority voting in this document describes only 2-candidate elections w) s
5 654 M
(ith a majority function voting circuit.) s
5 643 M
(Noise stability of a voter's decision boolean function is assumed as a suitable measure of ) s
5 632 M
(voter/voting error in RHS of P\(Good\) summation. Most) s
5 621 M
(generic RHS is when there is a multiway contest and error is bounded. P\(Good\) binomial summ) s
5 610 M
(ation still applies for multipartisan democracy because voter decision vector \(set of binar) s
5 599 M
(y decision bits of all voters - in {Good,Bad}*\) remains same though number of candidates in) s
5 588 M
(crease manifold. Differences are in:) s
5 577 M
(        - Individual Voter Judging Functions which are not boolean functions and) s
5 566 M
(        - Generic Majority Function that needs to find most prominent index from an assorte) s
5 555 M
(d mix of votes \(Heavy hitter\) - might require Sorting Networks on Hashvalues.) s
5 544 M
(        - There are three variables - number of variables per voter, number of voters and n) s
5 533 M
(umber of candidates \(which is 2 in boolean decision functions special case for fixed 2 cand) s
5 522 M
(idate elections\) and these numbers can be arbitrarily huge - in the order of Graham's numbe) s
5 511 M
(r for example.) s
5 489 M
(Voter judging functions have to choose an index within n candidates than simple 0-1. In a s) s
5 478 M
(pecial case non-boolean functions can be simulated by a functional aggregation of boolean f) s
5 467 M
(unctions e.g Voted Candidate index in binary representation is nothing but a logN sized bin) s
5 456 M
(ary string of 0-1 output gates from multiple boolean functions for maximum of N candidates.) s
5 445 M
( Measuring how good is the choice made by a multiway voter decision function has no equival) s
5 434 M
(ent notion of stability and sensitivity in non-boolean functions. For 2 voters 0-1 boolean ) s
5 423 M
(function is sufficient. Multiparty Generic Majority Function without tie in which candidate) s
5 412 M
(s are hashkeys and votes are hashvalues can be shown to be NP-complete from Money Changing ) s
5 401 M
(Problem and 0-1 Integer Linear Programming\(https://sites.google.com/site/kuja27/IntegerPart) s
5 390 M
(itionAndHashFunctions_2014.pdf\). [Friedgut-Kalai-Nisan] theorem is quantitative extension o) s
5 379 M
(f Arrow's Theorem and Gibbard-Satterthwaite Theorem which prove that there is a non-zero pr) s
5 368 M
(obability that elections with 3 candidates and more can be manipulated. This appears suffic) s
5 357 M
(ient to prove that Goodness probability of a multiway contest in RHS of P\(good\) binomial su) s
5 346 M
(mmation can never converge to 100% implying that democracy is deficient. This non-construct) s
5 335 M
(ively shows the impossibility without even knowing individual voter error and series summat) s
5 324 M
(ion. Interestingly, this divergence condition coincides with contradiction mentioned in 53.) s
5 313 M
(16.3.1 for PARITY3SAT superpolynomial size circuits. Assuming an NC/Poly or P/Poly LHS Perc) s
5 302 M
(olation Boolean Function with 100% noise stability in P\(Good\) LHS, Multiway Election in RHS) s
5 291 M
( can be placed in hardest known complexity classes - Polynomial Hierarchy PH, EXPSPACE - *\)) s
5 280 M
( for PH it is expoential DC-uniform circuit size required by RHS *\) for adversarial simulat) s
5 269 M
(ion by Chess,Go etc., it is EXPTIME-hard required by RHS etc.,. This fits into scenario 53.) s
5 258 M
(9.5 when LHS is 100% stable circuit and RHS is unstable PH=DC circuit.) s
5 236 M
(Reference:) s
5 225 M
(----------) s
5 214 M
(256.1. Elections can be manipulated often - [Friedgut-Kalai-Nisan] - http://www.cs.huji.ac.) s
5 203 M
(il/~noam/apx-gs.pdf) s
5 192 M
(256.2. Computational Hardness of Election Manipulation - https://www.illc.uva.nl/Research/P) s
5 181 M
(ublications/Reports/MoL-2015-12.text.pdf) s
5 159 M
(-----------------------------------------------------------------------------------) s
5 148 M
(257. Commits as on 4 April 2016) s
5 137 M
(-----------------------------------------------------------------------------------) s
5 126 M
(- Updated AsFer Design Document - KKL inequality and Denoisification) s
5 115 M
(- Spark-Cython intrinsic merit computation has been md5hash enabled again since there were ) s
5 104 M
(key errors with large strings) s
5 93 M
(- logs and screenshots have been committed to testlogs/) s
5 82 M
(- rebuilt Cython .c, .so files) s
5 71 M
(- Spidered text has been changed - This took 28 minutes for ~40+ keywords better than 6 min) s
5 60 M
(utes for ~10 keywords earlier. Again Spark in single node cluster dualcore has some bottlen) s
5 49 M
(eck.) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(-------------------) s
5 5 M
(258. \(FEATURE-BENCHMARK-DONE\) Analysis of PySpark-Cython Intrinsic Merit Computation Benchm) s
_R
S
%%Page: (130) 130
%%BeginPageSetup
_S
18 36 translate
/pagenum 130 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (130) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(arks done so far) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-------------------) s
5 709 M
(From 191 and 201 time complexity analysis of Recursive Gloss Overlap algorithm, for single ) s
5 698 M
(node dualcore cluster following is the) s
5 687 M
(runtime bound:) s
5 676 M
(        O\(n*d*s^tmax/cpus\)) s
5 665 M
(where d is the number of keywords, n is the number of documents and s is the maximum gloss ) s
5 654 M
(size per keyword. For last two benchmarks done with) s
5 643 M
(MD5 hashkeys, Local Cacheing and Global Cacheing\(MemCached\) enabled number of words are 10 ) s
5 632 M
(and 40. Corresponding runtimes are:) s
5 621 M
(--------------) s
5 610 M
(10 words) s
5 599 M
(--------------) s
5 588 M
(n=1) s
5 577 M
(d=10) s
5 566 M
(s=constant) s
5 555 M
(tmax=2 \(depth 2 recursion\)) s
5 544 M
(cpus=2 \(dual core\)) s
5 533 M
(Runtime = 7 minutes = k*10*\(s\)^2/2) s
5 522 M
(--------------) s
5 511 M
(40 words) s
5 500 M
(--------------) s
5 489 M
(n=1) s
5 478 M
(d=40) s
5 467 M
(s=constant) s
5 456 M
(tmax=2 \(depth 2 recursion\)) s
5 445 M
(cpus=2 \(dual core\)) s
5 434 M
(Runtime = 28 minutes = k*40*\(s\)^2/2) s
5 423 M
(Ratio is 7/28 = k*10*\(s\)^2/2/k*40*\(s\)^2/2 = 0.25 a linear scaling in number of words which ) s
5 412 M
(substantiates the theoretical bound. If cluster scales on number of words and documents \(e.) s
5 401 M
(g logd and logn\) this should have non-linear asymptotic scaling. Maximum number of words pe) s
5 390 M
(r document can be an assumption and set to a harcoded large number. If number of web docume) s
5 379 M
(nts versus number of keywords follow a Gaussian Normal distribution i.e a small fraction of) s
5 368 M
( documents have high number of words while the tails have less number of keywords, cluster ) s
5 357 M
(prescales on a function of mean which is apriori known by a heuristic. Above excludes the c) s
5 346 M
(rawling time per webpage - crawling does not build linkgraph.) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(---------------------------------) s
5 302 M
(259. \(THEORY\) Major update to Computational Geometric PRAM-NC algorithm for Discrete Hyperb) s
5 291 M
(olic Factorization) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(---------------------------------) s
5 258 M
(PRAM-NC Algorithm for Discrete Hyperbolic Factorization in 34 above:) s
5 236 M
(        34.1 LaTeX - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPo) s
5 225 M
(lylogarithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_u) s
5 214 M
(pdateddraft.tex/download) s
5 203 M
(        34.2 PDF - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPoly) s
5 192 M
(logarithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_upd) s
5 181 M
(ateddraft.pdf/download) s
5 159 M
(internally relies on [BerkmanSchieberVishkin] and other All Nearest Smaller Values PRAM alg) s
5 148 M
(orithms for merging sorted tesselated hyperbolic arc segments which is then binary searched) s
5 137 M
( to find a factor. There are some older alternatives to merging sorted lists other than All) s
5 126 M
( Nearest Smaller Values which require more processors. Section 2.4 in [RichardKarp-VijayaRa) s
5 115 M
(machandran] on "Sorting, Merging and Selection" in PRAM where input is an array of O\(N=n\) e) s
5 104 M
(lements, describes some standard PRAM algorithms, gist of which is mentioned below \(https:/) s
5 93 M
(/www.eecs.berkeley.edu/Pubs/TechRpts/1988/5865.html\):) s
5 71 M
(        259.1\) There are 3 parallel computing models - Parallel Comparisons, Comparator Sor) s
5 60 M
(ting Networks and PRAMs) s
5 49 M
(        259.2\) Section 2.4.1 on merging two increasing sequences of length n and m, n <= m ) s
5 38 M
(in Page 19 gives an algorithm of O\(loglogN\) steps on O\(n+m\) CREW PRAM processors. This cons) s
5 27 M
(tructs a merge tree bottom-up to merge two sorted lists. For merging more than 2 lists, req) s
5 16 M
(uires logarithmic additional parallel steps.) s
5 5 M
(        259.3\) Section 2.4.2 describes Batcher's and [AjtaiKomlosSzmeredi] Bitonic Sort alg) s
_R
S
%%Page: (131) 131
%%BeginPageSetup
_S
18 36 translate
/pagenum 131 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (131) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(orithm which sorts n elements in O\(\(logn\)^2\) time with n/2 processors.) s
5 731 M
(        259.4\) Section 2.4.3 describes Cole's PRAM sorting algorithm which requires O\(logn\)) s
5 720 M
( steps and O\(n\) PRAM processors.) s
5 698 M
(Advantage of these older algorithms is they are implementable e.g Bitonic sort - https://en) s
5 687 M
(.wikipedia.org/wiki/Bitonic_sorter, http://www.nist.gov/dads/HTML/bitonicSort.html. Replaci) s
5 676 M
(ng [BerkmanSchieberVishkin] in ANSV sorted tile merge for discrete hyperbolic factorization) s
5 665 M
( with older algorithms like bitonic parallel sorting networks would require more processors) s
5 654 M
( but still be in NC though not PRAM.) s
5 632 M
(References:) s
5 621 M
(----------) s
5 610 M
(259.1 Bitonic Sorting - https://cseweb.ucsd.edu/classes/wi13/cse160-a/Lectures/Lec14.pdf) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(-----------) s
5 566 M
(260. Commits as on 10 April 2016) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-----------) s
5 533 M
(Complement Function script updated with a new function to print Ihara Identity zero imagina) s
5 522 M
(ry parts mentioned in) s
5 511 M
(Complement Function extended draft:) s
5 500 M
(        1. https://sourceforge.net/p/asfer/code/HEAD/tree/asfer-docs/AstroInferDesign.txt) s
5 489 M
(        2. https://github.com/shrinivaasanka/asfer-github-code/blob/master/asfer-docs/Astro) s
5 478 M
(InferDesign.txt) s
5 456 M
(Logs for this included in python-src/testlogs/) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(------------) s
5 412 M
(261. Commits \(1\) as on 12 April 2016) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(------------) s
5 379 M
(\(FEATURE-DONE\) Implementation for NC Discrete Hyperbolic Factorization with Bitonic Sort al) s
5 368 M
(ternative \(in lieu of unavailable PRAM implementations\):) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(----------------------------------------) s
5 335 M
(Bitonic Merge Sort Implementation of:) s
5 324 M
(         - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarith) s
5 313 M
(micSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraf) s
5 302 M
(t.tex/download) s
5 291 M
(         - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarith) s
5 280 M
(micSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraf) s
5 269 M
(t.pdf/download) s
5 236 M
(- Bitonic Sort is O\(\(logn\)^2\) and theoretically in NC) s
5 225 M
(- Bitonic Sort requires O\(n^2logn\) parallel comparators. Presently this parallelism is limi) s
5 214 M
(ted to parallel) s
5 203 M
(exchange of variables in bitonic sequence for which python has builtin support \(bitonic_com) s
5 192 M
(pare\(\)\) - internally how it performs on) s
5 181 M
(multicore archs is not known.) s
5 170 M
(- a shell script has been added which does the following \(cpp-src/miscellaneous/DiscreteHyp) s
5 159 M
(erbolicFactorizationUpperbound_Bitonic.sh\):) s
5 148 M
(        - NC Factorization implementation with Bitonic Sort is C+++Python \(C++ and Python\)) s
5 137 M
(        - C++ side creates an unsorted mergedtiles array for complete tesselated hyperbolic) s
5 126 M
( arc) s
5 115 M
(\(cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.cpp\)) s
5 104 M
(        - This mergedtiles is captured via output redirection and awk in a text file) s
5 93 M
(cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.mergedtiles) s
5 82 M
(        - Python bitonic sort implementation which is a modified version of algorithm in ht) s
5 71 M
(tps://en.wikipedia.org/wiki/Bitonic_sorter) s
5 60 M
(requires the size of the array to be sorted in exponents of 2. Presently it is hardcoded as) s
5 49 M
( array of size 16384 - 2^16) s
5 38 M
(\(python-src/DiscreteHyperbolicFactorizationUpperbound_Bitonic.py\). It outputs the sorted ar) s
5 27 M
(ray. Vacant elements in array are zero-filled) s
5 5 M
(- Binary and logs for C++ and Python side have been committed) s
_R
S
%%Page: (132) 132
%%BeginPageSetup
_S
18 36 translate
/pagenum 132 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (132) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- Parallel comparators on large scale require huge cloud of machines per above bound which ) s
5 731 M
(makes it NC.) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(------------) s
5 698 M
(Commits \(2\) as on 12 April 2016) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(------------) s
5 665 M
(- Compare step in Bitonic Sort for merged tiles has been Spark MapReduced with this separat) s
5 654 M
(e script - ../python-src/DiscreteHyperbolicFactorizationUpperbound_Bitonic_Spark.py. Can be) s
5 643 M
( used only in a large cluster.  With this comparators are highly parallelizable over a clou) s
5 632 M
(d and thus in NC.) s
5 610 M
(References:) s
5 599 M
(-----------) s
5 588 M
(261.1 Parallel Bitonic Sort - http://www.cs.utexas.edu/users/plaxton/c/337/05s/slides/Paral) s
5 577 M
(lelRecursion-1.pdf) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(------------) s
5 533 M
(262. Commits as on 13 April 2016) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(------------) s
5 500 M
(Spark Bitonic Sort - Imported BiDirectional Map - bidict - for reverse lookup \(for a value,) s
5 489 M
( lookup a key in addition to for a key, ) s
5 478 M
(lookup a value\) which is required to avoid the looping through of all keys to match against) s
5 467 M
( a tile element.) s
5 445 M
(-------------------------------------------------------------------------------------) s
5 434 M
(263. Commits as on 27 April 2016) s
5 423 M
(-------------------------------------------------------------------------------------) s
5 412 M
(  Interim Commits for ongoing investigation of a race condition in Spark MapReduce for NC F) s
5 401 M
(actorization with Bitonic Sort :) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(------------------------------) s
5 368 M
(- The sequential version of bitonic sort has been updated to do away with usage of boolean ) s
5 357 M
(flag up by 2 compare functions for True and False) s
5 346 M
(- Spark NC implementation of Bitonic Sort for Factorization still has some strange behaviou) s
5 335 M
(r in sorting. In progress commits for this do) s
5 324 M
(following in Compare-And-Exchange phase:) s
5 313 M
(        - Comparator code has been rewritten to just do comparison of parallelized RDD set ) s
5 302 M
(of tuples where each tuple is of the form:) s
5 291 M
(                \(i, i+midpoint\)) s
5 280 M
(        - This comparison returns a set of boolean flags collect\(\)ed in compare\(\)) s
5 269 M
(        - The variable exchange is done sequentially at each local node.) s
5 258 M
(        - This is because Spark documentation advises against changing global state in work) s
5 247 M
(er nodes \(though there are exceptions in accumulator\)) s
5 236 M
(        - There were some unusual JVM out of memory crashes, logs for which have been commi) s
5 225 M
(tted) s
5 214 M
(        - some trivial null checks in complement.py) s
5 203 M
(        - Bitonic Sort presents one of the most non-trivial cases for parallelism - paralle) s
5 192 M
(l variable compare-and-exchange to be specific) s
5 181 M
(and present commits are a result of few weeks of tweaks and trial-errors.) s
5 170 M
(        - Still the race condition is observed in merge which would require further commits) s
5 159 M
(.) s
5 137 M
(------------------------------------------------------------------------------------) s
5 126 M
(264. Commits as on 28 April 2016) s
5 115 M
(------------------------------------------------------------------------------------) s
5 104 M
(Interim commits 2 for ongoing investigation of race conditions in Spark Bitonic Sort:) s
5 93 M
(--------------------------------------------------------------------------------------) s
5 82 M
(        - bidict usage has been removed because it requires bidirectional uniqueness, there) s
5 71 M
( are better alternatives) s
5 60 M
(        - The variable exchange code has been rewritten in a less complicated way and just ) s
5 49 M
(mimicks what sequential version does) s
5 38 M
(in CompareAndExchange phase.) s
5 27 M
(        - logs for Sequential version has been committed) s
5 16 M
(        - number to factor has been set to an example low value) s
5 5 M
(        - .coordinates and .mergedtiles files have been regenerated) s
_R
S
%%Page: (133) 133
%%BeginPageSetup
_S
18 36 translate
/pagenum 133 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (133) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        - Still the race condition remains despite being behaviourally similar to sequentia) s
5 731 M
(l version except the parallel comparator array returned by mapreduce) s
5 720 M
(        - Parallel comparator preserves immutability in local worker nodes) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(-------------------) s
5 676 M
(265. \(THEORY\) UGC\(Unique Games Conjecture\) and Special Case of Percolation-Majority Voting ) s
5 665 M
(Circuits) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(-------------------) s
5 632 M
(265.1 Unique Games Conjecture by [SubhashKhot] is a conjecture about hardness of approximat) s
5 621 M
(ing certain constraint satisfaction problems. It states that complexity of obtaining polyno) s
5 610 M
(mial time approximation schemes for specific class of constraint satisfaction NP-hard probl) s
5 599 M
(ems is NP-hard itself i.e polytime approximation is NP-hard. From section 255 above, if in ) s
5 588 M
(a special case percolation with sampling of left-right points on percolation grids results ) s
5 577 M
(in logarithmic advice, then percolation is in NC/log. Thus if RHS has 100% stable NP-hard v) s
5 566 M
(oting function then NP is in NC/log implying NP is in P/log and P=NP. This disproves UGC tr) s
5 555 M
(ivially because all NP problems have P algorithms. But this disproof depends on strong assu) s
5 544 M
(mptions that percolation has NC/log circuit and RHS of Majority voting is 100% noise stable) s
5 533 M
(. There are already counterexamples showing divergence of RHS in sections 53.16.3.1 and 256) s
5 522 M
(.) s
5 511 M
(265.2 Voter Boolean Functions can be written as :) s
5 500 M
(        265.2.1 Integer Linear Programs : Voter Judging Boolean Functions are translated in) s
5 489 M
(to an Integer Linear Program, binary to be precise because value for variable and final vot) s
5 478 M
(e is 0, 1 and -1\(abstention\). This readily makes any decision process by individual voter t) s
5 467 M
(o be NP-hard.) s
5 456 M
(        265.2.2 and Constraint Satisfaction Problems : Voter expects significant percentage) s
5 445 M
( of constraints involving variables to be satisfied while voting for a candidate which brin) s
5 434 M
(gs the majority voting problem into the UGC regime. Approximating the result of an Election) s
5 423 M
( mentioned in Section 14 is thus reducible to hardness of approximation of constraint satis) s
5 412 M
(faction and could be NP-hard if UGC is true.) s
5 401 M
(265.3 Thus RHS of Majority Voting Circuit becomes a functional composition behemoth of inde) s
5 390 M
(finite number of individual voter constraint and integer linear programs. There is a generi) s
5 379 M
(c concept of sensitivity of a non-boolean function mentioned in [Williamson-Schmoys] which ) s
5 368 M
(can be applied to sensitivity and stability of a voter integer linear program and constrain) s
5 357 M
(t program.) s
5 346 M
(265.4 Approximating outcome of a majority voting \(e.g. real life pre/post poll surveys\) dep) s
5 335 M
(ends thus on following factors:) s
5 324 M
(        265.4.1 Correctness - Ratio preserving sample - How reflective the sample is to rea) s
5 313 M
(l voting pattern e.g a 60%-40% vote division in reality should be reflected by the sample.) s
5 302 M
(        265.4.2 Hardness - Approximation of Constraint Satisfaction Problems and UGC.) s
5 280 M
(References:) s
5 269 M
(-----------) s
5 258 M
(265.4 Unique Games Conjecture and Label Cover - https://en.wikipedia.org/wiki/Unique_games_) s
5 247 M
(conjecture) s
5 236 M
(265.5 Design of Approximation Algorithms - Page 442 - http://www.designofapproxalgs.com/boo) s
5 225 M
(k.pdf) s
5 203 M
(-------------------------------------------------------------------------) s
5 192 M
(266. Commits 1 as on 29 April 2016) s
5 181 M
(-------------------------------------------------------------------------) s
5 170 M
(Interim commits 3 for Bitonic Sort Spark NC Factorization Implementation) s
5 159 M
(-------------------------------------------------------------------------) s
5 148 M
(- AsFer Design Document updated for already implemented NVIDIA CUDA Parallel C reference co) s
5 137 M
(de for bitonic sort on hypercube) s
5 126 M
(- Bitonic Sort C++ code updated for max size of sort array - reduced from 16384 to 256) s
5 115 M
(- Bitonic Sort Python Spark implementation updated for returning a tuple containing index i) s
5 104 M
(nfo also instead of plain boolean value ) s
5 93 M
(because Spark collect\(\) after a comparator map\(\) does not preserve order and index informat) s
5 82 M
(ion was lost.) s
5 71 M
(- if clauses in exchange phase have been appropriately changed) s
5 60 M
(- Still there are random mysterious jumbled tuples which will be looked into in future comm) s
5 49 M
(its) s
5 38 M
(- This implementation becomes redundant because of already existing better NVIDIA CUDA Para) s
5 27 M
(llel C implementation and ) s
5 16 M
(is of academic interest only.) s
_R
S
%%Page: (134) 134
%%BeginPageSetup
_S
18 36 translate
/pagenum 134 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (134) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(----------------------------------------------------------------------------) s
5 731 M
(Final commits for Bitonic Sort Spark NC Factorization Implementation) s
5 720 M
(----------------------------------------------------------------------------) s
5 709 M
(- Indeed Bitonic Sort from previous commit itself works without any issues.) s
5 698 M
(- Nothing new in this except reduced sort array of size just 64 for circumventing frequent ) s
5 687 M
(Py4Java Out of Memory errors and for quick runtime) s
5 676 M
(- Logs for this have been committed in testlogs/) s
5 665 M
(- the debug line "merged sorted halves" is the final sorted tiles array) s
5 654 M
(- .coordinates and .mergedtiles files have been updated) s
5 632 M
(----------------------------------------------------------------------------) s
5 621 M
(267. Commits as on 30 April 2016) s
5 610 M
(----------------------------------------------------------------------------) s
5 599 M
(- Printed return value of bitonic_sort\(\) in sorted. Earlier it was wrongly printing globalm) s
5 588 M
(ergedtiles a global state which is not changed) s
5 577 M
(anymore) s
5 566 M
(- logs for bitonic sort of tesselated hyperbolic arc) s
5 544 M
(----------------------------------------------------------------------------) s
5 533 M
(268. Commits as on 1 May 2016) s
5 522 M
(----------------------------------------------------------------------------) s
5 511 M
(- The Map step now does both Compare and Exchange within local worker nodes for each closur) s
5 500 M
(e and result is returned in tuples) s
5 489 M
(- The driver collect\(\)s and just assigns the variables based on comparator boolean field in) s
5 478 M
( tuple which are already exchanged within ) s
5 467 M
(local worker) s
5 445 M
(--------------------------------------------------------------------------------------) s
5 434 M
(269. Commits as on 2 May 2016) s
5 423 M
(-------------------------------------------------------------------------------------) s
5 412 M
(Accumulator support for Bitonic Sort mapreduce globalmergedtiles) s
5 401 M
(-------------------------------------------------------------------------------------) s
5 390 M
(- Spark context has been parametrized and is passed around in the recursion so that single ) s
5 379 M
(spark context keeps track of the) s
5 368 M
(accumulator variables) s
5 357 M
(- globalmergedtiles_accum is the new accumulator variable which is created in driver and us) s
5 346 M
(ed for storing distributed mutable globalmergedtiles) s
5 335 M
(- AccumulatorParam has been overridden for Vectors as globals) s
5 324 M
(- Spark does not permit however, at present, mutable global state within worker tasks and o) s
5 313 M
(nly driver creates the accumulator variables which can only be incrementally extended withi) s
5 302 M
(n closure workers.) s
5 291 M
(- muting or accessing accumulator.value within worker raises Exception: Can't access value ) s
5 280 M
(of accumulator in worker tasks) s
5 269 M
(- Logs for above have been committed to testlogs/) s
5 258 M
(- Because of above limitation of Spark in global mutability, accumulator globalmergedtiles ) s
5 247 M
(is updated only outside the Spark mapreduce closures.) s
5 236 M
(- Support for global mutables, if Spark has it, would make compare-and-exchange phase close) s
5 225 M
(r in behaviour to an NVIDIA Parallel bitonic sort.) s
5 214 M
(- Documentation on this necessary feature is scarce and some suggest use of datastores like) s
5 203 M
( Tachyon/Alluxio for distributed shared mutables) s
5 192 M
(which is non-trivial. This cloud parallel sort implementation achieves thus almost ~90% of ) s
5 181 M
(NVIDIA CUDA parallel bitonic sort -) s
5 170 M
(CompareAndExchange is done in parallel but assigning CompareAndExchange results is done seq) s
5 159 M
(uentially.) s
5 137 M
(--------------------------------------------------------------------------------------) s
5 126 M
(270. Commits as on 3 May 2016) s
5 115 M
(--------------------------------------------------------------------------------------) s
5 104 M
(New threading function assign_compareexchange_multithreaded\(\) has been implemented which is) s
5 93 M
(invoked in lieu of sequential for loop assignment , by creating a thread for each pair of \() s
5 82 M
(i,i+midpoint\) compare-exchange assignment) s
5 71 M
(of accumulator globalmergedtiles.This thread function assigns the Spark Mapreduce result of) s
5 60 M
( Compare and Exchange.) s
5 38 M
(Mulithreading is an alternative for global state mutability in the absence of Spark support) s
5 27 M
(and it does not require any third party in-memory cacheing products.) s
5 5 M
(Coordinates are also shuffled first few elements of which correspond to number to factor N ) s
_R
S
%%Page: (135) 135
%%BeginPageSetup
_S
18 36 translate
/pagenum 135 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (135) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- these are) s
5 731 M
(the factors found finally. Multithreaded assignment maps to a multicore parallelism. Logs f) s
5 720 M
(or this have been) s
5 709 M
(committed to testlogs with and without Coordinates Shuffling.) s
5 687 M
(--------------------------------------------------------------------------------------) s
5 676 M
(271. Commits 2 as on 3 May 2016) s
5 665 M
(--------------------------------------------------------------------------------------) s
5 654 M
(Number to factorize has been changed to 147. The mergedtiles array has been set to size 256) s
5 643 M
(. The logs for this have been committed in testlogs/.  The factors are printed in last few ) s
5 632 M
(lines of the logs in shuffled globalcoordinates corresponding to 147 in sorted globalmerged) s
5 621 M
(tiles accumulator:) s
5 599 M
(sorted= [147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 146, 146, 146, 14) s
5 588 M
(6, 146, 146, 146, 145, 145, 145, 145, 145, 145, 144, 144, 144, 144, 144, 144, 144, 144, 144) s
5 577 M
(, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,) s
5 566 M
( 144, 144, 143, 143, 143, 143, 143, 142, 142, 142, 142, 141, 141, 141, 141, 141, 140, 140, ) s
5 555 M
(140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 139, 138, 138, 1) s
5 544 M
(38, 138, 138, 138, 138, 138, 138, 137, 136, 136, 136, 136, 136, 136, 136, 136, 135, 135, 13) s
5 533 M
(5, 135, 135, 135, 135, 135, 135, 134, 134, 133, 133, 133, 132, 132, 132, 132, 132, 132, 132) s
5 522 M
(, 132, 132, 132, 132, 132, 131, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 128, 128,) s
5 511 M
( 128, 128, 128, 128, 127, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 125, 125, 125, ) s
5 500 M
(124, 124, 124, 124, 123, 123, 123, 122, 122, 121, 120, 120, 120, 120, 120, 120, 120, 120, 1) s
5 489 M
(19, 118, 118, 117, 117, 117, 116, 116, 116, 116, 115, 114, 114, 114, 114, 113, 112, 112, 11) s
5 478 M
(1, 111, 111, 110, 110, 109, 108, 108, 108, 108, 107, 106, 106, 105, 104, 104, 103, 102, 102) s
5 467 M
(, 101, 100, 100, 99, 98, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82) s
5 456 M
(, 81, 80, 79, 79, 78, 78, 77, 77, 76, 76, 75, 75, 74, 74, 73, 0, None]) s
5 445 M
(globalcoordinates= [1, 21, 21, 49, 49, 7, 147, 147, 3, 3, 3, 3, 7, 73, 73, 147, 2, 2, 145, ) s
5 434 M
(2, 144, 5, 5, 29, 29, 5, 24, 16, 16, 9, 8, 24, 18, 18, 6, 6, 6, 143, 2, 2, 3, 4, 4, 4, 3, 3) s
5 423 M
(, 4, 8, 71, 12, 36, 47, 9, 36, 12, 142, 13, 13, 11, 11, 2, 70, 141, 2, 3, 3, 140, 3, 46, 34) s
5 412 M
(, 14, 7, 139, 2, 27, 14, 10, 10, 69, 19, 5, 7, 4, 4, 4, 5, 138, 45, 22, 68, 3, 137, 2, 6, 6) s
5 401 M
(, 3, 136, 2, 33, 16, 67, 135, 4, 4, 8, 3, 3, 5, 134, 5, 9, 14, 26, 44, 66, 133, 7, 132, 18,) s
5 390 M
( 65, 4, 3, 3, 4, 6, 43, 11, 131, 32, 21, 10, 130, 129, 5, 12, 25, 9, 64, 3, 3, 42, 128, 7, ) s
5 379 M
(127, 4, 31, 15, 63, 126, 8, 41, 13, 62, 6, 3, 5, 125, 17, 20, 24, 5, 124, 61, 30, 123, 4, 3) s
5 368 M
(, 122, 40, 60, 121, 120, 3, 4, 59, 39, 23, 29, 119, 4, 118, 117, 58, 38, 3, 116, 115, 3, 28) s
5 357 M
(, 57, 114, 113, 37, 3, 56, 112, 55, 111, 110, 3, 36, 109, 54, 108, 53, 107, 2, 35, 106, 52,) s
5 346 M
( 105, 104, 51, 103, 102, 101, 50, 100, 49, 99, 98, 48, 97, 96, 95, 94, 93, 92, 91, 90, 89, ) s
5 335 M
(88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 1, 78, 77, 1, 76, 1, 1, 75, 74, 1, 73, 1, 72, 146, ) s
5 324 M
(None]) s
5 313 M
(sorted globalmergedtiles accumulator version:  =  [147, 147, 147, 147, 147, 147, 147, 147, ) s
5 302 M
(147, 147, 147, 147, 147, 146, 146, 146, 146, 146, 146, 146, 145, 145, 145, 145, 145, 145, 1) s
5 291 M
(44, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 14) s
5 280 M
(4, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 143, 143, 143, 143, 143, 142, 142, 142) s
5 269 M
(, 142, 141, 141, 141, 141, 141, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,) s
5 258 M
( 140, 140, 140, 140, 140, 139, 138, 138, 138, 138, 138, 138, 138, 138, 138, 137, 136, 136, ) s
5 247 M
(136, 136, 136, 136, 136, 136, 135, 135, 135, 135, 135, 135, 135, 135, 135, 134, 134, 133, 1) s
5 236 M
(33, 133, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 131, 130, 130, 130, 13) s
5 225 M
(0, 130, 130, 129, 129, 129, 129, 128, 128, 128, 128, 128, 128, 127, 126, 126, 126, 126, 126) s
5 214 M
(, 126, 126, 126, 126, 126, 125, 125, 125, 124, 124, 124, 124, 123, 123, 123, 122, 122, 121,) s
5 203 M
( 120, 120, 120, 120, 120, 120, 120, 120, 119, 118, 118, 117, 117, 117, 116, 116, 116, 116, ) s
5 192 M
(115, 114, 114, 114, 114, 113, 112, 112, 111, 111, 111, 110, 110, 109, 108, 108, 108, 108, 1) s
5 181 M
(07, 106, 106, 105, 104, 104, 103, 102, 102, 101, 100, 100, 99, 98, 98, 97, 96, 95, 94, 93, ) s
5 170 M
(92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 79, 78, 78, 77, 77, 76, 76, 75, 75,) s
5 159 M
( 74, 74, 73, 0, None]) s
5 148 M
(16/05/03 18:33:06 INFO SparkUI: Stopped Spark web UI at http://192.168.1.101:4040) s
5 137 M
(16/05/03 18:33:06 INFO DAGScheduler: Stopping DAGScheduler) s
5 126 M
(16/05/03 18:33:06 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopp) s
5 115 M
(ed!) s
5 93 M
(----) s
5 82 M
(Factors of 147 are [1,21,49,7,147,3] from globalcoordinates and globalmergedtiles\(correspon) s
5 71 M
(ding to 147 elements\) printed previously in logs.) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(----) s
5 27 M
(272. \(THEORY\) Integer Partitions, Riemann Sums, Multipartisan Majority Voting - a special c) s
5 16 M
(ase) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (136) 136
%%BeginPageSetup
_S
18 36 translate
/pagenum 136 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (136) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(----) s
5 731 M
(From https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.pdf, Intege) s
5 720 M
(r Partitions when visualized as area under a curve) s
5 709 M
(in discrete sense, correspond to Riemann Sums Discrete Area Integral i.e Each part in the p) s
5 698 M
(artition slices the area under a curve formed) s
5 687 M
(by topmost points of each part in partition. This curve can be perturbed to arbitrary shape) s
5 676 M
( without altering the area underneath it - in other) s
5 665 M
(words each perturbed curve corresponds to a partition of N where N is the area integral val) s
5 654 M
(ue for the curve. A striking analogy: a vessel containing water is perturbed and the surfac) s
5 643 M
(e of the liquid takes arbitrary curvature shapes but the volume of the liquid remains uncha) s
5 632 M
(nged \(assuming there is no spillover\) - has some similarities to perturbation of spacetime ) s
5 621 M
(Riemannian Manifolds due to gravity in General Relativity. This analogy simulates a 3-dimen) s
5 610 M
(sional partition number \(as against the usual 2-dimensional\) of liquid of volume V. Let p3\() s
5 599 M
(V\) denote the 3-dimensional partition of a liquid of volume V. It makes sense to ask what i) s
5 588 M
(s the bound for p3\(V\). For example a snapshot of the curvature of liquid surface be the fun) s
5 577 M
(ction f. A slight perturbation changes this function to f' preserving the volume. Hence f a) s
5 566 M
(nd f' are 2 different partitions of the V - the difference is these are continuous partitio) s
5 555 M
(ns and not the usual discrete integer partitions with distinct parts. Number of such pertur) s
5 544 M
(bations are infinite - there are infinitely many f=f'=f''=f'''=f''''=f''''' .... = V and he) s
5 533 M
(nce p3\(V\) is infinite \(proof is by diagonalization: an arbitrary point of the curve on the ) s
5 522 M
(continuum can be changed and this recursively continues indefinitely\). As any perturbation ) s
5 511 M
(can be linked to a \(pseudo\)random source, p3\(V\) is equivalent to number of pseudorandom per) s
5 500 M
(mutations \(randomness extracted from some entropy source\). p3\(V\) can be extended to arbitra) s
5 489 M
(ry dimensions n as pn\(V\). This generalized hash functions and also majority voting to conti) s
5 478 M
(nuous setting - though it is to be defined what it implies by voting in continuous populati) s
5 467 M
(on visavis discrete. In essence, Multipartisan Majority Voting = Hash Functions = Partition) s
5 456 M
(s in both discrete and continuous scenarios.) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(----) s
5 412 M
(273. Commits as on 4 May 2016) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(----) s
5 379 M
(Sequence Mining of Prime Numbers as binary strings) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(----) s
5 346 M
(- First 10000 prime numbers have been written to a text file in binary notation in compleme) s
5 335 M
(nt.py) s
5 324 M
(- SequenceMining.py mines for most prominent sequences within prime binary strings - a meas) s
5 313 M
(ure of patterns in prime distribution) s
5 302 M
(- Logs for this have been committed to testlogs/) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(----) s
5 258 M
(274. Commits as on 11 May 2016) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(----) s
5 225 M
(Sequence Mining in Prime binary strings has been made sophisticated:) s
5 214 M
(        - Prints each binary string sequence pattern in decimals upto maximum of 15-bit seq) s
5 203 M
(uences mined from first 10000 primes.) s
5 192 M
(        - This decimals are written to a file PatternInFirst10000Primes.txt) s
5 181 M
(        - Approx.py R+rpy2 has been invoked to print an R function plotter of this decimal ) s
5 170 M
(pattern in prime binary string sequences) s
5 159 M
(        - The function plots the sequences in Y-axis and length of sequences in asscending ) s
5 148 M
(orider in X-axis\(with decreasing support\)) s
5 137 M
(        - As can be seen from pdf plot, the sequences show dips amongst peaks periodically.) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-----------------------------------------------------) s
5 93 M
(275. \(THEORY\) Non-boolean Social Choice Functions Satisfiability, Sensitivity, Stability an) s
5 82 M
(d Multipartisan Majority Voting - 256 continued) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(-----------------------------------------------------) s
5 49 M
(Let f be a voter decision function which takes in x1,x2,...xm as decision variables and out) s
5 38 M
(puts a vote for candidate 1 <= c <= n. This) s
5 27 M
(generalizes voter boolean judging functions for 2 candidates to arbitrarily large number of) s
5 16 M
( contestants. Assuming f to be continuous) s
5 5 M
(function and parameters to be continuous \(as opposed to discrete binary string SAT assignme) s
_R
S
%%Page: (137) 137
%%BeginPageSetup
_S
18 36 translate
/pagenum 137 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (137) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(nts to variables in boolean setting\), this) s
5 731 M
(generalizes Satisfiability problem to continuous, multivalued and non-boolean functions. Th) s
5 720 M
(is allows the candidate index to be) s
5 709 M
(continuous too. The function plot of this \(candidate index versus decision string\) would re) s
5 698 M
(semble any continuous mathematical function.) s
5 687 M
(Stability which is: Pr[f\(s\) == f\(t\)] - Pr[f\(s\) != f\(t\)] for randomly correlated s=\(x11,x12,) s
5 676 M
(...,x1m\) and t=\(x21,x22,x23,...,x2m\) where) s
5 665 M
(correlation \(measured by usual euclidean distance between s and t\) could be uncomputable va) s
5 654 M
(lue in terms of mean but can be approximated) s
5 643 M
(as difference in ratio of length integral of function arc segments with high curvature and ) s
5 632 M
(low curvature \(where function has huge fluctuations) s
5 621 M
(and relatively flat\).  Sensitivity follows accordingly. This requires first derivative of t) s
5 610 M
(he function to find out local maxima and minima.) s
5 599 M
(From Gibbard-Satterthwaite theorem any social choice function for more than 3 candidates ha) s
5 588 M
(s a non-zero probability of being manipulated though) s
5 577 M
(negligible in practice. Probably this implies atleast indirectly that the stability of any ) s
5 566 M
(non-boolean social choice function < 1 if number of) s
5 555 M
(candidates > 3 hinting at divergence of Pr\(Good\) Binomial series. This function plot should) s
5 544 M
( not be confused with function plot mentioned in) s
5 533 M
(272 for votes partitioned across candidates which reduces to Riemann Sum. Unlike boolean se) s
5 522 M
(nsitivity/stability, non-boolean counterparts) s
5 511 M
(can only be approximated and exact computation might never halt being undecidable. Non-bool) s
5 500 M
(ean Social Choice Function generalizes) s
5 489 M
(satisfiability because an appropriate assignment to \(x1,x2,x3,.....,xm\) has to be found so ) s
5 478 M
(that f\(x1,x2,x3,.....,xm\)=c where 1 <= c <= n.) s
5 467 M
(This is precisely curve-line intersection problem - curve f\(x1,x2,x3,...,xn\) and line y=c -) s
5 456 M
( in computational geometry. Intersecting points) s
5 445 M
(\(a1,a2,a3,...,az\) are the satisfying assignments which choose candidate c. Contrasting this) s
5 434 M
( with boolean kSAT which is NP-complete,) s
5 423 M
(non-boolean kSAT has polynomial time computational geometric algorithms to find satisfying ) s
5 412 M
(intersection points. It is intriguing to observe) s
5 401 M
(a sharp threshold phenomenon in computational hardness of satisfiability - an easy polytime) s
5 390 M
( non-boolean kSAT becomes NP-hard boolean kSAT.) s
5 379 M
(Assuming that real-life voters have non-boolean decision functions only, the RHS circuit of) s
5 368 M
( Pr\(Good\) majority voting is confined to polytime) s
5 357 M
(satisfiability realm alone. Non-boolean voting decision functions can be specialized for 2 ) s
5 346 M
(candidates special case too - this allows fractional) s
5 335 M
(values to decision variables. This is plausible because Linear Programming \(non-boolean\) is) s
5 324 M
( polytime while 0-1 Integer Linear Programming) s
5 313 M
(\(boolean\) is NP-complete. Because of Non-boolean Social Choice functions \(e.g Linear Progra) s
5 302 M
(ms with Constraints which each voter solves\) being the most generic which allow fractional ) s
5 291 M
(values to variables, any of the standard polytime Simplex algorithms - Dantzig Pivot Tablea) s
5 280 M
(u and Karmarkar Interior Point Method - can be applied to find a satisfying assignment. Vot) s
5 269 M
(er decides to vote for/againt when the solution to LP is above/below a threshold. This is a) s
5 258 M
( far from real,hypothetical,perfectly rational election setting. Real life elections have b) s
5 247 M
(ounded rationality. It is an alternative to Computational Geometric intersection detection ) s
5 236 M
(previously mentioned.) s
5 214 M
(References:) s
5 203 M
(----------) s
5 192 M
(275.1 Intersection detection - https://www.cs.umd.edu/~mount/Papers/crc04-intersect.pdf) s
5 181 M
(275.2 Transversal Intersection of two curves - Newton iteration and Cramer's rule - https:/) s
5 170 M
(/en.wikipedia.org/wiki/Intersection_\(Euclidean_geometry\)) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(-------------------------------) s
5 126 M
(276. \(FEATURE-DONE\) Commits as on 30 May 2016 - Continued from 220) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-------------------------------) s
5 93 M
(VIRGO CloudFS system calls have been added \(invoked by unique number from syscall_32.tbl\) f) s
5 82 M
(or C++ Boost::Python interface to) s
5 71 M
(VIRGO Linux System Calls. Switch clause with a boolean flag has been introduced to select e) s
5 60 M
(ither VIRGO memory or filesystem calls.) s
5 49 M
(kern.log and CloudFS textfile Logs for VIRGO memory and filesystem invocations from AsFer p) s
5 38 M
(ython have been committed to testlogs/) s
5 27 M
( ) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(-------------------------------) s
_R
S
%%Page: (138) 138
%%BeginPageSetup
_S
18 36 translate
/pagenum 138 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (138) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(277. \(FEATURE-DONE\) Commits as on 31 May 2016 - Continued from 220 and 276) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-------------------------------) s
5 709 M
(Python CAPI interface to NEURONRAIN VIRGO Linux System Calls has been updated to include Fi) s
5 698 M
(le System open, read, write primitives also.) s
5 687 M
(Rebuilt extension binaries, kern.logs and example appended text file have been committed to) s
5 676 M
( testlogs/. This is exactly similar to) s
5 665 M
(commits done for Boost::Python C++ interface. Switch clause has been added to select memory) s
5 654 M
( or filesystem VIRGO syscalls.) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(------------------------------) s
5 610 M
(278. \(FEATURE-DONE\) Commits as on 7 June 2016) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(------------------------------) s
5 577 M
(- getopts implementation for commandline args parsing has been introduced in Maitreya textc) s
5 566 M
(lient rule search python script.) s
5 555 M
(- an example logs for possible high precipitation longitude/latitudes in future dates - Jul) s
5 544 M
(y 2016 - predicted by sequence mining learnt) s
5 533 M
(rules from past data has been added to testlogs/) s
5 522 M
( ) s
5 511 M
(root@shrinivaasanka-Inspiron-1545:/home/shrinivaasanka/Maitreya7_GitHub/martin-pe/maitreya7) s
5 500 M
(/releases/download/v7.1.1/maitreya-7.1.1/src/jyotish# python MaitreyaEncHoro_RuleSearch.py ) s
5 489 M
( --min_year=2016 --min_month=7 --min_days=1 --min_hours=10 --min_minutes=10 --min_seconds=1) s
5 478 M
(0 --min_long=77 --min_lat=07 --max_year=2016 --max_month=7 --max_days=15 --max_hours=10 --m) s
5 467 M
(ax_minutes=10 --max_seconds=10 --max_long=78 --max_lat=10 |grep " a Class Association") s
5 456 M
({  --date="2016-7-2 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a) s
5 445 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 434 M
({  --date="2016-7-3 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a) s
5 423 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 412 M
({  --date="2016-7-4 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a) s
5 401 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 390 M
({  --date="2016-7-5 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a) s
5 379 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 368 M
({  --date="2016-7-6 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a) s
5 357 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 346 M
({  --date="2016-7-11 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is ) s
5 335 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Cancer) s
5 324 M
({  --date="2016-7-13 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is ) s
5 313 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Cancer) s
5 302 M
({  --date="2016-7-14 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is ) s
5 291 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Cancer) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(---------------------------------------) s
5 247 M
(279. \(FEATURE-DONE\) Commits - 23 June 2016 - Recurrent Neural Network Long Term Short Term ) s
5 236 M
(Memory - Deep Learning - Implementation) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(---------------------------------------) s
5 203 M
(A very minimal python implementation of LSTM RNN based on Schmidhuber-Hochreiter LSTM has b) s
5 192 M
(een added to) s
5 181 M
(already existing AsFer algorithms repertoire. LSTM RNN has gained traction in recent years ) s
5 170 M
(in its variety of) s
5 159 M
(applications in NLP, Speech Recognition, Image Pattern Recognition etc., The logs for this ) s
5 148 M
(implementation show) s
5 137 M
(a convergence of final output layer in 25th iteration itself \(out of 10000\). Learning the w) s
5 126 M
(eights requires) s
5 115 M
(other algorithms like Gradient Descent, Backpropagation \(and there are already known limita) s
5 104 M
(tions in weight learning with these\)) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(-----------------------------------) s
5 60 M
(280. \(FEATURE-DONE\) Commits - 23 June 2016 - Minimal Reinforcement Learning \(Monte Carlo Ac) s
5 49 M
(tion Policy Search\) implementation) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(-----------------------------------) s
5 16 M
(Reinforcement Learning has been implemented which changes state based on environmental obse) s
5 5 M
(rvation and an appropriate policy is) s
_R
S
%%Page: (139) 139
%%BeginPageSetup
_S
18 36 translate
/pagenum 139 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (139) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(chosen for observation by Monte Carlo Random Policy Search based on which rewards for each ) s
5 731 M
(transitions are accumulated and output in the end.) s
5 720 M
(Logs for 3 consecutive executions of Reinforcement Learning have been committed with differ) s
5 709 M
(ing total rewards gained.) s
5 698 M
(Input observations are read from text file ReinforcementLearning.input.txt.) s
5 676 M
(Reference: Richard Sutton - http://webdocs.cs.ualberta.ca/~sutton/papers/Sutton-PhD-thesis.) s
5 665 M
(pdf) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-----------------------------------) s
5 621 M
(281. \(FEATURE-DONE\) Commits - 24 June 2016 - ThoughtNet Reinforcement Learning implementati) s
5 610 M
(on) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-----------------------------------) s
5 577 M
(ThoughtNet based Reinforcement Learning Evocation has been experimentally added as a clause) s
5 566 M
( in python-src/DeepLearning_ReinforcementLearningMonteCarlo.py.  This is just to demonstrat) s
5 555 M
(e how ThoughtNet hypergraph based evocation is supposed to work. python-src/ReinforcementLe) s
5 544 M
(arning.input.txt has been updated to have a meaningful textual excerpt. Logs for this evoca) s
5 533 M
(tive model has been committed to python-src/testlogs/DeepLearning_ReinforcementLearningMont) s
5 522 M
(eCarlo.ThoughtNet.out.24June2016) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(--------------------------) s
5 478 M
(282. \(FEATURE-DONE\) Commits - 26 June 2016 - ThoughtNet File System Storage) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(--------------------------) s
5 445 M
(ThoughtNet text files have been stored into a filesystem backend. It is read and eval\(\)-ed ) s
5 434 M
(into list of edges and hypergraphs.) s
5 423 M
(Separate ThoughtNet directory has been created for these text files.) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(--------------------------------------------) s
5 379 M
(283. \(THEORY\) ThoughtNet growth and Evocation Reinforcement Learning algorithm \(not feasibl) s
5 368 M
(e to implement exactly\):) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(--------------------------------------------) s
5 335 M
(loop_forever) s
5 324 M
({) s
5 313 M
(When an observation stimulus from environment arrives:) s
5 302 M
(        \(*\) Sensory instruments that simulate eye, ear, nose, etc., receive stimuli from en) s
5 291 M
(vironment \(thoughts, music, noise, sound etc.,\)) s
5 280 M
(and convert to sentential form - this is of the order of billions - and appended to list in) s
5 269 M
( ThoughtNet_Edges.txt) s
5 258 M
(        \(*\) Sentences are classified into categories \(for example, by maximum core numbers ) s
5 247 M
(in definition wordnet subgraph\) which is also order of billions and added as hypergraph edg) s
5 236 M
(es in dict with in ThoughtNet_Hypergraph.txt - hyperedge because same document can be in mo) s
5 225 M
(re than 2 classes. This creates a list for each key in dict and the list has to be sorted b) s
5 214 M
(ased on evocation potential - reward for reinforcement learning. There is no need for monte) s
5 203 M
( carlo and dynamic programming if pre-sorted because sum of rewards is always maximum - onl) s
5 192 M
(y topmost evocative edge is chosen in each list of a key.) s
5 181 M
(        \(*\) observation is split to atomic units - tokenized - or classified and each unit ) s
5 170 M
(is lookedup in ThoughtNet_Hypergraph.txt to get a list and hyperedge with maximum potential) s
5 159 M
( is returned as evocative with optional lambda evaluation which is the action side of reinf) s
5 148 M
(orcement learning.) s
5 137 M
(}) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-------------------) s
5 93 M
(284. \(FEATURE-DONE\) Auto Regression Moving Average - ARMA - Time Series Analysis for Stock ) s
5 82 M
(Ticker Stream) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(-------------------) s
5 49 M
(Commits - 27 June 2016) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(-------------------) s
5 16 M
(1. Time Series Analysis with AutoRegressionMovingAverage of Stock Quote streamed data has b) s
5 5 M
(een implemented \(R function not invoked\). Logs which) s
_R
S
%%Page: (140) 140
%%BeginPageSetup
_S
18 36 translate
/pagenum 140 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (140) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(show the actual data and projected quotes by ARMA for few iterations have been committed to) s
5 731 M
( testlogs. This ARMA projection has been plotted in R to a pdf file which is also committed) s
5 720 M
(.) s
5 709 M
(2. ARMA code implements a very basic regression+moving averages. Equation used is same thou) s
5 698 M
(gh not in usual ARMA format) s
5 687 M
(\(1-sigma\(\)\)X\(t\) = \(1+sigma\(\)\)) s
5 676 M
(3. Also committed is the R plot for SequenceMined Pattern in first 10000 prime numbers in b) s
5 665 M
(inary format \(DJIA approx and approxfun plots have been regenerated\)) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-) s
5 621 M
(285. \(FEATURE-DONE\) Commits 1 - 28 June 2016 - Neo4j ThoughtNet Hypergraph Database Creatio) s
5 610 M
(n) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-) s
5 577 M
(1.New file ThoughtNet_Neo4j.py has been added to repository which reads the ThoughtNet edge) s
5 566 M
(s and hypergraph text files and uploads them into) s
5 555 M
(Neo4j Graph Database through py2neo client for Neo4j.) s
5 544 M
(2.Neo4j being a NoSQL graph database assists in querying the thoughtnet and scalable.) s
5 533 M
(3.ThoughtNet text files have been updated with few more edges and logs for how Neo4j graph ) s
5 522 M
(database for ThoughtNet looks like have been) s
5 511 M
(committed to testlogs/) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(--------) s
5 467 M
(286. \(FEATURE-DONE\) Commits 2 - 28 June 2016 -  ThoughtNet Neo4j Transactional graph creati) s
5 456 M
(on) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(--------) s
5 423 M
(1.transactional begin\(\) and commit\(\) for graph node and edges creation has been) s
5 412 M
(included.) s
5 401 M
(2.This requires disabling bolt and neokit disable-auth due to an auth failure config issue.) s
5 390 M
(3.Logs and a screenshot for the ThoughtNet Hypergraph created in GUI \(http://localhost:7474) s
5 379 M
(\) have been committed to testlogs/) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(---------------------------------------) s
5 335 M
(287. \(FEATURE-DONE\) Commits - 29 June 2016 - ThoughtNet and Reinforcement Deep Learning) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(---------------------------------------) s
5 302 M
(Major commits for ThoughtNet Hypergraph Construction and Reinforcement Learning from it) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(--) s
5 269 M
(1. python-src/DeepLearning_ReinforcementLearningMonteCarlo.py reads from automatically gene) s
5 258 M
(rated ThoughtNet Hypergraph text backend created) s
5 247 M
(by python-src/ThoughtNet/Create_ThoughtNet_Hypergraph.py in python-src/ThoughtNet/ThoughtNe) s
5 236 M
(t_Hypergraph_Generated.txt) s
5 225 M
(2. Separate Recursive Gloss Overlap CoreNumber and PageRank based Unsupervised Classifier h) s
5 214 M
(as been implemented in python-src/RecursiveGlossOverlap_Classifier.py which takes any text ) s
5 203 M
(as input arg and returns the classes it belongs to without any training data. This script i) s
5 192 M
(s imported in python-src/ThoughtNet/Create_ThoughtNet_Hypergraph.py to automatically classi) s
5 181 M
(fy observations from environment and to build ThoughtNet based on them for evocations later) s
5 170 M
(.) s
5 159 M
(3. python-src/ThoughtNet/ThoughtNet_Neo4j.py reads from automatically generated ThoughtNet ) s
5 148 M
(in python-src/ThoughtNet/ThoughtNet_Hypergraph_Generated.txt) s
5 137 M
(4. Logs for above have been committed to respective testlogs/ directories) s
5 126 M
(5. Compared to human evaluated ThoughtNet Hypergraphs in python-src/ThoughtNet/ThoughtNet_H) s
5 115 M
(ypergraph.txt, generated python-src/ThoughtNet/ThoughtNet_Hypergraph_Generated.txt does qui) s
5 104 M
(te a deep learning from WordNet mining and evocations based on this automated ThoughtNet ar) s
5 93 M
(e reasonably accurate.) s
5 82 M
(6. python-src/ReinforcementLearning.input.txt and python-src/ThoughtNet/ThoughtNet_Edges.tx) s
5 71 M
(t have been updated manually.) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(--------------------------------------) s
5 27 M
(288. \(FEATURE-DONE\) Schematic Diagram for ThoughtNet Reinforcement Evocation - approximate ) s
5 16 M
(implementation of 283) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (141) 141
%%BeginPageSetup
_S
18 36 translate
/pagenum 141 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (141) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(--------------------------------------) s
5 720 M
(        Environment -------\(stimuli\)------> Sensors -----> Create_ThoughtNet_Hypergraph.py ) s
5 709 M
(----> RecursiveGlossOverlap_Classifier.py ----|) s
5 698 M
(                                                                            |              ) s
5 687 M
(                                         V) s
5 676 M
(                                                                            V              ) s
5 665 M
(                                         |) s
5 654 M
(                        Neo4j Graph DB<-------ThoughtNet_Neo4j.py <-----ThoughtNet_HyperGra) s
5 643 M
(ph_Generated.txt <----------------------------<) s
5 632 M
(                                                                            |) s
5 621 M
(                                                                            V) s
5 610 M
(                        Observations----------------> DeepLearning_ReinforcementLearningMon) s
5 599 M
(teCarlo.py ---------> Evocations) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(------------) s
5 555 M
(289. \(FEATURE-DONE\) Commits - 30 June 2016 - Sentiment Scoring of ThoughtNet edges and Sort) s
5 544 M
(ing per Class) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(------------) s
5 511 M
(1. Create_ThoughtNet_Hypergraph.py has been changed to do sentiment scoring which is a nett) s
5 500 M
( of positivity, negativity and objectivity per) s
5 489 M
(thought hyperedge and to sort the per-class key list of hyperedges descending based on sent) s
5 478 M
(iment scores computed.) s
5 467 M
(2. python-src/ReinforcementLearning.input.txt which is the input observation stimulus and p) s
5 456 M
(ython-src/ThoughtNet/ThoughtNet_Edges.txt, the training data for construction of Hypergraph) s
5 445 M
( have been updated with additional text sentences.) s
5 434 M
(3. Hypergraph created for this is committed at python-src/ThoughtNet/ThoughtNet_Hypergraph_) s
5 423 M
(Generated.txt with logs in python-src/ThoughtNet/testlogs/Create_ThoughtNet_Hypergraph.sent) s
5 412 M
(iment_sorted.out.30June2016.  Example evocatives for python-src/ReinforcementLearning.input) s
5 401 M
(.txt input to python-src/DeepLearning_ReinforcementLearningMonteCarlo.py are logged in pyth) s
5 390 M
(on-src/testlogs/DeepLearning_ReinforcementLearningMonteCarlo.ThoughtNet_sentiment_sorted.ou) s
5 379 M
(t.30June2016) s
5 357 M
(This completes ThoughtNet Classifications based Evocative Inference implementation minimall) s
5 346 M
(y.) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(-----------------) s
5 302 M
(290. \(FEATURE-DONE\) Commits - 1 July 2016 - Reinforcement Learning Bifurcation) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(-----------------) s
5 269 M
(Reinforcement Learning code has been bifurcated into two files than having in if-else claus) s
5 258 M
(e, for facilitating future imports :-) s
5 247 M
(one for MonteCarlo and the other for ThoughtNet Evocation.  Logs for these two have been co) s
5 236 M
(mmitted to testlogs.) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(------------------) s
5 192 M
(291. \(THEORY\) Logical Time and ThoughNet \(related to EventNet 70-79\)) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(------------------) s
5 159 M
(ThoughtNet Hypergraph is multiplanar and when seen from elevation it resembles billions of ) s
5 148 M
(skyscraper category towers interconnected by Thought) s
5 137 M
(HyperEdges which are classified onto these categories. This gives an alternative route to d) s
5 126 M
(efine Time. Each tower represents chronologically stacked up events/occurrences/thoughts wh) s
5 115 M
(en unsorted i.e most recent thought is on top always and evocation based on chronology retu) s
5 104 M
(rns topmost thought. ThoughtNet evocation is an associative memory process returning most r) s
5 93 M
(elevant thought in past for an observation in present. Two stack node towers with differing) s
5 82 M
( depths define two views of time i.e time is subjective to the category than objective acro) s
5 71 M
(ss ThoughtNet. In a timeless universe, measuring duration between two events reduces to hei) s
5 60 M
(ght of these unequal stacks which is not absolute - there are many logical "Time"\(s\). Each ) s
5 49 M
(stack node has its own independent logical "Clock". This makes no assumption about relativi) s
5 38 M
(stic theory of time and is independent of any physical law. From theory of computation stan) s
5 27 M
(dpoint, this is similar to a multi-tape turing machine but with added feature in which tape) s
5 16 M
(s are interconnected. When the stacks are sorted for evocation potential based on some crit) s
5 5 M
(erion \(e.g sentiwordnet, EEG electric pulse etc.,\) chronology information is lost to some e) s
_R
S
%%Page: (142) 142
%%BeginPageSetup
_S
18 36 translate
/pagenum 142 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (142) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(xtent but still the edge id retains it - most recent edge has largest edge numeric id. Yet,) s
5 731 M
( this assumes a distributed global unique id is achievable. When events occur in parallel, ) s
5 720 M
(two edges geographically separate can have same edge id in the absence of special mechanism) s
5 709 M
(s for uniqueness. Vis-a-vis EventNet, ThoughtNet is not a causation graph. Relationship bet) s
5 698 M
(ween EventNet and ThoughtNet is: Every partaker node in EventNet has a ThoughtNet. EventNet) s
5 687 M
( when topologically sorted has no absolute time - can have many orderings of events - simil) s
5 676 M
(ar to ThoughtNet - each thought edge can have varied logical timestamps when viewed from di) s
5 665 M
(fferent category spectacles - in the absence of time. Following is the hierarchy: Each node) s
5 654 M
( in an EventNet is an event, and each event has partaker nodes which create graph by intera) s
5 643 M
(ction among themselves, and each partaker node has an internal ThoughtNet. Thus there are 3) s
5 632 M
( levels - EventNet is the biggest, Event is bigger and Partaker is big - EventNet is a grap) s
5 621 M
(h of graph nodes of graph nodes. The tensor product of these nested graphs has 3 tiers - Ev) s
5 610 M
(entNet\(Event\(PartakerThoughtNet\)\)\) - denoted as EventNet \(*\) Event \(*\) PartakerThoughtNet. ) s
5 599 M
(This tensor product captures both individual's view of event ordering and cosmic event orde) s
5 588 M
(ring. ThoughtNet per node in an event is more of a projection of its observable universe - ) s
5 577 M
(imaginary - while interaction among nodes in an event and causality between events are real) s
5 566 M
(. Measurement of duration between events in this tensor product can be done in various ways) s
5 555 M
(: 1\) Distance between two event nodes causally connected 2\) Global topological sorting of E) s
5 544 M
(ventNet 3\) From the ThoughtNet projection observed by each node in an event. This gives ris) s
5 533 M
(e to multiple interpretations of time.) s
5 511 M
(As a working example, following edges were evoked when word "economic" was uttered:) s
5 500 M
(===========================================================================================) s
5 489 M
(Observation: economic) s
5 478 M
(evocative thought \(reward\) returned\(in descending order of evocation potential\): The HDI wa) s
5 467 M
(s created to emphasize that people and their capabilities should be the ultimate criteria f) s
5 456 M
(or assessing the development of a country, not economic growth alone. The HDI can also be u) s
5 445 M
(sed to question national policy choices, asking how two countries with the same level of GN) s
5 434 M
(I per capita can end up with different human development outcomes. These contrasts can stim) s
5 423 M
(ulate debate about government policy priorities.) s
5 412 M
(evocative thought \(reward\) returned\(in descending order of evocation potential\): We need an) s
5 401 M
( SPI and we need to understand its value in our society because we need to understand how w) s
5 390 M
(e\342\\200\\231re doing in terms of health and education and the quality of our water) s
5 379 M
(evocative thought \(reward\) returned\(in descending order of evocation potential\): Social pro) s
5 368 M
(gress depends on the policy choices, investments, and implementation capabilities of multip) s
5 357 M
(le stakeholders\342\\200\\224government, civil society, and business.) s
5 346 M
(===========================================================================================) s
5 335 M
(Only the top most evocative edge \(sorted based on sentiment scores\) has the word "economics) s
5 324 M
(" in it while the other two don't. But still the classification by definition graph core nu) s
5 313 M
(mbers inferred that these belong to "economic" class and pigeonholed them to stack "economi) s
5 302 M
(c" - in other words the concept "economics" was deep-learnt by inner graph structure of the) s
5 291 M
( sentence without training data. But bottom two edges were most recent compared to the topm) s
5 280 M
(ost and yet scored less on sentiment.) s
5 258 M
(A practical ThoughtNet storage could be of billions of edges based on experiential learning) s
5 247 M
( of an individual over a period of lifetime and has to be suitably stored in a medium that ) s
5 236 M
(mimicks brain.  Ideally ThoughtNet has to be in some persistence bigdata storage though it ) s
5 225 M
(still is just an approximation. Neo4j backend for ThoughtNet has been implemented in Though) s
5 214 M
(tNet/. ThoughtNet is kind of Evocation WordNet expanded for thoughts represented as sentenc) s
5 203 M
(es \(because there is no better way to encode thoughts than in a natural language\) and class) s
5 192 M
(ified. Hypergraph encodes the edges as numbers - for example, "transactions":[1] and "secur) s
5 181 M
(ity":[1] implies that a sentence numbered 1 has been pre-classified under transactions and ) s
5 170 M
(security categories.  Also "services":[0,1] implies that there are two sentences encoded as) s
5 159 M
( 0 and 1 classified in services category with descending order of evocative potentials - 0 ) s
5 148 M
(is more evocative than 1.  In an advanced setting the ThoughtNet stores the lambda function) s
5 137 M
( composition parenthesized equivalent to the sentence and action taken upon evocation is to) s
5 126 M
( evaluate the most potent evocative lambda expression.  On an evocative thought, state of ") s
5 115 M
(ThoughtNet" mind changes with corresponding action associated with that state \(the usual mi) s
5 104 M
(nd-word-action triad\). Philosophically, this simulates the following thought experiment:) s
5 93 M
(        - Word: Sensory receptors perceive stimuli - events) s
5 82 M
(        - Mind: stimuli evoke thoughts in past) s
5 71 M
(        - Action: Evocative thought is processed by intellect and inspires action - action ) s
5 60 M
(is a lambda evaluation of a sentence.) s
5 49 M
(##############################################################################) s
5 27 M
(        Senses\(Word\) <---------> Mind\(Evocation\) <---------> Action\(Intellect\)) s
5 16 M
(         ^                                                        ^) s
5 5 M
(         |<------------------------------------------------------>|) s
_R
S
%%Page: (143) 143
%%BeginPageSetup
_S
18 36 translate
/pagenum 143 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (143) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(and above is an infinite cycle. Previous schematic maps interestingly to Reinforcement Lear) s
5 720 M
(ning\(Agent-Environment-Action-Reward\).) s
5 709 M
(##############################################################################) s
5 698 M
(In this aspect, ThoughtNet is a qualitative experimental inference model compared to quanti) s
5 687 M
(tative Neural Networks.) s
5 665 M
(It is assumed in present implementation that every thought edge is a state implicitly, and ) s
5 654 M
(the action) s
5 643 M
(for the state is the "meaning" inferred by recursive lambda evaluation \(lambda composition ) s
5 632 M
(tree evaluation for a natural) s
5 621 M
(language sentence is not implemented separately because its reverse is already done through) s
5 610 M
( closure of a RGO graph in other) s
5 599 M
(code in NeuronRain AsFer. Approximately every edge in Recursive Gloss Overlap wordnet subgr) s
5 588 M
(aph is a lambda function with its) s
5 577 M
(two vertices as operands which gives a more generic lambda graph composition of a text\)) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(---------------------------------) s
5 533 M
(292. \(THEORY\) Recursive Lambda Function Growth Algorithm and Recursive Gloss Overlap Graph ) s
5 522 M
(- 216 Continued) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(---------------------------------) s
5 489 M
(Lambda Function Recursive Growth algorithm for inferring meaning of natual language text ap) s
5 478 M
(proximately, mentioned in 216 relies) s
5 467 M
(on creation of lambda function composition tree top-down by parsing the connectives and key) s
5 456 M
(words of the text. Alternative to this top-down) s
5 445 M
(parsing is to construct the lambda function composition graph instead from the Recursive Gl) s
5 434 M
(oss Overlap WordNet subgraph itself where) s
5 423 M
(each edge is a lambda function with two vertex endpoints as operands \(mentioned in 291\). De) s
5 412 M
(pth First Traversal of this graph iteratively) s
5 401 M
(evaluates a lambda function f1 of an edge, f1 is applied to next edge vertices in traversal) s
5 390 M
( to return f2\(f1\), and so on upto function) s
5 379 M
(fn\(fn-1\(fn-2\(.....\(f2\(f1\)\)...\) which completes the recursive composition. Which one is bett) s
5 368 M
(er - tree or graph lambda function growth - depends) s
5 357 M
(on the depth of learning necessary. Rationale in both is that the "meaning" is accumulated ) s
5 346 M
(left-right and top-down on reading a text.) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(---------------------------------------) s
5 302 M
(293.\(FEATURE-DONE\) Commits - 7 July 2016 - Experimental implementation of Recursive Lambda ) s
5 291 M
(Function Growth Algorithm \(216 and 292\)) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(---------------------------------------) s
5 258 M
(1.Each Sentence Text is converted to an AVL Balanced Tree \(inorder traversal of this tree c) s
5 247 M
(reates the original text\)) s
5 236 M
(2.Postorder traversal of this tree computes a postfix expression) s
5 225 M
(3.Postfix expression is evaluated and a lambda function composition is generated by parenth) s
5 214 M
(esization denoting a function with two arguments.Logs) s
5 203 M
(for this have been committed to testlogs/ which show the inorder and postorder traversal an) s
5 192 M
(d the final lambda function grown from a text.) s
5 181 M
(4.This is different from Part of Speech tree or a Context Free Grammar parse tree.) s
5 170 M
(5.On an average every english sentence has a connective on every third word which is exactl) s
5 159 M
(y what inorder traversal of AVL binary tree does.If not a general B+-Tree can be an ideal c) s
5 148 M
(hoice to translate a sentence to tree. Every subtree root in AVL tree is a lambda function ) s
5 137 M
(with leaves as operands.) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(----------------) s
5 93 M
(294. \(FEATURE-DONE\) Commits - 8 July 2016) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(----------------) s
5 60 M
(Changed Postfix Evaluation to Infix evaluation in Lambda Function Growth with logs in testl) s
5 49 M
(ogs/) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(-----------------------------------) s
5 5 M
(295. \(THEORY\) Contextual Multi-Armed Bandits, Reinforcement Learning and ThoughtNet - relat) s
_R
S
%%Page: (144) 144
%%BeginPageSetup
_S
18 36 translate
/pagenum 144 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (144) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ed to 241, 291, 292 - 18 July 2016) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-----------------------------------) s
5 709 M
(Contextual Multi-Armed Bandits are the class of problems where a choice has to be made amon) s
5 698 M
(gst k arms and each iteration fetches a reward. Choice of an arm in next iteration depends ) s
5 687 M
(on rewards for previous iteration. Ideal examples are Recommender Systems, Contextual websi) s
5 676 M
(te advertisements etc., Thus an agent learns from past and policy action depends on rewards) s
5 665 M
( for previous actions. Translating this into ThoughtNet realm is fairly straightforward - E) s
5 654 M
(ach class stack node in ThoughtNet is a multi-armed bandit and an evocative has to choose a) s
5 643 M
( hyperedge that 1\) maximizes reward by fitting the context meaningfully and 2\) learns from ) s
5 632 M
(rewards for previous actions by virtue of ThoughtNet storage itself because ThoughtNet per ) s
5 621 M
(partaker is built gradually by storing thought hyperedges colored with a sentiment mentione) s
5 610 M
(d in Ramsey coloring of ThoughtNet in 236 \(or SentiWordNet score\). In terms of a Markov Mod) s
5 599 M
(el, Reward for an evocative word w at time t is denoted as Reward\(w,t\) and returns a corres) s
5 588 M
(ponding thought hyperedge which depends on Reward\(w, t-1\), Reward\(w, t-2\) and so on i.e Rew) s
5 577 M
(ard\(w,t\) = function_of\(Reward\(w,t-1\), Reward\(w,t-2\), ..., Reward\(w,0\)\). Recommender Systems) s
5 566 M
( in e-commerce websites which display similar items to a selected item in shopping cart hav) s
5 555 M
(e a striking resemblance to ThoughtNet evocation. This makes ThoughtNet a suitable candidat) s
5 544 M
(e for Recommender System - Sales history is built as a ThoughtNet similar to the algorithm ) s
5 533 M
(mentioned in 283 and 288. Every item added to shopping cart returns evocatives based on som) s
5 522 M
(e scoring \(sentiment ranked etc.,\) which is a Recommender System.) s
5 500 M
(Reference:) s
5 489 M
(---------) s
5 478 M
(295.1 Multiword Testing Decision Service - http://arxiv.org/pdf/1606.03966v1.pdf) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(-----------------------------------------) s
5 434 M
(296. \(FEATURE-DONE\) Music Pattern Mining - Jensen-Shannon Divergence Distance between two F) s
5 423 M
(FT Frequency Distributions for similarity) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-----------------------------------------) s
5 390 M
(Commits - 20 July 2016 - related to 68, 69) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-----------------------------------------) s
5 357 M
(\(NOTE: Because of some weird SourceForge/GitHub error, FFT txt files added to repos on 19 J) s
5 346 M
(uly 2016 are still flagged as new\(?\). They have been) s
5 335 M
(added to repos again along with new files\)) s
5 313 M
(FFTs of 2 audio files are parsed and written to *_trimmed.txt by awk to contain only the fr) s
5 302 M
(equencies for each sample.) s
5 291 M
(These files are read by JensenShannonDivergence.py to compute the JS Distance between these) s
5 280 M
( two FFT frequency distributions.) s
5 269 M
(Preprocessing is done so as to normalize the frequency to map to a probability \(frequency/s) s
5 258 M
(um_of_frequencies\) which gives) s
5 247 M
(probability distribution from frequency distribution. Jensen-Shannon Distance which is the ) s
5 236 M
(weighted average of bidirectional) s
5 225 M
(Kullback-Leibler Divergence measures of the two distributions, indicates similarity or dist) s
5 214 M
(ance between two music samples) s
5 203 M
(quantitatively.) s
5 181 M
(There are 4 music samples: music_pattern_mining/FFT_classical_1_20July2016.txt and music_pa) s
5 170 M
(ttern_mining/FFT_classical_2_20July2016.txt) s
5 159 M
(are similar \(similar notes sung by different musicians\). music_pattern_mining/FFT_classical) s
5 148 M
(_1_19July2016.txt and) s
5 137 M
(music_pattern_mining/FFT_classical_2_19July2016.txt are also similar \(different set of note) s
5 126 M
(s sung by different musicians\). Jensen-Shannon) s
5 115 M
(distance across these 4 ordered pairs is captured and committed in testlogs/) s
5 93 M
(Jensen-Shannon Distance across 2 FFT Frquency-Probability distributions of music samples is) s
5 82 M
( a simple, basic measure for distance and can be) s
5 71 M
(basis for clustering and classification of music. There could be some inaccuracies because ) s
5 60 M
(Audacity does not generate FFT for complete) s
5 49 M
(music file but only for first ~5 minutes. Two similar notes with different musicians could ) s
5 38 M
(be distant and two dissimilar notes might be) s
5 27 M
(close because of this Audacity limitation. Presently noise filtering and cherrypick peak fr) s
5 16 M
(equencies is not done and ) s
5 5 M
(entire frequency range is compared.) s
_R
S
%%Page: (145) 145
%%BeginPageSetup
_S
18 36 translate
/pagenum 145 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (145) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(------------) s
5 709 M
(297. \(FEATURE-DONE\) Software Analytics - Cyclomatic Complexity from SATURN .dot graphs - re) s
5 698 M
(lated to 65) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(------------) s
5 665 M
(Commits - 22 July 2016) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(------------) s
5 632 M
(New Python-Spark implementation that reads the SATURN program analyzer generated .dot graph) s
5 621 M
( files processes them with Spark) s
5 610 M
(MapReduce to find the number of edges and vertices in the graph represented by .dot file fo) s
5 599 M
(r each snippet. From this) s
5 588 M
(Cyclomatic Complexity is calculated \(which is Edges - Vertices + 2\) -  a standard Function ) s
5 577 M
(Point Estimator for code complexity.) s
5 566 M
(There were some JVM crashes frequently while starting up spark-submit logs for which are al) s
5 555 M
(so committed in testlogs along with) s
5 544 M
(the two successful Spark computed Cyclomatic Complexity measures for two .dot files. These ) s
5 533 M
(.dot files are sourced from) s
5 522 M
(VIRGO Linux saturn program analysis kernel driver.) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-----------------) s
5 478 M
(298. \(FEATURE-DONE\) String Search - Longest Common Substring - Suffix Trees\(Suffix Arrays+L) s
5 467 M
(CP\) Implementation) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(-----------------) s
5 434 M
(Commits - 26 July 2016) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(-----------------) s
5 401 M
(This implementation finds the most repeated substrings within a larger string by constructi) s
5 390 M
(ng Suffix Trees) s
5 379 M
(indirectly with Suffix Array and Longest Common Prefix \(LCP\) datastructures. An ideal appli) s
5 368 M
(cation for String Search is) s
5 357 M
(in Bioinformatics, Streamed Data analysis etc., For example, a Time Series data with fluctu) s
5 346 M
(ating curve can be ) s
5 335 M
(encoded as a huge binary string by mapping ebb and tide to 0 and 1. Thus a function graph t) s
5 324 M
(ime series is projected on to) s
5 313 M
({0,1} alphabet to create blob. Usual Time Series analysis mines for Trends, Cycles, Seasons) s
5 302 M
( and Irregularities over time.) s
5 291 M
(This binary encoding of time series gives an alternative spectacle to look at the trends \(h) s
5 280 M
(ighs and lows\). Longest repeating) s
5 269 M
(pattern in this binary encoding is a cycle. Suffix Array by [UdiManber] has been implemente) s
5 258 M
(d over Suffix Trees implementations) s
5 247 M
(of [Weiner] and [Ukkonen] because of simplicity of Suffix Arrays and Suffix Trees=Suffix Ar) s
5 236 M
(rays + LCPs.) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(-----------) s
5 192 M
(299. \(FEATURE-DONE\) Binary String Encoding of Time Series - Commits - 27 July 2016) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(-----------) s
5 159 M
(1. New python script to encode a time series datastream as binary string has been added to ) s
5 148 M
(repository.) s
5 137 M
(2. This writes to StringSearch_Pattern.txt which is read by StringSearch_LongestRepeatedSub) s
5 126 M
(string.py) s
5 115 M
(3. Encoding scheme: If next data point is smaller, write 0 else if greater write 1. This ca) s
5 104 M
(ptures the) s
5 93 M
(fluctuations in dataset irrespective of the amplitudes at each point.) s
5 82 M
(4. For example a bitonic sequence would have been encoded as ....111111110000000.... \(ascen) s
5 71 M
(ds and descends\)) s
5 60 M
(5. Suffix Array + LCP algorithm on this sequence finds the Longest Repeated Substring. For ) s
5 49 M
(a specific example of) s
5 38 M
(Stock ticker time series data this amounts to frequently recurring fluctuation pattern.) s
5 27 M
(6. Logs for the above have been committed to testlogs/) s
5 16 M
(7. Every time series dataset is a union of bitonic sequences with varying lengths correspon) s
5 5 M
(ding to peaks and troughs) s
_R
S
%%Page: (146) 146
%%BeginPageSetup
_S
18 36 translate
/pagenum 146 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (146) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(and has self-similar fractal structure \(zooming out the series has similarities to original) s
5 731 M
( series\) . This implies the ) s
5 720 M
(binary string encoded as previously is fractal too.) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(-----------) s
5 676 M
(300. \(FEATURE-DONE\) Tornado GUI Authentication Template - Commits - 27 July 2016) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(-----------) s
5 643 M
(Rewritten Tornado GUI with Login Template and redirect to Algorithms Execution Template. Pr) s
5 632 M
(esently implemented for only a ) s
5 621 M
(root user by cookie setting. Entry point has been changed to http://host:33333/neuronrain_a) s
5 610 M
(uth \(Login\).) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(-----------------------) s
5 566 M
(301. \(FEATURE-DONE\) OAuth2 authentication and credentials storage in MongoDB/Redis with pas) s
5 555 M
(slib sha256 encryption) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-----------------------) s
5 522 M
(1.Login Handler has been augmented with OAuth2 authentication by python-oauth2 library.) s
5 511 M
(2.MongoDB is used as OAuth2 credentials storage backend and Redis for token storage backend) s
5 500 M
(3.Passlib is used to encrypt the password with SHA256 hash digest and stored once in MongoD) s
5 489 M
(B \(code is commented\)) s
5 478 M
(4.Login page password is verified with passlib generated hash in MongoDB queried for a user) s
5 467 M
(name argument) s
5 456 M
(5.With this minimal standard authentication has been implemented for NeuronRain cloud deplo) s
5 445 M
(yment.) s
5 434 M
(6.Prerequisite is to populate MongoDB neuronrain_oauth database and neuronrain_users collec) s
5 423 M
(tions with) s
5 412 M
(passlib encypted JSON by uncommenting the collections.insert_one\(\) code.) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(----------------------) s
5 368 M
(302. Commits - 29 July 2016 - boost::python extensions for VIRGO Linux Kernel system calls) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(----------------------) s
5 335 M
(virgo_clone\(\) system call has been included in switch-case and invokes an exported kernel m) s
5 324 M
(odule function in kernelspace.) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-------------------------------) s
5 280 M
(303. \(THEORY\) Update on Bitonic Sort Merge Tree for Discrete Hyperbolic Factorization Spark) s
5 269 M
( Cloud Implementation in 34.20) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(-------------------------------) s
5 236 M
(Bitonic Sort Merge Tree for Discrete Hyperbolic Factorization described in http://sourcefor) s
5 225 M
(ge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveForIntegerFactoriza) s
5 214 M
(tion_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.pdf/download has followin) s
5 203 M
(g bound which can be derived as:) s
5 181 M
(303.1 Bitonic Sort requires O\(\(logN\)^2\) time with O\(N*\(logN\)^2\) processors.) s
5 170 M
(303.2 Discretized Hyperbolic arc of length N can be split into N/logN segments of length lo) s
5 159 M
(gN each.) s
5 148 M
(303.3 Above N/logN segments can be grouped in leaf level of merge tree into N/2logN pairs o) s
5 137 M
(f \(logN,logN\) = 2logN length segments to be sorted together.) s
5 126 M
(303.4 Each such pair can be sorted in log\(2logN\) time in parallel with N/\(2logN\) * N\(logN\)^) s
5 115 M
(2 = N^2/2logN comparator processors in leaf level which is the maximum number of processors) s
5 104 M
( required. Next level requires log\(4logN\), log\(8logN\) and so on till root.) s
5 93 M
(303.5 Height of the merge tree is O\(log\(N/logN\)\). Total sort time is sum over sorts at each) s
5 82 M
( level of merge tree = log\(2logN\) + log\(4logN\) + ... + log\(\(2^log\(N/logN\)\)*logN\)) s
5 71 M
(303.6 Total sort time of merge tree is upperbounded as \(not tight one\) height * maximum_sor) s
5 60 M
(t_time_per_level:) s
5 49 M
(        <= O\(log\(N/logN\) * log\(N/logN*logN\)\) = O\(log\(N/logN\) * log\(N\)\)) s
5 38 M
(      with maximum of N^2/2logN processor comparators at leaf which tapers down up the tree) s
5 27 M
(.) s
5 16 M
(303.7 Binary Search on final sorted merged tile requires additional O\(logN\) which effective) s
5 5 M
(ly reduces to:) s
_R
S
%%Page: (147) 147
%%BeginPageSetup
_S
18 36 translate
/pagenum 147 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (147) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        O\(log\(N/logN\)*logN + logN\) = O\(log\(N/logN\)*logN\) <= O\(\(logN\)^2\) time) s
5 731 M
(      with N^2/2logN processor comparators for finding a factor.) s
5 720 M
(303.8 This is comparably better bound than the Parallel RAM ANSV algorithm based merge sort) s
5 709 M
( alternatives and easy to implement on a cloud as done in 34.20 and also is in NC because o) s
5 698 M
(f polylog time and polynomial comparator processors required.) s
5 687 M
(303.9 Again the input size is N and not logN, but yet definition of NC is abided by. It rem) s
5 676 M
(ains an open question whether Bitonic Sort Comparators are equivalent conceptually to PRAMs) s
5 665 M
( \(Are cloud nodes same as PRAMs assuming the nodes have access to a shared memory?\).) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-------------------------------) s
5 621 M
(304. Commits - 31 July 2016 - boost::python C++ and cpython virgo_clone\(\) system call invoc) s
5 610 M
(ations) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-------------------------------) s
5 577 M
(1. Boost C++ Python extensions - virgo_clone\(\) system call has been included in switch-case) s
5 566 M
( for cpython invocation of VIRGO linux kernel with test logs for it with use_as_kingcobra_s) s
5 555 M
(ervice=1 \(Routing: C++Boost::Python ---> virgo_clone\(\) ----> virgo_queue driver ----> KingC) s
5 544 M
(obra message queue pub/sub service\). Test logs for it have been committed in testlogs/) s
5 533 M
(2. CPython extensions - test log for boost::python virgo_clone\(\) invocation with use_as_kin) s
5 522 M
(gcobra_service=0 which directly invokes a kernelspace function without forwarding to virgo_) s
5 511 M
(queue/kingcobra, has been committed to testlogs/.) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(----------------------------------) s
5 467 M
(305. NEURONRAIN VIRGO Commits for ASFER Boost::Python C++ virgo memory system calls invocat) s
5 456 M
(ions) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(----------------------------------) s
5 423 M
(\(BUG - STABILITY ISSUES\) Commits - 1 August 2016 - VIRGO Linux Stability Issues - Ongoing R) s
5 412 M
(andom oops and panics investigation) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(----------------------------------) s
5 379 M
(1. GFP_KERNEL has been replaced with GFP_ATOMIC flags in kmem allocations.) s
5 368 M
(2. NULL checks have been introduced in lot of places involving strcpy, strcat, strcmp etc.,) s
5 357 M
( to circumvent) s
5 346 M
(buffer overflows.) s
5 335 M
(3. Though this has stabilized the driver to some extent, still there are OOPS in unrelated ) s
5 324 M
(places deep) s
5 313 M
(with in kernel where paging datastructures are accessed - kmalloc somehow corrupts paging) s
5 302 M
(4. OOPS are debugged via gdb as:) s
5 291 M
(        4.1 gdb ./vmlinux /proc/kcore) s
5 280 M
(        or) s
5 269 M
(        4.2 gdb <loadable_kernel_module>.o) s
5 258 M
(   followed by) s
5 247 M
(        4.3 l *\(address+offset in OOPS dump\)) s
5 236 M
(5. kern.log\(s\) for the above have been committed in tar.gz format and have numerous OOPS oc) s
5 225 M
(curred during repetitive telnet and syscall) s
5 214 M
(invocation\(boost::python C++\) invocations of virgo memory system calls.) s
5 203 M
(6. Paging related OOPS look like an offshoot of set_fs\(\) encompassing the filp_open VFS cal) s
5 192 M
(ls.) s
5 181 M
(7. In C++ Boost::Python extensions, flag changed for VIRGO memory system calls invocation f) s
5 170 M
(rom python.) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(-------------------------------) s
5 126 M
(306. Commits - 3 August 2016) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-------------------------------) s
5 93 M
(Social Network Analysis with Twitter - Changes to Belief Propagation Potential Computation) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(-------------------------------) s
5 60 M
(1. Exception handling for UnicodeError has been added in SentimentAnalyzer) s
5 49 M
(2. Belief Propagation Potential computation for the RGO graph constructed has been changed ) s
5 38 M
(to do plain) s
5 27 M
(summation of positivity and negativity scores for DFS of K-Core rather than multiplication ) s
5 16 M
(which heuristically) s
5 5 M
(appears to predict sentiments better) s
_R
S
%%Page: (148) 148
%%BeginPageSetup
_S
18 36 translate
/pagenum 148 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (148) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(3. An example for tweets sentiments analysis for 2 search keywords has been logged and comm) s
5 731 M
(itted in testlogs/) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(4. Excerpts for sentiment scores - positive and negative - from RGO graph of few tweets ) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 676 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/SourceForge/asfer-code/python-src/testlog) s
5 665 M
(s# grep "score:" SocialNetworkAnalysis_Twitter.out1.Republicans.3August2016 ) s
5 654 M
(K-Core DFS belief_propagated_posscore: 6.078125) s
5 643 M
(K-Core DFS belief_propagated_negscore: 8.140625) s
5 632 M
(Core Number belief_propagated_posscore: 25.125) s
5 621 M
(Core Number belief_propagated_negscore: 26.125) s
5 610 M
(K-Core DFS belief_propagated_posscore: 6.078125) s
5 599 M
(K-Core DFS belief_propagated_negscore: 8.140625) s
5 588 M
(Core Number belief_propagated_posscore: 25.125) s
5 577 M
(Core Number belief_propagated_negscore: 26.125) s
5 566 M
(K-Core DFS belief_propagated_posscore: 55.09375) s
5 555 M
(K-Core DFS belief_propagated_negscore: 54.3125) s
5 544 M
(Core Number belief_propagated_posscore: 92.625) s
5 533 M
(Core Number belief_propagated_negscore: 93.875) s
5 522 M
(K-Core DFS belief_propagated_posscore: 60.09375) s
5 511 M
(K-Core DFS belief_propagated_negscore: 59.3125) s
5 500 M
(Core Number belief_propagated_posscore: 118.625) s
5 489 M
(Core Number belief_propagated_negscore: 117.75) s
5 478 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea) s
5 467 M
(2/home/kashrinivaasan/KrishnaiResearch_OpenSource/SourceForge/asfer-code/python-src/testlog) s
5 456 M
(s# grep "score:" SocialNetworkAnalysis_Twitter.out2.Democrats.3August2016 ) s
5 445 M
(K-Core DFS belief_propagated_posscore: 34.0) s
5 434 M
(K-Core DFS belief_propagated_negscore: 30.359375) s
5 423 M
(Core Number belief_propagated_posscore: 90.25) s
5 412 M
(Core Number belief_propagated_negscore: 85.125) s
5 401 M
(K-Core DFS belief_propagated_posscore: 54.0) s
5 390 M
(K-Core DFS belief_propagated_negscore: 46.734375) s
5 379 M
(Core Number belief_propagated_posscore: 111.125) s
5 368 M
(Core Number belief_propagated_negscore: 108.125) s
5 357 M
(K-Core DFS belief_propagated_posscore: 97.203125) s
5 346 M
(K-Core DFS belief_propagated_negscore: 91.015625) s
5 335 M
(Core Number belief_propagated_posscore: 172.125) s
5 324 M
(Core Number belief_propagated_negscore: 172.125) s
5 313 M
(K-Core DFS belief_propagated_posscore: 97.203125) s
5 302 M
(K-Core DFS belief_propagated_negscore: 91.015625) s
5 291 M
(Core Number belief_propagated_posscore: 178.125) s
5 280 M
(Core Number belief_propagated_negscore: 178.125) s
5 258 M
(5. Majority Predominant Sentiment indicated by above scores for randomly sampled tweets can) s
5 247 M
( be used as one of the Election Approximation and Forecast Technique described in 14.) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(---------------------------) s
5 203 M
(307. \(THEORY\) Sentiment Analysis from Recursive Gloss Overlap as a Voting Function in Major) s
5 192 M
(ity Voting - related to 14) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(---------------------------) s
5 159 M
(As mentioned in 306, Sentiment Analysis scores derived from Recursive Gloss Overlap graph o) s
5 148 M
(f a text is an indirect voting function - when the) s
5 137 M
(overall sentiment is negative it is an "against" vote and when positive it is a "for" vote.) s
5 126 M
( In this sense, Sentiment Analysis shrouds a Satisfiability problem underneath it. In other) s
5 115 M
( words every polarised text is a boolean SAT circuit translated into natural language text ) s
5 104 M
(which opens whole new vista to look at Sentiment Analysis per se. Infact it is a generaliza) s
5 93 M
(tion of a boolean SAT circuit - it is bipolar and whichever polarity wins decides the vote.) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(--------------------------------) s
5 49 M
(308. \(FEATURE-DONE\) Markov Random Fields \(MRF\) Belief Propagation - Commits - 8 August 2016) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(--------------------------------) s
5 16 M
(Existing Sentiment Analyzer does belief propagation by computing product of potentials in D) s
5 5 M
(FS traversal only.) s
_R
S
%%Page: (149) 149
%%BeginPageSetup
_S
18 36 translate
/pagenum 149 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (149) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(New function for Markov Random Fields Belief Propagation has been included which handles th) s
5 731 M
(e generalized case of belief propagation in a) s
5 720 M
(graph by factoring it into maximal cliques and finding potentials per clique. These per cli) s
5 709 M
(que potentials are multiplied and normalized) s
5 698 M
(with number of cliques to get polarized sentiments scores - positive, negative and objectiv) s
5 687 M
(e. Logs for Sentiment Analysis of tweets stream) s
5 676 M
(with MRF have been committed to testlogs/) s
5 665 M
( ) s
5 654 M
(Reference:) s
5 643 M
(---------) s
5 632 M
(308.1 Introduction to Machine Learning - [Ethem Alpaydin] - Graphical Models) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(--------------------------------) s
5 588 M
(309. \(FEATURE-DONE\) Commits - 12 August 2016 - Boost 1.58.0 upgrade from 1.55.0 - Boost::Py) s
5 577 M
(thon C++ extensions for VIRGO) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(--------------------------------) s
5 544 M
(1.Rebuilt Boost::Python extensions for VIRGO Linux kernel system calls with boost 1.58 upgr) s
5 533 M
(aded from boost 1.55.) s
5 522 M
(2.kern.log for miscellaneous VIRGO system calls from both telnet and system call request ro) s
5 511 M
(utes has been compressed and committed to) s
5 500 M
(testlogs \(~300MB\).) s
5 489 M
(Following multiple debug options were tried out for heisencrash resolution \(Note to self\):) s
5 478 M
(3./etc/sysctl.conf has been updated with kernel panic tunables with which the mean time bet) s
5 467 M
(ween crashes has increased and crash location is) s
5 456 M
(deep within kernel \(VMA paging\) - commits for this are in VIRGO linux tree. With these sett) s
5 445 M
(ings following usecase works:) s
5 434 M
(        virgo_cloud_malloc\(\)) s
5 423 M
(        virgo_cloud_set\(\)) s
5 412 M
(        virgo_cloud_get\(\)) s
5 401 M
(        virgo_cloud_set\(\) overwrite) s
5 390 M
(        virgo_cloud_get\(\)) s
5 379 M
(through telnet route.) s
5 368 M
(4.Debugging VIRGO linux kernel with an Oracle VirtualBox virtual machine installation and d) s
5 357 M
(ebugging the VM with a netconsole port via KGDB was explored, but there are serious issues ) s
5 346 M
(with VirtualBox initialization in Qt5.) s
5 335 M
(5.Debugging VIRGO linux kernel with QEMU-KVM installation and debugging the VM with a netco) s
5 324 M
(nsole port via KGDB is being explored. Reference documentation at: https://www.kernel.org/d) s
5 313 M
(oc/Documentation/gdb-kernel-debugging.txt) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(--------------------------------) s
5 269 M
(310. \(THEORY\) DFT of a Sliding Window Fragment of Time Series, Integer Partitions and Hashi) s
5 258 M
(ng) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(--------------------------------) s
5 225 M
(Time Series Data Stream can be viewed through a sliding window of some fixed width moving a) s
5 214 M
(cross the data. Captured data points in such) s
5 203 M
(window are analyzed in frequency domain with a Discrete Fourier Transform. If there are n f) s
5 192 M
(requencies in the window of data,there are n) s
5 181 M
(sinusoids which superimpose to form the original data. In discrete sense, sinusoids partiti) s
5 170 M
(on the data at any time point. Following the) s
5 159 M
(relation between hash functions and integer partitions in https://sites.google.com/site/kuj) s
5 148 M
(a27/IntegerPartitionAndHashFunctions_2014.pdf ,) s
5 137 M
(each of n discrete sinusoid in DFT corresponds to a hash function and the time-series slidi) s
5 126 M
(ng window is an amalgamation of n hash functions.) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(---------------------------------------------) s
5 82 M
(311. \(THEORY\) Pr\(Good\) Majority Voting Circuit, Percolation, PRG choice and Boolean Circuit) s
5 71 M
( Composition  - related to 14, 53.12 and 129) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(---------------------------------------------) s
5 38 M
(Even though Percolation circuit is in Noise Stability Regime with zero sensitivity and 100%) s
5 27 M
( stability, delta term mentioned in matrix) s
5 16 M
(of 14 and 53 \(second column\) need not be zero which could force percolation circuit to be i) s
5 5 M
(n BPNC. Problem is then derandomizing BPNC. \(Open question: Is BPNC in NC/poly?\). Thus LHS ) s
_R
S
%%Page: (150) 150
%%BeginPageSetup
_S
18 36 translate
/pagenum 150 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (150) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(of Pr\(Good\) could be in BPNC which coincides with [Applebaum] NC1 PRG based pseudorandom ch) s
5 731 M
(oice described in - https://5d99cf42-a-62cb3a1a-s-sites.googlegroups.com/site/kuja27/LowerB) s
5 720 M
(oundsForMajorityVotingPseudorandomChoice.pdf and https://5d99cf42-a-62cb3a1a-s-sites.google) s
5 709 M
(groups.com/site/kuja27/IndepthAnalysisOfVariantOfMajorityVotingwithZFAOC_2014.pdf. Boolean ) s
5 698 M
(Function Composition is preferred over Oracle results for Majority Voting circuit which is ) s
5 687 M
(an NC1 circuit with CircuitSAT as inputs for each voter. This is infact "Boolean Circuit Co) s
5 676 M
(mposition" corresponding to Boolean Function Composition.) s
5 654 M
(References:) s
5 643 M
(-----------) s
5 632 M
(311.1 Mathematical Techniques for Analysis of Boolean Functions - [AnnaBernasconi] - 2.8.2 ) s
5 621 M
(Boolean Function Composition - www.di.unipi.it/~annab/tesi.ps.gz) s
5 610 M
(311.2 Properties and Applications of Boolean Function Composition - [AvishayTal] - eccc.hpi) s
5 599 M
(-web.de/report/2012/163/download/) s
5 588 M
(311.3 Boolean Circuit Composition - www.cs.tau.ac.il/~safra/ACT/CCandSpaceB.ppt) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(---------------------------------------) s
5 544 M
(312. \(THEORY\) Circuit SAT lowerbounds for Pr\(Good\) Majority Voting - related 14 and 129) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(---------------------------------------) s
5 511 M
(312.1 RHS of Pr\(Good\) Majority Voting circuit is an NC circuit in composition with CircuitS) s
5 500 M
(AT for each voter. This parallel voting by electorate) s
5 489 M
(requires some kind of barrier synchronization so that input from all voters is available to) s
5 478 M
( NC Majority Circuit. This is a non-trivial overhead) s
5 467 M
(to be ignored because the barrier delay depends on the voter whose decision time is the mos) s
5 456 M
(t. If in worst case the bottleneck voter function is) s
5 445 M
(in EXP then barrier synchronization is also in EXP. It is also assumed that voters decide i) s
5 434 M
(ndependent of each other.) s
5 423 M
(312.2 CircuitSAT is the circuit version of CNF SAT concerned with the bounds for finding sa) s
5 412 M
(tisfying assignments to a circuit to get the output true at root of Circuit DAG.) s
5 401 M
(312.3 An arbitrary Circuit's Satisfiability requires O\(2^0.4058m\) where m is the number of ) s
5 390 M
(gates in Circuit\(i.e. size of circuit\).This bound was proved in [SergeyNurk] - ftp://ftp.pd) s
5 379 M
(mi.ras.ru/pub/publicat/preprint/2009/10-09.pdf.gz. This is very generic bound without conce) s
5 368 M
(rning the complexity classes of voter decisioning function.) s
5 357 M
(312.4 Because of the fact that Pr\(good\) majority voting is a circuit composition with voter) s
5 346 M
( circuit SATs as inputs to NC majority circuit, previous bound applies and estimates the ti) s
5 335 M
(me for each voter's decision to be input to Majority circuit. In other words, a satisfying ) s
5 324 M
(assignment to atleast half of the electorate CircuitSATs has to be found to pronounce a win) s
5 313 M
(ner. Time required to convince a voter is therefore exponential in size of the voter circui) s
5 302 M
(t. For a voter k size of the CircuitSAT is m\(k\) and the time required to satisfy it is O\(2^) s
5 291 M
(0.4058*m\(k\)\).) s
5 280 M
(312.5 Let number of voters be n and number of gates on the average per voter be m. NC1 majo) s
5 269 M
(rity requires O\(logn\) time because n voters input to it at leaf.There are mn gates for all ) s
5 258 M
(voters. Per voter decision requires O\(2^0.4058m\) time in parallel to find a satisfying assi) s
5 247 M
(gnment to atleast n/2 voters for majority to output 1.) s
5 236 M
(312.6 If number of voters is exponential in number of gates per voter then n=2^m which is t) s
5 225 M
(he worst case scenario and is the most realistic, then size of the Majority voting circuit ) s
5 214 M
(in RHS of Pr\(Good\) is m*2^m - exponential in size of per voter circuit. LHS of Pr\(Good\) is ) s
5 203 M
(NC/poly or BPNC percolation circuit while RHS is an exponential circuit \(DC uniform - PH if) s
5 192 M
( depth restricted or EXP if depth unrestricted\)) s
5 181 M
(312.7 In a very generic case, as mentioned in 275, each voter can have a non-boolean voting) s
5 170 M
( function viz., a linear program or constraint satisfaction which is NP if integer-LP and i) s
5 159 M
(s in P if real-LP \(simplex, interior point\). In terms of Oracles circuit for RHS Pr\(Good\) c) s
5 148 M
(an be written as:) s
5 137 M
(        312.7.1 NC^P \(if voting functions are real LP\) and LHS NC/poly or BPNC percolation ) s
5 126 M
(lowerbounds NC^P when both LHS and RHS are of same error) s
5 115 M
(        312.7.2 NC^NP \(if voting functions are integer LP\) and LHS NC/poly or BPNC percolat) s
5 104 M
(ion lowerbounds NC^NP when both LHS and RHS are of same error) s
5 93 M
(312.8 Circuit Size of Pr\(Good\) RHS is non-trivial to determine. All that is known so far is) s
5 82 M
( the bound for CircuitSAT which is O\(2^0.4058m\) where m is number of gates. But number of g) s
5 71 M
(ates itself is an open problem for SAT - it is not known if NP has polynomial size circuits) s
5 60 M
(.) s
5 49 M
(312.9 Assumption 1: Each voter has different variables - set of variables of voters are all) s
5 38 M
( pairwise disjoint.) s
5 27 M
(312.10 If number of voters is arbitrarily huge and if number of voters is exponential in nu) s
5 16 M
(mber of gates per voter SAT, size of RHS is m2^m with unbounded fan-in, unrestricted depth ) s
5 5 M
(most probably and thus in EXP, with AND-OR-NOT gates. Assumption 2: When voters have common) s
_R
S
%%Page: (151) 151
%%BeginPageSetup
_S
18 36 translate
/pagenum 151 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (151) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( variables it implies that they decide in unison. For example if variable x is common to vo) s
5 731 M
(ters v1 and v2, both v1 and v2 assign x=0 or x=1. This is negation of Assumption 1 in 312.9) s
5 720 M
( and Assumption 1 is more realistic than Assumption 2.) s
5 709 M
(312.11 Even if m \(number of gates per voter SAT\) is assumed to be polynomial in number of i) s
5 698 M
(nput variables i.e m=f\(v\) where v is average number of inputs per voter, size of RHS is f\(v) s
5 687 M
(\)*2^f\(v\) - exponential in number of variables. Thus in all probability RHS majority voting ) s
5 676 M
(circuit is exponential DC-uniform circuit in PH or EXP even if NP has polynomial size circu) s
5 665 M
(its. This is a special case with lot of assumptions made in 312.6,312.9 and 312.10.) s
5 654 M
(312.12 If both LHS and RHS of Pr\(Good\) are of zero or equal error, LHS lowerbounds RHS \(an ) s
5 643 M
(assumption made throughout this document - equal error with differing circuit sizes implies) s
5 632 M
( lowerbound\). Here error is the usual \(NoiseSensitivity +/- delta\) on both LHS and RHS. For) s
5 621 M
( percolation circuit in LHS, NoiseSensitivity is zero . But for RHS NoiseSensitivity is unk) s
5 610 M
(nown. With an assumption that RHS has non-zero error, it is a BP.EXP circuit assuming unres) s
5 599 M
(tricted depth of RHS. LHS is NC/poly with zero error, while RHS is BPEXP and thus implies B) s
5 588 M
(PEXP is in NC/poly which resembles BPP in P/poly. If LHS has an error with a PRG choice fun) s
5 577 M
(ction in NC \(e.g Applebaum NC PRG with linear stretch\), LHS would have been a BPNC circuit ) s
5 566 M
(implying BPEXP is in BPNC which is absurd and conflicts with assumption that equal error im) s
5 555 M
(plies lowerbound \(refer 53.9, 53.14 and 53.16\) - this conflict is resolved only if LHS and ) s
5 544 M
(RHS do not have equal error with differing circuit sizes \(and also implies that error depen) s
5 533 M
(ds on circuit size?\).) s
5 522 M
(312.13 Important notion in representing a voter boolean function by a circuit is Hardness w) s
5 511 M
(hich is defined as:) s
5 500 M
(A boolean function f:{0,1}^n->{0,1} is h-hard if there exists a circuit C of size s such th) s
5 489 M
(at for all x in {0,1}^n, Pr\(C\(x\)=f\(x\)\) < h. Narrative above on CircuitSAT for voter boolean) s
5 478 M
( functions is incomplete without knowing how hard is it to compute or approximate the voter) s
5 467 M
( decision function with a circuit of size s. Harder a function, lower the value of h \(0 < h) s
5 456 M
( < 1\). This definition of hardness is far better generalization of computational complexity) s
5 445 M
( of a voter boolean function than identifying with complexity class names. [Yao] XOR Lemma ) s
5 434 M
(is applied to amplify hardness of boolean function by XOR-ing values of f on many randomly ) s
5 423 M
(distributed inputs.) s
5 412 M
(312.14 There are two classes of errors: Voter error + Voting error. Voter error is the Nois) s
5 401 M
(e Sensitivity of a voter boolean function while Voting error is the intrinsic error in voti) s
5 390 M
(ng system itself though user has done nothing wrong. E.g Malfunctioning Electronic Voting M) s
5 379 M
(achines. Voter error is captured by second and third column of matrix in 53.14 while Voting) s
5 368 M
( error is captured by probabilistic truth table of the function - inputs have no effect on ) s
5 357 M
(this error. This implies delta in Pr\(Good\) series error \(NoiseSensitivity +/- delta\) might ) s
5 346 M
(have to account for voting error term also, over and above voter error.) s
5 324 M
(References:) s
5 313 M
(-----------) s
5 302 M
(312.15 Complexity Hardness of Noisy Boolean Functions - http://cstheory.stackexchange.com/q) s
5 291 M
(uestions/18822/hardness-of-noisy-boolean-functions - hardness of a noise-operated boolean f) s
5 280 M
(unction. Has applications to voting error where a voter's decision boolean function is pert) s
5 269 M
(urbed by noise to output a wrong vote. Also, comparability and p-selectivity of a set - [D.) s
5 258 M
(Sivakumar] - http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.648&rep=rep1&type=) s
5 247 M
(pdf and [AgrawalArvind94] on "Polynomial time truth-table reductions to P-selective sets". ) s
5 236 M
(Every voting function \(and ranking function in general\) over n candidates is a p-selector w) s
5 225 M
(ith candidate set being p-selective set because for any two candidates x,y voting function ) s
5 214 M
(makes a choice.) s
5 203 M
(312.16 Hardness of Boolean Functions and Amplification - [RyanODonnell] - https://www.cs.cm) s
5 192 M
(u.edu/~odonnell/boolean-analysis/lecture17.pdf) s
5 181 M
(312.17 Probabilistic Boolean Logic - [LakshmiNBChakrapani-KrishnaPalem] - http://www.ece.ri) s
5 170 M
(ce.edu/~al4/visen/2008ricetr.pdf - Truth table of a boolean function has 1s and 0s with pro) s
5 159 M
(babilities. This captures the notion of error in voting function truth table itself, not ju) s
5 148 M
(st limited to noise correleations of inputs.) s
5 137 M
(312.18 How much a Linear Programming Oracle speedup Polytime algorithms - http://cstheory.s) s
5 126 M
(tackexchange.com/questions/32646/how-much-would-a-sat-oracle-help-speeding-up-polynomial-ti) s
5 115 M
(me-algorithms - Pr\(Good\) majority voting circuit is NC with SAT/LP oracle for each voter.) s
5 104 M
(312.19 Algorithms for Circuits and Circuits for Algorithms - [RyanWilliams] - http://web.st) s
5 93 M
(anford.edu/~rrwill/ICM-survey.pdf - Kolmogorov conjecture based on [ArnoldKolmogorov] answe) s
5 82 M
(r to Hilbert's 13th problem - every continuous function in 3 variables can be expressed as ) s
5 71 M
(finite composition of functions of 2 variables - discrete analog : Is 3SAT expressible as a) s
5 60 M
( finite composition of 2SAT \(which implies composition of P instances yielding NP as counte) s
5 49 M
(rexample\)? A special case majority voting with 3 variables common to all voter functions an) s
5 38 M
(d Non-boolean continuous voting functions in 3 variables precisely has application of Hilbe) s
5 27 M
(rt's 13th problem.) s
5 16 M
(312.20 Depth 3 multilinear circuits - [OdedGoldreich] - http://www.wisdom.weizmann.ac.il/~o) s
5 5 M
(ded/R3/kk.pdf - D-canonical depth-3 circuit is constructed by composition of 2 depth-2 circ) s
_R
S
%%Page: (152) 152
%%BeginPageSetup
_S
18 36 translate
/pagenum 152 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (152) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(uits i.e F=H\(F1,F2,...,Fn\) in Section 1.2. Has strong applications to a Majority voting cir) s
5 731 M
(cuit composition where Fi\(s\) are voting functions and H is Majority function.) s
5 720 M
(312.21 Size hierarchy theorem for circuits - http://cstheory.stackexchange.com/questions/51) s
5 709 M
(10/hierarchy-theorem-for-circuit-size. And also theorems 5.8 and 5.9 in http://www.complexi) s
5 698 M
(ty.ethz.ch/education/Lectures/ComplexityFS12/skript_ch5.pdf - there are functions computabl) s
5 687 M
(e by \(1+o\(1\)\)2^n/n and not computable by circuits of size 2^n/n.) s
5 676 M
(312.22 Size Hierarchy [Lupanov] - Number of functions computable by circuit of size s - Lem) s
5 665 M
(ma 2.1 counting argument - http://eccc.hpi-web.de/resources/pdf/cobf.pdf \(Wegener - pages 8) s
5 654 M
(8-92\)) s
5 643 M
(312.23 Efficient Parallel Computation = NC - [AroraBarak] - http://theory.cs.princeton.edu/) s
5 632 M
(complexity/book.pdf - Theorem 6.24 - Parallel Voting Simulation can be done by massive para) s
5 621 M
(llel processing assuming the input votes are precomputed.) s
5 610 M
(312.24 Size hierarchy of 312.22 in Pr\(Good\) majority voting circuit context implies that nu) s
5 599 M
(mber of functions computable by LHS has to be different from number of functions computable) s
5 588 M
( by RHS when LHS is NC/poly and RHS is PH or EXP i.e if EXP does not have polysize circuits) s
5 577 M
(. The central motivation for equating LHS and RHS of Pr\(Good\) is both sides are 2 algorithm) s
5 566 M
(s to decide same question: Non-majority choice and Majority choice - which is more efficien) s
5 555 M
(t where efficiency implies less error? This motivation therefore leads to assumption stated) s
5 544 M
( in disclaimer earlier: less circuit size implies a lowerbound \(i.e least circuit size of L) s
5 533 M
(HS and RHS is chosen as separating class containing the other\) when errors are equal or les) s
5 522 M
(s.) s
5 511 M
(312.25 If circuit sizes differ in zero-error case on both sides i.e when 100% convergence o) s
5 500 M
(ccurs \(or\) equal error on both sides of series, then by size hierarchy, size\(LHS\) < size\(RH) s
5 489 M
(S\) implies RHS computes functions not possible by LHS and viceversa \(Open question: Does th) s
5 478 M
(is contradict lowerbound assumption? Or is this just a special case because both LHS and RH) s
5 467 M
(S compute same function i.e they answer same question in which case size hierarchy does not) s
5 456 M
( apply which counts all possible functions for specific circuit size?\).) s
5 445 M
(312.26 There is an alternative definition of Boolean function hardness in http://www.math.i) s
5 434 M
(as.edu/~avi/PUBLICATIONS/MYPAPERS/NOAM/HARDNESS/final.pdf \(Section 2.2\) which states hardne) s
5 423 M
(ss = circuit size complexity hardness + approximation hardness.) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(------------------------------------------) s
5 379 M
(313. \(FEATURE-DONE\) Astronomical Sequence Mining based Precipitation Forecast \(from 100 yea) s
5 368 M
(r historic dataset\) - related to 172, 278) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(------------------------------------------) s
5 335 M
(Following the earlier experimental pattern mining done on astronomical datasets and their s) s
5 324 M
(triking correlational coincidence with weather vagaries, below rule search explores highly ) s
5 313 M
(probable heavy precipitation - shows peaks after 29 November 2016 :) s
5 291 M
(python MaitreyaEncHoro_RuleSearch.py  --min_year=2016 --min_month=11 --min_days=15 --min_ho) s
5 280 M
(urs=10 --min_minutes=10 --min_seconds=10 --min_long=77 --min_lat=7 --max_year=2016 --max_mo) s
5 269 M
(nth=12 --max_days=30 --max_hours=10 --max_minutes=10 --max_seconds=10 --max_long=78 --max_l) s
5 258 M
(at=10 |grep "a Class Association") s
5 236 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is) s
5 225 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is) s
5 203 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is ) s
5 181 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is ) s
5 159 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:1:0 " --planet-list } - There is) s
5 137 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:1:0 " --planet-list } - There is) s
5 115 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:1:0 " --planet-list } - There is ) s
5 93 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:1:0 " --planet-list } - There is ) s
5 71 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:2:0 " --planet-list } - There is) s
5 49 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:2:0 " --planet-list } - There is) s
5 27 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:2:0 " --planet-list } - There is ) s
5 5 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (153) 153
%%BeginPageSetup
_S
18 36 translate
/pagenum 153 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (153) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:2:0 " --planet-list } - There is ) s
5 731 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:3:0 " --planet-list } - There is) s
5 709 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:3:0 " --planet-list } - There is) s
5 687 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:3:0 " --planet-list } - There is ) s
5 665 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:3:0 " --planet-list } - There is ) s
5 643 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is) s
5 621 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is) s
5 599 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is ) s
5 577 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is ) s
5 555 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:5:0 " --planet-list } - There is) s
5 533 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:5:0 " --planet-list } - There is) s
5 511 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:5:0 " --planet-list } - There is ) s
5 489 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:5:0 " --planet-list } - There is ) s
5 467 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:6:0 " --planet-list } - There is) s
5 445 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:6:0 " --planet-list } - There is) s
5 423 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:6:0 " --planet-list } - There is ) s
5 401 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:6:0 " --planet-list } - There is ) s
5 379 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:7:0 " --planet-list } - There is) s
5 357 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:7:0 " --planet-list } - There is) s
5 335 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:7:0 " --planet-list } - There is ) s
5 313 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:7:0 " --planet-list } - There is ) s
5 291 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:8:0 " --planet-list } - There is) s
5 269 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:8:0 " --planet-list } - There is) s
5 247 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:8:0 " --planet-list } - There is ) s
5 225 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:8:0 " --planet-list } - There is ) s
5 203 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 8:0:0 " --planet-list } - There is) s
5 181 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 8:0:0 " --planet-list } - There is) s
5 159 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 8:0:0 " --planet-list } - There is ) s
5 137 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 8:0:0 " --planet-list } - There is ) s
5 115 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 8:1:0 " --planet-list } - There is) s
5 93 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 8:1:0 " --planet-list } - There is) s
5 71 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 8:1:0 " --planet-list } - There is ) s
5 49 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 8:1:0 " --planet-list } - There is ) s
5 27 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:2:0 " --planet-list } - There ) s
5 5 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (154) 154
%%BeginPageSetup
_S
18 36 translate
/pagenum 154 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (154) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:2:0 " --planet-list } - There ) s
5 731 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:2:0 " --planet-list } - There i) s
5 709 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:2:0 " --planet-list } - There i) s
5 687 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:3:0 " --planet-list } - There ) s
5 665 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:3:0 " --planet-list } - There ) s
5 643 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:3:0 " --planet-list } - There i) s
5 621 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:3:0 " --planet-list } - There i) s
5 599 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:4:0 " --planet-list } - There ) s
5 577 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:4:0 " --planet-list } - There ) s
5 555 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:4:0 " --planet-list } - There i) s
5 533 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:4:0 " --planet-list } - There i) s
5 511 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:5:0 " --planet-list } - There ) s
5 489 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:5:0 " --planet-list } - There ) s
5 467 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:5:0 " --planet-list } - There i) s
5 445 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:5:0 " --planet-list } - There i) s
5 423 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:6:0 " --planet-list } - There ) s
5 401 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:6:0 " --planet-list } - There ) s
5 379 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:6:0 " --planet-list } - There i) s
5 357 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:6:0 " --planet-list } - There i) s
5 335 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:7:0 " --planet-list } - There ) s
5 313 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:7:0 " --planet-list } - There ) s
5 291 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:7:0 " --planet-list } - There i) s
5 269 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:7:0 " --planet-list } - There i) s
5 247 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:8:0 " --planet-list } - There ) s
5 225 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:8:0 " --planet-list } - There ) s
5 203 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:8:0 " --planet-list } - There i) s
5 181 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:8:0 " --planet-list } - There i) s
5 159 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:0:0 " --planet-list } - There ) s
5 137 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:0:0 " --planet-list } - There ) s
5 115 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:0:0 " --planet-list } - There i) s
5 93 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:0:0 " --planet-list } - There i) s
5 71 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:1:0 " --planet-list } - There ) s
5 49 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:1:0 " --planet-list } - There ) s
5 27 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:1:0 " --planet-list } - There i) s
5 5 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (155) 155
%%BeginPageSetup
_S
18 36 translate
/pagenum 155 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (155) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:1:0 " --planet-list } - There i) s
5 731 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:2:0 " --planet-list } - There ) s
5 709 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:2:0 " --planet-list } - There ) s
5 687 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:2:0 " --planet-list } - There i) s
5 665 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:2:0 " --planet-list } - There i) s
5 643 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:3:0 " --planet-list } - There ) s
5 621 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:3:0 " --planet-list } - There ) s
5 599 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:3:0 " --planet-list } - There i) s
5 577 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:3:0 " --planet-list } - There i) s
5 555 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:4:0 " --planet-list } - There ) s
5 533 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:4:0 " --planet-list } - There ) s
5 511 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:4:0 " --planet-list } - There i) s
5 489 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:4:0 " --planet-list } - There i) s
5 467 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:5:0 " --planet-list } - There ) s
5 445 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:5:0 " --planet-list } - There ) s
5 423 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:5:0 " --planet-list } - There i) s
5 401 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:5:0 " --planet-list } - There i) s
5 379 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:6:0 " --planet-list } - There ) s
5 357 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:6:0 " --planet-list } - There ) s
5 335 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:6:0 " --planet-list } - There i) s
5 313 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:6:0 " --planet-list } - There i) s
5 291 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:7:0 " --planet-list } - There ) s
5 269 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:7:0 " --planet-list } - There ) s
5 247 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:7:0 " --planet-list } - There i) s
5 225 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:7:0 " --planet-list } - There i) s
5 203 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:8:0 " --planet-list } - There ) s
5 181 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:8:0 " --planet-list } - There ) s
5 159 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:8:0 " --planet-list } - There i) s
5 137 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:8:0 " --planet-list } - There i) s
5 115 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:0:0 " --planet-list } - There is) s
5 93 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:0:0 " --planet-list } - There is) s
5 71 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:0:0 " --planet-list } - There is ) s
5 49 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:0:0 " --planet-list } - There is ) s
5 27 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:1:0 " --planet-list } - There is) s
5 5 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (156) 156
%%BeginPageSetup
_S
18 36 translate
/pagenum 156 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (156) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:1:0 " --planet-list } - There is) s
5 731 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:1:0 " --planet-list } - There is ) s
5 709 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:1:0 " --planet-list } - There is ) s
5 687 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:2:0 " --planet-list } - There is) s
5 665 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:2:0 " --planet-list } - There is) s
5 643 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:2:0 " --planet-list } - There is ) s
5 621 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:2:0 " --planet-list } - There is ) s
5 599 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:3:0 " --planet-list } - There is) s
5 577 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:3:0 " --planet-list } - There is) s
5 555 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:3:0 " --planet-list } - There is ) s
5 533 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:3:0 " --planet-list } - There is ) s
5 511 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:4:0 " --planet-list } - There is) s
5 489 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:4:0 " --planet-list } - There is) s
5 467 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:4:0 " --planet-list } - There is ) s
5 445 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:4:0 " --planet-list } - There is ) s
5 423 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:5:0 " --planet-list } - There is) s
5 401 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:5:0 " --planet-list } - There is) s
5 379 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:5:0 " --planet-list } - There is ) s
5 357 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:5:0 " --planet-list } - There is ) s
5 335 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:6:0 " --planet-list } - There is) s
5 313 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:6:0 " --planet-list } - There is) s
5 291 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:6:0 " --planet-list } - There is ) s
5 269 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:6:0 " --planet-list } - There is ) s
5 247 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:7:0 " --planet-list } - There is) s
5 225 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:7:0 " --planet-list } - There is) s
5 203 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:7:0 " --planet-list } - There is ) s
5 181 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:7:0 " --planet-list } - There is ) s
5 159 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:8:0 " --planet-list } - There is) s
5 137 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:8:0 " --planet-list } - There is) s
5 115 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:8:0 " --planet-list } - There is ) s
5 93 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:8:0 " --planet-list } - There is ) s
5 71 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 8:0:0 " --planet-list } - There is) s
5 49 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 8:0:0 " --planet-list } - There is) s
5 27 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 8:0:0 " --planet-list } - There is ) s
5 5 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (157) 157
%%BeginPageSetup
_S
18 36 translate
/pagenum 157 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (157) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 8:0:0 " --planet-list } - There is ) s
5 731 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:1:0 " --planet-list } - There ) s
5 709 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:1:0 " --planet-list } - There ) s
5 687 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:1:0 " --planet-list } - There i) s
5 665 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:1:0 " --planet-list } - There i) s
5 643 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:2:0 " --planet-list } - There ) s
5 621 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:2:0 " --planet-list } - There ) s
5 599 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:2:0 " --planet-list } - There i) s
5 577 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:2:0 " --planet-list } - There i) s
5 555 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:3:0 " --planet-list } - There ) s
5 533 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:3:0 " --planet-list } - There ) s
5 511 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:3:0 " --planet-list } - There i) s
5 489 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:3:0 " --planet-list } - There i) s
5 467 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:4:0 " --planet-list } - There ) s
5 445 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:4:0 " --planet-list } - There ) s
5 423 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:4:0 " --planet-list } - There i) s
5 401 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:4:0 " --planet-list } - There i) s
5 379 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:5:0 " --planet-list } - There ) s
5 357 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:5:0 " --planet-list } - There ) s
5 335 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:5:0 " --planet-list } - There i) s
5 313 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:5:0 " --planet-list } - There i) s
5 291 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:6:0 " --planet-list } - There ) s
5 269 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:6:0 " --planet-list } - There ) s
5 247 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:6:0 " --planet-list } - There i) s
5 225 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:6:0 " --planet-list } - There i) s
5 203 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:7:0 " --planet-list } - There ) s
5 181 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:7:0 " --planet-list } - There ) s
5 159 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:7:0 " --planet-list } - There i) s
5 137 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:7:0 " --planet-list } - There i) s
5 115 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:8:0 " --planet-list } - There ) s
5 93 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:8:0 " --planet-list } - There ) s
5 71 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:8:0 " --planet-list } - There i) s
5 49 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:8:0 " --planet-list } - There i) s
5 27 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:0:0 " --planet-list } - There ) s
5 5 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (158) 158
%%BeginPageSetup
_S
18 36 translate
/pagenum 158 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (158) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:0:0 " --planet-list } - There ) s
5 731 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:0:0 " --planet-list } - There i) s
5 709 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:0:0 " --planet-list } - There i) s
5 687 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:1:0 " --planet-list } - There ) s
5 665 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:1:0 " --planet-list } - There ) s
5 643 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:1:0 " --planet-list } - There i) s
5 621 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:1:0 " --planet-list } - There i) s
5 599 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:2:0 " --planet-list } - There ) s
5 577 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:2:0 " --planet-list } - There ) s
5 555 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:2:0 " --planet-list } - There i) s
5 533 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:2:0 " --planet-list } - There i) s
5 511 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:3:0 " --planet-list } - There ) s
5 489 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:3:0 " --planet-list } - There ) s
5 467 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:3:0 " --planet-list } - There i) s
5 445 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:3:0 " --planet-list } - There i) s
5 423 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:4:0 " --planet-list } - There ) s
5 401 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:4:0 " --planet-list } - There ) s
5 379 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:4:0 " --planet-list } - There i) s
5 357 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:4:0 " --planet-list } - There i) s
5 335 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:5:0 " --planet-list } - There ) s
5 313 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:5:0 " --planet-list } - There ) s
5 291 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:5:0 " --planet-list } - There i) s
5 269 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:5:0 " --planet-list } - There i) s
5 247 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:6:0 " --planet-list } - There ) s
5 225 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:6:0 " --planet-list } - There ) s
5 203 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:6:0 " --planet-list } - There i) s
5 181 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:6:0 " --planet-list } - There i) s
5 159 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:7:0 " --planet-list } - There ) s
5 137 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:7:0 " --planet-list } - There ) s
5 115 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:7:0 " --planet-list } - There i) s
5 93 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:7:0 " --planet-list } - There i) s
5 71 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:8:0 " --planet-list } - There ) s
5 49 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:8:0 " --planet-list } - There ) s
5 27 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:8:0 " --planet-list } - There i) s
5 5 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (159) 159
%%BeginPageSetup
_S
18 36 translate
/pagenum 159 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (159) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:8:0 " --planet-list } - There i) s
5 731 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:0:0 " --planet-list } - There is) s
5 709 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:0:0 " --planet-list } - There is) s
5 687 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:0:0 " --planet-list } - There is ) s
5 665 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:0:0 " --planet-list } - There is ) s
5 643 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:1:0 " --planet-list } - There is) s
5 621 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:1:0 " --planet-list } - There is) s
5 599 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:1:0 " --planet-list } - There is ) s
5 577 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:1:0 " --planet-list } - There is ) s
5 555 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:2:0 " --planet-list } - There is) s
5 533 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:2:0 " --planet-list } - There is) s
5 511 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:2:0 " --planet-list } - There is ) s
5 489 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:2:0 " --planet-list } - There is ) s
5 467 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:3:0 " --planet-list } - There is) s
5 445 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:3:0 " --planet-list } - There is) s
5 423 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:3:0 " --planet-list } - There is ) s
5 401 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:3:0 " --planet-list } - There is ) s
5 379 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:4:0 " --planet-list } - There is) s
5 357 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:4:0 " --planet-list } - There is) s
5 335 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:4:0 " --planet-list } - There is ) s
5 313 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:4:0 " --planet-list } - There is ) s
5 291 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:5:0 " --planet-list } - There is) s
5 269 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:5:0 " --planet-list } - There is) s
5 247 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:5:0 " --planet-list } - There is ) s
5 225 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:5:0 " --planet-list } - There is ) s
5 203 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:6:0 " --planet-list } - There is) s
5 181 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:6:0 " --planet-list } - There is) s
5 159 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:6:0 " --planet-list } - There is ) s
5 137 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:6:0 " --planet-list } - There is ) s
5 115 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:7:0 " --planet-list } - There is) s
5 93 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:7:0 " --planet-list } - There is) s
5 71 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:7:0 " --planet-list } - There is ) s
5 49 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:7:0 " --planet-list } - There is ) s
5 27 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:8:0 " --planet-list } - There is) s
5 5 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (160) 160
%%BeginPageSetup
_S
18 36 translate
/pagenum 160 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (160) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:8:0 " --planet-list } - There is) s
5 731 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:8:0 " --planet-list } - There is ) s
5 709 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:8:0 " --planet-list } - There is ) s
5 687 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:0:0 " --planet-list } - There ) s
5 665 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:0:0 " --planet-list } - There ) s
5 643 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:0:0 " --planet-list } - There i) s
5 621 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:0:0 " --planet-list } - There i) s
5 599 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:1:0 " --planet-list } - There ) s
5 577 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:1:0 " --planet-list } - There ) s
5 555 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:1:0 " --planet-list } - There i) s
5 533 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:1:0 " --planet-list } - There i) s
5 511 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:2:0 " --planet-list } - There ) s
5 489 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:2:0 " --planet-list } - There ) s
5 467 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:2:0 " --planet-list } - There i) s
5 445 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:2:0 " --planet-list } - There i) s
5 423 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:3:0 " --planet-list } - There ) s
5 401 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:3:0 " --planet-list } - There ) s
5 379 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:3:0 " --planet-list } - There i) s
5 357 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:3:0 " --planet-list } - There i) s
5 335 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:4:0 " --planet-list } - There ) s
5 313 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:4:0 " --planet-list } - There ) s
5 291 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:4:0 " --planet-list } - There i) s
5 269 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:4:0 " --planet-list } - There i) s
5 247 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:5:0 " --planet-list } - There ) s
5 225 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:5:0 " --planet-list } - There ) s
5 203 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:5:0 " --planet-list } - There i) s
5 181 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:5:0 " --planet-list } - There i) s
5 159 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:6:0 " --planet-list } - There ) s
5 137 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:6:0 " --planet-list } - There ) s
5 115 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:6:0 " --planet-list } - There i) s
5 93 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:6:0 " --planet-list } - There i) s
5 71 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:7:0 " --planet-list } - There ) s
5 49 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:7:0 " --planet-list } - There ) s
5 27 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:7:0 " --planet-list } - There i) s
5 5 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (161) 161
%%BeginPageSetup
_S
18 36 translate
/pagenum 161 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (161) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:7:0 " --planet-list } - There i) s
5 731 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:8:0 " --planet-list } - There ) s
5 709 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:8:0 " --planet-list } - There ) s
5 687 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:8:0 " --planet-list } - There i) s
5 665 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:8:0 " --planet-list } - There i) s
5 643 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:0:0 " --planet-list } - There ) s
5 621 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:0:0 " --planet-list } - There ) s
5 599 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:0:0 " --planet-list } - There i) s
5 577 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:0:0 " --planet-list } - There i) s
5 555 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:1:0 " --planet-list } - There ) s
5 533 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:1:0 " --planet-list } - There ) s
5 511 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:1:0 " --planet-list } - There i) s
5 489 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:1:0 " --planet-list } - There i) s
5 467 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:2:0 " --planet-list } - There ) s
5 445 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:2:0 " --planet-list } - There ) s
5 423 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:2:0 " --planet-list } - There i) s
5 401 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:2:0 " --planet-list } - There i) s
5 379 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:3:0 " --planet-list } - There ) s
5 357 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:3:0 " --planet-list } - There ) s
5 335 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:3:0 " --planet-list } - There i) s
5 313 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:3:0 " --planet-list } - There i) s
5 291 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:4:0 " --planet-list } - There ) s
5 269 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:4:0 " --planet-list } - There ) s
5 247 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:4:0 " --planet-list } - There i) s
5 225 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:4:0 " --planet-list } - There i) s
5 203 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:5:0 " --planet-list } - There ) s
5 181 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:5:0 " --planet-list } - There ) s
5 159 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:5:0 " --planet-list } - There i) s
5 137 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:5:0 " --planet-list } - There i) s
5 115 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:6:0 " --planet-list } - There ) s
5 93 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:6:0 " --planet-list } - There ) s
5 71 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:6:0 " --planet-list } - There i) s
5 49 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:6:0 " --planet-list } - There i) s
5 27 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:7:0 " --planet-list } - There ) s
5 5 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (162) 162
%%BeginPageSetup
_S
18 36 translate
/pagenum 162 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (162) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:7:0 " --planet-list } - There ) s
5 731 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:7:0 " --planet-list } - There i) s
5 709 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:7:0 " --planet-list } - There i) s
5 687 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:8:0 " --planet-list } - There ) s
5 665 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:8:0 " --planet-list } - There ) s
5 643 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:8:0 " --planet-list } - There i) s
5 621 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:8:0 " --planet-list } - There i) s
5 599 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:0:0 " --planet-list } - There is) s
5 577 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:0:0 " --planet-list } - There is) s
5 555 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:0:0 " --planet-list } - There is ) s
5 533 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:0:0 " --planet-list } - There is ) s
5 511 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:1:0 " --planet-list } - There is) s
5 489 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:1:0 " --planet-list } - There is) s
5 467 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:1:0 " --planet-list } - There is ) s
5 445 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:1:0 " --planet-list } - There is ) s
5 423 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:2:0 " --planet-list } - There is) s
5 401 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:2:0 " --planet-list } - There is) s
5 379 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:2:0 " --planet-list } - There is ) s
5 357 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:2:0 " --planet-list } - There is ) s
5 335 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:3:0 " --planet-list } - There is) s
5 313 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:3:0 " --planet-list } - There is) s
5 291 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:3:0 " --planet-list } - There is ) s
5 269 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:3:0 " --planet-list } - There is ) s
5 247 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:4:0 " --planet-list } - There is) s
5 225 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:4:0 " --planet-list } - There is) s
5 203 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:4:0 " --planet-list } - There is ) s
5 181 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:4:0 " --planet-list } - There is ) s
5 159 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:5:0 " --planet-list } - There is) s
5 137 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:5:0 " --planet-list } - There is) s
5 115 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:5:0 " --planet-list } - There is ) s
5 93 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:5:0 " --planet-list } - There is ) s
5 71 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:6:0 " --planet-list } - There is) s
5 49 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:6:0 " --planet-list } - There is) s
5 27 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:6:0 " --planet-list } - There is ) s
5 5 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (163) 163
%%BeginPageSetup
_S
18 36 translate
/pagenum 163 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (163) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:6:0 " --planet-list } - There is ) s
5 731 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:7:0 " --planet-list } - There is) s
5 709 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:7:0 " --planet-list } - There is) s
5 687 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:7:0 " --planet-list } - There is ) s
5 665 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:7:0 " --planet-list } - There is ) s
5 643 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:8:0 " --planet-list } - There is) s
5 621 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:8:0 " --planet-list } - There is) s
5 599 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:8:0 " --planet-list } - There is ) s
5 577 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:8:0 " --planet-list } - There is ) s
5 555 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:0:0 " --planet-list } - There ) s
5 533 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:0:0 " --planet-list } - There ) s
5 511 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:0:0 " --planet-list } - There i) s
5 489 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:0:0 " --planet-list } - There i) s
5 467 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:1:0 " --planet-list } - There ) s
5 445 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:1:0 " --planet-list } - There ) s
5 423 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:1:0 " --planet-list } - There i) s
5 401 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:1:0 " --planet-list } - There i) s
5 379 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:2:0 " --planet-list } - There ) s
5 357 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:2:0 " --planet-list } - There ) s
5 335 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:2:0 " --planet-list } - There i) s
5 313 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:2:0 " --planet-list } - There i) s
5 291 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:3:0 " --planet-list } - There ) s
5 269 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:3:0 " --planet-list } - There ) s
5 247 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:3:0 " --planet-list } - There i) s
5 225 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:3:0 " --planet-list } - There i) s
5 203 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:4:0 " --planet-list } - There ) s
5 181 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:4:0 " --planet-list } - There ) s
5 159 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:4:0 " --planet-list } - There i) s
5 137 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:4:0 " --planet-list } - There i) s
5 115 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:5:0 " --planet-list } - There ) s
5 93 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:5:0 " --planet-list } - There ) s
5 71 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:5:0 " --planet-list } - There i) s
5 49 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:5:0 " --planet-list } - There i) s
5 27 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:6:0 " --planet-list } - There ) s
5 5 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (164) 164
%%BeginPageSetup
_S
18 36 translate
/pagenum 164 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (164) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:6:0 " --planet-list } - There ) s
5 731 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:6:0 " --planet-list } - There i) s
5 709 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:6:0 " --planet-list } - There i) s
5 687 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:7:0 " --planet-list } - There ) s
5 665 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:7:0 " --planet-list } - There ) s
5 643 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:7:0 " --planet-list } - There i) s
5 621 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:7:0 " --planet-list } - There i) s
5 599 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:8:0 " --planet-list } - There ) s
5 577 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:8:0 " --planet-list } - There ) s
5 555 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:8:0 " --planet-list } - There i) s
5 533 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:8:0 " --planet-list } - There i) s
5 511 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:0:0 " --planet-list } - There ) s
5 489 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:0:0 " --planet-list } - There ) s
5 467 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:0:0 " --planet-list } - There i) s
5 445 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:0:0 " --planet-list } - There i) s
5 423 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:1:0 " --planet-list } - There ) s
5 401 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:1:0 " --planet-list } - There ) s
5 379 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:1:0 " --planet-list } - There i) s
5 357 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:1:0 " --planet-list } - There i) s
5 335 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:2:0 " --planet-list } - There ) s
5 313 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:2:0 " --planet-list } - There ) s
5 291 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:2:0 " --planet-list } - There i) s
5 269 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:2:0 " --planet-list } - There i) s
5 247 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:3:0 " --planet-list } - There ) s
5 225 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:3:0 " --planet-list } - There ) s
5 203 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 192 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:3:0 " --planet-list } - There i) s
5 181 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 170 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:3:0 " --planet-list } - There i) s
5 159 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 148 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:4:0 " --planet-list } - There ) s
5 137 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 126 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:4:0 " --planet-list } - There ) s
5 115 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 104 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:4:0 " --planet-list } - There i) s
5 93 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 82 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:4:0 " --planet-list } - There i) s
5 71 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 60 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:5:0 " --planet-list } - There ) s
5 49 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 38 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:5:0 " --planet-list } - There ) s
5 27 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 16 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:5:0 " --planet-list } - There i) s
5 5 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (165) 165
%%BeginPageSetup
_S
18 36 translate
/pagenum 165 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (165) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:5:0 " --planet-list } - There i) s
5 731 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 720 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:6:0 " --planet-list } - There ) s
5 709 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 698 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:6:0 " --planet-list } - There ) s
5 687 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 676 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:6:0 " --planet-list } - There i) s
5 665 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 654 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:6:0 " --planet-list } - There i) s
5 643 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 632 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:7:0 " --planet-list } - There ) s
5 621 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 610 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:7:0 " --planet-list } - There ) s
5 599 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 588 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:7:0 " --planet-list } - There i) s
5 577 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 566 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:7:0 " --planet-list } - There i) s
5 555 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 544 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:8:0 " --planet-list } - There ) s
5 533 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 522 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:8:0 " --planet-list } - There ) s
5 511 M
(is a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 500 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:8:0 " --planet-list } - There i) s
5 489 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 478 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:8:0 " --planet-list } - There i) s
5 467 M
(s a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 456 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:4:0 7:0:0 " --planet-list } - There is) s
5 445 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 434 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:4:0 7:0:0 " --planet-list } - There is) s
5 423 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 412 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:4:0 7:0:0 " --planet-list } - There is ) s
5 401 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 390 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:4:0 7:0:0 " --planet-list } - There is ) s
5 379 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 368 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:4:0 7:1:0 " --planet-list } - There is) s
5 357 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 346 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:4:0 7:1:0 " --planet-list } - There is) s
5 335 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 324 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:4:0 7:1:0 " --planet-list } - There is ) s
5 313 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 302 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:4:0 7:1:0 " --planet-list } - There is ) s
5 291 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 280 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:4:0 7:2:0 " --planet-list } - There is) s
5 269 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 258 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:4:0 7:2:0 " --planet-list } - There is) s
5 247 M
( a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 236 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:4:0 7:2:0 " --planet-list } - There is ) s
5 225 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 214 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:4:0 7:2:0 " --planet-list } - There is ) s
5 203 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(-------------------------------------------------) s
5 159 M
(314. \(THEORY\) Pseudorandomness, Voter Decision Error and lambda-tolerant Randomized Decisio) s
5 148 M
(n Trees of Voter Boolean Functions) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(-------------------------------------------------) s
5 115 M
(Pseudorandom generators are those which stretch a seed l\(n\) to n : f:{0,1}^l\(n\)->{0,1}^n in) s
5 104 M
(distinguishable from perfect random source) s
5 93 M
(with bounded error. References 314.1 and 314.2 describe a counting argument to show that th) s
5 82 M
(ere are PRGs. For a seed length d there are 2^d possible strings stretched to length n. For) s
5 71 M
( a single random string the probability that a circuit or an algorithm distinguishes it fro) s
5 60 M
(m perfect random source is e. By iterating over all 2^d strings generated by a PRG the expe) s
5 49 M
(cted fraction of strings distinguished is e*2^d where each iteration is a random variable w) s
5 38 M
(ith probability e and follows from union of expectations - E\(sigma\(Xi\)\) = E\(X1\) + E\(X2\) + .) s
5 27 M
(.. + E\(X\(2^d\)\) = sigma\(Xi*e\). Probability that there are tails where deviation from this ex) s
5 16 M
(pected value is less than e so that indistinguishability is preserved is by Chernoff bounds) s
5 5 M
(: Pr\(sigma\(Xi\)-mean > delta*mean\) <= 2*exp\(-delta^2*mean/3\) where 0 < delta < 1 and e=delta) s
_R
S
%%Page: (166) 166
%%BeginPageSetup
_S
18 36 translate
/pagenum 166 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (166) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(*mean. Substituting for mean, this Probability <= 2*exp\(-2^d*e*delta^2/3\). For all possible) s
5 731 M
( algorithms or circuits of size s which could be 2^s, by union bound cumulative probability) s
5 720 M
( is 2^s*2*exp\(-2^d*e*delta^2/3\) < 1. It implies probability of distinguishability is < 1 an) s
5 709 M
(d there should be a lurking PRG which achieves indistinguishability. This previous descript) s
5 698 M
(ion is mooted to connect PRGs with Voter Decision Error. Voters have a boolean decision fun) s
5 687 M
(ction in Pr\(Good\) majority voting circuit. Alternatively each voter decides by evaluating t) s
5 676 M
(he leaves of the boolean decision tree of the corresponding function. Randomized decision t) s
5 665 M
(rees allow randomness by allowing coin tosses to choose the next edge in decision tree. Ref) s
5 654 M
(erence 314.3 describes a decision tree evaluation by voter which allows error by including ) s
5 643 M
(decision tree choices not necessarily belonging to the voter. That is, voter errs in judgem) s
5 632 M
(ent during decision process wherein \(pseudo\)random error pollutes his/her discretion. This ) s
5 621 M
(formalizes the notion of Voting error \(analogous somewhat to Probabilistic CNFs\). The level) s
5 610 M
( of error probability to what decision tree deviates is upperbounded by lambda and called a) s
5 599 M
(s lambda-tolerance. There are known results which bound the error-free decision tree comple) s
5 588 M
(xity and erring decision tree complexity. Quoting 314.3, "...The possible algorithms can ou) s
5 577 M
(tput anything. The mistake can be either way...". 1-way error occurs in one direction - 1 i) s
5 566 M
(s output instead of 0 while 2-way error occurs in both directions - 1 for 0 and 0 for 1. Th) s
5 555 M
(is error is intrinsic to the decision process itself not just limited to sensitivity measur) s
5 544 M
(es which depend on flipped inputs affecting outputs. Thus if error is modelled as a functio) s
5 533 M
(n of PRGs, error in voting process as a whole implies existence of PRGs. For example above ) s
5 522 M
(distinguisher can be mapped to a voter who fails to distinguish two candidates with differi) s
5 511 M
(ng goodness - voter is fooled - a less merited candidate if had access to the intrinsic PRG) s
5 500 M
( that vitiates the decision tree evaluation can exploit the voter's flawed decision tree.) s
5 478 M
(References:) s
5 467 M
(-----------) s
5 456 M
(314.1 Definition of Pseudorandomness - Simpler Distinguisher - http://people.seas.harvard.e) s
5 445 M
(du/~salil/pseudorandomness/prgs.pdf - Page 217 and Proposition 7.8 in Page 218) s
5 434 M
(314.2 Definition of Pseudorandomness - Counting argument - http://www.cse.iitk.ac.in/users/) s
5 423 M
(manindra/survey/complexity25.pdf - Page 3 - Definition 21) s
5 412 M
(314.3 Lambda-tolerant Randomized Boolean Decision Trees - https://www.math.u-szeged.hu/~haj) s
5 401 M
(nal/research/papers/dec_surv.gz - Page 5) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(---------------------) s
5 357 M
(315. \(FEATURE-DONE and BUG-STABILITY ISSUES\) NeuronRain AsFer Commits for Virgo Linux - Com) s
5 346 M
(mits - 25 August 2016) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(---------------------) s
5 313 M
(Kernel Panic investigation for boost::python c++ invocations of Virgo System Calls) s
5 302 M
(------------------------------------------------------------------------------------------) s
5 291 M
(1.Python code in AsFer that invokes Virgo Linux system calls by boost::python C++ bindings ) s
5 280 M
(is being investigated further for mystery and random crashes that occur after system call c) s
5 269 M
(ode and driver end code is finished.) s
5 258 M
(2.kern.log with 3 iterations of virgo_malloc\(\)+virgo_set\(\)+virgo_get\(\) invocations succeede) s
5 247 M
(d by panics in random points at kernel has been committed.) s
5 236 M
(3.Logs also contain the gdb vmlinux debugging showing line numbers within kernel source whe) s
5 225 M
(re panics occur. Prima facie look unrelated directly to virgo system calls and driver code.) s
5 214 M
( Debugging through KVM+QEMU is ruled out because of lack of VT-x.) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(---------------------) s
5 170 M
(316. \(FEATURE-DONE and BUG-STABILITY ISSUES\) NeuronRain AsFer Commits for Virgo Linux - Com) s
5 159 M
(mits - 26 August 2016) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(---------------------) s
5 126 M
(Kernel Panic investigation for boost::python c++ invocations of Virgo System Calls) s
5 115 M
(------------------------------------------------------------------------------------------) s
5 104 M
(kern.log with panic in FS code after boost::python C++ AsFer-VIRGO Linux system calls invoc) s
5 93 M
(ations) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(--------------------------------------) s
5 49 M
(317. \(THEORY\) Generic Definitions of Majority and Non-majority Choice Errors and some contr) s
5 38 M
(adictions - related to 14 and 53.14) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(--------------------------------------) s
5 5 M
(Majority Voting Social Choice has usual meaning of aggregation of for and against votes. No) s
_R
S
%%Page: (167) 167
%%BeginPageSetup
_S
18 36 translate
/pagenum 167 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (167) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(n-majority Social Choice can be in two) s
5 731 M
(flavours:) s
5 720 M
(        317.1 Pseudorandom Choice - a Pseudorandom Generator chooses a voting function from) s
5 709 M
( a set of Voting functions of electorate) s
5 698 M
(        317.2 Social choice by ranking - set of boolean functions are ranked ascending in t) s
5 687 M
(heir error probabilities and least error boolean function is chosen.) s
5 665 M
(--------------------) s
5 654 M
(Algorithm for 317.1:) s
5 643 M
(--------------------) s
5 632 M
(There are pseudorandom generators in NC\(Applebaum PRG, Parallel PRGs etc.,\) which choose a ) s
5 621 M
(boolean function at random. This chosen boolean function can be Percolation boolean functio) s
5 610 M
(n too which is again in non-uniform NC. Thus Non-majority social choice can be done in BPNC) s
5 599 M
( as below:) s
5 588 M
(        - Invoke a PRG in NC or P to obtain pseudorandom bits X.) s
5 577 M
(        - Choose an element in electorate indexed by X.) s
5 566 M
(        - Goodness of LHS is equal to the goodness of chosen element.) s
5 544 M
(LHS is BPNC algorithm to RHS BPEXP Condorcet Jury Theorem \(CJT\) unbounded circuit and if CJ) s
5 533 M
(T converges to 1 in RHS and Goodness of PRG choice is 1, LHS is a BPNC algorithm to EXP RHS) s
5 522 M
(.) s
5 500 M
(--------------------) s
5 489 M
(Algorithm for 317.2:) s
5 478 M
(--------------------) s
5 467 M
(        - foreach\(voter\)) s
5 456 M
(        - {) s
5 445 M
(        -       Interview the voter boolean function : Rank the voters by merit \(error prob) s
5 434 M
(abilities e.g noise stability\)) s
5 423 M
(        - }) s
5 412 M
(        - choose the topmost as non-majority social choice) s
5 390 M
(LHS is a PSPACE-complete algorithm and RHS is either BPEXP or EXP algorithm depending on co) s
5 379 M
(nvergence or divergence of Goodness of CJT circuit in RHS. Goodness of LHS is the error pro) s
5 368 M
(bability of topranked boolean voter function.) s
5 346 M
(Above loop can be parallelized and yet it is in PSPACE. Proof of CJT circuit in RHS to be E) s
5 335 M
(XP-complete would immediately yield a lowerbound and either EXP is in BPNC or EXP is in PSP) s
5 324 M
(ACE under equal goodness assumption in LHS and RHS. EXP in PSPACE implies EXP=PSPACE becaus) s
5 313 M
(e PSPACE is in EXP. An EXPTIME problem is EXP-Complete if it can solve Exponential Time Bou) s
5 302 M
(nded Halting Problem \(i.e output 1 if a Turing Machine halts after exponential number of st) s
5 291 M
(eps\). Unbounded depth RHS CJT Majority voting composition circuit \(Majority+SAT\) is in EXPT) s
5 280 M
(IME. Following reduction from Majority voting to Bounded Halting Problem is a proof outline) s
5 269 M
( for EXP-completeness of CJT circuit:) s
5 258 M
(        \(*\) Let there be exponential number of voters \(i.e exponential in number of variabl) s
5 247 M
(es\)) s
5 236 M
(        \(*\) Number of voters = Number of steps in Bounded Halting Problem input Turing Mach) s
5 225 M
(ine = exponential) s
5 214 M
(        \(*\) Voting halts when all exponential voters have exercised franchise applying thei) s
5 203 M
(r SAT = EXPTIME Turing Machine Halts after exponential number of steps.) s
5 181 M
(If there are n boolean functions in total and probability that a boolean function i with go) s
5 170 M
(odness e\(i\) is chosen is:) s
5 159 M
(        = x\(e\(i\)\)/n, where x\(e\(i\)\) is the number of boolean functions with goodness e\(i\)) s
5 148 M
(When voter boolean functions have unequal error probabilities, the distribution is Poisson ) s
5 137 M
(Binomial \(which is for bernoulli trials with unequal probabilities for each event\) and not ) s
5 126 M
(Binomial or Poisson\(which is the limit of Binomial distribution\). This fraction is the LHS ) s
5 115 M
(and in special case can be 1 when all boolean functions are of same goodness \(1-error\) prob) s
5 104 M
(ability. Thus LHS goodness is conditional probability x\(e\(i\)\)/n * e\(i\) and can be 1 when al) s
5 93 M
(l boolean functions are perfect.) s
5 71 M
(Thus most generic Majority voting case is when:) s
5 60 M
(        317.3 Voters have unequal decision errors) s
5 49 M
(        317.4 Set of voter boolean functions is an assorted mix of varied error probabiliti) s
5 38 M
(es ranging from 0 to 1.) s
5 27 M
(        317.5 Modelled by Poisson Binomial Distribution) s
5 5 M
(In both Majority and Non-majority Choice, error of a boolean function comprises:) s
_R
S
%%Page: (168) 168
%%BeginPageSetup
_S
18 36 translate
/pagenum 168 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (168) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        317.6 Voting Error - Misrecorded votes, Probabilistic CNFs) s
5 731 M
(        317.7 Voter Error - Noise Sensitivity of boolean function which has extraneous reas) s
5 720 M
(ons like correlated flipped bit strings and Error intrinsic to boolean function in Decision) s
5 709 M
( tree evaluation \(lambda-tolerant randomized decision trees\) mentioned in 314.) s
5 698 M
(Randomized decision tree evaluation in 317.7 adds one additional scenario to error matrix o) s
5 687 M
(f 8 possibilities in 14 and 53.14 which is beyond just correlation error.) s
5 665 M
(As mentioned elsewhere in this document and disclaimer earlier, LHS circuit is a lowerbound) s
5 654 M
( to RHS circuit for a C-complete class of problems when errors are equal, assuming complete) s
5 643 M
( problems exist for class C. When both LHS and RHS have errors, which is the most realistic) s
5 632 M
( case, LHS is a BPNC circuit and RHS is a BPEXP circuit with unrestricted depth of exponent) s
5 621 M
(ial sized circuit. This raises a contradiction to already known result as follows: BPP is n) s
5 610 M
(ot known to have complete problems. [Marek Karpinski and Rutger Verbeek - KV87] show that B) s
5 599 M
(PEXP is not in BPP and EXP is in BPEXP. If there are BPEXP-complete problems then contradic) s
5 588 M
(tion is LHS is a BPNC algorithm to RHS BPEXP-complete problem. But BPNC is in BPP \(logdepth) s
5 577 M
(, polysize circuit with error can be simulated in polytime with error\) and BPEXP is not in ) s
5 566 M
(BPP. This contradiction is resolved only if there are no BPEXP-complete problems or there a) s
5 555 M
(re no BPNC/BPEXP voting functions.) s
5 533 M
(From https://www.math.ucdavis.edu/~greg/zoology/diagram.xml, following chain of inclusions ) s
5 522 M
(are known:) s
5 511 M
(        NC in BPNC in RNC in QNC in BQP in DQP in EXP) s
5 500 M
(        RP in BPP in BQP in DQP in EXP) s
5 478 M
(If LHS is a BPNC or RNC or BPP or RP pseudorandom algorithm to unbounded CJT RHS EXP-comple) s
5 467 M
(te problem under equal goodness assumption, previous class containments imply a drastic col) s
5 456 M
(lapse of EXP below:) s
5 445 M
(        EXP=BPNC \(or\) EXP=RNC \(or\) EXP=RP \(or\) EXP=BPP) s
5 434 M
(This is rather a serious collapse because the containments include Quantum classes BQP and ) s
5 423 M
(QNC, implying classical parallelism is equivalent to quantum parallelism . One of the inter) s
5 412 M
(pretations to Quantum parallelism is "Many Worlds" - computations happen in parallel \(state) s
5 401 M
(s of the wave function\) and interfere construnctively or destructively \(superposition of wa) s
5 390 M
(ve functions when some state amplitudes cancel out while others reinforce\) to curtail some ) s
5 379 M
(of the worlds. This special case occurs only if all voters have decision correctness probab) s
5 368 M
(ility p=1. For 1 > p > 0.5, RHS CJT circuit goodness converges to 1 for infinite electorate) s
5 357 M
( but LHS expected goodness of Pseudorandom social choice is always less than 1, infact tend) s
5 346 M
(s to 0 as N is infinite as below. Referring to 359:) s
5 335 M
(        Let number of voter decision functions with goodness xi = m\(xi\). Thus N = m\(x1\)+m\(x) s
5 324 M
(2\)+m\(x3\)+...+m\(xn\)) s
5 313 M
(        Expected goodness of a PRG choice is:) s
5 302 M
(                1/N * summation\(xi*m\(xi\)\) = \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\) + ... + xn*m\(xn) s
5 291 M
(\)\) / N) s
5 280 M
(        When all voter functions have goodness 1 then PRG choice in LHS of P\(good\) has good) s
5 269 M
(ness 1.) s
5 258 M
(For p=0.5, RHS goodness is 0.5 and LHS goodness is 0.5 => LHS is in BPNC or RNC or RP or BP) s
5 247 M
(P and RHS is BPEXP. If RHS is BPEXP-complete, as mentioned previously, contradicts result o) s
5 236 M
(f [KV87], implying BPEXP=BPP. For p < 0.5, RHS CJT series goodness tends to 0 while LHS pse) s
5 225 M
(udorandom chouce expected goodness is always > 0. Thus only feasible lowerbound looks to be) s
5 214 M
(:) s
5 203 M
(        EXP=BPNC \(or\) EXP=RNC \(or\) EXP=RP \(or\) EXP=BPP) s
5 192 M
(when goodness p=1 uniformly for all infinite homogeneous electorate.) s
5 170 M
(References:) s
5 159 M
(----------) s
5 148 M
(317.8 Derandomization Overview - [Kabanets] - http://www.cs.sfu.ca/~kabanets/papers/derand_) s
5 137 M
(survey.pdf) s
5 126 M
(317.9 Unconditional Lowerbounds against advice - [BuhrmanFortnowSanthanam] - http://homepag) s
5 115 M
(es.inf.ed.ac.uk/rsanthan/Papers/AdviceLowerBoundICALP.pdf) s
5 104 M
(317.10 EXPTIME-Completeness - [DingZhuDu-KerIKo] - Theory of Computational Complexity - htt) s
5 93 M
(ps://books.google.co.in/books?id=KMwOBAAAQBAJ&pg=PT203&redir_esc=y#v=onepage&q&f=false) s
5 82 M
(317.11 BPP with advice - http://people.cs.uchicago.edu/~fortnow/papers/advice.pdf - "...It ) s
5 71 M
(can be shown using a translation argument that BPEXP is not in BPP [KV87], but this transla) s
5 60 M
(tion argument does not extend to showing a lower bound against advice. Since BPP and BPEXP ) s
5 49 M
(are semantic classes, it is unknown whether for instance BPEXP \342\\212\\206 BPP/1 implies BPEX) s
5 38 M
(P/1 \342\\212\\206 BPP/2.". LHS pseudorandom social choice algorithm is non-uniform because rand) s
5 27 M
(omly choosing an element from a varying number of electorate requires maximum size of elect) s
5 16 M
(orate as advice. ) s
_R
S
%%Page: (169) 169
%%BeginPageSetup
_S
18 36 translate
/pagenum 169 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (169) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(------------------------------------) s
5 720 M
(318. \(THEORY\) Yao's XOR Lemma, Hardness of Pr\(Good\) Majority Voting Function Circuit and Ma) s
5 709 M
(jority Version of XOR Lemma) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(------------------------------------) s
5 676 M
(Caution: Majority Hardness Lemma derivation is still experimental with possible errors.) s
5 654 M
(Hardness of a boolean function is defined as how hard computationally it is to compute the ) s
5 643 M
(function with a circuit of size s:) s
5 632 M
(        if Pr\(C\(x\) != f\(x\)\) = delta where C\(x\) computes boolean function f\(x\), then f\(x\) de) s
5 621 M
(lta-hard.) s
5 610 M
(Majority function is known to have formula of size O\(n^5.3\) - from Sorting networks of [Ajt) s
5 599 M
(aiKomlosSzemeredi] and non-constructive proof by[Valiant]. Majority is computable in log-de) s
5 588 M
(pth and hence in non-uniform NC1.) s
5 566 M
(Hardness Amplification result by [AndrewYao] states that a strongly-hard boolean function c) s
5 555 M
(an be constructed from mildly-hard boolean function by amplification of hardness using XOR ) s
5 544 M
(of multiple instances of function on some distribution of inputs. Following derivation deve) s
5 533 M
(lops intuition for amplification in XOR lemma:) s
5 522 M
(        318.1 Let f be a boolean function with delta-hardness. Therefore there is a circuit) s
5 511 M
( C\(x\) with size s,such that Pr\(C\(x\)!=f\(x\)\)=delta. XOR lemma states that there is a circuit ) s
5 500 M
(C1\(x\) with size s1, such that Pr\(C1\(x\)!=f1\(x\)\) tends to 0.5 > delta where f1\(x\) = f\(x1\) XOR) s
5 489 M
( f\(x2\) XOR ... XOR f\(xk\) for some distribution of inputs x1,x2,x3,...xk.) s
5 478 M
(        318.2 Each f\(xi\) in XOR function f1 in 318.1, is either flipped or not flipped. Let) s
5 467 M
( Zi be the random variable for flip of f\(xi\) - Zi=0 if there is no flip and Zi=1 if there i) s
5 456 M
(s a flip using coin toss. Now the probability of correctly computing XOR of f\(xi\)s is equal) s
5 445 M
( to the sum = Probability that none of f\(xi\)s are flipped + Probability that even number of) s
5 434 M
( f\(xi\) is flipped. Even flips do not alter XOR outcome while odd flips do. This is nothing ) s
5 423 M
(but Pr[Z1 XOR Z2 XOR Z3 XOR ... Zk = 0] because even flips cause XOR of Zi=1 to zero. If \(1) s
5 412 M
(-2*delta\) is probability of no flip and 2*delta is probability of a flip, for all Zi\(s\) Pr\() s
5 401 M
(XOR is correctly computed\) = \(1-2*delta\)^k + 0.5*\(1-\(1-2*delta\)^k\). The second term is halv) s
5 390 M
(ed because probability of even number of flips is required whereas atleast 1 flip implies b) s
5 379 M
(oth \(odd+even\).) s
5 368 M
(        318.3 Pr\(Good\) majority voting boolean function computes composition of Majority fu) s
5 357 M
(nction with Voting functions of individual voters. This can be expressed as: Majn\(f1,f2,f3,) s
5 346 M
(...fn\) for n voters. Till now hardness of this composition is not known in literature. Expe) s
5 335 M
(rimentally, following derivation computes hardness of this composition as below.) s
5 324 M
(        318.4 For simplicity, it is assumed that all voters have same boolean function with) s
5 313 M
( hardness delta computable by circuit size s.) s
5 302 M
(        318.5 Majority function makes error when the inputs are flipped by some correlation) s
5 291 M
(. This Probability that Pr\(Maj\(x\) != Maj\(y\)\) for two correlated strings x and y is termed a) s
5 280 M
(s Noise Sensitivity. This together with the probability that a circuit with access to pseud) s
5 269 M
(orandom bits incorrectly computes majority function is an estimate of how flawed majority v) s
5 258 M
(oting is\(denoted as randomerror\). Then probability that Majority function is correctly comp) s
5 247 M
(uted is 1-NoiseSensitivity\(Majn\) - randomerror . This implies majority function is in BPNC ) s
5 236 M
(if there is a parallel voting.) s
5 225 M
(        318.6 Noise Sensitivity of Majority function is O\(1/sqrt\(n*epsilon\)\) where epsilon ) s
5 214 M
(is probability of flip per bit. Therefore epsilon is nothing but probability that a voter b) s
5 203 M
(oolean function is incorrectly computed and sent as input to Majority function. This implie) s
5 192 M
(s Pr\(f\(x\) != C\(x\)\) = delta = epsilon = hardness of all voter functions.) s
5 181 M
(        318.7 Probability that Majority function is computed incorrectly = NoiseSensitivity) s
5 170 M
( +/- randomerror = [c/sqrt\(n*epsilon\)] +/- randomerror = [c/sqrt\(n*delta\) +/- randomerror ]) s
5 159 M
( which is the hardness of Majority+VoterFunctions composition. \(Related: points 14, 53.14 a) s
5 148 M
(nd 355 for BP* error scenarios matrix which picturises overlap of Noise Sensitivity and Err) s
5 137 M
(or\)) s
5 126 M
(        318.8 Above derivation,if error-free,is the most important conclusion derivable for) s
5 115 M
( hardness of Pr\(Good\) majority voting boolean function circuit composition. Hardness of RHS) s
5 104 M
( of Pr\(Good\) Majority Voting circuit is expressed in terms of hardness of individual voter ) s
5 93 M
(boolean functions.) s
5 82 M
(        318.9 Therefore from 318.7, Pr\(C\(Majn\(f\(x1\),f\(x2\),...,f\(n\)\) != Majn\(f\(x1\),f\(x2\),...) s
5 71 M
(,f\(n\)\)] = [c/sqrt\(n*delta\) +/- randomerror] is the probability that how incorrectly a circu) s
5 60 M
(it of size s1 computes Majn+VoterFunction composition = hardness of majority+voter composit) s
5 49 M
(ion.) s
5 38 M
(        318.10 Hardness is amplified if [c/sqrt\(n*delta\) +/- randomerror] >= delta as follo) s
5 27 M
(ws:) s
5 5 M
(                Hardness of Maj+voter composition       [c/sqrt\(n*delta\)] +/- randomerror) s
_R
S
%%Page: (170) 170
%%BeginPageSetup
_S
18 36 translate
/pagenum 170 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (170) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                -----------------------------------  =  ------------------------------  >> ) s
5 731 M
( 1) s
5 720 M
(                Hardness of voter function                  delta) s
5 698 M
(        318.11 Let randomerror=r. From above, [c/sqrt\(n*delta\) +/- r] / delta must be >> 1 ) s
5 687 M
(for hardness amplification.     For large n, this limit tends to r/delta >> 1 implying erro) s
5 676 M
(r in majority circuit has to be huge for large electorate compared to error in voter boolea) s
5 665 M
(n function SATs for hardness amplification. Caveat: There are scenarios where numerator is ) s
5 654 M
(comparably equal to denominator and hardness amplification may not occur. From error scenar) s
5 643 M
(ios matrix in 355,relation between error and noise can be precisely defined as: Error = Noi) s
5 632 M
(se + \(column2 error entries\) - \(column3 no error entries\) where randomerror = r = \(column2 ) s
5 621 M
(error entries\) - \(column3 no error entries\) which substituted in amplification becomes:) s
5 599 M
(     Hardness of Maj+voter composition       [c/sqrt\(n*delta\)] + [sum\(column2 error entries) s
5 588 M
(\)] - [sum\(column3 no error entries\)] ) s
5 577 M
(    -----------------------------------  =  -----------------------------------------------) s
5 566 M
(-----------------------------------   >>  1) s
5 555 M
(         Hardness of voter function                                             delta) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(------------------------------------------------) s
5 511 M
(For large n, c/sqrt\(n*delta\) tends to 0 and If [sum\(column2 error entries\) -  sum\(column3 n) s
5 500 M
(o error entries\)] >> delta then following applies: ) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(------------------------------------------------) s
5 467 M
(        318.12 318.11 implies that for weakly hard functions \(low delta\), if quantity in nu) s
5 456 M
(merator \(hardness of majority+voter composition\) is considerably huge compared to hardness ) s
5 445 M
(of individual voter functions, hardness is amplified .) s
5 434 M
(        318.13 318.11 also implies that Majority+Voter composition is extremely hard to com) s
5 423 M
(pute concurring with exponential circuit size \(PH=DC or EXP-completeness\) of Pr\(Good\) RHS.) s
5 412 M
(        318.14 Being extremely hard implies that RHS of Pr\(Good\) could be one-way function.) s
5 401 M
( One-way functions are hard to invert defined formally as:) s
5 390 M
(                Pr\(f\(f_inverse\(y\)\)=f\(x\)\) is almost 0.) s
5 379 M
(For example inverse for Pr\(Good\) majority voting function is the one that returns set of al) s
5 368 M
(l voters who voted for a candidate to win. This implies that any electoral process has to b) s
5 357 M
(e one-way function hard so that secret balloting is not in jeopardy and finding such invers) s
5 346 M
(e for majority has to be hardest. Similarity of definition of one-way function and hardness) s
5 335 M
( of boolean functions is obvious. Hardness for majority derived previously is for forward c) s
5 324 M
(omposition direction which itself is high.) s
5 313 M
(        318.15 Conjecture: Circuit for reverse direction \(i.e decomposition of majority to ) s
5 302 M
(voters who voted in favour\) is considerably harder than composition and thus Majority\(n\)+Vo) s
5 291 M
(ter composition is an one-way function. An intuitive proof of this conjecture: Search for a) s
5 280 M
(ll permutations of voters who voted in favour which is of size O\(2^n\) - equivalent to solvi) s
5 269 M
(ng SAT of Majority function boolean formula to find assignments which is counting problem a) s
5 258 M
(nd is #P-Complete. Indices of 1s in the assignment strings are the voter permutations. Next) s
5 247 M
( step is to find satisfying assignments to individual voter SATs which is also #P-Complete.) s
5 236 M
( This completely inverts the Majority+Voter composition and cumulatively is atleast #P-Comp) s
5 225 M
(lete. While the forward direction is composition of NC instance to voter SATs bottom-up, in) s
5 214 M
(verse is harder because it is completely #P-Complete top-down.) s
5 203 M
(        318.16 Huge hardness of Pr\(Good\) RHS also implies that very strong pseudorandom num) s
5 192 M
(ber generators can be constructed from it.) s
5 181 M
(        318.17 The counting problem in 318.15 finds all possible permutations of voters who) s
5 170 M
( could have voted in favour while what is required is the exact permutation which caused th) s
5 159 M
(is majority outcome. From this, probability of finding exact permutation of voting pattern ) s
5 148 M
(= 1/#SAT = 1/number_of_sat_assignments_to_MajoritySAT. This counting and search problem is ) s
5 137 M
(defined as function Majorityinverse\(1\)=\(v1,v2,v3,...vn\) and returns the exact permutation o) s
5 126 M
(f voters who voted for Majority outcome to be 1.) s
5 115 M
(        318.18 318.17 implies Pr\(Majority\(Majorityinverse\(1\)\)==Majority\(v1,v2,...,vn\)\) = 1/) s
5 104 M
(#SAT <= 1/2^n in worst case.) s
5 93 M
(        318.19 In average case, expected number of SAT assignments to MajoritySAT = 1*1/2^n) s
5 82 M
( + 2*1/2^n + ...+ 2^n*1/2^n = 2^n*\(2^n+1\)/2 *1/2^n = \(2^n+1\)/2, assuming all permutations a) s
5 71 M
(re equally probable. Average case Pr\(Majority\(Majorityinverse\(1\)\)==Majority\(v1,v2,...,vn\)\) ) s
5 60 M
(= 1/#SAT = 2/\(2^n+1\) ~= 1/2^\(n-1\) which is same as definition of a one-way function and thu) s
5 49 M
(s Majority is hard to invert in average case.) s
5 38 M
(        318.20 318.19 implies Majority is one-way. Therefore FP != FNP and thus P != NP if ) s
5 27 M
(hardness is amplified in 318.11.) s
5 5 M
(References:) s
_R
S
%%Page: (171) 171
%%BeginPageSetup
_S
18 36 translate
/pagenum 171 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (171) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-----------) s
5 731 M
(318.20 [Impagliazzo-Wigderson] - P=BPP if EXP has 2^Omega\(n\) size circuits - http://www.mat) s
5 720 M
(h.ias.edu/~avi/PUBLICATIONS/MYPAPERS/IW97/proc.pdf - Pr\(Good\) has exponential sized circuit) s
5 709 M
(s \(by theorem 6.29 of [AroraBarak] mentioned in 129 previously\) because of unbounded nature) s
5 698 M
( of RHS.) s
5 687 M
(318.21 [Trevisan] - XOR Lemma Course Notes - http://theory.stanford.edu/~trevisan/cs278-02/) s
5 676 M
(notes/lecture12.ps) s
5 665 M
(318.22 [Goldreich-RaniIzsak] - One-way functions and PRGs - http://www.wisdom.weizmann.ac.i) s
5 654 M
(l/~oded/PDF/mono-cry.pdf) s
5 643 M
(318.23 Noise Sensitivity of Majority Function - http://pages.cs.wisc.edu/~dieter/Courses/20) s
5 632 M
(08s-CS880/Scribes/lecture16.pdf) s
5 621 M
(318.24 Definition of One-way functions - https://en.wikipedia.org/wiki/One-way_function) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(---------------------------------) s
5 577 M
(319. \(THEORY\) Integer Partitions, Multiway Contests, Hash Table Functions and Ordered Bell ) s
5 566 M
(Numbers - related to 256 and 272) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(---------------------------------) s
5 533 M
(Number of hash table functions derived in https://sites.google.com/site/kuja27/IntegerParti) s
5 522 M
(tionAndHashFunctions_2014.pdf, which sums) s
5 511 M
(all possible permutations of hash buckets per partition does not consider order of elements) s
5 500 M
( with in each bucket. Bell number \(named after) s
5 489 M
(Eric Temple Bell\) is the number of all possible partitions of a set \(induced by all possibl) s
5 478 M
(e equivalence relations\). Each hash) s
5 467 M
(table is a set of equivalence classes \(i.e each bucket is an equivalence class and hash fun) s
5 456 M
(ction is the relation\), partitioning the set.) s
5 445 M
(Ordered Bell Number takes into account order of keys in each bucket and gives all possible ) s
5 434 M
(Ordered Hash Table Functions. This is a stronger) s
5 423 M
(estimate of number of hash table functions than plain counting from integer partitions whic) s
5 412 M
(h is unordered. Unordered n-th Bell Number is) s
5 401 M
(given by: sigma_k=0_to_n\({n,k}\) where {n,k} is the Stirling Number of Second kind computing) s
5 390 M
( number of ways of partitioning set of size n) s
5 379 M
(into subsets of size exactly k.) s
5 357 M
(Let there be n keys and size of hash table be m. Let hi\(x\) mod m be a hash function.) s
5 346 M
(For each hi) s
5 335 M
({) s
5 324 M
(        For each x < n) s
5 313 M
(        {) s
5 302 M
(                Compute hi\(x\) mod m and append to corresponding chain of buckets in hash ta) s
5 291 M
(ble) s
5 280 M
(        }) s
5 269 M
(}) s
5 247 M
(Above loops create all possible partitions of set of size n. If just the integer partition ) s
5 236 M
(is reduced to above hash table chains, sum\(mP\(lambda\(i\)\) is only an approximation. Also Ord) s
5 225 M
(ered Bell Number is an approximation as it does not permute each partition within a larger ) s
5 214 M
(set of slots. Stirling Number of second kind {n,k} is equal to number of partitions of an n) s
5 203 M
(-element set into k nonempty subsets.Each partition is permuted within m slots in a separat) s
5 192 M
(e chained hash table and each such permutation is a configuration of a hash function after ) s
5 181 M
(all keys are populated. Total number of such functions = sum_k=1_to_m\(mP\({n,k}\) which can b) s
5 170 M
(e called as Augmented Stirling Number and is greater than Ordered Bell Number:) s
5 159 M
(        sum_k=1_to_m\(mP\({n,k}\)\) >= Ordered Bell Number = sum_k=1_to_m\({n,k}\)) s
5 137 M
(In multipartisan voting with more than 2 candidates, above augmented stirling number is als) s
5 126 M
(o the number of all possible voting patterns with an electorate of size n voting on m candi) s
5 115 M
(dates - each chain is the set of votes for corresponding candidate. Hash function for each ) s
5 104 M
(voter chooses a candidate index. Thus Chained Hashing with optional sorting of chains on nu) s
5 93 M
(mber of votes is Majority Function generalized. From Arrow, Friedgut-Kalai-Nisan and Gibbar) s
5 82 M
(d-Satterthwaite theorems elections with more than 3 candidates can be manipulated implying ) s
5 71 M
(multiway majority function has non-zero noise sensitivity.) s
5 49 M
(Probability that above multiway majority function has an error \(i.e chooses wrong outcome\) ) s
5 38 M
(=) s
5 27 M
(Probability of changing one voting pattern to the other that changes ranking of candidates) s
5 5 M
(Each voting pattern can be deemed to be a point vertex on an m-dimensional metric space and) s
_R
S
%%Page: (172) 172
%%BeginPageSetup
_S
18 36 translate
/pagenum 172 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (172) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( edges between these vertices are distances to other) s
5 731 M
(patterns. If each edge has a probability of occurrence, Probability of flip in voting patte) s
5 720 M
(rn due to a malpractice is the probability of a path existing between these two voting patt) s
5 709 M
(erns in this random graph. If each each edge has equal probability, path probabilities vary) s
5 698 M
( between p and p^\(augmented_stirling_number\). This assumes that any voting error is a conve) s
5 687 M
(rging random walk on the random graph of point vertices of voting pattern in a metric space) s
5 676 M
(. It could be a complete graph too which does not require a random walk.) s
5 654 M
(In a sense the multiway majority hashing previously is a locality sensitive hashing wherein) s
5 643 M
( similarity between items is defined as voters voting for same candidate who are chained to) s
5 632 M
(gether in a bucket i.e Probability\(two voters x and y voting for same candidate are colocat) s
5 621 M
(ed in a bucket\) = 1 and Probability\(two voters x and y voting for different candidates are ) s
5 610 M
(colocated in a bucket\) = 0 with strict equalities while the distance function is defined as) s
5 599 M
( d\(x,y\) <= r if x and y vote for same candidate and d\(x,y\) > r else. From m-balls and n-bin) s
5 588 M
(s problem bounds, for m >> n, maximum number of balls per bin with high probability could b) s
5 577 M
(e m/n + theta\(sqrt\(mlogn/n\)\) - in terms of votes, this is a rough estimate of maximum votes) s
5 566 M
( a candidate can get with high probability in random voting. For example, a locality sensit) s
5 555 M
(ive hash function f\(x\) mod m returning k for f\(x\) mod m with f\(x\) defined over [-l, +l] map) s
5 544 M
(s a ball of radius l comprising similar voters to a candidate k - ball is the chained bucke) s
5 533 M
(t for k.) s
5 511 M
(As mentioned in previous paragraphs, each voting pattern is a point vertex on a metric spac) s
5 500 M
(e and it is necessary to define distance d between any two voting patterns. Let v1 and v2 b) s
5 489 M
(e two voting patterns in the chained hashing previously described for m candidates and n vo) s
5 478 M
(ters. These two patterns differ in votes per candidate. Hence it makes sense to define the ) s
5 467 M
(distance between the patterns as number of votes gained/lost by candidates across these two) s
5 456 M
( patterns. Let p be the probability that single vote is transferred by rigged voting from c) s
5 445 M
(andidate k to candidate l. Also let c1, c2, c3,..ck be the candidates who either all gained) s
5 434 M
( \(or\) all lost across voting patterns v1 and v2. Then the probability that voting pattern c) s
5 423 M
(hanges from v1 to v2 = p^d where d is the metric distance between two voting patterns defin) s
5 412 M
(ed as d = v2\(c1\) - v1\(c1\) + v2\(c2\) - v1\(c1\) + ...+ v2\(ck\) - v1\(ck\) where va\(cb\) is the vote) s
5 401 M
(s for candidate cb in voting pattern va. L2 norm is not preferred because probability for v) s
5 390 M
(oting pattern change requires gained/lost votes in one direction only. For example voting p) s
5 379 M
(attern {5,3,4} becoming {6,4,2} implies first 2 candidates gained 1 vote each while third c) s
5 368 M
(andidate lost 2 votes. L2 norm is sqrt\(6\) while metric distance as per previous definition ) s
5 357 M
(is 2. Greater the distance between patterns, exponentially rarer is the probability p^d of ) s
5 346 M
(voting pattern flip. It is assumed that all voters vote independently and each vote flip in) s
5 335 M
( pattern change occurs independently. Thus the random graph edges between voting pattern ve) s
5 324 M
(rtices are weighted by these probabilities\(p^d1, p^d2, etc., for distances d1,d2,...\).This ) s
5 313 M
(is an alternative definition of edge probability different from one described previously. N) s
5 302 M
(umber of vertices in this random graph = augmented_stirling_number = sum_k=1_to_m\(mP\({n,k}\)) s
5 291 M
(\) >= Ordered Bell Number) s
5 269 M
(Probability of multiway majority choosing a wrong outcome = Probability that voting pattern) s
5 258 M
( noise flip changes sorted ranking of candidates. For example, {12,10,5} becomes {7,12,8} w) s
5 247 M
(hich changes winner from first to second candidate with total votes remaining same. Not all) s
5 236 M
( edges of random graph of patterns change the ranking despite noise. If majority in multiwa) s
5 225 M
(y contest is defined as candidate index getting more than half of total votes, winning voti) s
5 214 M
(ng patterns are number of integer partitions of n voters with largest part > n/2. These par) s
5 203 M
(titions with largest part greater than n/2 correspond to subset of voting patterns which ar) s
5 192 M
(e not affected by noise flip because only parts other than largest are shuffled. Therefore ) s
5 181 M
(probability that outcome is not changed by noise flip of voting pattern = number_of_partiti) s
5 170 M
(ons_of_n_voters_greater_than_n/2 / partition_number\(n\). From this probability of wrong outc) s
5 159 M
(ome because of noise flip in voting pattern = 1 - { \(number_of_partitions_of_n_voters_great) s
5 148 M
(er_than_n/2\) / partition_number\(n\) } = Noise sensitivity of Multiway Majority Function.) s
5 126 M
(319.8 is an NVIDIA CUDA parallel implementation of hash table chaining. 319.9 is a recent p) s
5 115 M
(arallel locality sensitive hashing algorithm for multicore machines, and segregates twitter) s
5 104 M
( stream of tweets into similar buckets. Availability of parallel algorithms for hash table ) s
5 93 M
(chains implies that hash chaining and LSH especially could be in NC \(logarithmic table cons) s
5 82 M
(truction time\) though there is no known result thus far. Parallelism in multiway majority f) s
5 71 M
(unction LSH is obvious because people vote in parallel and hash chain buckets are populated) s
5 60 M
( in parallel across multiple voting machines in compartmentalized voting. Each such voting ) s
5 49 M
(machine can correspond to a node in Multiway Majority circuit. The rho parameter of LSH is ) s
5 38 M
(log\(1/p1\)/log\(1/p2\) where p1=Pr\(h\(x\)=h\(y\)\) if x and y had voted for same candidate and p2=P) s
5 27 M
(r\(h\(x\)=h\(y\)\) if x and y had voted for different candidates. In multiway majority LSH mentio) s
5 16 M
(ned previously, p1=1 and p2=0 and rho=0 where as in usual approximate neighbours problem rh) s
5 5 M
(o is only required to be < 1. Intuitively, each hash table slot is lock-free and each bucke) s
_R
S
%%Page: (173) 173
%%BeginPageSetup
_S
18 36 translate
/pagenum 173 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (173) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(t for a slot is lock-synchronized. Thus votes across candidates is parallelizable and votes) s
5 731 M
( for a candidate are serially incremented\(linked-list bucket is appended\). Addition of vote) s
5 720 M
(s per candidate slot should be doable in NC \(because integer addition is in NC\). Thus there) s
5 709 M
( are as many NC circuits as there are candidates. Set of votes from all candidates has to b) s
5 698 M
(e then sorted to find the winner which is also in NC \(e.g Sorting networks\). Optional compa) s
5 687 M
(rator circuits for half-way mark comparison is also in NC. Thus Multiway majority function ) s
5 676 M
(could be computable in Non-uniform NC which places it in same league as boolean 0-1 majorit) s
5 665 M
(y function.) s
5 643 M
(References:) s
5 632 M
(-----------) s
5 621 M
(319.1 Unordered Bell Number - https://en.wikipedia.org/wiki/Bell_number) s
5 610 M
(319.2 Ordered Bell Number - https://en.wikipedia.org/wiki/Ordered_Bell_number) s
5 599 M
(319.3 Mining Massive Data Sets - [UllmanRajaramanLeskovec] - http://infolab.stanford.edu/~u) s
5 588 M
(llman/mmds/book.pdf) s
5 577 M
(319.4 Lowerbounds for Locality Sensitive Hashing - [RyanODonnell] - https://www.cs.cmu.edu/) s
5 566 M
(~odonnell/papers/lsh.pdf) s
5 555 M
(319.5 Theory of Partitions - Bell numbers - [GeorgeEAndrews] - http://plouffe.fr/simon/math) s
5 544 M
(/Andrews%20G.E.%20The%20Theory%20of%20Partitions%20\(Enc.Math.Appl.%202,%20AW,%201976\)\(266s\)) s
5 533 M
(.pdf) s
5 522 M
(319.6 Power of Simple Tabulation Hashing - [PatrascuThorup] - http://arxiv.org/pdf/1011.520) s
5 511 M
(0v2.pdf - Lemma 4 - Balls and Bins hashing) s
5 500 M
(319.7 Balls and Bins, Chained Hashing, Randomized Load balancing - http://pages.cs.wisc.edu) s
5 489 M
(/~shuchi/courses/787-F09/scribe-notes/lec7.pdf) s
5 478 M
(319.8 Parallel Hash tables - Chaining buckets with arrays - http://idav.ucdavis.edu/~dfalca) s
5 467 M
(nt//downloads/dissertation.pdf) s
5 456 M
(319.9 Parallel Locality Sensitive Hashing - [Narayanan Sundaram\342\\200\240,Aizana Turmukhametova) s
5 445 M
(,Nadathur Satish\342\\200\240,Todd Mostak,Piotr Indyk,Samuel Madden and Pradeep Dubey\342\\200\240] -  ht) s
5 434 M
(tp://istc-bigdata.org/plsh/docs/plsh_paper.pdf) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-------------------------) s
5 390 M
(320. \(BUG-STABILITY ISSUES\) Commits - 6 September 2016) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-------------------------) s
5 357 M
(VIRGO Linux Kernel Stability Analysis - 2 September 2016 and 6 September 2016) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(-------------------------) s
5 324 M
(kern.log\(s\) for Boost::Python invocation of VIRGO system calls with and without crash on tw) s
5 313 M
(o dates have been committed:) s
5 302 M
(Logs on 2/9/2016 have a crash as usual in VM paging scatterlist.c.Today's invocation logs s) s
5 291 M
(how perfect execution of whole end-to-end user/kernel space without any kernel panic much l) s
5 280 M
(ater. Such randomness in behaviour is quite unexplainable unless something lurking beyond t) s
5 269 M
(he code path intercepts this. Could be a mainline kernel bug in 4.1.5 tree.) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(-------------------------) s
5 225 M
(321. \(BUG-STABILITY ISSUES\) Commits - 8 September 2016) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(-------------------------) s
5 192 M
(Continued kernel panic analysis of boost::python-VIRGO system calls invocations. Similar pa) s
5 181 M
(ttern of crashes in vma paging is observed with a) s
5 170 M
(successful panic-free invocation in the end.) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(-------------------------) s
5 126 M
(322. \(BUG-STABILITY ISSUES\) Commits - 9 September 2016) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-------------------------) s
5 93 M
(Boost::python-VIRGO system calls invocation kernel panic analysis showing some problem with) s
5 82 M
( i915 graphics driver interfering with) s
5 71 M
(VIRGO system calls.) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(--------------------------------------------------) s
5 27 M
(323. \(THEORY\) Complement Functions for Hash Chains, PAC Learning, Chinese Remaindering and ) s
5 16 M
(Post Correspondence Problem - related to 19,24,319) s
5 5 M
(- important draft additions to http://arxiv.org/pdf/1106.4102v1.pdf) s
_R
S
%%Page: (174) 174
%%BeginPageSetup
_S
18 36 translate
/pagenum 174 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (174) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(--------------------------------------------------) s
5 720 M
(A hash table chain can be viewed as a subset segment of a larger rectangular region. Comple) s
5 709 M
(ment of this subset is another hash table chain.) s
5 698 M
(For example following schematic ilustrates hash table complements with respect to chained b) s
5 687 M
(uckets:) s
5 665 M
(        ------------------------- ####################) s
5 654 M
(        ---------- ###################################) s
5 643 M
(        ---------------- #############################) s
5 632 M
(        ------------------ ###########################) s
5 621 M
(        ------ #######################################) s
5 599 M
(Above diagram has two hash table chains shown in different constituent colors. Together the) s
5 588 M
(se two cover a rectangular region. Thus left\(f1\) and right\(f2\) are complements of each othe) s
5 577 M
(r. In partition parlance, both f1 and f2 have same number of parts. Let f1 partition a set ) s
5 566 M
(of n1 and f2 partition a set of n2 elements into chains. Let m be the number of parts in bo) s
5 555 M
(th \(breadth of rectangle\). Then length is \(n1 + n2\) / m. If Pi\(f1\) and Pi\(f2\) denote the i-) s
5 544 M
(th chain partition on both f1 and f2, then Pi\(f1\) + Pi\(f2\) = \(n1 + n2\)/m. Hash function whi) s
5 533 M
(ch created f1 is known while that of f2 is unknown. This is a special case of Decidability ) s
5 522 M
(of Complement Function mentioned in 24 where "complementation" is defined with reference to) s
5 511 M
( a larger universal rectangular set. From the chain pattern on right the hash function for ) s
5 500 M
(f2 can be reverse engineered. When the left is viewed as a multiway majority voting pattern) s
5 489 M
( or a Locality Sensitive Hash function, right is a complementary voting pattern or a Comple) s
5 478 M
(mentary Locality Sensitive Hash Function which "inverts" the ranking. A tabulation for hash) s
5 467 M
( function of f2 can be constructed like an example below:) s
5 456 M
(        f\(x01\) mod m = 0) s
5 445 M
(        f\(x11\) mod m = 1) s
5 434 M
(        f\(x12\) mod m = 1) s
5 423 M
(        ...) s
5 412 M
(        f\(x21\) mod m = 2) s
5 401 M
(        f\(x22\) mod m = 2) s
5 390 M
(        ...) s
5 379 M
(where xij is the j-th element in i-th chain part in f2 on right. Above tabulation can be so) s
5 368 M
(lved by Euclid's algorithm. For example, f\(x11\) mod m = 1 can be solved as:) s
5 357 M
(        [-m*y + f\(x11\)] = 1 => f\(x11\) mod m = 1) s
5 346 M
(Therefore above table can be written as system of congruences:) s
5 335 M
(        f\(x01\) = a01*m + 0) s
5 324 M
(        f\(x11\) = a11*m + 1) s
5 313 M
(        f\(x12\) = a12*m + 1) s
5 302 M
(        ...) s
5 291 M
(        f\(x21\) = a21*m + 2) s
5 280 M
(        f\(x22\) = a22*m + 2) s
5 269 M
(        ...) s
5 258 M
(Since m is known and all aij can take arbitrary values, complement function for f2 can be c) s
5 247 M
(onstructed by fixing aij and applying either PAC learning\(approximation only\) or CNF multip) s
5 236 M
(lexor construction/Interpolation/Fourier Series \(described in 19 and 24\). There are indefin) s
5 225 M
(ite number of Complement Functions  constructible by varying aij. But Number of hash functi) s
5 214 M
(ons is upperbounded by Augmented Stirling Number. This is because hash functions which inte) s
5 203 M
(rnally apply complement functions, create finite chained bucket configurations or voting pa) s
5 192 M
(tterns bounded by augmented stirling number modulo size of the table whereas complement fun) s
5 181 M
(ctions don't have such restrictions in construction. This implies two complement functions ) s
5 170 M
(could give rise to similar hash table chain configurations.  Thus set of complement functio) s
5 159 M
(ns is partitioned by hash chained configurations i.e. there are augmented stirling number o) s
5 148 M
(f sets of complement functions. Main advantage of PAC learnt complement construction over e) s
5 137 M
(xact multiplexed CNF construction is there are no bloating of variables and boolean conjunc) s
5 126 M
(tions are minimal, but the disadvantage is approximation and not exact. For first n prime n) s
5 115 M
(umbers there are log\(n\) conjunctions each of log\(n\) literals.) s
5 93 M
(Boolean 0-1 majority function is a special case of multiway majority function \(or\) LSH, whe) s
5 82 M
(re hashtable is of size 2 with 2 chained buckets i.e.) s
5 71 M
(        Augmented Stirling Number of Boolean Majority = 2P\(n,1} + 2P{n,2}) s
5 49 M
(Chinese Remaindering Theorem states that there is a ring isomorphism for N=n1*n2*n3*....*nk) s
5 38 M
( \(for all coprime ni\) such that:) s
5 27 M
(        X mod N <=> \(X mod n1, X mod n2, X mod n3, ...., X mod nk\)) s
5 16 M
(        \(or\)) s
5 5 M
(        Z/NZ <=> Z/n1Z * Z/n2Z * .... * Z/nkZ) s
_R
S
%%Page: (175) 175
%%BeginPageSetup
_S
18 36 translate
/pagenum 175 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (175) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Chinese Remaindering has direct application in hash table chains as they are created in mod) s
5 731 M
(ular arithmetic. K hash functions on the right of isomorpshism correspond to K hash table c) s
5 720 M
(hains \(or\) LSH \(or\) Voting patterns for hash tables of sizes n1,n2,....,nk. Left of isomorp) s
5 709 M
(hism is a hash table of size N \(LSH or a Voting Pattern\).) s
5 687 M
(From Post Correspondence Problem, if f1 and f2 in schematic diagram are two voting patterns) s
5 676 M
(, finding a sequence such that:) s
5 665 M
(        p1p2p3...pm = q1q2q3....qm) s
5 654 M
(is undecidable where pi and qi are parts in voting patterns f1 and f2 as concatenated strin) s
5 643 M
(gs. What this means is that finding a sequence) s
5 632 M
(which makes serialized voters in both patterns equal is undecidable.) s
5 610 M
(Alternative proof of undecidability of Complement Function Construction with PCP :) s
5 599 M
(----------------------------------------------------------------------------------------) s
5 588 M
(Complement Functions are reducible to Post Correspondence Problem. PCP states that finding ) s
5 577 M
(sequence of numbers i1,i2,i3,...,ik such that:) s
5 566 M
(        s\(i1\)s\(i2\)s\(i3\)....s\(ik\) = t\(i1\)t\(i2\)t\(i3\)...t\(ik\)) s
5 555 M
(where s\(ik\) and t\(ik\) are strings is undecidable.) s
5 533 M
(Example inductive base case:) s
5 522 M
(-----------------------------) s
5 511 M
(Let f\(x\) = 2,4,6,8,....) s
5 500 M
(and g\(x\) = 1,3,5,7,....) s
5 489 M
(f\(x\) and g\(x\) are complements of each other.) s
5 467 M
(Define a\(i\) and b\(i\) as concatenated ordered pairs of f\(xi\) and g\(xi\):) s
5 456 M
(        a1 = 2          b1 = 2,3) s
5 445 M
(        a2 = 3,4        b2 = 4,5) s
5 434 M
(        a3 = 5,6        b3 = 6,7) s
5 423 M
(        a4 = 7,8        b4 = 8,9) s
5 412 M
(        a5 = 9,10       b5 = 10) s
5 401 M
([e.g a2 = 3, 4 where g\(a2\) = 3 and f\(a2\) = 4; b3= 6,7 where f\(b3\) = 6 and g\(b3\) = 7 and so ) s
5 390 M
(on. Here complement of an element is the succeeding element in universal set Z=1,2,3,4,5,..) s
5 379 M
(. ]) s
5 357 M
(Then, 1,2,3,4,5 is a sequence such that:) s
5 346 M
(        a1a2a3a4a5 = b1b2b3b4b5 = 2,3,4,5,6,7,8,9,10) s
5 335 M
(which can be parenthesised in two ways as:) s
5 324 M
(        2\(3,4\)\(5,6\)\(7,8\)\(9,10\) = \(2,3\)\(4,5\)\(6,7\)\(8,9\)10 = 2,3,4,5,6,7,8,9,10) s
5 313 M
(Each parenthesization is a string representation of a possible way to construct a complemen) s
5 302 M
(t function. Ideally, process of complementation has two symmetric directions created by the) s
5 291 M
( gaps in the range a function maps a domain to - predecessors and successors - which is cap) s
5 280 M
(tured by the two parenthesizations\(i.e f is complement of g and g is complement of f\). Each) s
5 269 M
( substring within the parentheses is indexed by sequence numbers ai and bi. Thus an order o) s
5 258 M
(f sequence numbers have to be found for both symmetric directions to get matching concatena) s
5 247 M
(ted union of complements \(universal set\).  Both directions have to converge because complem) s
5 236 M
(entation is symmetric relation. But finding such an order of sequence numbers is a Post Cor) s
5 225 M
(respondence Problem and undecidable\(question of if turing machine halts on input\). Since ea) s
5 214 M
(ch a\(i\) and b\(i\) are concatenated ordered pair of value of f\(x\) and its complement g\(x\), co) s
5 203 M
(mplement function is constructible if such ordered pairs exist for indefinite length. In es) s
5 192 M
(sence: Finding an order of sequence numbers = Construction of complement functions which co) s
5 181 M
(nverge in opposing directions => Undecidable by Post Correspondence Problem. Above example ) s
5 170 M
(can be generalized for any function, and its complement ordered pair and thus is an alterna) s
5 159 M
(tive proof \(with a tighter definition of complementation that complements are bidirectional) s
5 148 M
(\) of undecidability of Complement Function Existence and Construction. Another example is 2) s
5 137 M
( parenthesizations for prime complementation below - elements succeeding a prime in left an) s
5 126 M
(d elements preceding a prime in right:) s
5 115 M
(        f\(x\) = 2,3,5,7,11,...) s
5 104 M
(        g\(x\) = 4,6,8,9,10,12,...) s
5 82 M
(        \([2,3],4\)\(5,6\)\(7,[8,9,10]\)\(11\) = \([2,3]\)\(4,5\)\(6,7\)\([8,9,10],11\) = 2,3,4,5,6,7,8,9,1) s
5 71 M
(0,11) s
5 49 M
(Generic inductive case:) s
5 38 M
(-----------------------) s
5 27 M
(        \(f\(x1\),succ\(f\(x1\)\)\(f\(x2\),succ\(f\(x2\)\).... = \(predec\(g\(x1\),g\(x1\)\)\(predec\(g\(x2\),g\(x2\)\)) s
5 16 M
(.... = Z) s
5 5 M
(        \(or\)) s
_R
S
%%Page: (176) 176
%%BeginPageSetup
_S
18 36 translate
/pagenum 176 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (176) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        concatenation_of\(f\(xi\),g\(xi\)\) = concatenation_of\(g\(xi\),f\(xi\)\) = Z) s
5 731 M
(where succ\(\) and predec\(\) are successor and predecessor functions respectively in lambda ca) s
5 720 M
(lculus jargon and xi take some integer values. This assumes nothing about the sorted order ) s
5 709 M
(of f\(xi\) and g\(xi\) and each ordered pair is arbitrarily sampled and aggregated. f\(x\) is kno) s
5 698 M
(wn and from this complement g\(x\) has to be constructed\(though g\(xi\) sampled data points are) s
5 687 M
( known, g\(x\) is not\). To construct g\(x\), ordered pairs for g\(xi\) have to be sequenced as g\() s
5 676 M
(0\), g\(1\), ... which amounts to assigning values to xi which is Post Correspondence Problem ) s
5 665 M
(and undecidable.) s
5 643 M
(Two complementation parenthesizations can be drawn as step function where indentation denot) s
5 632 M
(es complementary g points to f in example below:) s
5 610 M
(                        |) s
5 599 M
(                        | f\(1\)) s
5 588 M
(                        |) s
5 577 M
(                        ---------) s
5 566 M
(                                |) s
5 555 M
(                                | g\(1\)) s
5 544 M
(                                |) s
5 533 M
(                        ---------) s
5 522 M
(                        |) s
5 511 M
(                        | f\(0\)) s
5 500 M
(                        |) s
5 489 M
(                        ---------) s
5 478 M
(                                |) s
5 467 M
(                                | g\(0\)) s
5 456 M
(                                |) s
5 445 M
(                                |) s
5 434 M
(                        ---------) s
5 423 M
(                        |) s
5 412 M
(                        | f\(2\)) s
5 401 M
(                        ---------) s
5 390 M
(                                |) s
5 379 M
(                                | g\(2\)) s
5 368 M
(                                |) s
5 346 M
(which represent two parenthesization correspondences \(sequence on right is staggered by one) s
5 335 M
( segment\):) s
5 324 M
(        \(f\(1\),g\(1\)\)\(f\(0\),g\(0\)\)\(f\(2\),g\(2\)\) = \(f\(1\)\)\(g\(1\),f\(0\)\)\(g\(0\),f\(2\)\)\(g\(2\)\) = f\(1\)g\(1\)f\() s
5 313 M
(0\)g\(0\)f\(2\)g\(2\)) s
5 302 M
(Hence x1,x2,x3 take values 1,0,2 for string on left. String on the right despite staggering) s
5 291 M
( also takes values 1,0,2 for x1,x2,x3 with only slight change - 1,0,2 is represented as 1-0) s
5 280 M
(, 0-2, 2 by coalescence of any two juxtaposed xi. This correspondence is undecidable by PCP) s
5 269 M
(. This complementation scheme relaxes the definition of complements in http://arxiv.org/pdf) s
5 258 M
(/1106.4102v1.pdf by allowing the pre-image of complementary function segments to be in unso) s
5 247 M
(rted order - e.g 1,0,2 is not sorted.) s
5 225 M
(Two Generic parenthesizations for f and its complement g are:) s
5 214 M
(        [f\(x1\)][g\(y1\)f\(x2\)][g\(y2\)f\(x3\)][g\(y3\)]... = [f\(x1\)g\(y1\)][f\(x2\)g\(y2\)][f\(x3\)g\(y3\)]...) s
5 203 M
( = f\(x1\)g\(y1\)f\(x2\)g\(y2\)f\(x3\)g\(y3\)...) s
5 192 M
(where each f\(xi\) and g\(yi\) are contiguous streak of set of values of f and g. xi is not nec) s
5 181 M
(essarily equal to yi. Required sequence numbers are) s
5 170 M
(x1-y1, x2-y2, x3-y3, ... in right and x1, y1-x2, y2-x3, ... in left to make the strings cor) s
5 159 M
(respond to each other. Here sequence numbers are identifiers which are concatenation of 2 n) s
5 148 M
(umbers xi and yi as xi-yi or yi-x\(i-1\). Thus original undecidability of finding x1-y1,x2-y2) s
5 137 M
(,x3-y3,... still remains. This is the most relaxed version of complementation.) s
5 115 M
(Another alternative definition of complement function is: function f and its complement g a) s
5 104 M
(re generating functions for the exact disjoint set cover of size 2 of a universal set forme) s
5 93 M
(d by values of f and g. Disjoint Set Cover is the set of subsets of a universal set where e) s
5 82 M
(ach element of universal set is contained in exactly one set and their union is the univers) s
5 71 M
(al set. Notion of complementation can be extended to arbitray dimensional spaces. Each half) s
5 60 M
(-space is generated by a function complement to the other. Complementation is also related ) s
5 49 M
(to concepts of VC-Dimension and Shattering where each half-space is a class classified by c) s
5 38 M
(omplement functions \(set A is shattered by a set C of classes of sets if for all subsets s ) s
5 27 M
(of A, s = c intersection A for c in C\)) s
5 5 M
(Complementation Disjoint Set Cover can be represented as bipartite graph where edges are be) s
_R
S
%%Page: (177) 177
%%BeginPageSetup
_S
18 36 translate
/pagenum 177 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (177) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(tween two sets A and B. Set A has sequence numbers xi\(or yi\) and set B is the universal set) s
5 731 M
( \(Z for example\). For each f\(xi\) and g\(yi\) there is an edge from xi----f\(xi\) and yi-----g\(y) s
5 720 M
(i\).) s
5 698 M
(Boolean 0-1 majority special case of Hash chains and Complement Functions:) s
5 687 M
(--------------------------------------------------------------------------) s
5 676 M
(A hash table of size 2 with 2 chains partitions the set of keys into 2 disjoint sets. Each ) s
5 665 M
(chain in this hash table is created by 2 functions complement to each other \(examples previ) s
5 654 M
(ously described: set of odd and even integers, set of primes and composites\). Thus if there) s
5 643 M
( exists a hash function h that accepts another function f as input and partitions a univers) s
5 632 M
(al set into two chained buckets with mutually complementary elements belonging to f and g\(c) s
5 621 M
(omplement of f\), then it is an indirect way to construct a complement. But undecidability o) s
5 610 M
(f complement construction by post correspondence precludes this.) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(-----------------------------------------) s
5 566 M
(324. \(FEATURE-DONE\) PAC Learning for Prime Numbers encoded as binary strings - Commits - 12) s
5 555 M
( September 2016) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-----------------------------------------) s
5 522 M
(PAC Learning implementation has been augmented to learn patterns in Prime Numbers encoded a) s
5 511 M
(s binary strings. For each prime bit a boolean conjunction is learnt.  Separate Mapping cod) s
5 500 M
(e has been written in python-src/PACLearning_PrimeBitsMapping.py which json dumps the mappi) s
5 489 M
(ng of first 10000 prime numbers to corresponding i-th prime bit.  Logs for this have been c) s
5 478 M
(ommitted to python-src/testlogs/PACLearning.PrimeBitsMappingConjunctions.out.12September201) s
5 467 M
(6) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(-----------------------------------------) s
5 423 M
(325. \(FEATURE-DONE\) PAC Learning for Prime Numbers - Commits - 14 September 2016) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-----------------------------------------) s
5 390 M
(Some errors corrected in bit positions computation in JSON mappings for PAC learning of Pri) s
5 379 M
(me Numbers. Logs committed to testlogs/) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(---------------------------------------) s
5 335 M
(326. \(BUG-STABILITY ISSUES\) Boost::Python-VIRGO System calls invocations random kernel pani) s
5 324 M
(cs - Commits - 15 September 2016) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(---------------------------------------) s
5 291 M
(Further Kernel Panic analysis in i915 driver for Boost::python-VIRGO system calls invocatio) s
5 280 M
(ns.) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(-----------------------------------------) s
5 236 M
(327. \(THEORY\) Algorithmic Fairness, Pr\(Good\) Majority Voting Circuit and Algorithmic Decisi) s
5 225 M
(on Making - Related to 14,53,275,317) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(-----------------------------------------) s
5 192 M
(In Majority Voting hardness analyzed thus far, voting functions of Individual Human Voters ) s
5 181 M
(are assumed. Recent advances in algorithmic) s
5 170 M
(decision making \(High Frequency Algorithmic Trading, Predictive Policing etc.,\) involve dec) s
5 159 M
(ision making by algorithms than humans. It was) s
5 148 M
(implicit so far that algorithms cannot have bias. But there is a new emerging field of algo) s
5 137 M
(rithmic fairness which highlights growing) s
5 126 M
(bias by machine learning algorithms in decision making \(bias could be in training dataset, ) s
5 115 M
(algorithm's false assumptions leading to) s
5 104 M
(wrong conclusions based on correlations etc.,\) that could subvert stock trading buy-sell de) s
5 93 M
(cisions, criminal justice system and so on. Similar) s
5 82 M
( unfairness could happen in Majority voting also if the voters are algorithms \(algorithm in) s
5 71 M
(ternally using a boolean function, non-boolean) s
5 60 M
(function, past training data to make future decisions among others\). Unfair voting algorith) s
5 49 M
(ms imply that Pr\(Good\) summation would never) s
5 38 M
(converge to 100% and therefore error is non-zero. Unfair voting is detrimental to distribut) s
5 27 M
(ed cloud computing involving majority voting) s
5 16 M
(choice - e.g loadbalancing of requests get skewed to a node unfairly by bad voting.  Most i) s
5 5 M
(mportantly a proof of existence of 100% fair) s
_R
S
%%Page: (178) 178
%%BeginPageSetup
_S
18 36 translate
/pagenum 178 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (178) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(voting algorithm implies that LHS of Pr\(Good\) summation is 1 \(From 317.2 least error algori) s
5 731 M
(thm is chosen as Non-majority social choice\).) s
5 709 M
(References:) s
5 698 M
(-----------) s
5 687 M
(327.1 Algorithmic Fairness - https://algorithmicfairness.wordpress.com) s
5 676 M
(327.2 Leader Election Algorithms in Cloud - HBase ZooKeeper - [Mahadev Konar - Yahoo] - htt) s
5 665 M
(p://wiki.apache.org/hadoop/ZooKeeper/ZooKeeperPresentations?action=AttachFile&do=view&targe) s
5 654 M
(t=zookeeper_hbase.pptx) s
5 643 M
(327.3 Leader Election and Quorum in ElasticSearch - https://www.elastic.co/blog/found-leade) s
5 632 M
(r-election-in-general - Each node votes for a leader and minimum number of votes required f) s
5 621 M
(or a leader is Quorum - This is realworld application of Multiway Majority function.) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-----------------------------------------) s
5 577 M
(328. \(FEATURE-DONE\) Locality Sensitive Hashing Implementation - Nearest Neighbours Search -) s
5 566 M
( Commits - 16 September 2016) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-----------------------------------------) s
5 533 M
(1.This commit implements locality sensitive hashing in python by wrapping defaultdict with ) s
5 522 M
(hashing and distance measures.) s
5 511 M
(2.Locality Sensitive Hashing is useful for clustering similar strings or text documents int) s
5 500 M
(o same bucket and is thus an unsupervised) s
5 489 M
(classifier and an inverted index too.) s
5 478 M
(3.In this implementation, very basic LSH is done by having replicated hashtables and hashin) s
5 467 M
(g a document to each of these hashtables with) s
5 456 M
(a random polynomial hash function which itself is aggregation of random monomials.) s
5 445 M
(4.For a query string, random hash function is again computed and buckets from all hashtable) s
5 434 M
(s corresponding to this hash value is returned as) s
5 423 M
(nearest neighbour set.) s
5 412 M
(5.Each of these buckets are sieved to find the closest neighbour for that hashtable.) s
5 401 M
(6.Sorting the nearest neighbours for all hash tables yields a ranking of documents which ar) s
5 390 M
(e in the vicinity of the query string.) s
5 379 M
(7.The input strings are read from a text file LocalitySensitiveHashing.txt) s
5 368 M
(8.Logs with hashtable dumps and nearest neighbour rankings are in testlogs/LocalitySensitiv) s
5 357 M
(eHashing.out.16September2016) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-----------------------------------------) s
5 313 M
(329. \(FEATURE-DONE\) LSH WebCrawler Support - Commits - 19 September 2016) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-----------------------------------------) s
5 280 M
(Locality Sensitive Hashing now accepts scrapy crawled webpages as datasources.) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(----------------------------) s
5 236 M
(330. \(BUG - STABILITY ISSUES\) Boost::Python AsFer-VIRGO system calls kernel panics - Commit) s
5 225 M
(s - 19 September 2016) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(----------------------------) s
5 192 M
(Boost::python AsFer - VIRGO system call ongoing kernel panic analysis - i915 DRM race condi) s
5 181 M
(tion kernel panic in VM pages freeing) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(--------------------------------------------------) s
5 137 M
(331. \(FEATURE-DONE\) ZeroMQ based Concurrent Request Servicing CLI - Client and Multithreade) s
5 126 M
(d Server Implementation) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(--------------------------------------------------) s
5 93 M
(Commits - 21 September 2016) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(--------------------------------------------------) s
5 60 M
(1.NeuronRain already has support for RESTful GUI implemented in Python Tornado and NeuronRa) s
5 49 M
(in code can be executed by) s
5 38 M
(filling up HTML form pages.) s
5 27 M
(2.ZeroMQ has a lowlevel highly performant low latency concurrency framework for servicing h) s
5 16 M
(eavily concurrent requests.) s
5 5 M
(3.ZeroMQ is a wrapper socket implementation with special support for Request-Reply, Router-) s
_R
S
%%Page: (179) 179
%%BeginPageSetup
_S
18 36 translate
/pagenum 179 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (179) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Worker, Pub-Sub design patterns.) s
5 731 M
(4.Important advantage of ZeroMQ is lack of necessity of lock synchronization \(i.e ZeroMQ is) s
5 720 M
( lock-free per its documentation\)) s
5 709 M
(for consistency of concurrent transactions) s
5 698 M
(5.Hence as a CLI alternative to HTTP/REST GUI interface,a C++ client and server have been i) s
5 687 M
(mplemented based on ZeroMQ Request-Reply) s
5 676 M
(Router-Dealer-Worker sockets pattern to serve concurrent requests.) s
5 665 M
(6.ZeroMQ client: ./zeromq_client "<neuronrain executable command>") s
5 654 M
(7.ZeroMQ server: invokes system\(\) on the executable arg from zeromq client) s
5 643 M
(8.With this NeuronRain has following interfaces:) s
5 632 M
(        8.1 telnet client ----------------------------------------------------> NeuronRain ) s
5 621 M
(VIRGO ports) s
5 610 M
(        8.2 VIRGO system call clients ----------------------------------------> NeuronRain ) s
5 599 M
(VIRGO ports) s
5 588 M
(        8.3 AsFer boost::python VIRGO system call invocations ----------------> NeuronRain ) s
5 577 M
(VIRGO ports) s
5 566 M
(        8.4 Tornado GUI RESTful ----------------------------------------------> NeuronRain ) s
5 555 M
(VIRGO ports) s
5 544 M
(        8.5 ZeroMQ CLI client/server -----------------------------------------> NeuronRain ) s
5 533 M
(VIRGO ports) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(----------------------------------------------) s
5 489 M
(332. \(FEATURE-DONE\) KingCobra VIRGO Linux workqueue and Kafka Publish-Subscribe Backend Mes) s
5 478 M
(sage Queue support in Streaming Generator) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(----------------------------------------------) s
5 445 M
(Commits - 22 September 2016) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(----------------------------------------------) s
5 412 M
(1.Streaming_AbstractGenerator has been updated to include KingCobra request-reply queue dis) s
5 401 M
(k persisted store, as) s
5 390 M
(a data storage option \(reads /var/log/kingcobra/REQUEST_REPLY.queue\). Initial design option) s
5 379 M
( was to integrate a Kafka client into) s
5 368 M
(KingCobra kernelspace servicerequest\(\) function which upon receipt of a message from linux ) s
5 357 M
(kernel workqueue,also publishes it in turn) s
5 346 M
(to a Kafka Topic. But tight coupling of Kafka C Client into KingCobra is infeasible because) s
5 335 M
( of conflicts between userspace include header) s
5 324 M
(files of Kafka and kernelspace include header files of Linux. This results in compilation e) s
5 313 M
(rrors. Hence it looks sufficient to read the) s
5 302 M
(persisted KingCobra REQUEST_REPLY.queue by a standalone Kafka python client and publish to ) s
5 291 M
(Kafka subscribers. This leverages analytics) s
5 280 M
(by python code on KingCobra queue.) s
5 269 M
(2.NeuronRain backend now has a support for Kafka Pub-Sub Messaging.) s
5 258 M
(3.New publisher and subscriber for Kafka \(with Python Confluent Kafka\) have been written to) s
5 247 M
( read data from) s
5 236 M
(Streaming_AbstractGenerator and to publish/subscribe to/from a Kafka Message Broker-Topic. ) s
5 225 M
(Thus any datasource that) s
5 214 M
(AsFer may have\(file,HBase,Cassandra,Hive etc.,\) is abstracted and published to Kafka. This ) s
5 203 M
(also unites AsFer backend) s
5 192 M
(and KingCobra disk persistence into a single Kafka storage.) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(------------------------------------------) s
5 148 M
(333. \(BUG-STABILITY ISSUES\) Boost::Python AsFer-VIRGO system call invocations kernel panic ) s
5 137 M
(ongoing investigation) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(------------------------------------------) s
5 104 M
(Commits - 23 September 2016) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(------------------------------------------) s
5 71 M
(Ongoing Boost::Python AsFer-VIRGO system call invocation kernel panic analysis:) s
5 60 M
(Random crashes remain, but this time no crash logs are printed in kern.log and finally a su) s
5 49 M
(ccessful invocation happens. It could be) s
5 38 M
(same as i915 GEM DRM crash similar to earlier analyses.) s
5 16 M
(Pattern observed is as follows:) s
5 5 M
(        1. First few invocations fail with virgo_get\(\) though virgo_malloc\(\) and virgo_set\() s
_R
S
%%Page: (180) 180
%%BeginPageSetup
_S
18 36 translate
/pagenum 180 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (180) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\) succeed.) s
5 731 M
(        2. After few failures all virgo calls succeed - virgo_malloc\(\), virgo_set\(\) and vir) s
5 720 M
(go_get\(\) work without any problems.) s
5 709 M
(        3. Sometimes virgo_parse_integer\(\) logs and few other logs are missing. When all lo) s
5 698 M
(gs are printed, success rate is very high.) s
5 687 M
(        4. Some failing invocations have NULL parsed addresses. When there are no NULL addr) s
5 676 M
(ess parsings, success rate is very high.) s
5 665 M
(        5. a rare coincidence was observed: Without internet connectivity crashes are very ) s
5 654 M
(less frequent. \(Intel Microcode) s
5 643 M
(updates playing spoilsport again?\).) s
5 632 M
(        6. There have been panic bugs reported on i915 GEM DRM and recent patches for busy ) s
5 621 M
(VMA handling to it:) s
5 610 M
(                6.1 https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1492632) s
5 599 M
(                6.2 https://lists.freedesktop.org/archives/intel-gfx/2016-August/102160.htm) s
5 588 M
(l) s
5 577 M
(        7. Intel GPU i915 GEM DRM docs - https://01.org/linuxgraphics/gfx-docs/drm/gpu/drm-) s
5 566 M
(mm.html) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(----------------------------------------) s
5 522 M
(334. \(BUG-STABILITY ISSUES\) Boost::Python AsFer-VIRGO systemcall/drivers invocations kernel) s
5 511 M
( panics - new findings) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(----------------------------------------) s
5 478 M
(Commits - 28 September 2016) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(----------------------------------------) s
5 445 M
(Continued analysis of kernel panics after VIRGO systemcalls/drivers code in i915 GPU driver) s
5 434 M
(. Has hithertoo unseen strange OOM panic stack dumps in GPU memory after kmalloc\(\) of 100 b) s
5 423 M
(ytes in virgo_cloud_malloc\(\) and set/get of it. Logs with panic stack dumps and High and Lo) s
5 412 M
(w Watermark) s
5 401 M
(memory details have been committed to cpp_boost_python_extensions/testlogs/.) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(----------------------------------------) s
5 357 M
(335. \(BUG-STABILITY ISSUES\) Boost::Python AsFer-VIRGO systemcall invocations panics - more ) s
5 346 M
(findings) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(----------------------------------------) s
5 313 M
(Commits - 29 September 2016) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(----------------------------------------) s
5 280 M
(Kernel Panic Analysis for Boost::Python AsFer - VIRGO system calls invocations:) s
5 269 M
(This log contains hitherto unseen crash in python itself deep within kernel \(insufficient l) s
5 258 M
(ogs\) followed by random -32 and -107) s
5 247 M
(errors. Finally successful invocations happened. Connections between -32,-107 errors and ra) s
5 236 M
(ndom panics/freezes were analyzed few years) s
5 225 M
(ago \(Blocking and Non-blocking socket modes\). i915 DRM related stacks were not found in ker) s
5 214 M
(n.log. Random disappearance of) s
5 203 M
(logs is quite a big travail. Crash within python could be i915 related - cannot be confirme) s
5 192 M
(d without logs. Pattern emerging is that) s
5 181 M
(of: Something wrong going on between CPU and GPU while allocating kernel memory in CPU doma) s
5 170 M
(in - kmalloc\(\) is likely allocating from) s
5 159 M
(GPU and not CPU - quite a weird bug and unheard of.) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(----------------------------------------) s
5 115 M
(336. \(BUG-STABILITY ISSUES\) VIRGO kernel panics - final findings - 30 September 2016) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(----------------------------------------) s
5 82 M
(Further kernel panic investigation in VIRGO - probably the last. Logs with analysis have be) s
5 71 M
(en committed to cpp_boost_python_extensions/) s
5 60 M
(testlogs/.) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(----------------------------------------------) s
5 16 M
(337. \(THEORY\) Ramsey Theorem, Edge Labelling of Voting Graph and Multiway Majority Function) s
5 5 M
( - 5 October 2016 - related to 256,272,319) s
_R
S
%%Page: (181) 181
%%BeginPageSetup
_S
18 36 translate
/pagenum 181 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (181) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(----------------------------------------------) s
5 720 M
(Multiway majority voting can be drawn as a directed graph. There is an edge between vertice) s
5 709 M
(s v1 and v2 if v1 votes for v2 forming a) s
5 698 M
(Voting Graph with a weight >= 0.  Realworld example of this is web link graph where incomin) s
5 687 M
(g links to a webpage are votes to it and) s
5 676 M
(outgoing links from a webpage are votes for adjacent pages. PageRank is a special case of M) s
5 665 M
(ultiway Majority Function which ranks the) s
5 654 M
(candidate webpages by a converging random walk markov chain of transition probabilities, wi) s
5 643 M
(th a rider that all webpages are both voters) s
5 632 M
(and candidates making it a peer-to-peer majority voting. PageRank is thus a Non-boolean vot) s
5 621 M
(ing function. If web link graph is a tree) s
5 610 M
(of depth d, it is equivalent to depth-d recursive majority function.  Edge labelling of a g) s
5 599 M
(raph assigns colors to edges of a graph) s
5 588 M
(\(Edge coloring is a special case of labelling with restriction no two adjacent edges are of) s
5 577 M
( same color\). Voting graphs can be edge) s
5 566 M
(labelled where each color of an edge denotes a voter affiliation. Ramsey Number in combinat) s
5 555 M
(orics states that there exists a number) s
5 544 M
(v=RN\(r,s\) for every graph of order v, there exists a clique of size r or independent set of) s
5 533 M
( size s. For any Voting graph Ramsey Theorem) s
5 522 M
(implies emergence of a clique or an independent set i.e voters who vote among themselves or) s
5 511 M
( who do not vote for each other. If the Voting) s
5 500 M
(graph is complete then Ramsey Theorem implies emergence of monochromatic cliques r \(red cli) s
5 489 M
(ques\) or s \(blue cliques\).) s
5 467 M
(References:) s
5 456 M
(------------) s
5 445 M
(337.1 Ramsey Theorem Lecture Notes - http://math.mit.edu/~fox/MAT307-lecture05.pdf) s
5 434 M
(337.2 Ramsey Theorem - https://en.wikipedia.org/wiki/Ramsey%27s_theorem) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(---------------------------------------------) s
5 390 M
(338. \(THEORY\) Van Der Waerden Number, Schur, Szemeredi and Ramsey Theorems, Coloring of Int) s
5 379 M
(egers and Complement Function - Related to 323 - important draft updates to http://arxiv.or) s
5 368 M
(g/pdf/1106.4102.pdf) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(---------------------------------------------) s
5 335 M
(Complement Function over Integer sequences can be defined in terms of 2-colorings of the in) s
5 324 M
(tegers. Described previously in \(323\) PCP) s
5 313 M
(undecidability proof of complementation, a function f and its complement g can be construed) s
5 302 M
( as 2-colorings of the Disjoint Set Cover Union i.e) s
5 291 M
(the set of natural numbers - each color is a function - for example f is red and g is blue.) s
5 269 M
(Schur's Theorem for Ramsey coloring of integer sequences states \(quoted from http://math.mi) s
5 258 M
(t.edu/~fox/MAT307-lecture05.pdf\):) s
5 236 M
(" ...  Schur's theorem) s
5 225 M
(Ramsey theory for integers is about finding monochromatic subsets with a certain arithmetic) s
5 214 M
( structure. It starts with the following theorem of Schur \(1916\), which turns out to be an ) s
5 203 M
(easy application of Ramsey's theorem for graphs.) s
5 181 M
(Theorem 3.) s
5 170 M
(For any k >= 2 , there is n > 3 such that for any k-coloring of 1,2,3,...,n, there are thre) s
5 159 M
(e integers x, y, z of the same color such that) s
5 148 M
(x + y = z ...  ") s
5 126 M
(For complement function special case \(i.e 2-coloring of the sequences\), Schur Theorem impli) s
5 115 M
(es that there are always integers x,y and z in the image of a function or its complement ob) s
5 104 M
(eying x+y=z. Van Der Waerden Therem for coloring integers is the variant of Ramsey Theorem ) s
5 93 M
(for graphs \(quoting https://en.wikipedia.org/wiki/Van_der_Waerden%27s_theorem\):) s
5 71 M
(" ...  for any given positive integers r and k, there is some number N such that if the int) s
5 60 M
(egers {1, 2, ..., N} are colored, each with one of r different colors, then there are at le) s
5 49 M
(ast k integers in arithmetic progression all of the same color.  ...  ") s
5 27 M
(Van Der Waerden Theorem for 2-colorings of natural numbers is equivalent to complementation) s
5 16 M
( disjoint set cover of natural numbers. When this is a prime complementation special case, ) s
5 5 M
(prime integers are colored in red and composites in blue. Thus Van Der Waerden theorem for ) s
_R
S
%%Page: (182) 182
%%BeginPageSetup
_S
18 36 translate
/pagenum 182 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (182) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(prime-composite complementation implies that either set of primes or composites have arithm) s
5 731 M
(etic progressions \(because of same coloring\) of size atleast k \(Related: Green-Tao theorem ) s
5 720 M
(states that primes have arbitrarily long arithmetic progressions\). Upperbound for N in this) s
5 709 M
( 2-coloring prime complementation is deriveable from [TimothyGowers] bound as: N <= 2^2^2^2) s
5 698 M
(^\(k+9\) for a family of k sized arithmetic progressions \(also called as k-regularity\). This ) s
5 687 M
(implies arbitrarily long monochromatic arithmetic progressions can be found in prime-compos) s
5 676 M
(ite complementation by choosing N and k.) s
5 654 M
(Finding the arithmetic progressions for Van Der Waerden numbers have been formulated as SAT) s
5 643 M
( instances which involves a SAT solver to search for a satisfying monochromatic arithmetic ) s
5 632 M
(progression. Similar SAT solving approach applies also to prime-composite bichromatic compl) s
5 621 M
(ementation for finding arithmetic progressions. This takes the notion of complementation a ) s
5 610 M
(fine grained step further in the sense:  prime-composite complementation is a pattern miner) s
5 599 M
( in primes and arithmetic progressions in prime-composite complementation are patterns with) s
5 588 M
(in pattern.) s
5 566 M
(Concept of complement graphs have been studied in Perfect Graph Theorem and has strong rese) s
5 555 M
(mblance to function complementation. Complement graph H is obtained from a graph G by addin) s
5 544 M
(g edges to make it complete graph and removing edges in G i.e H has edges which are not in ) s
5 533 M
(G and vice versa. Function complementation is precisely a sequence corollary of Graph compl) s
5 522 M
(ementation. Perfect Graph Theorem \(PGT\) states that a graph is perfect if its complement is) s
5 511 M
( perfect where perfect graph is one in which all its induced subgraphs have chromatic numbe) s
5 500 M
(r \(number of colors required to k-color a graph\) equal to size of maximum clique. Function ) s
5 489 M
(complementation can be translated to Graph complementation by defining a relation: There is) s
5 478 M
( an edge in F, f\(x1\)----f\(x2\) for every f\(x1\) and f\(x2\) and there is an edge in G, g\(x1\)---) s
5 467 M
(-g\(x2\) for every g\(x1\) and g\(x2\) where f and g are mutual complements. Obviously F and G ha) s
5 456 M
(ve a single maximum clique with an independent set without any edge amongst them. Then it f) s
5 445 M
(ollows that order of F and G are their respective Ramsey Numbers.) s
5 423 M
(A contrived independent set can be created by adding edges from constituent vertices of the) s
5 412 M
( maximum clique which is also maximal such that there are no edge overlaps with its complem) s
5 401 M
(ent graph - thus every graph for a function and its complement has a single maximum and max) s
5 390 M
(imal clique and an independent set connected only to the clique with no edges among them i.) s
5 379 M
(e. Vertices of the clique form vertex cover of the graph) s
5 357 M
(Any 2 graphs corresponding to 2 functions defined on same set obtained from previous constr) s
5 346 M
(uction are isomorphic. For example if a complete graph of 3 vertices \(K3\) is constructed fr) s
5 335 M
(om elements 2,3,5 for function f1 where f1 is defined as f1\(0\)=2, f1\(1\)=3 and f2\(2\)=5, the ) s
5 324 M
(vertices can be numbered by the inverse\(f1\) as 0,1,2. Similarly for a different function f2) s
5 313 M
( over 2,3,5 K3 obtained can be vertex numbered by the inverse\(f2\) where f2\(0\)=5, f2\(1\)=2 an) s
5 302 M
(d f3\(2\)=3 where numbering is 1,2,0. This also implies two graphs for function f and its com) s
5 291 M
(plement g are not isomorphic.) s
5 269 M
(In the context of complement function graphs constructed previously, functions are mapped t) s
5 258 M
(o maximum clique subgraph and only this subgraph is vertex-renumbered which is the problem ) s
5 247 M
(of subgraph isomprphism to find out if clique subgraph is isomorphic to another function cl) s
5 236 M
(ique subgraph.) s
5 214 M
(Szemeredi's Theorem which is the generalization of Van Der Waerden's Theorem states: For an) s
5 203 M
(y subset A of N of natural density > 0, there are infinitely many arithmetic progressions o) s
5 192 M
(f size atleast k where natural density is defined as lim {n->infinity} sup |A intersection ) s
5 181 M
({1,2,3,...,n}|/n > 0. Green-Tao theorem applies a relative Szemeredi theorem because prime ) s
5 170 M
(numbers have 0 natural density. Szemeredi's Theorem has been generalized to polynomial prog) s
5 159 M
(ressions where the polynomial progression is defined as [t\(i\) = t\(i-1\) + p\(i\)] in A for som) s
5 148 M
(e integer valued polynomials p\(i\). Thus Generalized Szemeredi Theorem for Finding polynomia) s
5 137 M
(l arithmetic progressions in a subset of natural numbers is closest to finding the compleme) s
5 126 M
(nt of a function when set of natural numbers is 2-colored - only a subset of complement set) s
5 115 M
( is expressed as polynomials whereas complement function requires, by definition, the compl) s
5 104 M
(ete set to be expressed as polynomials \(e.g interpolation polynomials, fourier polynomials\)) s
5 93 M
(.) s
5 71 M
(Roth Estimate for 2-coloring of integer sequences \(in references 338.4 and 338.5\) is a meas) s
5 60 M
(ure of order or randomness in a colored sequence and hence in a complementation by function) s
5 49 M
(s f and g \(where each function is a color - e.g f is blue and g is red\) over a universal se) s
5 38 M
(t. If arithmetic progressions are thought of as all possible "sampled points" on 2-colored ) s
5 27 M
(integers \(functions f and g\) i.e an approximation of f and g,then Roth estimate is a measur) s
5 16 M
(e of difference in size of f\(x\) and g\(x\) with probability equal to natural density of arith) s
5 5 M
(metic progression chosen in minimax\(\) step. This is because natural density is a fraction o) s
_R
S
%%Page: (183) 183
%%BeginPageSetup
_S
18 36 translate
/pagenum 183 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (183) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(f size of set of elements of an arithmetic progression on natural numbers - in other words,) s
5 731 M
( natural density is the size of a sample of f and g. From Roth estimate bounds, |{f\(x\)}| - ) s
5 720 M
(|{g\(x\)}| is approximately N^\(1/4+epsilon\) with probability equal to natural density of arit) s
5 709 M
(hmetic progression in minimax\(\) step and |{f\(x\)}| + |{g\(x\)}| is N with probability 1. This ) s
5 698 M
(implies:) s
5 687 M
(        |{f\(x\)}| = {N+N^\(1/4+epsilon\)} / 2) s
5 676 M
(        |{g\(x\)}| = {N-N^\(1/4+epsilon\)} / 2) s
5 665 M
(        with probability equal to natural density of arithmetic progression in minimax\(\)) s
5 654 M
(Previous approximation with sampling relates size of complement functions,coloring and arit) s
5 643 M
(hmetic progressions by Roth estimate.) s
5 621 M
(Complement Graphs F and G constructed previously for function f and its complement g have s) s
5 610 M
(et of all values of inverse\(f\) and inverse\(g\) as the respective vertex labels in their maxi) s
5 599 M
(mum monochromatic cliques. This maps a 2-colored integer sequence with each color represent) s
5 588 M
(ing a function to 2 graphs, mutually complement, each with a maximal monochromatic clique f) s
5 577 M
(or respective function \(f or g\) and an independent set of other color. This construction ad) s
5 566 M
(ds one more dimension to the coloring problem: numbering of vertices for either color and s) s
5 555 M
(ubgraph isomorphism. From Van Der Waerden and later newer theorems, this implies numbered v) s
5 544 M
(ertices in F and G have atleast one monochromatic arithmetic progression.) s
5 522 M
(Another important question is: Can a complement function polynomial be constructed from con) s
5 511 M
(stituent monochromatic arithmetic progressions \(or\) Is the complement function polynomial i) s
5 500 M
(nterpolated by Lagrange Theorem or Fourier Analysis a composition of constituent arithmetic) s
5 489 M
( progressions? This is answered in reference 338.11 - Interpolation Polynomial for n points) s
5 478 M
( can be approximated from low discrepancy arithmetic progressions. References 338.12 and 33) s
5 467 M
(8.13 are related to Polynomial Sequences of length n \(P\(n\) - Polynomial Points\) represented) s
5 456 M
( by rings of polynomials F\(x\) with integer coefficients in Zn and for each sequence S\(k\)=\(a) s
5 445 M
(1,a2,...,an\) there exists a polynomial f\(x\) in F\(x\) such that f\(i\)=ai,i=1,2,3,...,n \(f\(x\) i) s
5 434 M
(s a Lagrange Interpolation Polynomial\). For example, monochromatic arithmetic progressions ) s
5 423 M
(from Van Der Waerden and other theorems are polynomial sequences represented by arithmetic ) s
5 412 M
(progression polynomial points. Thus Complement Function Polynomial interpolated \(Fourier or) s
5 401 M
( Lagrange\) from maximal monochromatic subset of 2-colored integer sequence is a Polynomial ) s
5 390 M
(point and corresponding maximum monochromatic sequence subset is Polynomial Sequence.) s
5 368 M
(Let f1,f2,f3,... be functions and g1,g2,g3,... be their respective complements. They are re) s
5 357 M
(presented as graphs constructed previously as F1,F2,F3,....\(each with a monochromatic red c) s
5 346 M
(lique and independent set of blue color\) and G1,G2,G3,... \(each with a monochromatic blue c) s
5 335 M
(lique and independent set of red color\). All fi\(s\) have isomorphic red clique subgraphs and) s
5 324 M
( gi\(s\) have isomorphic blue subgraphs. Vertices are numbered with fiinverse\(\) and giinverse) s
5 313 M
(\(\) labels. Vertices of cliques in fi\(s\) and gi\(s\) have monochromatic arithmetic progression) s
5 302 M
(s in fi\(vertexlabel\) and gi\(vertexlabel\).For each arithmetic progression APj in monochromat) s
5 291 M
(ic clique in Fk corresponding to fk\(\),fkinverse\(APj\) is the preimage of APj. Define AP1,AP2) s
5 280 M
(,AP3,AP4,AP5,... as the monochromatic arithmetic progressions in a monochromatic clique \(ve) s
5 269 M
(rtices corresponding to some function fk\(\)\). Union of APj is a subset of fk\(\). Define C\(x\) ) s
5 258 M
(as the interpolation polynomial of the Union of APj. C\(x\) is an approximation of fk\(\). Accu) s
5 247 M
(racy of approximation is determined by the density ratio |C\(x\)|/|fk\(\)|.When Union of APj co) s
5 236 M
(vers all points in sequence for generating function fk\(\), then density is 1 because C\(x\) is) s
5 225 M
( 100% correct approximation of fk\(\) - C\(x\) = fk\(\). A naive construction of C\(x\) from APj is) s
5 214 M
( done by parallel mergesort of: AP1,AP2,AP3,AP4,AP5,...,APn to get a total ordering. Interp) s
5 203 M
(olation on the merged splintered arithmetic progressions scattered over the sequence gives ) s
5 192 M
(an approximation C\(x\) of fk\(\). This construction is in NC. Let Interpolation polynomial for) s
5 181 M
( the sequence be P\(x\)=fk\(\).) s
5 170 M
(There are 2 possibilities of arithmetic progressions - APs have both colors \(elements from ) s
5 159 M
(both function and its complement\) or APs are all monochromatic \(elements from a function or) s
5 148 M
( its complement\).For example the sequence 1,2,3,4,5,.... of natural numbers have two arithm) s
5 137 M
(etic progressions:) s
5 126 M
(        AP1 = 2x+1 => 1,3,5,7,9,.....) s
5 115 M
(        AP2 = 3x+1 => 1,4,7,11,14,....) s
5 104 M
(Merging them gives 1,3,4,5,7,9,10,11,13.... which is a subset of 1,2,3,4,5,....) s
5 93 M
(----------------------------) s
5 82 M
(Scenario1: Monochromatic APs) s
5 71 M
(----------------------------) s
5 60 M
(Approximation polynomial for sequence interpolated from constituent monochromatic APs merge) s
5 49 M
(sorted = C\(x\). Let AP1\(x\),AP2\(x\),AP3\(x\),...,APn\(x\) be the arithmetic progression polynomial) s
5 38 M
(s. Let C\(x\) = E\(x\)AP1\(x\)AP2\(x\)AP3\(x\)...APn\(x\) i.e arithmetic progressions are factors of C\() s
5 27 M
(x\) with E\(x\) as quotient over some polynomial ring F[x]. C\(x\) approximates a function fk\(\) ) s
5 16 M
(or its complement gk\(\). This is described previously.) s
5 5 M
(-----------------------------) s
_R
S
%%Page: (184) 184
%%BeginPageSetup
_S
18 36 translate
/pagenum 184 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (184) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Scenario2: Multichromatic APs) s
5 731 M
(-----------------------------) s
5 720 M
(When APs have elements of both colors \(from both functions fk\(\) and gk\(\)\), parallel mergeso) s
5 709 M
(rt of APs and interpolation by polynomial C\(x\) cannot approximate either fk\(\) or gk\(\) becau) s
5 698 M
(se APs consist of both colors. This is where minimum discrepancy plays its part - when disc) s
5 687 M
(repancy is low AP has elements from both colors or functions in almost equal number. Theref) s
5 676 M
(ore arithmetic progression samples both functions with least error and interpolation succee) s
5 665 M
(ds with high accuracy - this is an intuitive explanation for 338.11.) s
5 643 M
(References:) s
5 632 M
(----------) s
5 621 M
(338.1 Bound for Van Der Waerden Numbers - https://www.emis.de/journals/INTEGERS/papers/a20i) s
5 610 M
(nt2005/a20int2005.pdf) s
5 599 M
(338.2 Exact Ramsey Theory and Van Der Waerden Numbers by SAT-solvers - [OliverKullmann] - h) s
5 588 M
(ttps://arxiv.org/pdf/1004.0653v2.pdf) s
5 577 M
(338.3 Erdos-Turan Conjecture - https://en.wikipedia.org/wiki/Erd%C5%91s_conjecture_on_arith) s
5 566 M
(metic_progressions - If sum of reciprocals of) s
5 555 M
(elements of a set of positive integers diverges, then the set contains arbitrarily long ari) s
5 544 M
(thmetic progressions) s
5 533 M
(338.4 Roth Estimate - http://matwbn.icm.edu.pl/ksiazki/aa/aa9/aa9125.pdf - Consider a two c) s
5 522 M
(oloring of set of natural numbers N in red and blue. For all arithmetic progressions in the) s
5 511 M
( set N let Discrepancy be the difference between number of red and blue colored integers. M) s
5 500 M
(aximum of Discrepancy for all arithmetic progressions be Maximum\(Discrepancy\). Minimum\(Maxi) s
5 489 M
(mum\(Discrepancy\)\) for all 2-colorings is the Roth Estimate lowerbounded by N^1/4.) s
5 478 M
(338.5 Roth Estimate is nearly sharp - Beck, J. Combinatorica \(1981\) 1: 319. doi:10.1007/BF0) s
5 467 M
(2579452 - http://link.springer.com/article/10.1007/BF02579452 - Previous Roth Estimate is u) s
5 456 M
(pperbounded by N^\(1/4+epsilon\).) s
5 445 M
(338.6 Discrepancy in Arithmetic Progressions - [MatousekSpencer] - Roth estimate is best po) s
5 434 M
(ssible - ROTH\(N\) <= N^1/4 - http://www.ams.org/journals/jams/1996-9-01/S0894-0347-96-00175-) s
5 423 M
(0/S0894-0347-96-00175-0.pdf - This paper has some interesting remarks - "...In words, we sh) s
5 412 M
(ow the existence of a two-coloring \317\\207 of the first n integers so that all arithmetic pro) s
5 401 M
(gressions A have imbalance |\317\\207\(A\)| \342\\211\244 Cn1/4. We remark that the proof does not give ) s
5 390 M
(a construction of \317\\207 in the usual sense and is indeed not satisfactory from an algorithm) s
5 379 M
(ic point of view. The methods of \302\2472 \(see comments in [5]\) are such that we have not been a) s
5 368 M
(ble to obtain an algorithm that would output this coloring \317\\207 in time polynomial in n. O) s
5 357 M
(ur proof involves variants of the probabilistic method; we give [1] as a general reference ) s
5 346 M
(..." which is about algorithm for constructing a coloring for a given discrepancy - colorin) s
5 335 M
(g algorithm is nothing but construction of a function and its complement for a finite set o) s
5 324 M
(f integers. Thus notions of integer sequence coloring and complement function are two sides) s
5 313 M
( of a coin with respect to integer valued functions and complements. Undecidability of Infi) s
5 302 M
(nite complementation from 19,24,319 and 323 PCP based proof also implies "Infinite Integer ) s
5 291 M
(Sequence Coloring is Undecidable" i.e there is no coloring algorithm for 2-coloring of infi) s
5 280 M
(nite integer sequences.) s
5 269 M
(338.7 Discrepancy Minimization by Walking on Edges - [BansalLovettMeka] - https://arxiv.org) s
5 258 M
(/pdf/1203.5747v2.pdf - This proves Spencer's Theorem which states that for any system of su) s
5 247 M
(bsets S of universal set V of size both N there always exists a 2-coloring with minimax\(dis) s
5 236 M
(crepancy\) < 6*sqrt\(N\) also known as Six Standard Deviation and gives a randomized polytime ) s
5 225 M
(algorithm for constructing such a 2-coloring mentioned non-constructively in 338.6. System ) s
5 214 M
(of subsets can be set of arithmetic progressions. This is a special case of function-comple) s
5 203 M
(ment \(2-coloring\) construction subject to minimax discrepancy criterion.) s
5 192 M
(338.8 Fourier Interpolation of n data points with polynomial of degree m - http://www.muski) s
5 181 M
(ngum.edu/~rdaquila/m350/fourier-interdn10-1.ppt) s
5 170 M
(338.9 Fourier Analysis and Szemeredi's Theorem - Roth's Argument - Documenta Mathematica IC) s
5 159 M
(M Extra Volume 1998 - http://www.mathunion.org/ICM/ICM1998.1/Main/Fields/Gowers.MAN.ocr.pdf) s
5 148 M
( - Fourier Transform of set of integers mod N \(for prime N\) and deriving the arithmetic pro) s
5 137 M
(gressions of length 3 from inverse Fourier Transform.) s
5 126 M
(338.10 Hales-Jewett Theorem - [MichelleLee] - http://www.math.uchicago.edu/~may/VIGRE/VIGRE) s
5 115 M
(2009/REUPapers/Lee.pdf - generalization of Van Der Waerden Theorem to higher dimensions \(n-) s
5 104 M
(cubes and n-lines\) - any k-coloring of n-dimensional cube \(or a matrix of points\) has monoc) s
5 93 M
(hromatic line\(with fixed coordinates for some dimensions and varying for others\)) s
5 82 M
(338.11 Polynomial Interpolation from Low Discrepancy Arithmetic Progressions - [The Discrep) s
5 71 M
(ancy Method: Randomness and Complexity - BernardChazelle] - https://books.google.co.in/book) s
5 60 M
(s?id=dmOPmEh6LdYC&pg=PA338&lpg=PA338&dq=polynomial+interpolation+arithmetic+progression&sou) s
5 49 M
(rce=bl&ots=CDNgOUBnua&sig=pxKMQx9ciY7_d4GcOkFwnCrOUEU&hl=en&sa=X&ved=0ahUKEwiSqOv0ovPPAhVMp) s
5 38 M
(o8KHZsbA3wQ6AEIPzAE#v=onepage&q=polynomial%20interpolation%20arithmetic%20progression&f=fal) s
5 27 M
(se - Page 338 and Figure 9.4 in Page 342 illustrating the distribution of Fourier Coefficie) s
5 16 M
(nts over a circle in Discrete Fourier Transform of a subset of Z16 \(also explained in 338.8) s
5 5 M
(\).) s
_R
S
%%Page: (185) 185
%%BeginPageSetup
_S
18 36 translate
/pagenum 185 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (185) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(338.12 Sequences Generated By Polynomials - [CorneliusSchultz] - https://www.researchgate.n) s
5 731 M
(et/profile/E_Cornelius_Jr/publication/258155515_Sequences_Generated_by_Polynomials/links/0d) s
5 720 M
(eec5272541943938000000.pdf) s
5 709 M
(338.13 Polynomial Points, Green-Tao Theorem and Arithmetic Progressions - [CorneliusSchultz) s
5 698 M
(] - https://cs.uwaterloo.ca/journals/JIS/VOL10/Schultz/schultz14.pdf) s
5 687 M
(338.14 Recent Advanced Theorems in k-coloring of integer sequences - http://people.math.sc.) s
5 676 M
(edu/lu/talks/ap4.pdf - the set [n] is randomly r-colored and bounds for number of monochrom) s
5 665 M
(atic k-APs and K-APs in [n] are mentioned where k is common difference and K is Van Der Wae) s
5 654 M
(rden number.) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(-----------------------------------) s
5 610 M
(339. \(FEATURE-DONE\) Boyer-Moore Streaming Majority Algorithm - Commits - 7 October 2016) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-----------------------------------) s
5 577 M
(This commit implements Boyer-Moore algorithm for finding Majority element in Streaming Sequ) s
5 566 M
(ences. It uses the Streaming Generator) s
5 555 M
(Abstraction for input streaming datasource. Logs have been committed to python-src/testlogs) s
5 544 M
(/) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(-----------------------------------) s
5 500 M
(340. \(FEATURE-DONE\) GSpan Graph Substructure Mining Algorithm Implementation - Commits - 13) s
5 489 M
( October 2016 and 14 October 2016) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(-----------------------------------) s
5 456 M
(1.Graph Substructure Mining GSpan algorithm implementation with logs in testlogs/) s
5 445 M
(2.This code requires the Graph vertices to be labelled by unique integers) s
5 434 M
(3.Integer labelling of vertices makes it easier for DFSCode hashes to be generated uniquely) s
5 423 M
(.) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(----------------------------------) s
5 379 M
(341. \(THEORY\) Graph Mining Algorithms and Recursive Gloss Overlap Graph for text documents ) s
5 368 M
(- Document Similarity) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(----------------------------------) s
5 335 M
(Recursive Gloss Overlap Algorithm implementations in python-src/InterviewAlgorithm and its ) s
5 324 M
(Spark Cloud Variants generate graphs) s
5 313 M
(with word labels from Text Documents. GSpan algorithm implemented in \(340\) mines subgraphs ) s
5 302 M
(and edges common across graph dataset.) s
5 291 M
(This allows extraction of common patterns amongst text document graphs and thus is an unsup) s
5 280 M
(ervised similarity clustering for) s
5 269 M
(text analytics. GSpan has provisions for assigning minimum support for filtering patterns w) s
5 258 M
(hich amounts to finding prominent) s
5 247 M
(keywords in recursive gloss overlap graphs.) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(----------------------------------) s
5 203 M
(342. \(FEATURE-DONE\) Graph Mining Recursive Gloss Overlap Graph for text documents - Documen) s
5 192 M
(t Similarity) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(----------------------------------) s
5 159 M
(Commits - 17 October 2016) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(----------------------------------) s
5 126 M
(1.Code changes have been done to choose between numeric and word labelling of Graph vertice) s
5 115 M
(s in GSpan GraphMining implementation.) s
5 104 M
(2.New file GraphMining_RecursiveGlossOverlap.py has been added to JSON dump the Recursive G) s
5 93 M
(loss Overlap graph of a text document) s
5 82 M
(3.New directory InterviewAlgorithm/graphmining has been created which contains the numeric ) s
5 71 M
(and word labelled Recusive Gloss Overlap) s
5 60 M
(graphs of 5 example text documents in topic class "Chennai Metropolitan Area Expansion") s
5 49 M
(4.logs for commong edges mined between two Recursive Gloss Overlap document graphs has been) s
5 38 M
( committed in testlogs/) s
5 27 M
(5.Spidered web text has been updated) s
5 16 M
(6.GraphMining_RecursiveGlossOverlap.py JSON dumps the RGO edges into a text file and GraphM) s
5 5 M
(ining_GSpan.py JSON loads them from) s
_R
S
%%Page: (186) 186
%%BeginPageSetup
_S
18 36 translate
/pagenum 186 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (186) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(InterviewAlgorithm/graphmining/) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(-----------------------------------) s
5 698 M
(343. \(THEORY\) Streaming Majority and 2-Coloring\(Complement Functions\) - related to 14.16 an) s
5 687 M
(d 19,24,323,338,339 - important draft) s
5 676 M
(updates to http://arxiv.org/pdf/1106.4102.pdf - 1 November 2016) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(-----------------------------------) s
5 643 M
(In simple 2 candidate majority voting done on stream of votes, a 2-colored sequence of vote) s
5 632 M
(s by voters is generated. This is) s
5 621 M
(already mentioned in infinite majority \(Erdos Discrepancy Theorem\) - 14.16.Each color symbo) s
5 610 M
(lizes a candidate voted. This partitions) s
5 599 M
(the sequence of votes into 2 monochromatic sets. Obviously, if the voters are uniquely iden) s
5 588 M
(tified by a sequence number, all sequence coloring) s
5 577 M
(theorems imply there are monochromatic and multichromatic arithmetic progressions in voter ) s
5 566 M
(unique identities. Boyer-Moore algorithm) s
5 555 M
(computes streaming majority \(implemented in 339\),) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(-----------------------------------) s
5 511 M
(344. \(BUG-STABILITY ISSUES\) AsFer-VIRGO Boost::Python system calls invocations analysis - c) s
5 500 M
(ommits - 4 November 2016) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(-----------------------------------) s
5 467 M
(Some resumed analysis of AsFer-VIRGO boost::python invocations of VIRGO memory system calls) s
5 456 M
( which were stopped few months ago.) s
5 445 M
(The i915 DRM GEM error is highly reproducible pointing something unruly about it. No logica) s
5 434 M
(l reason can be attributed to this except) s
5 423 M
(some kernel sync issues.  This further confirms that there is nothing wrong with VIRGO laye) s
5 412 M
(r of Linux kernel and Linux kernel deep) s
5 401 M
(within inherently has a chronic problem.) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-----------------------------------) s
5 357 M
(345. \(THEORY\) Polynomial Reconstruction \(PR\) Problem, Error Correcting Codes and 2-Coloring) s
5 346 M
(/Complement Functions - important) s
5 335 M
(draft updates to http://arxiv.org/pdf/1106.4102.pdf - 10 November 2016 and 17 November 2016) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(-----------------------------------) s
5 302 M
(Polynomial Reconstruction Problem states that:) s
5 291 M
(Given a set of n points \(x1,y1\),\(x2,y2\),...,\(xn,yn\) recover all polynomials p of degree les) s
5 280 M
(s than k such that pi\(xi\) != yi) s
5 269 M
(for maximum of i points in {1,2,3,...,n}. In other words PRP is a curve-fitting interpolati) s
5 258 M
(on problem and is related to) s
5 247 M
(Error correcting problems like List Decoding \(list of polynomials approximating a message o) s
5 236 M
(ne of which is correct\),Reed-Solomon Codes.) s
5 214 M
(2-Coloring scheme algorithms and Complement Function constructions are alternative spectacl) s
5 203 M
(es to view the Polynomial Reconstruction) s
5 192 M
(Problem i.e Complement Function and 2-Coloring are special settings of Polynomial Reconstru) s
5 181 M
(ction with exact curve fitting.) s
5 159 M
(References:) s
5 148 M
(----------) s
5 137 M
(345.1 Polynomial Reconstruction and Cryptanalysis - Berlekamp-Welch, Guruswami-Sudan algori) s
5 126 M
(thms - https://eprint.iacr.org/2004/217.pdf) s
5 115 M
(345.2 Hardness of Constructing Multivariate Polynomials over Finite Fields - [ParikshitGopa) s
5 104 M
(lan,SubhashKhot,RishiSaket] - https://www.cs.nyu.edu/~khot/papers/polynomial.pdf - If there) s
5 93 M
( is a polynomial P\(X1,X2,...,Xn\) such that P\(xi\) = f\(xi\) for all points \(xi,f\(xi\)\), it can ) s
5 82 M
(be found by interpolation. This is exact agreement. Can we find a polynomial that agrees on) s
5 71 M
( most points? This approximation is proved to be NP-hard.) s
5 60 M
(345.3 Lagrange Interpolation and Berlekamp-Welch PRP algorithm - [SadhkanRuma] - https://ww) s
5 49 M
(w.academia.edu/2756695/Evaluation_of_Polynomial_Reconstruction_Problem_using_Lagrange_Inter) s
5 38 M
(polation_Method?auto=download) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(----------------------------------) s
_R
S
%%Page: (187) 187
%%BeginPageSetup
_S
18 36 translate
/pagenum 187 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (187) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(346. \(THEORY\) Data written in electronic storage devices \(e.g CD/DVD\) and 2-Coloring/Comple) s
5 731 M
(ment Functions - important) s
5 720 M
(draft updates to http://arxiv.org/pdf/1106.4102.pdf - 24 November 2016 and 28 November 2016) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(----------------------------------) s
5 687 M
(CD/DVD storage devices contain binary data burnt on concentric cylindrical tracks. A radial) s
5 676 M
( line from central bull's eye of the circular storage to outer rim crosscuts the data to fo) s
5 665 M
(rm a binary string of length n where n is the radius of circular storage. This radial line ) s
5 654 M
(sweeping the) s
5 643 M
(complete circle in a scan covers 2^n possible binary strings. In the best case all 2^n word) s
5 632 M
(s are distinct. Total Number of 1s or 0s in these) s
5 621 M
(2^n words are in fibonacci sequence:) s
5 610 M
(        f\(n\) = 2f\(n-1\) + 2^\(n-1\)) s
5 599 M
(with f\(0\)=0 and f\(1\)=1. In 2-coloring parlance, DVD is 2-colored with 1\(red\) and 0\(blue\) wh) s
5 588 M
(ere number of monochromatic bits is lower) s
5 577 M
(bounded by:) s
5 566 M
(        f\(n\) = 2f\(n-1\) + 2^\(n-1\) out of minimum n*2^n possible bits on the storage. Thus an) s
5 555 M
(y data written to storage ultimately gets translated into a 2-coloring complement function ) s
5 544 M
(scheme.For example, device with 3 concentric tracks has 3*2^3=24 minimum possible bit posit) s
5 533 M
(ions and:) s
5 522 M
(        f\(3\) = 2f\(2\) + 2^2 = 2\(2f\(1\) + 2\) + 2^2 = 8 + 4 = 12 minimum possible monochromatic) s
5 511 M
( bit positions) s
5 500 M
(This has some applications of Hales-Jewitt Theorem for multidimensional 2-coloring - storag) s
5 489 M
(e device always has a monochromatic k-line.\(where k is dimension and k-line is a hyperline.) s
5 478 M
( 2-line is a square and 3-line is a cube\). As a simple example for n=2:) s
5 467 M
(        00) s
5 456 M
(        01) s
5 445 M
(        10) s
5 434 M
(        11) s
5 423 M
(are minimum possible distinct binary words swept by a radial scan of the circle and there a) s
5 412 M
(re f\(2\)=2f\(1\) + 2 = 4 monochromatic bits spread across out of 2*2^2=8 possible bits in 4 bi) s
5 401 M
(nary strings. A crucial insight is that any high level data stored has an order in low leve) s
5 390 M
(l 2-coloring or Complement Function scheme \(Monochromatic APs etc.,\) though high level data) s
5 379 M
( is usually alphanumeric and appears random. A conjectural question is: Does the low level ) s
5 368 M
(2-coloring binary order imply high level non-binary order and are they functionally related) s
5 357 M
(?) s
5 335 M
(The previous question has been answered in 2.10.  There could be \\/ shaped gaps in circular) s
5 324 M
( arrangement of 2^n binary word radial lines. These gaps could be resolved by recursive app) s
5 313 M
(lication of f\(n\) for all lengths < n. Let this new function be g\(n\) defined as:) s
5 302 M
(        g\(n\) = f\(n\) + f\(n-1\) + f\(n-2\) + ... + f\(1\) + f\(0\)) s
5 291 M
(Thus g\(n\) is the tightest bound for number of 1s and 0s. Prefix "minimum" has been added in) s
5 280 M
( this bound because repetitions of some binary words in radial line during circular scan ha) s
5 269 M
(ve been ignored and hence a lowerbound. Total number of bit positions is k*2*pi*\(1+2+3+...+) s
5 258 M
(n\) = k*2*pi*n\(n+1\)/2 summing up all concentric tracks for some constant k. Lowerbound g\(n\) ) s
5 247 M
(for 1s and 0s implies a unique distribution of all binary word patterns and any number abov) s
5 236 M
(e this lowerbound implies predominance and emergence of a binary pattern.) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(----------) s
5 192 M
(347. \(FEATURE-DONE\) NeuronRain C++-Python System calls invocation - Commits - 29 November 2) s
5 181 M
(016) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(----------) s
5 148 M
(1. Further analysis of NeuronRain AsFer-VIRGO boost::python system calls invocation - there) s
5 137 M
( has been) s
5 126 M
(an erratic -32 and -107 errors) s
5 115 M
(2. But VIRGO system calls work without problems - malloc,set and get work as expected) s
5 104 M
(3. There is a later panic outside VIRGO code but logs have not been found.) s
5 93 M
(4. Logs for this have been added in testlogs/) s
5 82 M
(5. boost C++ code has been rebuilt.) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(----------------------------------------------------) s
5 38 M
(348. \(THEORY\) Kleinberg Lattice , Random Graph Ontologies, Bose-Einstein model and Recursiv) s
5 27 M
(e Gloss Overlap algorithm for ranking documents by intrinsic merit - 3 December 2016 and 20) s
5 16 M
( December 2016 - related to 202, 229 and 230) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (188) 188
%%BeginPageSetup
_S
18 36 translate
/pagenum 188 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (188) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(----------------------------------------------------) s
5 731 M
(Result of r=2 in [Kleinberg - 202.19] is an equilibrium state. Random shortcut edges are cr) s
5 720 M
(eated with some probabilities between any two nodes n1 and n2 on a lattice of all possible ) s
5 709 M
(nodes. Thus there are 2 distance measures between any two nodes on a lattice - 1\) lattice d) s
5 698 M
(istance which is the usual manhattan distance step function - this is circuitous. 2\) random) s
5 687 M
( edge distance between pair of vertices n1 and n2 on the lattice which is shortcut. The ran) s
5 676 M
(dom edge has the probability as a function of lattice distance:) s
5 665 M
(        random edge probability\(d\(n1,n2\)\) = |l\(n1,n2\)|^\(-r\) where l is the lattice distance) s
5 654 M
(When r is less than 2 or close to zero, random edges are as numerous as lattice edges \(rand) s
5 643 M
(om edges exist in abundance but they are no better than lattice paths\) and when r is more t) s
5 632 M
(han 2, random edges are rarer \(random edges fade, only lattice paths are possible and no sh) s
5 621 M
(ortcut random paths\) and it is difficult to find a path for message to be delivered from on) s
5 610 M
(e extreme to the other. Steady state converges and these two conflicts are resolved when r=) s
5 599 M
(2 and it is optimum to find a path between two nodes.) s
5 577 M
(Above small world phenomenon can be mapped to ontology of linguistic concepts/words. Let se) s
5 566 M
(t of all concepts/words form a lattice. Set of random edges with probability embeds a rando) s
5 555 M
(m graph on some or all of these lattice points and thus is a probabilistic ontology - proba) s
5 544 M
(bility depends on distance measure of 2 concepts. Document definition graph obtained from t) s
5 533 M
(his ontology with recursive gloss overlap is optimal \(easy to find path between concepts in) s
5 522 M
( a document and grasp meaning\) when it has r=2 by previous lattice-randomedge relation. Usu) s
5 511 M
(al distance measures are based on least common ancestor principle - node which is conceptua) s
5 500 M
(lly common to two other nodes creates a path. Lower the distance, greater the meaningfulnes) s
5 489 M
(s. Reference 202.20 adds disambiguation to finding distance by aligning and intersecting al) s
5 478 M
(l possible senses of two concepts with a random walk and doing argmax\(\) to find distance. P) s
5 467 M
(robabilistic random edge ontology created on a lattice of concepts provides dynamism in tex) s
5 456 M
(t analytics.) s
5 434 M
(Kleinberg criterion of r=2 is an alternative way to assess the meaningfulness of a document) s
5 423 M
(. Document definition graph with r=2 should theoretically have easy paths between concepts ) s
5 412 M
(and average short distance measures across nodes and hence has high intrinsic merit. From t) s
5 401 M
(he above relation:) s
5 390 M
(        r * log\(l\(n1,n2\)\) = log\(1/d\(n1,n2\)\)) s
5 379 M
(When r=2:) s
5 368 M
(        2log\(l\(n1,n2\)\) = log\(1/d\(n1,n2\)\)) s
5 357 M
(which stipulates conditions for high intrinsic merit for a document in terms of lattice dis) s
5 346 M
(tance and random edge probability between two concepts n1 and n2.) s
5 324 M
(Bose-Einstein model for networks relates fitness of a vertex \(ability to attract edges\) in ) s
5 313 M
(a graph and Bose-Einstein condensation. Kleinberg's small-world graph has average clusterin) s
5 302 M
(g coefficient significantly higher than a random graph and mean shortest distance approxima) s
5 291 M
(tely same as random graph \(on same vertices\). Here clustering coefficient is the ratio of n) s
5 280 M
(umber of edges to neighbours and number of all possible edges to neighbours. Kleinberg's sm) s
5 269 M
(all-world graph, Bose-Einstein condensation in network graphs and Intrinsic meaningfulness ) s
5 258 M
(merit in graph representation of documents are closely related because all three are multip) s
5 247 M
(le views of "meaningfulness" or "connectedness" in a document.) s
5 225 M
(References:) s
5 214 M
(----------) s
5 203 M
(348.1 Bose-Einstein Model and Complex Networks - https://en.wikipedia.org/wiki/Bose%E2%80%9) s
5 192 M
(3Einstein_condensation_\(network_theory\)) s
5 181 M
(348.2 Golden mean as a clock cycle of brain waves - http://www.v-weiss.de/chaos.html - "...) s
5 170 M
(In 2001 Bianconi and Barab\303\241si [15] discovered that not only neural networks but all evolvi) s
5 159 M
(ng networks, including the World Wide Web and business networks, can be mapped into an equi) s
5 148 M
(librium Bose gas, where nodes correspond to energy levels and links represent particles. St) s
5 137 M
(ill unaware of the research by Pascual-Leone, for these network researchers this correspond) s
5 126 M
(ence between network dynamics and a Bose gas was highly unexpected [16]...") s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(------------------------------------------------) s
5 82 M
(349. \(THEORY\) Randomness, Quantum Machine Learning and a Schroedinger Cat simulation of lea) s
5 71 M
(rning patterns in BigData - 23 December 2016) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(------------------------------------------------) s
5 38 M
(Caution: This section postulates a drastically new theory mapping quantum mechanics to lear) s
5 27 M
(ning patterns in bigdata which is subject to errors.) s
5 5 M
(State of a subatomic particle is defined by a wave function on Hilbert Space \(Complex State) s
_R
S
%%Page: (189) 189
%%BeginPageSetup
_S
18 36 translate
/pagenum 189 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (189) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( Vector Space\). In Dirac notation wave function for particle p is, |p> = a1|s1> + a2|s2> + ) s
5 731 M
(... + an|sn> is state of a particle where each ai is a complex number named amplitude of pa) s
5 720 M
(rticle at state si - particle's state is a linear superposition of all states si with ampli) s
5 709 M
(tude ai. Dirac delta function is fourier transform of Schroedinger wave equation of a parti) s
5 698 M
(cle. State vector |p> is a linear superposition of all possible alternatives \(or\) Hilbert s) s
5 687 M
(pace dimensions that a particle can exist with respective amplitude for each dimension. Set) s
5 676 M
( of states form orthonormal basis for this Hilbert space. Wave function state vector collap) s
5 665 M
(ses to one of the states to give a classical probability for the state estimated by square ) s
5 654 M
(of amplitude for the state dimension. For example, in Young's Double Slit experiment a sing) s
5 643 M
(le photon acts as a wave by duality and interferes with itself by travelling through both s) s
5 632 M
(lits to establish an interference pattern with state vector wavefunction amplitudes which c) s
5 621 M
(ollapses to a classical probability when one of the slits is closed. Schroedinger's  cat pa) s
5 610 M
(radox is an imaginary thought experiment \(not possible in reality\) where a black box with c) s
5 599 M
(at and a radioactive material triggered by a particle's spin exists in both states dead and) s
5 588 M
( alive simultaneously when viewed from outside with amplitude 1/sqrt\(2\): |state of cat> =  ) s
5 577 M
(1/sqrt\(2\) \( |dead> + |alive> \). Squaring amplitude 1/sqrt\(2\) gives classical probability 1/) s
5 566 M
(2 for each state. There are two observers - one within the black box and one outside of it.) s
5 555 M
( For observer within black box, particle spin is measurable and wavefunction collapses to o) s
5 544 M
(ne of the states "dead or alive" while for observer outside black box there is no way for s) s
5 533 M
(uch collapse to occur and state is a superposition "dead and alive".) s
5 511 M
(In terms of BigData analytics, learning a variable in a blackbox is reducible to Schroeding) s
5 500 M
(er's Cat paradox. Assuming there exists a Pseudorandom Generator with Quantum Mechanical so) s
5 489 M
(urce, Cat is an algorithm with access to randomness - e.g Double Slit experiment, radioacti) s
5 478 M
(ve decay etc., and chooses one of the alternative outputs - output1, output2, ..., outputn ) s
5 467 M
(- based on quantum mechanical measurement \(e.g spin\) with "if...else" branches. This random) s
5 456 M
(ized algorithm can be thought of as a subroutine F. Observer1 which measures output of F is) s
5 445 M
( another subroutine G. Thus both F and G together constitute the blackbox. Observer2 outsid) s
5 434 M
(e the blackbox is another subroutine H. Only G measures output of F and state vector collap) s
5 423 M
(ses to one of the alternative outputs. But for H, F+G is impervious and state vector remain) s
5 412 M
(s as: a1|output1> + a2|output2> +...+ an|outputn> with complex amplitudes ai. This extends ) s
5 401 M
(the notion of Pseudorandomness in traditional complexity literature to a more generic state) s
5 390 M
( vector with complex amplitudes over a Hilbert space of dimensions\(alternatives\) - here alg) s
5 379 M
(orithm is itself a "particle" with a superposed state of outputs.) s
5 357 M
(Any BigData set with apparent randomness can be construed as a series of outputs over time ) s
5 346 M
(generated by a randomized algorithm \(or\) an algorithm with access to randomness including q) s
5 335 M
(uantum mechanical randomness \(For example, streamed datasets like stock market tickers\) i.e) s
5 324 M
( the algorithm F. Subroutines F+G together create a BigData set from randomness. When viewe) s
5 313 M
(d from H, the blackbox F+G has a state vector wavefunction evolving over time: W\(t\) = a1|ou) s
5 302 M
(tput1> + a2|output2> + ... + an|outputn>. Any machine learning algorithm which tries to lea) s
5 291 M
(rn patterns from such a dataset is equivalent to what H does above. If H learns the pattern) s
5 280 M
( in the dataset with x% accuracy, it implies algorithms F+G are reverse engineered with x% ) s
5 269 M
(correctness. This presents a contradiction if the source of randomness is quantum mechanica) s
5 258 M
(l - state vector collapses for both observers G and H, not only for G. If Schroedingers cat) s
5 247 M
( paradox is axiomatically true, it raises questions: Does this limit the scope of machine l) s
5 236 M
(earning to only classical randomness? Is quantum randomness not learnable?) s
5 214 M
(An alternative formulation of F+G is:) s
5 203 M
(F is the quantum randomness source \(e.g Double slit\) and G invokes \(or measures\) F to produ) s
5 192 M
(ce a datastream over time. Here G as observer within blackbox is an inseparable entity from) s
5 181 M
( F i.e F is an internal routine of G.) s
5 159 M
(There are two levels of learning possible:) s
5 148 M
(*\) Learning within blackbox - Learning patterns from observations of F+G. F+G are pre-equip) s
5 137 M
(ped with ability to learn patterns in collapsed wavefunction generated dataset. Such a patt) s
5 126 M
(ern learnt exists only within the blackbox. External observer H has no way to learn the dat) s
5 115 M
(aset and the pattern. Even within F+G there are problems with learning patterns from quantu) s
5 104 M
(m randomness. Logical independence implies any two observations \(boolean propositions\) are ) s
5 93 M
(independent and learning pattern from such independent observations contradicts it - patter) s
5 82 M
(n in independent observations imply observations are dependent on each other. For example, ) s
5 71 M
(two propositions "Today is holiday" and "There are 100 cars" are logically independent whil) s
5 60 M
(e propositions "There are 100 flights" and "There are 100 cars" are logically dependent. Fo) s
5 49 M
(rmer 2 propositions have no common patterns while latter 2 propositions have a common patte) s
5 38 M
(rn \(100, vehicles\) - new information "100 and vehicles" is deducible from 2 propositions. Q) s
5 27 M
(uantum randomness stems from logical independence and thus there should not be a common pat) s
5 16 M
(tern to learn from independent streaming set of observations.) s
_R
S
%%Page: (190) 190
%%BeginPageSetup
_S
18 36 translate
/pagenum 190 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (190) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(*\) Learning outside blackbox - This is obvious contradiction mentioned previously because d) s
5 731 M
(ataset generated by F+G is never visible to H because wavefunction of H never collapses.) s
5 709 M
(Thus above seems to imply learning is impossible with quantum randomness.) s
5 687 M
(References:) s
5 676 M
(----------) s
5 665 M
(349.1 Feynman Lectures on Physics - [RichardFeynman] - Volume 3 - Chapter 1 and 2) s
5 654 M
(349.2 Emperor's New Mind - [RogerPenrose] - Chapter 6 - Quantum Magic and Quantum Mystery) s
5 643 M
(349.3 Quantum Randomness and Logical Independence - https://arxiv.org/pdf/0811.4542v2.pdf -) s
5 632 M
( Mutually independent logical propositions cause quantum randomness) s
5 621 M
(349.4 Elitzur-Vaidman Bomb tester - https://en.wikipedia.org/wiki/Elitzur%E2%80%93Vaidman_b) s
5 610 M
(omb_tester - Detecting if bomb inside a box has detonated or not by quantum superposition -) s
5 599 M
( Constructive and Destructive self-interference - Previous thought experiment replaces the ) s
5 588 M
(bomb in the box by a bigdata source which has to be predicted. Difference is one of the obs) s
5 577 M
(ervers \(detectors\) is within the box and other is outside.) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(--------------------------------------------) s
5 533 M
(350. \(THEORY\) Quantum Parallelism, Quantum Interference, Integer Factoring, Periodicity Fin) s
5 522 M
(ding, Polynomial Reconstruction and) s
5 511 M
(Complement Function/2-Coloring - related to 24,34,323,338,345 and 347 - 29 December 2016 - ) s
5 500 M
(important draft updates to :) s
5 489 M
(        - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithm) s
5 478 M
(icSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft) s
5 467 M
(.tex/download and) s
5 456 M
(        - http://arxiv.org/pdf/1106.4102.pdf) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(--------------------------------------------) s
5 423 M
(Discrete Hyperbolic Factorization draft in 34 claims \(disputed because of input size though) s
5 412 M
( references exist to prove PRAM=NC equivalence and Bitonic Batcher Sort is in NC\) that inte) s
5 401 M
(gers can be factored by NC parallel computation circuit of logdepth and polynomial size \(by) s
5 390 M
( PRAM or Cloud Bitonic sorting\). Similar parallelism is the basis for Quantum Factorization) s
5 379 M
( Algorithm of [Shor] - factorization is in BQP and NC is in BQP. Quantum Computation relies) s
5 368 M
( on two phenomena:) s
5 357 M
(        *\) Quantum Parallelism in which a function f\(x\) is computed to get many values of f) s
5 346 M
(\(x\) in parallel) s
5 335 M
(        *\) Quantum Interference by Hadamard transform where cancellation occurs \( |0> = 1/s) s
5 324 M
(qrt\(2\)*\(|0>+|1>\) and |1> = 1/sqrt\(2\)*\(|0>-|1>\) \) by interference) s
5 302 M
(Period Finding in Quantum Computation finds smallest r such that f\(x\)=f\(x+r\) and Shor's fac) s
5 291 M
(torization internally applies period finding by quantum fourier transform. Ramsey theory of) s
5 280 M
( integers and related theorems viz., Van Der Waerden, Szemeredi etc., imply existence of mo) s
5 269 M
(nochromatic arithmetic progressions in 2-coloring of integer sequences where each color is ) s
5 258 M
(equivalent to a function and its complement. Period finding problem reduces to finding arit) s
5 247 M
(hmetic progressions in integer sequences by defining a function f\(x+iy\)=f\(x+\(i+1\)y\) for any) s
5 236 M
( x in the sequence and some integers y and i. More generically, factoring and period findin) s
5 225 M
(g are special cases of Hidden Subgroup Problem i.e f\(g\)=f\(hg\) for g in G and h in subgroup ) s
5 214 M
(H of G and hG is a coset of H. In terms of polynomial reconstruction, period finding comput) s
5 203 M
(es the function f passing through the arithmetic progression points. In Discrete Hyperbolic) s
5 192 M
( Factorization of 34, instead of quantum parallelism , classical NC parallelism is applied ) s
5 181 M
(to k-merge sort and binary search the pixelated hyperbola tiles.) s
5 159 M
(References:) s
5 148 M
(-----------) s
5 137 M
(350.1 Quantum Computation Course notes - Order Finding, Fermat's Little Theorem and Simon, ) s
5 126 M
(Shor Factorization algorithms - [AndrisAmbainis] - http://www.cs.ioc.ee/yik/schools/win2003) s
5 115 M
(/ambainis2002-2.ppt) s
5 104 M
(350.2 Progress on Quantum Algorithms - [PeterShor] - http://www-math.mit.edu/~shor/papers/P) s
5 93 M
(rogress.pdf) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(-----------) s
5 49 M
(351. \(FEATURE-DONE\) Recommender Systems Implementation based on ThoughtNet Hypergraph - 1 J) s
5 38 M
(anuary 2017) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(-----------) s
5 5 M
(*\) Input to python-src/DeepLearning_ReinforcementLearningRecommenderSystems.py is a set of ) s
_R
S
%%Page: (191) 191
%%BeginPageSetup
_S
18 36 translate
/pagenum 191 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (191) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(observations which are user activities) s
5 731 M
(\(shopping cart items, academic articles read by user etc.,\) and already built thoughtnet hy) s
5 720 M
(pergraph history is searched by usual) s
5 709 M
(evocatives from the input) s
5 698 M
(*\) Evocatives returned from ThoughtNet hypergraph are items recommended relevant to user's ) s
5 687 M
(activities.) s
5 676 M
(*\) This technique of recommendation is more qualitative than usual methods of Collaborative) s
5 665 M
( Filtering and mimicks the human) s
5 654 M
(thought process of "relevance based evocation" based on past experience \(i.e ThoughtNet his) s
5 643 M
(tory\)) s
5 632 M
(*\) New input text file and folder RecommenderSystems has been added to python-src with Neo4) s
5 621 M
(j Graph Database support) s
5 610 M
(*\) Logs have been committed in testlogs/) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(-----------) s
5 566 M
(352. \(FEATURE-DONE\) Kafka data storage for Streaming Abstract Generator - 2 January 2017) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-----------) s
5 533 M
(Kafka Streaming Platform has been added as a data storage in Streaming Generator Abstractio) s
5 522 M
(n Single-Window entrypoint. Kafka subscriber) s
5 511 M
(code for a neuronraindata topic polls for incoming messages in iterator. As an example Stre) s
5 500 M
(aming CountMeanMinSketch implementation has) s
5 489 M
(been updated to source streamed data published in Kafka.) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(------------------------------------------) s
5 445 M
(353. \(FEATURE-DONE\) An example usecase of Recommender Systems for online shopping cart - 2 ) s
5 434 M
(January 2017) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(------------------------------------------) s
5 401 M
(*\) RecommenderSystems folder has been updated with new text file from an example past shopp) s
5 390 M
(ing cart history items \(e.g books from miscellaneous) s
5 379 M
(topics in Amazon online bookstore\)) s
5 368 M
(*\) From the above edges a Hypergraph is created by classifying the shopping cart items into) s
5 357 M
( classes and constructing hyperedges across the) s
5 346 M
(classes \(by Recursive Gloss Overlap Graph maximum core number classifier\)) s
5 335 M
(*\) Text files for above usecase have .shoppingcart suffixes) s
5 324 M
(*\) Above shopping cart hypergraph has a past history of items chosen by a user from variety) s
5 313 M
( of topics.) s
5 302 M
(*\) New input file RecommenderSystems.shoppingcart.input.txt has present items in user's sho) s
5 291 M
(pping cart and new items have to be recommended to) s
5 280 M
(user based on present choice and past history.) s
5 269 M
(*\) For this, items in present shopping cart are lookedup in past sales history Hypergraph c) s
5 258 M
(reated previously and recommendations are returned) s
5 247 M
(*\) Items in present shopping cart are looked up in two ways: 1\) By classifying with Recursi) s
5 236 M
(ve Gloss Overlap graph and looking up rare classes) s
5 225 M
(less than a threshold \(presently core number 5\) and 2\) Raw token lookup) s
5 214 M
(*\) Logs for these two lookups based Recommendations generated are committed to testlogs/) s
5 192 M
(An important note: Rationale for Hypergraph based past history is that a meaningful text ca) s
5 181 M
(n be classified on multiple classes vis-a-vis usual) s
5 170 M
(supervised classifiers which classify text on exactly one class. This is more realistic bec) s
5 159 M
(ause text can delve into multiple topics simultaneusly e.g an article on medical imaging \(M) s
5 148 M
(RI scans\) could contain details also on nuclear physics and pattern recognition and can exi) s
5 137 M
(st in 3 classes simultaneously. There are still impurities in recommendations generated fro) s
5 126 M
(m lookups as gleaned from logs. These are inaccuracies in the way WordNet infers because of) s
5 115 M
( small size of the text description about book. Larger the description per shopping cart it) s
5 104 M
(em, greater is the information connectedness of the WordNet subgraph generated and accuracy) s
5 93 M
( of core number based classification.) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(---------------------------------------------) s
5 49 M
(354. \(FEATURE-DONE\) More detailed shopping cart example 2 for RGO+ThoughtNet based Recommen) s
5 38 M
(der System - 3 January 2017) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(---------------------------------------------) s
5 5 M
(*\) python-src/DeepLearning_ReinforcementLearningRecommenderSystems.py has been updated to c) s
_R
S
%%Page: (192) 192
%%BeginPageSetup
_S
18 36 translate
/pagenum 192 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (192) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(hoose top percentile classes of text input) s
5 731 M
(so that vertices with large core numbers get more weightage.) s
5 720 M
(*\) New shoppingcart2 product reviews text has been added and corresponding Hypergraph histo) s
5 709 M
(ry has been created. This example has detailed) s
5 698 M
(product description with an assorted mix \(TV reviews, Washing Machine reviews, Home Theatre) s
5 687 M
( reviews etc.,\) - python-src/RecommenderSystems/RecommenderSystems_Edges.shoppingcart2.txt,) s
5 676 M
(python-src/RecommenderSystems/RecommenderSystems_Hypergraph_Generated.shoppingcart2.txt) s
5 665 M
(*\) New input file python-src/RecommenderSystems.shoppingcart2.input.txt has been added with) s
5 654 M
( an example product \(TV\).) s
5 643 M
(*\) Recommender System chooses relevant TV products from Hypergraph history and displays to ) s
5 632 M
(user.) s
5 621 M
(*\) Logs have been committed to testlogs/) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(--------------------------------------------) s
5 577 M
(355. \(THEORY\) NEXP not in non-uniform ACC, P\(Good\) majority voting circuit and some contrad) s
5 566 M
(ictions - 4 January 2017 and 5 January 2017) s
5 555 M
(- related to all P\(Good\) majority voting circuit related points in this document \(e.g 14,53) s
5 544 M
( etc.,\)) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(--------------------------------------------) s
5 511 M
(RHS of P\(Good\) majority voting circuit has exponential size with unrestricted depth in wors) s
5 500 M
(t case and is in EXP \(if depth restricted , RHS is in PH direct-connect uniform circuit\). R) s
5 489 M
(HS is a boolean function composition of non-uniform NC and individual voter decision functi) s
5 478 M
(ons. Known) s
5 467 M
(result by [RyanWilliams] limits that NEXP is not in ACC \(AC circuits with counter mod[m] ga) s
5 456 M
(tes which output 1 if sum of inputs is a multiple) s
5 445 M
(of m\). Non uniform ACC is contained in TC and AC is contained in ACC \(AC in ACC in TC\). Thi) s
5 434 M
(s makes a contradiction if LHS is 100% efficient) s
5 423 M
(percolation circuit in non-uniform NC \(NC/poly\). If P\(Good\) binomial coefficient series sum) s
5 412 M
(mation converges to 100%, then RHS majority voting circuit is also 100% efficient and LHS=R) s
5 401 M
(HS. This implies if RHS has NEXP-complete algorithm/circuit, because of convergence, NEXP i) s
5 390 M
(s in NC/poly. But NC is in ACC and this implies NEXP has non-uniform ACC circuits - contrad) s
5 379 M
(icts NEXP does not have non-uniform ACC circuits. This is one) s
5 368 M
(more counterexample implying some or all of the following:) s
5 357 M
(       *\) There is no 100% efficient RHS majority voting boolean function composition) s
5 346 M
(       *\) There is no 100% efficient LHS boolean function \(pseudorandomly chosen boolean fu) s
5 335 M
(nction, ranked by social choice function etc.,\)) s
5 324 M
(       *\) RHS Majority voting is not in NEXP.) s
5 313 M
(       *\) LHS pseudorandom choice boolean cannot have a non-uniform NC circuit) s
5 302 M
(Above, "efficiency" implies "No error" cases in scenarios matrix of 53.14 and a ninth error) s
5 291 M
( scenario of Randomized Decision Tree Evaluation Error\(zero-error decision tree evaluation\)) s
5 280 M
( mentioned in 314, 317. This adds one more possibility where P\(Good\) binomial summation for) s
5 269 M
( majority voting diverges already mentioned in 53.16.3.1, 256, 265, 275. Ranking by social ) s
5 258 M
(choice function includes Interview algorithm implemented in Asfer and any other ranking fun) s
5 247 M
(ction. Thus there exists a setting where both LHS and RHS fail to converge. It has to be no) s
5 236 M
(ted that above counterexamples do not rule out the possibility of convergence of LHS and RH) s
5 225 M
(S of P\(Good\) circuit. There could be decision functions which adhere to "no error" cases in) s
5 214 M
( 10 possibilities as below:) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(------) s
5 181 M
(        x                               |    f\(x\) = f\(x/e\)      |       f\(x\) != f\(x/e\) Nois) s
5 170 M
(e    |) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(------) s
5 137 M
(x in L, x/e in L                        |       No error        |       Error              ) s
5 126 M
(     |) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(------) s
5 93 M
(x in L, x/e not in L                    |       Error           |   No error if f\(x\)=1,f\(x/) s
5 82 M
(e\)=0 |) s
5 71 M
(                                        |                       |   else Error             ) s
5 60 M
(     |) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(------) s
5 27 M
(x not in L, x/e in L                    |       Error           |   No error if f\(x\)=0,f\(x/) s
5 16 M
(e\)=1 |) s
5 5 M
(                                        |                       |   else Error             ) s
_R
S
%%Page: (193) 193
%%BeginPageSetup
_S
18 36 translate
/pagenum 193 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (193) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(     |) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(------) s
5 709 M
(x not in L, x/e not in L                |       No error        |      Error               ) s
5 698 M
(     |) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(------) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(-----) s
5 643 M
(       x                                |                       f\(x\)                       ) s
5 632 M
(    |) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(-----) s
5 599 M
(Randomized Decision tree evaluation     |       No error       |       Error               ) s
5 588 M
(    |) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(-----) s
5 555 M
(If LHS social choice ranking function is Interview algorithm which is a PSPACE=IP algorithm) s
5 544 M
( \(by straightforward reduction from polynomial round prover-verifier protocol\) or a PSPACE ) s
5 533 M
(function fitting within "No error" scenarios in matrix above, then an unrestricted depth 10) s
5 522 M
(0% errorfree RHS EXP circuit could imply, EXP=PSPACE. Hence whether such perfect resilient ) s
5 511 M
(errorfree decision functions in previous "No error" cases can be learnt is an open question) s
5 500 M
(.) s
5 478 M
(There are natural processes like Soap Bubble formation known to solve Steiner Tree NP-hard ) s
5 467 M
(problem efficiently. Soap Bubbles between two) s
5 456 M
(glass plates are formed and bubbles are connected by line segments of optimum total length ) s
5 445 M
(which converge at Steiner vertices. Voting is a) s
5 434 M
(also a natural process with human element involved. Does human judgement overwhelm algorith) s
5 423 M
(mic judgement in decision correctness is also an) s
5 412 M
(open question. If neural networks are algorithmic equivalents of human reasoning, then each) s
5 401 M
( voter decision function could be a TC \(threshold\) circuit and majority voting could be a c) s
5 390 M
(omposition of NC majority function with TC voter circuit inputs. Thus entire RHS of P\(Good\)) s
5 379 M
( is a huge) s
5 368 M
(non-uniform TC neural network. Error of majority voting is then equal to error of this majo) s
5 357 M
(rity function + neural network composition i.e majority voting involving humans is BPTC alg) s
5 346 M
(orithm.) s
5 324 M
(Previous matrix of 10 scenarios basically subdivides the traditional BP* definition which s) s
5 313 M
(ays: For x in L, a BP* turing machine accepts with probability > 2/3 and for x not in L rej) s
5 302 M
(ects with probability > 2/3. In other words, a BP* algorithm allows false positives and fal) s
5 291 M
(se negatives and thus errs in "judgement" with probability 1/3. All "Error" entries in the ) s
5 280 M
(previous matrix are :) s
5 269 M
(        *\) \(f\(x\)=f\(x/e\)\) in which case two correlated strings one in L and other not in L a) s
5 258 M
(re both accepted \(false positive\) and rejected by f \(false negative\)) s
5 247 M
(        *\) \(f\(x\) != f\(x/e\) - Noise sensitivity\) in which case two correlated strings in L o) s
5 236 M
(r not in L are erroneously accepted and rejected by f \(false positives and false negatives\)) s
5 225 M
(        *\) Previous two are input related while the last scenario with error in decision tr) s
5 214 M
(ee evaluation is internal to the boolean function itself with false positive and negative d) s
5 203 M
(ecision tree evaluation based on pseudorandom advice bits.) s
5 181 M
(This false positive + false negative voter judgement error applies to BPTC NC+neural networ) s
5 170 M
(k circuit composition also described previously. Derandomizing BPTC should give a non-unifo) s
5 159 M
(rm TC circuit for RHS of P\(Good\) majority voting implying zero-error voting by neural netwo) s
5 148 M
(rk voters. This non-uniform TC circuit is an alternative way to specify the enormity of RHS) s
5 137 M
( earlier described by PH=DC \(depth restricted\) and EXP \(depth unrestricted\) classes. Thus t) s
5 126 M
(hese two unbounded circuit models for RHS of P\(Good\) majority voting are equivalent: non-un) s
5 115 M
(iform TC and EXP. But ACC is contained in TC and NEXP is not in non-uniform ACC. This does ) s
5 104 M
(not rule out the possibility that EXP has non-uniform TC circuits which is a superset of AC) s
5 93 M
(C.) s
5 71 M
(References:) s
5 60 M
(-----------) s
5 49 M
(355.1 NEXP not in non-uniform ACC - [RyanWilliams] - http://www.cs.cmu.edu/~ryanw/acc-lbs.p) s
5 38 M
(df) s
5 27 M
(355.2 Soap Bubble Steiner Tree and P=NP - [ScottAaronson] - https://arxiv.org/pdf/quant-ph/) s
5 16 M
(0502072v2.pdf) s
5 5 M
(355.3 Constant depth Threshold circuits - http://people.cs.uchicago.edu/~razborov/files/hel) s
_R
S
%%Page: (194) 194
%%BeginPageSetup
_S
18 36 translate
/pagenum 194 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (194) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(sinki.pdf) s
5 731 M
(355.4 Circuit Complexity of Neural networks - https://papers.nips.cc/paper/354-on-the-circu) s
5 720 M
(it-complexity-of-neural-networks.pdf) s
5 709 M
(355.5 Exact Threshold circuits - http://www.cs.au.dk/~arnsfelt/Papers/exactcircuits.pdf) s
5 698 M
(355.6 Universal Approximation Theorem - [Cybenko] - https://en.wikipedia.org/wiki/Universal) s
5 687 M
(_approximation_theorem - Multilayered Perceptrons with single hidden layer and finite input) s
5 676 M
(s can approximate continuous functions [It has to be noted that single layer perceptron can) s
5 665 M
(not compute XOR function and spatial connectedness - from Perceptrons:an introduction to co) s
5 654 M
(mputational geometry by MarvinMinsky-SeymourPapert]. Thus BPTC threshold networks with mult) s
5 643 M
(iple layers as voter decision functions are good approximators of voting decisions.) s
5 632 M
(355.7 L* algorithm for exact learning of DFAs - [Dana Angluin] - https://people.eecs.berkel) s
5 621 M
(ey.edu/~dawnsong/teaching/s10/papers/angluin87.pdf - membership and counterexample queries ) s
5 610 M
(to learn DFA) s
5 599 M
(355.8 Efficient Learning Algorithms Yield Circuit Lower Bounds - [Lance Fortnow] - http://l) s
5 588 M
(ance.fortnow.com/papers/files/fksub.pdf - Theorem 1 and Corollary 1 for depth-2 threshold c) s
5 577 M
(ircuits \(neural networks\) - " ... If there exists an algorithm for exactly learning class C) s
5 566 M
( \(e.g depth-two neural networks\) in time 2^s^o\(1\) with membership and equivalence queries t) s
5 555 M
(hen EXP^NP is not in P/Poly\(C\) \(e.g TC0[2]\) ... ". This theorem has direct implications for) s
5 544 M
( learning voter decision functions belonging to TC and BPTC classes in majority voting. Int) s
5 533 M
(uitively, this implies if an exact voter neural network without error is learnt in time exp) s
5 522 M
(onential in size of neural network \(e.g error minimization by gradient descent, backpropaga) s
5 511 M
(tion etc.,\), then EXP^NP is not computable by neural networks - EXP^NP is not in TC/poly.) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(---------------------------------------------) s
5 467 M
(356. \(FEATURE-DONE\) PythonSpark+Cython Interview Algorithm cloud implementation update - 4 ) s
5 456 M
(January 2017 - related to 348) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(---------------------------------------------) s
5 423 M
(PythonSpark+Cython Cloud Implementation of Interview Algorithm has been updated to print av) s
5 412 M
(erage clustering coefficient of the definition) s
5 401 M
(graph for text. Average clustering coefficient is average\(per node clustering coefficient\) ) s
5 390 M
(for all nodes where clustering coefficient of) s
5 379 M
(a vertex is a ratio of edges to neighbours to all possible edges to neighbours \(or\) amount ) s
5 368 M
(of "cliqueness" of each neighbourhood of all) s
5 357 M
(vertices in a graph. This adds an alternative way for computing intrinsic merit of a docume) s
5 346 M
(nt recursive gloss overlap graph mentioned in) s
5 335 M
(348 \(Kleinberg's small world graph and clustering coeffient = 2\). Average clustering coeffi) s
5 324 M
(cient supplements the intrinsic merit quantitative) s
5 313 M
(score in deciding semantic relatedness of a graph. Closer the clustering coefficient is to ) s
5 302 M
(2, it is easier to find paths in graph of a text) s
5 291 M
(and greater the linguistic meaningfulness.) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(--------------------------------------------) s
5 247 M
(357. \(THEORY\) P\(Good\) non-majority versus majority social choices, BPTC and PSPACE classes ) s
5 236 M
(- related to 317,355 - 6 January 2017) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(--------------------------------------------) s
5 203 M
(Caution: Following tries to prove a major lowerbound result with some assumptions and is su) s
5 192 M
(bject to errors.) s
5 170 M
(Main motivation for so much emphasis on P\(Good\) binomial summation convergence is: LHS is n) s
5 159 M
(on-majority social choice and RHS is majority) s
5 148 M
(social choice and convergence to 100% on both sides implies LHS and RHS are of equal merit ) s
5 137 M
(with varying complexity classes giving a lowerbound. In non-majority social choice one of t) s
5 126 M
(he elements in the population set has to be chosen without voting. If there are n voters an) s
5 115 M
(d out of them m are of x% goodness, probability of pseudorandom choice to have x% efficienc) s
5 104 M
(y = m/n. If LHS is an Interview algorithm based social choice,) s
5 93 M
(choice process is as follows:) s
5 71 M
(foreach\(voter\)) s
5 60 M
({) s
5 49 M
(       Interview the voter \(a PSPACE-complete problem where polynomial number of question-a) s
5 38 M
(nswering reduces to prover-verifier protocol\)) s
5 27 M
(}) s
5 16 M
(Rank the voters by merit and choose the topmost as non-majority social choice - voting is o) s
5 5 M
(bviated.) s
_R
S
%%Page: (195) 195
%%BeginPageSetup
_S
18 36 translate
/pagenum 195 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (195) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(It is interesting to note that web search engines use both non-majority \(Ranking by merit\) ) s
5 720 M
(and majority choice \(e.g PageRank,Hub-Authority\) to rank websites. Above algorithm is polyn) s
5 709 M
(omial time in number of voters. Previous loop is parallelizable per voter and could be an N) s
5 698 M
(C circuit with PSPACE algorithms as inputs. Thus effectively LHS is a PSPACE algorithm. RHS) s
5 687 M
( majority voting is better approximated by BPTC circuit with threshold neural network circu) s
5 676 M
(its for each voter, mentioned previously. It is known that BPP is in PSPACE. Thus LHS inter) s
5 665 M
(view social choice with error is already accounted for in PSPACE. This equates an error-pro) s
5 654 M
(ne LHS PSPACE-complete problem to an error-prone RHS BPTC problem. BPTC is in BPP \(couldn't) s
5 643 M
( find reference for this, but looks obvious because every TC circuit with error can be simu) s
5 632 M
(lated by a polynomial time Turing Machine with error\). This implies BPTC is in PSPACE becau) s
5 621 M
(se BPP is in PSPACE. If equal error on both LHS and RHS implies a lowerbound, LHS PSPACE-co) s
5 610 M
(mplete interview non-majority social choice has a BPTC majority social choice circuit and t) s
5 599 M
(herefore all PSPACE problems are in BPTC. These two directions together imply PSPACE=BPTC. ) s
5 588 M
(But BPTC is in BPP and BPP is in PSPACE implying PSPACE=BPP. From https://www.cse.buffalo.e) s
5 577 M
(du/~regan/papers/ComplexityPoster.jpg, this might imply a collapse of entire Polynomial Hie) s
5 566 M
(rarchy upto second level and some consequences for NP and coNP.) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(--------------------------------------------) s
5 522 M
(358. \(THEORY\) KRW Conjecture on Boolean Function Composition, Non-majority \(PSPACE\) and Maj) s
5 511 M
(ority \(harder than PSPACE\) cicuits -) s
5 500 M
(related to 14,53,311,357 - 7 January 2017) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(--------------------------------------------) s
5 467 M
(Previous point mooted the idea of the parallel interview of voters and ranking them as a no) s
5 456 M
(n-majority social choice. This requires sorting) s
5 445 M
(the interview algorithm scores of individual voters and finding topmost. Sorting of numbers) s
5 434 M
( is in AC=NC=TC \(Sorting networks, parallel sorting,) s
5 423 M
( [ChandraStockMeyerVishkin] Constant Depth Reducibility for Sorting - http://www.cstheory.c) s
5 412 M
(om/stockmeyer@sbcglobal.net/csv.pdf etc.,) s
5 401 M
(Threshold circuits for sorting\) and each voter's PSPACE-complete interview circuit is input) s
5 390 M
( to NC sorting circuit to find non-majority social choice. Thus LHS is a circuit compositio) s
5 379 M
(n of NC and PSPACE voter interview circuits denoted as NC+PSPACE. RHS of P\(Good\) is, as alr) s
5 368 M
(eady mentioned by neural network approximation, a bounded probabilistic non-uniform BPTC ci) s
5 357 M
(rcuit which is a circuit composition of BPNC and voter BPTC circuits denoted as BPNC+BPTC. ) s
5 346 M
( If circuit compositions NC+PSPACE = PSPACE and BPNC+BPTC = BPTC then LHS is a PSPACE algor) s
5 335 M
(ithm to RHS BPTC algorithm assuming equal error.) s
5 313 M
(This creates a following intriguing possibility: If RHS majority voting has voter functions) s
5 302 M
( harder than PSPACE \(i.e EXP, EXPSPACE, NEXP, coNEXP etc., and not in BPTC\) , under equal e) s
5 291 M
(rror assumption, LHS PSPACE-complete non-majority interview algorithm lowerbounds the RHS. ) s
5 280 M
(PSPACE is in EXP and EXP is in PSPACE. Thus equal error assumption for lowerbound raises po) s
5 269 M
(ssibilities of PSPACE=EXP, PSPACE=NEXP, PSPACE=coNEXP, PSPACE=EXPSPACE etc., It has to be o) s
5 258 M
(bserved that both PSPACE and other harder-than-PSPACE classes contain PP\(Probabilistic Poly) s
5 247 M
(nomial\) and thus derandomization \(error removal\) is implicit. KRW Conjecture for Boolean Fu) s
5 236 M
(nction Composition of two boolean functions f and g says: DepthComplexity\(f + g\) ~ DepthCom) s
5 225 M
(plexity\(f\) + DepthComplexity\(g\). PSPACE-complete interview is equivalent to a TrueQBF phi\(q) s
5 214 M
(1,a1,q2,a2,...,qn,an\) computed by an Alternating Turing Machine \(AP=PSPACE\) where "forall" ) s
5 203 M
(quantifier is equivalent to a question qi and "exists" quantifier is equivalent to its answ) s
5 192 M
(er ai. It is not known if there is a Circuit Composition equivalent of KRW conjecture for d) s
5 181 M
(epth-size lowerbound of composition of two circuits and it is assumed that NC+\(PSPACE=AP\) =) s
5 170 M
( PSPACE because PSPACE is harder than NC and composition of NC with PSPACE should increase ) s
5 159 M
(circuit depth proportional to number of quantifiers in interview TQBF. RHS BPNC+BPTC=BPTC i) s
5 148 M
(s somewhat obvious because NC=TC=AC and only circuit depth-size increases when composed.) s
5 126 M
(References:) s
5 115 M
(-----------) s
5 104 M
(358.1 Karchmer-Raz-Wigderson \(KRW\) Conjecture of Boolean Function Composition and Informati) s
5 93 M
(on Complexity - http://cs.haifa.ac.il/~ormeir/papers/krw_info.pdf) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(-------------------------------------------) s
5 49 M
(359. \(THEORY\) Non-majority social choices - Interview Ranking Function and Pseudorandom Cho) s
5 38 M
(ice Function - 11 January 2017 - related to) s
5 27 M
(317, 358 and all other non-majority versus majority voting points) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(-------------------------------------------) s
_R
S
%%Page: (196) 196
%%BeginPageSetup
_S
18 36 translate
/pagenum 196 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (196) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Previous sections mentioned about two possible ways of non-majority social choice:) s
5 731 M
(        *\) Parallel interview of voters and ranking based on sorted interview scores) s
5 720 M
(        *\) Psuedorandom choice) s
5 698 M
(------------------) s
5 687 M
(Interview circuit:) s
5 676 M
(------------------) s
5 665 M
(Error in interview circuit which is an NC sorting network with PSPACE-complete voter interv) s
5 654 M
(iews as inputs is defined in usual sense as:) s
5 643 M
(False positives + False negatives + False questions = Percentage of wrong answers marked as) s
5 632 M
( right + Percentage of right answers marked as wrong + Percentage of wrong questions) s
5 610 M
(For sorting purposes output of TQBF is not a binary 0 or 1 but a binary string with value e) s
5 599 M
(qual to number of correct answers. Like all) s
5 588 M
(other boolean functions sensitivity of TQBF phi\(q1,a1,q2,a2,q3,a3,...,qn,an\) is defined as ) s
5 577 M
(how flipping of qi and ai affects the output.) s
5 566 M
(Formally,) s
5 555 M
(        Sensitivity\(TQBF\) = Pr\(TQBF\(X\) != TQBF\(Xcorrelated\)\) where Xcorrelated is an interv) s
5 544 M
(iew with erroneous questions and answers.) s
5 522 M
(Thus sensitivity captures the error in interview. It has to be noted that wrong questions a) s
5 511 M
(lso measure the flaw in interview process while wrong answer to a right question is already) s
5 500 M
( accounted for by a binary 0. When sensitivity of TQBF is 0, interview is flawless and LHS ) s
5 489 M
(if P\(good\) is 1. BKS Majority is least stable conjecture by [Benjamini-Kalai-Schramm] predi) s
5 478 M
(cts existence of a linear threshold function with stability greater than Majority function ) s
5 467 M
(of n variables, n odd. Interview Circuit which is a composition of an NC sorting network wi) s
5 456 M
(th PSPACE TQBF interviews of voters, is also a linear threshold function which outputs cand) s
5 445 M
(idate above a threshold \(i.e sum of correct answers > threshold\). If Stability\(Interview\) >) s
5 434 M
( Stability\(Majority\) then it is a proof of BKS conjecture. For large n, Stability\(Majority\)) s
5 423 M
( = 1-2/pi*\(delta\). When delta is close to 1, Stability\(Majority\) tends to 0.35.) s
5 401 M
(--------------------) s
5 390 M
(Pseudorandom Choice:) s
5 379 M
(--------------------) s
5 368 M
(Set of all voter decision functions is partitioned into n sets where each set has goodness ) s
5 357 M
(xi. Here goodness of a voter decision function f) s
5 346 M
(is defined as: 1-error\(f\).) s
5 324 M
(Let number of voter decision functions with goodness xi = m\(xi\). Thus N = m\(x1\)+m\(x2\)+m\(x3\)) s
5 313 M
(+...+m\(xn\)) s
5 302 M
(Expected goodness of a PRG choice is:) s
5 291 M
(        1/N * summation\(xi*m\(xi\)\) = \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\) + ... + xn*m\(xn\)\) / N) s
5 280 M
(When all voter functions have goodness 1 then PRG choice in LHS of P\(good\) has goodness 1.) s
5 258 M
(These two non-majority choices are just hypothetical examples of how a social choice can be) s
5 247 M
( made without voting. In reality how non-majority) s
5 236 M
(social choice occurs is quite complex and determined by various factors of society \( econom) s
5 225 M
(ic disparities, ethnicity etc.,\)) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(--------------------------------------) s
5 181 M
(360. \(FEATURE-DONE\) Commits - 11 January 2017 - DeepLearning Convolution Networks update) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(--------------------------------------) s
5 148 M
(Some changes done to Convolution computation:) s
5 137 M
(*\) Made sigmoid perceptron optional in final neural network from Maxpooling layer so that w) s
5 126 M
(eighted sum is printed instead of sigmoid value) s
5 115 M
(*\) This causes the convolution network to be very sensitive to presence of pattern) s
5 104 M
(*\) 2 more example bitmaps have been added with varying degree of pattern prominence \(a pron) s
5 93 M
(ounced X and a thin 1\)) s
5 82 M
(*\) With this final neurons from maxpooling layer print values of neurons which quite closel) s
5 71 M
(y reflect the pattern's magnitude: Huge pattern) s
5 60 M
(results in big value while small pattern results in small value proportionately.) s
5 49 M
(*\) This can rank the bitmaps in increasing degree of magnitude of pattern presence) s
5 38 M
(*\) Logs for this have been committed to testlogs) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(--------------------------------) s
_R
S
%%Page: (197) 197
%%BeginPageSetup
_S
18 36 translate
/pagenum 197 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (197) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(361. \(FEATURE-DONE\) DeepLearning Convolution Network - an example pattern recognition from ) s
5 731 M
(bitmap images - 12 January 2017) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(--------------------------------) s
5 698 M
(*\) Few more bitmap images have been included with same pattern but of different sizes) s
5 687 M
(*\) There are 5 patterns and 9 bitmaps:) s
5 676 M
(        - Thin X and Boldfaced X) s
5 665 M
(        - Thin 0 and Boldfaced 0) s
5 654 M
(        - Thin 8 and Boldfaced 8) s
5 643 M
(        - No pattern) s
5 632 M
(        - Thin 1 and Boldfaced 1) s
5 621 M
(*\) Expectation is that Convolution Network final neuron layer must output similar values fo) s
5 610 M
(r same pattern and different values) s
5 599 M
(for different patterns) s
5 588 M
(*\) pooling_neuron_weight has been reintroduced in final neuron layer of 10 neurons each wit) s
5 577 M
(h a randomly chosen weight.) s
5 566 M
(*\) Logs show for all 10 neurons, final neural activation values are close enough for simila) s
5 555 M
(r patterns and different for different patterns.) s
5 544 M
(*\) Thus Convolution Network which is a recent advance in DeepLearning works quite well to r) s
5 533 M
(ecognize similar image patterns.) s
5 511 M
(In above example , 9th and 10th neurons output following values. Example 11 and 12 are simi) s
5 500 M
(lar patterns - 0 and 0. Example 21 and 22 are similar patterns - 8 and 8. Example 41 and 42) s
5 489 M
( are similar patterns - X and X. Example 51 and 52 are similar patterns - 1 and 1. Neurons ) s
5 478 M
(reflect this similarities :) s
5 467 M
(###########################################################################################) s
5 456 M
(Inference from Max Pooling Layer - Neuron  8) s
5 445 M
(###########################################################################################) s
5 434 M
(Example 11:) s
5 423 M
(###########) s
5 412 M
([27.402311485751664]) s
5 401 M
(###########) s
5 390 M
(Example 12:) s
5 379 M
(###########) s
5 368 M
([27.36740767846171]) s
5 357 M
(###########) s
5 346 M
(Example 21:) s
5 335 M
(###########) s
5 324 M
([32.15200939997122]) s
5 313 M
(###########) s
5 302 M
(Example 22:) s
5 291 M
(###########) s
5 280 M
([30.835940458495205]) s
5 269 M
(###########) s
5 258 M
(Example 3:) s
5 247 M
(###########) s
5 236 M
([17.133246549473675]) s
5 225 M
(###########) s
5 214 M
(Example 41:) s
5 203 M
(###########) s
5 192 M
([29.367605168715038]) s
5 181 M
(###########) s
5 170 M
(Example 42:) s
5 159 M
(###########) s
5 148 M
([27.446193773968886]) s
5 137 M
(###########) s
5 126 M
(Example 51:) s
5 115 M
(###########) s
5 104 M
([22.12145242997834]) s
5 93 M
(###########) s
5 82 M
(Example 52:) s
5 71 M
(###########) s
5 60 M
([24.17603022706531]) s
5 49 M
(###########################################################################################) s
5 38 M
(Inference from Max Pooling Layer - Neuron  9) s
5 27 M
(###########################################################################################) s
5 16 M
(Example 11:) s
5 5 M
(###########) s
_R
S
%%Page: (198) 198
%%BeginPageSetup
_S
18 36 translate
/pagenum 198 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (198) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
([24.667080337176497]) s
5 731 M
(###########) s
5 720 M
(Example 12:) s
5 709 M
(###########) s
5 698 M
([24.635666910615544]) s
5 687 M
(###########) s
5 676 M
(Example 21:) s
5 665 M
(###########) s
5 654 M
([28.941808459974094]) s
5 643 M
(###########) s
5 632 M
(Example 22:) s
5 621 M
(###########) s
5 610 M
([27.757346412645685]) s
5 599 M
(###########) s
5 588 M
(Example 3:) s
5 577 M
(###########) s
5 566 M
([15.424921894526316]) s
5 555 M
(###########) s
5 544 M
(Example 41:) s
5 533 M
(###########) s
5 522 M
([26.435844651843524]) s
5 511 M
(###########) s
5 500 M
(Example 42:) s
5 489 M
(###########) s
5 478 M
([24.70657439657199]) s
5 467 M
(###########) s
5 456 M
(Example 51:) s
5 445 M
(###########) s
5 434 M
([19.914307186980512]) s
5 423 M
(###########) s
5 412 M
(Example 52:) s
5 401 M
(###########) s
5 390 M
([21.763427204358788]) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(--) s
5 346 M
(362. \(FEATURE-DONE\) DeepLearning BackPropagation Implementation Update - 17 January 2017) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(--) s
5 313 M
(*\) DeepLearning BackPropagation code has been changed to have 3 inputs, 3 hidden and 3 outp) s
5 302 M
(ut layers) s
5 291 M
(with 3*3=9 input-hidden weights and 3*3=9 hidden-output weights with total of 18 weights) s
5 280 M
(*\) Software Analytics example has been updated with a third input and logs for it have been) s
5 269 M
( committed) s
5 258 M
(to testlogs/.) s
5 247 M
(*\) Logs include a diff notes of how to extend this for arbitrary inputs and accuracy of bac) s
5 236 M
(kpropagation) s
5 225 M
(which beautifully converges at ~10^-26 error after ~1000000 iterations.) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(-----------) s
5 181 M
(363. \(FEATURE-DONE\) Software Analytics with DeepLearning - 18 January 2017) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(-----------) s
5 148 M
(*\) An example software analytics code based on DeepLearning implementation has been added t) s
5 137 M
(o) s
5 126 M
(software_analytics which import BackPropagation,Convolution and RecurrentLSTM to learn mode) s
5 115 M
(ls) s
5 104 M
(from software analytics input variables \(CPU%, Memory% and TimeDuration%\)) s
5 93 M
(*\) Logs for all 3 models learnt with same input variables have been added to software_analy) s
5 82 M
(tics/testlogs) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(-----------------------------------) s
5 38 M
(364. \(THEORY and IMPLEMENTATION\) Polynomial Encoding of a Text and 2 new distance measures ) s
5 27 M
(based on it - related to 2.9) s
5 16 M
(- 19 January 2017) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (199) 199
%%BeginPageSetup
_S
18 36 translate
/pagenum 199 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (199) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-----------------------------------) s
5 731 M
(*\) It has been earlier mentioned that an alphanumeric text can be construed as a polynomial) s
5 720 M
( defined as f:position->alphabet) s
5 709 M
(*\) This python implementation encodes a text as a polynomial by applying NumPy Polyfit func) s
5 698 M
(tion on ordinal values of the text) s
5 687 M
(letter positions as y-axis and letter positions as x-axis.) s
5 676 M
(*\) A sample polynomial plotted with matplotlib has been added to testlogs/ alongwith logs) s
5 665 M
(*\) Once a text is plotted as a polynomial curve, it is natural to define distance between t) s
5 654 M
(wo strings as distance) s
5 643 M
(between two respective polynomial encodings.) s
5 632 M
(*\) Usual distance measures for strings e.g Edit distance are somewhat qualitative and do no) s
5 621 M
(t quantify in numeric terms exactly.) s
5 610 M
(*\) Distance between polynomials of two texts is numerically quite sensitive to small change) s
5 599 M
(s in texts and visually match the) s
5 588 M
(definition of "distance" between two polynomials of strings.) s
5 566 M
(There are two distance functions defined for polynomial representation of texts:) s
5 555 M
(*\) Distance between polynomials is defined by inner product of polynomials f\(x\) and g\(x\) an) s
5 544 M
(d in discrete version is the) s
5 533 M
(L2 norm : sum\(i\(f\(xi\)-g\(xi\)\)^2\)) s
5 522 M
(*\) Distance between polynomials considering them as two discrete set of probability distrib) s
5 511 M
(utions - Kullback-Leibler and Jensen-Shannon) s
5 500 M
( Divergence measures.) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(-------------------------------------) s
5 456 M
(For example following are two polynomials fitted for ordinal values of 2 texts and comparat) s
5 445 M
(ive distance values are printed for) s
5 434 M
(edit distance and 2 polynomial distance measures:) s
5 423 M
(text9="fdjfjkkkkkkkkkkkkkfjjjjjjjjjjjskwwwwwwwwwwwwwwwwwwiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii) s
5 412 M
(iiiiiiiiii") s
5 401 M
(text10="wjejwejwkjekwjkejkwjekjwkjekwjjoisjdiwidoiweiwie0iw0eio0wie0wie0iw0ei0cndknfndnfndn) s
5 390 M
(fkdjfkjdfkjd) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-------------------------------------) s
5 357 M
(X-axis: xrange\(94\)) s
5 346 M
(Y-axis: [102, 100, 106, 102, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 10) s
5 335 M
(7, 107, 102, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 115, 107, 119, 119, 119) s
5 324 M
(, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 105, 105, 105,) s
5 313 M
( 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, ) s
5 302 M
(105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 1) s
5 291 M
(05, 105, 105, 105, 105]) s
5 280 M
(Coefficients of fitting polynomial of degree 5: [  1.07744279e+02  -1.44951431e+00   1.3392) s
5 269 M
(8005e-01  -3.69850703e-03) s
5 258 M
(   4.03119671e-05  -1.53297932e-07]) s
5 247 M
(X-axis: xrange\(95\)) s
5 236 M
(Y-axis: [119, 106, 101, 106, 119, 101, 106, 119, 107, 106, 101, 107, 119, 106, 107, 101, 10) s
5 225 M
(6, 107, 119, 106, 101, 107, 106, 119, 107, 106, 101, 107, 119, 106, 106, 111, 105, 115, 106) s
5 214 M
(, 100, 105, 119, 105, 100, 111, 105, 119, 101, 105, 119, 105, 101, 48, 105, 119, 48, 101, 1) s
5 203 M
(05, 111, 48, 119, 105, 101, 48, 119, 105, 101, 48, 105, 119, 48, 101, 105, 48, 99, 110, 100) s
5 192 M
(, 107, 110, 102, 110, 100, 110, 102, 110, 100, 110, 102, 107, 100, 106, 102, 107, 106, 100,) s
5 181 M
( 102, 107, 106, 100]) s
5 170 M
(Coefficients of fitting polynomial of degree 5: [  1.13816036e+02  -2.17630157e+00   1.9635) s
5 159 M
(7195e-01  -6.45349037e-03) s
5 148 M
(   8.34267469e-05  -3.67775407e-07]) s
5 137 M
(...) s
5 126 M
(##################################################################################) s
5 115 M
(Two text polynomial ordinal points are represented as set of ordered pairs) s
5 104 M
(##################################################################################) s
5 93 M
(Wagner-Fischer Edit Distance for text9 and text10: 76) s
5 82 M
(Polynomial Encoding Edit Distance \(JensenShannon\) for text9 and text10:) s
5 71 M
(str1str2_tuple: [\(102, 119\), \(100, 106\), \(106, 101\), \(102, 106\), \(106, 119\), \(107, 101\), \(1) s
5 60 M
(07, 106\), \(107, 119\), \(107, 107\), \(107, 106\), \(107, 101\), \(107, 107\), \(107, 119\), \(107, 106) s
5 49 M
(\), \(107, 107\), \(107, 101\), \(107, 106\), \(107, 107\), \(102, 119\), \(106, 106\), \(106, 101\), \(106) s
5 38 M
(, 107\), \(106, 106\), \(106, 119\), \(106, 107\), \(106, 106\), \(106, 101\), \(106, 107\), \(106, 119\),) s
5 27 M
( \(106, 106\), \(115, 106\), \(107, 111\), \(119, 105\), \(119, 115\), \(119, 106\), \(119, 100\), \(119, ) s
5 16 M
(105\), \(119, 119\), \(119, 105\), \(119, 100\), \(119, 111\), \(119, 105\), \(119, 119\), \(119, 101\), \() s
5 5 M
(119, 105\), \(119, 119\), \(119, 105\), \(119, 101\), \(119, 48\), \(119, 105\), \(105, 119\), \(105, 48\)) s
_R
S
%%Page: (200) 200
%%BeginPageSetup
_S
18 36 translate
/pagenum 200 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (200) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(, \(105, 101\), \(105, 105\), \(105, 111\), \(105, 48\), \(105, 119\), \(105, 105\), \(105, 101\), \(105, ) s
5 731 M
(48\), \(105, 119\), \(105, 105\), \(105, 101\), \(105, 48\), \(105, 105\), \(105, 119\), \(105, 48\), \(105) s
5 720 M
(, 101\), \(105, 105\), \(105, 48\), \(105, 99\), \(105, 110\), \(105, 100\), \(105, 107\), \(105, 110\), \() s
5 709 M
(105, 102\), \(105, 110\), \(105, 100\), \(105, 110\), \(105, 102\), \(105, 110\), \(105, 100\), \(105, 11) s
5 698 M
(0\), \(105, 102\), \(105, 107\), \(105, 100\), \(105, 106\), \(105, 102\), \(105, 107\), \(105, 106\), \(10) s
5 687 M
(5, 100\), \(105, 102\), \(105, 107\), \(105, 106\), \(1, 100\)]) s
5 676 M
(421.059610023) s
5 665 M
(Polynomial Encoding Edit Distance \(L2 Norm\) for text9 and text10:) s
5 654 M
(str1str2_tuple: [\(102, 119\), \(100, 106\), \(106, 101\), \(102, 106\), \(106, 119\), \(107, 101\), \(1) s
5 643 M
(07, 106\), \(107, 119\), \(107, 107\), \(107, 106\), \(107, 101\), \(107, 107\), \(107, 119\), \(107, 106) s
5 632 M
(\), \(107, 107\), \(107, 101\), \(107, 106\), \(107, 107\), \(102, 119\), \(106, 106\), \(106, 101\), \(106) s
5 621 M
(, 107\), \(106, 106\), \(106, 119\), \(106, 107\), \(106, 106\), \(106, 101\), \(106, 107\), \(106, 119\),) s
5 610 M
( \(106, 106\), \(115, 106\), \(107, 111\), \(119, 105\), \(119, 115\), \(119, 106\), \(119, 100\), \(119, ) s
5 599 M
(105\), \(119, 119\), \(119, 105\), \(119, 100\), \(119, 111\), \(119, 105\), \(119, 119\), \(119, 101\), \() s
5 588 M
(119, 105\), \(119, 119\), \(119, 105\), \(119, 101\), \(119, 48\), \(119, 105\), \(105, 119\), \(105, 48\)) s
5 577 M
(, \(105, 101\), \(105, 105\), \(105, 111\), \(105, 48\), \(105, 119\), \(105, 105\), \(105, 101\), \(105, ) s
5 566 M
(48\), \(105, 119\), \(105, 105\), \(105, 101\), \(105, 48\), \(105, 105\), \(105, 119\), \(105, 48\), \(105) s
5 555 M
(, 101\), \(105, 105\), \(105, 48\), \(105, 99\), \(105, 110\), \(105, 100\), \(105, 107\), \(105, 110\), \() s
5 544 M
(105, 102\), \(105, 110\), \(105, 100\), \(105, 110\), \(105, 102\), \(105, 110\), \(105, 100\), \(105, 11) s
5 533 M
(0\), \(105, 102\), \(105, 107\), \(105, 100\), \(105, 106\), \(105, 102\), \(105, 107\), \(105, 106\), \(10) s
5 522 M
(5, 100\), \(105, 102\), \(105, 107\), \(105, 106\), \(1, 100\)]) s
5 511 M
(200.743617582) s
5 500 M
(##################################################################################) s
5 489 M
(From above, usual edit distance between 2 strings is less than polynomial distances of Jens) s
5 478 M
(enShannon and L2 norms. Ordinal values were not normalized by subtracting lowest possible o) s
5 467 M
(rdinal value of unicode.) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(-------------------------------------------------) s
5 423 M
(365. \(THEORY\) BKS conjecture and Stability of Interview TQBF - related to 359 - 21 January ) s
5 412 M
(2017) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(-------------------------------------------------) s
5 379 M
(Caution: This derivation is still experimental with possible errors.) s
5 357 M
(Stability of a boolean function is defined as:) s
5 346 M
(        Stability\(f\) = Expectation\(f\(x\)*f\(y\)\)) s
5 335 M
(where y is correlated version of x.) s
5 313 M
(Stability of Majority is defined as \(From page 120 of AnalysisOfBooleanFunctions - Chapter ) s
5 302 M
(5 Majority and Threshold Functions - https://www.cs.cmu.edu/~odonnell/boolean-analysis/\)) s
5 291 M
(        Stability\(Majn\) = Expectation\(Majn\(x\)*Majn\(y\)\)) s
5 280 M
(where y is correlated version of x.) s
5 258 M
(For infinite n, Stability\(Majn\) is bounded by 2/pi*arcsin\(rho\). Similar stability measure c) s
5 247 M
(an be derived for Interview TQBF threshold function also. Interview as a linear threshold f) s
5 236 M
(unction \(LTF\) can be defined as:) s
5 225 M
(        w1*a1 + w2*a2 + ... + wn*an > threshold_cutoff) s
5 214 M
(were each ai is an answer for a question qi and wi is the weightage associated with it. Ber) s
5 203 M
(ry-Esseen Central Limit Theorem applies for Interview threshold function. CLT implies that ) s
5 192 M
(a random variable S=X1 + X2 + X3 + ... + Xn which is a sum of random variables Xi\(s\) conver) s
5 181 M
(ges to Gaussian Normal Distribution. Berry-Esseen CLT generalizes it to S=a1*x1 + a2*x2 + .) s
5 170 M
(.. + an*xn where sum\(ai^2\) is normalized and = 1. Thus interview threshold function and Ber) s
5 159 M
(ry-Esseen CLT are structurally similar when weights wi are normalized and sum\(wi^2\) = 1. Th) s
5 148 M
(is implies interview scores are approximately Gaussian \(Intuitively obvious because, bell c) s
5 137 M
(urve corresponds to large proportion of voters scoring medium while tails correspond to ver) s
5 126 M
(y small percentage scoring very low and very high\).) s
5 104 M
(Stability of Interview can be equivalently defined as:) s
5 93 M
(        Stability\(Interview\) = Expectation\(Interview\(x\)*Interview\(y\)\)) s
5 82 M
(where y is correlated version of x.) s
5 60 M
(Substituting the threshold definition of interview in Stability:) s
5 49 M
(        Stability\(Interview\) = Expectation\(\(w1*a1+w2*a2+...+wn*an\)*\(z1*b1+z2*b2+...+zn*bn\)\)) s
5 38 M
(                                = Expectation\(w1*z1*a1*b1 + w1*z1*a2*b2 + ... + wn*zn*an*bn) s
5 27 M
(\)) s
5 16 M
(                                = a1*b1*Expectation\(w1*z1\) + .... + an*bn*Expectation\(wn*zn) s
5 5 M
(\)) s
_R
S
%%Page: (201) 201
%%BeginPageSetup
_S
18 36 translate
/pagenum 201 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (201) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(Assuming for all ai=bi=a:) s
5 720 M
(        Stability\(Interview\) = a^2 * \(Expectation\(w1*z1\) + Expectation\(w1*z2\) + .... + Expe) s
5 709 M
(ctation\(wn*zn\)\)) s
5 687 M
(Expectation\(wi*zk\) = 0*0*1/4 + 0*1*1/4 + 1*0*1/4 + 1*1*1/4 for 4 possible values of \(wi,zk\)) s
5 676 M
( each with probability 1/4.) s
5 654 M
(=>      Stability\(Interview\) = a^2 * \(n^2 * 0.25\) = a^2*n^2/4) s
5 632 M
(        Stability\(Interview\) = a^2*n^2/4 < 1 => a < 2/n) s
5 610 M
(If Stability\(Interview\) > Stability\(Majority\), BKS conjecture is true.) s
5 588 M
(=>      a^2*n^2 / 4 > 1 - 2/pi) s
5 577 M
(=>      a > 2/n * sqrt\(1-2/pi\)) s
5 566 M
(=>      a > 1.2056205488/n [For minimum case of n=2, a > 0.6028102744]) s
5 544 M
(Thus for Stability\(Interview\) to exceed Stability\(Majority\) and BKS Conjecture to be true ,) s
5 533 M
( weight per answer has to be > 1.2056/n approximately. For minimal base case n=2, a > 0.602) s
5 522 M
(8.) s
5 500 M
(Stability is alternatively defined as:) s
5 489 M
(        \(+1\)*Pr\(f\(x\) = f\(y\)\) + \(-1\)*Pr\(f\(x\) != f\(y\)\)) s
5 478 M
(which is just expansion of Expectation and there are two random variables \(+1 for f\(x\)=f\(y\)) s
5 467 M
(\) and \(-1 for f\(x\) != f\(y\)\)) s
5 456 M
(=> Stability\(f\(x\)\) = 1-2*Pr\(f\(x\) != f\(y\)\)) s
5 445 M
(=> Stability\(f\(x\)\) = 1-2*Sensitivity\(f\(x\)\)) s
5 434 M
(=> Sensitivity\(f\(x\)\) = 0.5-0.5*Stability\(f\(x\)\)) s
5 412 M
(NoiseSensitivity\(Interview\) which is the dual of Stability is defined as:) s
5 401 M
(        NoiseSensitivity\(Interview\) = 0.5-0.5*Stability\(Interview\) = 0.5-0.5*a^2*n^2/4) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-----------------------------) s
5 357 M
(366. \(FEATURE-DONE\)  Commits - 25 January 2017 - related to 2.9 and 345) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(-----------------------------) s
5 324 M
(Berlekamp-Welch Polynomial Reconstruction Decoder Implementation \(for Reed-Solomon codes, t) s
5 313 M
(exts, numerical points etc.,\)) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-----------------------------) s
5 280 M
(*\) Implements Berlekamp-Welch Polynomial Reconstruction Algorithm for reconstructing data f) s
5 269 M
(rom errors.) s
5 258 M
(*\) System of linear equations has been solved with NumPy/SciPy Linear Algebra solve\(\).) s
5 247 M
(*\) Logs show how well the reconstructed polynomial closely approximates the original polyno) s
5 236 M
(mial.) s
5 225 M
(*\) Error locator polynomial E is degree 1 and Numerator Q is of degree = number of points t) s
5 214 M
(hus yielding Q/E=P \(reconstructed\)) s
5 203 M
(*\) Special case is natural language text with errors and a polynomial can be reconstructed ) s
5 192 M
(from ordinal values of unicode) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(-----------------------) s
5 148 M
(367. \(FEATURE-DONE\) Berlekamp-Welch Algorithm implementation - update for text message deco) s
5 137 M
(ding - 27 January 2017) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(-----------------------) s
5 104 M
(*\) Using unicode values for ordinals with ord\(\) and inverting with chr\(\) causes overflow er) s
5 93 M
(rors in SciPy/NumPy) s
5 82 M
(Linear Algebra Equation solver \(solve\(\)\) because evaluating polynomials for large messages ) s
5 71 M
(creates huge numbers) s
5 60 M
(*\) Hence unicode has been replaced with a simple dictionaries - alphanumeric to numeric val) s
5 49 M
(ues and numeric to) s
5 38 M
(alphanumeric values.) s
5 27 M
(*\) With above 2 dictionaries an example text message with error \(garbled version of "thisis) s
5 16 M
(sentence"\) is list) s
5 5 M
(decoded with a window of possible values for each letter positions.) s
_R
S
%%Page: (202) 202
%%BeginPageSetup
_S
18 36 translate
/pagenum 202 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (202) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(*\) Logs show an approximate decoding of original message from message with error.) s
5 731 M
(*\) Garbled text with error was created from a previous execution of Berlekamp-Welch algorit) s
5 720 M
(hm.) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(----------------------------------------------------) s
5 676 M
(368. \(THEORY\) KRW Conjecture, KW relations, Majority Voting Circuit Composition - 30 Januar) s
5 665 M
(y 2017 and 31 January 2017 - related to 358) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(----------------------------------------------------) s
5 632 M
(Majority Voting Circuit for P\(Good\) binomial series RHS is a boolean circuit composition of) s
5 621 M
( NC Majority voting circuit with) s
5 610 M
(Voter Decision Functions for each voter variable input to Majority function defined as:) s
5 599 M
(         Maj\(m\) + Voter\(n\) = Maj\(Voter1\(x1,x2,...,xn\),Voter2\(x1,x2,...,xn\),...,Voterm\(x1,x2) s
5 588 M
(,...,xn\)\).  ) s
5 577 M
(Assumption is Voter Decision Functions can be exactly learnt in Angluin Exact Learning mode) s
5 566 M
(l i.e Voters can have zero errors. ) s
5 555 M
(KRW Conjecture for boolean formula composition implies Depth\(f+g\) ~ Depth\(f\) + Depth\(g\) for) s
5 544 M
( composition f+g of two boolean formulae ) s
5 533 M
(\(fanout 1\) f and g. Applying KRW conjecture to Maj\(m\) + Voter\(n\) Majority voting compositio) s
5 522 M
(n:) s
5 511 M
(        Depth\(Maj\(m\) + Voter\(n\)\) ~ Depth\(Maj\(m\)\) + Depth\(Voter\(n\)\)) s
5 500 M
(where m is the number of voters and n is the number of variables per voter decision functio) s
5 489 M
(n.) s
5 467 M
(KW relations R\(f\) for a function f imply Depth\(f\) = CommunicationComplexity\(R\(f\)\).) s
5 456 M
(Karchmer-Wigderson relations for the composition are the following:) s
5 445 M
(-------------) s
5 434 M
(R\(Maj,Voter\):) s
5 423 M
(-------------) s
5 412 M
(        Alice: x in Inverse\(Maj + Voter\)\(0\)) s
5 401 M
(        Bob:  y in Inverse\(Maj + Voter\)\(1\)) s
5 390 M
(        Find xi and yi such that x != y) s
5 368 M
(Depth\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\)) s
5 357 M
(Thus Majority voting circuit composition is a KW relation.) s
5 346 M
(There is an equivalent notion of Universal relation U\(n\) for KW relation defined as:) s
5 335 M
(        Alice: x in {0,1}^\(n\)) s
5 324 M
(        Bob:  y in {0,1}^\(n\)) s
5 313 M
(        Find xi and yi such that x != y) s
5 291 M
(Result in 368.2 prove a lowerbound:) s
5 280 M
(        Depth\(g+U\(n\)\) = CommunicationComplexity\(R\(g,U\(n\)\)\) >= log L\(g\) + n - O\(m*logm/n\) wh) s
5 269 M
(ere L\(g\) is the formula size of g.) s
5 258 M
(If g is Majority function and U\(n\) is individual voter decision function, depth of composit) s
5 247 M
(ion of Majority and Voter circuits is:) s
5 236 M
(        D\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\) >= log L\(Majority\) + n - O\(m) s
5 225 M
(*logm/n\)) s
5 214 M
(But formula size of Majority is O\(m^5.3\) implying depth of Majority+VoterDecisionFunction c) s
5 203 M
(omposition is:) s
5 192 M
(        D\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\) >= 5.3*logm  + n - O\(m*logm/) s
5 181 M
(n\)) s
5 170 M
(Thus depth of Majority voting circuit for P\(Good\) RHS is lowerbounded by a function of numb) s
5 159 M
(er of voters and number of variables per voter decision function.) s
5 137 M
(368.1 prove a result which is an extension of 355.8:) s
5 126 M
(If a class C is exactly learnable in polynomial time, DTIME\(n^omega\(1\)\) is not in C. In mis) s
5 115 M
(take bounded learning model, learner updates the hypothesis in each round based on mistake ) s
5 104 M
(it makes in labelling a point on hypercube. Mistake bounded learning very closely matches h) s
5 93 M
(uman experiential learning and hence human voting error. If a class C is mistake bounded le) s
5 82 M
(arnable in time T and mistakes M then, DTIME\(n + MT\) is not in C yielding a separation. Cor) s
5 71 M
(ollary: If a function in NP is polynomial time exact learnable, there is no polynomial time) s
5 60 M
( algorithm for NP. For unbounded number of voters\(m\) and variables per voter decision funct) s
5 49 M
(ion\(n\), depth of composition is unbounded. Depth Hierarchy Theorem 368.4 immediately applie) s
5 38 M
(s for functions computable by circuits of various depths of RHS composition. Number of vari) s
5 27 M
(ables per voter and depth of composition are linearly related while Number of voters and de) s
5 16 M
(pth of composition are logarithmically related.) s
_R
S
%%Page: (203) 203
%%BeginPageSetup
_S
18 36 translate
/pagenum 203 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (203) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Exact Learning implies zero error on both sides of P\(Good\) binomial series. Assuming all bo) s
5 731 M
(olean function are exactly learnt, a Pseudorandom choice amongst those functions yields 100) s
5 720 M
(% perfect choice. Quoting from 359:) s
5 698 M
(        Let number of  voter decision functions with goodness xi = m\(xi\). Thus N = m\(x1\)+m\() s
5 687 M
(x2\)+m\(x3\)+...+m\(xn\)) s
5 676 M
(        Expected goodness of a PRG choice is:) s
5 665 M
(                1/N * summation\(xi*m\(xi\)\) = \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\) + ... + xn*m\(xn) s
5 654 M
(\)\) / N) s
5 643 M
(        When all voter functions have goodness 1 then PRG choice in LHS of P\(good\) has good) s
5 632 M
(ness 1.) s
5 610 M
(Similarly, exact learning implies all voter decision functions are 100% perfect with zero-e) s
5 599 M
(rror in LHS. Binomial series converges to 1 on both sides. LHS is a polynomial time algorit) s
5 588 M
(hm \(because there is a PRG in P to make a choice\) to RHS majority voting NP problem \(assumi) s
5 577 M
(ng the exactly learnt boolean functions are in NP\) implying P=NP. But from 368.1, if NP is ) s
5 566 M
(learnable in polynomial time, NP does not have polynomial time algorithms and therefore P !) s
5 555 M
(= NP - a contradiction. Thus polynomial time exact learning of an NP boolean function \(e.g ) s
5 544 M
(3SAT learnt from a truth table\) conflicts with P=NP and binomial series convergence.) s
5 522 M
(Usual process of high level human learning vis-a-vis boolean function learning is bottom-up) s
5 511 M
(. Atomic concepts are learnt in leaves and complexity is built  from leaf to root by learni) s
5 500 M
(ng new concepts which are functions of subtrees. Recursive Lambda Function Growth algorithm) s
5 489 M
( for learning texts described earlier in this document is based on this paradigm but constr) s
5 478 M
(ucts a composition tree top-down \(Mind grows lambda functions/circuits\). Generalization of ) s
5 467 M
(Recursive Lambda Function Growth is to learn a graph as opposed to trees. This is already d) s
5 456 M
(one in Recursive Gloss Overlap special case by merging/removing isomorphic, repetitive subt) s
5 445 M
(rees while tree is grown top-down. This is why core number based classifier for the recursi) s
5 434 M
(ve gloss overlap graph works - repeating gloss nodes are connected to already discovered no) s
5 423 M
(des by a new edge thereby converting a tree to graph top-down - Because most synset paths b) s
5 412 M
(etween words in a text go through "class label" vertices making them high degree and all su) s
5 401 M
(ch high degree vertices belong to a dense subgraph e.g k-core.) s
5 368 M
(Hypothetical exact learner for 3SAT - NP voter decision functions :) s
5 357 M
(-------------------------------------------------------------------) s
5 346 M
(Given a truth table of size n*2^n for n variables with truth values:) s
5 335 M
(        *\) Find a set of binary strings, satisfying truth values 1) s
5 324 M
(        *\) Construct a DNF for complement of the previous set) s
5 313 M
(        *\) Complement the DNF to get CNF for original set) s
5 291 M
(Example - For following truth table, to construct CNF for satisfying assignments {000, 001,) s
5 280 M
( 011, 101, 110}:) s
5 269 M
(        ------------------------------------------) s
5 258 M
(        x1 x2 x3        truthvalue      complement) s
5 247 M
(        ------------------------------------------) s
5 236 M
(        0  0  0         1               0) s
5 225 M
(        0  0  1         1               0) s
5 214 M
(        0  1  0         0               1) s
5 203 M
(        0  1  1         1               0) s
5 192 M
(        1  0  0         0               1) s
5 181 M
(        1  0  1         1               0) s
5 170 M
(        1  1  0         1               0) s
5 159 M
(        1  1  1         0               1) s
5 137 M
(DNF for complement set {010,100,111} is:) s
5 126 M
(        !x1x2!x3 + x1!x2!x3 + x1x2x3) s
5 115 M
(and the CNF learnt is complement of DNF:) s
5 104 M
(        \(x1 + !x2 + x3\)\(!x1 + x2 + x3\)\(!x1 + !x2 + !x3\)) s
5 93 M
(with satisfying assignments {000, 001, 011, 101, 110}) s
5 71 M
(This exact learner requires O\(2^n\) time which is exponential in number of variables.) s
5 49 M
(368.6 describes an algorithm \(CDNF\) to learn any boolean functions in time polynomial in nu) s
5 38 M
(mber of variables,its DNF size and CNF size. This together with 368.1 implies a polynomial ) s
5 27 M
(time learning algorithm for NP and existence of polynomial time learning algorithm for NP\(3) s
5 16 M
(CNF\) indicates NP does not have polynomial time algorithms \(and Expoential Time Hypothesis ) s
5 5 M
(could be true\). This coincides with evidences towards divergence of P\(Good\) series and supe) s
_R
S
%%Page: (204) 204
%%BeginPageSetup
_S
18 36 translate
/pagenum 204 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (204) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(rpolynomial size circuits for 3SAT implied in 53.16, 256, 265, 275, 318 \(Majority Lemma for) s
5 731 M
( Hardness Amplification\) and 355. This is a serious contradiction - exact learning derandom) s
5 720 M
(izes both sides of P\(Good\) circuit. LHS non-majority social choice is zero-error and equals) s
5 709 M
( 1 while RHS if NP also converges to 1 and implies a polynomial time algorithm for NP while) s
5 698 M
( exact learning forbids polynomial time algorithm for NP. Resolving this impasse amounts to) s
5 687 M
( defining what is meant by exactness and zero-error in voting decision and social choice \(P) s
5 676 M
(erfection commonsensically enshrines zero-error decision making for unbounded number of sce) s
5 665 M
(narios i.e variables while exact learning assumes bounded set of variables\)) s
5 643 M
(References:) s
5 632 M
(----------) s
5 621 M
(368.1 Exact Learning implies Derandomization \(i.e. P=BPP\) and Mistake bound learning - [Kli) s
5 610 M
(vansKothariOliveira] - http://www.cs.princeton.edu/~kothari/ccc13.pdf) s
5 599 M
(368.2 KRW Conjecture, KW relations and Lowerbound for Depth of Boolean Circuit Composition ) s
5 588 M
(- [GavinskyMeirWeinsteinWigderson] - https://video.ias.edu/sites/video/files/Meir.pdf) s
5 577 M
(368.3 Generalization of Spira's Theorem - https://www.cs.utexas.edu/users/panni/spira.pdf -) s
5 566 M
( Spira's theorem transforms every circuit of size S  to a circuit of depth O\(logS\).) s
5 555 M
(368.4 Depth Hierarchy Theorem - [RossmanServedioTan] - Theorem 1 - https://arxiv.org/pdf/15) s
5 544 M
(04.03398v1.pdf - Circuit of depth <= d-1 with size <= 2^\(n^\(1/6\(d-1\)\)\) agrees with a functi) s
5 533 M
(on of depth d on at most 0.5 + n^Omega\(-1/d\) fraction of inputs.) s
5 522 M
(368.5 Formula size of Majority function - [Valiant] - http://www.sciencedirect.com/science/) s
5 511 M
(article/pii/0196677484900166?via%3Dihub) s
5 500 M
(368.6 Exact Learning of Boolean Functions from Monotone Theory - [Nader H. Bshouty] - http:) s
5 489 M
(//www.cs.technion.ac.il/~bshouty/MyPapers/Exact-Learning-Boolean-Functions-via-the-Monotone) s
5 478 M
(-Theory.ps - CDNF algorithm - Section 6 - exactly learns any boolean function in time polyn) s
5 467 M
(omial in number of variables, size of DNF and CNF with polynomial membership and equivalenc) s
5 456 M
(e\(counterexample\) queries.) s
5 445 M
(368.7 BPEXP is believed to collapse to EXP - if P=BPP then BPEXP=EXP \(but converse BPEXP=EX) s
5 434 M
(P implying P=BPP is not known\) - https://www.ime.usp.br/~spschool2016/wp-content/uploads/20) s
5 423 M
(16/07/CarboniOliveiraIgor.pdf) s
5 412 M
(368.8 From [Klivans-Fortnow] result mentioned in 368.1, if class EXP is efficiently PAC lea) s
5 401 M
(rnable with membership queries, BPEXP is not in EXP) s
5 390 M
(contradicting BPEXP=EXP by homogeneous voter Condorcet Jury Theorem BPEXP circuit derandomi) s
5 379 M
(zation mentioned in 400. BPEXP=EXP implies hence that EXP is not efficiently PAC learnable.) s
5 368 M
(368.9 Extended Depth Hierarchy Theorem - https://dl.acm.org/citation.cfm?id=3095799 - [Hast) s
5 357 M
(ad-Rossman-Servedio-Tan] - For any d < logn/loglogn there is a function F computed by a rea) s
5 346 M
(d once formula of depth d but any circuit of depth d-1 and size O\(2^O\(n^\(1/5d\)\)\) agrees wit) s
5 335 M
(h F by a fraction of 0.5 + O\(n^\(-1/5d\)\) inputs. This approximation by smaller depth circuit) s
5 324 M
( has applications in forecasting accuracy of previous Majority+VoterSAT boolean composition) s
5 313 M
( voting - as all Voters' decision SAT Circuit depth tends to infinity, accuracy of election) s
5 302 M
( forecasting tends to 50%.) s
5 291 M
(368.10 Quasidemocracies - Banzhaf Power Index - https://gilkalai.files.wordpress.com/2018/0) s
5 280 M
(8/kalai-icm2018.pptx - Quasi democracies are electorate in which each voter has decision SA) s
5 269 M
(T of n variables and as n tends to infinity, probability of forecasting the outcome of the ) s
5 258 M
(election by any voter tends to zero as other voters vote at random. This needs to be contra) s
5 247 M
(sted with previous depth hierarchy ramification - number of variables per SAT versus depth ) s
5 236 M
(of the CircuitSAT.) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(---------------------) s
5 192 M
(369. \(FEATURE-DONE\) An experimental special case k-CNF SAT Solver algorithm implementation ) s
5 181 M
(- 31 January 2017) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(---------------------) s
5 148 M
(Algorithm:) s
5 137 M
(----------) s
5 126 M
(*\) Create a k-DNF from k-CNF input by negating literals in all clauses of k-CNF) s
5 115 M
(*\) Binary encode the clauses of k-DNF into set of binary strings of length n where n is num) s
5 104 M
(ber of variables) s
5 93 M
(*\) Compute the complement of the previous binary encoded set from set of 2^n binary strings) s
5 82 M
(*\) These are satisfying assignments) s
5 71 M
(*\) Presently requires all literals in each CNF clause) s
5 60 M
(*\) Implemented for simulation of a Majority Voting with Voter SATs) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(------------------------------------) s
5 16 M
(370. \(THEORY\) Majority Boolean Function, Sensitivity, Roth's estimate and 2-Coloring/Comple) s
5 5 M
(ment Functions of Sequences -) s
_R
S
%%Page: (205) 205
%%BeginPageSetup
_S
18 36 translate
/pagenum 205 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (205) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(1 February 2017 - related to 24,338 - Important draft updates to https://arxiv.org/pdf/1106) s
5 731 M
(.4102v1) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(------------------------------------) s
5 698 M
(Boolean Majority Function finds the majority binary value of input binary string of length ) s
5 687 M
(n. Any binary string of length n can be) s
5 676 M
(considered as 2-coloring of bit position integers with corresponding complement functions f) s
5 665 M
(or each color: f\(x\) is for 1s colored red and) s
5 654 M
(g\(x\) is for 0s colored blue. For example, 1001011 is a 2-colored sequence with red \(1\) in b) s
5 643 M
(it positions 1,4,6,7 and blue \(0\) in bit positions) s
5 632 M
(2,3,5. Complement functions for this bit position binary coloring are defined as:) s
5 621 M
(        f\(1\)=1) s
5 610 M
(        f\(2\)=4) s
5 599 M
(        f\(3\)=6) s
5 588 M
(        f\(4\)=7) s
5 577 M
(and) s
5 566 M
(        g\(1\)=2) s
5 555 M
(        g\(2\)=3) s
5 544 M
(        g\(3\)=5) s
5 533 M
(Natually, arithmetic progressions and monochromatic arithmetic progressions on these bit po) s
5 522 M
(sitions can be defined. Discrepancy is the) s
5 511 M
( difference between number of colored integers in an arithmetic progression. Roth's estimat) s
5 500 M
(e which is the minimum\(maximum\(discrepancy\)\)) s
5 489 M
(for all possible colorings \(i.e all possible binary strings\) is >= N^\(1/4+epsilon\). For maj) s
5 478 M
(ority function 2-coloring, this estimate is) s
5 467 M
(the difference between number of 0s and 1s in the input to majority function with probabili) s
5 456 M
(ty equal to natural density of min\(max\(\)\) arithmetic progression.  If majority function out) s
5 445 M
(puts 1, |f\(x\)| > |g\(x\)| and if 0, |g\(x\)| > |f\(x\)|. From this an approximate estimate of num) s
5 434 M
(ber of 1s and 0s in majority function input can be obtained \(with probability equal to natu) s
5 423 M
(ral density\):) s
5 412 M
(        |f\(x\)| = number of 1s = [N + N^\(1/4+epsilon\)]/2  if majority function outputs 1) s
5 401 M
(        |g\(x\)| = number of 0s = [N - N^\(1/4+epsilon\)]/2  if majority function outputs 1) s
5 390 M
(and vice versa if majority function outputs 0. For previous example, majority is 1 and :) s
5 379 M
(        |f\(x\)| = number of 1s = [7 + 7^0.25]/2 = 4.313288 ~ 4) s
5 368 M
(        |g\(x\)| = number of 0s = [7 - 7^0.25]/2 = 2.6867 ~ 3) s
5 357 M
(Sensitivity of Majority function is number of bits to be flipped to change the outcome whic) s
5 346 M
(h is nothing but the discrepancy \(|f\(x\)| - |g\(x\)|\) wth probability equal to natural density) s
5 335 M
( and is lowerbounded by Roth's estimate. Formally, Sensitivity\(Majority\) > N^\(1/4+epsilon\).) s
5 324 M
( An important special case is when input to majority is a binary string 2-colored by prime-) s
5 313 M
(composite complement functions in bit positions i.e prime bit positions are 1 and composite) s
5 302 M
( bit positions are 0 and majority function outputs 0 or 1 \(Approximate number of primes les) s
5 291 M
(s than N = pi\(N\) ~ N/logN from Prime Number Theorem\).) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(----------------------------------------------) s
5 247 M
(371. \(FEATURE-DONE\) Reinforcement Learning - ThoughtNet based Recommender Systems Implement) s
5 236 M
(ation Update - 2 February 2017) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(----------------------------------------------) s
5 203 M
(*\) Recursive Gloss Overlap classifier disambiguation has been updated to invoke NLTK lesk a) s
5 192 M
(lgorithm function\(\) with options to) s
5 181 M
(choose between PyWSD lesk implementation and best_matching_synset\(\) primitive disambiguatio) s
5 170 M
(n native implementation) s
5 159 M
(*\) New usecase shopping cart example with book reviews has been added) s
5 148 M
(*\) Fixed a major bug in RecursiveGlossOverlap Classifier in definition graph construction :) s
5 137 M
( Edges for all lemma names of previous level synsets were added which bloated the graph and) s
5 126 M
( somewhat skewed core number of the graph. Changed it to create edge only for one lemma nam) s
5 115 M
(e. All other Recursive Gloss Overlap implementations in InterviewAlgorithm/ folder already ) s
5 104 M
(have this fix. Regenerated the hypergraph for shoppingcart3 example Logs for this have been) s
5 93 M
( added to testlogs/) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(---------------------------------------------) s
5 49 M
(372. \(FEATURE-DONE\) Recursive Gloss Overlap classifier update - 3 February 2017) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(---------------------------------------------) s
5 16 M
(Uncommented NetworkX matplotlib graph plotting to get a graph for a sample document definit) s
5 5 M
(ion graph. Logs and PNG file for this classification have been added to testlogs/. Also did) s
_R
S
%%Page: (206) 206
%%BeginPageSetup
_S
18 36 translate
/pagenum 206 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (206) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( some experimentation with various documents and classification based on core number has be) s
5 731 M
(en reasonably accurate \(relevance of unsupervised core number based classification to the d) s
5 720 M
(ocument's actual class decreases with core number\) and top percentage classes reflect the s) s
5 709 M
(ubject matter of the document. Also best_matching_synset\(\) lesk disambiguation implemented ) s
5 698 M
(in AsFer and NLTK lesk\(\) functions are faster than PyWSD simple_lesk\(\).) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(---------------) s
5 654 M
(373. \(THEORY and FEATURE-DONE\) CNFSAT solver update - polynomial time approximation - 5 Feb) s
5 643 M
(ruary 2017) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(---------------) s
5 610 M
(Solves CNFSAT by a Polynomial Time Approximation scheme:) s
5 599 M
(       - Encode each clause as a linear equation in n variables: missing variables and nega) s
5 588 M
(ted variables are 0, others are 1) s
5 577 M
(       - Solve previous system of equations by least squares algorithm to fit a line) s
5 566 M
(       - Variable value above 0.5 is set to 1 and less than 0.5 is set to 0) s
5 555 M
(       - Rounded of assignment array satisfies the CNFSAT with high probability) s
5 544 M
(Essentially each CNF is represented as a matrix A and solved by AX=B where X is the column ) s
5 533 M
(vector of variables and B is identity column vector) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(-----------------) s
5 489 M
(374. \(FEATURE-DONE\) Java Spark Streaming - Generic Stream Receiver Implementation - 6 Febru) s
5 478 M
(ary 2017) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(-----------------) s
5 445 M
(Spark Streaming Java implementation to receive generic stream of unstructured text data fro) s
5 434 M
(m any URL and Sockets has been added to) s
5 423 M
(NeuronRain AsFer java/bigdata_analytics/. It is based on Spart 2.1.0 + Hadoop 2.7 single no) s
5 412 M
(de cluster. Following are the setup prerequisites:) s
5 390 M
(*\) Oracle Java 8 compiler and runtime and PATH set to it) s
5 379 M
(*\) export CLASSPATH=/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/spark-streaming_2.1) s
5 368 M
(1-2.1.0.jar:.:/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/scala-library-2.11.8.jar:) s
5 357 M
(/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/spark-sql_2.11-2.1.0.jar:/home/shriniva) s
5 346 M
(asanka/spark-2.1.0-bin-hadoop2.7/jars/spark-core_2.11-2.1.0.jar:/usr/lib/jvm/java-8-oracle/) s
5 335 M
(bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin) s
5 324 M
(*\) Compiled as: javac SparkGenericStreaming.java) s
5 313 M
(*\) JAR packaging of SparkGenericStreaming*.class :  jar -cvf sparkgenericstreaming.jar *cla) s
5 302 M
(ss) s
5 291 M
(*\) Example Spark submit commandline for 2 local threads \(2 cores\) and data streamed from tw) s
5 280 M
(itter :) s
5 269 M
(/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/bin/spark-submit --class SparkGenericStreami) s
5 258 M
(ng --master local[2] sparkgenericstreaming.jar "https://twitter.com/search?f=tweets&vertica) s
5 247 M
(l=news&q=Chennai&src=typd") s
5 225 M
(Spark Streaming Java implementation complements Streaming Abstract Generator Python native ) s
5 214 M
(abstraction implemented in AsFer. Advantage of Spark Streaming is it can process realtime s) s
5 203 M
(treamed data from many supported datasources viz.,Kinesis,Kafka etc., This implementation i) s
5 192 M
(s generic, customized for arbitrary streaming data.) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(----------------------------) s
5 148 M
(375. \(FEATURE-DONE\) Java Spark Streaming for Generic data - Jsoup ETL integration - 7 Febru) s
5 137 M
(ary 2017) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(----------------------------) s
5 104 M
(*\) Jsoup HTML parser has been imported into SparkGenericStreaming.java and a very basic Ext) s
5 93 M
(ract-Transform-Load is) s
5 82 M
(performed on the URL passed in with a special boolean flag to use Jsoup) s
5 71 M
(*\) Jsoup connects to URL and does a RESTful GET of the HTML, extracts text from HTML and st) s
5 60 M
(ores the text in Spark RDD) s
5 49 M
(*\) receive\(\) is periodically invoked and word count is computed) s
5 38 M
(*\) foreachRDD\(\) is invoked on the DStream to iterate through all words in DStream.) s
5 27 M
(*\) forEach\(\) invokes a lambda function to print the word text) s
5 16 M
(*\) Logs for this have been added to spark_streaming/testlogs/) s
_R
S
%%Page: (207) 207
%%BeginPageSetup
_S
18 36 translate
/pagenum 207 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (207) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(spark-submit commandline requires additional classpath to jsoup .jar with --jars option as ) s
5 731 M
(below:) s
5 720 M
(/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/bin/spark-submit --class SparkGenericStreami) s
5 709 M
(ng --master local[2] --jars /home/shrinivaasanka/jsoup/jsoup-1.10.2.jar sparkgenericstreami) s
5 698 M
(ng.jar "https://twitter.com/search?f=tweets&vertical=news&q=Chennai&src=typd" 2>&1 > testlo) s
5 687 M
(gs/SparkGenericStreaming.out.7February2017) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(----------------------------) s
5 643 M
(376. \(THEORY and FEATURE-DONE\) Approximate SAT solver update - 8 February 2017 - related to) s
5 632 M
( 373) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(----------------------------) s
5 599 M
(Updated CNFSATSolver.py to create set of random 3CNFs and verify if the least squares assig) s
5 588 M
(nment is satisfied. Presently it creates randomly concatenated CNFs of 10 variables and 10 ) s
5 577 M
(clauses in an infinite loop and prints a percentage of satisfied 3CNFs so far by least squa) s
5 566 M
(re heuristic. Logs for this percentage after few hundred iterations has been committed to t) s
5 555 M
(estlogs/. It shows an intriguing convergence at 80% \(i.e 80% of 3CNFs are satisfied\) after ) s
5 544 M
(few hundred iterations of random CNFs. A caveat has to be mentioned here on hardness of app) s
5 533 M
(roximation and PCP theorem: MaxSAT and Clique do not have Polynomial Time Approximation Sch) s
5 522 M
(eme unless P=NP. PTAS usually creates a solution within 1+/-epsilon distance from optimal. ) s
5 511 M
(MaxSAT problem tries to maximize number of clauses satisified in a CNF. But this least squa) s
5 500 M
(re SAT solver is exact SAT solver and the percentage of 80% found in testlogs/ implies 80% ) s
5 489 M
(of CNFs were satisfied. This could heuristically imply 80% of clauses per CNF were satisfie) s
5 478 M
(d on the average. Though this percentage is specific to 10 clauses * 10 variables, similar ) s
5 467 M
(asymptotic convergence to ~79% was observed for 5 clauses * 5 variables. Assuming this impl) s
5 456 M
(ies epsilon to be 0.2 in general \(average 20% distance from optimal for all CNFs\), could im) s
5 445 M
(ply a PTAS \(because solving system of equations by Least Squares or Gaussian Elimination is) s
5 434 M
( polynomial in number of clauses\) for MaxSAT which satisfies 80% clauses per CNF on average) s
5 423 M
( and P=NP.\(Related: Unique Games Conjecture\)) s
5 401 M
(References:) s
5 390 M
(----------) s
5 379 M
(376.1 PCP theorem and Hardness of Approximation - http://www.cs.jhu.edu/~scheideler/courses) s
5 368 M
(/600.471_S05/lecture_9.pdf) s
5 357 M
(376.2 PCP theorem and Hardness of Approximation - http://pages.cs.wisc.edu/~dieter/Courses/) s
5 346 M
(2008s-CS880/Scribes/lecture17.pdf) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(--------------------) s
5 302 M
(377. \(FEATURE-DONE\) Java Spark Streaming Generic Receiver update - 9 February 2017) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(--------------------) s
5 269 M
(*\) Objectified the SparkGenericStreaming more by moving the SparkConf and JavaStreamingCont) s
5 258 M
(ext into) s
5 247 M
(class private static data.) s
5 236 M
(*\) new method SparkGenericStreamingMain\(\) instantiates the Spark Context and returns the Ja) s
5 225 M
(vaPairDStream<String,Integer> wordCounts object) s
5 214 M
(*\) main\(\) static method instantiates SparkGenericStreaming class and receives wordCounts Ja) s
5 203 M
(vaPairDStream from SparkGenericStreamingMain\(\)) s
5 192 M
(method) s
5 181 M
(*\) Spark JavaStreamingContext output operations are invoked by start\(\) and print actions by) s
5 170 M
( lambda expressions.) s
5 159 M
(*\) SparkConf and JavaStreamingContext variables have to be static because Not Serializable ) s
5 148 M
(exceptions are thrown otherwise.) s
5 137 M
(*\) sparkgenericstreaming.jar has been repackaged by recompilation.) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(---------------------------------------) s
5 93 M
(378. \(FEATURE-DONE\) Spark Streaming Java Update - Java Bean DataFrame\(Dataset\) creation, Hi) s
5 82 M
(ve Metastore support and persistence of) s
5 71 M
(DataFrame to Hive and as a Parquet file - 10 February 2017) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(---------------------------------------) s
5 38 M
(*\) New JavaSparkSingletonInstance class for singleton Spark Context has been added.) s
5 27 M
(*\) New Java Bean Word.java has been added for creating DataFrame from JavaRDD iterable) s
5 16 M
(*\) DataFrame has been persisted to filesystem as .parquet file in overwrite mode of DataFra) s
5 5 M
(meWriter) s
_R
S
%%Page: (208) 208
%%BeginPageSetup
_S
18 36 translate
/pagenum 208 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (208) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(*\) DataFrame has also been persisted to Hive MetaStore db which Spark supports \(Shark SQL\) ) s
5 731 M
(with saveAsTable\(\)) s
5 720 M
(*\) SparkGenericStreaming has been rewritten to do transformations on words JavaRDD iterable) s
5 709 M
( with VoidFunction\(\) in) s
5 698 M
(2-level nested iterations of foreachRDD\(\) and forEach\(\)) s
5 687 M
(*\) map\(\) transformation for each row in JavaRDD throws a null pointer exception and inner c) s
5 676 M
(all\(\) is never invoked.) s
5 665 M
(*\) This has been remedied by replacing map\(\) with a forEach\(\) and storing the rows in each ) s
5 654 M
(RDD in an ArrayList) s
5 643 M
(*\) With Hive MetaStore + Shark integration, Streaming_AbstractGenerator.py abstraction now ) s
5 632 M
(has access to Java Spark Streaming) s
5 621 M
(because it already supports Hive via thrift and NeuronRain now has ability to analyze any r) s
5 610 M
(ealtime or batch unstructured data.) s
5 599 M
(*\) Primitive ETL to just scrape words in URL text sufficiently tracks trending topics in so) s
5 588 M
(cial media.) s
5 577 M
(*\) Hive metastore db, Spark warehouse data have been committed and Logs for this has been a) s
5 566 M
(dded to testlogs/) s
5 555 M
(*\) sparkgenericstreaming.jar has been repackaged with recompilation) s
5 544 M
(*\) Updated spark-submit commandline: /home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/bin/spa) s
5 533 M
(rk-submit --class SparkGenericStreaming --master local[2] --jars /home/shrinivaasanka/spark) s
5 522 M
(-2.1.0-bin-hadoop2.7/jars/scala-reflect-2.11.8.jar,/home/shrinivaasanka/spark-2.1.0-bin-had) s
5 511 M
(oop2.7/jars/spark-catalyst_2.11-2.1.0.jar,/home/shrinivaasanka/jsoup/jsoup-1.10.2.jar spark) s
5 500 M
(genericstreaming.jar "http://www.facebook.com") s
5 489 M
(*\) Updated CLASSPATH: export CLASSPATH=/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/) s
5 478 M
(scala-reflect-2.11.8.jar:/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/spark-catalyst) s
5 467 M
(_2.11-2.1.0.jar:/home/shrinivaasanka/jsoup/jsoup-1.10.2.jar:/home/shrinivaasanka/spark-2.1.) s
5 456 M
(0-bin-hadoop2.7/jars/spark-streaming_2.11-2.1.0.jar:.:/home/shrinivaasanka/spark-2.1.0-bin-) s
5 445 M
(hadoop2.7/jars/scala-library-2.11.8.jar:/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars) s
5 434 M
(/spark-sql_2.11-2.1.0.jar:/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/spark-core_2.) s
5 423 M
(11-2.1.0.jar:/usr/lib/jvm/java-8-oracle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/b) s
5 412 M
(in:/sbin:/bin) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(------------------------------------------------) s
5 368 M
(379. \(THEORY\) Machine Translation, Recursive Gloss Overlap Graphs in different Natural Lang) s
5 357 M
(uages and Graph Homomorphisms - 13 February 2017) s
5 346 M
(- related to 178) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(------------------------------------------------) s
5 313 M
(Machine Translation is equivalent to graph homomorphism between 2 recursive gloss overlap g) s
5 302 M
(raphs of a text in 2 natural languages where) s
5 291 M
(homomorphism f for translation is defined as:) s
5 280 M
(        if \(u,v\) is in E\(G1\) then \(f\(u\),f\(v\)\) is in E\(G2\)) s
5 269 M
(for recursive gloss overlap graphs G1 and G2 for languages L1 \(e.g. English\) and L2 \(e.g Ta) s
5 258 M
(mizh\) constructed from respective ontologies.) s
5 247 M
(In previous definition, u and v are two words in natural language L1 and f\(u\) and f\(v\) are ) s
5 236 M
(two words in natural language L2.) s
5 225 M
(This relaxes the isomorphism requirement mentioned in 178. Set of all digraphs G such that ) s
5 214 M
(there is a homomorphism from G to a graph H is) s
5 203 M
(denoted by L\(H\). Guessing the set of digraphs G for a digraph H implies finding set of all ) s
5 192 M
(translations for a text from a set of natural) s
5 181 M
(languages to another natural language. This guessing problem is known by Dichotomy Conjectu) s
5 170 M
(re to be either in P or NP-Complete.) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(-----------------------------------------------) s
5 126 M
(380. \(FEATURE-DONE\) Approximate SAT solver update - 14 February 2017) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-----------------------------------------------) s
5 93 M
(*\) Changed number of variables and clauses to 14 and 14 with some additional debug statemen) s
5 82 M
(ts.) s
5 71 M
(*\) After 4000+ iterations ratio of random 3SAT instances satisfied is: ~70%) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(-------------------------------------------------) s
5 27 M
(381. \(FEATURE-DONE\) Java Spark Streaming with NetCat WebServer update and some analysis on ) s
5 16 M
(HiveServer2+Spark Integration - 18 February 2017) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (209) 209
%%BeginPageSetup
_S
18 36 translate
/pagenum 209 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (209) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------) s
5 731 M
(*\) Rewrote SparkGenericStreaming.java mapreduce functions with Spark 2.1.0 + Java 8 lambda ) s
5 720 M
(functions) s
5 709 M
(*\) Enabled Netcat Socket streaming boolean flag instead of URL socket with Jsoup) s
5 698 M
(*\) With above changes \(and no HiveServer2\), socket streaming receiver works and Hive saveAs) s
5 687 M
(Table\(\)/Parquet file saving works.) s
5 676 M
(*\) HiveServer2 was enabled in Spark Conf by adding hive-site.xml in spark/conf directory. \() s
5 665 M
(Two example hive-site.xml\(s\) have been) s
5 654 M
(committed to repository.\)) s
5 643 M
(*\) Spark 2.1.0 was started with hive-site.xml to connect to HiveServer2 2.1.1. This resulte) s
5 632 M
(d in 2 out of heapspace errors as documented) s
5 621 M
(in testlogs/ with exception "Error in instantiating HiveSessionState".) s
5 610 M
(*\) Such OOM errors with HiveServer2 and Spark have been reported earlier in Apache JIRA. In) s
5 599 M
(stead of TTransport, FrameTransport was also) s
5 588 M
(tried which caused "Frame size exceeds maximum frame size" errors. SASL was also disabled i) s
5 577 M
(n hive-site.xml.) s
5 566 M
(*\) Reason for such OOM errors in HiveServer2 seems to be heavy memory footprint of HiveServ) s
5 555 M
(er2 and Spark together and CPU usage reaches 100%) s
5 544 M
(for both cores. Might require a high-end server with large RAM size so that heapspace is se) s
5 533 M
(t to atleast 8GB. HiveServer2 is known to be) s
5 522 M
(memory intensive application. Also Spark only supports Hive 1.2.1 and not Hive 2.1.1 which ) s
5 511 M
(could be the reason.) s
5 500 M
(*\) Increasing Java Heap space in spark config file \(spark.executor.memory and spark.driver.) s
5 489 M
(memory\) also did not have effect.) s
5 478 M
(*\) Setting HADOOP_HEAPSIZE also did not have effect. OOM error occurs while instantiating H) s
5 467 M
(iveSessionState and bootstrapping Hive databases) s
5 456 M
(\(get_all_databases\). Isolated beeline CLI connection works though with HiveServer2.) s
5 445 M
(*\) Hence presently Spark Streaming works with Spark provided metastore_db Hive Support and ) s
5 434 M
(Parquet file support.) s
5 423 M
(*\) testlogs/ have stream processing logs for NetCat \(NC\) webserver.) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(----------------------------------------------) s
5 379 M
(382. \(FEATURE-DONE\) Spark Version Upgrade for Recursive Gloss Overlap Graph Intrinsic merit) s
5 368 M
( and Discrete Hyperbolic Factorization Cloud) s
5 357 M
(Implementations - 21 February 2017) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(----------------------------------------------) s
5 324 M
(*\) Re-executed Interview Algorithm and Factorization Spark Cloud implementations with Spark) s
5 313 M
( 2.1.0 and Cython optimization for Recursive) s
5 302 M
(Gloss Overlap Graph construction) s
5 291 M
(*\) Earlier these were benchmarked with Spark 1.5.x) s
5 280 M
(*\) Added debug statements in python-src/DiscreteHyperbolicFactorizationUpperbound_Bitonic_S) s
5 269 M
(park.py and file locations updated. Logs) s
5 258 M
(committed to python-src/testlogs and python-src/InterviewAlgorithm/testlogs) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(----------------------------------------------) s
5 214 M
(383. \(THEORY\) Recursive Gloss Overlap Graphs, Intrinsic Merit and Korner Graph Entropy - re) s
5 203 M
(lated to 348 - 22 February 2017) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(----------------------------------------------) s
5 170 M
(Graph representation of text and deriving a quantitative intrinsic merit from recursive glo) s
5 159 M
(ss overlap definition graph by projecting) s
5 148 M
(WordNet onto the document has been described previously. Spectral Graph Theory qualitativel) s
5 137 M
(y analyzes the graph in terms of eigenvalues of) s
5 126 M
(its Laplacian. Quantitative Graph Theory provides various statistical tools to quantify a g) s
5 115 M
(raph in terms of its complexity. Measuring) s
5 104 M
(meaningfulness of a text has been translated to the problem finding easy paths between conc) s
5 93 M
(epts and keywords in the text. This is computational linguistic Symbol Grounding problem of) s
5 82 M
( learning from dictionary definitions \(refer 216.3\). Korner's Graph Entropy defines the ent) s
5 71 M
(ropy of a) s
5 60 M
(graph G as follows:) s
5 49 M
(                KE\(G\) = minimum\(I\(X,Y\)\)) s
5 38 M
(where X is a randomly chosen vertex in V\(G\) and Y is an independent set of G \(set of vertic) s
5 27 M
(es with no edges between them\). I\(X,Y\) is the) s
5 16 M
(probabilistic mutual information of two random variable X and Y defined as:) s
5 5 M
(                I\(X,Y\) = double_summation\(p\(x,y\)log\(p\(x,y\)/p\(x\)p\(y\)\)\)) s
_R
S
%%Page: (210) 210
%%BeginPageSetup
_S
18 36 translate
/pagenum 210 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (210) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(where p\(x\) is probability of X=x, p\(y\) is probability of Y=y and p\(x,y\) is a joint probabil) s
5 731 M
(ity distribution of X=x and Y=y.) s
5 709 M
(An alternative definition of Korner Entropy of a graph G is :) s
5 698 M
(                KE\(G\) = minimum [- sum_v_in_V\(G\) {1/|V\(G\)| * log\(Pr[v in Y]\)}]) s
5 687 M
(i.e minimum of summations over product of probability of a randomly chosen vertex v in V\(G\)) s
5 676 M
( and log likelihood probability of v in an independent set Y of G.) s
5 654 M
(Mutual information is the generalization of Shannon information entropy when two dependent ) s
5 643 M
(random variables are involved. Korner's entropy quantitatively captures the complexity and ) s
5 632 M
(merit of a graph representation of text quite effectively because mutual information is the) s
5 621 M
( amount of knowledge one random variable has about the other. This is quite useful for text) s
5 610 M
( meaningfulness - two words with high mutual information are quite likely to be closely rel) s
5 599 M
(ated. More precisely, from definitions of Korner Entropy, mutual information of a word vert) s
5 588 M
(ex and an independent set of word vertices in recursive gloss overlap graph is the "extent ) s
5 577 M
(of relatedness" between a word and an independent set of words it is part of. When a word i) s
5 566 M
(s in an independent set of word vertices, there exists no relation among them - no word ver) s
5 555 M
(tex is in dictionary gloss definition of other word vertices. By summing up log likelihoods) s
5 544 M
( for all such vertices, a measure of "meaninglessness" is obtained. Dual of this meaningles) s
5 533 M
(sness is meaningfulness \(document ranking by meaninglessness is inversion of ranking by mea) s
5 522 M
(ningfulness\) obtained by \(-\) sign and minimum\(\). Maximum Korner Entropy is log\(|V|\) for com) s
5 511 M
(plete graphs and minimum is zero for empty graphs. Any document graph would have entropy me) s
5 500 M
(rit value between 0 and log|V|. Computing Korner Entropy is NP-hard since finding stable in) s
5 489 M
(dependent sets is NP-hard.) s
5 467 M
(References:) s
5 456 M
(-----------) s
5 445 M
(383.1 Korner Entropy - [JaikumarRadhaKrishnan] - http://www.tcs.tifr.res.in/~jaikumar/Paper) s
5 434 M
(s/EntropyAndCounting.pdf) s
5 423 M
(383.2 Entropy of Graphs - [MowshowitzDehmer] - www.mdpi.com/1099-4300/14/3/559/pdf) s
5 412 M
(383.3 Entropy Centrality of Graphs - [Qiao-Shan-Zhou] - http://www.mdpi.com/1099-4300/19/11) s
5 401 M
(/614/pdf - influence of a vertex is defined in terms of Shannon Entropy \(-plogp\) and Subgra) s
5 390 M
(ph Degree Centrality) s
5 379 M
(383.4 Entropy measures for networks - [Anand-Bianconi] - https://arxiv.org/pdf/0907.1514.pd) s
5 368 M
(f - Relations between Shannon Entropy, Gibbs Entropy and Von Neumann Entropy of networks) s
5 357 M
(383.5 Graph Energy and its relation to average degree k - http://iopscience.iop.org/article) s
5 346 M
(/10.1088/1742-6596/604/1/012024/pdf - Energy of a Graph is sum of absolute values of its ad) s
5 335 M
(jaceny matrix eigenvalues. Quoted excepts: "...When the network is very sparse, graph energ) s
5 324 M
(y E will be monotonically increasing with k. With slow increase of intensity, energy E will) s
5 313 M
( be still proportional to k but with appearing of some weak fluctuations. However, while th) s
5 302 M
(e network is becoming highly dense, the graph energy will drop sharply. And the value of k ) s
5 291 M
(that corresponds to the largest graph energy is about 0.8N...". This threshold relation bet) s
5 280 M
(ween average degree and energy of graph has parallels to Bianconi-Barabasi least energy int) s
5 269 M
(rinsic fitness which implies low energy vertices attract large number of links. Similarly, ) s
5 258 M
(Graph Energy which is cumulative estimate for all vertices, decreases when the graph has lo) s
5 247 M
(t of edges which is possible only if average degree of the vertices is high. High average d) s
5 236 M
(egree by Bianconi-Barabasi model implies least energy and high intrinsic fitness.) s
5 225 M
(383.6 Graph Energy and its meaning - https://arxiv.org/pdf/1704.00779.pdf) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(----------------------------------------------) s
5 181 M
(384. \(THEORY\) Neural Tensor Networks Reasoning and Recursive Gloss Overlap merit scoring - ) s
5 170 M
(23 February 2017) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(----------------------------------------------) s
5 137 M
(Neural Tensor Networks described in 384.1 generalizes a linear neuron into a multidimension) s
5 126 M
(al tensor and assigns a score for relation) s
5 115 M
(between two entities e1 and e2. This is described in the context of an ontology \(e.g WordNe) s
5 104 M
(t\) where a relation between two words w1 and w2) s
5 93 M
(is assigned a score based on various distance measures. Recursive Gloss Overlap graph which) s
5 82 M
( is a gloss definition graph has a single relation) s
5 71 M
(between any two words - w1 "is in dictionary/gloss definition of" w2. Present implementatio) s
5 60 M
(n does not quantify the extent of relatedness) s
5 49 M
(between two words connected by an edge in Recursive Gloss Overlap graph. This definition gr) s
5 38 M
(aph can be considered as a Neural Tensor Network) s
5 27 M
(and each edge can be scored as a neural tensor relation between two word vertices. Cumulati) s
5 16 M
(ve sum total score of all edges in this graph is a) s
5 5 M
(quantitative intrinsic merit measure of the meaningfulness and intrinsic merit. Thus any do) s
_R
S
%%Page: (211) 211
%%BeginPageSetup
_S
18 36 translate
/pagenum 211 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (211) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(cument's definition graph is a set of tensor neurons which together decide the merit of the) s
5 731 M
( text. Together with Korner Entropy complexity measure, Sum of Tensor Neuron scores effecti) s
5 720 M
(vely weight the text.) s
5 698 M
(References:) s
5 687 M
(----------) s
5 676 M
(384.1 Neural Tensor Networks - [SocherManningNg] - http://nlp.stanford.edu/pubs/SocherChenM) s
5 665 M
(anningNg_NIPS2013.pdf) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(---------------------------------------------) s
5 621 M
(385. \(THEORY\) Recursive Lambda Function Growth, Random Walks on Recursive Gloss Overlap gra) s
5 610 M
(ph and Text Comprehension - 25 February 2017 - related to 46, 47, 216, 230 and 384) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(---------------------------------------------) s
5 577 M
(As mentioned in previous section, two word vertices x1 and x2 are connected by an edge weig) s
5 566 M
(ht determined by tensor neuron \(x1 R x2\) for some relation R. Human comprehension of text c) s
5 555 M
(an be approximated by set of compositional lambda functions created from converging random ) s
5 544 M
(walks or DFS Tree on the recursive gloss overlap graph. For example, following definition g) s
5 533 M
(raph for a text "Flight landed on runway because) s
5 522 M
(of fuel shortage" is created from thesaurus/sdictionary/gloss definitions of an ontology:) s
5 500 M
(                        flight -------> tyre ------> wheel ---> runway) s
5 489 M
(                          ^                             |) s
5 478 M
(                          |                             V) s
5 467 M
(                          |                          landing) s
5 456 M
(                        fuel -----> shortage            |) s
5 445 M
(                                                        V) s
5 434 M
(                                                       gear) s
5 412 M
(Example Random walks on previous graph:) s
5 401 M
(---------------------------------------) s
5 390 M
(                        flight ---> tyre ----> wheel ---> landing ---> gear) s
5 379 M
(                        flight ----> fuel ----> shortage) s
5 368 M
(If Tensor Neurons are applied for each edge, this graph is a weighted directed graph where ) s
5 357 M
(weight is determined by Tensor Neuron. If each relation is a lambda function following the ) s
5 346 M
(Recursive Lambda Function Compositional Growth defined in 216, every random walk can be map) s
5 335 M
(ped to a lambda function composition tree. For example, following random walk:) s
5 313 M
(                        fuel ----> flight ---> tyre ----> wheel ---> landing ---> gear) s
5 291 M
(is tensor neuron labelled with lambda functions:) s
5 269 M
(                        fuel --\(requiredby\)---> flight----\(has\)---> tyre ---\(has\)---> wheel) s
5 258 M
( ---\(does\) ---> landing ---\(requires\)---> gear) s
5 236 M
(where lambda functions for each edge with word vertices as parameters are:) s
5 225 M
(        f1 = requiredby\(fuel, flight\)) s
5 214 M
(        f2 = has\(flight, tyre\)) s
5 203 M
(        f3 = has\(tyre, wheel\)) s
5 192 M
(        f4 = does\(wheel, landing\)) s
5 181 M
(        f5 = requires\(landing, gear\)) s
5 159 M
(Composition is done left associative creating following tree recursively:) s
5 148 M
(        f5\(landing,gear\)) s
5 137 M
(        f4\(wheel, f5\(landing, gear\)\)) s
5 126 M
(        f3\(tyre, f4\(wheel, f5\(landing, gear\)\)\)) s
5 115 M
(        f2\(flight, f3\(has, f4\(wheel, f5\(landing, gear\)\)\)\)) s
5 104 M
(        f1\(fuel, f2\(flight, f3\(tyre, f4\(wheel, f5\(landing, gear\)\)\)\)\)) s
5 82 M
(Previous composition tree is done for each Markov Chain Random Walk on the Definition Graph) s
5 71 M
(. Difference between composition in 216 and previous is: Recursive Lambda Function Composit) s
5 60 M
(ional Growth is done on a flat sentence in 216, while it is applied to a random walk on def) s
5 49 M
(inition graph here. Because neuron tensors are equivalent to a lambda function per edge, ea) s
5 38 M
(ch function fi can be made to return a relevance merit score which is fed to next layer - i) s
5 27 M
(n essence each random walk lambda function composition tree is a multilayer tensor neuron. ) s
5 16 M
(Similar process can be applied to paths in a DFS tree also. Inorder traversal of the compos) s
5 5 M
(ition tree yields an equivalent expanded text of original text \(In above example it is "fue) s
_R
S
%%Page: (212) 212
%%BeginPageSetup
_S
18 36 translate
/pagenum 212 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (212) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(l requiredby flight has tyre has wheel does landing requires gear"\) . Each random walk resu) s
5 731 M
(lts in a tree-structured multilayer tensor neuron. Equivalently, each lambda function tenso) s
5 720 M
(r could return a pictorial meaning and each composition "operates" on the tensor arguments ) s
5 709 M
(to return a new animated version to next level up the tree \(i.e meaning is represented as v) s
5 698 M
(isuals\). Ontology required for this is an ImageNet than a WordNet.) s
5 676 M
(Advantage of Random Walks is it mimicks the randomness of deep learning in human text compr) s
5 665 M
(ehension. Typical visual comprehension reads a passage atleast once scanning the keywords a) s
5 654 M
(nd inferring grammatical connectives between keywords. After keywords are known, they have ) s
5 643 M
(to be related to infer meaning. An ontology provides paths between keywords and how they ar) s
5 632 M
(e related. After all edges and paths are known, collective meaning has to be evaluated by t) s
5 621 M
(raversing the graph. Meaning is accrued over time by traversing the relations between keywo) s
5 610 M
(rds compositionally. This traversal is a random walk on the definition graph. Previous lamb) s
5 599 M
(da function growth for each random walk on graph builds meaning recursively. Covering time ) s
5 588 M
(of random walk is the number of steps required to visit all vertices. Mixing time of random) s
5 577 M
( walk is the number of steps required to reach stationary distribution \(i.e any further ran) s
5 566 M
(dom walk is no different from previous walks\). These two measures have been widely studied ) s
5 555 M
(for weighted directed graphs and are good estimators of time required to deep-learn and com) s
5 544 M
(prehend a text. Trivial DFS search is quite static and stationary distribution in Mixing ti) s
5 533 M
(me of random walk is the state when a text has been fully understood and any further readin) s
5 522 M
(g does not add more meaning. Mixing time in undirected graph is proportional to Isoperimetr) s
5 511 M
(ic number or Cheeger's constant. Isoperimetry measures amount of bottleneck in a graph. For) s
5 500 M
( directed weighted graph, Conductance is the equivalent isoperimetric measure. When isoperi) s
5 489 M
(metry is high, random walk converges quickly implying faster text comprehension.  For a par) s
5 478 M
(tition of the vertex set of a graph \(S, T\), conductance of the cut \316\246\(S,T\) = u \342\\210\\210 S,) s
5 467 M
(v \342\\210\\210 T sum\(a\(u,v\)\) / minimum \(sum\(w \342\\210\\210 S dw\), sum\(w \342\\210\\210 T dw\)\) where dw) s
5 456 M
( = for all \(w,z\) sum\(a\(w,z\)\) and a\(s,t\) is the weight of an edge i.e tensor neuron lambda f) s
5 445 M
(unction score. PageRank of the Recusive Gloss Overlap graph is converging random walk - Pag) s
5 434 M
(eRank along with Core Number of definition graph is already known to classify texts in unsu) s
5 423 M
(pervised setting by ranking the vertices.) s
5 401 M
(References:) s
5 390 M
(-----------) s
5 379 M
(385.1 Random Walks Survey - http://www.cs.elte.hu/~lovasz/erdos.pdf) s
5 368 M
(385.2 Random Walks on Weighted Directed Graphs - http://www.cs.yale.edu/homes/spielman/eigs) s
5 357 M
(/lect7.pdf) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(---------------) s
5 313 M
(386. \(FEATURE-DONE\) Java Spark Generic Streaming and Streaming Abstract Generator Integrati) s
5 302 M
(on - 27 February 2017) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(---------------) s
5 269 M
(*\) Enabled URLSocket in Spark Generic Streaming and crawled an example facebook and twitter) s
5 258 M
(streaming data stored into Parquet files and Spark metastore) s
5 247 M
(*\) Added Spark Streaming Data Source and Parquet Data Storage to Streaming_AbstractGenerato) s
5 236 M
(r.py) s
5 225 M
(and updated iterator to read DataFrames from word.parquet Spark Streaming storage.) s
5 214 M
(*\) Spark DataFrames are iterated by accessing word column ordinal and yielded to any applic) s
5 203 M
(ation of) s
5 192 M
(interest.) s
5 181 M
(*\) As an example Streaming HyperLogLogCounter implementation has been updated to read from ) s
5 170 M
(Spark) s
5 159 M
(Parquet streaming data storage and cardinality is computed) s
5 148 M
(*\) Example Spark Generic Streaming logs with URLSockets and HyperLogLogCounter with Spark P) s
5 137 M
(arquet) s
5 126 M
(data storage have been added to testlogs in python-src and java-src/bigdata_analytics/spark) s
5 115 M
(_streaming/testlogs) s
5 104 M
(*\) Thus an end-to-end Java+Spark+Python streaming ETSL pipeline has been implemented where:) s
5 93 M
(                - Extract is done by JSoup crawl) s
5 82 M
(                - Transform is done by Spark RDD transformations) s
5 71 M
(                - Store is done by Spark Hive and Parquet storage) s
5 60 M
(                - Load is done by Streaming Abstract Generator iterator/facade pattern) s
5 49 M
(*\) Streaming_HyperLogLogCounter.py instantiates SparkSession from pyspark.sql. Usage of Spa) s
5 38 M
(rkSession requires executing this through spark-submit \(Usual python <file> commandline doe) s
5 27 M
(snot work\) as below:) s
5 16 M
(/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/bin/spark-submit Streaming_HyperLogLogCounte) s
5 5 M
(r.py 2>&1 > testlogs/Streaming_HyperLogLogCounter.out.SparkStreaming.27February2017) s
_R
S
%%Page: (213) 213
%%BeginPageSetup
_S
18 36 translate
/pagenum 213 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (213) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(----------------) s
5 709 M
(387. \(FEATURE-DONE\) Streaming Algorithms Implementations for Spark Streaming Parquet Data S) s
5 698 M
(torage - 28 February 2017) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(----------------) s
5 665 M
(*\) All Streaming_<algorithm> implementations have been updated to have Spark Streaming) s
5 654 M
(Parquet file storage as input generators.) s
5 643 M
(*\) New Streaming_SocialNetworkAnalyis.py file has been added to do sentiment analysis for) s
5 632 M
(Streaming Data from Spark Parquet file storage) s
5 621 M
(*\) Streaming_AbstractGenerator.py has been updated to filter each Spark Parquet DataFrame t) s
5 610 M
(o remove) s
5 599 M
(grammatical connectives and extract only keywords from streamed content) s
5 588 M
(*\) Logs for all Streaming_<algorithm>.py and Streaming_SocialNetworkAnalysis.py executed ag) s
5 577 M
(ainst) s
5 566 M
(Spark Streaming Parquet data have been committed to testlogs/) s
5 555 M
(*\) Streaming_SocialNetworkAnalysis.py presently iterates through word stream generated by) s
5 544 M
(Streaming_AbstractGenerator.py and does Markov Random Fields Clique potential sentiment ana) s
5 533 M
(lysis.) s
5 522 M
(*\) Streaming_AbstractGenerator.py Spark Parquet __iter__\(\) clause presently returns word st) s
5 511 M
(ream which) s
5 500 M
(can be optionally made to return sentences or phrases of specific length) s
5 489 M
(*\) All python streaming implementations instantiating Streaming_AbstractGenerator.py have t) s
5 478 M
(o be executed with $SPARK_DIR/bin/spark-submit) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(---------------------------------------------) s
5 434 M
(388. \(FEATURE-DONE\) Major rewrite of BackPropagation Implementation for arbitrary number of) s
5 423 M
( Neuron input variables layer - 2 March 2017) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(---------------------------------------------) s
5 390 M
(*\) BackPropagation algorithm code has been rewritten for arbitrary number of input layer, h) s
5 379 M
(idden layer and output layer variables.) s
5 368 M
(*\) Some Partial Differential Equations functions have been merged into one function.) s
5 357 M
(*\) This was executed with 6 variable input layer neuron, 6 variable hidden layer and 6 vari) s
5 346 M
(able output layer with 2*6*6=72 weights) s
5 335 M
(for each of 72 activations. ) s
5 324 M
(*\) Logs for this have been committed to testlogs/) s
5 313 M
(*\) For 100000 iterations, error tapers to ~10^-29 as below) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-------------------) s
5 280 M
(Error after Backpropagation- iteration : 99998) s
5 269 M
(1.05827458078e-29) s
5 258 M
(Layers in this iteration:) s
5 247 M
(###############) s
5 236 M
(Input Layer:) s
5 225 M
(###############) s
5 214 M
([0.23, 0.11, 0.05, 0.046, 0.003, 0.1]) s
5 203 M
(###############) s
5 192 M
(Hidden middle Layer:) s
5 181 M
(###############) s
5 170 M
([0.07918765738490302, 0.17639329000539292, 0.3059104560477687, 0.06819897810162112, 0.13596) s
5 159 M
(389556531566, 0.18092367420130773]) s
5 148 M
(###############) s
5 137 M
(Output Layer:) s
5 126 M
(###############) s
5 115 M
([0.29999999999999977, 0.53, 0.11000000000000039, 0.09000000000000002, 0.010000000000004578,) s
5 104 M
( 0.2099999999999999]) s
5 93 M
(Weights updated in this iteration:) s
5 82 M
([0.048788506679748, 0.11426171324845727, 0.24603459114714846, 0.0795780558315572, 0.1778420) s
5 71 M
(9754093078, 0.18901665972998824, 0.11262698024008909, 0.20899193850252168, 0.51903038199144) s
5 60 M
(09, 0.3056462222980023, 0.5043023226568699, 0.6597581902164429, 0.16317511417689112, 0.6856) s
5 49 M
(596163043989, 1.0387023103855846, 0.2606362555325616, 0.9902995852922012, 1.060623399639461) s
5 38 M
(6, 0.03792106334721366, 0.08894920940249851, 0.19690317303590538, 0.06956852060077344, 0.15) s
5 27 M
(685074966243606, 0.1617685764906898, 0.07393365494416165, 0.11785754559950794, 0.3291450029) s
5 16 M
(7950156, 0.2691055311488234, 0.4255090307780099, 0.5588219323805761, 0.17422407739745155, 0) s
5 5 M
(.7118075853635217, 0.335920938970278, 0.08421750448989332, 0.18955175416917805, 0.213145945) s
_R
S
%%Page: (214) 214
%%BeginPageSetup
_S
18 36 translate
/pagenum 214 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (214) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(9234997, 0.18585916895619456, 0.2871421205369935, 0.4097382856269691, 0.09927665626493291, ) s
5 731 M
(0.2820455537957722, 0.44170499922267087, 0.4181874495051114, 0.6343547541074734, 0.50196598) s
5 720 M
(76526656, 0.6341824150669009, 0.9311854573920668, 0.415739542966714, 0.8116648622103757, 0.) s
5 709 M
(7642211240783323, -0.27787045024304763, -0.03796350343576473, -0.06897746410924578, -0.1210) s
5 698 M
(6324365840128, 0.09688102161356603, 0.0833653488478167, 0.025844281679456543, 0.01924251728) s
5 687 M
(820474, 0.1166534752079898, 0.22544113767193752, 0.2565459528164421, 0.2598246679566054, -0) s
5 676 M
(.2448286735461752, 0.48545168615654455, -0.12033616818940464, -0.17996884551601777, 0.09161) s
5 665 M
(370830913909, 0.16523481156548922, 0.22079944846849042, 0.4246703906819317, 0.0581351376078) s
5 654 M
(5996, 0.49187786590191596]) s
5 643 M
(Recomputing Neural Network after backpropagation weight update) s
5 632 M
(Error after Backpropagation- iteration : 99999) s
5 621 M
(1.05827458078e-29) s
5 610 M
(Layers in this iteration:) s
5 599 M
(###############) s
5 588 M
(Input Layer:) s
5 577 M
(###############) s
5 566 M
([0.23, 0.11, 0.05, 0.046, 0.003, 0.1]) s
5 555 M
(###############) s
5 544 M
(Hidden middle Layer:) s
5 533 M
(###############) s
5 522 M
([0.07918765738490302, 0.17639329000539292, 0.3059104560477687, 0.06819897810162112, 0.13596) s
5 511 M
(389556531566, 0.18092367420130773]) s
5 500 M
(###############) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(------------------------) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(------------------) s
5 434 M
(389. \(FEATURE-DONE\) Convolution Network Final Neuron Layer Integrated with BackPropagation ) s
5 423 M
(Implementation- 3 March 2017) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(------------------) s
5 390 M
(*\) New python module has been added to repository to invoke BackPropagation algorithm) s
5 379 M
(implementation in final neuron layer of convolution network.) s
5 368 M
(*\) This creates a multilayer perceptron from maxpooling layer variables as input layer and) s
5 357 M
(backpropagates for few iterations to do weight updates.) s
5 346 M
(*\) Maxpooling layer is a matrix of 5*5=25 variables. With 25 variable input layer, backprop) s
5 335 M
(agation) s
5 324 M
(is done on 25*25*2=1250 activation edges with weights\(25 inputs * 25 hidden + 25 hidden * 2) s
5 313 M
(5 outputs\).) s
5 302 M
(*\) Logs for this have been added to testlogs/) s
5 291 M
(*\) Presently expected output layer has been hardcoded to some constant) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(-------------------------------------------------) s
5 247 M
(390. \(THEORY\) Prime-Composite Complementation/2-coloring, Riemann Zeta Function and Sum of ) s
5 236 M
(Eigenvalues - Elementary Analysis - 6 March 2017) s
5 225 M
(- related to 19, 24, 319, 323, 338, 370) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(-------------------------------------------------) s
5 192 M
(Special case of complementation/2-coloring is prime-composite coloring where set of natural) s
5 181 M
( numbers is 2-colored as primes and composites.) s
5 170 M
(Here terminology of complementation and 2-coloring is used interchangeably. But complementa) s
5 159 M
(tion is a generic notion for functions over) s
5 148 M
(reals too. Riemann Zeta Function and truth of Riemann Hypothesis imply a pattern in distrib) s
5 137 M
(ution of primes and hence pattern in prime-composite) s
5 126 M
(coloring. Thus Riemann Zeta Function is a 2-coloring scheme for set of natural numbers.) s
5 104 M
(Let q^s + q^\(1-s\) = v be an eigenvalue of a graph where s is a complex exponent \(s=a+ib\). I) s
5 93 M
(t can be written as:) s
5 82 M
(        q^2s + q = vq^s) s
5 71 M
(        q^2\(a+ib\) + q = vq^\(a+ib\)) s
5 60 M
(        q^2a*q^2ib + q = vq^a*q^ib) s
5 49 M
(        q^2a\(e^i2blogq\) + q = vq^a[e^iblogq] by rewriting q^ib = e^iblogq) s
5 38 M
(        q^2a[cos\(2blogq\) + isin\(2blogq\)] + q = vq^a[cos\(blogq\) + isin\(blogq\)]) s
5 27 M
(Equating Re\(\) and Im\(\):) s
5 16 M
(        q^2a[cos\(2blogq\)] + q = vq^a[cos\(blogq\)]) s
5 5 M
(        q^2a[sin\(2blogq\)] = vq^a[sin\(blogq\)]) s
_R
S
%%Page: (215) 215
%%BeginPageSetup
_S
18 36 translate
/pagenum 215 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (215) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Ratio of Re\(\) and Im\(\) on both sides:) s
5 731 M
(        q^2a[sin\(2blogq\)]                vq^a[sin\(blogq\)]) s
5 720 M
(     --------------------------  =      ------------------) s
5 709 M
(        q^2a[cos\(2blogq\)] + q            vq^a[cos\(blogq\)]) s
5 687 M
(   q^2a[2*sin\(blogq\)*cos\(blogq\)]                [sin\(blogq\)]) s
5 676 M
(     --------------------------  =           ------------------) s
5 665 M
(        q^2a[cos\(2blogq\)] + q                   [cos\(blogq\)]) s
5 643 M
(        q^2a[2*cos\(blogq\)*cos\(blogq\)] =   q^2a[cos\(2blogq\)] + q) s
5 621 M
(        q^2a[2*cos\(blogq\)*cos\(blogq\)] =   q^2a[cos\(blogq\)*cos\(blogq\) - sin\(blogq\)*sin\(blogq) s
5 610 M
(\)] + q) s
5 588 M
(        q^2a[cos\(blogq\)*cos\(blogq\) + sin\(blogq\)*sin\(blogq\)] = q) s
5 566 M
(        q^2a = q => a = 0.5) s
5 544 M
(When s=0.5 with no imaginary part and q+1 is regularity of a graph, v = 2*sqrt\(q\) and corre) s
5 533 M
(sponding graph is a q+1 regular Ramanujan Graph.) s
5 511 M
([This is already derived in:) s
5 500 M
(https://sites.google.com/site/kuja27/RamanujanGraphsRiemannZetaFunctionAndIharaZetaFunction) s
5 489 M
(.pdf,) s
5 478 M
(https://sites.google.com/site/kuja27/RZFAndIZF_25October2014.pdf,) s
5 467 M
(http://sourceforge.net/p/asfer/code/HEAD/tree/python-src/ComplFunction_DHF_PVsNP_Misc_Notes) s
5 456 M
(.pdf]) s
5 434 M
(Let H = {G1,G2,G3,...} be an infinite set of graphs with eigenvalues 1^s + 1^\(1-s\), 2^s + 2) s
5 423 M
(^\(1-s\), 3^s + 3^\(1-s\),....) s
5 401 M
(Sum of these eigenvalues for infinite set of graphs has following relation to Riemann Zeta ) s
5 390 M
(Function for s=w+1:) s
5 379 M
(Sum_q=1_to_inf\(q^s + q^\(1-s\)\) = [1 + 1/2^w + 1/3^w + ...] + [1 + 2^\(w+1\) + 3^\(w+1\) + ...] =) s
5 368 M
( RiemannZetaFunction + [1 + 2^\(w+1\) + 3^\(w+1\) + ...]) s
5 346 M
(Sum_q=1_to_inf\(q^s + q^\(1-s\)\) -  [1 + 2^\(w+1\) + 3^\(w+1\) + ...] = RiemannZetaFunction) s
5 324 M
(Thus Riemann Zeta Function is written as difference of sum of eigenvalues for an infinite s) s
5 313 M
(et of graphs and another infinite exponential series.) s
5 302 M
(Hermitian Real Symmetric matrices have real eigenvalues which is true for undirected graphs) s
5 291 M
(. For directed graphs, eigenvalues are complex numbers. Because of this condition, elements) s
5 280 M
( of set H have to be directed graphs. Relation between eigenvalues of two matrices M1 and M) s
5 269 M
(2 and eigenvalues of their sum M1+M2 is expressed by [Weyl] inequalities and [Knutson-Tao] ) s
5 258 M
(proof of Horn's conjecture. Sum of eigenvalues of M1+M2 is equal to sum of eigen values of ) s
5 247 M
(M1 + sum of eigen values of M2 \(Trace=sum of eigen values=sum of diagonal elements\). The se) s
5 236 M
(t H has one-to-one mapping with set of natural numbers and is 2-colored as prime and compos) s
5 225 M
(ite graphs based on index \(each graph is monochromatic\). Sum of adjacency matrices of H is ) s
5 214 M
(also a directed graph \(if all Gi have same number of vertices\) denoted as G\(H\).) s
5 192 M
(References:) s
5 181 M
(-----------) s
5 170 M
(390.1 Complex Analysis - [Lars Ahlfors] - Page 30 - Poles and Zeros, Page 213 - Product Dev) s
5 159 M
(elopment, Riemann Zeta Function and Prime Numbers) s
5 148 M
(390.2 Honeycombs and Sums of Hermitian Matrices - http://www.ams.org/notices/200102/fea-knu) s
5 137 M
(tson.pdf) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(------------------------------------------) s
5 93 M
(391. \(FEATURE-DONE\) DeepLearning \(ConvolutionNetwork-BackPropagation\) JPEG files with Pytho) s
5 82 M
(n Imaging Library \(PILlow\) - 6 March 2017) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(------------------------------------------) s
5 49 M
(*\) Added import of PIL Image library to open any image file and convert into a matrix in In) s
5 38 M
(teger mode) s
5 27 M
(*\) This matrix is input to Convolution and BackPropagation code) s
5 16 M
(*\) Logs of Convolution and BackPropagation for sample images have been committed to testlog) s
5 5 M
(s/) s
_R
S
%%Page: (216) 216
%%BeginPageSetup
_S
18 36 translate
/pagenum 216 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (216) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-----------------------------------------) s
5 709 M
(392. \(FEATURE-DONE\) DeepLearning \(ConvolutionNetwork-BackPropagation\) tobit\(\) update - 7 Ma) s
5 698 M
(rch 2017) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(-----------------------------------------) s
5 665 M
(*\) Updated python-src/DeepLearning_ConvolutionNetwork_BackPropagation.py tobit\(\) function t) s
5 654 M
(o map each pixel to a decimal value < 1) s
5 643 M
(*\) Increased BackPropagation iteration to 100.) s
5 632 M
(*\) Logs for this have been committed to testlogs/. With this final neurons for max pooling ) s
5 621 M
(layer are sensitive to changes in image pixels) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(------------------------------------------) s
5 577 M
(393. \(FEATURE-DONE\) DeepLearning \(ConvolutionNetwork-BackPropagation\) image_to_bitmatrix\(\) ) s
5 566 M
(update - 8 March 2017) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(------------------------------------------) s
5 533 M
(*\) Refactored the tobit\(\) function - moved it to a new directory image_pattern_mining and r) s
5 522 M
(eimplemented it with a new) s
5 511 M
(image_to_bitmatrix\(\) function in ImageToBitMatrix.py by enumerating through the pixel rows ) s
5 500 M
(and applying map\(tobit\)) s
5 489 M
(*\) This removed the opaqueness related 255 appearing for all pixels in bitmap.) s
5 478 M
(*\) Each pixel is multiplied by a fraction. Mapping it to binary digits 0,1 based on [0-127]) s
5 467 M
(,[128-255] intervals for pixel values) s
5 456 M
(does not work well with BackPropagation of MaxPooling in Convolution Network. Instead multi) s
5 445 M
(ples of a small fraction makes the) s
5 434 M
(MaxPooling layer quite receptive to changes in image pixel values.) s
5 423 M
(*\) Added few handwriting recognition example images for numbers 1\(two fonts\),2 and 8.) s
5 412 M
(*\) Logs for this have been committed to testlogs/) s
5 401 M
(---------------------------------------------------------) s
5 390 M
(Following are Maxpooling Neurons) s
5 379 M
(---------------------------------------------------------) s
5 368 M
(Final Layer of Inference from Max Pooling Layer - BackPropagation on Max Pooling Layer Neur) s
5 357 M
(ons) s
5 346 M
(Inference from Max Pooling Layer - Image: [0.1452950826564989, 0.15731736449115244, 0.16984) s
5 335 M
(767785665972]) s
5 324 M
(Inference from Max Pooling Layer - Image: [0.14920888863234688, 0.16193600589418844, 0.1752) s
5 313 M
(8092024601222]) s
5 302 M
(Inference from Max Pooling Layer - Image: [0.13197897244871004, 0.1417448800619895, 0.15171) s
5 291 M
(424525284838]) s
5 280 M
(Inference from Max Pooling Layer - Image: [0.14007345008310818, 0.15118749472569865, 0.1626) s
5 269 M
(7822705412283]) s
5 258 M
(Inference from Max Pooling Layer - Image: [0.07847441088145349, 0.0807616625716103, 0.08303) s
5 247 M
(607840796547]) s
5 236 M
(Inference from Max Pooling Layer - Image: [0.08983732685398557, 0.09365789540391084, 0.0974) s
5 225 M
(4765711798722]) s
5 214 M
(Inference from Max Pooling Layer - Image: [0.0903328782140764, 0.09421672093823663, 0.09806) s
5 203 M
(798136073994]) s
5 192 M
(Inference from Max Pooling Layer - Image: [0.08761036574911765, 0.09113121170496671, 0.0946) s
5 181 M
(2405037074482]) s
5 170 M
(\('Inference from Max Pooling Layer - Example 11:', [0.1619896774094416, 0.1615169723530323,) s
5 159 M
( 0.15009965578039716]\)) s
5 148 M
(\('Inference from Max Pooling Layer - Example 12:', [0.14303879829783814, 0.1206861456092456) s
5 137 M
(8, 0.07211705852669059]\)) s
5 126 M
(\('Inference from Max Pooling Layer - Example 21:', [0.1932801269861012, 0.11587916253160746) s
5 115 M
(, -0.007889615456070018]\)) s
5 104 M
(\('Inference from Max Pooling Layer - Example 22:', [0.17605214289097237, 0.1932638072553128) s
5 93 M
(4, 0.2114152778184319]\)) s
5 82 M
(\('Inference from Max Pooling Layer - Example 3:', [0.062097695970929206, 0.0620976959709292) s
5 71 M
(06, 0.062097695970929206]\)) s
5 60 M
(\('Inference from Max Pooling Layer - Example 41:', [0.2976324086103368, 0.32891470561393965) s
5 49 M
(, 0.34986397693929844]\)) s
5 38 M
(\('Inference from Max Pooling Layer - Example 42:', [0.22669904395788065, 0.2633609754829011) s
5 27 M
(6, 0.3065443950445386]\)) s
5 16 M
(\('Inference from Max Pooling Layer - Example 51:', [0.11935155170571034, 0.1247763737325502) s
5 5 M
(2, 0.12911872514904305]\)) s
_R
S
%%Page: (217) 217
%%BeginPageSetup
_S
18 36 translate
/pagenum 217 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (217) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\('Inference from Max Pooling Layer - Example 52:', [0.12675869649313706, 0.1205120326182508) s
5 731 M
(4, 0.10578392639393523]\)) s
5 720 M
(----------------------------------------------------------) s
5 709 M
(Previous logs are grep-ed from testlogs/. Handwritten Numeral recognitions \(with high noise) s
5 698 M
(\) are done in following Maxpooling inferences:) s
5 687 M
([Number 1 - Font 1] Inference from Max Pooling Layer - Image: [0.07847441088145349, 0.08076) s
5 676 M
(16625716103, 0.08303607840796547]) s
5 665 M
([Number 1 - Font 2] Inference from Max Pooling Layer - Image: [0.08983732685398557, 0.09365) s
5 654 M
(789540391084, 0.09744765711798722]) s
5 643 M
([Number 2] Inference from Max Pooling Layer - Image: [0.0903328782140764, 0.094216720938236) s
5 632 M
(63, 0.09806798136073994]) s
5 621 M
([Number 8] Inference from Max Pooling Layer - Image: [0.08761036574911765, 0.09113121170496) s
5 610 M
(671, 0.09462405037074482]) s
5 588 M
(Contrasting this with bitmap numerals inscribed in 2 dimensional arrays \(with low noise\), s) s
5 577 M
(imilar elements have close enough values:) s
5 566 M
([Number 0 - Font 1] \('Inference from Max Pooling Layer - Example 11:', [0.1619896774094416,) s
5 555 M
( 0.1615169723530323, 0.15009965578039716]\)) s
5 544 M
([Number 0 - Font 2] \('Inference from Max Pooling Layer - Example 12:', [0.14303879829783814) s
5 533 M
(, 0.12068614560924568, 0.07211705852669059]\)) s
5 522 M
([Number 8 - Font 1] \('Inference from Max Pooling Layer - Example 21:', [0.1932801269861012,) s
5 511 M
( 0.11587916253160746, -0.007889615456070018]\)) s
5 500 M
([Number 8 - Font 2] \('Inference from Max Pooling Layer - Example 22:', [0.17605214289097237) s
5 489 M
(, 0.19326380725531284, 0.2114152778184319]\)) s
5 478 M
([Null pattern] \('Inference from Max Pooling Layer - Example 3:', [0.062097695970929206, 0.0) s
5 467 M
(62097695970929206, 0.062097695970929206]\)) s
5 456 M
([Letter X - Font 1] [\('Inference from Max Pooling Layer - Example 41:', [0.2976324086103368) s
5 445 M
(, 0.32891470561393965, 0.34986397693929844]\)) s
5 434 M
([Letter X - Font 2] \('Inference from Max Pooling Layer - Example 42:', [0.22669904395788065) s
5 423 M
(, 0.26336097548290116, 0.3065443950445386]\)) s
5 412 M
([Number 1 - Font 1] \('Inference from Max Pooling Layer - Example 51:', [0.11935155170571034) s
5 401 M
(, 0.12477637373255022, 0.12911872514904305]\)) s
5 390 M
([Number 1 - Font 2] \('Inference from Max Pooling Layer - Example 52:', [0.12675869649313706) s
5 379 M
(, 0.12051203261825084, 0.10578392639393523]\)) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(--------------------------) s
5 335 M
(394. \(THEORY\) Coloring Real Numbers and Complement Functions - 8 March 2017 - related to 32) s
5 324 M
(3, 338) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(--------------------------) s
5 291 M
(So far equivalence of 2-coloring schemes and integer valued complement functions have been ) s
5 280 M
(mentioned. Most generic problem in this class) s
5 269 M
(is to find coloring schemes \(or\) functions which "complement" real and complex n-dimensiona) s
5 258 M
(l surfaces\(i.e sets of values of a function f and) s
5 247 M
(its complement g create a disjoint set cover of the real/complex planes\). Ramsey theory per) s
5 236 M
(tains to coloring integer sequences. 394.1 defines) s
5 225 M
(the problem of coloring the real line as minimum number of colors required to color the rea) s
5 214 M
(l line such that no two points within some specific distance \(which in turn is an element o) s
5 203 M
(f a distance set\) are of same color. In Graph theory terms, this reduces to chromatic numbe) s
5 192 M
(r of a) s
5 181 M
(graph where two vertices a and b are adjacent iff distance between a and b on real line is ) s
5 170 M
(in distance set. This is stricter requirement) s
5 159 M
(of coloring compared to complementation and complement graphs representation mentioned in 3) s
5 148 M
(38. For example, following complementation of [1,2]:) s
5 137 M
(        f\(0\) = [1.0,1.11]) s
5 126 M
(                g\(0\) = [1.12,1.23]) s
5 115 M
(        f\(1\) = [1.24,1.30]) s
5 104 M
(                g\(1\) = [1.31,1.68]) s
5 93 M
(        f\(2\) = [1.69,2.0]) s
5 82 M
(has colored regions of length [0.11,0.11,0.06,0.37,0.31] and can be 2-colored with f and g.) s
5 71 M
( If the distance set is {0.01,0.02} two) s
5 60 M
(points 1.32 and 1.33 are 0.01 apart but have same color \(belong to same function g\). Simila) s
5 49 M
(rly points 1.69 and 1.71 are 0.02 apart but) s
5 38 M
(have same color f. Thus complementation over reals relaxes the coloring conditions signific) s
5 27 M
(antly. Coloring real line is a special case of) s
5 16 M
(complementation with distance set requirement while Coloring integers is equivalent to comp) s
5 5 M
(lementation. Rather, distance set for real) s
_R
S
%%Page: (218) 218
%%BeginPageSetup
_S
18 36 translate
/pagenum 218 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (218) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(complementation is of size 1 containing length of largest monochromatic streak - in previou) s
5 731 M
(s example it is {0.37}.) s
5 709 M
(References:) s
5 698 M
(----------) s
5 687 M
(394.1 Coloring Real Line - [EggletonErdosSkilton] - http://ac.els-cdn.com/0095895685900395/) s
5 676 M
(1-s2.0-0095895685900395-main.pdf?_tid=3b53ab92-03ec-11e7-870e-00000aab0f01&acdnat=148897006) s
5 665 M
(0_784d7a37e58d4662a8e474c62a6c8ae7) s
5 654 M
(394.2 Coloring Reals - http://webbuild.knu.ac.kr/~trj/HN.pdf) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(-------------------------------------------) s
5 610 M
(395. \(FEATURE-DONE\) Deep Learning Recurrent Neural Network Gated Recurrent Unit \(RNN GRU\) I) s
5 599 M
(mplementation - 9 March 2017) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(-------------------------------------------) s
5 566 M
(*\) This commit implements Gated Recurrent Unit algorithm \(most recent advance in deep learn) s
5 555 M
(ing - published in 2014\) which is a) s
5 544 M
(simplification of RNN LSTM by reducing number of gates \(input, cell, forget, output are map) s
5 533 M
(ped to cell, reset, update\)) s
5 522 M
(*\) Logs for this have been uploaded to testlogs/ showing convergence of gates and state.) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-----------------------------------------------) s
5 478 M
(396. \(FEATURE-DONE\) Recursive Lambda Function Growth + Tensor Neuron \(NTN\) Intrinsic Merit ) s
5 467 M
(- 13 March 2017 - related to 384, 385) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(-----------------------------------------------) s
5 434 M
(*\) This commit rewrites the Recursive Lambda Function Growth implementation by adding a new) s
5 423 M
( lambda function growth) s
5 412 M
(function.) s
5 401 M
(*\) This new function creates a definition graph with Recursive Gloss Overlap algorithm from) s
5 390 M
( a text and computes all pairs shortest paths in the graph) s
5 379 M
(*\) For each such shortest path edges, an AVL lambda function composition balanced tree is g) s
5 368 M
(rown \(i.e every path is a lambda function composition tree\).) s
5 357 M
(*\) Tensor Neuron Lambda Function is computed for each subtree root by following relation ev) s
5 346 M
(aluated on a stack:) s
5 335 M
(                function\(operand1, operand2\)) s
5 324 M
(where operand1, operand2 and function are successively popped from AVL composition tree sta) s
5 313 M
(ck representation) s
5 302 M
(*\) Tensor Neuron triplet \(operand1, function, operand2\) is evaluated presently as maximum W) s
5 291 M
(u-Palmer similarity of Synsets for cartesian product of operand1 and operand2. But it can b) s
5 280 M
(e augmented with any arbitrary weighting scheme. Cartesian product of Synsets for 2 entitie) s
5 269 M
(s is the simplest 2-dimensional tensor neuron.) s
5 258 M
(*\) Sum of tensor neuron weights for all random walks composition tree evaluation is printed) s
5 247 M
( as merit of the text.) s
5 236 M
(*\) Logs for this have been committed to testlogs) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(---------------------------------------------) s
5 192 M
(397. \(FEATURE-DONE\) Korner Entropy Intrinsic Merit for Recursive Gloss Overlap graphs - 14 ) s
5 181 M
(March 2017 - related to 383) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(---------------------------------------------) s
5 148 M
(*\) Implemented  Korner Entropy intrinsic merit for Recursive Gloss Overlap graph.) s
5 137 M
(*\) function korner_entropy\(\) finds maximal independent sets for all vertices and chooses th) s
5 126 M
(e minimum entropy such that a vertex is in a maximal independent set.) s
5 115 M
(*\) Logs for this have been committed to testlogs/) s
5 93 M
(Previous two intrinsic merit measures - tensor neuron network and korner entropy - sufficie) s
5 82 M
(ntly quantify the complexity of a document's inner purport. Neuron Tensors transform the on) s
5 71 M
(tology subgraph of a text into a new kind of multilayered graph perceptron. Infact it gener) s
5 60 M
(alizes traditional multilayered trellis perceptrons for which backpropagation is applied to) s
5 49 M
( find weights per activation edge. There is no known backpropagation algorithm for generic ) s
5 38 M
(graph of perceptrons. Neuron Tensors per word-word edge are equated to a lambda function an) s
5 27 M
(d compositional tree of these neurons for any walk on the text-graph is an alternative deep) s
5 16 M
( learning technique to backpropagation. Korner Entropy is a measure of disconnectedness \(to) s
5 5 M
(tal probability of vertices in independent sets\). Presently all pairs shortest paths is use) s
_R
S
%%Page: (219) 219
%%BeginPageSetup
_S
18 36 translate
/pagenum 219 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (219) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(d in place of random walks - set of all pairwise path tensor neuron lambda compositions is ) s
5 731 M
(an upperbound on set of all random walks.) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(--------------------------------------------) s
5 687 M
(398. \(FEATURE-DONE\) Software Analytics update - 15 March 2017) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(--------------------------------------------) s
5 654 M
(*\) Software Analytics Deep Learning code has been updated to include all Deep Learning impl) s
5 643 M
(ementations: RNN LSTM, RNN GRU, BackPropagation) s
5 632 M
(and ConvolutionNetwork+BackPropagation) s
5 621 M
(*\) logs for this have been committed to software_analytics/testlogs/) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(--------------------------------------------) s
5 577 M
(399. \(USECASE\) NeuronRain Usecases - Software \(Log\) Analytics and VIRGO kernel_analytics co) s
5 566 M
(nfig - 16 March 2017) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(--------------------------------------------) s
5 533 M
(Software Analytics Deep Learning implementation in python-src/software_analytics/ sources i) s
5 522 M
(ts input variables - CPU%, Memory%, TimeDuration% for a process from logs. VIRGO kernel_ana) s
5 511 M
(lytics module reads machine learnt config variables from kernel_analytics.conf and exports ) s
5 500 M
(them kernelwide. An example single layer perceptron usecase is:) s
5 478 M
(        If the CPU% is > 75% and Memory% > 75% and TimeDuration% > 75% then) s
5 467 M
(                do a kernelwide overload signal) s
5 456 M
(        else) s
5 445 M
(                do nothing) s
5 423 M
(Sigmoid function for this usecase is:) s
5 412 M
(        sigma\(4/9 * x1 + 4/9 * x2 + 4/9 * x3\) where x1 = CPU%, x2 = Memory% and x3 = TimeDu) s
5 401 M
(ration%) s
5 390 M
(which is 1 when all variables reach 75%.) s
5 368 M
(Spark Streaming Log Analyzer ETLs htop data to .parquet files and Software Analytics code r) s
5 357 M
(eads it, deep-learns above neural network and writes a key-value variable OverloadSignal=1 ) s
5 346 M
(to VIRGO kernel_analytics.conf. VIRGO kernel_analytics driver reads it and exports a kernel) s
5 335 M
(wide variable kernel_overload=1. Any interested kernel driver takes suitable action based o) s
5 324 M
(n it \(automatic shutdown, reboot, quiesce intensive applications etc.,\)) s
5 302 M
(An inverse of this usecase is to find the weights for x1,x2,x3 when system crashes. This re) s
5 291 M
(quires a gradient descent or backpropagation with multilayered perceptron.) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(--------------------------------------------) s
5 247 M
(400. \(THEORY\) Mechanism Design, Condorcet Jury Theorem, Derandomization, Gibbard-Satterthwa) s
5 236 M
(ite Theorem and Designing a Voting Mechanism) s
5 225 M
(- 27 March 2017 , 30 March 2017, 31 March 2017, 18 April 2017 - related to 368 and all othe) s
5 214 M
(r P\(Good\) circuit related sections) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(--------------------------------------------) s
5 181 M
(Gibbard-Satterthwaite theorem prevents any Social Choice Function defined on atleast 3 elem) s
5 170 M
(ents from being non-dictatorial. Mechanism Design is the reverse game theory which tries to) s
5 159 M
( circumvent this limitation and designs a mechanism for required result for social goodness) s
5 148 M
(. With respect to P\(Good\) series and circuit, design of a voting mechanism for arbitrary nu) s
5 137 M
(mber of voters which overcomes limitation of Gibbard-Satterthwaite Theorem would imply conv) s
5 126 M
(ergence of P\(Good\) series. This is related to exact learning of boolean social choice funct) s
5 115 M
(ions with zero-error in 368.6. Open question: Does exact learning of a voter decision funct) s
5 104 M
(ion imply a voting mechanism design?) s
5 82 M
(A simple example of strategic/tactical voting and Gibbard-Satterthwaite theorem is given in) s
5 71 M
( http://rangevoting.org/IncentToExagg.html. Here by changing the ranking preferences \(i.e v) s
5 60 M
(oter switch loyalties by manipulation, tactical and strategic voting, bribery, bounded rati) s
5 49 M
(onality and erroneous decision etc.,\) result of an election with atleast 3 candidates can b) s
5 38 M
(e changed. Thus majority voting is vulnerable to error. Gibbard-Satterthwaite Theorem appli) s
5 27 M
(es to all voting systems including secret ballot because even discreet voter can be psychol) s
5 16 M
(ogically influenced to change stance against inherent desire.) s
_R
S
%%Page: (220) 220
%%BeginPageSetup
_S
18 36 translate
/pagenum 220 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (220) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(This implies for more than 3 candidates, RHS of P\(Good\) series for majority voting can neve) s
5 731 M
(r converge because there is always a non-zero error either by bounded rationality or manipu) s
5 720 M
(lation. By pigeonhole principle either some or all of voters contributing to the P\(Good\) su) s
5 709 M
(mmation must have decided incorrectly or manipulated with non-zero probability. But this re) s
5 698 M
(quires voter decision function \(i.e social choice function\) to be non-boolean \(Candidates a) s
5 687 M
(re indexed as 0,1,2,...\). Exact learning of boolean functions applies to only 2 candidates ) s
5 676 M
(setting where candidates are indexed as 0 and 1. Also, LHS of P\(Good\) series which is a \(or) s
5 665 M
( quite close to a dictatorship by Friedgut-Kalai-Nisan quantitative version of Gibbard-Satt) s
5 654 M
(erthwaite theorem\) dictatorship social choice function, would be strategyproof \(resilient t) s
5 643 M
(o error and manipulative voting\) and thus may have greater goodness probability \(which is a) s
5 632 M
( conditional probability on chosen one's goodness\) than RHS in more than 3 candidates setti) s
5 621 M
(ng.) s
5 599 M
(Condorcet Jury Theorem mentioned in references below, is exactly the P\(Good\) binomial serie) s
5 588 M
(s summation and has been studied in political science and social choice theory. This theore) s
5 577 M
(m implies majority decision is better and its goodness probability tends to 1 than individu) s
5 566 M
(al decision if probability of correct decision making for each voter is > 0.5. In the oppos) s
5 555 M
(ite case majority decision goodness worsens if individual decision goodness probability is ) s
5 544 M
(< 0.5. Thus majority voting is both good and bad depending on individual voter decision cor) s
5 533 M
(rectness. In terms of BP* complexity definitions, if each voter has a BP* social choice fun) s
5 522 M
(ction \(boolean or non-boolean\) with p > 0.5, accuracy of majority voting tends to 100% corr) s
5 511 M
(ectness i.e Composition Majn\(BPX1, BPX2,...\) for some complexity class BPXi for each voter ) s
5 500 M
(implying derandomization \(this also implies BPX=X if Majn\(BPX1,BPX2,...\) composition is in ) s
5 489 M
(BPX\). Proof of BPP != P would imply there is atleast one voter with p < 0.5. Condorcet theo) s
5 478 M
(rem ignores dependency and unequal error scenarios but still holds good by central limit th) s
5 467 M
(eorem \(because each voter decision is a random variable +1 or -1 and sum of these random va) s
5 456 M
(riables for all voters tends to gaussian by CLT\) and law of large numbers.) s
5 434 M
(Corollary: From 129 and 368, depth of Majority voting circuit composition can be unbounded ) s
5 423 M
(and if all voter social choice functions have same number of variables and number of voters) s
5 412 M
( is exponential in number of variables, Majority voting circuit composition with error is i) s
5 401 M
(n BPEXP than PH. By Condorcet Jury Theorem, if all voters tending to infinity decide correc) s
5 390 M
(tly with probability > 0.5, then BPEXP derandomizes to EXP => BPEXP=EXP. Non-boolean social) s
5 379 M
( choice functions for more than 2 candidates are usually preference profiles per voter \(lis) s
5 368 M
(t of ranked candidates per voter\) and topranked candidate is voted for by the voter.) s
5 346 M
(If Majority Voting Circuit is in BPP, which is quite possible if number of voters is polyno) s
5 335 M
(mial in number of variables and circuit is of polynomial size and because from Adleman's Th) s
5 324 M
(eorem \(and Bennet-Gill Theorem\), BPP is in P/poly, BPP derandomizes to P for infinite elect) s
5 313 M
(orate with decision correctness probability > 0.5 for all voters. Thus homogeneous electora) s
5 302 M
(te of high decision correctness \(> 0.5\) implies both BPEXP=EXP and P=BPP.) s
5 280 M
(Locality Sensitive Hashing accumulates similar voters in a bucket chain. The social choice ) s
5 269 M
(function is the distance function. Circuit/Algorithm for Multiway contest social choice \(ge) s
5 258 M
(neralization of Majority boolean function\) is:) s
5 247 M
(        *\) Locality Sensitive Hashing \(LSH\) for clustering similar voters who vote for same) s
5 236 M
( candidate) s
5 225 M
(        *\) Sorting the LSH and find the maximum size cluster \(bucket chain\)) s
5 203 M
(References:) s
5 192 M
(-----------) s
5 181 M
(400.1 Mechanism Design, Convicting Innocent, Arrow and GibbardSatterthwaite Theorems - http) s
5 170 M
(s://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-254-game-theory-with-) s
5 159 M
(engineering-applications-spring-2010/lecture-notes/MIT6_254S10_lec21.pdf) s
5 148 M
(400.2 Electoral Fraud, Gibbard-Satterthwaite Theorem and its recent extensions on manipulat) s
5 137 M
(ive and strategic voting, Cake cutting Multi Agent Resource Allocation Protocols - https://) s
5 126 M
(www.illc.uva.nl/COMSOC/theses/phd-schend.pdf) s
5 115 M
(400.3 Most important point of this document \(which I was searching for 11 years\) - Condorce) s
5 104 M
(t Jury Theorem in Political Science - http://www.stat.berkeley.edu/~mossel/teach/SocialChoi) s
5 93 M
(ceNetworks10/ScribeAug31.pdf - Asymptotic closed form and convergence of P\(Good\) binomial s) s
5 82 M
(ummation when probability of good decision  > 0.5 uniformly for all voters was already solv) s
5 71 M
(ed by Condorcet 2 centuries ago :) s
5 60 M
(         "... Condorcet\342\\200\\231s Jury theorem applies to the following hypothetical situat) s
5 49 M
(ion: suppose that there is some decision to be made between two alternatives + or \342\\210\\222) s
5 38 M
(. Assume that one of the two decisions is \342\\200\\230correct,\342\\200\\231 but we do not know whi) s
5 27 M
(ch. Further, suppose there are n individuals in a population, and the population as a whole) s
5 16 M
( needs to come to a decision. One reasonable method is a majority vote. So, each individual) s
5 5 M
( has a vote Xi , taking the value either +1 or \342\\210\\2221 in accordance with his or her opi) s
_R
S
%%Page: (221) 221
%%BeginPageSetup
_S
18 36 translate
/pagenum 221 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (221) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(nion, and then the group decision is either + or \342\\210\\222 depending on whether Sn = Pn i=1) s
5 731 M
( Xi is positive or negative.  Theorem 1.1. \(Condorcet\342\\200\\231s Theorem\) [4] If the individ) s
5 720 M
(ual votes Xi , i = 1, . . . , n are independent of one another, and each voter makes the co) s
5 709 M
(rrect decision with probability p > 1 2 , then as n \342\\206\\222 \342\\210\\236, the probability of) s
5 698 M
( the group coming to a correct decision by majority vote tends to 1. ...") s
5 687 M
(400.4 Strategic Voting and Mechanism Design - [VinayakTripathi] - https://www.princeton.edu) s
5 676 M
(/~smorris/pdfs/PhD/Tripathi.pdf) s
5 665 M
(400.5 Condorcet Jury Theorem and OCR - Section 2 - http://math.unipa.it/~grim/Jlamlouisa.PD) s
5 654 M
(F) s
5 643 M
(400.6 Condorcet Jury Theorem graph plots - http://www.statisticalconsultants.co.nz/blog/con) s
5 632 M
(dorcets-jury-theorem.html) s
5 621 M
(400.7 Probabilistic Aspects of Voting - Course Notes - www.maths.bath.ac.uk/~ak257/talks/Uu) s
5 610 M
(gnaa.pdf - Condorcet Jury Theorem, Bertrand Ballots Theorem and Gibbard Random Dictatorship) s
5 599 M
( Theorem) s
5 588 M
(400.8 Law of Large Numbers and Weighted Majority - [Olle Haggstrom, Gil Kalai, Elchanan Mos) s
5 577 M
(sel] - https://arxiv.org/abs/math/0406509v1 ) s
5 566 M
(400.9 Thirteen Theorems in search of truth - http://www.socsci.uci.edu/~bgrofman/69%20Grofm) s
5 555 M
(an-Owen-Feld-13%20theorems%20in%20search%20of%20truth.pdf - Condorcet Jury Theorem for Hete) s
5 544 M
(rogeneous voters \(voters with unequal decision correctness probability - Poisson-binomial d) s
5 533 M
(istribution\) - same as Condorcet Jury Theorem for Homogeneous voters \(voters with equal dec) s
5 522 M
(ision correctness probability\) when correctness probabilities are a Gaussian and > 0.5. In ) s
5 511 M
(other words, large majority is more correct than small majority.) s
5 500 M
(400.10 Margulis-Russo Formula and Condorcet Jury Theorem - http://www.cs.tau.ac.il/~amnon/C) s
5 489 M
(lasses/2016-PRG/Analysis-Of-Boolean-Functions.pdf - pages 224-225 - Majority function is de) s
5 478 M
(fined in Erdos-Renyi Random graph model with each edge having probability p. Maj\(N,G\) for a) s
5 467 M
( random graph G with probability of edge being p = True of G has atleast N/2 = |V|*\(|V| - 1) s
5 456 M
(\)/4 edges. Majority voting can be defined as a random graph with each voter being an edge w) s
5 445 M
(ith decision correctness probability p i.e Probability of Existence of an edge increases wi) s
5 434 M
(th correctness of decision by voter. Margulis-Russo formula describes the sharp threshold p) s
5 423 M
(henomenon for boolean functions and rate of change of P\(Maj\(G\)\)=1 with respect to p, specif) s
5 412 M
(ically for majority boolean function. Thus it is an alternative spectacle to view P\(Good\) m) s
5 401 M
(ajority voting binomial coefficient summation and Condorcet Jury Theorem. For majority func) s
5 390 M
(tion, sharp threshold occurs at p >= 0.5.) s
5 379 M
(400.11 Percolation, Sharp Threshold in Majority, Condorcet Jury Theorem and later results, ) s
5 368 M
(Influence, Pivotality - http://www.cs.tau.ac.il/~safra/PapersAndTalks/muligil.old.pdf) s
5 357 M
(400.12 Complexity Inclusion Graph - https://www.math.ucdavis.edu/~greg/zoology/diagram.xml ) s
5 346 M
(- BPEXP=EXP implies a significant collapse of the complexity class separation edges.) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(---------------------------------------------) s
5 302 M
(401. \(FEATURE-DONE\) LSH Index implementation for NeuronRain AsFer Text and Crawled Web Docu) s
5 291 M
(ments Intrinsic Merit Ranking - 4 April 2017) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(---------------------------------------------) s
5 258 M
(*\) This commit adds a Locality Sensitive Hashing based inverted index for scrapy crawled HT) s
5 247 M
(ML website pages.) s
5 236 M
(*\) It is a derivative of LSH based similarity clustering implemented in python-src/Locality) s
5 225 M
(SensitiveHashing.py) s
5 214 M
(*\) It has to be mentioned here that ThoughtNet is also an inverted index for documents with) s
5 203 M
( additional features \(i.e it is) s
5 192 M
(classifier based than raw string similarity\)) s
5 181 M
(*\) LSHIndex uses Redis Distributed Key Value Persistent Store as hashtable backend to store) s
5 170 M
( index.) s
5 159 M
(*\) LSHIndex is not string to text inverted index, but hashed string to text inverted index ) s
5 148 M
(\(something like a digital fingerprint\)) s
5 137 M
(*\) Presently two types of hashes exist: primitive ordinal and MD5 hash) s
5 126 M
(*\) Only one hash table is implemented on Redis with multiple hash functions with random cho) s
5 115 M
(ice.) s
5 104 M
(*\) Presently 50 hash functions with 50 entries hash index has been implemented.) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(--------------------------------------------------) s
5 60 M
(402. \(FEATURE-DONE\) ThoughNet Index implementation for NeuronRain AsFer Text and Crawled We) s
5 49 M
(b Documents Intrinsic Merit Ranking - 4 April 2017) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(--------------------------------------------------) s
5 16 M
(*\) This commit implements an inverted index on top of ThoughtNet) s
5 5 M
(*\) ThoughtNet is a hypergraph stored in file and on Neo4j Graph Database) s
_R
S
%%Page: (222) 222
%%BeginPageSetup
_S
18 36 translate
/pagenum 222 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (222) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(*\) JSON loads ThoughtNet edges and hypergraph files and queries by classes returned by Recu) s
5 731 M
(rsive Gloss Overlap classifier) s
5 720 M
(*\) Querying Neo4j is also better, but file representation of ThoughtNet is quite succinct a) s
5 709 M
(nd scalable because it just numerically) s
5 698 M
(encodes each edge \(= a web crawled HTML document\)) s
5 687 M
(*\) file representation of ThoughtNet views the hypergraph as stack vertices interconnected ) s
5 676 M
(by document id\(s\) similar to a source code) s
5 665 M
(versioning system. Having similar view on a graph database doesn't look straightforward) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(--------------) s
5 621 M
(403. \(FEATURE-DONE\) Initial commits for Indexless Hyperball Recursive Web Crawler - 7 April) s
5 610 M
( 2017) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(--------------) s
5 577 M
(*\) An indexless crawler which tries to find a url matching a query string in a recursive cr) s
5 566 M
(awl creating a hyperball of certain radius) s
5 555 M
(*\) This is similar to Stanley Milgram, Kleinberg Lattice Small World Experiments and recent) s
5 544 M
( Hyperball algorithm for Facebook graph which) s
5 533 M
(concluded that Facebook has 3.74 degrees of freedom.) s
5 522 M
(*\) Starts with a random url on world wide web.) s
5 511 M
(*\) Success probability depends on average number of hops over large number of queries.) s
5 500 M
(*\) This is a Randomized Monte Carlo Crawler and does a Depth First Search from an epicentre) s
5 489 M
( pivot url to start with) s
5 478 M
(*\) Hyperball References:) s
5 467 M
(        1\) http://webgraph.di.unimi.it/docs/it/unimi/dsi/webgraph/algo/HyperBall.html) s
5 456 M
(        2\) Facebook Hyperball - https://arxiv.org/pdf/1308.2144.pdf) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(-----------------------------------) s
5 412 M
(404. \(THEORY\) Indexless Web Search, World Wide Web Graph Property Testing, On-demand Indexi) s
5 401 M
(ng - related to 403 - 9 April 2017) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(-----------------------------------) s
5 368 M
(Almost all known web search engines rely on a pre-built index created from already crawled ) s
5 357 M
(WWW graph. Is a pre-built index necessary for) s
5 346 M
(web search? Can the small world property of world wide web graph \(i.e property of graph suc) s
5 335 M
(h that easy short paths exist between any pairs) s
5 324 M
(of vertices as proved in Stanley Milgram experiment, Kleinberg Lattice\), be applied to find) s
5 313 M
( a url matching a search query starting from any) s
5 302 M
(vertex? Facebook graph has almost a billion user vertices and on an average any person is c) s
5 291 M
(onnected to any other within 3.74 path lengths.) s
5 280 M
(Can this be generalized to world wide web? Traditional book index maps word queries to page) s
5 269 M
(s having the words. If entire book is translated) s
5 258 M
(into a huge definition graph by Recursive Gloss Overlap graph, then instead of looking-up i) s
5 247 M
(ndex, starting at a random word vertex, any other) s
5 236 M
(word should be easily reachable if graph has small world property. This realworld problem i) s
5 225 M
(s already studied as Graph Property Testing which are algorithms to test if a graph has spe) s
5 214 M
(cific property\(clique, colorability, edge and vertex queries etc.,\). Hyperball indexless cr) s
5 203 M
(awler in NeuronRain AsFer is an effort in this line of thought. Such an indexless crawler c) s
5 192 M
(an "learn" an index online by repeated queries and build an index from cached results at ru) s
5 181 M
(ntime. Index is not prebuilt but grown ondemand. Assuming internet has such small world deg) s
5 170 M
(rees of freedom upperbounded by a constant, any query is constant time serviceable in avera) s
5 159 M
(ge case complexity.) s
5 137 M
(References:) s
5 126 M
(-----------) s
5 115 M
(404.1 Small World Property - [WattsStrogatz] -http://www.nature.com/nature/journal/v393/n66) s
5 104 M
(84/full/393440a0.html) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(-----------------------------------) s
5 60 M
(405. \(FEATURE-DONE\) Commit - NeuronRain AsFer-CPython Extensions VIRGO64 system call invoca) s
5 49 M
(tions - 20 April 2017) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(-----------------------------------) s
5 16 M
(*\) VIRGO64 system calls are invoked from Python code by CPython extensions.) s
5 5 M
(*\) Separate folder cpython_extensions64/ has been created for 64bit VIRGO kernel) s
_R
S
%%Page: (223) 223
%%BeginPageSetup
_S
18 36 translate
/pagenum 223 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (223) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(*\) Requires Python 64-bit version) s
5 731 M
(*\) Logs for VIRGO64 memory and filesystem systemcalls-to-drivers have been committed to tes) s
5 720 M
(tlogs) s
5 709 M
(*\) With this Complete Application Layer-SystemCalls-Drivers request routing for python appl) s
5 698 M
(ications deployed on VIRGO64 works.) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(---------------------------------------) s
5 654 M
(406. \(FEATURE-DONE\) Commits - NeuronRain AsFer Boost C++-Python - VIRGO64 System calls + Dr) s
5 643 M
(ivers invocation - 26 April 2017) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(---------------------------------------) s
5 610 M
(*\) VIRGO64 system calls are invoked from C++ by Boost::Python extensions) s
5 599 M
(*\) Kernel Logs for VIRGO KMemCache, Clone and FileSystem Calls Boost::python invocations ha) s
5 588 M
(ve been committed to testlogs/) s
5 577 M
(*\) Boost version used is 1.64.0) s
5 566 M
(*\) setup.py has been updated with library_dirs config variable) s
5 555 M
(*\) virgofstest.txt for filesystem calls has been committed to testlogs/) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(---------------------------------------------) s
5 511 M
(407. \(FEATURE-DONE\) Commits - 28 April 2017 - NeuronRain AsFer-Boost::Python-C++ - VIRGO64 ) s
5 500 M
(systemcalls and drivers invocations) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(---------------------------------------------) s
5 467 M
(*\) VIRGO64 clone, kmemcache and filesystem system calls were invoked from Python-C++ boost ) s
5 456 M
(extensions again and reproducibly work) s
5 445 M
(without kernel panics.) s
5 434 M
(*\) Logs, persisted disk file written by filesystem system calls and rebuilt boost-python C+) s
5 423 M
(+ extensions have been committed to testlogs/) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(---------------------------------) s
5 379 M
(408. \(THEORY\) Condorcet Jury Theorem, Collaborative Filtering, Epistemological Democracy, N) s
5 368 M
(etwork Voting in WWW Link Graph,) s
5 357 M
(Majority Function and Correctness of Majority Vote Ranking - 16 May 2017, 23 May 2017) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(---------------------------------) s
5 324 M
(Let v1, v2 be two vertices being good and bad choices respectively. In link graph all incom) s
5 313 M
(ing edges to a vertex v1 are) s
5 302 M
(votes for that vertex. From Condorcet Jury Theorem if all incoming links occur with probabi) s
5 291 M
(lity p > 0.5, then probability that v1 is chosen tends to 1 for large indegree. For 2 candi) s
5 280 M
(dates c1, c2 and voters v1, v2, v3, ... vn, edges \(votes\) to c1 occur with probability p an) s
5 269 M
(d edges\(votes\) to v2 occur with probability 1-p. Thus voting graph is a random bipartite gr) s
5 258 M
(aph and can be generalized to multiple candidates. Candidates Vertex set C={c1, c2, ...,cn}) s
5 247 M
( can have more than one indegree and zero outdegree. Voters Vertex set V={v1, v2, ..., vn} ) s
5 236 M
(can have only one outdegree and zero indegree. If C intersection V != emptyset, then graph ) s
5 225 M
(is general directed graph and can have cycles. Each voter vertex vy either votes to some ot) s
5 214 M
(her vertex vx or receives vote from vx. vy votes for vx with probability p. vy votes for ve) s
5 203 M
(rtices other than vx with cumulative probability 1-p. Vertices voted by vy are ranked by go) s
5 192 M
(odness \(i.e goodness\(vx\) > goodness\(others\)\). If vy votes for vx then vy decides with decis) s
5 181 M
(ion correctness probability p.) s
5 159 M
(More generically, vertex vx receives votes from vertices vy2,vy2,vy3,...,vyn with decision ) s
5 148 M
(correctness probability p. Vertices vy1,vy2,vy3,...,vyn vote for vertices other than vx wit) s
5 137 M
(h decision correctness probability 1-p. Each vertex in WWW link graph has this 2 level tree) s
5 126 M
( structure with varying probability pi. From Condorcet Jury Theorem, hyperlinks to vx from ) s
5 115 M
(vy1,vy2,...,vyn  are 100% correct group decision if p > 0.5. Equal p for all votes to a ver) s
5 104 M
(tex is the homogeneous voter assumption of Condorcet Jury Theorem. If the vertices are rank) s
5 93 M
(ed by some algorithm \(HITS Hub-Authority, PageRank etc.,\) then correctness of rank is measu) s
5 82 M
(red by Condorcet Jury Theorem. It is apt to mention here that probability p is different fr) s
5 71 M
(om weights of directed graph edges in PageRank Markov Random Walk iteration \(where weight o) s
5 60 M
(f outgoing edge/vote is decided by the ratio 1/outdegree\) in the sense that: 1/outdegree is) s
5 49 M
( the static percentage of vote to an adjacent vertex in a non-random graph while p in netwo) s
5 38 M
(rk voting is a dynamic measure for decision correctness of a vote to a vertex in a random g) s
5 27 M
(raph. For heterogeneous voter assumption, more recent theorems which generalize Condorcet J) s
5 16 M
(ury Theorem are required.) s
_R
S
%%Page: (224) 224
%%BeginPageSetup
_S
18 36 translate
/pagenum 224 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (224) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Collaborative Filtering in Recommender Systems is the most generalized way of Majority Voti) s
5 731 M
(ng where a matrix of users to their preferences for items is used as a training data for a ) s
5 720 M
(new user to recommend an item. For example, if 9 out of 10 users up vote an item, 11th user) s
5 709 M
( is recommended that item and viceversa for down votes. Above analysis is an alternative di) s
5 698 M
(rection for defining value judgement correctness already discussed in references 408.1 and ) s
5 687 M
(408.2. Correlated Votes and their effects on Condorcet Jury Theorem are analyzed by [Krishn) s
5 676 M
(aLadha].) s
5 654 M
(References:) s
5 643 M
(----------) s
5 632 M
(408.1 Condorcet Jury Theorem and the truth on the web - http://voxpublica.no/2017/03/condor) s
5 621 M
(cets-jury-theorem-and-the-truth-on-the-web) s
5 610 M
(408.2 Webometrics, Goodness of PageRank and Condorcet Jury Theorem - [MastertonOlssonAngere) s
5 599 M
(] - https://link.springer.com/article/10.1007/s11192-016-1837-1 - PageRank is very good in ) s
5 588 M
(finding truth i.e it is close to objective judgement with certain empirical assumptions des) s
5 577 M
(pite being subjective ranking measure. Here objective judgement is any value judgement whic) s
5 566 M
(h is not majority voting or subjective. Computational linguistic text graph analysis which ) s
5 555 M
(reckons the psychological aspects of text comprehension is an objective intrinsic merit jud) s
5 544 M
(gement. Ideally majority vote should coincide with objective judgement absence of which imp) s
5 533 M
(lies error in voting or objective judgement or both \(family of BP* complexity classes\).) s
5 522 M
(408.3 Generalized Condorcet Jury Theorem, Free Speech, Correlated Voting \(dependence of vot) s
5 511 M
(ers\) - https://www.jstor.org/stable/2111584) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(-----------------------------) s
5 467 M
(409. \(FEATURE-DONE\) Commits - 17 May 2017 - NeuronRain AsFer-VIRGO64 Boost-C++-Python invoc) s
5 456 M
(ations) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(-----------------------------) s
5 423 M
(*\) Boost Python C++ VIRGO64 system calls were tested repeatedly in a loop) s
5 412 M
(*\) All three system call subsystems - virgo_clone, virgo_kmemcache, virgo_filesystem - work) s
5 401 M
( well without any kernel panics) s
5 390 M
(*\) But a strange thing was observed: virgo filesystem system calls were not appending to di) s
5 379 M
(sk file but when run as) s
5 368 M
("strace -f python asferpythonextensions.py" disk file is written to \(a coincidence or strac) s
5 357 M
(e doing something special\)) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(--------------------------------) s
5 313 M
(410. \(THEORY\) Objective and Subjective Value Judgement, Text Ranking and Condorcet Jury The) s
5 302 M
(orem - 29 May 2017 and 4 June 2017 - Related to 202, 384, 385 and all Recursive Lambda Func) s
5 291 M
(tion Growth and Recursive Gloss Overlap algorithms sections in this document) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(--------------------------------) s
5 258 M
(Objective merit or Intrinsic merit of a document is the measure of meaningfulness or inform) s
5 247 M
(ation contained in a document. Subjective merit is how the document is perceived - Reality ) s
5 236 M
(Versus Perception - Both should ideally coincide but do not.) s
5 214 M
(Following are few real-world examples in addition to academic credentials example in 202:) s
5 203 M
(*\) Soccer player, Cricket player or a Tennis player is measured intrinsically by number of ) s
5 192 M
(goals scored, number of runs/wickets or number of grandslams won respectively and not subje) s
5 181 M
(ctively by extent of votes or fan following to them \(incoming edges\). Here reality and perc) s
5 170 M
(eption coincide often and an intrinsically best player by records is also most revered. Any) s
5 159 M
( deviation is because of human prejudice. Here intrinsic merit precedes social prestige.) s
5 148 M
(*\) Merits of students are judged by examinations \(question-answering\) and not by majority v) s
5 137 M
(oting by faculty. Thus question-answering or interview is an algorithm to measure intrinsic) s
5 126 M
( merit objectively. Here again best student in terms of marks or grades is also the most fa) s
5 115 M
(voured. Any deviation is human prejudice. Interview of a document is how relevant it is to ) s
5 104 M
(a query measured by graph edit distance between recursive gloss overlap graphs of query and) s
5 93 M
( text. Here also intrinsic merit precedes social prestige.) s
5 71 M
(Present ranking algorithms are mostly majority voting \(perception\) oriented which is just h) s
5 60 M
(alf truth. Other half is the reality and there are no known algorithms to objectively judge) s
5 49 M
( documents.  Recursive Lambda Function Growth algorithm and its specialization Recursive Gl) s
5 38 M
(oss Overlap graph are objective intrinsic merit algorithms filling this void and try to map) s
5 27 M
( above real-life examples to text document ranking.) s
5 5 M
(But how to measure "number of goals etc.," of a document vis-a-vis the rest? This is where ) s
_R
S
%%Page: (225) 225
%%BeginPageSetup
_S
18 36 translate
/pagenum 225 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (225) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Computational Linguistic Text-to-Graph analysis fits in. Graph representation of a document) s
5 731 M
( with various quantitative and qualitative graph complexity measures differentiates and gra) s
5 720 M
(des the texts by intrinsic complexity. This combines two fields: Computational Linguistics ) s
5 709 M
(which is founded on Psychoanalysis and Graph Theory. Former pertains to mental picture crea) s
5 698 M
(ted by reading a document and latter is how complex that picture is. Recursive Lambda Funct) s
5 687 M
(ion Growth envisages an ImageNet which is a graph of related images of entities to create a) s
5 676 M
(n animated movie representation of a text stored as a subgraph of ImageNet. ImageNet \(picto) s
5 665 M
(rial WordNet\) is not yet available.) s
5 643 M
(Condorcet Jury Theorem formalizes above intuition and bridges two worlds - objective realit) s
5 632 M
(y and subjective perception. A best performing student by objective examination/interview a) s
5 621 M
(ssessment is also the most voted by infinite faculty if correctness of decision > 0.5 for a) s
5 610 M
(ll faculty voters i.e. Objective Intrinsic Merit = Subjective Perception based Majority Vot) s
5 599 M
(ing Merit.) s
5 577 M
(Crucial Observation is: Merit creates Centrality \(Social prestige\) and not the opposite - P) s
5 566 M
(restige can not create merit but can only be a measure of merit. Otherwise this is an anach) s
5 555 M
(ronism - merit does not exist yet but prestige exists and thus prestige preceding merit.) s
5 533 M
(Alternatively, interview of document is simply the rank of the document in terms of intrins) s
5 522 M
(ic graph complexity merit of it versus the rest of the text documents. Thus there are 2 asp) s
5 511 M
(ects of interview:) s
5 500 M
(*\) Ranking text document by intrinsic graph complexity/entropy merit) s
5 489 M
(*\) Relevance of the text to a query - graph edit distance) s
5 467 M
(Here again another question can be raised: Why is a graph representation of text an apt obj) s
5 456 M
(ective intrinsic merit measure? Because, by "Circuits of Mind" and "Mind grows circuits/lam) s
5 445 M
(bda functions" theories \(cited in previous sections\), biological neurons are connected as a) s
5 434 M
( graph and information from sensory perception is transmitted through these neurons. Thresh) s
5 423 M
(old TC circuits theoretically formalize neural networks. Better neuroimaging techniques for) s
5 412 M
( quantifying the potentials created in brain by cerebral representation of a text could be ) s
5 401 M
(ideal relevance measures and can be substituted in Tensor Neuron Model of Recursive Lambda ) s
5 390 M
(Function Growth algorithm.) s
5 368 M
(There is special case of intrinsic merit: For example, reading a story creates a mental pic) s
5 357 M
(ture of it as a graph of events. Objectively judging it could vary from one human to the ot) s
5 346 M
(her making it subjective. But still the absolute objective merit can be defined for such a ) s
5 335 M
(special case by applying EventNet to this problem - whole set of events are laid out as eve) s
5 324 M
(nts with partakers with cause-effect edges amongst them.) s
5 302 M
(References:) s
5 291 M
(-----------) s
5 280 M
(410.1 The Meaning of Meaning - http://courses.media.mit.edu/2004spring/mas966/Ogden%20Richa) s
5 269 M
(rds%201923.pdf) s
5 258 M
(410.2 WordNet and Word2Vec - https://yaledatascience.github.io/2017/03/17/nnnlp.html - In w) s
5 247 M
(ord2vec words from text are represented in a vector space and contextually related words ar) s
5 236 M
(e close enough in proximity on vector space. Word2Vec is a recent neural network model of w) s
5 225 M
(ord relations similar to Neural Tensor Network \(NTN\). NTN defines a relation between two wo) s
5 214 M
(rds as a tensor neuron and thus complete WordNet can be defined as a graph with Tensor Neur) s
5 203 M
(on as edge potentials. This is the motivation for invoking Neural Tensor WordNet as an obje) s
5 192 M
(ctive intrinsic merit indicator as it approximates human brain neurological text comprehens) s
5 181 M
(ion and visualization.) s
5 170 M
(410.3 Random Walks on WordNet - http://anthology.aclweb.org/N/N15/N15-1165.pdf - Recursive ) s
5 159 M
(Lambda Function Growth algorithm does something similar to this. It finds all random walks ) s
5 148 M
(on Recursive Gloss Overlap graph \(described in 385\) and constructs a lambda function compos) s
5 137 M
(ition tree for each such walk and assigns a Neural Tensor Potential to each edge of these t) s
5 126 M
(rees.) s
5 115 M
(410.4 ImageNet - Pictorial WordNet - http://www.image-net.org/ - image net is recently avai) s
5 104 M
(lable. In the context of Recursive Lambda Function Growth, lambda functions inferred from I) s
5 93 M
(mageNet than WordNet/ConceptNet are pictures and composition of the lambda functions transl) s
5 82 M
(ates to animating the pictures based on PoS or tensor relation. For example the composition) s
5 71 M
( for "It rained heavily today", rained\(It, heavily\(today\)\), should theoretically compose/su) s
5 60 M
(perpose/animate images for day, heaviness, rain from leaves to root of the tree. ) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(----------------------------------------) s
5 16 M
(411. \(FEATURE-DONE\) AngularJS - Tornado GUI-REST WebService - Commits - 1 June 2017) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (226) 226
%%BeginPageSetup
_S
18 36 translate
/pagenum 226 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (226) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(---------------------------------------- ) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(------------------------) s
5 709 M
(NeuronRain AngularJS RESTful client for Tornado webserver and others) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(------------------------) s
5 676 M
(*\) AngularJS support has been added to NeuronRain GUI-WebServer with a new webserver_rest_u) s
5 665 M
(i/NeuronRain_AngularJS_REST_WebServer.py which reads) s
5 654 M
(and renders angularjs Model-View-Controller templates) s
5 643 M
(*\) New AngularJS Model, View and Controller script-html templates have been added to angula) s
5 632 M
(rjs directory) s
5 621 M
(*\) LSHIndex.py has been updated to have commandline arguments for index queries) s
5 610 M
(*\) Hyperball Crawler pivot epicentre url has been changed and an example query "Chennai" wa) s
5 599 M
(s found to be matching within few hops.) s
5 588 M
(*\) NeuronRain_REST_WebServer.py has been updated to print the logs for the script execution) s
5 577 M
( to browser console with subprocess POpen\(\) , communicate\(\) and poll\(\) python facilities) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-------------------------------) s
5 533 M
(412. \(THEORY\) Graph Neural Networks, Tensor Neurons and Recursive Lambda Function Growth In) s
5 522 M
(trinsic Merit - 4 June 2017 and) s
5 511 M
(8 June 2017 - related to 410) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-------------------------------) s
5 478 M
(Definition Recursive Gloss Overlap Graph with word-word edges as Neuron Tensor Network rela) s
5 467 M
(tions having potentials was defined previously. Recursive Lambda Function Growth computes a) s
5 456 M
(ll random walks of the definition graph and creates a lambda function composition tree for ) s
5 445 M
(each such random walk. For each subtree f of the recursive lambda function growth with chil) s
5 434 M
(dren w1 and w2 composed potential for f is defined as:) s
5 423 M
(        p\(f\(w1,w2\)\) = p\(w1\) * p\(w2\) for some operator *) s
5 401 M
(Rather than mere summation of potentials of edges following minmax criterion extracts the m) s
5 390 M
(ost meaningful random walk:) s
5 379 M
(*\) Minimum Neuron Tensor Potential edge of each random walk is found - path minimum potenti) s
5 368 M
(al) s
5 357 M
(*\) Maximum of all minimum path potentials extracts a random walk lambda composition tree wh) s
5 346 M
(ich is the most probable inferred meaning of the document - Max\(Min\(potentials\)\) - this mak) s
5 335 M
(es sense because maximum of minimum potential implies minimum possible neural activation.) s
5 313 M
(Event Related Potentials \(ERP\) mentioned in 202 are unusual spikes in EEG of brain \(N400 da) s
5 302 M
(taset\) when unrelated words are read. Complement of ERP for related words as dataset could ) s
5 291 M
(be an ideal estimator for Neuron Tensor relatedness potential between two words in definiti) s
5 280 M
(on graph.) s
5 258 M
(Graph Neural Networks are recent models of neural network which generalize to a graph. In a) s
5 247 M
( Graph Neural Network, potential of each vertex is a function of potentials of all adjacent) s
5 236 M
( vertices and neuron tensor potentials of incoming edges from them. Neuron Tensor Network e) s
5 225 M
(dge relations for each word vertices pair of Recursive Gloss Overlap Graph can be mapped to) s
5 214 M
( edges of a Graph Neural Network. Thus a text is mapped to not just a graph but to a Graph ) s
5 203 M
(Neural Network with Tensor Neuron Edges, an ideal choice for human text comprehension simul) s
5 192 M
(ation. Recursive Gloss Overlap Graph with Neuron Tensor word-word edges combines two concep) s
5 181 M
(ts into one - Graph Tensor Neuron Network \(GTNN\).) s
5 159 M
(Data on websites can be classified into 3 categories: 1\) text 2\) voice 3\) images and videos) s
5 148 M
(. Intrinsic merit which is a measure of creativity presently focuses only on text. Analyzin) s
5 137 M
(g the intrinsic merit of voice and visuals is a separate field in itself - Fourier Analysis) s
5 126 M
( of Waveforms and Discrete Fourier Transforms.) s
5 104 M
(Ranking text by Graph Tensor Neuron Network intrinsic merit potential can be done in multip) s
5 93 M
(le ways:) s
5 82 M
(- Rank Vertices and Edges by potential) s
5 71 M
(- Rank the random walk lambda function composition tree by potential) s
5 60 M
(- Rank by Korner Entropy of the Graph Tensor Neuron Network and other qualitative and quant) s
5 49 M
(itative graph complexity metrics.) s
5 38 M
(and so on.) s
5 16 M
(Example lambda composition tree on a random walk of recursive gloss overlap graph:) s
5 5 M
(        f1 = requiredby\(fuel, flight\)) s
_R
S
%%Page: (227) 227
%%BeginPageSetup
_S
18 36 translate
/pagenum 227 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (227) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        f2 = has\(flight, tyre\)) s
5 731 M
(        f3 = has\(tyre, wheel\)) s
5 720 M
(        f4 = does\(wheel, landing\)) s
5 709 M
(        f5 = requires\(landing, gear\)) s
5 698 M
(        f1\(fuel, f2\(flight, f3\(tyre, f4\(wheel, f5\(landing, gear\)\)\)\)\)) s
5 676 M
(Previous example random walk lambda composition tree has been constructed in 384 and 385. P) s
5 665 M
(otentials for Tensor Neuron Relations have to be predetermined by a dataset if such exists ) s
5 654 M
(similar to N400 EEG dataset. Tensor Neuron Relations in Recursive Gloss Overlap Definition ) s
5 643 M
(Graph are grammatical connectives mostly. In this example, "requiredby" is a relation. Cumu) s
5 632 M
(lative potential of each such random walk lambda composition tree has to be computed.) s
5 610 M
(Difference in Graph Tensor Neuron Network mapping of a text is: Each lambda composition tre) s
5 599 M
(e is evaluated as a Graph Neural Network - each subtree is evaluated and passed on to highe) s
5 588 M
(r level - and potential at the root is returned as the merit. Mixing time in markov chain a) s
5 577 M
(ndom walk is the number of steps before stationary distribution is attained. Thus maximum p) s
5 566 M
(otential returned at the root of \(a lambda composition graph tensor neuron network of \(any ) s
5 555 M
(converging stationary random walk of \(a recursive gloss overlap definition graph of \(a text) s
5 544 M
(\)\)\)\) is a measure of intrinsic merit.) s
5 522 M
(Intuition for Graph Tensor Neuron Network is below:) s
5 511 M
(*\) Random walk on recursive gloss overlap graph simulates randomness in cognitive cerebral ) s
5 500 M
(text comprehension.) s
5 489 M
(*\) Tensor Neuron relatedness potential between two word vertices in definition graph quanti) s
5 478 M
(fies relevance and meaningfulness) s
5 467 M
(*\) Lambda composition tree-graph neural network for each random walk on definition graph si) s
5 456 M
(mulates how meaning is recursively understood bottom-up with randomness involved.) s
5 423 M
(References:) s
5 412 M
(-----------) s
5 401 M
(412.1 Graph Neural Networks -  http://repository.hkbu.edu.hk/cgi/viewcontent.cgi?article=10) s
5 390 M
(00&context=vprd_ja) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(--------------------------------------------------) s
5 346 M
(413. \(FEATURE-DONE\) Recursive Lambda Function Growth - Graph Tensor Neuron Network Implemen) s
5 335 M
(tation - Commits - 9 June 2017) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(--------------------------------------------------) s
5 302 M
(\(*\) Recursive Lambda Function Growth implementation has been updated to compute Graph Tenso) s
5 291 M
(r Neuron Network intrinsic merit) s
5 280 M
(\(*\) Each lambda function composition tree of a random walk on recursive gloss overlap graph) s
5 269 M
( is evaluated as a Graph Neural Network having Tensor Neuron potentials for word-word edges) s
5 258 M
(.) s
5 247 M
(\(*\) Tensor neuron potential for relation edges in Graph Neural Network has been hardcoded a) s
5 236 M
(t present and requires a dataset for grammatical) s
5 225 M
(connective relations similar to EEG dataset for brain spikes in electric potentials.) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(-----------------------------------) s
5 181 M
(414. \(FEATURE-DONE\) Graph Tensor Neuron Network - implementation update - Commits - 10 June) s
5 170 M
( 2017) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(-----------------------------------) s
5 137 M
(*\) Changed the subtree graph tensor neuron network computation) s
5 115 M
(*\) Children of each subtree are the Tensor Neuron inputs to the subtree root) s
5 104 M
(Each subtree is evaluated as a graph neural network with weights for) s
5 93 M
(each neural input to the subtree root.) s
5 71 M
(*\) WordNet similarity is computed between each child and subtree root and is presently assu) s
5 60 M
(med as Tensor Neuron) s
5 49 M
(relation potential for the lack of better metric to measure word-word EEG potential.) s
5 38 M
(If a dataset for tensor neuron potential is available, it has to to be looked-up and numeri) s
5 27 M
(c) s
5 16 M
(potential has to be returned from here.) s
_R
S
%%Page: (228) 228
%%BeginPageSetup
_S
18 36 translate
/pagenum 228 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (228) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(*\) Finally a neuron activation function \(simple 1-dimensional tensor\) is computed and retur) s
5 731 M
(ned to the subtree root for next level.) s
5 709 M
(*\) logs for the this have been committed to testlogs. Presently graph tensor neuron network) s
5 698 M
( intrinsic merit is a very small decimal) s
5 687 M
(because of the decimal values of similarity and tensor neurons, but quite receptive to smal) s
5 676 M
(l changes.) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(-----------------------------------------) s
5 632 M
(415. \(FEATURE-DONE\) Script for Querying Index \(LSH and ThoughtNet\) and Ranking the results ) s
5 621 M
(with Recursive Lambda Function Growth) s
5 610 M
(- Commits - 13 June 2017) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-----------------------------------------) s
5 577 M
(*\) New python script QueryIndexAndRank.py has been committed for retrieving results from In) s
5 566 M
(dex matching a query and rank them) s
5 555 M
(*\) It queries both Locality Sensitive Hashing and ThoughtNet indices) s
5 544 M
(*\) Functions of classes have been parametrized for invocation across modules) s
5 533 M
(*\) Both LSH and ThoughtNet indices have been recreated) s
5 522 M
(*\) Ranking is done by Recursive Lambda Function Growth algorithm which is a superset of Rec) s
5 511 M
(ursive Gloss Overlap) s
5 500 M
(*\) This script was tested via NeuronRain Tornado RESTful GUI) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(------------------------------------------) s
5 456 M
(416. \(FEATURE-DONE\) Graph Tensor Neuron Network Intrinsic Merit and QueryIndexAndRank updat) s
5 445 M
(e - Commits - 15 June 2017) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(------------------------------------------) s
5 412 M
(*\) Graph Tensor Neuron Network Intrinsic Merit computation has been changed - Intrinsic mer) s
5 401 M
(its of all random walks are summed up than multiplying to get a tangible merit value) s
5 390 M
(*\) Some bugs fixed and debug prints have been changed) s
5 379 M
(*\) logs have been committed to testlogs/) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(----------------------------------------) s
5 335 M
(417. \(FEATURE-DONE\) Hyperball crawler update - Commits - 19 June 2017) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(----------------------------------------) s
5 302 M
(Integrated Recursive Lambda Function Growth Intrinsic Merit Score\(Graph Tensor Neuron Netwo) s
5 291 M
(rk and Korner Entropy\)  into Hyperball crawler.) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(---------------------------------------) s
5 247 M
(418. \(THEORY\) Thought Experiment of Generic Intrinsic Merit and Condorcet Jury Theorem - 21) s
5 236 M
( June 2017) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(---------------------------------------) s
5 203 M
(Intrinsic merit so far is restricted to text documents. Subjective ranking measures are lik) s
5 192 M
(e mirrors which reflect the real merit of the) s
5 181 M
(candidate. Each vote in the majority voting is similar to an image of the votee projected o) s
5 170 M
(n to the voter mirror. Some mirrors reflect well) s
5 159 M
(while others don't. Efficiency of a voter mirror is equivalent to decision correctness of a) s
5 148 M
( voter. Present web ranking algorithms measure votee by the perception mirror images, which) s
5 137 M
( is indirect. Intrinsic merit breaks mirror images and relies only on what the votee really) s
5 126 M
( is. But then isn't intrinisic merit a mirror image too? It is not because no human percept) s
5 115 M
(ion or image based voting is involved to ascertain merit. Only the graph complexity of the ) s
5 104 M
(text-graph and its graph neural network is sufficient. Merit is a universal requirement. Ex) s
5 93 M
(amples in 410 and 202 motivate it. Can merit be applied to entities beyond voice, visuals a) s
5 82 M
(nd text? Most probably yes. Intelligence of human beings are ranked by intelligence quotien) s
5 71 M
(ts which is also an intrinsic merit measure \(though IQ tests are disputed by psychological ) s
5 60 M
(studies\). Hence judging people by intrinsic merit is beyond just IQ scores. An algorithm to) s
5 49 M
( classify people as "Good" and "Bad" could be a breakthrough in machine intelligence. Hypot) s
5 38 M
(hetical people classifier could be as below:) s
5 27 M
(\(*\) Peruse academic records and translate to score) s
5 16 M
(\(*\) Peruse work records and translate to score) s
5 5 M
(\(*\) Translate awards received to score) s
_R
S
%%Page: (229) 229
%%BeginPageSetup
_S
18 36 translate
/pagenum 229 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (229) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\(*\) Translate brain imageing data to score \(EEG and fMRI\)) s
5 731 M
(\(*\) Translate IQ or EQ to score) s
5 720 M
(Above is not a formal algorithm but tries to intuit how it may look like. Human Resource An) s
5 709 M
(alytics are done as above) s
5 687 M
(Objective Intrinsic Merit = Vote by an algorithm) s
5 676 M
(Subjective Ranking = Votes by people translated into rank by an algorithm \(present ranking ) s
5 665 M
(algorithms rely on incoming links or votes to a text which are created by human beings\)) s
5 643 M
(Thus Generic Intrinsic Merit removes human element completely while assessing merit \(closer) s
5 632 M
( to AI\).Goodness when it applies to human beings is not just a record based score and usual) s
5 621 M
(ly has moral and ethical elements in it. People classifier based on intrinsic merit has to ) s
5 610 M
(be intrusive and invasive similar to HR analytics example earlier.) s
5 588 M
(\(*\)Question: Why should intrinsic merit be judged only in this way?) s
5 577 M
(\(*\)Answer: This is not the only possible objective intrinsic merit judgement. There could b) s
5 566 M
(e other ways too. Disclaimer is intrinsic merit assumes cerebral representation of sensory ) s
5 555 M
(reception \(words, texts, visuals, voices etc.,\) and its complexity to be the closest to ide) s
5 544 M
(al judgement.) s
5 522 M
(\(*\)Question: Wouldn't cerebral representation vary from person to person and thus be subjec) s
5 511 M
(tive?) s
5 500 M
(\(*\)Answer: Yes, but there are standardized event related potential datasets gathered from m) s
5 489 M
(ultiple neuroscience experiments on human subjects. Such ERP data are similar for most brai) s
5 478 M
(ns. Variation in potential occurs because cerebral cortex and its sulci&gyri vary from pers) s
5 467 M
(on to person. It has been found that cortex and complexity of gray matter determine intelli) s
5 456 M
(gence and grasping ability. Intrinsic merit should therefore be based on best brain potenti) s
5 445 M
(al data.) s
5 423 M
(\(*\)Question: Isn't perception based ranking enough? Why is such an intrusive objective meri) s
5 412 M
(t required?) s
5 401 M
(\(*\)Answer: Yes and No. Perception majority voting based ranking is accurate only if  all vo) s
5 390 M
(ters have decision correctness probability > 0.5 from Condorcet Jury Theorem. PageRank work) s
5 379 M
(s well in most cases because incoming edges vote mostly with >50% correctness. This correct) s
5 368 M
(ness is accumulated by a Markov Chain Random Walk recursively - vote from a good vertex to ) s
5 357 M
(another vertex implies voted vertex is good \(Bonacich Power Centrality\) and so on. Initial ) s
5 346 M
(goodness is based on weight of an edge. Markov iteration stabilizes the goodness. Probabili) s
5 335 M
(ty that goodness of stationary Markov distribution < 0.5 can be obtained by a tail bound an) s
5 324 M
(d should be exponentially meagre.) s
5 302 M
(It was mentioned earlier that Fourier analysis of visuals and voice is the measure of intri) s
5 291 M
(nsic merit. Following definition of generic intrinsic merit further strengthens it:) s
5 280 M
(Generic intrinsic merit of an entity - text, visual or voice - is the complexity of cerebra) s
5 269 M
(l representation potential as received by sensory perception.  For texts it is the graph co) s
5 258 M
(mplexity measure. For voice and visuals it could ERPs activated on seeing or hearing and ba) s
5 247 M
(sed on EEG data.) s
5 225 M
(References:) s
5 214 M
(-----------) s
5 203 M
(418.1 Event Related Potentials for attractive facial recognition - https://labs.la.utexas.e) s
5 192 M
(du/langloislab/research/event-related-potential-erp/418.2 Event Related Potentials - http:/) s
5 181 M
(/cognitrn.psych.indiana.edu/busey/eegseminar/pdfs/Event-Related%2520PotentialsIntro.pdf - E) s
5 170 M
(RPs are cortical potentials of interoperating neurons in response to a cognitive stimulus.) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(---------------------------------------------------) s
5 126 M
(419. \(THEORY\) Goodness of Link Graph Majority Voting and Complex Plane representation of me) s
5 115 M
(rit - 22 June 2017 and 23 June 2017 - related to 418) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(---------------------------------------------------) s
5 82 M
(Following is an example link graph in world wide web with weights for each edge:) s
5 71 M
(        y1 - x1 : 0.25) s
5 60 M
(        y1 - x2 : 0.25) s
5 49 M
(        y1 - x3 : 0.25) s
5 38 M
(        y1 - x4 : 0.25) s
5 27 M
(implying y1 votes to x1,x2,x3,x4 with weight 0.25 each.) s
5 5 M
(Following is the corresponding initial decision correctness \(goodness\) graph with goodness ) s
_R
S
%%Page: (230) 230
%%BeginPageSetup
_S
18 36 translate
/pagenum 230 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (230) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(for each edge:) s
5 731 M
(        y1 - x1 : 0.25) s
5 720 M
(        y1 - x2 : 0.25) s
5 709 M
(        y1 - x3 : 0.375) s
5 698 M
(        y1 - x4 : 0.125) s
5 687 M
(implying y1 votes to x1 with correctness 0.25, x2 with correctness 0.25, x3 with correctnes) s
5 676 M
(s 0.375 and x4 with correctness 0.125.) s
5 654 M
(Markov iteration on the decision correctness graph \(similar to random walk on link graph\) t) s
5 643 M
(ends to a stationary distribution after certain number of random walks. Cumulative goodness) s
5 632 M
( of voter v1 is defined as:) s
5 621 M
(        summation\(weight\(edge\) * goodness\(edge\)\)) s
5 610 M
(For previous example cumulative goodness of voter y1 is:) s
5 599 M
(        0.25*0.25 + 0.375*0.25 + 0.25*0.25 + 0.25*0.25 =) s
5 588 M
(        1/32 + 3/32 + 2/32 + 2/32 = 0.25) s
5 566 M
(If all votes are 100% correctly decided by y1, correctness graph has 1 for all edge weights) s
5 555 M
(. Thus cumulative goodness of y1 is:) s
5 544 M
(        0.25 * 1 + 0.25 * 1 + 0.25 * 1 + 0.25 * 1 = 1 = 100%) s
5 533 M
(After markov iteration attains stationary distribution, cumulative goodness of all vertices) s
5 522 M
( also becomes stationary. Atleast one incoming vertex y voting to another vertex x having c) s
5 511 M
(umulative goodness < 0.5 at the end of markov iteration implies group decision is a failure) s
5 500 M
( and does not concur with the real merit of a vertex x.) s
5 478 M
(Following are the votes received by a vertex x1 from voters y1,y2,y3,y4 having respective c) s
5 467 M
(umulative goodness:) s
5 456 M
(        y1 - x1: 0.75) s
5 445 M
(        y2 - x1: 0.3 \(voter with cumulative goodness < 0.5\)) s
5 434 M
(        y3 - x1: 0.8) s
5 423 M
(        y4 - x1: 0.9) s
5 401 M
(What is the probability in average case that atleast one voting vertex has cumulative goodn) s
5 390 M
(ess < 0.5? Link graph voting is different from normal voting - it is peer to peer and each ) s
5 379 M
(voter apportions vote to the neighbouring candidates - single voter can vote multiple candi) s
5 368 M
(dates simultaneously.) s
5 346 M
(Pr[atleast one adjacent vertex y to a candidate vertex x has cumulative goodness < 0.5 afte) s
5 335 M
(r markov iteration] = 1 - Pr[goodness > 0.5]) s
5 313 M
(From Markov inequality tail bound, Pr[cumulative goodness > 0.5] <= mean/0.5) s
5 302 M
(Pr[cumulative goodness < 0.5] = 1 - Pr[goodness > 0.5] >= 1 - mean/0.5) s
5 291 M
(where mean is the average cumulative goodness of all vertices in link graph.) s
5 269 M
(When mean is 0.5 \(uniform distribution\), Pr[cumulative goodness < 0.5] >= 1 - 0.5/0.5 = 0) s
5 258 M
(For any other values of mean < 0.5, Pr[atleast one adjacent vertex y to a candidate vertex ) s
5 247 M
(x has cumulative goodness < 0.5 after markov iteration] = 1 - mean/0.5 is always greater th) s
5 236 M
(an zero.) s
5 214 M
(In discrete random variable case, if goodness takes n discrete values between 0 and 1 then,) s
5 203 M
( mean = summation\(x*p\(x\)\) where p\(x\) = 1/n is:) s
5 192 M
(        n\(n+1\)/2*n*n = 0.5 + 0.5/n which tends to 0.5 when n tends to infinity.) s
5 181 M
(Thus mean cumulative goodness is 0.5 in uniform distribution.) s
5 159 M
(Objective and Subjective rankings can be represented on a complex plane with following nota) s
5 148 M
(tion:) s
5 137 M
(        \(intrinsic merit=m\) + i\(perception=p\) = m + ip) s
5 126 M
(where p is a function of m. Any text,visual or voice can be plotted on complex plane in pre) s
5 115 M
(vious notation. Ideally m should be equal to p. This creates a special case when m is fixed) s
5 104 M
( and p varies for an entity which usually happens with perception based majority voting. Su) s
5 93 M
(ch set of complex numbers with fixed merit and varying perception can be thought of as zero) s
5 82 M
(s of a complex valued function. Famous special case is Riemann Zeta Function with merit=0.5) s
5 71 M
( and varying perception imaginary parts.) s
5 49 M
(Riemann Hypothesis if true implies Re=0.5 for non trivial zeros of Riemann Zeta Function. I) s
5 38 M
(f a set of complex number rankings as described previously have Re=0.5 or fixed real part a) s
5 27 M
(nd varying imaginary parts equalling non trivial zeros of Riemann Zeta Function, then the r) s
5 16 M
(ankings show pattern in prime numbers an unusual connection.) s
_R
S
%%Page: (231) 231
%%BeginPageSetup
_S
18 36 translate
/pagenum 231 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (231) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Any k-coloring of a sequence of text and audio-visuals\(AVs\) denoted by integers is a classi) s
5 731 M
(fier. 2-coloring or complementation is a special case of such a classifier. Conversely, any) s
5 720 M
( classifier is a coloring scheme for sequence of text and audio-visuals\(AVs\). For example f) s
5 709 M
(ollowing bit pattern is a 2-coloring/complement function - 0 and 1 are colors and f and g a) s
5 698 M
(re complement functions illustrated as dotted indentations:) s
5 687 M
(        1111000011110000111000011100011111100000) s
5 665 M
(        ----    ----    ---    ---   ------             function f:) s
5 654 M
(           .....    ----   ----   ---      -----        complement g:) s
5 632 M
(Vapnik-Chervonenkis Shattering or VC Shattering is defined as:) s
5 621 M
(Let H be a set of sets and C be a set. C is shattered by H if H intersection C = powerset o) s
5 610 M
(f C = 2^C. Intuitively, H classifies C with labels from the set H. Largest cardinality of C) s
5 599 M
( shattered by H is the VC dimension.) s
5 577 M
(2-coloring/complementation is a classifier on real line or integer sequences. 2 colors/bina) s
5 566 M
(ry encodings/complementations create a set H of size equal to powerset of real line of inte) s
5 555 M
(ger sequence. Largest cardinality of real line or integer sequence that can be shattered by) s
5 544 M
( H \( H intersection C = 2^C\) is infinite. Thus 2-color/complementation classifier of infini) s
5 533 M
(te stream of sequences has VC Dimension Infinity.) s
5 511 M
(References:) s
5 500 M
(-----------) s
5 489 M
(419.1 Probability and Statistics with Reliability, Queuing and Computer Science Application) s
5 478 M
(s - Pages 223-225 - [Kishor Shridharbhai Trivedi-Duke University]) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(---------------------------------------------------) s
5 434 M
(420. \(THEORY\) Human Resource Analytics, Interview Algorithm and Intrinsic Merit - related t) s
5 423 M
(o 314, 359 and 365 - 26 June 2017 and 27 June 2017) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(---------------------------------------------------) s
5 390 M
(Stability of Interview TQBF circuit which is the theoretical formalism of Interview Algorit) s
5 379 M
(hm Intrinsic Merit has been analyzed earlier as opposed to stability of Majority Voting. Ex) s
5 368 M
(tending the notion of merit from WWW to humans is the most obvious consequence. Usual inter) s
5 357 M
(view procedure in industry is to screen resumes, shortlist them and interview for few round) s
5 346 M
(s and make an offer. Does this tradition measure merit flawlessly? No. Error in interview a) s
5 335 M
(nd its stability has been analyzed in 359 and 365. Is there a way to circumvent this error ) s
5 324 M
(and remove human element completely? Error in interview process applies to examination syst) s
5 313 M
(em in academics too. Real-life interviews and examinations have duration of few hours and r) s
5 302 M
(ely on question-answering. Can few hours measure years of accrued merit? This question is r) s
5 291 M
(educed to sampling problem. If merit is a scatter-plot of feature vector points on a metric) s
5 280 M
( space V of n-dimensions, a sample is a set of subspaces S which approximate V. Contraction) s
5 269 M
( Mapping \(and Banach Fixed Point Theorem\) maps a space to a subspace and there is always a ) s
5 258 M
(unique fixed point in this map \(f\(x\)=x for some x in V\). An intrinsic merit analyzer can be) s
5 247 M
( thought of as a contraction map on the metric space of merit feature vectors of an individ) s
5 236 M
(ual. This contraction map must create a sample subspace in such a way that all merit featur) s
5 225 M
(e vectors are near-perfectly measured. This involves 2 difficult problems:) s
5 214 M
(\(*\) Construct a complete merit metric feature vector space for an individual based on past ) s
5 203 M
(records\( work and academic \).) s
5 192 M
(\(*\) Construct a contraction map\(s\) which contracts this merit vector space into a sample su) s
5 181 M
(bspace. This contraction map is then translated into an interview TQBF function. Objective ) s
5 170 M
(Question-Answers \(multiple choice\) are relatively easy to construct and evaluate than descr) s
5 159 M
(iptive, subjective question-answers.) s
5 137 M
(Real life interviews typically have following usecase \(e.g IT industry\) - a slightly modifi) s
5 126 M
(ed version of previous TQBF construction:) s
5 115 M
(\(*\) suitability for a requirement) s
5 104 M
(\(*\) technical discussions \(question-answering on programming/projects etc.,\)) s
5 93 M
(\(*\) experience) s
5 71 M
(Intrinsic Merit of Collection of Humans are measured in economics literature by many indice) s
5 60 M
(s like GDP,Human Development Index\(HDI\),Inequality adjusted HDI,Gender Inequality Index,Pur) s
5 49 M
(chasing Power Parity\(PPP\) etc.,Human Development Index defined as geometric mean of standar) s
5 38 M
(d of life,income,education indices is used to rank countries by their development.Intrinsic) s
5 27 M
( Merit of sportspersons are measured by Intrinsic Performance Rating\(IPR\) measures e.g Elo ) s
5 16 M
(rating in Chess is used to rank players. Translating the previous example, one possible IPR) s
5 5 M
( for interview is the following adapted from HDI \(not necessarily perfect\):) s
_R
S
%%Page: (232) 232
%%BeginPageSetup
_S
18 36 translate
/pagenum 232 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (232) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        IPR\(candidate\)=geometric_mean\(IPR\(interview\)*IPR\(education\)*IPR\(experience\)\)) s
5 720 M
(From 359 and 365, NoiseSensitivity\(InterviewTQBF\) which is the dual of Stability is defined) s
5 709 M
( as:) s
5 698 M
(        NoiseSensitivity\(InterviewTQBF\) = 0.5-0.5*Stability\(InterviewTQBF\) = 0.5-0.5*a^2*n^) s
5 687 M
(2/4) s
5 665 M
(Error in interview is equal to NoiseSensitivity of interview TQBF. What is the probability ) s
5 654 M
(of interview process failing? By Markov tail bound:) s
5 643 M
(        Pr[Error in interview process > e ] <= mean/e where mean is the average error or No) s
5 632 M
(iseSensitivity of interview. Therefore:) s
5 621 M
(        Pr[Error in interview process > e ] <= NoiseSensitivity\(InterviewTQBF\)/e) s
5 599 M
(While suitability can be easiliy quantified for error and interview TQBF having previous er) s
5 588 M
(ror bound, experience is a new variable in real-life HR analytics. Experience of a candidat) s
5 577 M
(e is total duration in industry \(academics,private initiatives inclusive\). Experience itsel) s
5 566 M
(f is indirectly caused by past interviews. For example, a person having 30 years experience) s
5 555 M
( from 10 companies was meritorious in past 10 interviews and it is counterintuitive if 11th) s
5 544 M
( finds no merit \(this contradiction makes objective merit subjective and in a sense this is) s
5 533 M
( also an error in interview process - a flawed TQBF\). Thus experience is a function of meri) s
5 522 M
(t and gradually makes future interviews redundant - an example below:) s
5 511 M
(        Experience = f\(number of job/academic/private hops, intrinsic merit at each previou) s
5 500 M
(s hop, experience per hop\)) s
5 478 M
(Interview algorithm being a TQBF satisfiability problem is PSPACE-complete \(=IP=AP\). There ) s
5 467 M
(are existing question-answering systems like IBM watson \(answer-questioning\) which beat hum) s
5 456 M
(ans in Jeopardy with least error, a contest like Turing test, Question-Answering using Word) s
5 445 M
(Net as Word Sense Disambiguator and older expert-system based Q&A software. But there does ) s
5 434 M
(not seem to exist a theoretical decision tree parallel for QBF similar to boolean decision ) s
5 423 M
(trees except DPLL evaluations. An error in interview QBF can also be formalised as a Lambda) s
5 412 M
(-Tolerant Randomized Decision Tree having access to pseudorandom bits and making errors wit) s
5 401 M
(h an upperbound while evaluating decision tree.) s
5 379 M
(TQBF formulation of question-answering is far stringent than traditional interviews. Existe) s
5 368 M
(ntial and Universal quantifiers simulate "there exists an answer or a counter-question for ) s
5 357 M
(all questions" instead of "there exists an answer for a question". In proving lowerbounds f) s
5 346 M
(or games like Chess, Go etc., TQBF is evaluated as game-tree \(alpha-beta pruning\) - "for al) s
5 335 M
(l moves there exists a countermove" where each level choices in the tree alternate between ) s
5 324 M
(2 opponents for bounded \(polynomial\) or unbounded \(exponential\) number of rounds.) s
5 302 M
(Intrinsic merit metric space of feature vector points can be construed as a Hypergraph with) s
5 291 M
( feature vector points as vertices and edges spanning multiple of these points which are re) s
5 280 M
(lated as edges. Hypergraph edge connects more than two vertices. Transversal or Hitting Set) s
5 269 M
( of a Hypergraph is the subset  S of the vertices X which have non-empty intersection with ) s
5 258 M
(all hyperedges. Transversal graph is a subgraph of this hypergraph consisting of all possib) s
5 247 M
(le minimal transversals\(a minimal transversal has no other traversals as subsets\). Transver) s
5 236 M
(sal graph is a "summary" of the larger graph and thus is a Contraction Map which creates a ) s
5 225 M
(gist of the merit metric space.) s
5 203 M
(Similar notion of transversal hypergraph can be applied to Recursive Gloss Overlap Definiti) s
5 192 M
(on Graph too \(considering it as a hypergraph\), for text summarization - subset of word vert) s
5 181 M
(ices which intersect all hyperedges. Hypergraph Transversal Problem is known to be in co-NP) s
5 170 M
(.) s
5 148 M
(Like usual text documents, candidate resumes can be represented as either a Recursive Gloss) s
5 137 M
( Overlap graph or a ThoughtNet hypergraph:) s
5 126 M
(*\) Graph: Resume text is mapped to a graph by Recursive Gloss Overlap algorithm. Core numbe) s
5 115 M
(r based classifier brings out the best in the graph - candidate experience domains in resum) s
5 104 M
(e that are closely related) s
5 93 M
(*\) Hypergraph: Resumes are stored in ThoughtNet as Hypergraph index. Querying results in si) s
5 82 M
(milar resumes. ThoughtNet internally invokes Recursive Gloss Overlap core number classifier) s
5 71 M
(.) s
5 49 M
(References:) s
5 38 M
(-----------) s
5 27 M
(420.1 P,NP and examinations - https://terrytao.wordpress.com/2009/08/01/pnp-relativisation-) s
5 16 M
(and-multiple-choice-exams/) s
5 5 M
(420.2 Shrink Map and Contraction Map - [Topology - James Munkres] - pages 181-182) s
_R
S
%%Page: (233) 233
%%BeginPageSetup
_S
18 36 translate
/pagenum 233 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (233) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(420.3 Banach Fixed Point Theorem - https://en.wikipedia.org/wiki/Banach_fixed-point_theorem) s
5 731 M
(420.4 Davis-Putnam-Logemann-Loveland \(DPLL\) decision tree solver algorithm for QBF - http:/) s
5 720 M
(/personalpages.manchester.ac.uk/student/joshua.dawes/notes/qbf.pdf) s
5 709 M
(420.5 Parallel algorithm for Hypergraph Transversals - https://people.mpi-inf.mpg.de/~elbas) s
5 698 M
(sio/pub/COCOON05.pdf) s
5 687 M
(420.6 Efficient algorithm for Hypergraph Transversals - http://jgaa.info/accepted/2005/Kavv) s
5 676 M
(adiasStavropoulos2005.9.2.pdf) s
5 665 M
(420.7 Compendium of Intrinsic Performance Ratings in Chess - https://www.cse.buffalo.edu/~r) s
5 654 M
(egan/papers/pdf/Reg12IPRs.pdf) s
5 643 M
(420.8 Human Development Index \(New\) - https://poseidon01.ssrn.com/delivery.php?ID=615100008) s
5 632 M
(0070240871090821120680310680020590930930310100950700060671251210721040180990580270960580510) s
5 621 M
(4001108810200309401212401410805806205507607012408807109710112307006505908512501211901808007) s
5 610 M
(2084029012007002119065081015116009119108104075076102112012027&EXT=pdf) s
5 599 M
(420.9 Social Progress Index - https://www.socialprogressindex.com/assets/downloads/resource) s
5 588 M
(s/en/English-2017-Social-Progress-Index-Methodology-Report_embargo-until-June-21-2017.pdf -) s
5 577 M
( Comprehensive ranking of countries based on multitude of social indicators \(Basic Needs, W) s
5 566 M
(ellbeing, Opportunities\)) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(--------------------) s
5 522 M
(421. \(FEATURE-DONE\) Text Summarization from Recursive Gloss Overlap Graph Core - Commits - ) s
5 511 M
(28 June 2017) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(--------------------) s
5 478 M
(\(*\) Added a new function to create a summary from text - This function creates the core of ) s
5 467 M
(a Recursive Gloss Overlap graph) s
5 456 M
(with certain core number and writes out a text sentence for each edge in core subgraph obta) s
5 445 M
(ining least common ancestor\(hypernym\) relation) s
5 434 M
(\(*\) logs for this have been committed to python-src/testlogs) s
5 412 M
(Summarization from k-core\(s\) of a Recursive Gloss Overlap graph captures the most crucial a) s
5 401 M
(reas of the text because document belongs to the class/word vertex with high core numbers.) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(---------------------------) s
5 357 M
(422. \(FEATURE-DONE\) Text Summarization from Recursive Gloss Overlap Graph Core - Commits - ) s
5 346 M
(30 June 2017) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(---------------------------) s
5 313 M
(\(*\) New clause added to classify the text and match the prominent core number word vertices) s
5 302 M
( in the text and only add those sentences to summary.) s
5 291 M
(\(*\) This is an alternative to k-core subgraph traversal and creating text programmatically.) s
5 280 M
( It is based on the heuristic that a summary should) s
5 269 M
(capture the essence/classes the text belongs to.) s
5 258 M
(\(*\) Prominent core number classes are shaved off from the sorted core number list returned ) s
5 247 M
(by RGO classifier and top percentile is used. Summary is limited in size relative to the or) s
5 236 M
(iginal text.) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(----------------------------------------) s
5 192 M
(423. \(THEORY\) Dense Subgraph Problem and Mining patterns in Graph Representation of Text - ) s
5 181 M
(2 July 2017) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(----------------------------------------) s
5 148 M
(Recursive Gloss Overlap and Recursive Lambda Function Growth algorithms create graphs from ) s
5 137 M
(text documents. Unsupervised classification from) s
5 126 M
(prominent vertices of the definition graph and Text summarization at present depend on find) s
5 115 M
(ing k-core subgraphs. In general this is an NP hard) s
5 104 M
(problem to find Dense Subgraphs of a Graph where density of a subgraph S of a graph G is de) s
5 93 M
(fined as:) s
5 82 M
(        d\(S\) = |Edges of S| / |Vertices of S|) s
5 71 M
(There are polynomial time maxflow based algorithms and approximations to find dense subgrap) s
5 60 M
(hs of a graph. ) s
5 38 M
(References:) s
5 27 M
(----------) s
5 16 M
(423.1 Goldberg Algorithm, Charikar Algorithm and k-Cliques Densest Subgraph Algorithm for D) s
5 5 M
(ense Subgraph Discovery - people.seas.harvard.edu/~babis/dsd.pdf) s
_R
S
%%Page: (234) 234
%%BeginPageSetup
_S
18 36 translate
/pagenum 234 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (234) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(--------------------------------) s
5 709 M
(424. \(THEORY\) Pseudorandom non-majority choice and Bounded Electorate Majority Choice - 3 J) s
5 698 M
(uly 2017 - related to 53.7) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(--------------------------------) s
5 665 M
(Bounded Electorate Majority Choice:) s
5 654 M
(-----------------------------------) s
5 643 M
(Odd Electorate with 3 voters is the minimum possible majority voting setting which vouchsaf) s
5 632 M
(es a clear winner. This is a composition \(both formula and circuit\) of NC majority voting f) s
5 621 M
(unction with Voter SATs. This composition can be written as a unified formula by substituti) s
5 610 M
(ng the voter SAT formulas in formula for Majority function which has formula of size O\(n^5.) s
5 599 M
(3\). This combined formula can be converted to a 3-CNF by Tseitin transformation. This speci) s
5 588 M
(fic 3 voter example is NP-complete. Similar substitution for infinite electorate majority c) s
5 577 M
(ould be undecidable.) s
5 555 M
(Pseudorandom Non-majority Choice:) s
5 544 M
(--------------------------------) s
5 533 M
(Majority social choice has only one level of error probability i.e goodness for each voter ) s
5 522 M
(while Non-majority pseudorandom social choice invoking a PRG has 2 levels of probabilities ) s
5 511 M
(- 1\) Probability of choosing a voter SAT at random 2\) Goodness probability of chosen voter ) s
5 500 M
(SAT and thus conditional.) s
5 478 M
(Let number of voter decision functions with goodness xi = m\(xi\). Total number of voters N =) s
5 467 M
( m\(x1\)+m\(x2\)+m\(x3\)+...+m\(xn\)) s
5 456 M
(Effective goodness of a PRG choice is the mean:) s
5 445 M
(        1/N * summation\(xi*m\(xi\)\) = \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\) + ... + xn*m\(xn\)\) / N) s
5 434 M
(When all voter functions have goodness 1 then PRG choice has effective goodness 1.) s
5 412 M
(Probability of choosing a voter of Goodness xi = m\(xi\)/N) s
5 401 M
(Conditional goodness probability of a PRG chosen voter SAT =) s
5 390 M
(Pr[choosing voter SAT of goodness xi] * Pr[goodness of SAT] = [m\(xi\)/N]*xi) s
5 368 M
(When m\(xi\)*xi/N = 1, Goodness of PRG choice is 1. This can happen only if m\(xi\)*xi = N => m) s
5 357 M
(\(xi\) = N and xi = 1 i.e all voters have equal goodness 1 because smaller values of xi requi) s
5 346 M
(re m\(xi\) > N , a contradiction. This is a BPP/BPNC/RNC/RP algorithm despite the goodness be) s
5 335 M
(ing 1 because Pseudorandom bits have to be created by a PRG.) s
5 324 M
(--------------------------------) s
5 313 M
(When goodness is 1 for both LHS PRG choice and RHS Bounded Electorate Majority Choice, PRG ) s
5 302 M
(choice is a BPP/BPNC/RNC/RP algorithm to NP-complete Majority Choice for finite voters => N) s
5 291 M
(P is in BPP/BPNC/RNC/RP. But BPP is in P/poly. Therefore NP is in P/poly if NP is in BPP. F) s
5 280 M
(rom Karp-Lipton theorem if NP is in P/poly, PH collapses to Sigma\(p,2\) and NP in P/poly imp) s
5 269 M
(lies AM=MA by [Arvind, Vikraman; K\303\266bler, Johannes; Sch\303\266ning, Uwe; Schuler, Rainer \(1995\)]) s
5 258 M
(. This independently leads to a similar bound mentioned earlier for Percolation Boolean Vot) s
5 247 M
(er Functions for Non-majority social choice which have 100% Noise stability \(LHS is a P/pol) s
5 236 M
(y percolation circuit with 100% goodness while RHS is NP-complete finite electorate\).) s
5 214 M
(NP in P/poly also implies PH is in P/poly. It is not known if this implies PH-complete prob) s
5 203 M
(lems exist \(because PH collapsing to second level causes every k-QBFSAT problem in PH to re) s
5 192 M
(duce to 2-QBFSAT sigma\(p,2\) and thus PH-hardness is proved\).) s
5 170 M
(PH-completeness proof outline:) s
5 159 M
(------------------------------) s
5 148 M
(If NP is in BPP, NP is in P/poly because BPP is in P/poly.) s
5 137 M
(=> If NP is in P/poly, PH is in Sigma\(p,2\) from Karp-Lipton-Sipser Collapse Theorem) s
5 126 M
(=> If NP is in P/poly, PH collapses to P/poly) s
5 115 M
(=> There are complete problems in each level k of the Polynomial Hierarchy\(correspond to a ) s
5 104 M
(k-depth QBFSAT\).) s
5 93 M
(=> There is a complete problem in Sigma\(p,2\) corresponding to 2-QBFSAT.) s
5 82 M
(=> All problems in Sigma\(p,2\) can be reduced to this Sigma\(p,2\)-complete 2-QBFSAT problem.) s
5 71 M
(=> All problems in PH collapse to Sigma\(p,2\) if NP is in P/poly) s
5 60 M
(=> All problems in PH can be reduced to this Sigma\(p,2\)-complete 2-QBFSAT problem.) s
5 49 M
(=> Sigma\(p,2\)-complete problem is thus a PH-Complete problem) s
5 27 M
(References:) s
5 16 M
(-----------) s
5 5 M
(424.1 Proof of Karp-Lipton-Sipser collapse theorem - PH in P/poly -  http://www.cse.iitm.ac) s
_R
S
%%Page: (235) 235
%%BeginPageSetup
_S
18 36 translate
/pagenum 235 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (235) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(.in/~jayalal/teaching/CS6840/2012/lecture14.pdf) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(---------------------------) s
5 698 M
(425. \(FEATURE-DONE\) Updates to Text Summarization from Dense Subgraph of Recursive Gloss Ov) s
5 687 M
(erlap graph of a Text -) s
5 676 M
(Commits - 4 July 2017) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(---------------------------) s
5 643 M
(\(*\) import matplotlib commented in RGO classifier) s
5 632 M
(\(*\) New clause added to Text Summarization: This finds the common path between 2 word verti) s
5 621 M
(ces synsets by inheriting an) s
5 610 M
(existing WordNet code for shortest wordnet path distance and constructs sentences by a slid) s
5 599 M
(ing window for each successive) s
5 588 M
(pair of intermediate vertices in this common path. This creates a deeper profund summary th) s
5 577 M
(an least_common_hypernyms\(\).Sentences thus created are sorted based on a relevance score to) s
5 566 M
( the actual text - size of intersection similar to Lesk WSD. Only top relevant sentences ca) s
5 555 M
(n be chosen as required.) s
5 544 M
(\(*\) Logs for this have been committed to testlogs/.) s
5 533 M
( ) s
5 522 M
(It has to be noted that, dense subgraph traversal and writing unguided summary sans trainin) s
5 511 M
(g data mimicks human recursive) s
5 500 M
(comprehension and looks non-conventional for human reading. Presently only hypernym \(IS A\) ) s
5 489 M
(relation is used for connectives.) s
5 478 M
(More comprehensive humane-looking summary can be created by Meronyms \(HAS A\) and Holonyms\(I) s
5 467 M
(S PART OF\) in WordNet API. ConceptNet 5 which is a better semantic framework for finding re) s
5 456 M
(lations between concepts could do well in this context. But) s
5 445 M
(presently there is no python API for ConceptNet5 and data has to be queried as RESTful JSON) s
5 434 M
( objects.) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-----------------------------------------------) s
5 390 M
(426. \(FEATURE-DONE\) Updates to Text Summarization - Commits - 5 July 2017) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-----------------------------------------------) s
5 357 M
(\(*\) Changed the class-sentence matching clause by increasing the percentile of prominent cl) s
5 346 M
(asses) s
5 335 M
(\(*\) Changed relevance_to_text\(\) by comparing each sentence chosen by prominent class match ) s
5 324 M
(to the sentences in text - Ratcliff-Obershelp) s
5 313 M
(Longest Common Subsequence matching difflib library function is invoked for this similarity) s
5 302 M
(. Sentences are chosen also based on relevance_to_text\(\) scoring) s
5 291 M
(\(*\) Percentage of summary to the size of the text has been printed as a ratio. Logs have be) s
5 280 M
(en committed to testlogs/) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(------------------------------) s
5 236 M
(427. \(FEATURE-DONE\) Updates to Text Summarization - choosing sentences matching class label) s
5 225 M
(s - 6 July 2017) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(------------------------------) s
5 192 M
(\(*\) Some experimentation on choosing relevant sentences to be added to summary was performe) s
5 181 M
(d) s
5 170 M
(\(*\) relevance_to_text\(\) invocation has been changed as per algorithm below:) s
5 159 M
(for each prominent dense subgraph k-core class label) s
5 148 M
(find the synset definition of class label) s
5 137 M
(for each sentence) s
5 126 M
(invoke relevance_to_text\(\) similarity function between sentence and the class label definit) s
5 115 M
(ion) s
5 104 M
(and add to summary if the relevance ratio > 0.41 and if not already in summary) s
5 93 M
(\(*\) Ratio 0.41 was arrived at heuristically:) s
5 82 M
(- For relevance ratio 0.1, summary ratio was 0.65) s
5 71 M
(- For relevance ratio 0.2, summary ratio was 0.48) s
5 60 M
(- For relevance ratio 0.3, summary ratio was 0.35) s
5 49 M
(- For relevance ratio 0.4, summary ratio was 0.21) s
5 38 M
(- For relevance ratio 0.5, summary ratio was 0.02) s
5 27 M
(There is a drastic dip in size of summary if relevance threshold is increased beyond 0.4. B) s
5 16 M
(ecause of this 0.41 has been) s
5 5 M
(hardcoded.) s
_R
S
%%Page: (236) 236
%%BeginPageSetup
_S
18 36 translate
/pagenum 236 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (236) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\(*\) Logs for this have been added to testlogs/) s
5 731 M
(\(*\) Summary generated is human readable - subset chosen from actual text.) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(-------------------------) s
5 687 M
(428. \(FEATURE-DONE\) ConceptNet 5.4 Python RESTful API implementation - lookup, search and a) s
5 676 M
(ssociation - 7 July 2017) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(-------------------------) s
5 643 M
(\(*\) This commit implements the RESTful Python requests HTTP API for querying ConceptNet 5.4) s
5 632 M
( dataset) s
5 621 M
(\(*\) Three functions for looking up a concept, searching a concept and finding similar assoc) s
5 610 M
(iated concepts have been) s
5 599 M
(implemented with 3 endpoints \(as per the documentation in https://github.com/commonsense/co) s
5 588 M
(nceptnet5/wiki/API/2349f2bbd1d7fb726b3bbdc14cbeb18f0a40ef18\)) s
5 577 M
(\(*\) ConceptNet is quite different from WordNet in representation as JSON dictionary as agai) s
5 566 M
(nst graph in WordNet.) s
5 555 M
(\(*\) ConceptNet 5.4 endpoints have been invoked instead of 5.) s
5 544 M
(\(*\) If necessary ConceptNet can replace all WordNet invocations in a later point in time. B) s
5 533 M
(ut such a replacement is non-trivial and would) s
5 522 M
(probably require almost all Recursive Gloss Overlap related code to be rewritten from scrat) s
5 511 M
(ch. But that depends on how ConceptNet 5) s
5 500 M
(weighs against WordNet in measuring semantic meaningfulness.) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(----------------------------------------) s
5 456 M
(429. \(THEORY\) Contradictions in bounds between finite and infinite electorate - 8,10,11,12,) s
5 445 M
(13 July 2017) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(----------------------------------------) s
5 412 M
(Lowerbounds by equating the goodness of Non-majority and Majority social choice thus far me) s
5 401 M
(ntioned in drafts in this document \(subject to errors\) are based on following assumptions:) s
5 390 M
(        \(*\) There are two possible paths to social choice - Non-majority and Majority) s
5 379 M
(        \(*\) Each social choice belongs to a computational complexity class) s
5 368 M
(        \(*\) Goodness of a social choice is the measure of error-free-ness of the choice mad) s
5 357 M
(e in either paths i.e decision correctness \(e.g noise stability, sensitivity,error in BP* a) s
5 346 M
(lgorithm etc.,\)) s
5 335 M
(        \(*\) RHS Majority voting has been assumed to abide by Homegeneous version of Condorc) s
5 324 M
(et Jury Theorem convergence and divergence of group decision goodness as a function of indi) s
5 313 M
(vidual voter goodness while LHS is either a pseudorandom choice or an interview TQBF algori) s
5 302 M
(thm) s
5 291 M
(        \(*\) Goodness of either choice majority or non-majority must be equal) s
5 280 M
(        \(*\) Either LHS or RHS has to be a complete problem for a complexity class C.) s
5 269 M
(        \(*\) Traditional literature on boolean majority functions and circuits assumes that ) s
5 258 M
(input to majority is readily available which is equivalent to SAT oracle access to Majority) s
5 247 M
( function where SAT oracle could belong to any complexity class \(2-SAT, 3-SAT, k-QBFSAT, et) s
5 236 M
(c.,\) => Majority voting is in P^NP,P^PH,P^EXP etc.,) s
5 225 M
(        \(*\) Previous Oracle access based proofs have been intentionally circumvented by rep) s
5 214 M
(lacing Oracles with Boolean Function/Circuit compositions which have strong Communication C) s
5 203 M
(omplexity basis \(KW relations and depth of a circuit composition mentioned in 368\)) s
5 192 M
(        \(*\) Assuming all above, LHS is an algorithm for RHS complete problem \(or viceversa\)) s
5 181 M
( creating a lowerbound.) s
5 170 M
(        \(*\) All bounds derived in this draft assuming above do not follow conventional lowe) s
5 159 M
(rbound techniques e.g Circuit Lower Bounds. Equal goodness assumption implies - "both algor) s
5 148 M
(ithms solve same problem - one is more efficient than the other".) s
5 137 M
(        \(*\) Most importantly drafts in this document are just analyses of various social ch) s
5 126 M
(oice functions, their complexities and contradictions irrespective of attaining lowerbounds) s
5 115 M
(.) s
5 93 M
(Equality of Goodness of PRG choice and Majority voting for finite electorate of size 3:) s
5 82 M
(--------------------------------------------------------------------------------------) s
5 71 M
(Let x1,x2,x3 be the goodness of 3 voter SATs. PRG choice randomly chooses one of the 3 vote) s
5 60 M
(rs while majority voting is the usual CJT Majority+SAT composition.) s
5 38 M
(Goodness of PRG choice:) s
5 27 M
(----------------------) s
5 16 M
(= \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\)\) / 3) s
5 5 M
(When all 3 have equal goodness 1, effective goodness is:) s
_R
S
%%Page: (237) 237
%%BeginPageSetup
_S
18 36 translate
/pagenum 237 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (237) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(= \(1*1 + 1*1 + 1*1\)/3 = 1) s
5 720 M
(Goodness of Majority choice:) s
5 709 M
(----------------------------) s
5 698 M
(This is the bounded version of CJT binomial series summation. When x1=x2=x3=1:) s
5 687 M
(= \(3C2\(1\)^2\(0\)^1 + 3C3\(1\)^3\(0\)^0\)  = \(0 + 1\) = 1) s
5 665 M
(Possible Lowerbounds described previously for Unbounded and Bounded electorate lead to cont) s
5 654 M
(radictions as below:) s
5 643 M
(\(*\) In infinite voter case, homogeneous voter CJT circuit in BPP is derandomized to P if CJ) s
5 632 M
(T converges => P=BPP.) s
5 621 M
(\(*\) In finite voter case, NP-complete RHS has BPP algorithm in LHS \(NP in BPP\) implying NP ) s
5 610 M
(in P/poly and collapse of PH => NP in P/poly and PH in P/poly.) s
5 588 M
(Contradiction 1 :) s
5 577 M
(-----------------) s
5 566 M
(If BPP=P \(unbounded CJT\) and NP is in BPP \(bounded\) then NP is in P=BPP => P=NP. This confl) s
5 555 M
(icts with P != NP implied by :) s
5 544 M
(        \(*\) the Majority Hardness Lemma \(318\),) s
5 533 M
(        \(*\) Polytime learning of NP implying NP does not have polytime algorithms \(368\) and) s
5 522 M
(        \(*\) HLMN PARITYSAT counterexample \(53.15\)) s
5 511 M
(but concurs with :) s
5 500 M
(        \(*\) high percentage of random k-SATs satisified in Approximate CNF SAT solver by le) s
5 489 M
(ast squares \(376\).) s
5 467 M
(But can infinite voter CJT circuit be in BPP and thus in P/poly? Infinite voter CJT circuit) s
5 456 M
( is of polynomial size if it is polynomial in number of Voter SAT variables and exponential) s
5 445 M
( if it is exponential in number of variables. Latter happens only if all voters have dissim) s
5 434 M
(ilar SAT variables while common variables across voter SATs make it exponential. This is de) s
5 423 M
(scribed in example of 53.8. Condorcet Jury Theorem convergence in homogeneous voters case i) s
5 412 M
(mplies all voters are similar \(e.g have similar voting SATs\) thus ruling out polynomial siz) s
5 401 M
(e case i.e Unbounded CJT circuit can not both be in BPP and converging. This contradiction ) s
5 390 M
(stems from the assumption - BPP derandomizes to P. LHS could be in RP too. RP is contained ) s
5 379 M
(in NP. \(Can BPP derandomize to NP i.e BPP in NP?\). Another assumption is all voters have 3-) s
5 368 M
(SAT choice functions. If all voter SATs are 2-SATs \(in P\), infinite and finite voter cases ) s
5 357 M
(are not equatable and there is no contradiction. Known result: If NP is in BPP, NP=RP - thi) s
5 346 M
(s applies to bounded voting case above. Thus BPP=P possibility is removed by exponential si) s
5 335 M
(zed CJT circuit and BPEXP=EXP is still possible when CJT converges. Contradiction 1 is avoi) s
5 324 M
(ded.) s
5 302 M
(Contradiction 2 :) s
5 291 M
(-----------------) s
5 280 M
(If NP is in BPP and thus in P/poly \(irrespective of BPP=P\), similar conflicts arise. An ass) s
5 269 M
(umption made in composition of 3-SAT voters and Majority function for bounded electorate in) s
5 258 M
( 424 is resultant composition is also in NP \(depth lowerbound for this composition can be o) s
5 247 M
(btained by KW relations in 368\). This assumption could be false because composition of NP 3) s
5 236 M
(-SAT with non-uniform NC1 majority function could be harder than mere NP - because this is ) s
5 225 M
(equivalent to replacing oracle with a circuit composition in a P^NP algorithm. P with NP or) s
5 214 M
(acle adds an additional quantifier and places it in second level of polynomial hierarchy \(i) s
5 203 M
(nclusion in https://www.cse.buffalo.edu/~regan/papers/ComplexityPoster.jpg shows there are ) s
5 192 M
(problems in Sigma\(p,2\) /\\ Pi\(p,2\) which also have BPP algorithms and P^NP is contained in S) s
5 181 M
(igma\(p,2\) /\\ Pi\(p,2\)\). Thus a PRG choice and converging bounded electorate voting of equal ) s
5 170 M
(goodness need not imply NP in BPP. This composition may not be a complete problem. Stricter) s
5 159 M
( oracle definition of Majority+SAT composition is NC1\(L\) where Majority is computable by no) s
5 148 M
(n-uniform circuits or BWBP with oracle access to gates belonging to a class L. For 3-SAT vo) s
5 137 M
(ter oracles, CJT majority voting circuit is in NC1\(NP\) \(is this contained in P^NP?\). Subjec) s
5 126 M
(t to equal goodness, composition equivalent of NC1\(NP\) is in BPP and not NP is in BPP.) s
5 104 M
(Reference 429.3 suggests there exists a random oracle A relative to which NC^A is in P^A. P) s
5 93 M
( having NP oracle access is known as class delta\(p,2\)=P^NP. This answers if NC1^NP is in P^) s
5 82 M
(NP in the affirmative. There is a known delta\(p,2\)-complete problem mentioned in reference ) s
5 71 M
(429.5. If bounded electorate NC1^NP problem is complete for its class, then equal goodness ) s
5 60 M
(of PRG choice and bounded majority voting implies NC1^NP is in BPP. This in turn implies NP) s
5 49 M
( is in BPP \(if NC1^NP strictly contains NP\) and thus NP is in P/poly again leading to contr) s
5 38 M
(adiction in the outset.) s
5 16 M
(Replacing oracles with compositions and applying depth lowerbounds for Majority+VoterSAT ci) s
5 5 M
(rcuit composition as below for m voters with n variables per voter SAT \(from 368\):) s
_R
S
%%Page: (238) 238
%%BeginPageSetup
_S
18 36 translate
/pagenum 238 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (238) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        D\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\) >= 5.3*logm  + n - O\(m*logm/) s
5 731 M
(n\)) s
5 720 M
(does away with the hassles of relativization and directly gives the depth lowerbound of the) s
5 709 M
( majority voting circuit composition. Size of this composition is the alternately phrased K) s
5 698 M
(RW conjecture in 429.7.) s
5 676 M
(Example delta\(p,2\)-complete problem mentioned in 429.5:) s
5 665 M
(-----------------------------------------------------) s
5 654 M
(While number of queries to NP oracle <= k) s
5 643 M
({) s
5 632 M
(        \(*\) Query a 3SAT oracle for a satisfying assignment for a 3CNF Voter SAT) s
5 621 M
(        \(*\) Store the queried satisfying assignment in a linked list in sorted order - this) s
5 610 M
( is linear per insertion i.e traverse the list and compare the two adjacent nodes. E.g. {1,) s
5 599 M
(5}, {1,3,5}, {1,3,5,6}, {1,3,5,6,7}... upto k-th query and lexicographic ordering is preser) s
5 588 M
(ved by a decimal encoding of SAT oracle query string.) s
5 577 M
(}) s
5 566 M
(Output 1 if last element in the list ends with binary 1 digit.) s
5 544 M
(This algorithm makes k queries to an NP oracle and has O\(k^2\) time complexity and thus in d) s
5 533 M
(elta\(p,2\). Hardness follows by reducing any polynomial time algorithm with NP oracle to abo) s
5 522 M
(ve - reasonably straightforward because oracle queries are memoized and can be looked-up in) s
5 511 M
( polynomial time.) s
5 489 M
(Mapping above delta\(p,2\) complete problem to proving completeness of NC1^NP majority voting) s
5 478 M
( is non-trivial. Majority function can make n queries to n voter SAT oracles and atleast n/) s
5 467 M
(2 + 1 queries should return 1 or 0 to compute majority in NC1. Beyond this, NC reducibility) s
5 456 M
( has to be proved by Many-one/Turing reductions or Logspace reductions of any other problem) s
5 445 M
( in NC1^NP to this. Integer multiplication,powering and division have been proved to be equ) s
5 434 M
(ivalent \(NC reducible to each other\) mentioned in reference 429.8. NC reducibility through ) s
5 423 M
(oracle NC gates have been proved in reference 429.9. Majority function is known not to be c) s
5 412 M
(omplete for NC1 under AC0 many-instances-to-one reductions \(reference 429.10\). This could p) s
5 401 M
(robably imply that NC1^NP is not complete too, thereby avoiding contradiction 2.) s
5 379 M
(But this also implies that any Majority^A for a random oracle A is not complete if Majority) s
5 368 M
( is not complete for NC1. Hence it has to be proved or disproved if a problem is not NC1 co) s
5 357 M
(mplete, it is not NC1^A complete for an oracle A. Lemma 3.3.9 in reference 429.9 [RuzzoGree) s
5 346 M
(nlawHoover] describes an Oracle PRAM or an NC oracle circuit M' to another NC circuit M. M ) s
5 335 M
(has O\(n^c\) size/processors and depth/time of O\(logn\) and M makes at most O\(n^c\) oracle quer) s
5 324 M
(ies to M' \(each node can query\). But these oracle queries are made simultaneously in parall) s
5 313 M
(el time of O\(logn\). Thus replacing calls to M' by M' itself increases depth by O\(logn\) and ) s
5 302 M
(size by O\(n^c\) order of magnitude i.e new circuit without oracle M' has time O\(\(logn\)^2\) an) s
5 291 M
(d size O\(n^2c\). Similar oracle replacement could be done for Majority^A circuits too. If or) s
5 280 M
(acle gates to Majority are replaced by circuit for A itself which has size s and depth d an) s
5 269 M
(d Majority makes at most O\(n^c\) calls to oracle A, new Majority circuit without oracle has ) s
5 258 M
(depth/time O\(d*logn\) and size/processors O\(s*n^c\). This new circuit need not be in NC1. Fro) s
5 247 M
(m Spira's Theorem a circuit of size O\(s*n^c\) can be transformed into a circuit of depth O\(l) s
5 236 M
(og\(s*n^c\)\)=O\(log\(s\) + c*log\(n\)\). Following cases arise after replacing oracle gates with a ) s
5 225 M
(new circuit of size s.) s
5 203 M
(Case 1 - s = 2^n:) s
5 192 M
(----------------) s
5 181 M
(This makes the new majority circuit sans oracle to be of depth O\(n*log2+c*log\(n\)\) which is ) s
5 170 M
(not polylog depth and polynomial size and thus lies outside NC - this new circuit problem c) s
5 159 M
(ould be complete for a different class. This line of reasoning coincides with previous form) s
5 148 M
(ulations of majority voting based on depth bounds by Communication Complexity \(KRW Conjectu) s
5 137 M
(re\) and Direct Connect circuit families of unbounded depth and exponential size. If there i) s
5 126 M
(s a problem B in NC1, Majority^A and B^A can be in totally different depth hierarchy classe) s
5 115 M
(s by depth hierarchy theorem. This could be a complete problem in different class \(e.g, PH-) s
5 104 M
(complete, EXP-complete etc.,\) and can be equated under equal goodness assumption with a non) s
5 93 M
(-majority social choice.) s
5 71 M
(Case 2 - s = n^c:) s
5 60 M
(-----------------) s
5 49 M
(This new majority circuit has depth O\(2*c*log\(n\)\) and size O\(n^2c\) and is obviously in NC1 ) s
5 38 M
(and computes majority. But majority is not complete for NC1 and thus majority voting itself) s
5 27 M
( is not a complete problem and cannot be equated under equal goodness assumption with a non) s
5 16 M
(-majority choice.) s
_R
S
%%Page: (239) 239
%%BeginPageSetup
_S
18 36 translate
/pagenum 239 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (239) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(References:) s
5 720 M
(-----------) s
5 709 M
(429.1 Definition of Homogenenous Voter - http://www.uni-saarland.de/fak1/fr12/csle/publicat) s
5 698 M
(ions/2006-03_condorcet.pdf - "...Now assume that a chamber consists of three homogenous jud) s
5 687 M
(ges. Homogenous means that the decision-making quality of each single judges is described b) s
5 676 M
(y identical parameters r..." - identical parameters are translatable to identical variables) s
5 665 M
( though SAT could be different for each) s
5 654 M
(429.2 Counting Classes and Fine Structure between NC and L - [Samir Datta , Meena Mahajan ,) s
5 643 M
( B V Raghavendra Rao , Michael Thomas , Heribert Vollmer] - http://www.imsc.res.in/~meena/p) s
5 632 M
(apers/fine-struct-nc.pdf - Definition of NC circuits with Oracle gates. Definitions 8 and 1) s
5 621 M
(0 and Remark 9 - Majority NC1 circuit with NP oracle for all homogeneous voters belongs to ) s
5 610 M
(Boolean Hierarchy and specifically is in NC1 hierarchy.) s
5 599 M
(429.3 For a random oracle A, NC^A is strictly contained in P^A - https://complexityzoo.uwat) s
5 588 M
(erloo.ca/Complexity_Zoo:N, https://complexityzoo.uwaterloo.ca/Zooref#mil92 - [PeterBroMilte) s
5 577 M
(rsen]) s
5 566 M
(429.4 Delta\(p,2\) - P has NP oracle - https://complexityzoo.uwaterloo.ca/Complexity_Zoo:D#de) s
5 555 M
(lta2p) s
5 544 M
(429.5 Delta\(p,2\) complete problem - https://complexityzoo.uwaterloo.ca/Zooref#kre88 - [Kren) s
5 533 M
(tel] - Given a Boolean formula, does the lexicographically last satisfying assignment end w) s
5 522 M
(ith 1?) s
5 511 M
(429.6 Spira theorem - any formula of leaf size s can be transformed into a formula of depth) s
5 500 M
( log\(s\) - https://www.math.ucsd.edu/~sbuss/CourseWeb/Math267_1992WS/wholecourse.pdf) s
5 489 M
(429.7 Size of a circuit composition - alternative form of KRW conjecture - http://www.math.) s
5 478 M
(ias.edu/~avi/PUBLICATIONS/GavinskyMeWeWi2016.pdf - "...This suggests that information compl) s
5 467 M
(exity may be the \342\\200\\234right\342\\200\\235 tool to study the KRW conjecture.  In particular, ) s
5 456 M
(since in the setting of KW relations, the information cost is analogous to the formula size) s
5 445 M
(, the \342\\200\\234correct\342\\200\\235 way to state the KRW conjecture may be using formula size: ) s
5 434 M
(L\(g*f\) \342\\211\\210 L\(g\)\302\267L\(f\)..." - for Majority+VoterSAT composition size is conjectured as ) s
5 423 M
(O\(n^5.3 * s\) where s is the size of VoterSAT formula. Information complexity of a compositi) s
5 412 M
(on of a function g:{0,1}^m->{0,1} and a universal relation Un:{0,1}^n->{0,1} for majority v) s
5 401 M
(oting is: a Voter SAT g of m variables is composed with a Majority universal relation of n ) s
5 390 M
(variables. Majority is a universal relation because for 2 input strings to majority functio) s
5 379 M
(n drawn at random can be checked if they differ in a bit position. Above depth bound is the) s
5 368 M
( amount of mutual information "leaked" while computing the composition together by Alice an) s
5 357 M
(d Bob. Alice gets a m*n matrix X and a string a in ginverse\(0\) and Bob gets a m*n matrix Y ) s
5 346 M
(and a string b in ginverse\(1\) and both accept if a and b differ in a bit position and X and) s
5 335 M
( Y have row mismatch and reject else. ginverse\(0\) is equivalent to a rejecting assignment t) s
5 324 M
(o SAT and ginverse\(1\) is equivalent to an accepting assignment to SAT because g\(\) is the Vo) s
5 313 M
(ter SAT.) s
5 302 M
(429.8 Log Depth circuits for Division and Related - [BeameCookHoover] - https://pdfs.semant) s
5 291 M
(icscholar.org/29c6/f0ade6de6c926538be6420b61ee9ad71165e.pdf) s
5 280 M
(429.9 NC reducibility - reducing one NC instance to another - https://homes.cs.washington.e) s
5 269 M
(du/~ruzzo/papers/limits.pdf - replace NC oracle gates by multiplication of equivalent numbe) s
5 258 M
(r of processors and depth) s
5 247 M
(429.10 Catechism on open problems - Interview of Eric Allender - https://books.google.co.in) s
5 236 M
(/books?id=7z3VCgAAQBAJ&pg=PA37&lpg=PA37&dq=NC+reducibility+majority+function&source=bl&ots=) s
5 225 M
(WOzlJFRbpt&sig=OmFqckehlrTfyaeTOjscJ423dUk&hl=en&sa=X&ved=0ahUKEwjQ_O-Y1YPVAhVGMI8KHbJCDbAQ) s
5 214 M
(6AEIIzAA#v=onepage&q=NC%20reducibility%20majority%20function&f=false - "...Majority functio) s
5 203 M
(n is not complete for NC1 under AC0 many-one reductions...") s
5 192 M
(429.11 Parallel Computation and the NC hierarchy relativized - [Christopher Wilson] - https) s
5 181 M
(://link.springer.com/chapter/10.1007/3-540-16486-3_111 - containments of NC classes relativ) s
5 170 M
(e to oracle - "NC^A hierarchy is seen to be in P^A for any oracle A. Also, nondeterministic) s
5 159 M
( log-space relative to ... there exists an oracle A, such that NC1^A in NC2^A ... in P^A") s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(----------------------------------------------------) s
5 115 M
(430. \(THEORY\) Theoretical Formalism for an Electronic Voting Machine based on Locality Sens) s
5 104 M
(itive Hashing - 13 and 14 July 2017 - related to 265,275,376 and 319) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(----------------------------------------------------) s
5 71 M
(Locality Sensitive Hashing and their relevance to Multiway Contests have been described in ) s
5 60 M
(319. Voters voting for same candidate are clustered together in a bucket chain of tabulatio) s
5 49 M
(n hashing. This is akin to a naive electronic voting machine which increments counters of a) s
5 38 M
( candidate for each vote cast for h\(im/er\). An LSH voting machine queries voter SAT oracles) s
5 27 M
( sequentially\(or parallelly if there is a parallel LSH implementation\), receives the candid) s
5 16 M
(ate index, finds the candidate index key in LSH and appends the voter id to the bucket chai) s
5 5 M
(n for the candidate. Sequential version of LSH voting machine is in delta\(p,2\)=P^NP because) s
_R
S
%%Page: (240) 240
%%BeginPageSetup
_S
18 36 translate
/pagenum 240 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (240) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( LSH is in P and oracle queries are made to voter 3SATs. LSH algorithms usually search for ) s
5 731 M
(nearest neighbours and find similar items with high probability. For LSH based Electronic V) s
5 720 M
(oting Machine this rho parameter as defined in 319 is log\(1/p1\)/log\(1/p2\) where p1=Pr\(h\(x\)=) s
5 709 M
(h\(y\)\) if x and y had voted for same candidate and p2=Pr\(h\(x\)=h\(y\)\) if x and y had voted for) s
5 698 M
( different candidates. Simplest voting machine is an array of candidates and voters increme) s
5 687 M
(nt an array element for a candidate index which is exact and errorfree. But LSH voting gene) s
5 676 M
(ralizes the notion of voting as: "x and y vote for same candidate" is generalized to "x and) s
5 665 M
( y are similar or have similar liking". For example, a web search engine lists URL results ) s
5 654 M
(for a query and all these URLs hash/vote to same query bucket in LSH parlance. Thus notion ) s
5 643 M
(of exact candidate is replaced by an abstract similarity probability. Definition of rho thu) s
5 632 M
(s allows error and its bounds are derived in references 430.2 and 430.3.) s
5 610 M
(Non-boolean social choice functions which a voter computes to obtain a candidate index have) s
5 599 M
( been described previously. Previous LSH or array of counters based voting machine has foll) s
5 588 M
(owing standard operating procedure:) s
5 577 M
(        \(*\)  receives voters in a streaming sequence,) s
5 566 M
(        \(*\)  each voter solves a non-boolean SAT \(which could be in an arbitrary complexity) s
5 555 M
( class\) having oracle access to it) s
5 544 M
(        \(*\)  oracle returns a candidate index and counter is incremented) s
5 533 M
(        \(*\)  LSH based voting has a special step - it compares two voters for similarity i.) s
5 522 M
(e if their oracle queries return same candidate index hash them to same bucket) s
5 511 M
(        \(*\)  Multipartisan SAT Oracle internally has to implement the following:) s
5 500 M
(                - Iterate through all candidates) s
5 489 M
(                - Find the maximum number of clauses that can be satisfied by each candidat) s
5 478 M
(e and quantify it as score which is NP-hard MAXSAT problem.) s
5 467 M
(                - Sort the scores for the candidates and return the topranked candidate.) s
5 456 M
(        \(*\) Sort the LSH by length of buckets) s
5 445 M
(        \(*\) MAXSAT has been used in lieu of Exact SAT for grading the candidates based on n) s
5 434 M
(umber of clauses satisfied. Exact SAT would return either 1 or 0 only and doesn't compute p) s
5 423 M
(ercentage of clauses satisfied.) s
5 412 M
(        \(*\) Random k-CNF SAT Solver implemented in 276 approximates by solving system of eq) s
5 401 M
(uations by least squares.) s
5 390 M
(        \(*\) Boolean Majority function is a special case of multipartisan voting: Restrict t) s
5 379 M
(he number of candidates to 2 indexed as 0 and 1 and apply LSH.) s
5 368 M
(        \(*\) Voter SAT Oracles could be Constraint Satisfaction Problem\(CSP\) Solvers too whi) s
5 357 M
(ch allow reals. This has been described in 265. Approximation of CSPs could be NP-hard if U) s
5 346 M
(GC is true.) s
5 324 M
(Circuit Value Problem finds if a circuit encoding evaluates to 1 or 0 for an input assignme) s
5 313 M
(nt. This is equivalent to the following prover-verifier protocol:) s
5 302 M
(        \(*\) Voter has a Constraint Satisfaction Problem \(boolean or real\)) s
5 291 M
(        \(*\) Candidate has an assignment to the variables of voter CSP \(Prover\)) s
5 280 M
(        \(*\) Voter verifies the assignment to CSP \(Verifier\)) s
5 269 M
(This kind of Circuit Value Problem \(CVP\) formulation has been avoided throughout drafts in ) s
5 258 M
(document for Majority Voting. This is because, equating goodness and Condorcet Jury Theorem) s
5 247 M
( application requires quantifying the decision correctness \(or\) accuracy of Voter SAT/CSP w) s
5 236 M
(hich is not feasible to compute in CVP. Class PP generalizes BPP by removing bounds on erro) s
5 225 M
(r. From Toda's Theorem, PH is contained in P^PP and P^#P. Goodness in LSH voting is exactly) s
5 214 M
( the rho parameter and if each voter SAT oracle in LSH with unbounded error is in PP \(exten) s
5 203 M
(t to which a voter is misclassified in a candidate bucket\), LSH voting itself is in P^PP an) s
5 192 M
(d thus subsumes PH. Another aspect of LSH voting is majority circuit fan-in is replaced by ) s
5 181 M
(size of buckets.) s
5 159 M
(References:) s
5 148 M
(----------) s
5 137 M
(430.1 Locality Sensitive Hashing - [Alex Andoni] - http://web.mit.edu/andoni/www/LSH/index.) s
5 126 M
(html) s
5 115 M
(430.2 Lowerbounds for Locality Sensitive Hashing - [MotwaniAssafPanigrahi] - http://theory.) s
5 104 M
(stanford.edu/~rinap/papers/lshlb.pdf) s
5 93 M
(430.3 Optimal lowerbounds for Locality Sensitive Hashing - [ODonnell] - https://www.cs.cmu.) s
5 82 M
(edu/~odonnell/papers/lsh.pdf) s
5 71 M
(430.4 Reflections on Trusting Trust - Trojan horses in code - program that prints itself - ) s
5 60 M
(Quines - Godel,Escher,Bach: An Eternal Golden Braid - Fixed Points in Turing Computable Fun) s
5 49 M
(ctions - [Ken Thompson] - http://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pd) s
5 38 M
(f) s
5 27 M
(430.5 Problems with Electronic Voting Machines \(e.g DRE machines\), VVPAT and Trusting sourc) s
5 16 M
(e code - [Bruce Schneier] - https://www.schneier.com/blog/archives/2004/11/the_problem_wit.) s
5 5 M
(html) s
_R
S
%%Page: (241) 241
%%BeginPageSetup
_S
18 36 translate
/pagenum 241 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (241) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(430.6 B-Cryptographic counters protocol augmented with Public Key Infrastructure for Increm) s
5 731 M
(enting Counters in Tabulation Authority - https://crypto.stanford.edu/pbc/notes/crypto/voti) s
5 720 M
(ng.html - Previous LSH based theoretical voting machine requires such a secure increment pr) s
5 709 M
(otocol for incrementing tabulation hashing buckets. Anonymity requires shuffling the bucket) s
5 698 M
(s.) s
5 687 M
(430.7 PP is as hard as polynomial time hierarchy - [Toda] - http://epubs.siam.org/doi/abs/1) s
5 676 M
(0.1137/0220053?journalCode=smjcat and [SanjeevArora-BoazBarak] - http://theory.cs.princeton) s
5 665 M
(.edu/complexity/book.pdf) s
5 654 M
(430.8 Beyond Locality Sensitive Hashing - [Alexandr Andoni,Piotr Indyk, Huy L. Nguy\313\\234\303\252n) s
5 643 M
(, Ilya Razenshteyn] - http://www.mit.edu/~andoni/papers/subLSH.pdf - Two level LSH partitio) s
5 632 M
(ning by hash tables - Outer hashing creates buckets for the hash table and Inner hashing cr) s
5 621 M
(eates hash table for each buckets around a centroid.) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(---------------------------) s
5 577 M
(431. \(FEATURE-DONE and THEORY\) Approximate CNF SAT Solver Update - percentage of clauses sa) s
5 566 M
(tisfied - 18 July 2017) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(---------------------------) s
5 533 M
(\(*\) This commit prints percentage of clauses satisfied for each random CNF 3SAT formula for) s
5 522 M
( both 0 and 1 evaluations) s
5 511 M
(\(*\) logs for ~1000 iterations of random 3SAT have been committed to testlogs/) s
5 500 M
(\(*\) Interestingly, even failing formula assignments by least squares satisfy more than 75% ) s
5 489 M
(of clauses of the formula) s
5 478 M
(\(*\) Percentage of formulas satisfied by least squares heuristic is ~70%) s
5 467 M
(\(*\) This is probably a demonstration of complement form of Lovasz Local Lemma \(LLL\) for MAX) s
5 456 M
(SAT which is:) s
5 445 M
(if events occur independently with a certain probability, there is a small non-zero probabi) s
5 434 M
(lity that none of them will occur) s
5 423 M
(\(*\) Dual of LLL for this MAXSAT approximation is:) s
5 412 M
(if each clauses are satisfied with a certain probability, there is a large probability that) s
5 401 M
( all of them are satisfied) s
5 379 M
(References:) s
5 368 M
(----------) s
5 357 M
(431.1 Lovasz Local Lemma - https://en.wikipedia.org/wiki/Lov\303\241sz_local_lemma) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-----------------------------) s
5 313 M
(432. \(THEORY\) MAXSAT ranking of text documents, Approximate CNF SAT solver and Lovasz Local) s
5 302 M
( Lemma - related to 431 -) s
5 291 M
(19 July 2017) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(-----------------------------) s
5 258 M
(Considering a set of text documents, ranking function r\(X,A\), is the subjective perception ) s
5 247 M
(measure of a text X) s
5 236 M
(with access to a perception oracle A:) s
5 225 M
(        r\(X,A\) = subjective rank of X as perceived by an oracle A) s
5 214 M
(In the context of web link graphs of HTML documents, every adjacent vertex of a node N is t) s
5 203 M
(he perceiver of N and for two) s
5 192 M
(adjacent vertices A and B of N:) s
5 181 M
(        r\(X,A\) = r\(X,B\) or r\(X,A\) != r\(X,B\)) s
5 170 M
(Perception ranking of a node need not be decided just by adjacent vertices at the end of ra) s
5 159 M
(ndom walk markov iterations. For example, there could be vertices which are not adjacent bu) s
5 148 M
(t yet could have indirect unaccounted for perception. An example of this are the readers of) s
5 137 M
( a website who do not link to it but yet have a perception. This perception is not reckoned) s
5 126 M
( in subjective link graph ranking.) s
5 104 M
(Ranking of texts can be thought of as MAXSAT problem: Each reader of a text has a CNF \(subj) s
5 93 M
(ective\) or all readers have fixed CNF \(Intrinsic Objective Merit\) which they apply on the q) s
5 82 M
(ualitative and quantitative attributes of a text. CNF for measuring merit conjoins clauses ) s
5 71 M
(for measuring meaningfulness of the text. Each literal in this CNF is a merit variable e.g ) s
5 60 M
(Graph complexity measures like Korner Entropy , Graph Tensor Neuron Network Intrinsic Merit) s
5 49 M
(, Connectivity etc., Rank of the text is the percentage of clauses satisfied. This CNF base) s
5 38 M
(d ranking unifies all subcategories of rankings.) s
5 16 M
(Lovasz Local Lemma:) s
5 5 M
(Let a1,a2,a3,...,an be set of events. If each event occurs with probability < p, and depend) s
_R
S
%%Page: (242) 242
%%BeginPageSetup
_S
18 36 translate
/pagenum 242 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (242) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ency digraph of these events have outdegree at most d, then the probability of non-occurren) s
5 731 M
(ce of all these events is non-zero:) s
5 720 M
(        Pr[/\\ !ai] > 0 , if ep\(d+1\) < 1 for e=2.7128...) s
5 698 M
(CNF formula can be translated into a graph where each vertex corresponds to a clause and th) s
5 687 M
(ere is an edge between any 2 clausevertices if they have a common literal \(negated or unneg) s
5 676 M
(ated\). In approximate least-square SAT solver, let d+1 be the number of clauses per CNF. Th) s
5 665 M
(en at most d other clauses can have literal overlap and thus CNF clause dependency graph ca) s
5 654 M
(n have maximum outdegree of d. Each event ai corresponds to not satisfying clause i in CNF.) s
5 632 M
(From LLL, If p < 1/[e\(d+1\)] is the probability of an event \(not satisfying a clause\) :) s
5 621 M
(Probability that clause is satisfied: 1-p > \(1-1/[e\(d+1\)]\)) s
5 610 M
(Probability that all of the clauses are satisfied > \(1-1/[e\(d+1\)]\)^\(d+1\) \(for d+1 clauses\)) s
5 599 M
(Probability that none of the clauses are satisfied < 1-\(1-1/[e\(d+1\)]\)^\(d+1\)) s
5 588 M
(In previous example d+1 = 14 and thus probability that none of the clauses are satisified f) s
5 577 M
(or any random CNF is:) s
5 566 M
(= 1-\(1-1/[e\(14\)]\)^\(14\)  < ~31.11%) s
5 555 M
(and probability of all the clauses being satisified for any random CNF is:) s
5 544 M
(\(1-1/[e\(14\)]\)^\(14\)  > ~68.89%) s
5 522 M
(Experimental iterations of SAT solver converge as below \(10000 CNFs\):) s
5 511 M
(Percentage of CNFs satisfied so far: 71.14) s
5 500 M
(Average Percentage of Clauses per CNF satisfied: 97.505) s
5 478 M
(This coincides with LLL lowerbounds above and far exceeds it because outdegree \(common lite) s
5 467 M
(rals\) is less and average percentage of CNFs satisfied is 71% after 10000 iterations. It ha) s
5 456 M
(s to be noted that average percentage of clauses satisfied per random CNF is 97% which impl) s
5 445 M
(ies that very few clauses fail per CNF.) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(--------------------------) s
5 401 M
(433. \(FEATURE-DONE\) Approximate CNF SAT Solver update - Commits 1 - 19 July 2017) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(--------------------------) s
5 368 M
(\(*\) Average percentage of clauses satisfied per CNF is printed at the end of 10000 iteratio) s
5 357 M
(ns) s
5 346 M
(\(*\) AsFer Design Document updated for Lovasz Local Lemma analysis of least squares CNF SAT ) s
5 335 M
(solver) s
5 324 M
(\(*\) logs for least square assignment of 10000 random CNFs committed to testlogs/) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(--------------------------) s
5 291 M
(434. \(FEATURE-DONE\) Recursive Gloss Overlap Graph Classifier update - Commits 2 - 19 July 2) s
5 280 M
(017) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(--------------------------) s
5 247 M
(\(*\) printed Betweenness Centrality \(BC\) of the definition graph of a text) s
5 236 M
(\(*\) BC of a node is the ratio of number of \(s-t\) shortest paths going through the node to a) s
5 225 M
(ll pairs shortest paths and) s
5 214 M
(thus measures how central a node is to the graph and thus is another basis for classifying ) s
5 203 M
(a text apart from dense subgraphs. ) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(-------------------------------------------------) s
5 159 M
(435. \(FEATURE-DONE\) Recursive Gloss Overlap graph classifier update - commits 1 - 20 July 2) s
5 148 M
(017) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(-------------------------------------------------) s
5 115 M
(\(*\) Following centrality measures for the definition graph have been printed in sorted orde) s
5 104 M
(r and top vertices are compared:) s
5 93 M
(       1\) Betweenness Centrality) s
5 82 M
(       2\) Closeness Centrality) s
5 71 M
(       3\) Degree Centrality) s
5 60 M
(       4\) Eigenvector Centrality \(PageRank\)) s
5 49 M
(       5\) Core numbers Centrality \(k-core dense subgraphs\)) s
5 38 M
(\(*\) While first 3 centrality measures are reasonably equal in terms of ranking central vert) s
5 27 M
(ices, PageRank centrality and k-core centrality are) s
5 16 M
( slightly different) s
5 5 M
(\(*\) But all 5 centrality measures reasonably capture the central purport of the text i.e th) s
_R
S
%%Page: (243) 243
%%BeginPageSetup
_S
18 36 translate
/pagenum 243 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (243) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(e text on) s
5 731 M
( "Chennai Metropolitan Area Expansion to 8848 sqkm" is classified into "Area" which is the ) s
5 720 M
(topranked central vertex) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(---------------------------------------------) s
5 676 M
(436. \(FEATURE-DONE\) Approximate SAT Solver update - commits 2 - 20 July 2017) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(---------------------------------------------) s
5 643 M
(\(*\) Increased number of clauses and variables to 16 and iterated for ~3100 random CNF formu) s
5 632 M
(lae.) s
5 621 M
(\(*\) Following are the MaxSAT percentages after ~3100 iterations:) s
5 610 M
(Percentage of CNFs satisfied so far: 69.1020276794) s
5 599 M
(Average Percentage of Clauses per CNF satisfied: 97.6122465401) s
5 588 M
(\(*\) Previous values are quite close to 14 clauses and variables iterations done previously.) s
5 566 M
(Lovasz Local Lemma bound for 16 clauses all having common literals:) s
5 555 M
(= \(1-1/[e\(16\)]\)^\(16\)  > ~68.9233868%) s
5 544 M
(and average percentage of clauses satisfied after 3100 iterations far exceeds this bound at) s
5 533 M
( 97.61%) s
5 511 M
(Commercially available SAT solvers \(exact NP-complete decision tree evaluation based\) usual) s
5 500 M
(ly scale to millions of clauses and variables.Though) s
5 489 M
(this approximate polynomial time SAT solver does not have similar advantage, yet the huge p) s
5 478 M
(ercentage of clauses satisfied in repetitive iterations does seem to have a lurking theoret) s
5 467 M
(ical reason. Infact this is symmetry breaking solver having a sharp threshold phase transit) s
5 456 M
(ion which tries to translate a system of equations over reals in [0,1] to discrete boolean ) s
5 445 M
(CNF formulae\(value below 0.5 is 0 and above 0.5 is 1\). Hardness of Approximation and UGC pr) s
5 434 M
(ohibit polytime approximations unless P=NP. 98% satisfied clauses could imply 100/98=\(1 + 0) s
5 423 M
(.020408163\) approximation where epsilon=0.020408163. This has to be corroborated for millio) s
5 412 M
(ns of clauses and variables in least-squares and requires high performance computing.) s
5 390 M
(Random number generator used in generating random CNF clauses is based on /dev/random and h) s
5 379 M
(ardware generated entropy. This CNF SAT solver depends on linux randomness to simulate pseu) s
5 368 M
(dorandomness and create permutations of CNFs. Accuracy of previous convergence figures ther) s
5 357 M
(efore might depend on if the CNFs are pseudorandom \(e.g k-wise independent for k variables ) s
5 346 M
(- when k increases to infinity independence may have infinitesimal probability\).) s
5 324 M
(References:) s
5 313 M
(-----------) s
5 302 M
(436.1 Linux Pseudorandom Generator - https://eprint.iacr.org/2012/251.pdf) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(----------------------------------------------) s
5 258 M
(437. \(FEATURE-DONE\) Approximate SAT Solver update - 24 July 2017) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(----------------------------------------------) s
5 225 M
(\(*\) Increased number of variables and clauses to \(20,20\).) s
5 214 M
(\(*\) Changed SciPy lstsq\(\) to NumPy lstsq\(\) because NumPy has a faster lstsq\(\) LAPACK implem) s
5 203 M
(entation as against xGELSS in SciPy) s
5 192 M
(\(*\) Logs for 100 random CNFs have been committed to testlogs/ and Percentage CNFs and Claus) s
5 181 M
(es satisfied are as below:) s
5 170 M
(Percentage of CNFs satisfied so far: 58.4158415842) s
5 159 M
(Average Percentage of Clauses per CNF satisfied: 97.1782178218) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(----------------------------------------------) s
5 115 M
(438. \(THEORY\) Tight Hamiltonian Cycles and Independent Sets in ThoughtNet Hypergraph for So) s
5 104 M
(cial Networks - related to 40,222,229,295,351,418,) s
5 93 M
(420 and other sections on ThoughtNet - 25 July 2017 and 28 July 2017) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(----------------------------------------------) s
5 60 M
(Theoretical description of ThoughtNet Hypergraph as basis for evocative thought and text an) s
5 49 M
(alysis is mentioned previously. Hypergraph with 3 vertices per edge \(3-uniform\) and number ) s
5 38 M
(of vertices n > n0, and minimum degree > n/2 + epsilon*n is guaranteed to have atleast one ) s
5 27 M
(tight hamiltonian cycle from [Rodl,Rucinski,Szemeredi] theorem. Tight Hamiltonian Cycles ha) s
5 16 M
(ve set of maximum vertex overlapping hyperedges. If complete universal knowledge is represe) s
5 5 M
(nted as 3-uniform ThoughtNet \(infinite\), this ensures all the concepts in universe are conn) s
_R
S
%%Page: (244) 244
%%BeginPageSetup
_S
18 36 translate
/pagenum 244 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (244) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ected in a tight hamiltonian. Social media networks are also generalizable to hypergraphs \() s
5 731 M
(though tradition is to model as graphs having network flow\). This can be simulated by Thoug) s
5 720 M
(htNet index - streamed social media tweets/posts/shares/likes are updated in ThoughtNet \(no) s
5 709 M
(n-planar\) and each class stack vertex \(e.g genre of people\) could be part of multiple hyper) s
5 698 M
(edges \(e.g events involving people\) and each hyperedge can span multiple class stack vertic) s
5 687 M
(es. Independent sets in this ThoughtNet Hypergraph are set of vertices e.g people who do no) s
5 676 M
(t directly know each other. Centrality measures \(e.g PageRank if there is one for hypergrap) s
5 665 M
(h\) on this hypergraph would elicit the social prestige/perception of individuals. It is wor) s
5 654 M
(th quantifying how a vertex A is perceived by vertex B with no edge between them. This is a) s
5 643 M
( special case of centrality and gossip information flow - ratio of number of shortest paths) s
5 632 M
( between two vertices s,t in an independent set / number of all pair shortest paths. This e) s
5 621 M
(stimates how two unknown vertices indirectly know each other.) s
5 599 M
(Ranking people in social network can not be done in the same way as documents are ranked be) s
5 588 M
(cause of intrinsic merit anachronism paradox motivated by real world examples in earlier se) s
5 577 M
(ctions - merit precedes prestige while perception/prestige is a measure of merit. Bianconi-) s
5 566 M
(Barabasi network model deserves a mention here in which each node has an intrinsic fitness ) s
5 555 M
(parameter in addition to incoming links. Examples in the reference 438.2 below explain how ) s
5 544 M
(intrinsic fitness/merit are applied to search engine ranking algorithms. Earlier network mo) s
5 533 M
(dels relied on temporal Preferential Attachment alone i.e node having high adjacency at tim) s
5 522 M
(e x are likely to have higher adjacency at time x+deltax. This is a transition from older F) s
5 511 M
(irst-Mover-Advantage \(first starter always wins\), Rich-Get-Richer to Fit-Get-Richer paradig) s
5 500 M
(m. Fitness of a social network profile \(twitter/facebook etc.,\) is a function of credential) s
5 489 M
(s mentioned in the profile and how fitness is quantified is specific to internal algorithm.) s
5 467 M
(Reference:) s
5 456 M
(-----------) s
5 445 M
(438.1 Tight Hamiltonian Cycles in 3-uniform Hypergraphs - [Rodl-Rucinski-Szemeredi] theorem) s
5 434 M
( - https://web.cs.wpi.edu/~gsarkozy/Cikkek/Rio08.pdf) s
5 423 M
(438.2 Bianconi-Barabasi Social Network Model - https://en.wikipedia.org/wiki/Bianconi%E2%80) s
5 412 M
(%93Barab%C3%A1si_model - "...In 1999, Albert-L\303\241szl\303\263 Barab\303\241si requested his student Bianc) s
5 401 M
(oni to investigate evolving networks where nodes have a fitness parameter. Barab\303\241si was in) s
5 390 M
(terested in finding out how Google, a latecomer in the search engine market, became a top p) s
5 379 M
(layer. Google\342\\200\\231s toppling of previous top search engines went against Barab\303\241si's BA) s
5 368 M
( model, which states that first mover has an advantage. In the scale-free network if a node) s
5 357 M
( appears first it will be most connected because it had the longest time to attract links. ) s
5 346 M
(Bianconi's work showed that when fitness parameter is present, the "early bird" is not alwa) s
5 335 M
(ys the winner.[10] Bianconi and Barab\303\241si's research showed that fitness is what creates or) s
5 324 M
( breaks the hub. Google's superior PageRank algorithm helped them to beat other top players) s
5 313 M
(. Later on Facebook came and dethroned Google as Internet's most linked website. In all the) s
5 302 M
(se cases fitness mattered which was first showed in Bianconi and Barab\303\241si's research. In 2) s
5 291 M
(001, Ginestra Bianconi and Albert-L\303\241szl\303\263 Barab\303\241si published the model in the Europhysics) s
5 280 M
( Letters.[11] In another paper,[12] substituting fitness for energy, nodes for energy level) s
5 269 M
( and links for particles, Bianconi and Barab\303\241si was able to map the fitness model with Bos) s
5 258 M
(e gas....") s
5 247 M
(438.3 Experience versus Talent shapes the web - http://www.pnas.org/content/105/37/13724.fu) s
5 236 M
(ll - following simplistic theory provides intuition for it:) s
5 225 M
(        Let M be the natural ability/merit/fitness of a vertex and E be the experience.) s
5 203 M
(        Rate of change of experience of a social profile vertex is proportional to its intr) s
5 192 M
(insic fitness and present experience.) s
5 181 M
(        Previous assumption is a heuristic on real-life experiences - intrinsic fitness is ) s
5 170 M
(a constant while experience changes with time.) s
5 159 M
(        Thus at any time point, experiential learning depends on how naturally meritorious ) s
5 148 M
(a person is and how much past experience is) s
5 137 M
(        helpful in increasing experiential learning. \(Might have some theoretical basis in ) s
5 126 M
(Mistake bound in computational learning theory.) s
5 115 M
(        Following formalises how a boolean function is learnt incrementally from a dataset ) s
5 104 M
(over time by making mistakes and correcting them\)) s
5 82 M
(        dE/dt = kME) s
5 71 M
(        => dE = kME.dt) s
5 60 M
(        => dE/E = kM.dt) s
5 49 M
(        => log E = kMt + c) s
5 38 M
(        => E = e^\(kMt+c\)) s
5 27 M
(        => E = e^c * e^\(kMt\)) s
5 16 M
(        => Experience is exponentially related to talent/merit/fitness) s
5 5 M
(        => People with high natural ability amass same experience in less time compared to ) s
_R
S
%%Page: (245) 245
%%BeginPageSetup
_S
18 36 translate
/pagenum 245 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (245) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(people with low merit) s
5 731 M
(At time t=0, E = e^c which is equal to natural ability/merit/fitness M of a social profile ) s
5 720 M
(vertex in Bianconi-Barabasi network model.) s
5 709 M
(Therefore, E = M*e^\(kMt\). At t=0, experience equals merit and grows exponentially over time) s
5 698 M
(. But how to measure the fitness of a social profile for a human in terms of energy? What i) s
5 687 M
(s the energy of a human social profile? Low energy syntactically implies low entropy and le) s
5 676 M
(ss chaotic nature of a profile. But real-life social profiles with high entropy do attract ) s
5 665 M
(huge links. Previous derivation assumes natural talent is defined in terms of numeric quant) s
5 654 M
(ification of credentials \(marks/grades/awards/publications/IQ/achievements\) which is insuff) s
5 643 M
(icient. For human resource analytics, sampling experience at each tenure change \(academic/w) s
5 632 M
(ork\) gets a snap of experience at that time. Usually experience is measured linearly in tim) s
5 621 M
(e in academics/industries often overlooking merit, but previous equation changes that notio) s
5 610 M
(n and implies experience exponentially increases with time as a function of intrinsic merit) s
5 599 M
(. Also previous differential equation is a very naive definition of experience vs talent - ) s
5 588 M
(adding more variables could make it reflect reality.) s
5 577 M
(438.4 Bose-Einstein Condensation in Complex Networks - [Bianconi-Barabasi] - Physical Revie) s
5 566 M
(w Letters - http://barabasi.com/f/91.pdf) s
5 555 M
(438.5 PAFit - Joint estimation of preferential attachment and node fitness in growing compl) s
5 544 M
(ex networks - [Thong Pham, Paul Sheridan & Hidetoshi Shimodaira] - https://www.nature.com/a) s
5 533 M
(rticles/srep32558 - factors determining node fitness in facebook graph - "...A directed edg) s
5 522 M
(e in the network represents a post from one user to another user\342\\200\\231s wall. One might ) s
5 511 M
(speculate that the following factors are important for a user to attract posts to his/her w) s
5 500 M
(all: a\) How much information about his/her life that he/she publicises: his/her birthday, e) s
5 489 M
(ngagement, promotion, etc. b\) How influential and/or authoritative his/her own posts are wh) s
5 478 M
(ich call for further discussions from other people; and c\) how responsive the user is in re) s
5 467 M
(sponding to existing wall posts. We then can hypothesize fitness \316\267i to be a combination of) s
5 456 M
( these three factors averaged over time ...") s
5 445 M
(438.6 3-Uniform Hypergraphs/Triple System and Langford Pairs - [Donald Knuth] - The Art of ) s
5 434 M
(Computer Programming: Combinatorial Algorithms - Volume 4 - Pages 3,33 - Langford Pairs are) s
5 423 M
( combinatorial objects created by all possible ways of spacing each of 2n elements in a set) s
5 412 M
( having n pairs of identical twins so that each pair is spaced equal to its numeric value. ) s
5 401 M
(In the context of ThoughtNet, langford pairs can be created by embedding any two pair of cl) s
5 390 M
(ass stack vertices having identical number of hyperedges passing through them on a plane, s) s
5 379 M
(eparated by distance equal to number of edges traversing the two hypervertices. 3-Uniform H) s
5 368 M
(ypergraphs or Triple System can be represented by an equivalent bipartite graph, incidence ) s
5 357 M
(matrix and a boolean formula.) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(--------------------------------------------------) s
5 313 M
(439. \(FEATURE-DONE\) Scheduler Analytics for VIRGO Linux Kernel - Commits - 31 July 2017 and) s
5 302 M
( 1,3 August 2017) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(--------------------------------------------------) s
5 269 M
(\(*\) As mentioned in NeuronRain FAQ at http://neuronrain-documentation.readthedocs.io/en/lat) s
5 258 M
(est/, analytics driven linux kernel scheduler) s
5 247 M
(is the ideal application of machine learning within kernel. There are two options to go abo) s
5 236 M
(ut:) s
5 225 M
(\(*\) First is Application Layer Scheduling Analytics in which a python code for example, lea) s
5 214 M
(rns from linux kernel logs, /proc/<pid>/schedstat) s
5 203 M
(and /proc/<pid>/sched data of CFS and exports key-value pairs on how to prioritize processe) s
5 192 M
(s' nice values in /etc/kernel_analytics.conf. This config file is read by VIRGO Linux kerne) s
5 181 M
(l_analytics module and exported kernelwide. Existing kernel scheduler code might require sl) s
5 170 M
(ight changes to read these variables periodically and change process priorities. There have) s
5 159 M
( been past efforts like Scheduler Activations which delink userspace threads and kernel thr) s
5 148 M
(eads by multiplexing M user threads onto N kernel threads and focus is on scheduling the us) s
5 137 M
(erspace threads on kernel threads. But Linux kernel does not have support for Scheduler Act) s
5 126 M
(ivation and has 1:1 user:kernel thread ratio i.e there is no application thread library hav) s
5 115 M
(ing scheduling support. This option would be ideally suited for prioritizing userspace thre) s
5 104 M
(ads by deep-learning from process perf data.) s
5 93 M
(\(*\) Second is Kernel Layer Scheduling Analytics in which kernel has to make upcalls to user) s
5 82 M
(space machine learning functions. This is quite impractical because kernel overhead and lat) s
5 71 M
(ency of scheduling increases and upcalls are usually discouraged for heavy processing. More) s
5 60 M
(over this adds a theoretical circularity too - upcall is made on the context of present ker) s
5 49 M
(nel thread and who decides the priority of the upcall? This requires complete kernel level ) s
5 38 M
(machine learning implementation \(e.g Kernel has an independent replicated implementation of) s
5 27 M
( String library and does not depend on userspace GCC libraries\). Major hurdle to implement ) s
5 16 M
(machine learning in kernel is the lack of support for C in machine learning as most of the ) s
5 5 M
(packages are in C++/Java/Python - e.g. how would Apache Spark cloud processing fit with in ) s
_R
S
%%Page: (246) 246
%%BeginPageSetup
_S
18 36 translate
/pagenum 246 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (246) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(kernel?. Computational complexity of this scheduling is O\(n*m\) where m is the time spent pe) s
5 731 M
(r upcall in process priority classification by machine learning and n is the number of proc) s
5 720 M
(esses. This implies every process would have significant waiting time in queue and throughp) s
5 709 M
(ut takes a hit. Also this requires significant rewrite of kernel scheduler to setup upcalls) s
5 698 M
(, do userspace execve\(\), redirect standard error/output \(fd_install\) for logging userspace ) s
5 687 M
(analytics etc., Userspace upcalls are already supported in VIRGO linux CPU/Memory/FileSyste) s
5 676 M
(m kernel modules for executing user libraries from kernel. If upcall instead writes to /etc) s
5 665 M
(/kernel_analytics.conf file than communicating to kernel \(using NetLink for example\), this ) s
5 654 M
(option is same as first one.) s
5 643 M
(\(*\) Third option is to implement a separate kernel module with access to process waiting qu) s
5 632 M
(eue which loops in a kernel thread and does upcalls to userspace to classify the process pr) s
5 621 M
(iorities and notifies the scheduler on process priorities change asynchronously. But this o) s
5 610 M
(ption is same as first except it is done in kernel with upcalls and overkill while first is) s
5 599 M
( a downcall.) s
5 577 M
(First option is chosen for time being because:) s
5 566 M
(        - it is top-down) s
5 555 M
(        - it does not interfere in existing scheduler code flow much) s
5 544 M
(        - minimal code change is required in kernel scheduler e.g as a KConfig build parame) s
5 533 M
(ter and can be #ifdef-ed) s
5 522 M
(        - key-value pair variable mechanism is quite flexible and broadcast kernelwide) s
5 511 M
(        - any interested module in kernel can make use of them not just scheduler) s
5 500 M
(        - it is asynchronous while kernel layer scheduling is synchronous \(scheduler has to) s
5 489 M
( wait to know priority for each process from userspace code\)) s
5 478 M
(        - second and third options are circuitous solutions compared to first one.) s
5 467 M
(        - Languages other than C are not preferable in kernel \(http://harmful.cat-v.org/sof) s
5 456 M
(tware/c++/linus\)) s
5 445 M
(        - Key-Value pair protocol between userspace and kernelspace effectively tames langu) s
5 434 M
(age barriers between user and kernel spaces indirectly i.e this protocol is atleast as effi) s
5 423 M
(cient as an inlined kernel code equivalent doing an upcall and computing the same pair ) s
5 412 M
(        - Key-Value storage can also exist on a cloud too not necessarily in /etc/kernel_an) s
5 401 M
(alytics.conf file thus transforming VIRGO kernel into a practical dynamic cloud OS kernel) s
5 390 M
(        - first option is more suited for realtime kernels) s
5 368 M
(###########################################################################################) s
5 357 M
(#) s
5 346 M
(#Scheduler Analytics for Linux Kernel:) s
5 335 M
(#=====================================) s
5 324 M
(# Following DeepLearning models learn from process perf variables - CPU, Memory, Context sw) s
5 313 M
(itches, Number of Threads and Nice data) s
5 302 M
(# for each process id retrieved by psutil process iterator - BackPropagation, RecurrentLSTM) s
5 291 M
(# RecurrentGRU and ConvolutionNetwork models learn software analytics neural networks from ) s
5 280 M
(psutil process performance info) s
5 269 M
(# Key value pairs learnt from these can be read by Linux Kernel Scheduler or anything else) s
5 258 M
(# and suitably acted upon for changing the process priorities dynamically. Any kernel modul) s
5 247 M
(e can make an upcall to this userspace) s
5 236 M
(# executable and dump the key-value pairs in /etc/kernel_analytics.conf. Presently the impl) s
5 225 M
(ementation is quite primitive and) s
5 214 M
(# classifies the output layer of neural network into "Highest, Higher, High, Normal, Medium) s
5 203 M
(, Low, Lower and Lowest" priority classes) s
5 192 M
(# in the format: <pid#deeplearningalgorithm>=<scheduled_priority_class>. Number of iteratio) s
5 181 M
(ns has been set to 10 for all deep learning networks.) s
5 170 M
(###########################################################################################) s
5 159 M
(#) s
5 137 M
(Following is a simulation of how the key-value pair for repriotization from Scheduler Analy) s
5 126 M
(tics could affect the kernel scheduler:) s
5 115 M
(        \(*\) Linux kernel scheduler has the notion of jiffies - HZ - set of clock ticks - fo) s
5 104 M
(r time slicing processes) s
5 93 M
(        \(*\) Each priority class has a red-black binary search tree based queue - deletion i) s
5 82 M
(s O\(1\) and insertion is O\(logN\) after rebalancing such that longest root to leaf path is no) s
5 71 M
(t more than twice longer than that of least root to leaf path) s
5 60 M
(        \(*\) On receipt of repriotization analytics, kernel_analytics exports it kernelwide,) s
5 49 M
( scheduler reads this <pid>=<new_priority> key-value pair and removes <pid> from <old_prior) s
5 38 M
(ity> red-black tree and inserts in <new_priority> red-black tree.) s
5 27 M
(        \(*\) Thus multiple red-black trees make a trade-off and rebalance periodically with ) s
5 16 M
(no manual nice interventions - this deletion and insertion is O\(logN\)) s
5 5 M
(        \(*\) Every repriotization is therefore O\(logN\).) s
_R
S
%%Page: (247) 247
%%BeginPageSetup
_S
18 36 translate
/pagenum 247 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (247) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        \(*\) In realtime bigdata processing of heavy load, priorities can change quite frequ) s
5 731 M
(ently. For m reprioritizations, scheduler incurs O\(m*logN\) time. But m can have maximum val) s
5 720 M
(ue equal to total number of processes and thus a multiple of N \(number of processes per pri) s
5 709 M
(ority class\) and thus effective worstcase cost is O\(NlogN\)) s
5 687 M
(References:) s
5 676 M
(-----------) s
5 665 M
(439.1 Scheduler Activations - Effective Kernel Support for the user level management of par) s
5 654 M
(allelism - http://dl.acm.org/citation.cfm?id=121151) s
5 643 M
(439.2 Controlling Kernel Thread Scheduling From Userspace - http://citeseerx.ist.psu.edu/vi) s
5 632 M
(ewdoc/download?doi=10.1.1.605.3571&rep=rep1&type=pdf) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(---------------------------------------------------) s
5 588 M
(440. \(THEORY\) Social Networks, Money Flow Markets, Pricing Equilibrium, Centrality, Intrins) s
5 577 M
(ic versus Perceptive Valuations - 1 August 2017 and) s
5 566 M
(11 August 2017) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(---------------------------------------------------) s
5 533 M
(Flow of money in a network of buyers and sellers and pricing have been described in KingCob) s
5 522 M
(ra design document - https://github.com/shrinivaasanka/kingcobra-github-code/blob/master/Ki) s
5 511 M
(ngCobraDesignNotes.txt. Problem of relating intrinsic merit/fitness of an entity to percept) s
5 500 M
(ive judgements is essentially reducible to the problem of market equilibrium as below:) s
5 489 M
(In a flow market digraph,there is a directed edge from a vertex b to vertex s of weight p w) s
5 478 M
(here b is a buyer, s is a seller and p is the price offered by buyer b for s. There can be ) s
5 467 M
(multiple b\(i\) edges incoming for a seller s offering different prices and multiple sellers ) s
5 456 M
(s\(i\) can have incoming edges from a buyer b. Problem of determining fair price for seller s) s
5 445 M
( amounts to finding objective intrinsic merit/fitness of goods/services of s while incoming) s
5 434 M
( buyer edges are perceptive subjective market values \(auction\). Treating this as a link gra) s
5 423 M
(ph and applying Centrality measures like PageRank could identify most valued seller in term) s
5 412 M
(s of market perception. Thus the problem of intrinsic merit versus perception is ubiquitous) s
5 401 M
( and is not just restricted to internet\(text, audio-visuals\). Assuming Bose-Einstein Conden) s
5 390 M
(sation in Flow Markets, fitness/merit is measured by least energy.Note of caution is the te) s
5 379 M
(rm "least energy" has multiple meanings depending on context and cannot be literally taken ) s
5 368 M
(as least entropy. In flow markets, least energy seller could be one with best marketing abi) s
5 357 M
(lities, quality, technical knowhow, qualifications etc.,) s
5 335 M
(In money flow markets, each buyer i is allocated a good/service j of x\(ij\) units with utili) s
5 324 M
(ty u\(ij\) with price p\(j\). Objective is to maximimize the money weighted geometric mean of t) s
5 313 M
(he product of utilities for all buyers. This has to satisfy Karush-Kuhn-Tucker conditions o) s
5 302 M
(f convex program i.e this money weighted geometric mean is a convex function \(line connecti) s
5 291 M
(ng two points on the graph of a function is always above the graph - epigraph is convex\) on) s
5 280 M
( a convex set \(line connecting any two points in the set is within the set\) and optimized s) s
5 269 M
(ubject to KKT conditions. Another algorithm is to construct a goods/services - buyers bipar) s
5 258 M
(tite flow network with a source and sink. This network has edges weighted by prices from so) s
5 247 M
(urce to goods/services vertices and edges weighted by money from buyers vertices to sink. M) s
5 236 M
(incuts of this network determine price equilibrium by maxflow algorithm.) s
5 214 M
(Previous example is mooted to invoke the striking parallels between buyer versus seller pri) s
5 203 M
(ce equilibrium and intrinsic merit versus perception equilibrium - Intrinsic value of a goo) s
5 192 M
(d/service is immutable while buyers' price requirements for same good/service vary; Similar) s
5 181 M
(ly intrinsic merit of an entity is immutable while perception of an entity is subjective. B) s
5 170 M
(y replacing price with merit in Convex Program and Maxflow algorithms, equilibrium state be) s
5 159 M
(tween intrinsic merit and perceived merit of a social profile vertex can be found. But stil) s
5 148 M
(l this does not lead to absolute intrinsic merit.) s
5 126 M
(Convex Program for Market Equilibrium is defined as below:) s
5 115 M
(        Maximize u\(ij\)^e\(i\) where buyer i has money e\(i\) at disposal) s
5 104 M
(subject to:) s
5 93 M
(        Total happiness of a customer = Sigma\(u\(ij\)*x\(ij\)\) where u\(ij\) is the utility buyer) s
5 82 M
( i gets from x\(ij\) units of good j) s
5 60 M
(Following maps a Market to Merit equilibrium:) s
5 49 M
(Intrinsic merit of a \(corresponds to Seller\) vertex is defined by a feature vector of merit) s
5 38 M
( variables. Buyers are perceivers. Each perceiver has a pre-allocated total perceived merit) s
5 27 M
( which is divided amongst the perceived vertices. The Convex Program for Equilibrium betwee) s
5 16 M
(n intrinsic merit and perceived merit is:) s
5 5 M
(        Maximize u\(ij\)^e\(i\) where perceiver i has total perceived merit e\(i\) at disposal an) s
_R
S
%%Page: (248) 248
%%BeginPageSetup
_S
18 36 translate
/pagenum 248 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (248) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(d u\(ij\) is the utility perceiver i gets from merit variable j of a vertex) s
5 731 M
(subject to:) s
5 720 M
(        Total happiness of a perceiver = utility of i = Sigma\(u\(ij\)*x\(ij\)\) where u\(ij\) is t) s
5 709 M
(he utility perceiver i gets from x\(ij\) units of merit variable j of a vertex) s
5 698 M
(        and p\(j\) is the equilibrium perceived merit of a variable j) s
5 687 M
(Solving the previous convex program results in an optimal merit vector \(set of p\(j\)'s\) and ) s
5 676 M
(weights of merit variables \(x\(j\)'s\) which satisfies both perceiver and perceived.) s
5 654 M
(This equilibrium is closely related to Nash Bargaining Problem which postulates existence o) s
5 643 M
(f an agreement and disagreement point \(a,b\) in a set X in R^2 involving two players where a) s
5 632 M
( and b are utilities of the two players. Nash function of a point \(a,b\) is the maximum a*b.) s
5 621 M
( In the context of merit equilibrium, the equilibrium point \(a,b\) is in optimum distance be) s
5 610 M
(tween intrinsic merit and perceived merit and maximizes happiness utility of both perceiver) s
5 599 M
( and the perceived.) s
5 577 M
(References:) s
5 566 M
(-----------) s
5 555 M
(440.1 Algorithmic Game Theory - Chapter 5 and Chapter 15 - Existence of Flow Markets Equili) s
5 544 M
(brium and Nash Bargaining Problem - Fisher and Eisenberg-Gale Convex Program and Network Ma) s
5 533 M
(xFlow algorithm - [Tim Roughgarden, Noam Nisan, Eva Tardos, Vijay Vazirani] - http://www.ca) s
5 522 M
(mbridge.org/download_file/909426) s
5 511 M
(440.2 New Convex Program for Fisher Market Equilibria - Convex Program Duality, Fisher Mark) s
5 500 M
(ets, and Nash Social Welfare -  [Richard Cole \342\\200\240 Nikhil R. Devanur \342\\200\241 Vasilis Gkatz) s
5 489 M
(elis \302\247 Kamal Jain \302\266 Tung Mai k Vijay V. Vazirani \342\\210\\227\342\\210\\227 Sadra Yazdanbod \342\\200) s
5 478 M
(\240\342\\200\240] - https://arxiv.org/pdf/1609.06654.pdf - Previous Convex Geometric Mean Program is) s
5 467 M
( a Nash Social Welfare Function which is Spending Restricted. This article introduces an im) s
5 456 M
(proved Convex Program with higher integrality gap. Integrality Gap is the measure of goodne) s
5 445 M
(ss of approximation and is based on Linear Program Relaxation. LP Relaxation waives the 0-1) s
5 434 M
( integer programming to range of reals in [0,1]. Approximate CNFSAT Solver implemented and ) s
5 423 M
(described earlier in this document is also a relaxation but for system of equations. Integr) s
5 412 M
(ality Gap of CNF MAXSAT solver found experimentally for few instances is ~100/98 = 1.02 tho) s
5 401 M
(ugh still it requires further theoretical analysis to upperbound the error.) s
5 390 M
(440.3 Triangle Inequality based Christofides 1/2-approximation Algorithm for Travelling Sal) s
5 379 M
(esman Problem - Combinatorial Optimization - [Christos H.Papadimitriou,Kenneth Steiglitz] -) s
5 368 M
( Page 416) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(-----------------------------------------------) s
5 324 M
(441. \(FEATURE-DONE\) Scheduler Analytics update - commits - 1 August 2017) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(-----------------------------------------------) s
5 291 M
(\(*\) Updated AsFer Design Document) s
5 280 M
(\(*\) Updated python-src/software_analytics/DeepLearning_SchedulerAnalytics.py to write in /e) s
5 269 M
(tc/kernel_analytics.conf) s
5 258 M
(\(*\) logs committed to testlogs/) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(----------------------------------------------) s
5 214 M
(442. \(FEATURE-DONE\) Graph Density \(Regularity Lemma\) and Bose-Einstein Fitness implementati) s
5 203 M
(ons - commits - 1 August 2017) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(----------------------------------------------) s
5 170 M
(\(*\) New intrinsic merit measures based on graph density \(regularity lemma\) and Bose-Einstei) s
5 159 M
(n intrinsic fitness have been added as functions) s
5 148 M
(and invoked) s
5 137 M
(\(*\) logs have been committed to testlogs/) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-----------------------------------------------) s
5 93 M
(443. \(THEORY\) Mistake bound learning\(MB\), Experience and Intrinsic merit, Social Network An) s
5 82 M
(alytics - 2,3,11 August 2017 - related to 368, 438) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(-----------------------------------------------) s
5 49 M
(Mistake bound learning, iteratively refines and converges from an initial hypothesis based ) s
5 38 M
(on mistakes. PAC learning is also a kind of mistake bound learning.  Previously described d) s
5 27 M
(ifferential equation relation between experience and intrinsic merit/fitness/natural talent) s
5 16 M
( can be theoretically formalised as below:) s
_R
S
%%Page: (249) 249
%%BeginPageSetup
_S
18 36 translate
/pagenum 249 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (249) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Let M be the intrinsic merit \(correctness\) of a boolean function hypothesised in the form o) s
5 731 M
(f conjunctions and disjunctions. From the derivation) s
5 720 M
(of experience\(E\) versus merit\(M\) as function of time\(t\):) s
5 709 M
(        dE/dt = kME) s
5 698 M
(        => dE = kME.dt) s
5 687 M
(        => dE/E = kM.dt) s
5 676 M
(        => log E = kMt + c) s
5 665 M
(        => E = e^\(kMt+c\)) s
5 654 M
(        => E = M*e^\(kMt\)) s
5 632 M
(If dE/dt is replaced by number of mistakes b1 made and corrected per time unit in MB model ) s
5 621 M
(and E is replaced by total number of mistakes b2 made so far in hypothesis and corrected \(e) s
5 610 M
(xperience is function of this in human context\), learner's experiential learning converges ) s
5 599 M
(in time t to some percentage error and number of mistakes done in time t , b2 = t*b1.) s
5 588 M
(        => E = M*e^\(kMt\)) s
5 577 M
(        => E = M*e^\(kM*b2/b1\)) s
5 566 M
(Previous expression for experience depends both on intrinsic merit and mistakes made which ) s
5 555 M
(is exactly required in human classification.) s
5 533 M
(Traditionally mistake bounds are used only in learning boolean functions. Generalizing it t) s
5 522 M
(o any functions and humans creates a generic definition of merit and experience irrespectiv) s
5 511 M
(e of the entity involved. Assumption in the previous differential equation is delta increas) s
5 500 M
(e in experience is proportional to existing experience and merit. Boolean function learning) s
5 489 M
( theory does not appear to have the concept of intrinsic merit or how learning accrued so f) s
5 478 M
(ar helps in further learning which is quite essential for classifying humans based on merit) s
5 467 M
(+experience in social networks and human resource analytics. In previous expression for mis) s
5 456 M
(take bounded experience, number of mistakes made b2 and b1 themselves could be a function o) s
5 445 M
(f factors like IQ and EQ  e.g b1 = f\(IQ,EQ\) and b2 = g\(IQ,EQ\). Then experience becomes:) s
5 434 M
(        => E = M*e^\(kM*g\(IQ,EQ\)/f\(IQ,EQ\)\)) s
5 423 M
(If M=h\(IQ\):) s
5 412 M
(        => E = h\(IQ\)*e^\(k*h\(IQ\)*g\(IQ,EQ\)/f\(IQ,EQ\)\)) s
5 390 M
(It has to be mentioned here f is nothing but the first temporal derivative of g evaluated a) s
5 379 M
(t time t i.e f = dg/dt.) s
5 368 M
(        => E = h\(IQ\)*e^\(k*h\(IQ\)*g\(IQ,EQ\)/g'\(IQ,EQ\)\)) s
5 346 M
(Alternatively, f and g can be substituted directly if known and integrable:) s
5 335 M
(        g'\(IQ,EQ\) = k*h\(IQ\)*g\(IQ,EQ\)) s
5 324 M
(        g'\(IQ,EQ\) = k*h\(IQ\)*g\(IQ,EQ\)) s
5 313 M
(        log g\(IQ,EQ\) = k*M*t + c) s
5 302 M
(        g\(IQ,EQ\) = h\(IQ\)*e^\(k*h\(IQ\)*t\)) s
5 280 M
(Curiously, function g which depends on EQ has no equivalent in RHS except time duration t a) s
5 269 M
(nd a constant k. This is probably because time is measured in terms of mistakes in the inte) s
5 258 M
(gral above and EQ is function of mistakes. Intrinsic merit function M does not involve EQ b) s
5 247 M
(ecause mistakes alone are usually emotive in the context of social profiles \(bounded ration) s
5 236 M
(ality\) and merit must be independent of emotions and time. Previous definition of experienc) s
5 225 M
(e can be used as a ranking metric for human social profiles as below for comparison of two ) s
5 214 M
(humans after evaluating h, g and g' for some time duration subject to disclaimer that follo) s
5 203 M
(ws:) s
5 192 M
(        g\(IQ1,EQ1\) = h\(IQ1\)*e^\(k*h\(IQ1\)*t1\)) s
5 181 M
(        g\(IQ2,EQ2\) = h\(IQ2\)*e^\(k*h\(IQ2\)*t2\)) s
5 170 M
(Disclaimer: Previous model of merit based on IQ and EQ are purely presumptive and disputabl) s
5 159 M
(e because of lack of well-defined Bose-Einstein "least energy" counterpart for human profil) s
5 148 M
(es.) s
5 126 M
(This model is quite generic and should apply to any computable function including boolean l) s
5 115 M
(earnt by mistake bounds. For boolean function learning, this model implies total number of ) s
5 104 M
(mistakes corrected at time t \("experience"\) depends exponentially on learning time i.e if t) s
5 93 M
(he mistake bound learning algorithm is polynomial time in number of variables, number of mi) s
5 82 M
(stakes corrected is exponential in number of variables. For learning 3CNFs polynomial time ) s
5 71 M
(mistake bound in RHS implies exponential number of mistakes have been corrected \(function g) s
5 60 M
(\) in LHS but an existing result implies if polynomial time learning is possible for 3CNFs t) s
5 49 M
(here is no polynomial time algorithm for SAT \(section 368\) \(But, isn't correcting exponenti) s
5 38 M
(al number of mistakes in polynomial time a nemesis of SETH?\).) s
5 16 M
(Mistakes in the social networks context are proportional to bounded rationality of the huma) s
5 5 M
(n social profile vertices of the social network. Bounded rationality in turn arises by inab) s
_R
S
%%Page: (250) 250
%%BeginPageSetup
_S
18 36 translate
/pagenum 250 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (250) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ility of a human being to make 100% correct decision because of cognitive, psychological, e) s
5 731 M
(motional, time limitations. Decision taken is termed satisfactory than optimal and such sub) s
5 720 M
(optimal decision is called satisficing. Thus emotional quotient and bounded rationality are) s
5 709 M
( related. Measuring emotional quotient \(intelligence+emotions\) than intelligence quotient \() s
5 698 M
(intelligence alone\) in social network profiles is equivalent to quantifying the sentiments ) s
5 687 M
(of social network tweets/wallposts/likes etc.,) s
5 665 M
(Thus following equivalence is conspicuous: Emotional Quotient \(proportional to\) Bounded Rat) s
5 654 M
(ionality \(proportional to\) Sentiment polarity of Social profile data e.g obtained by Sentiw) s
5 643 M
(ordnet sentiment analysis. This is an approximate estimation of mistake-prone-ness and appl) s
5 632 M
(ies to decision errors of voters in Condorcet Jury Theorem group decision circuit too.) s
5 610 M
(BackPropagation is a mistake bound deep-learning algorithm refining a perceptron by trial a) s
5 599 M
(nd error iterations. Previous differential equation for experiential learning is equivalent) s
5 588 M
( to a time-evolving recursive mistake correction tree described below:) s
5 577 M
(At time x, tree reaches level l\(x\). Each node in the tree is a corrected mistake and each m) s
5 566 M
(istake corrected at level l\(x\) is subtree root for n corrected mistakes in level l\(x+1\). Th) s
5 555 M
(us each level l\(x\) of the learning tree is the set of mistakes made at time x. In the langu) s
5 544 M
(age of NC-PRAM  circuit families, each node is a PRAM processor correcting a mistake. After) s
5 533 M
( time duration x, this learning tree has 2^x-1 nodes correcting exponential number of mista) s
5 522 M
(kes. In NC notation, if number of mistake correcting processors=2^x=n, depth of the circuit) s
5 511 M
( is O\(logn\) equal to learning time x. This is a hypothetical parallel learning algorithm in) s
5 500 M
( non-uniform NC. This recursive mistake correction tree is nothing but a translation of dif) s
5 489 M
(ferential equation dE/dt=kME. Outdegree of each vertex \(number of future mistakes corrected) s
5 478 M
( by a PRAM processor\) is determined by merit M, and delta increase in learning is number of) s
5 467 M
( mistakes corrected at level l\(x\) after time x = M*2^\(l\(x\)\). This should apply to backpropa) s
5 456 M
(gation weight update iterations because each error term is a mistake. Perceptrons are in TC) s
5 445 M
(=AC=NC which is same as previous PRAM recursive learning.) s
5 423 M
(Caveat is the previous recursive mistake correction tree is not traditional bottom-up evalu) s
5 412 M
(ation circuit but is top-down based on heuristic: mistake corrected at time x helps correct) s
5 401 M
(ing n number of mistakes at time x+deltax inspired by a differential equation for experient) s
5 390 M
(ial learning.It makes sense to define "least energy/fitness" of a social network profile ve) s
5 379 M
(rtex to be equal to function g above thereby sufficiently weighing both merit and experient) s
5 368 M
(ial learning. Social networks fall into two classes: Professional\(e.g LinkedIn/Stackoverflo) s
5 357 M
(w/Quora/Academic Citation Networks\) and Personal\(e.g Facebook/Twitter/Instagram/Whatsapp\). ) s
5 346 M
(Aforementioned definition of least energy as function of merit and experience applies only ) s
5 335 M
(to Professional social networks. Stackoverflow is a special case of professional social pro) s
5 324 M
(file - users up or down vote answers to a question which is fame-driven and not merit-drive) s
5 313 M
(n. Least energy in personal social networks is totally unrelated to merit and experience an) s
5 302 M
(d should more or less quantify definition of fitness in Facebook mentioned in 438.5 - profi) s
5 291 M
(le having high nett positive emotive sentiment evaluated from wallposts/tweets/likes/replie) s
5 280 M
(s/retweets. Personal social networks are replete with spam,chutzpah,trolls,expletives,emoji) s
5 269 M
(s,satires etc., requiring parsing/filtering in Sentiment Analysis. Reference 443.4 analyzes) s
5 258 M
( the Merit Versus Fame problem in academic citations which belongs to Professional social n) s
5 247 M
(etwork category. In essence ranking humans on intrinsic merit is two-fold: 1\) Merit-Experie) s
5 236 M
(nce ranking 2\) Personal Emotive ranking. These two rankings need not coincide and define in) s
5 225 M
(trinsic fitness/least energy of a person in two disjoint contexts. In literature, fitness/l) s
5 214 M
(east energy of a social profile vertex is not a point value but a probability distribution ) s
5 203 M
(i.e probability of a vertex/person having an intrinsic merit random variable value. Let us ) s
5 192 M
(assume that merit is defined as a vector of n dimensions as:) s
5 181 M
(        M=<m1,m2,m3,...,mn> where each mi is the weight for a merit variable) s
5 170 M
(For example, Probability distribution for merit/least energy/fitness can be defined as:) s
5 159 M
(        Pr\(M=mi\) = mi/|M| where |M| is the L1 norm of M) s
5 148 M
(        Sigma\(Pr\(M=mi\)\) = \(m1 + m2 + m3 + ... mn\) / |M| = 1) s
5 137 M
(Continuous Probability distribution is the polynomial passing through above merit weight po) s
5 126 M
(ints.) s
5 104 M
(In generic sense, previous recursive mistake correction tree need not be a binary tree but ) s
5 93 M
(a graph: At any time point t, number of mistakes corrected by a social profile vertex thus ) s
5 82 M
(far forms an evolving triangular region of experience E, and each corrected mistake vertex ) s
5 71 M
(in this triangle causes some mistake to be corrected in a future trapezoidal region dE in t) s
5 60 M
(ime interval \(t,t+dt\) adjoining this triangle E weighted by intrinsic merit M. This intuiti) s
5 49 M
(vely captures the equation E = M*e^\(kMt\) \(dE/dt = kME\) and the paradigm "experience = learn) s
5 38 M
(ing from mistakes") s
5 16 M
(References:) s
5 5 M
(-----------) s
_R
S
%%Page: (251) 251
%%BeginPageSetup
_S
18 36 translate
/pagenum 251 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (251) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(443.1 Mistake bound learning - https://www.cs.utexas.edu/~klivans/lec1.ps - In this teacher) s
5 731 M
(/learner model, learner iteratively refines hypothesis based on mistakes pointed out by tea) s
5 720 M
(cher and number of mistakes are polynomially bounded.) s
5 709 M
(443.2 Learning quickly when irrelevant attributes abound - [Nick Littlestone] - http://cite) s
5 698 M
(seerx.ist.psu.edu/viewdoc/download?doi=10.1.1.130.9013&rep=rep1&type=pdf) s
5 687 M
(443.3 Bounded Rationality and Satisficing - https://en.wikipedia.org/wiki/Bounded_rationali) s
5 676 M
(ty) s
5 665 M
(443.4 Multiplex Networks with Intrinsic Fitness: Modeling the Merit-Fame Interplay via Late) s
5 654 M
(nt Layers - [Babak Fotouhi and Naghmeh Momeni] - https://arxiv.org/pdf/1506.04189.pdf - An ) s
5 643 M
(example of intrinsic merit versus fame in Academeic Citations graph - "...We consider a gro) s
5 632 M
(wing directed multiplex network that comprises two layers. Each node is assigned an intrins) s
5 621 M
(ic fitness, which models its quality. The fitness of a node never changes. Each node belong) s
5 610 M
(s to two layers: a merit layer and a fame layer. In the former, fitness values are the sole) s
5 599 M
( drivers of the growth mechanism. In the fame layer, attachment is preferential, that is, t) s
5 588 M
(he probability that a node receives a link from a newcomer is proportional to the total deg) s
5 577 M
(ree of that node, i.e., the sum of its degrees in both layers. For example, in the case of ) s
5 566 M
(citation networks, the interpretation of the model is as follows. Two distinct types of cit) s
5 555 M
(ations can be discerned.  The first type\342\\200\\224the meritocratic type\342\\200\\224is when a sc) s
5 544 M
(holar reads a paper, and cites it because of its content \(a citation which would be given r) s
5 533 M
(egardless of the number of citations that paper already has\). Another type of citation is w) s
5 522 M
(hat we call fame-driven. A paper can become trendy, or well-known in some literature \(parti) s
5 511 M
(cularly true for seminal papers which initiate a new subfield\), and many citations that it ) s
5 500 M
(receives would be solely due to its fame\342\\200\\224i.e., current number of citations,...") s
5 489 M
(443.5 Relation between Intrinsic Merit of two vertices and probability of creating link bet) s
5 478 M
(ween them - Page 27 - Equation 3.1 - http://bura.brunel.ac.uk/bitstream/2438/10345/1/Fullte) s
5 467 M
(xtThesis.pdf - a new vertex is assumed to have an apriori fitness and probability of establ) s
5 456 M
(ishing connection between a new node and an existing node in social networks is weighted av) s
5 445 M
(erage of probability of new node creation and edge creation between new node and existing n) s
5 434 M
(ode. From this edge probability an a posteriori fitness distribution can be derived for all) s
5 423 M
( vertices after a stationary markov chain random walk.) s
5 412 M
(443.6 First to Market is not Everything: an Analysis of Preferential Attachment with Fitnes) s
5 401 M
(s - [Christian Borgs, Jennifer Chayes, Constantinos Daskalakis \342\\210\\227 Sebastien Roch \342) s
5 390 M
(\\200\240] - https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/First-to-Marke) s
5 379 M
(t-is-not-Everything-an-Analysis-of-Preferential-Attachment-with-Fitness.pdf - Polya Urn mod) s
5 368 M
(el of preferential attachment and Power law relation between degree of a vertex in networks) s
5 357 M
( and its intrinsic fitness - "...A by-product of our technique is a precise characterizatio) s
5 346 M
(n of the vertex dynamics under preferential attachment with fitness. More specifically, if ) s
5 335 M
(a vertex v has fitness f, then our analysis implies that its degree dv\(t\) at time t scales ) s
5 324 M
(as dv\(t\) \342\\210\274  t^\(c*f\) , \(1\) where c is a global constant determined by the fitness distr) s
5 313 M
(ibution.  \(The details are omitted from this extended abstract.\) Hence, the logarithm of th) s
5 302 M
(e degree of the vertices directly reflects their quality. We note in passing that this coul) s
5 291 M
(d suggest new directions in the design of ranking or recommendation algorithms...". Roughly) s
5 280 M
( this implies, fame in social networks is exponentially related to merit. Previous experien) s
5 269 M
(ce-versus-merit temporal identity strikingly coincides with this. Fame=dv\(t\)=t^\(cf\) can be ) s
5 258 M
(rewritten as dv\(t\) = e^\(cf*logt\) which when constrasted against Experience E = M*e^\(kMt\), y) s
5 247 M
(ields E=f*e^\(cft\) setting fitness f= Merit M and k=c. Similarity between degree of a vertex) s
5 236 M
( and experience by matching LHS of these 2 expressions is obvious i.e experience of vertex ) s
5 225 M
(is proportional to its adjacency. This is intuitive because experience is gained after inte) s
5 214 M
(racting with other vertices and correcting mistakes while judging them. Alternatively, Expe) s
5 203 M
(riential Learning E can be defined in terms of time evolving degree of vertex :) s
5 192 M
(        log\(dv\(t\)\) = cf*logt) s
5 181 M
(        f=log\(dv\(t\)\)/clog\(t\)) s
5 170 M
(        Since f=M, E = M*e^\(kMt\) = log\(dv\(t\)\) * e^\(klog\(dv\(t\)\)*t/clogt\) / clogt) s
5 159 M
(443.7 Degree distribution and Intrinsic Fitness - https://www.cs.upc.edu/~CSN/slides/08netw) s
5 148 M
(ork_dynamics.pdf - "... Consider f \(xi , xj\) = \(xi*xj\)/x*M\)^MM where x\(M\) is the largest va) s
5 137 M
(lue of x in the network. Then the mean degree of a node of fitness x is k\(x\) = nx/x\(M\)^2 * ) s
5 126 M
(integral\(0,\342\\210\\236\) [y\317\\201\(y\)dy] = N<x>*x/x\(M\)^2 ... " - Expected Degree of vertex and F) s
5 115 M
(itness of vertex are thus related - Expectation of Fitness PDF is obtained by integral.) s
5 104 M
(443.8 Ghadge et al Model of Intrinsic Fitness of a vertex - https://www.cs.umb.edu/~duc/pub) s
5 93 M
(lications/papers/ijpeds10.pdf - A statistical construction of power-law networks - [Shilpa ) s
5 82 M
(Ghadgea, Timothy Killingback, Bala Sundaram and Duc A. Trana] - "... To motivate the defini) s
5 71 M
(tion of our procedure, we observe that in most real-world networks the nodes will have an a) s
5 60 M
(ttribute or an associated quantity that represents, in some way, the likelihood that other ) s
5 49 M
(nodes in the network will connect to them. For example, in a citation network \(see, e.g. [2) s
5 38 M
(2]\), the different nodes \(i.e. papers\) will have different propensities to attract links \(i) s
5 27 M
(.e. citations\). The various factors that contribute to the likelihood of a paper being cite) s
5 16 M
(d could include the prominence of the author\(s\), the importance of the journal in which it ) s
5 5 M
(is published, the apparent scientific merit of the work, the timeliness of the ideas contai) s
_R
S
%%Page: (252) 252
%%BeginPageSetup
_S
18 36 translate
/pagenum 252 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (252) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ned in the paper, etc. Moreover, it is plausible that the overall quantity that determines ) s
5 731 M
(the propensity of a paper to be cited depends essentially multiplicatively on such various ) s
5 720 M
(factors. The multiplicative nature is likely in this case since if one or two of the factor) s
5 709 M
(s happen to be very small, then the overall likelihood of a paper being cited is often also) s
5 698 M
( small, even when other factors are not small.  The case of Mendel\342\\200\\231s work on geneti) s
5 687 M
(cs constitutes an exemplar of this \342\\200\\223 an unknown author and an obscure journal were ) s
5 676 M
(enough to bury a fundamentally important scientific paper.  Motivated by this and the other) s
5 665 M
( examples, we consider it reasonable that in many complex networks each node will have asso) s
5 654 M
(ciated to it a quantity, which represents the property of the node to attract links, and th) s
5 643 M
(is quantity will be formed multiplicatively from a number of factors. That is, to any node ) s
5 632 M
(i in the network there is associated a non-negative real number Fi , which is called the fi) s
5 621 M
(tness of node i, and which is of the form Fi = product\(fl\) ,l=1 to L where each fl is non-n) s
5 610 M
(egative and real. ..." - this multiplicative intrinsic merit is mapped to summation of loga) s
5 599 M
(rithms of merit variables. Central Limit Theorem implies summation of random variables conv) s
5 588 M
(erge to a Gaussian irrespective of values of merit variables. Merit variables are dimesiona) s
5 577 M
(l projections of merit vector defined above. CLT also implies merit \(social or linguistic\) ) s
5 566 M
(converges to a Gaussian as it were in real life - tails are entities with highest and lowes) s
5 555 M
(t merit and modal is of maximum merit. Interestingly, this prohibits multimodal. It has to ) s
5 544 M
(be noted here Recursive Gloss Overlap algorithm  computes the intrinsic merit of a text as ) s
5 533 M
(a product of graph complexity merit variables \(Section 4.6 of https://arxiv.org/abs/1006.44) s
5 522 M
(58, Section 5.6 of https://tac.nist.gov//publications/2010/participant.papers/CMI_IIT.proce) s
5 511 M
(edings.pdf\). Recursive Gloss Overlap graph intrinsic merit is indeed a mapping of social ne) s
5 500 M
(twork intrinsic fitness to graph representation of texts - socially networked humans are re) s
5 489 M
(placed by hyperlinked texts.) s
5 478 M
(443.9 Vertex Intrinsic Fitness in Social Networks - [Servedio,Caldarelli] - https://arxiv.o) s
5 467 M
(rg/pdf/cond-mat/0309659.pdf) s
5 456 M
(443.10 Bibliography listed in Social Networking: Mining, Visualization and Security - [Mrut) s
5 445 M
(yunjaya Panda, Satchidanda Dehuri, Gi-Nam Wang] - https://books.google.co.in/books?id=5-W5B) s
5 434 M
(QAAQBAJ&pg=PA42&lpg=PA42&dq=intrinsic+fitness+social+network&source=bl&ots=KD2lkaUq9Q&sig=6) s
5 423 M
(WmEYptNmnz4X2Y4qrQHJIRpsHk&hl=en&sa=X&ved=0ahUKEwi177OJ7dHWAhUBtY8KHZ9hBPcQ6AEITDAH#v=onepa) s
5 412 M
(ge&q=intrinsic%20fitness%20social%20network&f=false) s
5 401 M
(443.11 Vertex Fitness defined in terms of Unfitness - Network growth models: A behavioural ) s
5 390 M
(basis for attachment proportional to fitness - [Michael Bell* , Supun Perera, Mahendrarajah) s
5 379 M
( Piraveenan, Michiel Bliemer, Tanya Latty, Chris Reid] - https://arxiv.org/pdf/1702.04046.p) s
5 368 M
(df) s
5 357 M
(443.12 A \316\272-deformed Model of Growing Complex Networks with Fitness - [Massimo Stella , Mar) s
5 346 M
(kus Brede] - https://arxiv.org/pdf/1404.3276.pdf - Generalizes the Bianconi-Barabasi Bose-E) s
5 335 M
(instein Condensation Least Energy Intrinsic Fitness of a vertex - https://arxiv.org/pdf/140) s
5 324 M
(4.3276.pdf) s
5 313 M
(443.13 Various Intrinsic Fitness Models - Barabasi-Albert, Barabasi-Bianconi, Ghadge Log No) s
5 302 M
(rmal Fitness Attachment, Caldarelli Fitness - https://www.cs.umb.edu/~duc/www/research/publ) s
5 291 M
(ications/papers/bookchapter_fitness_models.pdf - Of these Ghadge LNFA multiplicative intrin) s
5 280 M
(sic fitness has close resemblance to Recursive Gloss Overlap Intrinsic Merit and Recursive ) s
5 269 M
(Lambda Function Growth Graph Tensor Neuron Network Intrinsic Merit which are both multiplic) s
5 258 M
(ative and additive.) s
5 247 M
( ) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(-------------------------------------------) s
5 214 M
(444. \(FEATURE-DONE\) Scheduler Analytics Update - Commits - 10 August 2017) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(-------------------------------------------) s
5 181 M
(\(*\) There is a problem in defining expected priorities in BackPropagation Neural Network ou) s
5 170 M
(tput layer. This is necessary for) s
5 159 M
(weight update to happen iteratively and to quantify error between expected and actual neura) s
5 148 M
(l network output) s
5 137 M
(\(*\) Output layer of BackPropagation is an indicator of process priority learnt by the perce) s
5 126 M
(ptron.) s
5 115 M
(\(*\) Previously expected priorities were hardcoded. This has been changed as below:) s
5 104 M
(        \(*\) Set of processes currently running are clustered and stored in an input JSON fi) s
5 93 M
(le) s
5 82 M
(        \(*\) This JSON dictionary has key-value pairs mapping a process class to its apriori) s
5 71 M
( expected priority) s
5 60 M
(        \(*\) Scheduler Analytics loads this JSON and looks up the expected priority for each) s
5 49 M
( process executable by its process class) s
5 38 M
(        \(*\) Presently process class is just a substring of the executable name) s
5 27 M
(        \(*\) BackPropagation does string match of this process class to executable name and ) s
5 16 M
(finds the expected priority from JSON dict) s
5 5 M
(        \(*\) BackPropagation iteration updates the weights of all 3 layers) s
_R
S
%%Page: (253) 253
%%BeginPageSetup
_S
18 36 translate
/pagenum 253 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (253) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\(*\) Defining apriori class of a process is subjective and instead of substring of executabl) s
5 731 M
(e, an independent clustering algorithm having a) s
5 720 M
(suitable distance function can be used to write the JSON classification of processes. For e) s
5 709 M
(xample, unix process groups are numerical classes of) s
5 698 M
( processes.) s
5 687 M
(\(*\) Previous generation of JSON classes for processes and backpropagation weight update ite) s
5 676 M
(ration is the first phase of analytics.) s
5 665 M
(\(*\) In the second phase, weight-updated BackPropagation Neural Network takes as input runti) s
5 654 M
(me process statistics \(CPU, Memory and Context Switches\)) s
5 643 M
(to predict the actual priority of a process belonging to the apriori class.) s
5 632 M
(\(*\) This is a depth 2 tree evaluation:) s
5 621 M
(        Static - apriori expected class of a process and BackPropagation iteration) s
5 610 M
(        Dynamic - fine grained priority of a process within the previous static class by ev) s
5 599 M
(aluating the multilayer neural network) s
5 577 M
(Presently, input variables are per process CPU percentage, Memory percentage and ratio of i) s
5 566 M
(nvoluntary context switches to total context switches. Involuntary context switches are usu) s
5 555 M
(ally number of pre-emptions by the scheduler on time-slice expiry and Voluntary context swi) s
5 544 M
(tches are number of system call and I/O pre-emptions.) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(-----------------------------------------------) s
5 500 M
(445.\(FEATURE-DONE\) Celestial Pattern Mining Update - specific to NeuronRain Research in Sou) s
5 489 M
(rceForge repositories - recreated Sequence Mined Rules - Commits - 22 August 2017) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(-----------------------------------------------) s
5 456 M
(\(*\) Added a documentation text file asfer-docs/NeuronRain_Research_Celestial_Pattern_Mining) s
5 445 M
(.txt describing how astronomical pattern) s
5 434 M
(mining is done and code involved therein.) s
5 423 M
(    ) s
5 412 M
(\(*\) In python-src/autogen_classifier_dataset/MaitreyaToEncHoroClassified.py upgraded Maitre) s
5 401 M
(ya's Dreams \(http://www.saravali.de/\)) s
5 390 M
(ephemeris text client version to 7.1.1) s
5 379 M
(   ) s
5 368 M
(\(*\) Created separate string encoded astronomical data files for Earthquakes\(USGS 100 year e) s
5 357 M
(arthquake dataset\) and) s
5 346 M
(Storms\(NOAA 100 year HURDAT2 dataset\) Datasets from python-src/autogen_classifier_dataset/M) s
5 335 M
(aitreyaToEncHoroClassified.py) s
5 324 M
(\(zodiacal does not have ascendant, while ascrelative is rotated string relative to ascendan) s
5 313 M
(t. Ascendant is defined astronomically as the) s
5 302 M
( degree of the zodiac sign rising at the time of an event in eastern horizon\)) s
5 291 M
(    ) s
5 280 M
(\(*\) Executed python-src/SequenceMining.py on these 2 datasets. The results have been writte) s
5 269 M
(n to python-src/MinedClassAssociationRules.txt) s
5 258 M
(    ) s
5 247 M
(\(*\) python-src/autogen_classifier_dataset/asfer_dataset_segregator.sh has updated asfer rel) s
5 236 M
(ative location) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(------------------------------------------------) s
5 192 M
(446. \(FEATURE-DONE\) Celestial Data Pattern Mining - Updates to autogen_classifier_dataset p) s
5 181 M
(re-processing and classification of datasets - 23 August 2017) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(------------------------------------------------) s
5 148 M
(\(*\) An 8 year old lurking bug in cpp-src/NaiveBayesClassifier.cpp has been resolved.It was ) s
5 137 M
(causing a null class to be returned after) s
5 126 M
(bayesian argmax\(\) computation.) s
5 115 M
(\(*\) Lot of new articles on earthquakes and hurricanes have been added as training dataset f) s
5 104 M
(or NaiveBayesian Classifier.These articles also) s
5 93 M
(have lot of research information on predicting hurricanes and earthquakes) s
5 82 M
(\(*\) python-src/autogen_classifier_dataset/AsferClassifierPreproc.py has been updated to inc) s
5 71 M
(lude new articles in training data for NaiveBayesian) s
5 60 M
(\(*\) words.txt,word-frequency.txt,training-set.txt,topics.txt,test-set.txt have been re-crea) s
5 49 M
(ted by executing python-src/autogen_classifier_dataset/AsferClassifierPreproc.py) s
5 38 M
(\(*\) Datasets are classified into python-src/autogen_classifier_dataset/EventClassDataSet_Ea) s
5 27 M
(rthquakes.txt and python-src/autogen_classifier_dataset/EventClassDataSet_Storms.txt by exe) s
5 16 M
(cuting asfer_dataset_segregator.sh) s
_R
S
%%Page: (254) 254
%%BeginPageSetup
_S
18 36 translate
/pagenum 254 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (254) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(--------------------------------------------------) s
5 720 M
(447. \(FEATURE-DONE\) Updated Ephemeris Search Script - Commits - 24 August 2017) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(--------------------------------------------------) s
5 687 M
(Updated mined class association rule parsing in python-src/MaitreyaEncHoro_RuleSearch.py) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(--------------------------------------------------) s
5 643 M
(448. \(FEATURE-DONE\) Approximate CNFSAT Solver update - SciPy Sparse - 28 August 2017) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(--------------------------------------------------) s
5 610 M
(\(*\) imported scipy.sparse.linalg least squares function lsqr\(\).) s
5 599 M
(\(*\) Number of clauses and variables set to 18 each.) s
5 588 M
(\(*\) After 673 iterations of Random 3CNFs following satisfied clauses data were observed:) s
5 577 M
(Percentage of CNFs satisfied so far: 58.7537091988) s
5 566 M
(Average Percentage of Clauses per CNF satisfied: 97.0161556215) s
5 544 M
(From LLL, If p < 1/[e\(d+1\)] is the probability of an event \(not satisfying a clause\) :) s
5 533 M
(Probability that clause is satisfied: 1-p > \(1-1/[e\(d+1\)]\)) s
5 522 M
(Probability that all of the clauses are satisfied > \(1-1/[e\(d+1\)]\)^\(d+1\) \(for d+1 clauses\)) s
5 511 M
(Probability that some of the clauses are satisfied < 1-\(1-1/[e\(d+1\)]\)^\(d+1\)) s
5 489 M
(If all clauses overlap:) s
5 478 M
(In previous example d+1 = 18 and thus probability that all of the clauses are satisified fo) s
5 467 M
(r any random CNF is :) s
5 456 M
(\(1-1/[e\(18\)]\)^\(18\)  > ~68.96%) s
5 445 M
(and probability that some but not all of the clauses being satisified for any random CNF is) s
5 434 M
(:) s
5 423 M
(1-\(1-1/[e\(18\)]\)^\(18\)  < ~31.043%) s
5 401 M
(If none of the clauses overlap:) s
5 390 M
(d=0 and probability that all the clauses are satisfied  \(1-1/e\) > ~63.21%) s
5 379 M
(and probability that some but not all of the clauses being satisified for any random CNF is) s
5 368 M
(  < ~36.79%) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(--------------------------------------------------) s
5 324 M
(449. \(THEORY\) Analysis of Error Upperbound for Approximate CNFSAT Solver based on Lovasz Lo) s
5 313 M
(cal Lemma clause dependency digraph - 29 August 2017) s
5 302 M
(,30 August 2017) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(--------------------------------------------------) s
5 269 M
(Probability of a clause being not satisfied from Lovasz Local Lemma:) s
5 258 M
(        p < 1/\(e\(d+1\)\)) s
5 247 M
(Probability of a clause being satisfied:) s
5 236 M
(        1-p > 1 - 1/\(e\(d+1\)\)) s
5 225 M
(Probability of all n clauses being satisfied \(ExactSAT\):) s
5 214 M
(        \(1-p\)^n > [1 - 1/\(e\(d+1\)\)]^n) s
5 203 M
(Probability of some or none of the clauses being satisfied:) s
5 192 M
(        1-\(1-p\)^n < 1 - [1 - 1/\(e\(d+1\)\)]^n) s
5 181 M
(If there are no overlaps, d=0:) s
5 170 M
(        Probability of all n clauses being satisfied = \(1-p\)^n > [1 - 1/e]^n = [1 - 1/e]^n) s
5 159 M
(        Probability of some or none of the clauses being satisfied = 1 - \(1-p\)^n < 1 - [1 -) s
5 148 M
( 1/e]^n) s
5 126 M
(Probability of atleast k of n clauses being satisfied:) s
5 115 M
(        Pr[#SATclauses >= k] = Pr[#SATclauses = k] + Pr[#SATclauses = k+1] + Pr[#SATclauses) s
5 104 M
( = k+2] + ... + Pr[#SATclauses = n]) s
5 82 M
(        = \(1-p\)^k + \(1-p\)^\(k+1\) + ... + \(1-p\)^n) s
5 60 M
(if q = 1-p:) s
5 49 M
(        = q^k + q^\(k+1\) + ... + q^n) s
5 38 M
(        = q^k * \(1 + q + q^2 + ... + q^\(n-k\)\)  [Geometric series]) s
5 27 M
(        = q^k \(1 - q^\(n-k+1\)\) / \(1-q\)) s
5 16 M
(But from LLL, p < 1/e\(d+1\)) s
5 5 M
(        q = 1 - p > \(ed+e-1\)/\(ed+e\) ) s
_R
S
%%Page: (255) 255
%%BeginPageSetup
_S
18 36 translate
/pagenum 255 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (255) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(Substituting for q:) s
5 720 M
(        [\(ed+e-1\)/\(ed+e\)]^k [1 - [\(ed+e-1\)/\(ed+e\)]^\(n-k+1\)]) s
5 709 M
(        ---------------------------------------) s
5 698 M
(                1 - [\(ed+e-1\)/\(ed+e\)]) s
5 676 M
(#################################################################) s
5 665 M
(#Probability of atleast k of n clauses being satisfied:         #) s
5 654 M
(#       [ed+e-1]^k [\(ed+e\)^\(n-k+1\) - [ed+e-1]^\(n-k+1\)]          #) s
5 643 M
(#       ---------------------------------------                 #) s
5 632 M
(#                [\(ed+e\)^n]                                     #) s
5 621 M
(#################################################################) s
5 599 M
(if k=n:) s
5 588 M
(        \(ed+e-1\)^n / \(ed+e\)^n) s
5 566 M
(If overlap of variables across the clauses is huge, ed+e-1 ~ ed+e) s
5 555 M
(Maximum overlap d is \(n-1\) i.e a clause has common variables across all other clauses) s
5 533 M
(When d is maximum:) s
5 522 M
(------------------) s
5 511 M
(Lt \(d -> n-1, n -> infinity\) \(\(ed+e-1\)/\(ed+e\)\)^n) s
5 500 M
(        = [\(\(e\(n-1\)+e-1\)/\(e\(n-1\) + e\)]^n) s
5 489 M
(        = [\(en-e+e-1\)/\(en-e+e\)]^n) s
5 478 M
(        = [\(en-1\)/\(en\)]^n) s
5 467 M
(        = [\(1-1/ne\)]^n) s
5 456 M
(        = [1 - 0.3678/n]^n ) s
5 445 M
(For infinite n:) s
5 434 M
(        = e^\(-0.3678\)) s
5 423 M
(Pr[#SATclauses = n]     = 69.22% ) s
5 401 M
(When overlap is absent at d=0:) s
5 390 M
(------------------------------) s
5 379 M
(Pr[#SATclauses = n]     = \(e-1\)^n/e^n = \(0.6321\)^n -> 0 for huge n) s
5 357 M
(When d=1 \(minimum overlap\):) s
5 346 M
(---------------------------) s
5 335 M
(Pr[#SATclauses = n] = [2e-1]^n / [2e]^n = [1-0.5/e]^n = \(0.81606\)^n -> 0 for huge n) s
5 313 M
(=> When the number of variables overlapping across clauses tends to a huge number almost eq) s
5 302 M
(ual to number of clauses, the system of) s
5 291 M
(linear equations obtained by relaxing each of the clauses are solved by least squares and p) s
5 280 M
(robability of all clauses being satisfied tends ) s
5 269 M
(to 69.22%.  High overlap of variables across clauses is the most probable occurrence in rea) s
5 258 M
(l world SAT solvers. If the overlap as random variable is uniformly distributed:) s
5 247 M
(        Expected value of d = 1/\(n-1\) * \(n-1\)n/2 = n/2) s
5 225 M
(For mean overlap of n/2 variables across clauses:) s
5 214 M
(#################################################################) s
5 203 M
(#Probability of atleast k of n clauses being satisfied:         #) s
5 192 M
(#       [en/2+e-1]^k [\(en/2+e\)^\(n-k+1\) - [en/2+e-1]^\(n-k+1\)]    #) s
5 181 M
(#       ---------------------------------------                 #) s
5 170 M
(#                [\(en/2+e\)^n]                                   #) s
5 159 M
(#################################################################) s
5 137 M
(When k=n:) s
5 126 M
(        [en/2+e-1]^n ) s
5 115 M
(        ------------) s
5 104 M
(        [en/2+e]^n) s
5 82 M
(        = [1 - 0.7357888/\(n+1\)]^n > [1 - 0.7357888/n]^n) s
5 71 M
(        = Lt \(n->infinity\) [1 - 0.735758882/n\)]^n = e^-0.73578882   ) s
5 60 M
(        => Pr[#SATclauses = n] > 47.91%) s
5 38 M
(=> When the number of variables overlapping across clauses are uniformly distributed, Proba) s
5 27 M
(bility of all clauses being satisfied per random) s
5 16 M
(3CNF is lowerbounded as 47.91% when number of clauses tend to infinity.) s
5 5 M
(=> Caveat: This is an average case analysis of overlaps and best case analysis for number o) s
_R
S
%%Page: (256) 256
%%BeginPageSetup
_S
18 36 translate
/pagenum 256 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (256) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(f clauses satisfied. This implies SAT is approximately solvable in polynomial time asymptot) s
5 731 M
(ically in infinite if the overlaps are uniformly distributed. This is almost an 1/2-approxi) s
5 720 M
(mation in average overlap setting, similar to Christofides algorithm for TSP. This is not a) s
5 709 M
(n abnormal appoximation and it does not outrageously contradict witnesses towards P != NP d) s
5 698 M
(escribed earlier in this document.) s
5 676 M
(Correction to Geometric distribution LLL estimate:) s
5 665 M
(--------------------------------------------------) s
5 654 M
(Previous bound assumes Pr[#SATclauses >= k] is geoemtric distribution. If k satisfying clau) s
5 643 M
(ses are chosen from total n clauses in 3CNF, it is a tighter binomial distribution and not ) s
5 632 M
(geometric.) s
5 610 M
(=> Pr[#SATclauses >= k] = summation\(nCl*\(1-p\)^l*\(p\)^\(n-l\)\), l=k,k+1,k+2,...,n) s
5 588 M
(If k=n/2, this summation is exactly same as Condorcet Jury Theorem where each clause in the) s
5 577 M
( 3CNF is a voter = probability of majority of the clauses are satisfied. Each satisfying cl) s
5 566 M
(ause is +1 vote and each rejecting clause is -1 vote. Condorcet Jury Theorem thus applies d) s
5 555 M
(irectly and Pr[#SATclauses >= k] tends to 1 if p > 1/2 and tends to 0 if p < 1/2. For p=0.5) s
5 544 M
(, Pr[#SATclauses >= k] = 0.5. From LLL, p=0.5 implies e*0.5*\(d+1\) > 1 \(or\) \(d+1\) > 2/e. For) s
5 533 M
( arbitrary values of k, computing closed form of binomial coefficient sum for Pr[#SATclause) s
5 522 M
(s >= k] requires hypergeometric functions.) s
5 500 M
(When k=n:) s
5 489 M
(---------) s
5 478 M
(Pr[#SATclauses = n] = \(1-p\)^n) s
5 467 M
(From LLL, ep\(d+1\) > 1 => p > 1/e\(d+1\) ) s
5 456 M
(        1-p < 1 - 1/e\(d+1\)) s
5 445 M
(        1-p < 1 - 0.36788/\(d+1\)) s
5 434 M
(        \(1-p\)^n < \(1 - 0.36788/\(d+1\)\)^n ) s
5 412 M
(d=0, no overlaps:) s
5 401 M
(-----------------) s
5 390 M
(        Pr[#SATclauses=n] = \(1-p\)^n < \(0.6321\)^n which tends to 0 for huge number of clause) s
5 379 M
(s n.) s
5 357 M
(d=n-1, maximum overlaps:) s
5 346 M
(------------------------) s
5 335 M
(        Pr[#SATclauses=n] = \(1-p\)^n < \(1 - 0.36788/n\)^n) s
5 324 M
(        But Limit\(n->infinity\) \(1 - 0.36788/n\)^n = e^\(-0.36788\) = 0.692200241) s
5 313 M
(        Pr[#SATclauses=n] < 69.22% for huge n.) s
5 291 M
(d=n/2, expected overlaps in uniform distribution:) s
5 280 M
(--------------------------------------------------) s
5 269 M
(        Pr[#SATclauses=n] = \(1 - 1/\(e\(n/2+1\)\)\)^n = \(1 - 0.735758882/\(n+2\)\)^n) s
5 258 M
(        0.735758882/\(n+2\) < 0.735758882/n) s
5 247 M
(        \(1 - 0.735758882/\(n+2\)\)^n > \(1 - 0.735758882/n\)^n) s
5 236 M
(        As n->infinity, \(1-0.73578882/\(n+2\)\) > e^\(-0.73578882\) ~ 47.91%) s
5 225 M
(        => Pr[#SATclauses=n] > 47.91%) s
5 203 M
(=> 97-98% satisfied clauses found in few hundred iterations above for upto 20 clauses and 2) s
5 192 M
(0 variables should tend asymptotically to 69.22% if there are high overlaps, high number of) s
5 181 M
( clauses and variables. For average number of overlaps, Pr[#SATclauses=n] > 47.91% and does) s
5 170 M
( not rule out convergence to 98%. This can be substituted for k for probability that 98% cl) s
5 159 M
(auses are satisfied as below: ) s
5 148 M
(        Pr[#SATclauses >= 0.98n] = summation\(nCl*\(1-p\)^l*\(p\)^\(n-l\)\), l=k,k+1,k+2,...,n) s
5 137 M
(This is tail bound for binomial distribution which is defined as:) s
5 126 M
(        Pr[X >= k] <= e^\(-nD\(k/n || p\)\) ) s
5 115 M
(where relative entropy D\(k/n || p\) = k/n log \(k/np\) + \(1-k/n\)log \(\(1-k/n\)/\(1-p\)\)) s
5 104 M
(But k/n = 0.98n/n = 0.98) s
5 93 M
(=> D\(k/n || p\) = k/n log \(k/np\) + \(1-k/n\)log \(\(1-k/n\)/\(1-p\)\) = 0.98log\(0.98/p\) + 0.02log\(0.) s
5 82 M
(02/\(1-p\)\)) s
5 71 M
(=> Pr[X >= 0.98n] <= e^\(-n*\(0.98log\(0.98/p\) + 0.02log\(0.02/\(1-p\)\)\)\) ) s
5 60 M
(From LLL, p < 1/e\(d+1\). Substituting for p:) s
5 49 M
(=> Pr[X >= 0.98n] <= e^\(-n*\(0.98log\(0.98e\(d+1\)\) + 0.02log\(0.02\(ed+e\)/\(ed+e-1\)\)\)\) ) s
5 38 M
(Lt\(n->infinity\) e^\(-n*\(0.98log\(0.98e\(d+1\)\) + 0.02log\(0.02\(ed+e\)/\(ed+e-1\)\)\)\) = 0) s
5 16 M
(Pr\(#SATclauses <= n\) <= e^\(-\(np-n\)^2/2pn\) by Chernoff bounds. From LLL, p < 1/e\(d+1\). For a) s
5 5 M
(verage number of overlaps d=n/2, Chernoff bound reduces to:) s
_R
S
%%Page: (257) 257
%%BeginPageSetup
_S
18 36 translate
/pagenum 257 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (257) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Pr\(#SATclauses <= n\) <= e^\(-1/e\) ~ 69.22% which coincides with maximum overlaps bound above) s
5 731 M
(.) s
5 709 M
(Previous imply approximate CNF SAT solver by solving system of linear equations \(= clauses ) s
5 698 M
(relaxed to reals from binary\) is a 0.6922-approximation.) s
5 676 M
(References:) s
5 665 M
(-----------) s
5 654 M
(449.1 Sum of Binomial Coefficients - http://web.maths.unsw.edu.au/~mikeh/webpapers/paper87.) s
5 643 M
(pdf - "... \342\\200\\234For years [before working with) s
5 632 M
(George E. Andrews in 1973] I had been trying to point out that the rather confused world of) s
5 621 M
( binomial coefficient summations is best understood in the language of hypergeometric serie) s
5 610 M
(s identities. Time and again I would find first\342\\200\\223rate mathematicians who had never h) s
5 599 M
(eard of this insight and who would waste considerable time proving some apparently new bino) s
5 588 M
(mial coefficient summation which almost always turned out to be a special case of one of a ) s
5 577 M
(handful of classical hypergeometric identities. ...\342\\200\\235) s
5 566 M
(449.2 Binomial Distribution Tail Bounds - https://en.wikipedia.org/wiki/Binomial_distributi) s
5 555 M
(on#Tail_bounds) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(-----------------------------------------------------) s
5 511 M
(450.\(THEORY\) Analysis of Error Upperbound for Approximate CNFSAT Solver based on Lovasz Loc) s
5 500 M
(al Lemma clause dependency digraph - continued - 1 September 2017) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(-----------------------------------------------------) s
5 467 M
(\(*\) Least Squares lsqr\(\) function has been replaced by recent lsmr\(\) least square function ) s
5 456 M
(mentioned to be faster.) s
5 445 M
(\(*\) For 10 variables and 10 clauses for 54068 random 3CNF iterations following were the per) s
5 434 M
(centage of satisfied CNFs and clauses satisfied ) s
5 423 M
(per CNF:) s
5 412 M
(Percentage of CNFs satisfied so far: 79.6722706172) s
5 401 M
(Average Percentage of Clauses per CNF satisfied: 97.6276609517) s
5 390 M
(\(*\) Again the percentage of clauses satisfied per random 3CNF converges to ~98% after ~5400) s
5 379 M
(0 random 3CNFs.) s
5 368 M
(\(*\) The clauses are created by randomly choosing each literal and its negation independent ) s
5 357 M
(of any other literal or clause and thus are identically, independently distributed. CNFs ca) s
5 346 M
(n repeat since this is not a permutation.) s
5 335 M
(\(*\) Repetitive convergence of number of clauses satisfied per CNF to 98% is mysterious in v) s
5 324 M
(aried clause-variable combinations. ) s
5 313 M
(\(*\) Previous error bound analysis does not assume least squares and is based only on LLL. B) s
5 302 M
(ut Least Squares is about sum of squares of errors minimization i.e Error^2 = |Ax-b|^2 is m) s
5 291 M
(inimized e.g A'Ax=A'b, partial first derivative of error set to 0. System of equations tran) s
5 280 M
(slated from each 3CNF is overdetermined or underdetermined mostly i.e number of variables a) s
5 269 M
(nd number of clauses are not equal.) s
5 258 M
(\(*\) Motivation for least squares for boolean CNF is the relaxation achieved: An example ass) s
5 247 M
(ignment for a literal, 0.88 is inclined towards boolean 1 and 0.02 is inclined towards bool) s
5 236 M
(ean 0. ) s
5 225 M
(\(*\) Convergence to 98% implies probability of average number of clauses satisfied per 3CNF ) s
5 214 M
(> 0.98n must be almost 0.) s
5 203 M
(\(*\) Following Binomial Tail Bound:) s
5 192 M
(Pr[#SATclauses >= 0.98n] <= e^\(-n*\(0.98log\(0.98e\(d+1\)\) + 0.02log\(0.02\(ed+e\)/\(ed+e-1\)\)\)\) is ) s
5 181 M
(maximized when there are no overlaps - d=0. ) s
5 170 M
(Pr[#SATclauses >= 0.98n] <= e^\(-n*\(0.98log\(0.98e\) + 0.02log\(0.02\(e\)/\(e-1\)\)\)\)) s
5 159 M
(Pr[#SATclauses >= 0.98n] <= e^\(-n*\(0.41701 - 0.02999\)) s
5 148 M
(Pr[#SATclauses >= 0.98n] <= e^\(-n*0.38701\) ~ 0 for large n.) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(---------------------------------------------------) s
5 104 M
(451.\(THEORY\) PCP theorem, Hardness of Approximation, Least Squares SAT solver and Semidefin) s
5 93 M
(ite Programming - related to 450 - 2 September 2017) s
5 82 M
(and 3 September 2017) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(---------------------------------------------------) s
5 49 M
(Probabilistically Checkable Proof theorem implies it is NP-hard to find satisfiable instanc) s
5 38 M
(es or 7/8+epsilon satisfiable instance to 3SAT. There are Semidefinite Programming optimiza) s
5 27 M
(tion algorithms for MAX3SAT which replace the clauses by an arithmetized polynomial for eac) s
5 16 M
(h literal. Sum of these polynomials or Sum of Squares \(SOS\) of these polynomials is optimiz) s
5 5 M
(ed by Semidefinite decomposition. Positive literal x is replaced by \(1-x\)/2 and negation !x) s
_R
S
%%Page: (258) 258
%%BeginPageSetup
_S
18 36 translate
/pagenum 258 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (258) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( by \(1+x\)/2. Literal polynomials within each clause are multiplied. This is a polynomial ov) s
5 731 M
(er reals and is decomposed as XSX' > 0 i.e positive semi-definite. Values of these Sum and ) s
5 720 M
(Sum of Squares polynomials \(F\) for an assignment to CNF \(a\) are equal to number of clauses ) s
5 709 M
(violating an assignment. Semidefinite Program maximizes/minimizes the difference F\(a\)-e \(th) s
5 698 M
(us maximizing or minimizing the number of violating clauses\) where e is value of F for assi) s
5 687 M
(gnment a. In this context, the striking 98% convergence for percentage of clauses satisfied) s
5 676 M
(for multiple clause-variable combinations for least squares/LSMR solver gains importance. I) s
5 665 M
(t implies 7/8+epsilon=0.98 \(or 0.875 + 0.105 = 0.98\) satisfiable clauses per CNF if proved ) s
5 654 M
(for all permutations of variables-clauses-overlaps \(and that is a big if\) implying P=NP. At) s
5 643 M
(least a convergence to 0.875 if not 0.98 would suffice.) s
5 621 M
(References:) s
5 610 M
(-----------) s
5 599 M
(451.1 PCP and hardness of approximation - algorithm satisfying 7/8+delta clauses - https://) s
5 588 M
(cs.stackexchange.com/questions/71040/hardness-of-approximation-of-max-3sat) s
5 577 M
(451.2 SDP for MAX3SAT - http://www.isa.ewi.tudelft.nl/~heule/publications/sum_of_squares.pd) s
5 566 M
(f - Maximum number of clauses violating an assignment and Semidefinite Programming) s
5 555 M
(451.3 Binary Solutions to System of Linear Equations - https://arxiv.org/pdf/1101.3056.pdf) s
5 544 M
(451.4 Karloff-Zwick 7/8 algorithm for MAX3SAT - http://citeseerx.ist.psu.edu/viewdoc/summar) s
5 533 M
(y?doi=10.1.1.51.1351 - A 7/8-approximation algorithm for MAXSAT? - This is randomized polyn) s
5 522 M
(omial time algorithm and satisfies an expected >= \(7/8\)n clauses.) s
5 511 M
(451.5 Inapproximability results - [Johan Hastad] - https://www.nada.kth.se/~johanh/optimali) s
5 500 M
(nap.pdf - Assuming P != NP, MAX3SAT can not have polynomial time algorithm satisfying > \(7/) s
5 489 M
(8\)n clauses.) s
5 478 M
(451.6 Gauss-Jordan Elimination For System of Linear Equations, Origin of Least Squares, Lin) s
5 467 M
(ear Programs for Inequalities - http://www-personal.umich.edu/~murty/LPINFORMStutorial2.pdf) s
5 456 M
( - previous CNF SAT Solver has only equalities.) s
5 445 M
(451.7 Randomized Rounding for LP relaxation - https://en.wikipedia.org/wiki/Randomized_roun) s
5 434 M
(ding - Randomized Rounding involves 3 steps - formulating a Linear Program for a 3SAT, solv) s
5 423 M
(ing it fractionally and rounding the fraction to nearest integer. Previous CNF SAT Solver m) s
5 412 M
(aps this rounding process to system of linear equations - formulate each 3SAT as system of ) s
5 401 M
(linear equations, one equation per clause \(AX=B, B is unit vector of all 1s\), get fractiona) s
5 390 M
(l values for vector X from Least Squares, Round the fraction to 0 or 1 whichever is nearest) s
5 379 M
(.) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(---------------------------------------------------) s
5 335 M
(452.\(THEORY\) Approximate CNF 3SAT Solver - Least Squares Error Rounding Analysis - 9 Septem) s
5 324 M
(ber 2017, 11 September 2017, 14 September 2017) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(---------------------------------------------------) s
5 291 M
(Notation:) s
5 280 M
(A' = Transpose of A) s
5 269 M
(A^-1 = Inverse of A) s
5 258 M
(E\(A\) = Expectation of A) s
5 247 M
(p\(A\) = probability of A) s
5 225 M
(Rounding in least squares solution to system of equations per CNF 3SAT fails if and only if) s
5 214 M
( binary assignment obtained by rounding does not satisfy the CNF while fractional assignmen) s
5 203 M
(t satisfies the system of equations for CNF. Least Square error is minimized by setting fir) s
5 192 M
(st partial derivative of error to zero:) s
5 181 M
(        A'Ax = A'b) s
5 170 M
(        => x = \(A'A\)^-1*A'*b) s
5 159 M
(Number of satisfied clauses in least squares is = tr\(A\(A'A\)^-1*A'*b\) because Ax-b is minimi) s
5 148 M
(zed.) s
5 137 M
(Maximum value of tr\(A\(A'A\)^-1*A'*b\) is the maximum number of satisfied clauses) s
5 126 M
(if tr\(A\(A'A\)^-1*A'*b\) > 7/8*number_of_clauses, then P=NP by PCP theorem.) s
5 104 M
(Each matrix A corresponding to a CNF is a random variable - A is a random matrix \(not neces) s
5 93 M
(sarily square\).) s
5 82 M
(Expected value of A\(A'A\)^-1*A'*b where random matrix A belongs to some probability distribu) s
5 71 M
(tion = E\(A\(A'A\)^-1*A'*b\)) s
5 60 M
(        E\(A\(A'A\)^-1*A'*b\) = b*E\(A\)*E\(\(A'A\)^-1\)*E\(A'\)) s
5 49 M
(        E\(A\(A'A\)^-1*A'*b\) = b*E\(A\)*E\(\(A'A\)^-1\)*E\(A\) because A and A' are bijections. ) s
5 38 M
(        E\(A\(A'A\)^-1*A'*b\) = b*E\(A\)*E\(A'A\)*E\(A\) because A'A and \(A'A\)^-1 are bijections. ) s
5 27 M
(        E\(A\(A'A\)^-1*A'*b\) = b*E\(A\)*E\(A\)*E\(A'\)*E\(A\) by definition of product of expectations) s
5 16 M
(        E\(A\(A'A\)^-1*A'*b\) = b*\(E\(A\)\)^4) s
5 5 M
(        E\(A\(A'A\)^-1*A'*b\) = b*\(A*p\(A\)\)^4) s
_R
S
%%Page: (259) 259
%%BeginPageSetup
_S
18 36 translate
/pagenum 259 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (259) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Each random matrix for a random 3CNF has nm entries where n is number of variables and m is) s
5 731 M
( number of clauses. Each of nm literals is either a variable or its negation.) s
5 709 M
(Probability of choosing a variable or its negation = 1/\(2n\) for n variables + n negations.) s
5 698 M
(Probability of a random matrix A of mn entries = \(1/\(2n\)\)^nm) s
5 687 M
(        => E\(A\(A'A\)^-1*A'*b\) = b\(sigma\(A\(1/2n\)^nm\)^4 in uniform distribution.) s
5 676 M
(                        = b\(1/\(2n\)^nm * sigma\(A\)\)^4 which sums up all 2^nm possible boolean) s
5 665 M
( matrices.) s
5 654 M
(                        = b\(1/\(2n\)^mn * [ matrix of 2^\(nm-1\) for all entries ]\)^4) s
5 643 M
(                        = b * [ matrix of 2^\(mn-1\)/\(2n\)^nm for all entries ]^4) s
5 621 M
(=================================================) s
5 610 M
(Tighter estimate for probability of a random 3CNF:) s
5 599 M
(=================================================) s
5 588 M
(        Per clause 3 literals have to be chosen from 2n literals = 2nC3\(1/2n\)^3\(1/2n\)^\(2n-3) s
5 577 M
(\)) s
5 566 M
(        For m clauses each being independent, Probability of a random 3CNF) s
5 555 M
(                = \(2nC3\(1/2n\)^3\(1/2n\)^\(2n-3\)\)^m) s
5 544 M
(=================================================) s
5 533 M
(        E\(A\(A'A\)^-1*A'*b\) = b * [ matrix of 2^\(mn-1\)/\(2n\)^nm for all entries ]^4  \(1,m\) * \() s
5 522 M
(m*n, n*m, m*n, n*m\)) s
5 511 M
(                        = b * [ matrix of n*2^\(2nm-2\)/\(2n\)^2mn for all entries ]^2  \(1,m\) *) s
5 500 M
( \(m*m, m*m\)) s
5 489 M
(                        = b * [ matrix of m*n^2*2^\(2nm-2\)/\(2n\)^2mn for all entries ] \(1,m\) ) s
5 478 M
(* \(m*m\) ) s
5 467 M
(                        = [ matrix of m^2*n^2*2^\(2nm-2\)/\(2n\)^2mn for all entries ] \(1,m\)) s
5 456 M
(        Trace of this expected matrix is the expected number of clauses that can be satisfi) s
5 445 M
(ed by least squares in uniform distribution:) s
5 434 M
(                        = m^3*n^2*2^\(2nm-2\)/\(2n\)^2mn) s
5 423 M
(        if number of clauses to be satisfied <= m, m^3*n^2*2^\(2nm-2\) <= m*\(2n\)^2mn) s
5 412 M
(                        => m^2*n^2*2^\(2nm-2\) <= \(2n\)^2nm) s
5 401 M
(        which is obvious because \(2n\)^\(2mn\) grows faster.) s
5 390 M
(                        => m^2*n^2*2^2nm <= 4 * 2^2nm * n^2nm) s
5 379 M
(                        => m^2*n^2 <= 4 * n^2nm) s
5 368 M
(        For all m clauses to be satisfied, this must be an equality:) s
5 357 M
(                        m^2 = 4 * n^2\(nm-1\)) s
5 346 M
(        if m=n \(number of clauses = number of variables\), all clauses are satisfied if:) s
5 335 M
(                        n^2 = 4 * n^\(n^2-1\)) s
5 324 M
(                        n^2/4 = n^\(n^2-1\)) s
5 313 M
(                        => log \(n^2/4\) = \(n^2-1\) log\(n\)) s
5 302 M
(                        => log \(n^2/4\)/log\(n\) = \(n^2-1\)) s
5 291 M
(        which is a contradiction because RHS grows faster.) s
5 280 M
(=================================================) s
5 269 M
(Alternatively, following simpler analysis leads to something more concrete:) s
5 258 M
(        For minimum error x = \(A'A\)^-1*A'*b) s
5 247 M
(        Ax=A\(A'A\)^-1*A'*b is maximum when A\(A'A\)^-1*A'*b = b) s
5 236 M
(        => A\(A'A\)^-1*A' = I) s
5 225 M
(When A is square symmetric matrix \(number of variables = number of clauses \) and A=A':) s
5 214 M
(        => A\(AA\)^-1*A = I) s
5 203 M
(        => Least squares perfectly solves system of equations for CNFSAT if matrix of claus) s
5 192 M
(es is symmetric and square i.e error is zero) s
5 181 M
(Least squares thus solves a subset of NP-complete set of input 3CNFs i.e exactly solves a p) s
5 170 M
(romise NP problem in deterministic polynomial time.) s
5 148 M
(References:) s
5 137 M
(-----------) s
5 126 M
(452.1 Advanced Engineering Mathematics - [Erwin Kreyszig - 8th Edition] - Page 357) s
5 115 M
(452.2 Linear Algebra - [Gilbert Strang] - http://math.mit.edu/~gs/linearalgebra/ila0403.pdf) s
5 104 M
(452.3 Least Squares Error - [Stephen Boyd] - https://see.stanford.edu/materials/lsoeldsee26) s
5 93 M
(3/05-ls.pdf) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(---------------------------------------------------) s
5 49 M
(453. \(THEORY\) Random Matrix Analysis of Least Squares Approximate CNFSAT solver - related t) s
5 38 M
(o 452 - 15 September 2017) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(---------------------------------------------------) s
5 5 M
(From previous definition of expected value of random matrix equivalent to a random 3SAT:) s
_R
S
%%Page: (260) 260
%%BeginPageSetup
_S
18 36 translate
/pagenum 260 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (260) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        E\(A\(A'A\)^-1*A'*b\) = b*\(E\(A\)\)^4) s
5 731 M
(Previous derivation of expected value of a random matrix is further simplified by a differe) s
5 720 M
(nt definition of expectation:) s
5 709 M
(        E\(A\) = [ matrix of E\(x\(i,j\)\) ] i.e each entry of the matrix is evaluated independen) s
5 698 M
(tly.) s
5 687 M
(Let the probability of each entry x\(i,j\) of the random matrix = p. Each entry is a literal ) s
5 676 M
(or its negation and can take 0 or 1 values.) s
5 665 M
(        E\(x\(i,j\)\) = p) s
5 654 M
(        => E\(A\) = [ matrix of p for all entries ]) s
5 643 M
(        => b * \(E\(A\)\)^4 = b*[ matrix of np^2 for all entries ]^2) s
5 632 M
(                        = b*[ matrix of m*n^2*p^4 for all entries ] ) s
5 621 M
(                        = [ matrix of m^2*n^2*p^4 for all entries ]) s
5 610 M
(        E\(A\(A'A\)^-1*A'*b\) = [ matrix of m^2*n^2*p^4 for all entries ]) s
5 599 M
(        Trace\(E\(A\(A'A\)^-1*A'*b\)\) = m^3*n^2*p^4 which has maximum value equal to number of c) s
5 588 M
(lauses m) s
5 577 M
(        => m^3*n^2*p^4 <= m) s
5 566 M
(        => m^2*n^2*p^4 <= 1) s
5 555 M
(        => p^4 <= 1/\(mn\)^2) s
5 544 M
(        => p^2 <= 1/\(mn\)) s
5 533 M
(        => p <= 1/sqrt\(mn\)) s
5 522 M
(This retrieves the probability distribution of the random 3SAT instances. ) s
5 511 M
(If all clauses have to be satisfied \(ExactSAT\), p = 1/sqrt\(mn\).) s
5 500 M
(In previous example iterations of the solver, number of clauses = number of variables i.e p) s
5 489 M
( = 1/n.) s
5 478 M
(This differs from the uniform probability assumption 1/\(2n\) per literal in earlier derivati) s
5 467 M
(ons including the negations too.) s
5 456 M
(The promise subset of NP solved exactly by least squares is defined by the set of all rando) s
5 445 M
(m 3CNFs created with each ) s
5 434 M
(literal occurring with probability 1/n.) s
5 401 M
(References:) s
5 390 M
(----------) s
5 379 M
(453.1 Random matrices - http://www.utstat.toronto.edu/~brunner/oldclass/431s09/readings/Ran) s
5 368 M
(domMatrices.pdf) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(-------------------------------------------------) s
5 324 M
(454. \(FEATURE and THEORY\) Commits - Approximate SAT solver - 15 September 2017) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(-------------------------------------------------) s
5 291 M
(\(*\) Some debug statements have been included to print average probability of each literal's) s
5 280 M
( occurrence in random 3CNF.) s
5 269 M
(\(*\) SATsolver has been re-executed with 20 clauses and 20 variables and probability of occu) s
5 258 M
(rrence of each literal has been logged.) s
5 247 M
(\(*\) This was necessitated to ascertain the pseudorandomness of the clauses and CNFs created) s
5 236 M
(.) s
5 225 M
(\(*\) Average probability of a literal is less than previous estimate of 1/n = 1/20 = 0.05 fo) s
5 214 M
(r 100% satisfied clauses but still converges to usual 97% for 100 iterations.) s
5 203 M
(\(*\) logs committed to testlogs/) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(------------------------------------------------) s
5 159 M
(455. \(THEORY\) Eigenvalues of Random Matrices, Riemann Zeta Function, MAXSAT ranking of meri) s
5 148 M
(t, Promise problems and Some additional notes on CNFSAT solver scipy/numpy least squares im) s
5 137 M
(plementation - 18 September 2017 - related to 24,432) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(------------------------------------------------) s
5 104 M
(The set of random 3CNFs created by the solver is just a subset of all possible 3CNFs becaus) s
5 93 M
(e all least squares API in SciPy require number of variables to be equal to number of claus) s
5 82 M
(es, and an exception is thrown at runtime if they are unequal. A better alternative for the) s
5 71 M
(se API which works for any combination of number of clauses and variables has to be found a) s
5 60 M
(nd substituted in least square invocation \(replacing lsqr\(\)/lsmr\(\)\). This is a limitation o) s
5 49 M
(f SciPy/NumPy and not the least squares algorithm. This makes it a Promise SAT solver and n) s
5 38 M
(ot the universal SAT solver for time being. Also for huge number of variables/clauses, both) s
5 27 M
( lsqr\(\) and lsmr\(\) functions slow down heavily and it is difficult to test on  low-end pers) s
5 16 M
(onal desktops. The most plausible reason for convergence of MaxSAT to ~98% for almost all e) s
5 5 M
(xecutions so far is the promise nature of the problem and only subset of 3CNFs \(number of c) s
_R
S
%%Page: (261) 261
%%BeginPageSetup
_S
18 36 translate
/pagenum 261 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (261) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(lauses=number of variables\) are solved. In above random matrix analysis, if number of varia) s
5 731 M
(bles=number of clauses, probability of choosing a literal \(positive or negative\) is 1/n whi) s
5 720 M
(ch is also uniform if two sets of positive and negated literals each of size n are separate) s
5 709 M
(ly evaluated for probability \(E\(x\(i,j\)\) = 0*1/n + 1*1/n\). This also raises a question: Sinc) s
5 698 M
(e promise-SAT instances are NP-complete,does solving promise-NP imply solving NP. Since lea) s
5 687 M
(st squares exactly solves this promise subset \(square matrix of equal number of variables a) s
5 676 M
(nd clauses\) when probability of choosing a literal is 1/n, percentage of clauses satisfied ) s
5 665 M
(is ~98% which is close to 100% implying the probability of choosing a literal is slightly l) s
5 654 M
(ess than uniform 1/n. Exact average MaxSAT percentage of least squares solver can be analyz) s
5 643 M
(ed only if there is a suitable alternative to SciPy/NumPy. Therefore this convergence still) s
5 632 M
( does not contradict P!=NP and PCP.) s
5 610 M
(Earlier the problem of intrinsically ranking texts etc., based on merit has been reduced to) s
5 599 M
( a MAXSAT problem where each text document etc., satisfies a fixed or variable 3CNFSAT form) s
5 588 M
(ed from merit variables \(e.g textgraph complexity\) and merit is ranked by percentage of cla) s
5 577 M
(uses satisfied. All the quantified outcomes of intrinsic merit algorithms described in this) s
5 566 M
( document can be translated to merit variables e.g variable1 = 1 if graph tensor neuron mer) s
5 555 M
(it > threshold else 0.) s
5 533 M
(Random Matrix representation of random 3SAT instances throws up an unusual window into the ) s
5 522 M
(realm of Riemann Zeta Functions. It has been known that non-trivial zeros of Riemann Zeta F) s
5 511 M
(unctions and Eigenvectors of Random Matrices \(N*N hermitian matrices\) have something in com) s
5 500 M
(mon. This indicates a possibility of a connection between Riemann Zeta Function zeros and e) s
5 489 M
(igenvalues of Random Matrices for Random 3CNFs.) s
5 467 M
(References:) s
5 456 M
(----------) s
5 445 M
(455.1 Promise Problems - http://www.cs.tau.ac.il/~amnon/Classes/2017-BPP/Lectures/Lecture11) s
5 434 M
(.pdf) s
5 423 M
(455.2 Survey of Promise Problems - [Oded Goldreich] - http://www.wisdom.weizmann.ac.il/~ode) s
5 412 M
(d/PSX/prpr-r.pdf - there exist BPP-complete promise problems though in general case there a) s
5 401 M
(re no known BPP-complete problems. This is quite applicable in equating a non-majority soci) s
5 390 M
(al choice and a Condorcet Jury Theorem majority social choice e.g. RHS majority choice with) s
5 379 M
( error is promise-BPP-complete and LHS non-majority interview TQBF social choice is in PSPA) s
5 368 M
(CE.) s
5 357 M
(455.3 Gaussian Unitary Ensemble - Random Matrices - http://empslocal.ex.ac.uk/people/staff/) s
5 346 M
(mrwatkin//zeta/random.htm) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(--------------------------------------------) s
5 302 M
(456. \(THEORY and FEATURE\) CNF3SAT Approximate Solver Update - All possible variable-clause ) s
5 291 M
(combinations - Commits - 18 September 2017) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(--------------------------------------------) s
5 258 M
(\(*\) Solve_SAT2\(\) function has been changed to take both number of variables and clauses as ) s
5 247 M
(parameters) s
5 236 M
(\(*\) Bug in EquationsB creation has been fixed so that length of b equals number of clauses.) s
5 225 M
( This was causing dimension mismatch and incompatible) s
5 214 M
(dimensions in LSMR and LSQR) s
5 203 M
(\(*\) Logs for 18*16 clauses-variables random 3CNFs have been committed to testlogs/. MaxSAT ) s
5 192 M
(percentage is ~96% after 1200 random CNF iterations) s
5 181 M
(. Per literal probability is too less than 1/sqrt\(mn\) obtained from random matrix analysis ) s
5 170 M
(and therefore converges much below 100%.) s
5 159 M
(-------------------------------------) s
5 148 M
(\(*\) Bugs fixed in prob_dist\(\)) s
5 137 M
(\(*\) restored lsmr\(\)) s
5 126 M
(\(*\) logs for some other clause-variable combinations have been committed to testlogs/. Obse) s
5 115 M
(rved per literal probability is close to random) s
5 104 M
( matrix probability of 1/sqrt\(mn\)) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(-------------------------------------------------) s
5 60 M
(457. \(THEORY and FEATURE\) Inapproximability and Random Matrix Analysis of Least Square Appr) s
5 49 M
(oximate SAT solver - Commits - 19 September 2017) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(-------------------------------------------------) s
5 16 M
(Previous Random Matrix Analysis shows expected number of satisfied clauses = m^3*n^2*p^4 wh) s
5 5 M
(ere there are m clauses,n variables and p is the) s
_R
S
%%Page: (262) 262
%%BeginPageSetup
_S
18 36 translate
/pagenum 262 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (262) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(probability of choosing a positive or negative literal. For 21 variables and 20 clauses, fo) s
5 731 M
(llowing are the results after few iterations:) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(---------------------) s
5 698 M
(--------------------------------------------------------------) s
5 687 M
(Iteration : 29) s
5 676 M
(--------------------------------------------------------------) s
5 665 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 654 M
(--------------------------------------------------------------) s
5 643 M
(a: [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 632 M
( [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]) s
5 621 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0]) s
5 610 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 599 M
( [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 588 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 577 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 566 M
( [0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 555 M
( [0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 544 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]) s
5 533 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 522 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 511 M
( [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]) s
5 500 M
( [0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 489 M
( [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0]) s
5 478 M
( [1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 467 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 456 M
( [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 445 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 434 M
( [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]]) s
5 423 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 412 M
(a.shape: \(20, 21\)) s
5 401 M
(b.shape: \(20,\)) s
5 390 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  5.00000000e-01,   0.00000000e+00,   0.00000000e+00,) s
5 379 M
(         1.00000000e+00,   3.89920951e-13,   1.00000000e+00,) s
5 368 M
(         1.00000000e+00,   5.00000000e-01,   7.50000000e-01,) s
5 357 M
(         1.00000000e+00,   5.00000000e-01,   7.50000000e-01,) s
5 346 M
(         1.24863661e-13,   0.00000000e+00,   0.00000000e+00,) s
5 335 M
(         0.00000000e+00,   5.00000000e-01,   5.00000000e-01,) s
5 324 M
(         1.00000000e+00,   5.00000000e-01,   0.00000000e+00]\), 2, 12, 1.870828693386971, 5.) s
5 313 M
(2032984761241552e-12, 4.898979485566356, 4.001266321699533, 2.7613402542972292\)) s
5 302 M
(Random 3CNF: \(!x11 + !x3 + !x13\) * \(!x2 + x12 + x11\) * \(x20 + x11 + !x10\) * \(!x1 + !x2 + x1) s
5 291 M
(1\) * \(x5 + !x10 + x19\) * \(!x4 + x9 + !x17\) * \(x4 + !x1 + !x6\) * \(x5 + x7 + x13\) * \(x9 + x11) s
5 280 M
( + !x15\) * \(!x20 + !x19 + x12\) * \(!x14 + !x9 + x4\) * \(!x11 + !x6 + x19\) * \(x10 + !x9 + !x15) s
5 269 M
(\) * \(x7 + !x16 + x5\) * \(!x7 + x17 + x8\) * \(!x3 + x1 + x11\) * \(!x18 + !x7 + !x13\) * \(x5 + !x) s
5 258 M
(21 + x6\) * \(!x16 + !x9 + !x6\) * \(x1 + !x6 + x18\)) s
5 247 M
(Assignment computed from least squares: [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,) s
5 236 M
( 1, 1, 1, 0]) s
5 225 M
(CNF Formula: [['!x11', '!x3', '!x13'], ['!x2', 'x12', 'x11'], ['x20', 'x11', '!x10'], ['!x1) s
5 214 M
(', '!x2', 'x11'], ['x5', '!x10', 'x19'], ['!x4', 'x9', '!x17'], ['x4', '!x1', '!x6'], ['x5') s
5 203 M
(, 'x7', 'x13'], ['x9', 'x11', '!x15'], ['!x20', '!x19', 'x12'], ['!x14', '!x9', 'x4'], ['!x) s
5 192 M
(11', '!x6', 'x19'], ['x10', '!x9', '!x15'], ['x7', '!x16', 'x5'], ['!x7', 'x17', 'x8'], ['!) s
5 181 M
(x3', 'x1', 'x11'], ['!x18', '!x7', '!x13'], ['x5', '!x21', 'x6'], ['!x16', '!x9', '!x6'], [) s
5 170 M
('x1', '!x6', 'x18']]) s
5 159 M
(Number of clauses satisfied: 20.0) s
5 148 M
(Number of clauses : 20) s
5 137 M
(Assignment satisfied: 1) s
5 126 M
(Percentage of clauses satisfied: 100.0) s
5 115 M
(Percentage of CNFs satisfied so far: 46.6666666667) s
5 104 M
(Average Percentage of Clauses per CNF satisfied: 96.0) s
5 93 M
(y= 46) s
5 82 M
(sumfreq= 896) s
5 71 M
(y= 43) s
5 60 M
(sumfreq= 896) s
5 49 M
(y= 36) s
5 38 M
(sumfreq= 896) s
5 27 M
(y= 46) s
5 16 M
(sumfreq= 896) s
5 5 M
(y= 41) s
_R
S
%%Page: (263) 263
%%BeginPageSetup
_S
18 36 translate
/pagenum 263 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (263) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(sumfreq= 896) s
5 731 M
(y= 42) s
5 720 M
(sumfreq= 896) s
5 709 M
(y= 48) s
5 698 M
(sumfreq= 896) s
5 687 M
(y= 37) s
5 676 M
(sumfreq= 896) s
5 665 M
(y= 48) s
5 654 M
(sumfreq= 896) s
5 643 M
(y= 39) s
5 632 M
(sumfreq= 896) s
5 621 M
(y= 46) s
5 610 M
(sumfreq= 896) s
5 599 M
(y= 42) s
5 588 M
(sumfreq= 896) s
5 577 M
(y= 42) s
5 566 M
(sumfreq= 896) s
5 555 M
(y= 50) s
5 544 M
(sumfreq= 896) s
5 533 M
(y= 39) s
5 522 M
(sumfreq= 896) s
5 511 M
(y= 33) s
5 500 M
(sumfreq= 896) s
5 489 M
(y= 41) s
5 478 M
(sumfreq= 896) s
5 467 M
(y= 42) s
5 456 M
(sumfreq= 896) s
5 445 M
(y= 44) s
5 434 M
(sumfreq= 896) s
5 423 M
(y= 43) s
5 412 M
(sumfreq= 896) s
5 401 M
(y= 48) s
5 390 M
(sumfreq= 896) s
5 379 M
(y= 40) s
5 368 M
(sumfreq= 904) s
5 357 M
(y= 43) s
5 346 M
(sumfreq= 904) s
5 335 M
(y= 51) s
5 324 M
(sumfreq= 904) s
5 313 M
(y= 36) s
5 302 M
(sumfreq= 904) s
5 291 M
(y= 38) s
5 280 M
(sumfreq= 904) s
5 269 M
(y= 46) s
5 258 M
(sumfreq= 904) s
5 247 M
(y= 44) s
5 236 M
(sumfreq= 904) s
5 225 M
(y= 36) s
5 214 M
(sumfreq= 904) s
5 203 M
(y= 41) s
5 192 M
(sumfreq= 904) s
5 181 M
(y= 45) s
5 170 M
(sumfreq= 904) s
5 159 M
(y= 46) s
5 148 M
(sumfreq= 904) s
5 137 M
(y= 34) s
5 126 M
(sumfreq= 904) s
5 115 M
(y= 46) s
5 104 M
(sumfreq= 904) s
5 93 M
(y= 46) s
5 82 M
(sumfreq= 904) s
5 71 M
(y= 36) s
5 60 M
(sumfreq= 904) s
5 49 M
(y= 42) s
5 38 M
(sumfreq= 904) s
5 27 M
(y= 44) s
5 16 M
(sumfreq= 904) s
5 5 M
(y= 47) s
_R
S
%%Page: (264) 264
%%BeginPageSetup
_S
18 36 translate
/pagenum 264 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (264) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(sumfreq= 904) s
5 731 M
(y= 51) s
5 720 M
(sumfreq= 904) s
5 709 M
(y= 54) s
5 698 M
(sumfreq= 904) s
5 687 M
(y= 38) s
5 676 M
(sumfreq= 904) s
5 665 M
(Probability of Variables chosen in CNFs so far: [0.05133928571428571, 0.04799107142857143, ) s
5 654 M
(0.04017857142857143, 0.05133928571428571, 0.04575892857142857, 0.046875, 0.0535714285714285) s
5 643 M
(7, 0.041294642857142856, 0.05357142857142857, 0.04352678571428571, 0.05133928571428571, 0.0) s
5 632 M
(46875, 0.046875, 0.05580357142857143, 0.04352678571428571, 0.036830357142857144, 0.04575892) s
5 621 M
(857142857, 0.046875, 0.049107142857142856, 0.04799107142857143, 0.05357142857142857]) s
5 610 M
(Probability of Negations chosen in CNFs so far: [0.04424778761061947, 0.04756637168141593, ) s
5 599 M
(0.05641592920353982, 0.03982300884955752, 0.0420353982300885, 0.05088495575221239, 0.048672) s
5 588 M
(566371681415, 0.03982300884955752, 0.04535398230088496, 0.049778761061946904, 0.05088495575) s
5 577 M
(221239, 0.03761061946902655, 0.05088495575221239, 0.05088495575221239, 0.03982300884955752,) s
5 566 M
( 0.046460176991150445, 0.048672566371681415, 0.051991150442477874, 0.05641592920353982, 0.0) s
5 555 M
(59734513274336286, 0.0420353982300885]) s
5 544 M
(Average probability of a variable or negation: 0.047619047619) s
5 533 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.048795) s
5 522 M
(0036474) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(---------------------) s
5 489 M
(From PCP theorem and [Hastad] inapproximability result based on it, if m^3*n^2*p^4 > 7/8*m ) s
5 478 M
(then P=NP.) s
5 467 M
(=> m^2*n^2*p^4 > 7/8) s
5 456 M
(=> p^4 > 7/\(8m^2n^2\)) s
5 445 M
(=> if p > 0.96716821/sqrt\(m*n\) then P=NP.) s
5 423 M
(In previous iteration, y and sumfreq print the frequencies of literals chosen so far at ran) s
5 412 M
(dom \(which are almost evenly distributed\) and observed average probability of choosing a li) s
5 401 M
(teral is 0.047619 whereas the required Random Matrix analysis probability for exact SAT is ) s
5 390 M
(somewhat higher at 0.048795. Substituting the observed probability 0.047619 for 21 variable) s
5 379 M
(s and 20 clauses:) s
5 368 M
(        Expected number of clauses satisfied = \(20\)^3*\(21\)^2*\(0.047619\)^4 = 18.1405 clauses) s
5 357 M
( or 90.7025%) s
5 346 M
(implying the MaxSAT for 21 variables and 20 clauses converges to 90.7025% asymptotically ad) s
5 335 M
( infinitum.) s
5 313 M
(The inequality m^3*n^2*p^4 > 7/8*m relates hardness and randomness because probability dist) s
5 302 M
(ribution for p is directly related to uniformity and k-wise independence of pseudorandom \(n) s
5 291 M
(umber\) generator for choosing a literal at random. Presently the randomness depends on linu) s
5 280 M
(x PRNG. If there exists a pseudorandom number generator corresponding to probability p > 0.) s
5 269 M
(96716821/sqrt\(m*n\) then P=NP.) s
5 247 M
(For a binary valued random variable X, bias\(X\) is defined as Pr\(X=0\)-Pr\(X=1\) <= epsilon. Ep) s
5 236 M
(silon biased pseudorandom generators \(e-PRG\) are functions G:{0,1}^l->{0,1}^n expanding see) s
5 225 M
(d of length l to a pseudorandom string of length n and for all subsets Si \(which are random) s
5 214 M
( variables\) of {0,1}^n, bias\(Si\) <= epsilon. For uniform distributions, bias of all subset ) s
5 203 M
(random variables is zero excluding the empty set. This is equivalent to: Bias\(UniformDistri) s
5 192 M
(bution\)-Bias\(e-PRGDistribution\) <= epsilon. For random matrix approximate SAT solver probab) s
5 181 M
(ility p, previous condition of probability of choosing a positive or negative literal in a ) s
5 170 M
(random SAT, p > 0.96716821/sqrt\(m*n\) for P=NP to hold, differs from the uniform probability) s
5 159 M
( distribution 1/2n \(assuming n variables and n negations of them\). This implies an epsilon ) s
5 148 M
(biased PRG of bias p-\(1-p\) = 2p-1 = [1.93433642/sqrt\(m*n\)] - 1 for all possible values of m) s
5 137 M
( and n, must exist for P=NP. PRG described in reference has bias \(n-1\)/2^l. Equating 2p-1 =) s
5 126 M
( \(n-1\)/2^l and solving for seed length l gives an expression of required seed length l in t) s
5 115 M
(erms of number of clauses m.) s
5 93 M
(Let Xi be the random variable for choosing the literal xi. If literal xi is chosen Xi=1, el) s
5 82 M
(se Xi=0. Therefore bias\(ePRG\)=Pr\(Xi=1\)-Pr\(Xi=0\). But Pr\(Xi=1\) = p = 0.96716821/sqrt\(m*n\) fo) s
5 71 M
(r choosing a literal from random matrix analysis derived previously for 7/8 approximation t) s
5 60 M
(o exist.) s
5 38 M
(An example application of Epsilon biased Pseudorandom Generator in reference 457.1 below :) s
5 27 M
(------------------------------------------------------------------------------------------) s
5 16 M
(=> bias\(ePRG\)=p-\(1-p\)=1.94/sqrt\(m*n\) - 1.) s
5 5 M
(Equating this to the ePRG bias \(n-1\)/2^l:) s
_R
S
%%Page: (265) 265
%%BeginPageSetup
_S
18 36 translate
/pagenum 265 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (265) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(=> \(n-1\)/2^l = [1.94/sqrt\(m*n\)] - 1) s
5 731 M
(=> length of the seed l in ePRG = log\([\(n-1\)*sqrt\(m*n\)]/[1.94-sqrt\(m*n\)]) s
5 720 M
(Absurdity is for length of the seed to be valid logarithm, sqrt\(m*n\) < 1.94 => m*n < 4 whic) s
5 709 M
(h is possible only for m=1 and n=3, the trivial 1 clause 3SAT. This necessitates transformi) s
5 698 M
(ng previous into an inequality as below:) s
5 687 M
(        2^2l * \(1.94\)^2) s
5 676 M
(        ----------------- < m) s
5 665 M
(        n*[2^l + \(n-1\)]^2) s
5 654 M
(For large n, inequality tends to a surd 0 < m.) s
5 632 M
(An example application of Epsilon biased Pseudorandom Generator in reference 457.2 below :) s
5 621 M
(------------------------------------------------------------------------------------------) s
5 610 M
(=> bias\(ePRG\)=p-\(1-p\)=1.94/sqrt\(m*n\) - 1.) s
5 599 M
(Other ePRG \(Mossel-Shpilka-Trevisan\) bias 1/2^\(kn/c^4\) mentioned in the references relates ) s
5 588 M
(m and n for random matrix CNF SAT solver bias as:) s
5 577 M
(        \(1.94\)^2 * 2^\(2kn/c^4\)) s
5 566 M
(        ------------------------ < m) s
5 555 M
(        n*\(1 + 2^\(kn/c^4\)\)^2) s
5 544 M
(For large n, inequality tends to a surd 0 < m.) s
5 522 M
(Both these prescribe a relation between n and m for small n and for large number of variabl) s
5 511 M
(es both ePRGs fit to the random matrix CNF SAT solver least squares bias for P=NP to hold. ) s
5 500 M
(This implies there are random SAT instances for small n which might not create literals wit) s
5 489 M
(h probability 0.96716821/sqrt\(m*n\) a hindrance to conclude that P=NP and defining this smal) s
5 478 M
(l n is non-trivial.) s
5 456 M
(Generic Epsilon biased Pseudorandom Generator of bias epsilon=1/x for x > 0:) s
5 445 M
(--------------------------------------------------------------------) s
5 434 M
(Consider a fictitious Epsilon biased Pseudorandom Generator of bias epsilon=1/x, x > 0.) s
5 423 M
(Lowerbounding bias:) s
5 412 M
(        [1.94/sqrt\(m*n\)] - 1 <= 1/x) s
5 401 M
(which reduces to:) s
5 390 M
(        m >= \(1.94\)^2*x^2/[n*\(x+1\)^2]) s
5 379 M
(This implies for any epsilon biased PRG, there exists number of clauses m below which Appro) s
5 368 M
(ximate SAT solver solves less than 7/8 fraction of the clauses. Largest possible value of m) s
5 357 M
( occurs for n=1 and x tending to infinity => m >= 1.94*1.94 \(or\) m >= 3.7636 i.e all CNF ra) s
5 346 M
(ndom SAT instances of 4 or less number of clauses can not be solved by least squares to get) s
5 335 M
( atleast 7/8-approximation.) s
5 313 M
(Number of possible random k-SAT instances of m clauses and n variables = \(nP3 * 2\)^m becaus) s
5 302 M
(e each clause has either a literal or its negation, not both. Variables and their negation ) s
5 291 M
(form a set of ordered pairs \(x1,x1'\),\(x2,x2'\),...,\(xn,xn'\) from which 3 ordered pairs are c) s
5 280 M
(hosen per clause in nP3 ways and variable or its negation is chosen from each ordered pair ) s
5 269 M
(thereby creating nP3 * 2 possible clauses. An m clause random 3SAT has thus \(nP3 * 2\)^m pos) s
5 258 M
(sibilities.) s
5 236 M
(Number of possible 4 clause 3SATs are = \(nP3 * 2\)^4. Therefore fraction of random SAT insta) s
5 225 M
(nces not solvable for 7/8 approximation is:) s
5 214 M
(        \(nP3 * 2\)^4             1) s
5 203 M
(        -----------     =  -------------) s
5 192 M
(        \(nP3 * 2\)^m        \(n*\(n-1\)*\(n-2\)\)^\(m-4\)) s
5 181 M
(which is negligible for large m and n but non-trivial for small m and n.) s
5 159 M
(Number of variables in 4 clause 3SAT is at the maximum 12. Thus this small subset can be so) s
5 148 M
(lved in a constant time because m and n are fixed at 4 and 12 respectively.) s
5 126 M
([Caution: Previous derivation is still experimental with possible errors and assumes an eps) s
5 115 M
(ilon PRG of bias atleast [1.94/sqrt\(m*n\)]-1 exists. If it indeed does, then it could imply ) s
5 104 M
(P=NP and is in direct conflict with Majority version of XOR lemma - if numerator hardness d) s
5 93 M
(oes not cancel out - for hardness amplification described earlier and caveats therein which) s
5 82 M
( implies P != NP.]) s
5 60 M
(References:) s
5 49 M
(----------) s
5 38 M
(457.1 Epsilon biased Pseudo Random Generators - [Advanced Complexity Theory Course Notes - ) s
5 27 M
(Dieter] - http://pages.cs.wisc.edu/~dieter/Courses/2008s-CS880/Scribes/lecture21.pdf) s
5 16 M
(457.2 Epsilon biased Pseudo Random Generator in NC0 - every pseudorandom bit depends only o) s
5 5 M
(n 5 bits of seed - [Elchanan Mossel, Amir Shpilka, Luca Trevisan] - https://www.stat.berkel) s
_R
S
%%Page: (266) 266
%%BeginPageSetup
_S
18 36 translate
/pagenum 266 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (266) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ey.edu/~mossel/publications/prginnc0.pdf - "...  Then we present an \316\265-biased generator map) s
5 731 M
(ping n bits into cn bits such that \316\265 = 1/2^\342\\204\246\(n/c^4\) and every bit of the output depen) s
5 720 M
(ds only on k = 5 bits of the seed. The parameter c can be chosen arbitrarily, and may depen) s
5 709 M
(d on n. The constant in the \342\\204\246\(\) notation does not depend on c ...") s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(---------------------------------------------------) s
5 665 M
(458. \(THEORY\) Intrinsic Merit, Consensus Algorithms, Byzantine Failures and Level Playing F) s
5 654 M
(ield - 23 September 2017) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(---------------------------------------------------) s
5 621 M
(So far Intrinsic merit of a text has been analyzed mostly in the context of connectedness a) s
5 610 M
(nd meaningfulness of it. It assumes a document text-graph \(subgraph of an ontology like Wor) s
5 599 M
(dNet\) obtained from the Ontology graph is implicitly agreed upon metric to measure merit i.) s
5 588 M
(e IM\(text\) = subgraph of Ontology, for some intrinsic merit algorithm IM. But the problem o) s
5 577 M
(f "agreeing" by stakeholders on some process is itself a non-trivial Consensus Problem whic) s
5 566 M
(h has been overlooked so far. For example, merit measured by interview/examination question) s
5 555 M
(-answering or a competition requires all parties to agree upon the terms, conditions and ru) s
5 544 M
(les a priori. This is widely studied problem of Agreement or Consensus. Consensus is define) s
5 533 M
(d by:) s
5 522 M
(        * Agreement - all parties must agree on a correct process and its outcome) s
5 511 M
(        * Validity - if all correct processes receive same input value,they must all output) s
5 500 M
( same value) s
5 489 M
(        * Termination - all processes must eventually decide on an output value ) s
5 478 M
(There are realworld consensus implementations - Google Chubby Lock Service based on Paxos C) s
5 467 M
(onsensus Protocol, Bitcoin's Proof-of-work hyperledgering which appends transactions of a n) s
5 456 M
(ode to common log in a distributed timestamp server etc., ensuring all participants agree. ) s
5 445 M
(As opposed to Majority voting which requires crossing just half-way mark in number of votes) s
5 434 M
(\(>50%\), Consensus requires complete agreement \(=100%\). Once 100% consensus is achieved on h) s
5 423 M
(ow to measure intrinsic merit, it is accepted as a standard and levels playing field for co) s
5 412 M
(ntestants. Consensus is most required in measuring human intrinsic merit than merit of docu) s
5 401 M
(ments. In other words, majority voting permits each voter to decide on his/her own volition) s
5 390 M
(. Each voter can have different decision function\(boolean or non-boolean\). But Consensus re) s
5 379 M
(quires all voters to reach an agreement on a standardized decision function. Recursive Glos) s
5 368 M
(s Overlap algorithm and its enhancements to measure intrinsic merit from graph of text can ) s
5 357 M
(be termed as "consensual" because connectedness implies meaningfulness by WordNet distance ) s
5 346 M
(measures \(Resnick, Wu-Palmer, Jiang-Conrath etc.,\) and any text can be mapped to a subgraph) s
5 335 M
( of an ontology like WordNet and WordNet has been accepted as a consensus peer-reviewed sta) s
5 324 M
(ndard.) s
5 302 M
(Consensus can be impeded by presence of malicious nodes which spoof and send spurious votes) s
5 291 M
( known as Byzantine generals problem. A known result implies there is a consensus resilient) s
5 280 M
( to byzantine failures if number of faulty nodes is not above 33%. ) s
5 258 M
(References:) s
5 247 M
(----------) s
5 236 M
(458.1 Consensus Algorithms - https://en.wikipedia.org/wiki/Consensus_\(computer_science\)) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(---------------------------------------------------) s
5 192 M
(459. \(THEORY\) Random Matrix Rounding for Least Squares Approximate CNFSAT Solver, Distingui) s
5 181 M
(sher for Pseudorandomness, Majority Hardness Lemma) s
5 170 M
(- related to 318, 457 - 13 October 2017) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(---------------------------------------------------) s
5 137 M
(Existence of Pseudorandom generators \(PRG\) implies P != NP. Proof of this is by contradicti) s
5 126 M
(on: If there exists a distinguisher which is able to discern perfect randomness from any PR) s
5 115 M
(G in polynomial time then existence of PRGs which fool a distinguisher is ruled out i.e Pr[) s
5 104 M
(A\(x\)=1]-Pr[A\(G\(s\)\)=1] >> epsilon where x is a perfect random string in {0,1}^n , A is a dis) s
5 93 M
(tinguisher and G is a function extending a seed s of length m to n - G:{0,1}^m to {0,1}^n ,) s
5 82 M
( m < n .) s
5 60 M
(Majority Voting Hardness Lemma is an adaptation of Yao's XOR Lemma for hardness amplificati) s
5 49 M
(on from weak voting functions composed to Majority function \(related to KRW Conjecture and ) s
5 38 M
(Boolean Function Composition\). Hardness of a boolean function is the error in approximating) s
5 27 M
( the function f by a boolean circuit C defined by probability Pr[f\(x\) != C\(x\)]. Majority Ha) s
5 16 M
(rdness Lemma implies hardness of the majority+votingfunction composition amplifies the hard) s
5 5 M
(ness compared to individually weak voters and inverting this composition \(MajorityInverse: ) s
_R
S
%%Page: (267) 267
%%BeginPageSetup
_S
18 36 translate
/pagenum 267 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (267) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(finding who voted in favour or against\) is extremely hard to approximate by a circuit and t) s
5 731 M
(hus in average case could be an one-way function composition. Being one-way implies hard-to) s
5 720 M
(-distinguish PRGs can be constructed from this composition.) s
5 698 M
(Random Matrix Rounding for Least Squares Approximate CNFSAT Solver in previous sections der) s
5 687 M
(ives an expected probability of choosing a literal in a CNF for ExactSAT\(when all clauses a) s
5 676 M
(re satisfied\). This expected random matrix probability \(mentioned as RMLSQR henceforth: 1/s) s
5 665 M
(qrt\(m*n\)\) corresponds to some hypothetical pseudorandom generator PRG1.) s
5 643 M
(Probability of choosing a CNF by RMLSQR \(there are 3m literals per 3CNF\) = \(1/[mn]\)^1.5m) s
5 621 M
(Alternatively,number of all possible random 3CNF SATs of m clauses and n variables = \(n * n) s
5 610 M
( * n\)^m = n^\(3m\)) s
5 588 M
(Probability of choosing a CNF from all possible n^\(3m\) random 3SATs in this uniform distrib) s
5 577 M
(ution is = \(1/n\)^3m) s
5 555 M
(Thus there are two possible probability distributions for choosing a random 3SAT: \(1/[mn]\)^) s
5 544 M
(1.5m required by Random Matrix rounding and \(1/n\)^3m for uniform. Probability distributions) s
5 533 M
( and Pseudorandom generators underlying these distributions are directly related.) s
5 511 M
(If m=n\(number of clauses and number of variables are equal\):) s
5 500 M
(------------------------------------------------------------) s
5 489 M
(\(1/[nn]\)^1.5n = \(1/n\)^3n and thus both RMLSQR and Uniform distributions are same implying s) s
5 478 M
(imilar pseudorandomness in RMLSQR and Uniform and distinguisher is fooled.This is a promise) s
5 467 M
( special case described earlier and does not suffice.) s
5 445 M
(If m !=n e.g m >> n \(this is most prevalent setting where number of clauses are huge and va) s
5 434 M
(riables are relatively less\):) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(-----------------------------) s
5 401 M
(\(1/[mn]\)^1.5m < \(1/n\)^3m) s
5 390 M
(\(1/m\)^1.5m * \(1/n\)^1.5m < \(1/n\)^1.5m * \(1/n\)^1.5m) s
5 379 M
(\(1/m\)^1.5m < \(1/n\)^1.5m) s
5 368 M
(1/m < 1/n) s
5 357 M
(=> m > n) s
5 335 M
(When number of clauses m differs from number of variables n, RMLSQR and Uniform distributio) s
5 324 M
(ns are dissimilar implying there are two different) s
5 313 M
(randomness-es: PRG1 for RMLSQR and PRG2\(or perfect randomness\) for Uniform. Distinguisher f) s
5 302 M
(or these two random generators has the probability of success defined by difference of the ) s
5 291 M
(probability distributions for RMLSQR and Uniform = \(1/n\)^1.5m * [\(1/n\)^1.5m - \(1/m\)^1.5m] i) s
5 280 M
(.e when the number of clauses is high compared to number of variables, this difference is s) s
5 269 M
(ignificant and distinguisher succeeds with high probability implying PRG1 is not pseudorand) s
5 258 M
(om and altogether PRGs may not exist at all. This coincides with > 87.5% of clauses getting) s
5 247 M
( satisfied breaking 7/8 barrier in average case and could be synonymous to Karloff-Zwick SD) s
5 236 M
(P relaxation algorithm for > 7/8 MAXSAT. This need not contradict majority+voterfunction co) s
5 225 M
(mposition hardness because MajorityInverse is a depth-2 #P-Complete counting problem \(first) s
5 214 M
( step counts and inverts voter inputs to majority and second step counts and inverts assign) s
5 203 M
(ments per voter and hardness is a function of sensitivity\) and could be beyond P != NP purv) s
5 192 M
(iew \(i.e. There could be pseudorandom generators indistinguishable only by an algorithm har) s
5 181 M
(der than NP\).) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(---------------------------------------------------) s
5 137 M
(460. \(THEORY and FEATURE\) Random Matrix Rounding for Least Squares Approximate CNFSAT Solve) s
5 126 M
(r - various clause-variable permutations - numbers, some anomalous - 25 October 2017) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(---------------------------------------------------) s
5 93 M
(Following are some random 3SAT iteration MAXSAT percentage numbers for multiple combination) s
5 82 M
(s of number of variables and clauses. Observed average probabilities of linux PRNG have som) s
5 71 M
(e anomalies when substituted in random matrix expected number of satisfied clauses \(>100%\).) s
5 60 M
( Reasons for) s
5 49 M
(this could be error in estimating linux PRNG probability distribution. Deficiencies of Linu) s
5 38 M
(x PRNGs - especially randomness extractor from SHA - are already analyzed \(random.c\) in htt) s
5 27 M
(ps://eprint.iacr.org/2005/029.pdf - [BoazBarak-ShaiHalevi]) s
5 16 M
( ) s
5 5 M
(##############################################) s
_R
S
%%Page: (268) 268
%%BeginPageSetup
_S
18 36 translate
/pagenum 268 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (268) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(17 variables, 18 clauses - 1066 random 3SATs:) s
5 731 M
(##############################################) s
5 720 M
(--------------------------------------------------------------) s
5 709 M
(Iteration : 1066) s
5 698 M
(--------------------------------------------------------------) s
5 687 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 676 M
(--------------------------------------------------------------) s
5 665 M
(a: [[0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 654 M
( [0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 643 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]) s
5 632 M
( [0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0]) s
5 621 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 610 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 599 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]) s
5 588 M
( [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 577 M
( [0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0]) s
5 566 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 555 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 544 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 533 M
( [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]) s
5 522 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0]) s
5 511 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 500 M
( [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 489 M
( [0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 478 M
( [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0]]) s
5 467 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 456 M
(a.shape: \(18, 17\)) s
5 445 M
(b.shape: \(18,\)) s
5 434 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  0.00000000e+00,   1.00000000e+00,   8.00000000e-01,) s
5 423 M
(         1.00000000e+00,   2.00000000e-01,   1.00000000e+00,) s
5 412 M
(         1.00000000e+00,   6.66666667e-01,   6.00000000e-01,) s
5 401 M
(         0.00000000e+00,   0.00000000e+00,  -6.66666667e-01,) s
5 390 M
(         6.00000000e-01,   1.89190298e-14,   6.66666667e-01,) s
5 379 M
(         4.00000000e-01,   0.00000000e+00]\), 2, 11, 1.653279569018299, 9.190906242470613e-1) s
5 368 M
(3, 4.690415759823429, 4.19738295792774, 2.625515822335343\)) s
5 357 M
(Random 3CNF: \(x3 + !x11 + !x16\) * \(!x16 + x3 + x5\) * \(x6 + !x9 + !x4\) * \(x15 + !x10 + x8\) *) s
5 346 M
( \(!x14 + x2 + !x8\) * \(!x11 + !x10 + !x3\) * \(!x9 + x2 + x14\) * \(!x1 + x3 + !x7\) * \(x2 + x8 +) s
5 335 M
( x12\) * \(!x8 + !x1 + !x13\) * \(!x10 + !x8 + x9\) * \(!x12 + x4 + !x8\) * \(!x7 + x8 + !x4\) * \(!x) s
5 324 M
(8 + x16 + x9\) * \(!x12 + !x7 + x15\) * \(!x1 + x7 + !x14\) * \(x3 + x9 + !x12\) * \(!x11 + x13 + x) s
5 313 M
(16\)) s
5 302 M
(Assignment computed from least squares: [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0]) s
5 291 M
(CNF Formula: [['x3', '!x11', '!x16'], ['!x16', 'x3', 'x5'], ['x6', '!x9', '!x4'], ['x15', ') s
5 280 M
(!x10', 'x8'], ['!x14', 'x2', '!x8'], ['!x11', '!x10', '!x3'], ['!x9', 'x2', 'x14'], ['!x1',) s
5 269 M
( 'x3', '!x7'], ['x2', 'x8', 'x12'], ['!x8', '!x1', '!x13'], ['!x10', '!x8', 'x9'], ['!x12',) s
5 258 M
( 'x4', '!x8'], ['!x7', 'x8', '!x4'], ['!x8', 'x16', 'x9'], ['!x12', '!x7', 'x15'], ['!x1', ) s
5 247 M
('x7', '!x14'], ['x3', 'x9', '!x12'], ['!x11', 'x13', 'x16']]) s
5 236 M
(Number of clauses satisfied: 18.0) s
5 225 M
(Number of clauses : 18) s
5 214 M
(Assignment satisfied: 1) s
5 203 M
(Percentage of clauses satisfied: 100.0) s
5 192 M
(Percentage of CNFs satisfied so far: 61.0121836926) s
5 181 M
(Average Percentage of Clauses per CNF satisfied: 97.3341664063) s
5 170 M
(y= 1675) s
5 159 M
(sumfreq= 28722) s
5 148 M
(y= 1683) s
5 137 M
(sumfreq= 28722) s
5 126 M
(y= 1716) s
5 115 M
(sumfreq= 28722) s
5 104 M
(y= 1750) s
5 93 M
(sumfreq= 28722) s
5 82 M
(y= 1699) s
5 71 M
(sumfreq= 28722) s
5 60 M
(y= 1690) s
5 49 M
(sumfreq= 28722) s
5 38 M
(y= 1697) s
5 27 M
(sumfreq= 28722) s
5 16 M
(y= 1662) s
5 5 M
(sumfreq= 28722) s
_R
S
%%Page: (269) 269
%%BeginPageSetup
_S
18 36 translate
/pagenum 269 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (269) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(y= 1732) s
5 731 M
(sumfreq= 28722) s
5 720 M
(y= 1740) s
5 709 M
(sumfreq= 28722) s
5 698 M
(y= 1687) s
5 687 M
(sumfreq= 28722) s
5 676 M
(y= 1669) s
5 665 M
(sumfreq= 28722) s
5 654 M
(y= 1677) s
5 643 M
(sumfreq= 28722) s
5 632 M
(y= 1662) s
5 621 M
(sumfreq= 28722) s
5 610 M
(y= 1664) s
5 599 M
(sumfreq= 28722) s
5 588 M
(y= 1660) s
5 577 M
(sumfreq= 28722) s
5 566 M
(y= 1659) s
5 555 M
(sumfreq= 28722) s
5 544 M
(y= 1716) s
5 533 M
(sumfreq= 28896) s
5 522 M
(y= 1782) s
5 511 M
(sumfreq= 28896) s
5 500 M
(y= 1660) s
5 489 M
(sumfreq= 28896) s
5 478 M
(y= 1714) s
5 467 M
(sumfreq= 28896) s
5 456 M
(y= 1704) s
5 445 M
(sumfreq= 28896) s
5 434 M
(y= 1716) s
5 423 M
(sumfreq= 28896) s
5 412 M
(y= 1721) s
5 401 M
(sumfreq= 28896) s
5 390 M
(y= 1688) s
5 379 M
(sumfreq= 28896) s
5 368 M
(y= 1679) s
5 357 M
(sumfreq= 28896) s
5 346 M
(y= 1653) s
5 335 M
(sumfreq= 28896) s
5 324 M
(y= 1662) s
5 313 M
(sumfreq= 28896) s
5 302 M
(y= 1686) s
5 291 M
(sumfreq= 28896) s
5 280 M
(y= 1702) s
5 269 M
(sumfreq= 28896) s
5 258 M
(y= 1673) s
5 247 M
(sumfreq= 28896) s
5 236 M
(y= 1735) s
5 225 M
(sumfreq= 28896) s
5 214 M
(y= 1678) s
5 203 M
(sumfreq= 28896) s
5 192 M
(y= 1727) s
5 181 M
(sumfreq= 28896) s
5 170 M
(Probability of Variables chosen in CNFs so far: [0.058317665900703294, 0.05859619803634844,) s
5 159 M
( 0.05974514309588469, 0.06092890467237658, 0.059153262307638746, 0.05883991365503795, 0.059) s
5 148 M
(083629273727456, 0.057865051180279924, 0.06030220736717499, 0.06058073950282014, 0.05873546) s
5 137 M
(410417102, 0.05810876679896943, 0.058387298934614584, 0.057865051180279924, 0.0579346842141) s
5 126 M
(91214, 0.05779541814636864, 0.057760601629412996]) s
5 115 M
(Probability of Negations chosen in CNFs so far: [0.059385382059800665, 0.061669435215946845) s
5 104 M
(, 0.05744739756367663, 0.05931616832779624, 0.058970099667774084, 0.059385382059800665, 0.0) s
5 93 M
(5955841638981174, 0.05841638981173865, 0.058104928017718716, 0.057205149501661126, 0.057516) s
5 82 M
(611295681065, 0.05834717607973422, 0.058900885935769656, 0.057897286821705425, 0.0600429125) s
5 71 M
(1384274, 0.0580703211517165, 0.059766057585825025]) s
5 60 M
(Average probability of a variable or negation: 0.0588235294118) s
5 49 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.057166) s
5 38 M
(1950475) s
5 16 M
(#############################################) s
5 5 M
(18 variables, 19 clauses - 137 random 3SATs:) s
_R
S
%%Page: (270) 270
%%BeginPageSetup
_S
18 36 translate
/pagenum 270 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (270) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#############################################) s
5 731 M
(--------------------------------------------------------------) s
5 720 M
(Iteration : 137) s
5 709 M
(--------------------------------------------------------------) s
5 698 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 687 M
(--------------------------------------------------------------) s
5 676 M
(a: [[1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 665 M
( [0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0]) s
5 654 M
( [0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0]) s
5 643 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 632 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0]) s
5 621 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]) s
5 610 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 599 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]) s
5 588 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 577 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 566 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 555 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]) s
5 544 M
( [0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0]) s
5 533 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 522 M
( [0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0]) s
5 511 M
( [0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0]) s
5 500 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 489 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 478 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]]) s
5 467 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 456 M
(a.shape: \(19, 18\)) s
5 445 M
(b.shape: \(19,\)) s
5 434 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  6.66666667e-01,   1.00000000e+00,  -1.11111111e-01,) s
5 423 M
(         3.33333333e-01,   0.00000000e+00,   1.00000000e+00,) s
5 412 M
(         4.44444445e-01,   1.66666667e+00,   8.93039852e-11,) s
5 401 M
(         0.00000000e+00,   0.00000000e+00,   6.66666667e-01,) s
5 390 M
(        -6.66666666e-01,   0.00000000e+00,  -5.55555556e-01,) s
5 379 M
(         6.66666667e-01,  -8.43769499e-15,   1.00000000e+00]\), 2, 13, 2.0816659994661344, 5) s
5 368 M
(.027196399901854e-09, 5.2915026221291805, 4.8051011045747947, 2.8609762647129626\)) s
5 357 M
(Random 3CNF: \(x4 + x1 + !x7\) * \(!x3 + x6 + x9\) * \(x3 + x12 + x7\) * \(!x13 + !x4 + !x10\) * \(x) s
5 346 M
(12 + x16 + !x6\) * \(x12 + !x17 + !x14\) * \(x16 + !x2 + !x17\) * \(x17 + x18 + !x7\) * \(x16 + !x2) s
5 335 M
( + x4\) * \(x6 + !x17 + !x18\) * \(!x14 + !x5 + !x17\) * \(x2 + !x14 + x17\) * \(x6 + x16 + x13\) * ) s
5 324 M
(\(!x12 + !x10 + !x7\) * \(x13 + !x12 + x8\) * \(x15 + x8 + x3\) * \(!x3 + !x9 + !x7\) * \(x6 + !x16 ) s
5 313 M
(+ !x13\) * \(x18 + !x6 + !x2\)) s
5 302 M
(Assignment computed from least squares: [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0,) s
5 291 M
( 1]) s
5 280 M
(CNF Formula: [['x4', 'x1', '!x7'], ['!x3', 'x6', 'x9'], ['x3', 'x12', 'x7'], ['!x13', '!x4') s
5 269 M
(, '!x10'], ['x12', 'x16', '!x6'], ['x12', '!x17', '!x14'], ['x16', '!x2', '!x17'], ['x17', ) s
5 258 M
('x18', '!x7'], ['x16', '!x2', 'x4'], ['x6', '!x17', '!x18'], ['!x14', '!x5', '!x17'], ['x2') s
5 247 M
(, '!x14', 'x17'], ['x6', 'x16', 'x13'], ['!x12', '!x10', '!x7'], ['x13', '!x12', 'x8'], ['x) s
5 236 M
(15', 'x8', 'x3'], ['!x3', '!x9', '!x7'], ['x6', '!x16', '!x13'], ['x18', '!x6', '!x2']]) s
5 225 M
(Number of clauses satisfied: 19.0) s
5 214 M
(Number of clauses : 19) s
5 203 M
(Assignment satisfied: 1) s
5 192 M
(Percentage of clauses satisfied: 100.0) s
5 181 M
(Percentage of CNFs satisfied so far: 52.8985507246) s
5 170 M
(Average Percentage of Clauses per CNF satisfied: 96.7581998474) s
5 159 M
(y= 220) s
5 148 M
(sumfreq= 3952) s
5 137 M
(y= 243) s
5 126 M
(sumfreq= 3952) s
5 115 M
(y= 252) s
5 104 M
(sumfreq= 3952) s
5 93 M
(y= 230) s
5 82 M
(sumfreq= 3952) s
5 71 M
(y= 195) s
5 60 M
(sumfreq= 3952) s
5 49 M
(y= 203) s
5 38 M
(sumfreq= 3952) s
5 27 M
(y= 231) s
5 16 M
(sumfreq= 3952) s
5 5 M
(y= 225) s
_R
S
%%Page: (271) 271
%%BeginPageSetup
_S
18 36 translate
/pagenum 271 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (271) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(sumfreq= 3952) s
5 731 M
(y= 224) s
5 720 M
(sumfreq= 3952) s
5 709 M
(y= 228) s
5 698 M
(sumfreq= 3952) s
5 687 M
(y= 221) s
5 676 M
(sumfreq= 3952) s
5 665 M
(y= 224) s
5 654 M
(sumfreq= 3952) s
5 643 M
(y= 205) s
5 632 M
(sumfreq= 3952) s
5 621 M
(y= 216) s
5 610 M
(sumfreq= 3952) s
5 599 M
(y= 199) s
5 588 M
(sumfreq= 3952) s
5 577 M
(y= 206) s
5 566 M
(sumfreq= 3952) s
5 555 M
(y= 203) s
5 544 M
(sumfreq= 3952) s
5 533 M
(y= 227) s
5 522 M
(sumfreq= 3952) s
5 511 M
(y= 207) s
5 500 M
(sumfreq= 3914) s
5 489 M
(y= 218) s
5 478 M
(sumfreq= 3914) s
5 467 M
(y= 214) s
5 456 M
(sumfreq= 3914) s
5 445 M
(y= 220) s
5 434 M
(sumfreq= 3914) s
5 423 M
(y= 223) s
5 412 M
(sumfreq= 3914) s
5 401 M
(y= 204) s
5 390 M
(sumfreq= 3914) s
5 379 M
(y= 220) s
5 368 M
(sumfreq= 3914) s
5 357 M
(y= 233) s
5 346 M
(sumfreq= 3914) s
5 335 M
(y= 203) s
5 324 M
(sumfreq= 3914) s
5 313 M
(y= 210) s
5 302 M
(sumfreq= 3914) s
5 291 M
(y= 234) s
5 280 M
(sumfreq= 3914) s
5 269 M
(y= 208) s
5 258 M
(sumfreq= 3914) s
5 247 M
(y= 239) s
5 236 M
(sumfreq= 3914) s
5 225 M
(y= 180) s
5 214 M
(sumfreq= 3914) s
5 203 M
(y= 205) s
5 192 M
(sumfreq= 3914) s
5 181 M
(y= 232) s
5 170 M
(sumfreq= 3914) s
5 159 M
(y= 259) s
5 148 M
(sumfreq= 3914) s
5 137 M
(y= 205) s
5 126 M
(sumfreq= 3914) s
5 115 M
(Probability of Variables chosen in CNFs so far: [0.05566801619433198, 0.06148785425101214, ) s
5 104 M
(0.06376518218623482, 0.05819838056680162, 0.049342105263157895, 0.0513663967611336, 0.05845) s
5 93 M
(1417004048586, 0.056933198380566805, 0.05668016194331984, 0.057692307692307696, 0.055921052) s
5 82 M
(63157895, 0.05668016194331984, 0.05187246963562753, 0.05465587044534413, 0.0503542510121457) s
5 71 M
(5, 0.05212550607287449, 0.0513663967611336, 0.05743927125506073]) s
5 60 M
(Probability of Negations chosen in CNFs so far: [0.05288707204905468, 0.05569749616760347, ) s
5 49 M
(0.054675523760858456, 0.05620848237097598, 0.05697496167603475, 0.052120592743995914, 0.056) s
5 38 M
(20848237097598, 0.05952989269289729, 0.051865099642309655, 0.05365355135411344, 0.059785385) s
5 27 M
(79458355, 0.05314256515074093, 0.061062851303014816, 0.045988758303525806, 0.05237608584568) s
5 16 M
(2166, 0.05927439959121104, 0.06617271333673991, 0.052376085845682166]) s
5 5 M
(Average probability of a variable or negation: 0.0555555555556) s
_R
S
%%Page: (272) 272
%%BeginPageSetup
_S
18 36 translate
/pagenum 272 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (272) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.054073) s
5 731 M
(8070436) s
5 709 M
(############################################################) s
5 698 M
(19 variables, 18 clauses - 34 random 3SATs) s
5 687 M
(############################################################) s
5 676 M
(--------------------------------------------------------------) s
5 665 M
(Iteration : 34) s
5 654 M
(--------------------------------------------------------------) s
5 643 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 632 M
(--------------------------------------------------------------) s
5 621 M
(a: [[0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0]) s
5 610 M
( [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 599 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]) s
5 588 M
( [0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 577 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 566 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]) s
5 555 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 544 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0]) s
5 533 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 522 M
( [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 511 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0]) s
5 500 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1]) s
5 489 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 478 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 467 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 456 M
( [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 445 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 434 M
( [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]) s
5 423 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 412 M
(a.shape: \(18, 19\)) s
5 401 M
(b.shape: \(18,\)) s
5 390 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,) s
5 379 M
(         1.00000000e+00,   1.00000000e+00,   1.00000000e+00,) s
5 368 M
(        -3.65332764e-15,   0.00000000e+00,   0.00000000e+00,) s
5 357 M
(         9.05525654e-15,   1.00000000e+00,   1.00000000e+00,) s
5 346 M
(         0.00000000e+00,   9.05525654e-15,   0.00000000e+00,) s
5 335 M
(        -1.00000000e+00,   1.00000000e+00,   3.34888367e-14,) s
5 324 M
(        -3.65332764e-15]\), 2, 12, 1.414213562373095, 2.093877713811129e-13, 4.7958315233127) s
5 313 M
(19, 3.8125525032467102, 3.1622776601683884\)) s
5 302 M
(Random 3CNF: \(x4 + x14 + x10\) * \(!x2 + !x11 + x5\) * \(x16 + x2 + x17\) * \(!x8 + x11 + x7\) * \() s
5 291 M
(!x5 + x11 + !x14\) * \(x4 + x18 + !x7\) * \(x17 + !x6 + !x5\) * \(!x10 + x18 + x12\) * \(!x4 + x17 ) s
5 280 M
(+ !x11\) * \(!x8 + x1 + !x13\) * \(!x7 + x6 + x18\) * \(x11 + x19 + !x16\) * \(!x6 + x2 + !x3\) * \(!) s
5 269 M
(x1 + !x2 + !x8\) * \(!x13 + !x10 + !x7\) * \(!x6 + !x10 + x1\) * \(!x7 + x6 + !x10\) * \(x3 + !x18 ) s
5 258 M
(+ !x1\)) s
5 247 M
(Assignment computed from least squares: [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1,) s
5 236 M
( 0, 0]) s
5 225 M
(CNF Formula: [['x4', 'x14', 'x10'], ['!x2', '!x11', 'x5'], ['x16', 'x2', 'x17'], ['!x8', 'x) s
5 214 M
(11', 'x7'], ['!x5', 'x11', '!x14'], ['x4', 'x18', '!x7'], ['x17', '!x6', '!x5'], ['!x10', ') s
5 203 M
(x18', 'x12'], ['!x4', 'x17', '!x11'], ['!x8', 'x1', '!x13'], ['!x7', 'x6', 'x18'], ['x11', ) s
5 192 M
('x19', '!x16'], ['!x6', 'x2', '!x3'], ['!x1', '!x2', '!x8'], ['!x13', '!x10', '!x7'], ['!x6) s
5 181 M
(', '!x10', 'x1'], ['!x7', 'x6', '!x10'], ['x3', '!x18', '!x1']]) s
5 170 M
(Number of clauses satisfied: 18.0) s
5 159 M
(Number of clauses : 18) s
5 148 M
(Assignment satisfied: 1) s
5 137 M
(Percentage of clauses satisfied: 100.0) s
5 126 M
(Percentage of CNFs satisfied so far: 80.0) s
5 115 M
(Average Percentage of Clauses per CNF satisfied: 98.7301587302) s
5 104 M
(y= 52) s
5 93 M
(sumfreq= 942) s
5 82 M
(y= 39) s
5 71 M
(sumfreq= 942) s
5 60 M
(y= 46) s
5 49 M
(sumfreq= 942) s
5 38 M
(y= 50) s
5 27 M
(sumfreq= 942) s
5 16 M
(y= 53) s
5 5 M
(sumfreq= 942) s
_R
S
%%Page: (273) 273
%%BeginPageSetup
_S
18 36 translate
/pagenum 273 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (273) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(y= 43) s
5 731 M
(sumfreq= 942) s
5 720 M
(y= 47) s
5 709 M
(sumfreq= 942) s
5 698 M
(y= 51) s
5 687 M
(sumfreq= 942) s
5 676 M
(y= 57) s
5 665 M
(sumfreq= 942) s
5 654 M
(y= 48) s
5 643 M
(sumfreq= 942) s
5 632 M
(y= 54) s
5 621 M
(sumfreq= 942) s
5 610 M
(y= 49) s
5 599 M
(sumfreq= 942) s
5 588 M
(y= 46) s
5 577 M
(sumfreq= 942) s
5 566 M
(y= 61) s
5 555 M
(sumfreq= 942) s
5 544 M
(y= 54) s
5 533 M
(sumfreq= 942) s
5 522 M
(y= 44) s
5 511 M
(sumfreq= 942) s
5 500 M
(y= 48) s
5 489 M
(sumfreq= 942) s
5 478 M
(y= 49) s
5 467 M
(sumfreq= 942) s
5 456 M
(y= 51) s
5 445 M
(sumfreq= 942) s
5 434 M
(y= 44) s
5 423 M
(sumfreq= 948) s
5 412 M
(y= 42) s
5 401 M
(sumfreq= 948) s
5 390 M
(y= 43) s
5 379 M
(sumfreq= 948) s
5 368 M
(y= 43) s
5 357 M
(sumfreq= 948) s
5 346 M
(y= 61) s
5 335 M
(sumfreq= 948) s
5 324 M
(y= 60) s
5 313 M
(sumfreq= 948) s
5 302 M
(y= 49) s
5 291 M
(sumfreq= 948) s
5 280 M
(y= 60) s
5 269 M
(sumfreq= 948) s
5 258 M
(y= 43) s
5 247 M
(sumfreq= 948) s
5 236 M
(y= 57) s
5 225 M
(sumfreq= 948) s
5 214 M
(y= 47) s
5 203 M
(sumfreq= 948) s
5 192 M
(y= 60) s
5 181 M
(sumfreq= 948) s
5 170 M
(y= 49) s
5 159 M
(sumfreq= 948) s
5 148 M
(y= 41) s
5 137 M
(sumfreq= 948) s
5 126 M
(y= 60) s
5 115 M
(sumfreq= 948) s
5 104 M
(y= 46) s
5 93 M
(sumfreq= 948) s
5 82 M
(y= 53) s
5 71 M
(sumfreq= 948) s
5 60 M
(y= 41) s
5 49 M
(sumfreq= 948) s
5 38 M
(y= 49) s
5 27 M
(sumfreq= 948) s
5 16 M
(Probability of Variables chosen in CNFs so far: [0.055201698513800426, 0.041401273885350316) s
5 5 M
(, 0.04883227176220807, 0.05307855626326964, 0.05626326963906582, 0.045647558386411886, 0.04) s
_R
S
%%Page: (274) 274
%%BeginPageSetup
_S
18 36 translate
/pagenum 274 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (274) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(9893842887473464, 0.054140127388535034, 0.06050955414012739, 0.050955414012738856, 0.057324) s
5 731 M
(84076433121, 0.05201698513800425, 0.04883227176220807, 0.06475583864118896, 0.0573248407643) s
5 720 M
(3121, 0.04670912951167728, 0.050955414012738856, 0.05201698513800425, 0.054140127388535034]) s
5 709 M
(Probability of Negations chosen in CNFs so far: [0.046413502109704644, 0.04430379746835443,) s
5 698 M
( 0.04535864978902954, 0.04535864978902954, 0.06434599156118144, 0.06329113924050633, 0.0516) s
5 687 M
(8776371308017, 0.06329113924050633, 0.04535864978902954, 0.060126582278481014, 0.0495780590) s
5 676 M
(71729956, 0.06329113924050633, 0.05168776371308017, 0.043248945147679324, 0.063291139240506) s
5 665 M
(33, 0.04852320675105485, 0.05590717299578059, 0.043248945147679324, 0.05168776371308017]) s
5 654 M
(Observed Average probability of a variable or negation: 0.0526315789474) s
5 643 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.054073) s
5 632 M
(8070436) s
5 621 M
(Percentage of Clauses satisfied - Observed Average Probability substituted in Random Matrix) s
5 610 M
( Analysis of Least Squared \(m^2*n^2*p^4\): 89.7506925208) s
5 588 M
(###########################################################) s
5 577 M
(16 variables, 15 clauses - 60 random 3SATs) s
5 566 M
(###########################################################) s
5 555 M
(--------------------------------------------------------------) s
5 544 M
(Iteration : 60) s
5 533 M
(--------------------------------------------------------------) s
5 522 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 511 M
(--------------------------------------------------------------) s
5 500 M
(a: [[0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]) s
5 489 M
( [0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0]) s
5 478 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 467 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 456 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]) s
5 445 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 434 M
( [0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 423 M
( [0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0]) s
5 412 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 401 M
( [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 390 M
( [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]) s
5 379 M
( [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]) s
5 368 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0]) s
5 357 M
( [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]) s
5 346 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]]) s
5 335 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 324 M
(a.shape: \(15, 16\)) s
5 313 M
(b.shape: \(15,\)) s
5 302 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  0.00000000e+00,   4.00000000e-01,   1.00000000e+00,) s
5 291 M
(         1.00000000e+00,  -2.00000000e-01,   1.00000000e+00,) s
5 280 M
(         0.00000000e+00,   6.00000000e-01,   6.00000000e-01,) s
5 269 M
(         8.00000000e-01,  -2.28234722e-16,   0.00000000e+00,) s
5 258 M
(         5.00000000e-01,   5.00000000e-01,   1.00000000e+00,) s
5 247 M
(         0.00000000e+00]\), 2, 9, 1.5491933384829675, 1.3065051242742054e-12, 4.242640687119) s
5 236 M
(285, 2.7186789946524619, 2.4617067250183342\)) s
5 225 M
(Random 3CNF: \(!x8 + x10 + !x11\) * \(x11 + x3 + !x8\) * \(!x10 + !x16 + !x1\) * \(!x8 + x6 + !x4\)) s
5 214 M
( * \(x9 + !x1 + !x10\) * \(!x5 + !x1 + x6\) * \(!x6 + x2 + x8\) * \(x10 + x2 + x5\) * \(!x1 + !x8 + ) s
5 203 M
(!x7\) * \(x3 + !x1 + !x12\) * \(x14 + !x11 + x13\) * \(!x1 + x10 + !x2\) * \(!x13 + x15 + x11\) * \(x) s
5 192 M
(9 + !x1 + x10\) * \(!x1 + x4 + !x8\)) s
5 181 M
(Assignment computed from least squares: [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0]) s
5 170 M
(CNF Formula: [['!x8', 'x10', '!x11'], ['x11', 'x3', '!x8'], ['!x10', '!x16', '!x1'], ['!x8') s
5 159 M
(, 'x6', '!x4'], ['x9', '!x1', '!x10'], ['!x5', '!x1', 'x6'], ['!x6', 'x2', 'x8'], ['x10', ') s
5 148 M
(x2', 'x5'], ['!x1', '!x8', '!x7'], ['x3', '!x1', '!x12'], ['x14', '!x11', 'x13'], ['!x1', ') s
5 137 M
(x10', '!x2'], ['!x13', 'x15', 'x11'], ['x9', '!x1', 'x10'], ['!x1', 'x4', '!x8']]) s
5 126 M
(Number of clauses satisfied: 15.0) s
5 115 M
(Number of clauses : 15) s
5 104 M
(Assignment satisfied: 1) s
5 93 M
(Percentage of clauses satisfied: 100.0) s
5 82 M
(Percentage of CNFs satisfied so far: 65.5737704918) s
5 71 M
(Average Percentage of Clauses per CNF satisfied: 97.1584699454) s
5 60 M
(y= 75) s
5 49 M
(sumfreq= 1376) s
5 38 M
(y= 95) s
5 27 M
(sumfreq= 1376) s
5 16 M
(y= 77) s
5 5 M
(sumfreq= 1376) s
_R
S
%%Page: (275) 275
%%BeginPageSetup
_S
18 36 translate
/pagenum 275 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (275) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(y= 79) s
5 731 M
(sumfreq= 1376) s
5 720 M
(y= 96) s
5 709 M
(sumfreq= 1376) s
5 698 M
(y= 89) s
5 687 M
(sumfreq= 1376) s
5 676 M
(y= 79) s
5 665 M
(sumfreq= 1376) s
5 654 M
(y= 94) s
5 643 M
(sumfreq= 1376) s
5 632 M
(y= 86) s
5 621 M
(sumfreq= 1376) s
5 610 M
(y= 93) s
5 599 M
(sumfreq= 1376) s
5 588 M
(y= 101) s
5 577 M
(sumfreq= 1376) s
5 566 M
(y= 91) s
5 555 M
(sumfreq= 1376) s
5 544 M
(y= 92) s
5 533 M
(sumfreq= 1376) s
5 522 M
(y= 80) s
5 511 M
(sumfreq= 1376) s
5 500 M
(y= 77) s
5 489 M
(sumfreq= 1376) s
5 478 M
(y= 72) s
5 467 M
(sumfreq= 1376) s
5 456 M
(y= 93) s
5 445 M
(sumfreq= 1369) s
5 434 M
(y= 82) s
5 423 M
(sumfreq= 1369) s
5 412 M
(y= 82) s
5 401 M
(sumfreq= 1369) s
5 390 M
(y= 85) s
5 379 M
(sumfreq= 1369) s
5 368 M
(y= 84) s
5 357 M
(sumfreq= 1369) s
5 346 M
(y= 87) s
5 335 M
(sumfreq= 1369) s
5 324 M
(y= 84) s
5 313 M
(sumfreq= 1369) s
5 302 M
(y= 71) s
5 291 M
(sumfreq= 1369) s
5 280 M
(y= 80) s
5 269 M
(sumfreq= 1369) s
5 258 M
(y= 74) s
5 247 M
(sumfreq= 1369) s
5 236 M
(y= 90) s
5 225 M
(sumfreq= 1369) s
5 214 M
(y= 91) s
5 203 M
(sumfreq= 1369) s
5 192 M
(y= 100) s
5 181 M
(sumfreq= 1369) s
5 170 M
(y= 100) s
5 159 M
(sumfreq= 1369) s
5 148 M
(y= 88) s
5 137 M
(sumfreq= 1369) s
5 126 M
(y= 78) s
5 115 M
(sumfreq= 1369) s
5 104 M
(Probability of Variables chosen in CNFs so far: [0.05450581395348837, 0.0690406976744186, 0) s
5 93 M
(.0559593023255814, 0.057412790697674417, 0.06976744186046512, 0.06468023255813954, 0.057412) s
5 82 M
(790697674417, 0.06831395348837209, 0.0625, 0.06758720930232558, 0.07340116279069768, 0.0661) s
5 71 M
(3372093023256, 0.06686046511627906, 0.05813953488372093, 0.0559593023255814, 0.052325581395) s
5 60 M
(34884]) s
5 49 M
(Probability of Negations chosen in CNFs so far: [0.0679327976625274, 0.05989773557341125, 0) s
5 38 M
(.05989773557341125, 0.0620891161431702, 0.061358655953250546, 0.0635500365230095, 0.0613586) s
5 27 M
(55953250546, 0.05186267348429511, 0.05843681519357195, 0.05405405405405406, 0.0657414170927) s
5 16 M
(6844, 0.0664718772826881, 0.07304601899196493, 0.07304601899196493, 0.06428049671292914, 0.) s
5 5 M
(05697589481373265]) s
_R
S
%%Page: (276) 276
%%BeginPageSetup
_S
18 36 translate
/pagenum 276 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (276) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Observed Average probability of a variable or negation: 0.0625) s
5 731 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.064549) s
5 720 M
(7224368) s
5 709 M
(Percentage of Clauses satisfied - Observed Average Probability substituted in Random Matrix) s
5 698 M
( Analysis of Least Squared \(m^2*n^2*p^4\): 87.890625) s
5 676 M
(####################################################) s
5 665 M
(21 variables, 18 clauses - 6 random 3SATs) s
5 654 M
(####################################################) s
5 643 M
(--------------------------------------------------------------) s
5 632 M
(Iteration : 6) s
5 621 M
(--------------------------------------------------------------) s
5 610 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 599 M
(--------------------------------------------------------------) s
5 588 M
(a: [[0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0]) s
5 577 M
( [0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 566 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]) s
5 555 M
( [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 544 M
( [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]) s
5 533 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 522 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 511 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]) s
5 500 M
( [0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 489 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0]) s
5 478 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 467 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]) s
5 456 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0]) s
5 445 M
( [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 434 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 423 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 412 M
( [0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 401 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]) s
5 390 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 379 M
(a.shape: \(18, 21\)) s
5 368 M
(b.shape: \(18,\)) s
5 357 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  5.00000000e-01,   1.00000000e+00,   0.00000000e+00,) s
5 346 M
(         5.00000000e-01,   1.00000000e+00,   0.00000000e+00,) s
5 335 M
(        -2.63027447e-16,   1.00000000e+00,  -3.67351548e-14,) s
5 324 M
(         0.00000000e+00,   8.39171896e-12,   9.28077060e-17,) s
5 313 M
(         0.00000000e+00,  -3.67351548e-14,   0.00000000e+00,) s
5 302 M
(         2.65906351e-12,   1.00000000e+00,  -2.52681990e-14,) s
5 291 M
(         5.00000000e-01,   1.00000000e+00,   5.00000000e-01]\), 2, 12, 1.7320508075688767, 6) s
5 280 M
(.3185165416969518e-11, 4.898979485566356, 3.9602900491395312, 2.4494897427873532\)) s
5 269 M
(Random 3CNF: \(x11 + x8 + x16\) * \(!x12 + x11 + x5\) * \(!x4 + x17 + x18\) * \(x5 + !x18 + !x8\) *) s
5 258 M
( \(!x8 + x21 + x1\) * \(!x9 + !x20 + !x17\) * \(x4 + !x20 + x19\) * \(!x6 + x17 + !x12\) * \(x2 + x7) s
5 247 M
( + !x9\) * \(x17 + x14 + x9\) * \(x2 + !x13 + !x6\) * \(!x13 + !x19 + x20\) * \(x20 + !x3 + x12\) * ) s
5 236 M
(\(x8 + !x20 + !x7\) * \(!x8 + !x2 + !x7\) * \(!x2 + !x9 + !x10\) * \(x5 + !x1 + x11\) * \(!x13 + x2 ) s
5 225 M
(+ !x11\)) s
5 214 M
(Assignment computed from least squares: [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,) s
5 203 M
( 0, 1, 1, 1]) s
5 192 M
(CNF Formula: [['x11', 'x8', 'x16'], ['!x12', 'x11', 'x5'], ['!x4', 'x17', 'x18'], ['x5', '!) s
5 181 M
(x18', '!x8'], ['!x8', 'x21', 'x1'], ['!x9', '!x20', '!x17'], ['x4', '!x20', 'x19'], ['!x6',) s
5 170 M
( 'x17', '!x12'], ['x2', 'x7', '!x9'], ['x17', 'x14', 'x9'], ['x2', '!x13', '!x6'], ['!x13',) s
5 159 M
( '!x19', 'x20'], ['x20', '!x3', 'x12'], ['x8', '!x20', '!x7'], ['!x8', '!x2', '!x7'], ['!x2) s
5 148 M
(', '!x9', '!x10'], ['x5', '!x1', 'x11'], ['!x13', 'x2', '!x11']]) s
5 137 M
(Number of clauses satisfied: 18.0) s
5 126 M
(Number of clauses : 18) s
5 115 M
(Assignment satisfied: 1) s
5 104 M
(Percentage of clauses satisfied: 100.0) s
5 93 M
(Percentage of CNFs satisfied so far: 71.4285714286) s
5 82 M
(Average Percentage of Clauses per CNF satisfied: 97.619047619) s
5 71 M
(y= 10) s
5 60 M
(sumfreq= 184) s
5 49 M
(y= 9) s
5 38 M
(sumfreq= 184) s
5 27 M
(y= 5) s
5 16 M
(sumfreq= 184) s
5 5 M
(y= 7) s
_R
S
%%Page: (277) 277
%%BeginPageSetup
_S
18 36 translate
/pagenum 277 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (277) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(sumfreq= 184) s
5 731 M
(y= 10) s
5 720 M
(sumfreq= 184) s
5 709 M
(y= 2) s
5 698 M
(sumfreq= 184) s
5 687 M
(y= 11) s
5 676 M
(sumfreq= 184) s
5 665 M
(y= 5) s
5 654 M
(sumfreq= 184) s
5 643 M
(y= 8) s
5 632 M
(sumfreq= 184) s
5 621 M
(y= 13) s
5 610 M
(sumfreq= 184) s
5 599 M
(y= 14) s
5 588 M
(sumfreq= 184) s
5 577 M
(y= 9) s
5 566 M
(sumfreq= 184) s
5 555 M
(y= 8) s
5 544 M
(sumfreq= 184) s
5 533 M
(y= 10) s
5 522 M
(sumfreq= 184) s
5 511 M
(y= 4) s
5 500 M
(sumfreq= 184) s
5 489 M
(y= 9) s
5 478 M
(sumfreq= 184) s
5 467 M
(y= 11) s
5 456 M
(sumfreq= 184) s
5 445 M
(y= 9) s
5 434 M
(sumfreq= 184) s
5 423 M
(y= 10) s
5 412 M
(sumfreq= 184) s
5 401 M
(y= 9) s
5 390 M
(sumfreq= 184) s
5 379 M
(y= 11) s
5 368 M
(sumfreq= 184) s
5 357 M
(y= 8) s
5 346 M
(sumfreq= 194) s
5 335 M
(y= 14) s
5 324 M
(sumfreq= 194) s
5 313 M
(y= 9) s
5 302 M
(sumfreq= 194) s
5 291 M
(y= 11) s
5 280 M
(sumfreq= 194) s
5 269 M
(y= 7) s
5 258 M
(sumfreq= 194) s
5 247 M
(y= 10) s
5 236 M
(sumfreq= 194) s
5 225 M
(y= 11) s
5 214 M
(sumfreq= 194) s
5 203 M
(y= 11) s
5 192 M
(sumfreq= 194) s
5 181 M
(y= 11) s
5 170 M
(sumfreq= 194) s
5 159 M
(y= 11) s
5 148 M
(sumfreq= 194) s
5 137 M
(y= 6) s
5 126 M
(sumfreq= 194) s
5 115 M
(y= 11) s
5 104 M
(sumfreq= 194) s
5 93 M
(y= 4) s
5 82 M
(sumfreq= 194) s
5 71 M
(y= 6) s
5 60 M
(sumfreq= 194) s
5 49 M
(y= 11) s
5 38 M
(sumfreq= 194) s
5 27 M
(y= 3) s
5 16 M
(sumfreq= 194) s
5 5 M
(y= 8) s
_R
S
%%Page: (278) 278
%%BeginPageSetup
_S
18 36 translate
/pagenum 278 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (278) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(sumfreq= 194) s
5 731 M
(y= 14) s
5 720 M
(sumfreq= 194) s
5 709 M
(y= 4) s
5 698 M
(sumfreq= 194) s
5 687 M
(y= 13) s
5 676 M
(sumfreq= 194) s
5 665 M
(y= 11) s
5 654 M
(sumfreq= 194) s
5 643 M
(Probability of Variables chosen in CNFs so far: [0.05434782608695652, 0.04891304347826087, ) s
5 632 M
(0.02717391304347826, 0.03804347826086957, 0.05434782608695652, 0.010869565217391304, 0.0597) s
5 621 M
(82608695652176, 0.02717391304347826, 0.043478260869565216, 0.07065217391304347, 0.076086956) s
5 610 M
(52173914, 0.04891304347826087, 0.043478260869565216, 0.05434782608695652, 0.021739130434782) s
5 599 M
(608, 0.04891304347826087, 0.059782608695652176, 0.04891304347826087, 0.05434782608695652, 0) s
5 588 M
(.04891304347826087, 0.059782608695652176]) s
5 577 M
(Probability of Negations chosen in CNFs so far: [0.041237113402061855, 0.07216494845360824,) s
5 566 M
( 0.04639175257731959, 0.05670103092783505, 0.03608247422680412, 0.05154639175257732, 0.0567) s
5 555 M
(0103092783505, 0.05670103092783505, 0.05670103092783505, 0.05670103092783505, 0.03092783505) s
5 544 M
(1546393, 0.05670103092783505, 0.020618556701030927, 0.030927835051546393, 0.056701030927835) s
5 533 M
(05, 0.015463917525773196, 0.041237113402061855, 0.07216494845360824, 0.020618556701030927, ) s
5 522 M
(0.06701030927835051, 0.05670103092783505]) s
5 511 M
(Observed Average probability of a variable or negation: 0.047619047619) s
5 500 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.051434) s
5 489 M
(4499874) s
5 478 M
(Percentage of Clauses satisfied - Observed Average Probability substituted in Random Matrix) s
5 467 M
( Analysis of Least Squared \(m^2*n^2*p^4\): 73.4693877551) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(---------------------------------------------------) s
5 423 M
(461. \(THEORY\) Space-Filling, Random Close Packing, Bin Packing and Voter Decision Functions) s
5 412 M
( - 27 October 2017 - related to 135) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(---------------------------------------------------) s
5 379 M
(Parallel PRG and Cellular Automaton Algorithms for randomly filling a space with objects an) s
5 368 M
(d their relevance to Linear Programming were described earlier. Space Filling is a problem ) s
5 357 M
(studied in the field of Structural Topology. For example, density of spheres randomly packe) s
5 346 M
(d into a container is approximately ~63.6% \(reference below\) which is exactly the problem s) s
5 335 M
(olved by Parallel PRG and Cellular Automaton Randomized Space filling algorithms. This spac) s
5 324 M
(e filling problem can be formulated as a Voter Constraint Satisfaction Problem. Variant of ) s
5 313 M
(Space filling is the NP-hard Packing problem where set of items of variable sizes have to b) s
5 302 M
(e packed into set of bins of same volume by minimizing number of bins whereas Space filling) s
5 291 M
( has just one container and items are of similar sizes and random close packing converges t) s
5 280 M
(o a fixed density percentage. If set of items in a random close packing within a container ) s
5 269 M
(are equivalent to satisfied clauses \(having same number of variables\) of a Voter Decision F) s
5 258 M
(unction, this topology result implies not more than ~V*63.6% of clauses \(where V is the vol) s
5 247 M
(ume of container\) can be satisfied per candidate\(MAXSAT\). Each n-sphere can be mapped to a ) s
5 236 M
( satisfied clause of n variables \(each variable corresponds to a bounded length equal to di) s
5 225 M
(ameter of n-sphere on a dimension of the n-space\).) s
5 203 M
(Reference:) s
5 192 M
(---------) s
5 181 M
(461.1 Random Close Packings of Spheres in a Container - Space-filling and Structural Topolo) s
5 170 M
(gy - http://www.math.cornell.edu/~connelly/PackingsIII.IV.pdf and http://www-iri.upc.es/peo) s
5 159 M
(ple/ros/StructuralTopology/) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(---------------------------------------------------) s
5 115 M
(462. \(THEORY\) Reduction from Random Close Packing to CNFSAT - related to 461 - 30 October 2) s
5 104 M
(017) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(---------------------------------------------------) s
5 71 M
(Each random close pack after a random shuffle shifts the centre of an n-sphere. Set of all ) s
5 60 M
(possible centroids of an n-sphere in each random close pack are connected in a clause by di) s
5 49 M
(sjunctions. There are as many clauses as number of n-spheres connected by conjunctions. For) s
5 38 M
( example,if R1,R2,R3,...  are random close packs and n-spheres s1,s2,s3,... are constituent) s
5 27 M
(s of these packs R1,R2,R3,... , Centroid of n-sphere si = Cik is different for each Rk i.e ) s
5 16 M
(n-sphere si can exist on any of these possible centroids which implies disjunction Ci1 V Ci) s
5 5 M
(2 V ... for locations of n-sphere si in Random Close Packs R1,R2,R3,.... This creates one c) s
_R
S
%%Page: (279) 279
%%BeginPageSetup
_S
18 36 translate
/pagenum 279 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (279) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(lause per n-sphere. For all n-spheres packed in container at random, following conjunction ) s
5 731 M
(of clauses for all n-spheres completes the reduction:) s
5 720 M
(        \(C11 V C12 V C13 ...\) /\\ \(C21 V C22 V C32 ...\) /\\ \(C31 V C32 V C33 ...\) /\\ ...) s
5 709 M
(Each Cik is assumed to be boolean variable which is 1 if n-sphere si is located in centroid) s
5 698 M
( Cik in random close pack Rk, else 0.) s
5 676 M
(Randomized Algorithm \(Parallel PRG or Cellular Automaton\) for this space filling random clo) s
5 665 M
(se pack finds a satisfying assignment to previous kSAT. This is not exactSAT because some s) s
5 654 M
(pheres \(clauses\) might lie outside the container. Topological maximum limit of 63% for this) s
5 643 M
( random close) s
5 632 M
(pack is the limit on density = Total Volume of Spheres \(or\) Total number of satisfied claus) s
5 621 M
(es / Volume of Container. As density increases , number of satisfied clauses increases. In ) s
5 610 M
(other words, Total number of satisfied clauses = Volume of Container * PackingDensity = V*0) s
5 599 M
(.636. What Volume of Container translates to in the context of CNFs is open to interpretati) s
5 588 M
(on - it might depend on the maximum-minimum range of centroid dimensions.) s
5 566 M
(Filling the space within the container by n-spheres in parallel monte carlo random choice o) s
5 555 M
(f centroids, simulates many natural parallel processes e.g shaking a container filled with ) s
5 544 M
(equal sized balls. Parallel PRG and Cellular Automaton algorithms are for these special set) s
5 533 M
(tings of random close packing \(wherein size of the ball is infinitesimally finite\) which ar) s
5 522 M
(e BPP/BPNC/RNC randomized algorithms to find a random close pack assignment to the previous) s
5 511 M
( kSAT. Each literal in this random close pack SAT is not just a centroid but also covers ci) s
5 500 M
(rcular space around it of finite constant radius. Considering the usual example - shaking a) s
5 489 M
( container having closely packed balls: Every successive shake of the container creates an ) s
5 478 M
(assignment to the kSAT. Formulating this kSAT requires prior knowledge of all possible cent) s
5 467 M
(roid tuples which could be infinite. If shaking is of constant or polynomial time, churning) s
5 456 M
( out successive assignments to previous kSAT is surprisingly not hard. Also previous kSAT d) s
5 445 M
(oes not have overlapping literals across clauses.) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(-----------------------------------------------) s
5 401 M
(463. \(FEATURE-DONE\) Ephemeris Search Script Update - Celestial Pattern Mining - 31 October ) s
5 390 M
(2017) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-----------------------------------------------) s
5 357 M
(Updated Ephemeris Search for Sequence Mined Celestial Configurations - toString\(\) function ) s
5 346 M
(has been changed to concatenate "Unoccupied") s
5 335 M
(for vacant zodiac signs while creating encoded celestial chart.) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(----) s
5 291 M
(464. \(FEATURE-DONE\) Ephemeris Search - Sequence Mining of Tropical Monsoon for mid-November) s
5 280 M
( 2017 - 1 November 2017) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(----) s
5 247 M
(\(#\) Apriori GSP SequenceMining on autogen_classifier_dataset historic Storms data has been ) s
5 236 M
(executed) s
5 225 M
(\(#\) asfer.enchoros.seqmining has been updated from autogen_classifier_dataset) s
5 214 M
(\(#\) MinedClassAssociationRules.txt has been rewritten containing almost 2500 celestial plan) s
5 203 M
(etary patterns) s
5 192 M
(\(#\) Ephemeris has been searched for almost 250 top astronomical patterns of these 2500 conf) s
5 181 M
(igurations ) s
5 170 M
(for mid-November 2017 ) s
5 159 M
(\(#\) There has been a significant match of most the patterns during this period. Range of se) s
5 148 M
(arch has been) s
5 137 M
(narrowed to 2 days because exhaustive search for all patterns is intensive.) s
5 126 M
(\(#\) This matches to NOAA CPC forecast in http://www.cpc.ncep.noaa.gov/products/JAWF_Monitor) s
5 115 M
(ing/India/GFS_forecasts.shtml) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(-----------) s
5 71 M
(465. \(THEORY\) Discrete Hyperbolic Computational Geometric Factorization, Chvatal Art Galler) s
5 60 M
(y Theorem) s
5 49 M
( and Parallel Tiling - 6 November 2017, 8 November 2017 - related to 34) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(-----------) s
5 16 M
(Chvatal Art Gallery Theorem states for floodlighting an art gallery shaped as n-polygon, fl) s
5 5 M
(oor\(n/3\) guards are sufficient. There is a graph theoretic proof of this by [Fisk]. Discret) s
_R
S
%%Page: (280) 280
%%BeginPageSetup
_S
18 36 translate
/pagenum 280 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (280) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(e Hyperbolic Factorization requires pixelation of continuous hyperbolic curve as set of con) s
5 731 M
(tiguous tiles \(array of pixels\). This computational geometric standard pixelation creates a) s
5 720 M
( polygon surrounding hyperbola of 4*\(number_of_factors + 1\) sides. This is because there ar) s
5 709 M
(e \(number_of_factors + 1\) pixelated rectangles in the polygon and each rectangle of the pol) s
5 698 M
(ygon has 4 sides. From Chvtal art gallery theorem 4/3 * \(number_of_factors + 1\) guards are ) s
5 687 M
(sufficient to cover this polygon. This optimum number of guards is approximately the minimu) s
5 676 M
(m number of parallel processors \(PRAMs\) required for tiling \(pixelation\) pre-processing ste) s
5 665 M
(p. Once these tiles are created in parallel, parallel sorting requires O\(logN\) time and pos) s
5 654 M
(t-processing binary search is also O\(logN\) - If there is a parallel binary search algorithm) s
5 643 M
( this could be sub-logarithmic. Assumption made previously is each guard has only vertical ) s
5 632 M
(and horizontal 90 degree visibility.) s
5 610 M
(As opposed to polygon pixelation, if the hyperbolic curve is discretized into set of line s) s
5 599 M
(egments by plain rounding off creating a line segment for each interval [N/x, N/\(x+1\)], low) s
5 588 M
(er envelope of this set of segments is the list of endpoints of segments and there are no o) s
5 577 M
(verlaps - segments meet only at endpoints. Number of line segments is twice the number of f) s
5 566 M
(actors of N or O\(loglogN\). Computing lower envelope in parallel is equivalent to tiling in ) s
5 555 M
(parallel. Lower envelope can be computed in parallel by CREW PRAM in O\(logN\) time and O\(Nlo) s
5 544 M
(gN\) operations.) s
5 522 M
(References:) s
5 511 M
(----------) s
5 500 M
(465.1 Chvatal Art Gallery Theorem and Fisk's Proof - https://www.cut-the-knot.org/Curriculu) s
5 489 M
(m/Combinatorics/Chvatal.shtml) s
5 478 M
(465.2 Number of prime factors of an integer - [Srinivasa Ramanujan] - Quarterly Journal of ) s
5 467 M
(Mathematics, XLVIII, 1917, 76 \342\\200\\223 92 - Ramanujan Papers and Notebooks - http://ramanu) s
5 456 M
(jan.sirinudi.org/Volumes/published/ram35.pdf - number of prime factors are of O\(loglogN\). T) s
5 445 M
(his implies number of rectangles \(and hence number of PRAMs\) in the pixelated hyperbola pol) s
5 434 M
(ygon could be sub-logarithmic in N.) s
5 423 M
(465.3 Introduction to Parallel Algorithms - [Joseph JaJa] - Chapter 4 - Searching,Sorting,M) s
5 412 M
(erging - Corollary 4.5 - Cole's Pipelined Mergesort and Chapter 6 - Planar Geometry - Lower) s
5 401 M
( Envelopes and Visibility polygon - Theorem 6.7 - https://people.ksp.sk/~ppershing/data/sko) s
5 390 M
(la/JaJa.pdf) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(-----------) s
5 346 M
(466. \(FEATURE-DONE\) Support Vector Machines implementation - based on CVXPY - 9 November 20) s
5 335 M
(17) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(-----------) s
5 302 M
(\(*\) New Support Vector Machines python implementation is committed to NeuronRain AsFer repo) s
5 291 M
(sitory) s
5 280 M
(\(*\) This minimizes an objective function 1/2*||w|| subject to constraint ||WX+b|| >= 1 whic) s
5 269 M
(h) s
5 258 M
(labels a point +1 or -1 on either side of a decision separating hyperplane WX+b for weight ) s
5 247 M
(vector W) s
5 236 M
(and bias b \(Reference: Machine Learning - Ethem Alpaydin - Chapter 13 - Kernel Machines\)) s
5 225 M
(\(*\) Optimization is solved by CVXPY DCCP Convex-Concave program) s
5 214 M
(\(*\) logs for this have been added to testlogs/) s
5 203 M
(\(*\) Present NeuronRain AsFer SVMRetriever.cpp depends on third-party SVMlight opensource so) s
5 192 M
(ftware. With) s
5 181 M
(this new implementation, references to SVMlight are to be phased out.) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(---------------------------------------------------) s
5 137 M
(467. \(THEORY\) Random Matrix Rounding for CNFSAT Solver, Blum-Micali PRG, Distinguisher for ) s
5 126 M
(Pseudorandomness - 10 November 2017 -) s
5 115 M
(related to 459) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(---------------------------------------------------) s
5 82 M
(Blum-Micali PRG depends on intractability of Discrete Logarithm f\(x\)=g^x mod p for primes p) s
5 71 M
(,g and group element x. Blum-Micali PRG creates) s
5 60 M
(sequences of \(f\(x\), f^2\(x\), f^3\(x\), ...\) by composition of f and computes stream of bits by) s
5 49 M
( hard-core boolean predicate function b\(.\) - \(b\(f\(x\)\), b\(f^2\(x\)\), ...\) which is sequence of) s
5 38 M
( unpredictable pseudorandom bits. In Random Matrix Rounding for CNFSAT solver by least squa) s
5 27 M
(res, probability of choosing a literal xn  = probability of the bit stream \(b\(f\(x\)\),b\(f^2\(x) s
5 16 M
(\)\), ...\) corresponding to binary encoding of n.) s
_R
S
%%Page: (281) 281
%%BeginPageSetup
_S
18 36 translate
/pagenum 281 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (281) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Probability of choosing a CNF by RMLSQR probability \(p=1/sqrt\(mn\) and there are 3m literals) s
5 731 M
( per 3CNF\) = \(1/[mn]\)^1.5m) s
5 720 M
(Probability of choosing a CNF from all possible n^\(3m\) random 3SATs in uniform distribution) s
5 709 M
( is = \(1/n\)^3m) s
5 687 M
(Inverse of RMLSQR probability = \(mn\)^1.5m is the expected number of pseudorandom binary str) s
5 676 M
(ings churned out by PRG before a required 3SAT is found.) s
5 665 M
(Inverse of uniform probability = n^3m is the expected number of pseudorandom binary strings) s
5 654 M
( churned out by PRG before required 3SAT is found.) s
5 632 M
(Distinguisher for these 2 distributions iterates through both sequences of bitstreams and p) s
5 621 M
(rints "RMLSQR" if match occurs in \(mn\)^1.5m expected number of iterations else prints "Unif) s
5 610 M
(orm". This requires exponential time in number of clauses.) s
5 588 M
(From PCP [Hastad] inapproximability result and previous Random Matrix analysis for approxim) s
5 577 M
(ate CNFSATSolver, if m^3*n^2*p^4 > 7/8*m then P=NP i.e. if p > 0.96716821/sqrt\(m*n\) then P=) s
5 566 M
(NP. For the previous distinguisher, this requires \(mn\)^1.5m / \(0.96716821\)^3m exponential i) s
5 555 M
(terations. From condition for P=NP, this number of iterations has to be polynomial for effi) s
5 544 M
(cient distinguishing of a PRG from perfect random sequence, which is a contradiction.) s
5 522 M
(References:) s
5 511 M
(-----------) s
5 500 M
(467.1 Existence of Pseudorandom Generators - [Goldreich-Hugo-Luby] - http://www.wisdom.weiz) s
5 489 M
(mann.ac.il/~oded/X/gkl.pdf) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(--------) s
5 445 M
(468. \(FEATURE-DONE\) Support Vector Machines - update - 10 November 2017) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(--------) s
5 412 M
(\(*\) Numpy indexing has been changed) s
5 401 M
(\(*\) Both random point and parametric point distances have been tested) s
5 390 M
(\(*\) DCCP log and Support Vector logs for 2 points and a random point have been committed to) s
5 379 M
( testlogs/) s
5 368 M
(\(*\) Distances are printed in the matrix result - two diametrically opposite points have equ) s
5 357 M
(al distances) s
5 346 M
(\(*\) Distance matrix is returned from distance_from_separating_hyperplane\(\) function) s
5 335 M
(\(*\) The distance minimized is the L1 norm \(sum of tuple elements\) and not L2 norm) s
5 324 M
( \(sum of squares of tuple elements\)) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-----------------------------------------) s
5 280 M
(469. \(FEATURE-DONE\) Computational Geometric Hyperbolic Factorization - Pixelated Segments S) s
5 269 M
(park Bitonic Sort - 13 November 2017) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(-----------------------------------------) s
5 236 M
(\(*\) Numbers 147,219,251,253 are factorized.) s
5 225 M
(\(*\) C++ tiling pre-processing routines have been changed for this and Pixelated Tiles stora) s
5 214 M
(ge text files for bitonic sort have been updated) s
5 203 M
(\(*\) Factorization is benchmarked on single node cluster on dual core \(which is parallel RAM) s
5 192 M
(\).) s
5 181 M
(\(*\) This is just a representative number on single dual-core CPU and not a cloud parallelis) s
5 170 M
(m benchmark.) s
5 159 M
(\(*\) Each DAGScheduler Spark work item is independent code executable in parallel and benchm) s
5 148 M
(ark has to be this parallel time per work unit which) s
5 137 M
(is captured in per task duration logs below by Spark Driver:) s
5 126 M
(17/11/13 21:18:22 INFO TaskSetManager: Finished task 1.0 in stage 1791.0 \(TID 3583\) in 46 m) s
5 115 M
(s on localhost \(executor driver\) \(1/2\)) s
5 104 M
(17/11/13 21:18:22 INFO TaskSetManager: Finished task 0.0 in stage 1791.0 \(TID 3582\) in 47 m) s
5 93 M
(s on localhost \(executor driver\) \(2/2\)) s
5 82 M
(17/11/13 21:18:22 INFO TaskSetManager: Starting task 0.0 in stage 1792.0 \(TID 3584, localho) s
5 71 M
(st, executor driver, partition 0, PROCESS_LOCAL, 6281 bytes\)) s
5 60 M
(17/11/13 21:18:22 INFO TaskSetManager: Starting task 1.0 in stage 1792.0 \(TID 3585, localho) s
5 49 M
(st, executor driver, partition 1, PROCESS_LOCAL, 6309 bytes\)) s
5 38 M
(17/11/13 21:18:22 INFO TaskSetManager: Finished task 1.0 in stage 1792.0 \(TID 3585\) in 46 m) s
5 27 M
(s on localhost \(executor driver\) \(1/2\)) s
5 16 M
(17/11/13 21:18:22 INFO TaskSetManager: Finished task 0.0 in stage 1792.0 \(TID 3584\) in 50 m) s
5 5 M
(s on localhost \(executor driver\) \(2/2\)) s
_R
S
%%Page: (282) 282
%%BeginPageSetup
_S
18 36 translate
/pagenum 282 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (282) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(17/11/13 21:26:39 INFO TaskSetManager: Finished task 0.0 in stage 1791.0 \(TID 3582\) in 50 m) s
5 731 M
(s on localhost \(executor driver\) \(1/2\)) s
5 720 M
(17/11/13 21:26:39 INFO TaskSetManager: Finished task 1.0 in stage 1791.0 \(TID 3583\) in 49 m) s
5 709 M
(s on localhost \(executor driver\) \(2/2\)) s
5 698 M
(17/11/13 21:26:39 INFO TaskSetManager: Starting task 0.0 in stage 1792.0 \(TID 3584, localho) s
5 687 M
(st, executor driver, partition 0, PROCESS_LOCAL, 6281 bytes\)) s
5 676 M
(17/11/13 21:26:39 INFO TaskSetManager: Starting task 1.0 in stage 1792.0 \(TID 3585, localho) s
5 665 M
(st, executor driver, partition 1, PROCESS_LOCAL, 6309 bytes\)) s
5 654 M
(17/11/13 21:26:39 INFO TaskSetManager: Finished task 0.0 in stage 1792.0 \(TID 3584\) in 48 m) s
5 643 M
(s on localhost \(executor driver\) \(1/2\)) s
5 632 M
(17/11/13 21:26:39 INFO TaskSetManager: Finished task 1.0 in stage 1792.0 \(TID 3585\) in 49 m) s
5 621 M
(s on localhost \(executor driver\) \(2/2\)) s
5 610 M
(17/11/13 21:33:59 INFO TaskSetManager: Finished task 0.0 in stage 1791.0 \(TID 3582\) in 48 m) s
5 599 M
(s on localhost \(executor driver\) \(1/2\)) s
5 588 M
(17/11/13 21:33:59 INFO TaskSetManager: Finished task 1.0 in stage 1791.0 \(TID 3583\) in 50 m) s
5 577 M
(s on localhost \(executor driver\) \(2/2\)) s
5 566 M
(17/11/13 21:33:59 INFO TaskSetManager: Starting task 0.0 in stage 1792.0 \(TID 3584, localho) s
5 555 M
(st, executor driver, partition 0, PROCESS_LOCAL, 6281 bytes\)) s
5 544 M
(17/11/13 21:33:59 INFO TaskSetManager: Starting task 1.0 in stage 1792.0 \(TID 3585, localho) s
5 533 M
(st, executor driver, partition 1, PROCESS_LOCAL, 6309 bytes\)) s
5 522 M
(17/11/13 21:33:59 INFO TaskSetManager: Finished task 0.0 in stage 1792.0 \(TID 3584\) in 55 m) s
5 511 M
(s on localhost \(executor driver\) \(1/2\)) s
5 500 M
(17/11/13 21:33:59 INFO TaskSetManager: Finished task 1.0 in stage 1792.0 \(TID 3585\) in 57 m) s
5 489 M
(s on localhost \(executor driver\) \(2/2\)) s
5 478 M
(17/11/13 21:40:20 INFO TaskSetManager: Finished task 1.0 in stage 1791.0 \(TID 3583\) in 49 m) s
5 467 M
(s on localhost \(executor driver\) \(1/2\)) s
5 456 M
(17/11/13 21:40:20 INFO TaskSetManager: Finished task 0.0 in stage 1791.0 \(TID 3582\) in 52 m) s
5 445 M
(s on localhost \(executor driver\) \(2/2\)) s
5 434 M
(17/11/13 21:40:20 INFO TaskSetManager: Starting task 0.0 in stage 1792.0 \(TID 3584, localho) s
5 423 M
(st, executor driver, partition 0, PROCESS_LOCAL, 6281 bytes\)) s
5 412 M
(17/11/13 21:40:20 INFO TaskSetManager: Starting task 1.0 in stage 1792.0 \(TID 3585, localho) s
5 401 M
(st, executor driver, partition 1, PROCESS_LOCAL, 6309 bytes\)) s
5 390 M
(17/11/13 21:40:20 INFO TaskSetManager: Finished task 0.0 in stage 1792.0 \(TID 3584\) in 50 m) s
5 379 M
(s on localhost \(executor driver\) \(1/2\)) s
5 368 M
(17/11/13 21:40:20 INFO TaskSetManager: Finished task 1.0 in stage 1792.0 \(TID 3585\) in 50 m) s
5 357 M
(s on localhost \(executor driver\) \(2/2\)) s
5 346 M
(\(*\) Bitonic Sort is O\(logN*logN\) and number of processors required is approximately O\(N^2.5) s
5 335 M
(\) but abides by NC definition. Cole Pipelined Merge Sort which is O\(logN\) is both in NC and) s
5 324 M
( Work-Time Optimal.) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(------------------------------------------) s
5 280 M
(470. \(FEATURE-DONE\) Support Vector Machines Update - Learn and Classify functions - 13 Nove) s
5 269 M
(mber 2017) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(------------------------------------------) s
5 236 M
(\(*\) Support Vector Machines python implementation has been updated to include two functions) s
5 225 M
( :) s
5 214 M
(        - for learning set of support vectors from a training dataset tuples and store the ) s
5 203 M
(vectors in a dictionary map of distance-to-vectors.) s
5 192 M
(        - to classify a tuple by finding its distance with reference to the support vector ) s
5 181 M
(regions - distance-to-vectors map is sorted and) s
5 170 M
(        - if there are more than 1 tuples per minimum distance, those have to be reckoned a) s
5 159 M
(s support vectors ) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(--------------------------------------------) s
5 115 M
(471. \(THEORY\) Jones-Sato-Wada-Wiens Theorem, Complement Functions, Prime-Composite Compleme) s
5 104 M
(ntation, Prime Number Theorem, Ulam Spiral,) s
5 93 M
(Ramsey 2-coloring of integers, Hilbert Tenth Problem, Unique Factorization , Matiyasevich-R) s
5 82 M
(obinson-Davis-Putnam Theorem, Riemann Hypothesis - ) s
5 71 M
(related to 24,370,390,394 - 13 November 2017, 14 November 2017, 29 November 2017,1 December) s
5 60 M
( 2017,4 December 2017,23 December 2017) s
5 49 M
(\(Draft updates to https://arxiv.org/abs/1106.4102\)) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(--------------------------------------------) s
5 16 M
(Jones-Sato-Wada-Wiens Theorem proves existence of a polynomial in 25 degree-26 variables wh) s
5 5 M
(ich has values equal to set of all primes. This relates to Prime-Composite Function Complem) s
_R
S
%%Page: (283) 283
%%BeginPageSetup
_S
18 36 translate
/pagenum 283 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (283) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(entation - Jones-Sato-Wada-Wiens polynomial is a complement function of set of composites w) s
5 731 M
(hich are formalized by unique factorization theorem. This is special case of Matiyasevich-D) s
5 720 M
(avis-Robinson-Putnam Theorem which proves any recursively enumerable set accepted by a Turi) s
5 709 M
(ng machine is equivalent to a polynomial accepting the elements of the set. Another closely) s
5 698 M
( related problem is: Does there exist a prime between two integers p=xy and q=x\(y+1\). Prime) s
5 687 M
( number theorem states and proves number of primes less than N=O\(N/logN\).) s
5 665 M
(Number of primes < p=xy:) s
5 654 M
(        = c1*xy/logxy) s
5 643 M
(Number of primes < q=\(x+1\)y:) s
5 632 M
(        = c1*\(x+1\)y/log\(x+1\)y) s
5 610 M
(Number of primes between p=xy and q=\(x+1\)y :) s
5 599 M
(        = c1*\(x+1\)y/log\(x+1\)y - c1*xy/logxy) s
5 577 M
(Assuming number of primes between p and q = c1*\(x+1\)y/log\(x+1\)y - c1*xy/logxy > 0:) s
5 566 M
(        \(x+1\)y/log\(x+1\)y > xy/logxy) s
5 555 M
(After reducing:) s
5 544 M
(        log\(xy\) > x\(log\(x+1\) - logx\)) s
5 533 M
(        log\(xy\) > xlog\(x+1/x\)) s
5 522 M
(For large x:) s
5 511 M
(        log\(x+1/x\) ~ log 1 = 0) s
5 500 M
(=>      log\(xy\) > 0) s
5 489 M
(thus proving the assumption. This estimate of number of primes between two composites thus ) s
5 478 M
(directly has bearing on discrepancy of this 2-colored \(prime-composite\) integer sequence wh) s
5 467 M
(ere discrepancy is difference between number of elements of 2 colors in monochromatic arith) s
5 456 M
(metic progressions. Ulam Spiral, which is sequence of integers written in concentric spiral) s
5 445 M
(ling rectangle, has diagonals aligned along points of prime numbers described by polynomial) s
5 434 M
(s. Rectangle of Ulam Spiral can be written as polynomial x\(x+1\) or x\(x-1\). Previous derivat) s
5 423 M
(ion on existence of primes between x\(x+1\) and x*x implies there is a prime diagonal. Ulam r) s
5 412 M
(ectangle sequence for x\(x+1\) or x\(x-1\) is 1,2,4,6,9,12,16,20,25,30,36,42,...) s
5 390 M
(Matiyasevich-Davis-Robinson-Putnam theorem implies every recursively enumerable set has a d) s
5 379 M
(iophantine equation. Complement Function in several variables is nothing but a diophantine ) s
5 368 M
(equation for the complement set by rewriting a diophantine as function in several variables) s
5 357 M
(. Thus concepts of Diophantine sets/equations and Complement functions are synonymous. Deci) s
5 346 M
(dability of complement functions \(https://arxiv.org/abs/1106.4102\) is equivalent to decidab) s
5 335 M
(ility of diophantine equations. MRDP theorem requires every recursively enumerable set to h) s
5 324 M
(ave a diophantine equation and therefore to have a function for it. [There exists a set whi) s
5 313 M
(ch is not recursively enumerable e.g set of subsets of infinite set]. Undecidability of Fun) s
5 302 M
(ction Complementation follows from MRDP theorem because there exists a recursively enumerab) s
5 291 M
(le set which is not computably recursive and hence has no algorithm \(algorithms are computa) s
5 280 M
(ble recursive languages which do not loop and have yes/no halt on all inputs\) i.e Undecidab) s
5 269 M
(ility of Hilbert's Tenth Problem applies directly to Undecidability of Function Complementa) s
5 258 M
(tion. In other words set of diophantines has cardinality greater than set of all computable) s
5 247 M
( recursive languages and therefore there exists a diophantine function for a complement set) s
5 236 M
( which cannot be computed by a Turing machine. This is one more proof of undecidability of ) s
5 225 M
(complementation and simpler than Post Correspondence Problem based proof described earlier.) s
5 203 M
(Definition:) s
5 192 M
(----------) s
5 181 M
(For a set S and subsets A,B of S, if {A,B} is a disjoint set cover of S and if A has a diop) s
5 170 M
(hantine equation diophantine\(A\) \(expressible as values of polynomial\), then diophantine equ) s
5 159 M
(ation for B = diophantine\(B\), is the complement function of diophantine\(A\).) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(---------------------------------------------) s
5 115 M
(Theorem: Existence of Complement Diophantine Equation or Complement Function is Undecidable) s
5 104 M
( when neither of the complementary sets are recursive.) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(---------------------------------------------) s
5 60 M
(Proof:) s
5 49 M
(------) s
5 38 M
(MRDP theorem for Hilbert's tenth problem implies every recursively enumerable set is expres) s
5 27 M
(sible as values of a diophantine polynomial.) s
5 5 M
(Possibility 1 - Generic - Both complementary sets A and B are recursively enumerable:) s
_R
S
%%Page: (284) 284
%%BeginPageSetup
_S
18 36 translate
/pagenum 284 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (284) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(--------------------------------------------------------------------------------------) s
5 731 M
(If both complementary sets A and B are recursively enumerable, they always have a diophanti) s
5 720 M
(ne polynomial - diophantine\(A\) and diophantine\(B\).) s
5 709 M
(There is a known result which states: if set A and B=S-A are both recursively enumerable, t) s
5 698 M
(hen A is recursive. But there exists a recursively enumerable set B which is not recursive,) s
5 687 M
( for some complement A => There is no algorithm for construction of diophantine\(B\).) s
5 665 M
(Possibility 2 - Special - One of the complementary sets A or B is recursively enumerable an) s
5 654 M
(d the other is recursive:) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-------------------------) s
5 621 M
(Both A and B have a diophantine polynomial. If A is recursively enumerable but not recursiv) s
5 610 M
(e, there is a complement B \(A=S-B\) such that there is no algorithm for construction of diop) s
5 599 M
(hantine\(A\).) s
5 577 M
(Possibility 3 - Special - Both complementary sets A and B are recursive:) s
5 566 M
(------------------------------------------------------------------------) s
5 555 M
(Both A and B are recursive and recursively enumerable => Both A and B have diophantine poly) s
5 544 M
(nomials and both diophantine\(A\) and diophantine\(B\) can be constructed. There are many examp) s
5 533 M
(les for this complementation: [Squares,PellEquation],[Composites/UniqueFactorizationDomain,) s
5 522 M
(Primes] etc.,) s
5 500 M
(Possibility 4 - Special - Both complementary sets are non recursively enumerable:) s
5 489 M
(--------------------------------------------------------------------------------) s
5 478 M
(Obviously both sets A and B are beyond Chomsky hierarchy and there is no algorithm for cons) s
5 467 M
(truction of diophantine\(A\) and diophantine\(B\)) s
5 445 M
(Possibility 5 - Special - One of the complementary sets is recursively enumerable and the o) s
5 434 M
(ther is non recursively enumerable:) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(------------------------------------) s
5 401 M
(One of the sets A is recursively enumerable and thus has a diophantine polynomial. But ther) s
5 390 M
(e exists a complement B=S-A such that A is not recursive => There is no algorithm for const) s
5 379 M
(ruction of diophantine\(A\)) s
5 357 M
(Proof in one line: Any set is a complementary set of some other set and thus any complement) s
5 346 M
(ary set which is recursively enumerable but not recursive has a diophantine equation, and t) s
5 335 M
(hus undecidable by an algorithm.) s
5 313 M
(Construction of a complement function for complementary set:) s
5 302 M
(------------------------------------------------------------) s
5 291 M
(Construction of a complement function is to find a mapping function f defined as:) s
5 280 M
(        f\(0\) = a1) s
5 269 M
(        f\(1\) = a2) s
5 258 M
(        f\(2\) = a3) s
5 247 M
(        ...) s
5 236 M
(        f\(n\) = an) s
5 225 M
(for a1,a2,a3,...,an in Diophantine complementary set, which is equivalent to definition of ) s
5 214 M
(recursively enumerable total function. This enumeration can be written as a diophantine equ) s
5 203 M
(ation:) s
5 192 M
(        f\(x\) - a = 0) s
5 181 M
(Function f can internally be any mathematical function and can have additional parameters b) s
5 170 M
(esides x. Finding the enumerated mapping previously is equivalent to solving an arbitrary d) s
5 159 M
(iophantine f\(x\) - a = 0 i.e finding solutions to x and a which is Hilbert's Tenth Problem -) s
5 148 M
( MRDP theorem proves finding integer solutions to arbitrary Diophantine is undecidable. ArX) s
5 137 M
(iv version at https://arxiv.org/abs/1106.4102 mentions some algorithms for constructing a c) s
5 126 M
(omplement e.g Fourier series, Lambda calculus, Polynomial interpolation. Polynomial Reconst) s
5 115 M
(ruction Problem also provides a polynomial approximation of the set and has origins in Erro) s
5 104 M
(r Correction and List Decoding. These algorithms apply only to recursive sets - complement ) s
5 93 M
(function mappings are constructible only for recursive sets. This is intuitively obvious be) s
5 82 M
(cause a Turing Machine computing the previous mapping for a recursively enumerable set migh) s
5 71 M
(t loop for ever.) s
5 49 M
(An important example for applicability of function complementation is ABC Conjecture which ) s
5 38 M
(is defined in references below. Let S be the universal set of all possible integer triples ) s
5 27 M
(\(a,b,c\). Set of coprime triples which have quality q\(a,b,c\) = log\(c\)/log\(radical\(abc\)\) > 1 ) s
5 16 M
(+ epsilon for all epsilon > 0 is the subset A of S. ABC conjecture states that there are on) s
5 5 M
(ly finitely many such triples for every epsilon > 0. Then the set B=S-A is the set of all t) s
_R
S
%%Page: (285) 285
%%BeginPageSetup
_S
18 36 translate
/pagenum 285 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (285) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(riples which violate this criterion - sets A and B are complementary. Proving ABC Conjectur) s
5 731 M
(e is equivalent to proving the violation of this criterion in the complement set B - there ) s
5 720 M
(are infinite non-coprime triples for each epsilon > 0 which have q\(a,b,c\) > 1.This converts) s
5 709 M
( ABC conjecture from primal finiteness to its dual infiniteness.) s
5 676 M
(References:) s
5 665 M
(----------) s
5 654 M
(471.1 Jones-Sato-Wada-Wiens Theorem and Prime valued Polynomial - https://www.maa.org/sites) s
5 643 M
(/default/files/pdf/upload_library/22/Ford/JonesSatoWadaWiens.pdf - Jones-Sato-Wada-Wiens po) s
5 632 M
(lynomial generates negative numbers too and its positive values are set of primes.) s
5 621 M
(471.2 Matijasevic Polynomial - http://primes.utm.edu/glossary/xpage/MatijasevicPoly.html - ) s
5 610 M
(negative values can be removed by setting squared terms of polynomial to zero and thus only) s
5 599 M
( set of all primes is generated which is the complement function of factorization.) s
5 588 M
(471.3 Hilbert's Tenth Problem and Matiyasevich-Robinson-Davis-Putnam \(MRDP\) Theorem - https) s
5 577 M
(://en.wikipedia.org/wiki/Hilbert%27s_tenth_problem - Hilbert's Tenth Problem poses if there) s
5 566 M
( exists an algorithm which generates integer values for unknowns in a multivariate diophant) s
5 555 M
(ine equation. Hilbert's Tenth Problem was proved undecidable. Converse of this is finding a) s
5 544 M
( diophantine equation for a set - MRDP Theorem: Every recursively enumerable set is diophan) s
5 533 M
(tine.) s
5 522 M
(471.4 Primes are nonnegative values of a polynomial in 10 variables - [Yu.V.Matijasevic - h) s
5 511 M
(ttps://logic.pdmi.ras.ru/~yumat/publications/publications.php] - https://link.springer.com/) s
5 500 M
(article/10.1007/BF01404106 - [In Russian, Translated to English by Louise Guy and James P. ) s
5 489 M
(Jones, The University of Calgary, Calgary, Canada]) s
5 478 M
(471.5 Pell's Equation - https://en.wikipedia.org/wiki/Pell%27s_equation - Diophantine equat) s
5 467 M
(ion for set of nonsquare integers - Discovered first in treatise Brahmasphutasiddhanta of B) s
5 456 M
(rahmagupta. This complements set of squared integers.) s
5 445 M
(471.6 Non-Recursively Enumerable Languages - https://www.seas.upenn.edu/~cit596/notes/dave/) s
5 434 M
(relang8.html - powerset of infinite set is NonRecursivelyEnumerable.) s
5 423 M
(471.7 Goedel's First Incompleteness Theorem Follows From MRDP theorem - https://en.wikipedi) s
5 412 M
(a.org/wiki/G%C3%B6del%27s_incompleteness_theorems and http://www.scholarpedia.org/article/M) s
5 401 M
(atiyasevich_theorem - Diophantines and Complement Functions - "... The Diophantine equation) s
5 390 M
( of the general form P\(a,x1,\342\\200\246,xm\)=0 in the definition of a Diophantine representation ) s
5 379 M
(can be replaced by a Diophantine equation of a special kind, namely, with the parameter iso) s
5 368 M
(lated in the right-hand side, thus giving a representation of form a \342\\210\\210 R  \342\\237\272 \342) s
5 357 M
(\\210\\203x1\342\\200\246xn{Q\(x1,\342\\200\246,xn\)=a} In other word, every Diophantine \(and hence every lis) s
5 346 M
(table\) set of non-negative integers is the set of all values assumed by some polynomial wit) s
5 335 M
(h integer coefficients with many variables. ..." - Any complement set which is enumerable/l) s
5 324 M
(istable is diophantine and there exists a diophantine set which is not recursive but enumer) s
5 313 M
(able.) s
5 302 M
(471.8 What is Mathematics: Goedel Theorem and Around - https://dspace.lu.lv/dspace/bitstrea) s
5 291 M
(m/handle/7/5306/Podnieks_What_is_Mathematics_Goedel.pdf?sequence=1 - Ramsey Theorem \(finite) s
5 280 M
( and infinite\) - Decidability of Function Complementation is the question: "For any two set) s
5 269 M
(s A and B which are disjoint set covers of a universal set S \(A U B = S\), and if set A is d) s
5 258 M
(iophantine \(is expressible as values of a polynomial\), is B also diophantine and if yes is ) s
5 247 M
(there a generic algorithm to construct a diophantine polynomial for B?". [Equivalently A an) s
5 236 M
(d B are Ramsey 2-coloring of S and diophantine polynomials for A and B\(if it exists\) are 2-) s
5 225 M
(coloring schemes]. Answer to this question is two-fold:) s
5 214 M
(        \(*\) Is set B recursively enumerable? \(There are sets which are not recursively enum) s
5 203 M
(erable e.g set of subsets of infinite set\)) s
5 192 M
(        \(*\) If set B is recursively enumerable, B has an equivalent diophantine polynomial.) s
5 181 M
( But there exists a set B which is enumerable but not computably recursive and there is no ) s
5 170 M
(generic algorithm for constructing complement diphantine polynomial. Undecidability of Comp) s
5 159 M
(lementation implies finding 2-coloring scheme is also undecidable.) s
5 148 M
(        \(*\) In both possibilities, there is a set which does not have a diophantine polynom) s
5 137 M
(ial - there is a non-recursively enumerable set which is outside Chomsky-Schutzenberger Typ) s
5 126 M
(e-0,1,2,3 hierarchy and there is a recursively enumerable set which is not recursive comput) s
5 115 M
(able by a Turing machine thus ruling out a generic procedure for finding 2-coloring schemes) s
5 104 M
(.) s
5 93 M
(471.9 Goedel Incompleteness and MRDP theorem - https://plato.stanford.edu/entries/goedel-in) s
5 82 M
(completeness/#HilTenProMRDThe - "... Beginning in the early 1950s, Julia Robinson and Marti) s
5 71 M
(n Davis worked on this problem, later joined by Hilary Putnam. As a result of their collabo) s
5 60 M
(ration, the first important result in this direction was achieved. Call an equation \342\\200) s
5 49 M
(\\234an exponential Diophantine equation\342\\200\\235 if it involves also exponentiation, as wel) s
5 38 M
(l as addition and multiplication \(that is, one can have both constants and variables as exp) s
5 27 M
(onents\); naturally, the focus is still in the integer solutions. Davis, Putnam, and Robinso) s
5 16 M
(n \(1961\), showed that the problem of solvability of exponential Diophantine equations is un) s
5 5 M
(decidable. In 1970, Yuri Matiyasevich added the final missing piece, and demonstrated that ) s
_R
S
%%Page: (286) 286
%%BeginPageSetup
_S
18 36 translate
/pagenum 286 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (286) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(the problem of the solvability of Diophantine equations is undecidable. Hence the overall r) s
5 731 M
(esult is often called MRDP Theorem \(for an exposition, see, e.g., Davis 1973; Matiyasevich ) s
5 720 M
(1993\).  The essential technical achievement was that all semi-decidable \(recursively enumer) s
5 709 M
(able\) sets can be given a Diophantine representation, i.e., they can be represented by a si) s
5 698 M
(mple formula of the form \342\\210\\203x1\342\\200\246\342\\210\\203xn\(s = t\), where \(s = t\) is a Diophantin) s
5 687 M
(e equation. More exactly, for any given recursively enumerable set S, there is a Diophantin) s
5 676 M
(e equation \(s\(y, x1, \342\\200\246 , xn\) = t\(y, x1, \342\\200\246 , xn\)\) such that n \342\\210\\210 S if and o) s
5 665 M
(nly if \342\\210\\203x1\342\\200\246\342\\210\\203xn\(s\(n, x1, \342\\200\246 , xn\) = t\(n, x1, \342\\200\246 , xn\)\).  As the) s
5 654 M
(re are semi-decidable \(recursively enumerable\) sets which are not decidable \(recursive\), th) s
5 643 M
(e general conclusion follows immediately:) s
5 632 M
(        MRDP Theorem) s
5 621 M
(                There is no general method for deciding whether or not a given Diophantine ) s
5 610 M
(equation has a solution. ...") s
5 599 M
(471.10 Special Case of Complement Functions and MRDP Theorem - http://www.logicmatters.net/) s
5 588 M
(resources/pdfs/MRDP.pdf - Section 3 \(Diophantine equation for set of Primes\) and Section 4 ) s
5 577 M
(- Theorem 4.3 - "If a set K and its complement N-K are both recursively enumerable then K i) s
5 566 M
(s recursive". But MRDP theorem implies all recursively enumerable sets are diophantine and ) s
5 555 M
(because there exists a recursively enumerable set which is not recursive, there is no algor) s
5 544 M
(ithm to find a diophantine polynomial whose values is a set and thus the general case proce) s
5 533 M
(dure for complementation is undecidable. Rephrasing theorem 4.3, If a set K is diophantine\() s
5 522 M
(K is expressible as values of a polynomial\) and the complement set N-K is also diophantine\() s
5 511 M
(N-K is expressible as values of a polynomial\), then K is recursive\(there exists an Yes/No h) s
5 500 M
(alt Turing machine accepting K\). It has to be observed here that diophantine equations for ) s
5 489 M
(K and N-K are complement functions. This special case is for the converse direction: assumi) s
5 478 M
(ng 2 complementary sets are diophantine, then one of the two is computable by an algorithm.) s
5 467 M
( Quoted excerpts from Definition 4.1 - "...Definition 4.1. A set of numbers K is recursivel) s
5 456 M
(y enumerable iff it is \(i\) the range of a total recursive function \342\\200\\223 or equivalentl) s
5 445 M
(y, it is \(ii\) the domain of a partial recursive function.  What does this come to? Definiti) s
5 434 M
(on \(i\) says that K is recursively enumerable if there is an algorithmically computable \(tot) s
5 423 M
(al\) function f such that as you go through f\(0\), f\(1\), f\(2\), . . . you spit out values k0, ) s
5 412 M
(k1, k2 . . . in K, with any member of K eventually appearing \(perhaps with repetitions\). Th) s
5 401 M
(e equivalent definition \(ii\) says that there is an algorithm such that the set of input num) s
5 390 M
(bers for which the algorithm halts is exactly the set of numbers in K ...". Partial recursi) s
5 379 M
(ve function is a primitive recursive function not necessarily defined for all inputs and co) s
5 368 M
(mputable by a Turing machine. Total recursive function is a partial recursive function whic) s
5 357 M
(h is defined for all inputs.) s
5 346 M
(471.11 MRDP Theorem, Jone-Sato-Wada-Wiens Polynomial and Undecidability in Number Theory - ) s
5 335 M
([Bjorn Poonen] - http://www.cis.upenn.edu/~cis262/notes/rademacher.pdf - Diophantine statem) s
5 324 M
(ent of Riemann Hypothesis - " MRDP theorem gives a polynomial equation that has integer sol) s
5 313 M
(utions if and only if Riemann Hypothesis is false " i.e find a counterexample to Riemann Ze) s
5 302 M
(ta Function non-trivial zeroes - one which does not have Re\(s\) = 0.5. Turing machine for th) s
5 291 M
(is might loop forever and thus recursively enumerable. Hence this Turing machine has a diop) s
5 280 M
(hantine polynomial representation.) s
5 269 M
(471.12 Formulas for Primes - https://oeis.org/wiki/Formulas_for_primes#Solutions_to_Diophan) s
5 258 M
(tine_equations) s
5 247 M
(471.13 Simplest Diophantine Representation - [Panu Raatikainen] - https://pdfs.semanticscho) s
5 236 M
(lar.org/cd96/ead1a00b73ecc9cfabf4b9a617907ce9bdd6.pdf - Theorem 4 - This translates to the ) s
5 225 M
(problem of determining simplest complement diophantine function of complexity measure K suc) s
5 214 M
(h that with respect to a complexity measure \(e.g Kolmogorov Complexity and Chaitin incomple) s
5 203 M
(teness Theorem\) every other diophantine for a complementary set has complexity greater than) s
5 192 M
( K. Finding Simplest Complement Diophantine is also undecidable.) s
5 181 M
(471.14 Waring Problem and Diophantos/Bachet/Lagrange Four Square Theorem for real quarterni) s
5 170 M
(ons - Topics in Algebra - Lemma 7.4.3 and Theorem 7.4.1 - Page 373-377 - [Israel N. Herstei) s
5 159 M
(n] - Ever positive integer is sum of four squares i.e There is a diophantine polynomial f\(a) s
5 148 M
(,b,c,d\) = a^2 + b^2 + c^2 + d^2 = n in N.) s
5 137 M
(471.15 Complement Functions, Diophantine Analysis and ABC Conjecture - https://en.wikipedia) s
5 126 M
(.org/wiki/Abc_conjecture - ABC Conjecture in number theory is the following:) s
5 115 M
(Let a + b = c be a mutually coprime integer triple f\(a,b,c\). Quality q\(a,b,c\) is defined as) s
5 104 M
( = log\(c\)/log\(radical\(abc\)\) where radical\(abc\) is the product of distinct prime factors of ) s
5 93 M
(product abc. In most cases q\(a,b,c\) < 1. ABC conjecture postulates existence of finitely ma) s
5 82 M
(ny triples \(a,b,c\) for which q\(a,b,c\) > 1 + epsilon. f\(a,b,c\) : a + b = c is the diophantin) s
5 71 M
(e equation for the set of coprime triples.) s
5 60 M
(471.16 Erdos-Straus Diophantine Conjecture - https://en.wikipedia.org/wiki/Erd%C5%91s%E2%80) s
5 49 M
(%93Straus_conjecture - For any integer n >= 2, there exist integer triples a,b,c which are ) s
5 38 M
(solutions to diophantine equation : 4/n = 1/a + 1/b + 1/c) s
5 27 M
(471.17 ABC Conjecture Proof-designate - Interuniversal Teichmuller Theory - [Shinichi Mochi) s
5 16 M
(zuki] - http://www.kurims.kyoto-u.ac.jp/~motizuki/top-english.html) s
5 5 M
(471.18 Exponential Diophantines, Fibonacci and Lucas Sequences, Maximum limit on solvabilit) s
_R
S
%%Page: (287) 287
%%BeginPageSetup
_S
18 36 translate
/pagenum 287 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (287) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(y of Diophantine - Reduction of Unknowns in Diophantine Representations - [SunZhiWei] - htt) s
5 731 M
(p://maths.nju.edu.cn/~zwsun/12d.pdf - "... If we take into account the number of unknowns, ) s
5 720 M
(then it is natural to ask that for what n there does not exist an algorithm to test \(polyno) s
5 709 M
(mial\) Diophantine equations with n unknowns for solvability in integers..." - n=27 or n=11) s
5 698 M
(471.19 Diophantine Equation Representation of Fibonacci Series - [James P.Jones] - https://) s
5 687 M
(www.fq.math.ca/Scanned/13-1/jones.pdf ) s
5 676 M
(471.20 Vandermonde Matrix and Polynomial Interpolation - https://ece.uwaterloo.ca/~dwharder) s
5 665 M
(/NumericalAnalysis/05Interpolation/vandermonde/) s
5 654 M
(471.21 Number of zeroes of Riemann Zeta Function - [Norman Levinson - Hugh L.Montgomery] - ) s
5 643 M
(https://projecteuclid.org/download/pdf_1/euclid.acta/1485889821) s
5 632 M
(471.22 Diophantine Representation of Riemann Zeta Function - Davis-Matiyasevich-Robinson Th) s
5 621 M
(eorem and Matiyasevich\(1993\) Theorem - "...Theorem 2 \(Davis, Matiyasevich, and Robinson\). T) s
5 610 M
(he Riemann hypothesis is equivalent to the assertion \(for n = 1, 2, 3, . . .\) that \(Sum\(k\342) s
5 599 M
(\\211\244\316\264\(n\) [1/k \342\\210\\222 n^2/2]\)^2 < 36n^3 ..." and "...Matiyasevich essentially takes adv) s
5 588 M
(antage of the fact that the Riemann hypothesis implies that for n \342\\211\245 600, |\317\\210\(n\) \342) s
5 577 M
(\\210\\222 n| < n^1/2*\(logn\)^2.  Since \317\\210\(n\) = log\(lcm\(1, 2, . . . , n\)\),..." - http://web) s
5 566 M
(.stanford.edu/~anayebi/projects/RH_Diophantine.pdf \(Philosophical Implication: Diophantines) s
5 555 M
( are contained in Adleman-Manders Complexity Class D a subset of NP. Proof of P=NP implies ) s
5 544 M
(Riemann Hypothesis is easily solvable by an algorithm e.g ZetaGrid or humans\) ) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(-----------) s
5 500 M
(472. \(FEATURE-DONE\) Support Vector Machines Update and Discrete Hyperbolic Factorization Sp) s
5 489 M
(ark Benchmarks) s
5 478 M
(- 14 November 2017) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(-----------) s
5 445 M
(\(*\) Support Vector Machines implementation has been updated to persist the learnt support v) s
5 434 M
(ectors to) s
5 423 M
( a disk file SupportVectorMachines.txt) s
5 412 M
(\(*\) This text file is read in classify\(\)) s
5 401 M
(\(*\) Support Vectors Dictionary is JSON dumped and eval\(\)-ed and not JSON loaded because of ) s
5 390 M
(serialization) s
5 379 M
(  glitch in defaultdict\(list\)) s
5 368 M
(------------------------------------------) s
5 357 M
(\(*\) Computational Geometric Hyperbolic Factorization Spark implementation has been benchmar) s
5 346 M
(ked for) s
5 335 M
( 2 more integers of 9 and 10 bits. Some 8 bit numbers were benchmarked earlier.) s
5 324 M
(\(*\) Spark logs for these benchmarks have been committed and time duration is calculated as ) s
5 313 M
(3 way split) s
5 302 M
( of real/user/system by time shell utility) s
5 291 M
(\(*\) These benchmark numbers are on dual core single node Spark cluster) s
5 280 M
(\(*\) C++/python files for tilings have been updated and pixelated tiles storage text files h) s
5 269 M
(ave been rewritten) s
5 258 M
(------------------------------------------) s
5 247 M
(Note on Factorization Spark benchmarks) s
5 236 M
(------------------------------------------) s
5 225 M
(Following are approximate correlations of the observed numbers to the theoretical polylogar) s
5 214 M
(ithmic time bound - exponents of logN \(=number of bits\) increase probably because number of) s
5 203 M
( parallel RAMs\(cores\) do not increase commensurate with the number of bits and is static du) s
5 192 M
(al core:) s
5 170 M
(10 bit - real   17m11.931s = 1031.931s \(~k*10^x3\) ~ \(logN\)^3.013 \(x3=3.013\)) s
5 159 M
(9 bit  - real   7m46.247s  = 466.247s  \(~k*9^x2\) ~ \(logN\)^2.796 \(x2=2.796\)) s
5 148 M
(8 bit  - real   3m40.091s  = 220.091s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 137 M
(8 bit  - real   3m39.539s  = 219.539s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 126 M
(8 bit  - real   3m38.795s  = 218.795s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 115 M
(8 bit  - real   3m38.622s  = 218.622s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 104 M
(8 bit  - real   3m38.920s  = 218.920s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(----------------------------------------------) s
5 60 M
(473. \(THEORY\) Computational Geometric Hyperbolic Factorization, Discrete Geometry, Rasterin) s
5 49 M
(g in Graphics/Computational Digital Geometry,) s
5 38 M
(Bresenham's Line Algorithm adapted for Hyperbolic tiling, Point Location, Ray shooting - 15) s
5 27 M
(,16 November 2017 - related to 34, 465) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(----------------------------------------------) s
_R
S
%%Page: (288) 288
%%BeginPageSetup
_S
18 36 translate
/pagenum 288 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (288) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Finding factors of integer N by creating pixelated polygon for hyperbolic curve xy=N has gr) s
5 731 M
(eat visual intuition. Similar algorithms already) s
5 720 M
(exist in discrete geometry and computer graphics disciplines. Bresenham's Line drawing algo) s
5 709 M
(rithm is a classic used still in vector graphics) s
5 698 M
(which approximates a continuous line on a pixelated digital space. This approximation of co) s
5 687 M
(ntinuous curves on digital space is called) s
5 676 M
(Rastering. Tile segments of hyperbola in preprocessing step of factorization are found by s) s
5 665 M
(olving for deltay in:) s
5 654 M
(                xy = N) s
5 643 M
(                \(x+1\)\(y-deltay\) = N) s
5 632 M
(                xy - x*deltay + y - deltay = N) s
5 621 M
(                y = deltay * \(x+1\)) s
5 610 M
(                deltay = y/\(x+1\) for deltax=1) s
5 599 M
(which is similar to Bresenham Line algorithm for finding next point to plot on raster. Tile) s
5 588 M
( segment \(N/x, N/\(x+1\)\) along y-axis is equal to) s
5 577 M
(interval \(y, y-\(y/x+1\)\) on y-axis.) s
5 555 M
(Tiling preprocessing phase of factorization embeds a continuous hyperbola in a grid of hori) s
5 544 M
(zontal and vertical straight lines. Each horizontal) s
5 533 M
(line corresponds to an integer in y-axis and vertical line to an integer in x-axis. Hyperbo) s
5 522 M
(lic arc traverses the squares\(pixels\) of the grid.) s
5 511 M
(Thus the polygon approximating the continuous hyperbola is the union of all squares\(pixels\)) s
5 500 M
( through which hyperbolic arc passes. Union of) s
5 489 M
(squares create rectangular faces of the art gallery polygon vertices of which are the locat) s
5 478 M
(ions of the guards. Vertices of these rectangles) s
5 467 M
(through which hyperbolic arc passes through are the factors.) s
5 445 M
(Art Gallery Pixelated polygon approximating a hyperbola is a Planar Simple Line Graph \(PSLG) s
5 434 M
(\) where each side of the polygon is an edge in) s
5 423 M
(PSLG. This PSLG has \(number_of_factors + 1\) rectangular faces which is O\(loglogN\). Vertices) s
5 412 M
( where two adjacent rectangular faces) s
5 401 M
(meet are the factor points of N. Planar point location has to find these factor points. Geo) s
5 390 M
(metric Ray Shooting Query for this is : "Find points of vertices where two rectangular face) s
5 379 M
(s of polygon meet". This ray shooting can be picturised as a line from origin intersecting ) s
5 368 M
(the rastered hyperbolic polygon and multiple rays from a common origin are shot in parallel) s
5 357 M
( of various \(0-90 degrees\) angles.  O\(loglogN\) of these rays pass through the factor vertic) s
5 346 M
(es. Number of rays required is proportional to length of the hyperbolic curve = O\(N\). Thus ) s
5 335 M
(parallel ray shooting is a geometric sieve for factoring   and is an alternative to sorting) s
5 324 M
( and binary searching the hyperbolic tile segments.) s
5 302 M
(References:) s
5 291 M
(----------) s
5 280 M
(473.1 Bresenham Algorithm for Line Rastering - https://en.wikipedia.org/wiki/Bresenham%27s_) s
5 269 M
(line_algorithm) s
5 258 M
(473.2 Rasterizing curves - http://members.chello.at/easyfilter/bresenham.pdf) s
5 247 M
(473.3 Efficient Algorithms for Ray Shooting Queries - [Pankaj K.Agarwal] - https://epubs.si) s
5 236 M
(am.org/doi/pdf/10.1137/0222051) s
5 225 M
(473.4 Parallel Planar Point Location - [Richard Cole] - https://ia601408.us.archive.org/33/) s
5 214 M
(items/onoptimalparalle00cole/onoptimalparalle00cole.pdf) s
5 203 M
(473.5 Parallel Geometric Search - [Albert Chan,Frank Dehne, Andrew Rau-Chaplin] - https://w) s
5 192 M
(eb.cs.dal.ca/~arc/publications/1-16/paper.pdf) s
5 181 M
(473.6 Parallel Computational Geometry - https://www.cs.princeton.edu/~chazelle/pubs/Paralle) s
5 170 M
(lCompGeom.pdf - [A.Aggarwal,B.Chazelle,L.Guibas,C.O.Dunlaing,C.Yap] - Section 2 - Definitio) s
5 159 M
(n of NC based on PRAM - Section 5 - Algorithms for line segment intersection, art gallery g) s
5 148 M
(uards, polygon triangulation, partitioning \(kd-trees, quadtrees\) are in NC. Factorization b) s
5 137 M
(y approximating a hyperbola into a pixelated polygon can be rephrased as line segment inter) s
5 126 M
(section problem, where sides of the polygons are line segments and their intersecting point) s
5 115 M
(s contain factor vertices. There are O\(loglogN\) intersection points in hyperbolic polygon w) s
5 104 M
(here sides meet. Thus factorization can be solved in NC assuming pixelated hyperbolic polyg) s
5 93 M
(on already exists.) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(--------------) s
5 49 M
(474. \(FEATURE-DONE\) Computational Geometric Factorization - Tiling Update and benchmark num) s
5 38 M
(bers for factoring few integers - 16 November 2017) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(--------------) s
5 5 M
(\(*\) Existing hyperbolic tiling code depends on C++ code in cpp-src/miscellaneous) s
_R
S
%%Page: (289) 289
%%BeginPageSetup
_S
18 36 translate
/pagenum 289 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (289) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\(*\) To remove this dependency, python script for tiling the hyperbolic arc with simple pixe) s
5 731 M
(lation similar to bresenham algorithm has been committed to repository - this script writes) s
5 720 M
( two files suffixed .coordinates and .mergedtiles from rounding off the interval [N/x,N/\(x+) s
5 709 M
(1\)] in a function hyperbolic_tiling\(\)) s
5 698 M
(\(*\) This function is invoked in DiscreteHyperbolicFactorizationUpperbound_Bitonic_Spark.py ) s
5 687 M
(before bitonic sort) s
5 676 M
(\(*\) DiscreteHyperbolicFactorizationUpperbound_Bitonic_Spark.py is parametrized and accepts ) s
5 665 M
(number to factorize as commandline argument:) s
5 654 M
(       #$SPARK_2.1.0_HOME/spark-submit DiscreteHyperbolicFactorizationUpperbound_Bitonic_Sp) s
5 643 M
(ark.py <number_to_factorize>) s
5 632 M
(\(*\) Few more time shell builtin benchmark numbers for factorizing 3-bit, 4-bit, 5-bit, 6-bi) s
5 621 M
(t , 7-bit integers have been committed in testlogs/) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-------------) s
5 577 M
(475. \(FEATURE-DONE\) Computational Geometric Factorization Update - Spark Accumulators, JSON) s
5 566 M
( for Tiling etc., - 19 November 2017) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-------------) s
5 533 M
(\(*\) Hyperbolic tiling code in python has been changed to reflect C++ tiling in cpp-src/misc) s
5 522 M
(ellaneous) s
5 511 M
(\(*\) globalcoordinates global variable has been made Spark Accumulator Mutable global state ) s
5 500 M
(- globalmergedtiles is already a Spark Accumulator global mutable state) s
5 489 M
(\(*\) bitoniclock acquire/release statements have been added for global variables, but commen) s
5 478 M
(ted for benchmarking) s
5 467 M
(\(*\) New boolean flags for bitonic comparator python style variable swap, for enabling multi) s
5 456 M
(ple threads for assign have been added) s
5 445 M
(\(*\) merge_sorted_halves\(\) has been invoked as a separate function) s
5 434 M
(\(*\) C++ tiling has been chosen because accuracy of long double in creating tile pixels is b) s
5 423 M
(etter than similar tiling code in python) s
5 412 M
(\(*\) Benchmark numbers for factoring 511 has been added to testlogs/ and are similar to prev) s
5 401 M
(ious numbers) s
5 390 M
(\(*\) .mergedtiles and .coordinates files are loaded/dumped as JSON in python hyperbolic tili) s
5 379 M
(ng) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(----------------------------------------------) s
5 335 M
(476. \(FEATURE-DONE and THEORY\) Computational Geometric Factorization Update - Benchmarks an) s
5 324 M
(d Tiling - 20 November 2017 - related to 34) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(----------------------------------------------) s
5 291 M
(\(*\) Some further changes to Python hyperbolic tiling have been made - tile endpoints have b) s
5 280 M
(een cast from floating point to integer) s
5 269 M
(for create_tile\(\)) s
5 258 M
(\(*\) C++ tiling in cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.c) s
5 247 M
(pp has been parametrized and takes) s
5 236 M
(as commandline argument the integer to factorize.) s
5 225 M
(\(*\) Shell script cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.sh) s
5 214 M
( has been changed to pass in the integer to) s
5 203 M
(factorize to the C++ tiling binary in cpp-src/ and spark-submit for PySpark executable in p) s
5 192 M
(ython-src/ from shell args $*) s
5 181 M
(\(*\) This shell script unifies C++ tiling and PySpark factorization) s
5 170 M
(\(*\) Known issues: Python tiling still differs from C++ tiling significantly. Changing the h) s
5 159 M
(ardcoded tile arrays storage in C++ tiling) s
5 148 M
(to malloc\(\)-ed heap storage causes faulty tiling. There are only optimization issues which ) s
5 137 M
(do not affect the factorization. Factorization) s
5 126 M
(works well and more benchmarks were done e.g for integers 723 and 501. Numbers for these an) s
5 115 M
(d past numbers are charted below) s
5 104 M
(\(*\) Following profiling numbers along with previous benchmarks for 8,9,10 bits \(14 November) s
5 93 M
( 2017\) capture the trend in the exponent of logN ) s
5 82 M
(\(*\) Gradual increase in exponent of number of bits because of static number of parallel RAM) s
5 71 M
(s \(cores\) is not quite steep from ) s
5 60 M
(3-bit to 10-bit integers as one might expect. Integers of same bit numbers need almost equa) s
5 49 M
(l duration to factorize which implies the exponent) s
5 38 M
(could be a function of logN and not N. Htop shows equal loading of both cores of CPU and co) s
5 27 M
(nsumption is almost 100%+100%.) s
5 16 M
(\(*\) Cloud computing is not exactly a parallel RAM but multiple cores are PRAMs having concu) s
5 5 M
(rrent access to a shared memory. Nodes in) s
_R
S
%%Page: (290) 290
%%BeginPageSetup
_S
18 36 translate
/pagenum 290 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (290) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(cloud have local memory processing too. Spark's Global State Variables \(Accumulators\) which) s
5 731 M
( are reflected across all cloud nodes are) s
5 720 M
(software simulations of Parallel RAMs - same global state is concurrently accessed by CPUs ) s
5 709 M
(of spark nodes. Present PySpark implementation) s
5 698 M
( does the sorting on accumulators. Binary search is not necessary because Maximum elements ) s
5 687 M
(at the end of the k-merge sorting of globalmergetiles automatically have shuffled coordinat) s
5 676 M
(es as factors in globalcoordinates accumulator. This shaves of additional O\(logN\). This opt) s
5 665 M
(imization ) s
5 654 M
(is an update to drafts in 34.1 and 34.2:) s
5 643 M
(         - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarith) s
5 632 M
(micSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraf) s
5 621 M
(t.tex/download) s
5 610 M
(         - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarith) s
5 599 M
(micSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraf) s
5 588 M
(t.pdf/download) s
5 566 M
(\(*\) Following are only representative figures and ideal benchmark requires a Spark cloud pr) s
5 555 M
(eferably on machines of high number multicore CPUs) s
5 544 M
( and comparison with existing General Number Field Sieve implementations \(which is quasipol) s
5 533 M
(ynomial-exponential\).) s
5 522 M
(----------------------------------------------------------------) s
5 511 M
(723 - 10-bit - real    16m30.346s = 990.346s ~ O\(logN^2.9956\)) s
5 500 M
(511 - 9-bit - real    7m46.518s = 466.518s ~ O\(logN^2.8382\)) s
5 489 M
(511 - 9-bit - real    7m35.642s = 455.642s ~ O\(logN^2.7854\)) s
5 478 M
(501 - 9-bit - real    7m36.879s = 456.642s ~ O\(logN^2.7864\) [shell script - includes time d) s
5 467 M
(uration for C++ tiling]) s
5 456 M
(100 - 7-bit - real    2m33.911s = 153.911s ~ O\(logN^2.5851\)) s
5 445 M
(123 - 7-bit - real    2m52.704s = 172.704s ~ O\(logN^2.6482\)) s
5 434 M
(63 - 6-bit - real    1m17.460s = 77.460s ~ O\(logN^2.4243\)) s
5 423 M
(33 - 6-bit - real    0m58.950s = 58.950s ~ O\(logN^2.2757\)) s
5 412 M
(14 - 4-bit - real    0m19.927s = 19.927s ~ O\(logN^2.1609\)) s
5 401 M
(12 - 4-bit - real    0m19.651s = 19.651s ~ O\(logN^2.1609\)) s
5 390 M
(6 - 3-bit - real    0m15.118s = 15.118s ~ O\(logN^2.4649\)) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(---------------------------------------------------) s
5 346 M
(477. \(THEORY\) Computational Geometric Factorization - Tiling Optimizations - K-Merge Sort i) s
5 335 M
(s dispensable and Local Tile Search is sufficient) s
5 324 M
(- 21 November 2017) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(---------------------------------------------------) s
5 291 M
(Finding factor vertices in pixelated hyperbolic polygon is equivalent to geometric search q) s
5 280 M
(uery: "Is there a right turn followed by a) s
5 269 M
(downturn in the polygon?". These turning points coinciding with hyperbolic arc are factor p) s
5 258 M
(oints. Number of rectangles in pixelated hyperbolic) s
5 247 M
(polygon = O\(loglogN\). Each tile along y-axis in the polygon \(array of pixels\) is of length ) s
5 236 M
(deltay = N/[x\(x+1\)]. Maximum number of tiles) s
5 225 M
(in the pixelation can be derived as:) s
5 214 M
(        xy=N) s
5 203 M
(        \(x+deltax\)\(y-deltay\)=N) s
5 192 M
(        => xy + y*deltax - x*deltay - deltax*deltay = N) s
5 181 M
(        But deltax = 1, ) s
5 170 M
(        => y - \(x+1\) deltay = 0) s
5 159 M
(        deltay = y/\(x+1\) and y = N/x ) s
5 148 M
(        => N/x\(x+1\) = deltay > 1 [each tile should be of length atleast 1]) s
5 137 M
(        N > x*x + x) s
5 126 M
(        => x = \(sqrt\(1 + 4N\) - 1\) / 2) s
5 115 M
(        For large N, sqrt\(1 + 4N\) ~ sqrt\(4N\) = 2*sqrt\(N\)) s
5 104 M
(        => x ~ sqrt\(N\) for large N) s
5 93 M
(Maximum number of tiles in the pixelation is O\(sqrt\(N\)\). If number of processors is O\(sqrt\() s
5 82 M
(N\)\), each tile can be assigned to a processor and) s
5 71 M
(tiling can be done in O\(1\) parallel time. Number of processors required can be reduced by h) s
5 60 M
(aving O\(sqrt\(N\)/\(logN\)^c\) processors. O\(sqrt\(N\)\)) s
5 49 M
(tiles can be created in O\(\(logN\)^c\) total parallel time i.e in each iteration O\(sqrt\(N\)/\(lo) s
5 38 M
(gN\)^c\) tiles can be created in parallel by as many processors and there are O\(\(logN\)^c\) ite) s
5 27 M
(rations. Creating a tile in a processor is defined as assigning the tile interval ordered p) s
5 16 M
(air of coordinates \(tilestart, tileend\) to it where tilestart=\(x, y1\) and tileend=\(x, y2\). ) s
5 5 M
(This tile segment interval is implicitly sorted ascending/descending in one of the axes and) s
_R
S
%%Page: (291) 291
%%BeginPageSetup
_S
18 36 translate
/pagenum 291 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (291) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( therefore can be locally binary searched. This does away with Global K-Merge Sort of the l) s
5 731 M
(ocally sorted tile segments. Because each tile is of length N/x\(x+1\), |y2-y1| = N/[x\(x+1\)].) s
5 720 M
( If N exists in a tile segment then there exists a factor point \(x,y\) in the tile segment s) s
5 709 M
(uch that y1 < y < y2 and xy=N. Binary search per implicitly sorted tile segment is of O\(log) s
5 698 M
(\(N/[x\(x+1\)]\) <= O\(logN\).) s
5 676 M
(Thus factors can be found just by:) s
5 665 M
(        477.1 Tiling in parallel requiring O\(\(logN\)^c\) tile and O\(sqrt\(N\)/\(logN\)^c\) process) s
5 654 M
(ors where number of tiles = O\(sqrt\(N\)\)) s
5 643 M
(        477.2 Local Binary Search per processor on each sorted tile of O\(logN\) time) s
5 632 M
(and no k-merge sort is necessary.) s
5 610 M
(Previous optimization reduces number of PRAMs by orders of \(logN\)^c but increases exponent ) s
5 599 M
(of parallel time O\(\(logN\)^c\). Bitonic K-merge sort is global and least parallel time though) s
5 588 M
( number of processors required is huge \(yet in NC and work-time optimal\). Bitonic K-merge s) s
5 577 M
(ort doesnot require binary search because factors are in the forefront of the mergesorted a) s
5 566 M
(nd shuffled tile coordinates always.) s
5 544 M
(References:) s
5 533 M
(-----------) s
5 522 M
(477.1 Line segment turn detection - http://fileadmin.cs.lth.se/cs/Personal/Rolf_Karlsson/le) s
5 511 M
(ct9.pdf - For two line segments, find if there is a left or right turn - line segments are ) s
5 500 M
(vectors and sign of their cross product determines left or right turn. Assuming a pixelated) s
5 489 M
( polygon and) s
5 478 M
(its sides as input array of line segments, cross product of adjacent pairs of line segment ) s
5 467 M
(vectors can be computed in parallel and direction of turn can be found.) s
5 456 M
(477.2 Sweepline algorithms - http://www.ics.uci.edu/~goodrich/pubs/ggb-sweep-j.pdf) s
5 445 M
(477.3 Rectangle Stabbing - School on Geometric Computing, IIT Delhi \(2010\) - http://www.cse) s
5 434 M
(.iitd.ernet.in/~ssen/geomschool/nandy/TR-RS.pdf - Stabbing number for a set of axis-paralle) s
5 423 M
(l rectangles is the minimum number of vertical and horizontal lines required such that each) s
5 412 M
( line passes through one of the rectangles covering all rectangles. This problem is NP-hard) s
5 401 M
( by reduction from set cover. Hyperbolic pixelation is a special case inverse problem of st) s
5 390 M
(abbing where a polygon of adjoining axis-parallel rectangles are created such that hyperbol) s
5 379 M
(ic arc passes through each of them.) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(-------------) s
5 335 M
(478. \(FEATURE-DONE and THEORY\)  Computational Geometric Factorization and Parallel Tile Sea) s
5 324 M
(rch Updates) s
5 313 M
(- related to 34 and 477 - 22 November 2017) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-------------) s
5 280 M
(\(*\) cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.cpp has been re) s
5 269 M
(vamped and unnecessary code has been removed. Function names have been changed. NUMBER_OF_T) s
5 258 M
(ILES has been declared as a macro and has to be manually changed and compiled to nearest po) s
5 247 M
(wer of 2 greater than number to factorize. Compilation and PySpark factorization is taken c) s
5 236 M
(are of by shell script cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bito) s
5 225 M
(nic.sh) s
5 214 M
(\(*\) New Spark python script python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch) s
5 203 M
(_Optimized.py has been added to repository. This is the parallel tile search optimization a) s
5 192 M
(lready mentioned in NeuronRain AsFer Design Document. Spark parallelize\(\) distributes the t) s
5 181 M
(iles-coordinates array of ordered pairs as RDDs across cloud nodes and node prints the fact) s
5 170 M
(or point in y-axis if x-axis matches the number to factorize. Spark parallelize\(\) simulates) s
5 159 M
( the binary search on a local tile segment per PRAM processor. Presently binary search has ) s
5 148 M
(not been implemented in tilesearch\(\) function of foreach\(\) Spark Action. This is because ma) s
5 137 M
(p/foreach functions act on a single element argument of a parallelized RDD.) s
5 126 M
(\(*\) How Spark parallelizes a sequential datastructure on cloud nodes is equivalent to binar) s
5 115 M
(y search on an array of length 1 which is a no-op.  Because of this parallize\(\) of Spark ha) s
5 104 M
(s been assumed to be equivalent to a binary search.) s
5 93 M
(\(*\) Benchmark numbers for two integers 1011 and 1013 with and without sorting have been com) s
5 82 M
(mitted to testlogs/ and Tiling time durations have also been captured on how well mere tile) s
5 71 M
( search optimizes as opposed to sorting.) s
5 60 M
(\(*\) As evidenced from python-src/testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSea) s
5 49 M
(rch_Optimized.log.22November2017, tiling preprocessing is quite insignificant \(<<1 sec\) and) s
5 38 M
( tile search for 1011 and 1013 requires approximately 20 seconds while bitonic sorting dura) s
5 27 M
(tion for same numbers is ~16minutes \(960 seconds\) a speedup of almost 50x.) s
5 16 M
(\(*\) Benchmarks for Local Tile Search obviate the requirement for k-merge sorting of pixelat) s
5 5 M
(ed hyperbolic tiles, if parallelism is huge.) s
_R
S
%%Page: (292) 292
%%BeginPageSetup
_S
18 36 translate
/pagenum 292 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (292) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\(*\) Following is the trade-off:) s
5 731 M
(        - Bitonic K-merge sorting of tiles : binary search is not necessary but a tremendou) s
5 720 M
(s performance drag and overkill, suitable for low number of PRAMs) s
5 709 M
(        - Local tile search : binary search is necessary only per processor but requires re) s
5 698 M
(latively high number of PRAMs) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(------------------------------------------------) s
5 654 M
(479. \(FEATURE-DONE\) Computational Geometric Factorization Tiling Optimization - Binary Sear) s
5 643 M
(ch for Tile Segments in Spark - 23 November 2017) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(------------------------------------------------) s
5 610 M
(\(*\) Binary Search has been implemented in Spark Tile Search Optimization by parallizing the) s
5 599 M
( set of intervals of pixelated hyperbolic arc.) s
5 588 M
(\(*\) By this each tile interval can be binary searched in parallel to find the factor point ) s
5 577 M
(with no) s
5 566 M
(necessity for global k-merge sorting.) s
5 555 M
(\(*\) Separate pixelation and tile interval file creation C++ source file has been added in c) s
5 544 M
(pp-src/miscellaneous) s
5 533 M
(\(*\) Arrayless tile creation has been chosen and only intervals are written to a file suffix) s
5 522 M
(ed as .tileintervals) s
5 511 M
(\(*\) Shell script which compiles and executes the tile interval creation file and spark inte) s
5 500 M
(rval binary search script has been added.) s
5 489 M
(\(*\) Invoking the shell script as:) s
5 478 M
(        cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimize) s
5 467 M
(d.sh <number_to_factorize\)) s
5 456 M
(is sufficient to print the factors) s
5 445 M
(\(*\) Following are benchmark numbers for factorizing few reasonably high bit integers. Remov) s
5 434 M
(ing K-Merge sort has significant effect on the) s
5 423 M
(throughput even for a single node spark cluster on dual core \(local[2]\):) s
5 412 M
(Factorization of 12093 \(14-bit\): real   0m33.108s \(single core - local[1]\) ) s
5 401 M
(Factorization of 12093 \(14-bit\): real   0m29.589s \(dual core - local[2]\)) s
5 379 M
(Factorization of 65532 \(16-bit\): real   0m44.899s \(single core - local[1]\)) s
5 368 M
(Factorization of 65532 \(16-bit\): real   0m39.621s \(dual core - local[2]\)) s
5 335 M
(Factorization of 102349 \(17-bit\): real  1m5.490s \(single core - local[1]\)) s
5 324 M
(Factorization of 102349 \(17-bit\): real  0m58.776s \(dual core - local[2]\)) s
5 302 M
(Factorization of 934323 \(20-bit\): real  8m20.017s \(single core - local[1]\)) s
5 291 M
(Factorization of 934323 \(20-bit\): real  7m37.958s \(dual core - local[2]\)) s
5 269 M
(Factorization of 1343231 \(21-bit\): real 16m34.759s \(single core - local[1]\)) s
5 258 M
(Factorization of 1343231 \(21-bit\): real 10m49.218s \(dual core - local[2]\)) s
5 247 M
( ) s
5 236 M
(\(*\) Above tile binary search numbers beat bitonic k-mergesort of tiles by many orders of ma) s
5 225 M
(gnitude ) s
5 214 M
(\(*\) logs containing factors of above integers have been committed to testlogs/) s
5 203 M
(\(*\) This optimization thus effectively supersedes mergesort of tiles and is thus a better P) s
5 192 M
(ySpark implementation of Discrete Hyperbolic Factorization. ) s
5 181 M
(----------------------------------------------) s
5 170 M
(\(*\) Updated AsFer Design Document - benchmark numbers for both single and dual cores for ti) s
5 159 M
(le search) s
5 148 M
(in computational geometric factorization) s
5 137 M
(\(*\) Updated python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py fo) s
5 126 M
(r dual cores) s
5 115 M
(\(local[2]\)) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(---------) s
5 71 M
(480. \(FEATURE-DONE\) Computation Geometric Factorization - Binary Search for Tiles - Benchma) s
5 60 M
(rks) s
5 49 M
(- 24 November 2017) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(---------) s
5 16 M
(Benchmark numbers for factoring 24 bit integer by Tile BinarySearch Optimization script hav) s
5 5 M
(e been committed to testlogs/ \(single node cluster, dual core\):) s
_R
S
%%Page: (293) 293
%%BeginPageSetup
_S
18 36 translate
/pagenum 293 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (293) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(Factorization of 9333123 \(24-bit\):) s
5 720 M
(---------------------------------) s
5 709 M
(real    112m24.101s \(Spark duration 12:21 to 14:02 = 101minutes = 6060seconds\)) s
5 698 M
(user    0m0.000s) s
5 687 M
(sys     0m0.004s) s
5 665 M
(Again binary search of tiles in parallel is way better than k-mergesort of tiles. Largest k) s
5 654 M
(nown numbers) s
5 643 M
(widely used are 128-bit. Trend for different bits indicates, Spark cloud of few multicore n) s
5 632 M
(odes is) s
5 621 M
(sufficient to factorize 128-bit integers in few minutes. Previous benchmark uses spark-defa) s
5 610 M
(ult.conf files) s
5 599 M
(from python-src/InterviewAlgorithm/ \(2GB of heapspace\)) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(-----------------------------------------------) s
5 555 M
(481. \(THEORY\) Computational Geometric Factorization - Parallel Local Binary Search for Tile) s
5 544 M
(d Hyperbolic Arc - 27 November 2017) s
5 533 M
(- Snir's Theorem for Parallel Search - related to 34,477) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(-----------------------------------------------) s
5 500 M
(Previous optimized factorization with no sorting and only local binary search per tile inte) s
5 489 M
(rval can achieve further speed-up \(from logarithmic to sublogarithmic\) if search of each lo) s
5 478 M
(cally sorted tile can be done in PRAMs. Snir's Theorem implies searching a table of sorted ) s
5 467 M
(elements can be done in sublogarithmic O\(logN/logp\) time by p CREW PRAM processors.) s
5 445 M
(Tiling preprocessing of hyperbolic arc creates O\(N\) tiles. [This is proportional to length ) s
5 434 M
(of hyperbolic arc obtainable from elementary) s
5 423 M
(calculus = DefiniteIntegral\(sqrt\(1 + [N^2/x^4]\)\)]) s
5 401 M
(Number of iterations = O\(\(logN\)^k\)) s
5 390 M
(Number of PRAMs = \(N/\(logN\)^k\)) s
5 368 M
(Factorization in parallel has following algorithm:) s
5 357 M
(while\(iterations <= O\(\(logN\)^k\)\)) s
5 346 M
({) s
5 335 M
(        *\) Assign N/\(logN\)^k tiles to N/\(logN\)^k PRAMs in parallel \(O\(1\) parallel time beca) s
5 324 M
(use each interval tile in a global shared memory array can be accessed by PRAM id as index\)) s
5 313 M
(        *\) Binary Search tile in each PRAM for factors \(O\(logN\) parallel time which can be ) s
5 302 M
(reduced to O\(logN/logp\) by parallel binary search from Snir's Theorem\)) s
5 291 M
(}) s
5 269 M
(Previous loop totally is of [O\(1\) + O\(logN\)]*O\(\(logN\)^k\) = O\(\(logN\)^\(k+1\)\) parallel time.Fo) s
5 258 M
(r minimum value of k=1, Factorization by parallel) s
5 247 M
(local binary search of tiled hyperbolic arc, can be done in O\(\(logN\)^2\) parallel time and O) s
5 236 M
(\(N/logN\) PRAM processors without k-mergesort. Assigning N/\(logN\)^k tiles to each of N/\(\(log) s
5 225 M
(N\)^k\) PRAMs is of constant time assuming tile intervals are in a global shared memory state) s
5 214 M
( i.e PRAM is simulated by a cloud global distributed state - e.g. Spark Accumulators. Snir') s
5 203 M
(s Theorem implies O\(\(logN\)^2\) could be optimized to) s
5 192 M
(O\(logN*logN/logp\) in CREW PRAM.) s
5 170 M
(References:) s
5 159 M
(----------) s
5 148 M
(481.1 Efficient Parallel Algorithms and subclasses of NC - [KruskalRudolphSnir] - https://a) s
5 137 M
(c.els-cdn.com/030439759090192K/1-s2.0-030439759090192K-main.pdf?_tid=4ba471c8-d35a-11e7-9c3) s
5 126 M
(9-00000aab0f26&acdnat=1511777222_ae2aa80751a47624aeb524f723e969b0) s
5 115 M
(481.2 On Parallel Search - Snir's Theorem - https://pdfs.semanticscholar.org/3a58/58e8517f2) s
5 104 M
(8fa586364daffb34160c437bf78.pdf) s
5 93 M
(481.3 Point in Polygon \(PIP\) problem - https://en.wikipedia.org/wiki/Point_in_polygon - que) s
5 82 M
(ries if a point is inside, outside or on the polygon. Factor points are always within the p) s
5 71 M
(ixelated hyperbolic polygon.) s
5 60 M
(481.4 Simulation of BSP and CRCW PRAM in MapReduce - Sorting, Searching, and Simulation in ) s
5 49 M
(the MapReduce Framework - [Michael T. Goodrich, Nodari Sitchinava, Qin Zhang] - https://arx) s
5 38 M
(iv.org/abs/1101.1902 - Theorem 3.2 - CRCW PRAM can be simulated on MapReduce clouds by loga) s
5 27 M
(rithmic increase in parallel time.) s
5 16 M
(481.5 Models of Parallel Computation - PRAM shared memory model can be simulated on BSP dis) s
5 5 M
(tributed memory model - http://mpla.math.uoa.gr/media/theses/msc/Lentaris_G.pdf - Bulk Sync) s
_R
S
%%Page: (294) 294
%%BeginPageSetup
_S
18 36 translate
/pagenum 294 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (294) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(hronous Parallel model consists of sequence of supersteps. Each superstep performs a local ) s
5 731 M
(computation in a processor, communicates to other parallel processors and synchronizes mult) s
5 720 M
(iple local computations by barriers. BSP which is a distributed memory model than shared th) s
5 709 M
(us has close resemblance to cloud parallelism than PRAM.) s
5 698 M
(481.6 PRAM memory access is unit time - [Guy Blelloch] - http://www.cs.cmu.edu/afs/cs/acade) s
5 687 M
(mic/class/15499-s09/www/scribe/lec2/lec2.pdf - "...Once again, recall that all instructions) s
5 676 M
( - including reads and writes - takes unit time. The memory is shared amongst all processor) s
5 665 M
(s, making this a similar abstraction to a multi-core machine - all processors read from and) s
5 654 M
( write to the same memory, and communicate between each other using this...". First step in) s
5 643 M
( the loop of previous factorization thus implies a hypothetical machine of N/\(logN\)^k cores) s
5 632 M
( and each core reads tile assigned to it in O\(1\) time.) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(----------------------------------------) s
5 588 M
(482. \(FEATURE-DONE\) Support Vector Machines - Mercer Theorem - Kernel Implementation - 29 N) s
5 577 M
(ovember 2017) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(----------------------------------------) s
5 544 M
(\(*\) This commit implements the kernel trick for lifting points in lower dimension to higher) s
5 533 M
( dimension by a Feature map so that) s
5 522 M
( decision hyperplane in higher dimension separates the points accurately.) s
5 511 M
(\(*\) Mercer Theorem creates a kernel function unifies Feature map lifting and Dot product in) s
5 500 M
( higher dimension) s
5 489 M
(\(*\) Feature map phi maps a point in a dimension d to a point in dimension d+k: phi\(x\) = X. ) s
5 478 M
(Inner Product \(Dot\) of two vectors in dimension) s
5 467 M
(d+k = phi\(x\)*phi\(y\). Mercer Theorem unifies the Feature map and Dot product into a Kernel f) s
5 456 M
(unction defined as series:) s
5 445 M
(   K\(x,y\) = Sigma\(eigenvalue\(i\)*eigenfunction\(x\)*eigenfunction\(y\)\)) s
5 434 M
(\(*\) This implementation randomly instantiates a N*N square matrix, finds its Eigenvalues an) s
5 423 M
(d Eigenvectors, and computes the series for) s
5 412 M
(K\(x,y\) as per previous identity \(neglecting imaginary parts of Eigenvalues and Eigenvectors) s
5 401 M
(\)) s
5 390 M
(\(*\) logs for this have been added to testlogs/) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(-----------) s
5 346 M
(483. \(FEATURE-DONE\) Support Vector Machines - Mercer Kernel Update - 30 November 2017) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-----------) s
5 313 M
(\(*\) Mercer Kernel Function has been changed to return a tuple of feature mapped points and ) s
5 302 M
(the dot product) s
5 291 M
(\(*\) Feature mapped points in higher dimension are : [....., square_root\(eigenvalue[i]\)*eige) s
5 280 M
(nfunction\(x[i]\),....]) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(---------) s
5 236 M
(484. \(FEATURE-DONE\) Compressed Sensing - Image Sketch implementation - 1 December 2017) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(---------) s
5 203 M
(\(*\) Sketch B of an image bitmap X is computed by multiplying with a random matrix A: B=AX) s
5 192 M
(\(*\) import ImageToBitMatrix from image_pattern_mining/ for mapping an image to a bitmap mat) s
5 181 M
(rix) s
5 170 M
(\(*\) Sketch matrix B contains compressed information of the larger image. Original image can) s
5 159 M
( be sensed from this sketch.) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(------------------------------------------------) s
5 115 M
(485. \(FEATURE-DONE\) Compressed Sensing Update - Decompression and Error estimation of recov) s
5 104 M
(ered image bitmap from sketch - 4 December 2017) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(------------------------------------------------) s
5 71 M
(\(*\) Sketch Ax=B of an image bitmap has been persisted to a file CompressedSensing.sketch) s
5 60 M
(\(*\) A is a random matrix of dimensions \(m,n\) m<<n and m is scaled by a sketch ratio variabl) s
5 49 M
(e) s
5 38 M
(\(*\) Original image x is recovered from sketch Ax=B by inverting A and multiplying with sket) s
5 27 M
(ch:) s
5 16 M
(                Ainverse.Ax = x_recovered) s
5 5 M
(\(*\) For non-square only approximate pseudo inverse is computable.) s
_R
S
%%Page: (295) 295
%%BeginPageSetup
_S
18 36 translate
/pagenum 295 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (295) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\(*\) For inverting non-square matrix A, Moore-Penrose Pseudoinverse function pinv\(\) from Num) s
5 731 M
(Py is invoked.) s
5 720 M
(\(*\) Error of the recovered image computed by trace \(sum of all entries\) of the recovered im) s
5 709 M
(age.) s
5 698 M
(\(*\) Logs for multiple sketch ratios \(row values:100,200,300,400,50\) have been committed to ) s
5 687 M
(testlogs/ which show an increase in error) s
5 676 M
(as size of the sketch decreases.) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(-----------------------------------------------) s
5 632 M
(486. \(THEORY\) Computational Geometric Factorization, Tile Search Optimization and Parallel ) s
5 621 M
(Interval/Segment Search Trees - 5 December 2017) s
5 610 M
( and 22 December 2017 - related to 34, 481) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-----------------------------------------------) s
5 577 M
(Tile Search optimization for finding factors of an integer described earlier, binary-search) s
5 566 M
( set of intervals in parallel for factor point.) s
5 555 M
(This is the classic segment/interval search tree problem in Computational Geometry. Segment) s
5 544 M
(s/Intervals are 1-dimensional polygons and represented in a binary search tree. Query point) s
5 533 M
( and the containing interval are searched on this binary search tree. Sequential constructi) s
5 522 M
(on of interval/segment search tree needs O\(nlogn\) time. Searching each tile segment in para) s
5 511 M
(llel and searching an interval/segment tree in parallel for factor points are equivalent. T) s
5 500 M
(here are parallel segment tree construction algorithms on Bulk Synchronous Parallel\(BSP\) mo) s
5 489 M
(del and as Distributed Segment Trees. Distributed Segment Trees are based on Distributed Ha) s
5 478 M
(sh Tables and insertion/retrieval of a key is based on keyspace partitioning and routing in) s
5 467 M
( the network i.e Each node in the network is assigned a subset of segment id\(s\) in a binary) s
5 456 M
( partitioned space. Insertion/Retrieval primitives hop through the network and find the mat) s
5 445 M
(ching node for the segment. Most cloud key-store implementations are distributed hash table) s
5 434 M
(s. Example: For inserting n keys in O\(logN\) time, number of hops has to be O\(logN\) per key ) s
5 423 M
(and each key is inserted in parallel in O\(1\) time. Minimizing number of hops implies maximi) s
5 412 M
(zing mean degree of a node in the network and is a trade-off.) s
5 390 M
(Unique Prime Factorization of an integer N = p1^k1 * p2^k2 ... * pn*kn) s
5 379 M
(This can be rewritten as:) s
5 368 M
(        2^logN = 2^\(k1*log\(p1\) + k2*log\(p2\) + ... + kn*log\(pn\)\)) s
5 357 M
(=>      logN = \(k1*log\(p1\) + k2*log\(p2\) + ... + kn*log\(pn\)\)) s
5 346 M
(        SmallOmega\(N\) = number of distinct prime factors of N = O\(loglogN\) from Hardy-Raman) s
5 335 M
(ujan Theorem) s
5 324 M
(        BigOmega\(N\) = number of prime factors including multiplicity = sum of prime powers ) s
5 313 M
(= k1 + k2 + k3 + ... + kn) s
5 302 M
(But     k1 + k2 + k3 + ... + kn < \(k1*log\(p1\) + k2*log\(p2\) + ... + kn*log\(pn\)\) = logN) s
5 291 M
(=>      BigOmega\(N\) < logN) s
5 280 M
(        BigOmega\(N\) = O\(logN\) [This is very high upperbound and not tight estimate]) s
5 258 M
(Segment binary search tree representation of pixelated hyperbolic tile segments is describe) s
5 247 M
(d in references below.) s
5 225 M
(Factorization algorithm for N based on Segment Tree Search is:) s
5 214 M
(        \(#\) Construct Segment Tree of Pixelated Hyperbolic Segments in Parallel \(O\(logN\) or) s
5 203 M
( between O\(\(logN\)^2\) and O\(\(logN\)^3\) depending on sorting\)) s
5 192 M
(        \(#\) Query the Segment Tree for factor points in O\(k + logN\) where k is the number o) s
5 181 M
(f segment intervals to be reported having factor point N=pq. It is sufficient to report atl) s
5 170 M
(east 1 segment having factor point and thus k=1. Number of segments containing both prime a) s
5 159 M
(nd non-prime factor points is proportional to size of set of all subsets of distinct prime ) s
5 148 M
(factors and multiplicity \(SmallOmega and BigOmega\). Geometric intuition for this is: By mov) s
5 137 M
(ing a sweepline across the x-y plane, factor points and segments containing them \(which are) s
5 126 M
( nothing but all possible size 2 partitions of set of distinct prime factors which correspo) s
5 115 M
(nd to p and q in N=pq, where as Bell Number of this set is number of all possible partition) s
5 104 M
(s\) are reached in sequence left-to-right sorted ascending. Size of set of all subsets of di) s
5 93 M
(stinct prime factors = 2^SmallOmega\(N\) = 2^loglogN = logN. If multiplicity is taken into co) s
5 82 M
(nsideration, from the very high bound above number of sets of subsets can be as high as O\(2) s
5 71 M
(^logN\).) s
5 49 M
(Thus there are 3 Computational Geometric Factorization algorithms described in this draft a) s
5 38 M
(nd all of them are PRAM algorithms and in NC requiring between O\(\(logN\)^2\) and O\(\(logN\)^3\) ) s
5 27 M
(parallel time:) s
5 16 M
(        \(#\) K-MergeSort and BinarySearch of Hyperbolic tile segments \(mentioned in 34 - req) s
5 5 M
(uires merge sort of tile intervals/segments\)) s
_R
S
%%Page: (296) 296
%%BeginPageSetup
_S
18 36 translate
/pagenum 296 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (296) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        \(#\) Local Binary Search in parallel of hyperbolic tiles without K-MergeSort \(mentio) s
5 731 M
(ned in 481 - recent optimization, better than k-mergesort\)) s
5 720 M
(        \(#\) Segment Tree Representation and Binary Search of hyperbolic tile Segments \(uses) s
5 709 M
( a classic datastructure, preprocessing is non-trivial and segment tree has to be construct) s
5 698 M
(ed in parallel - requires merge sort of tile intervals/segments\)) s
5 676 M
(Note: First and Third factorization algorithms are equivalent because both involve sorting ) s
5 665 M
(of pixelated hyperbolic tile segments. Second algorithm obviates sorting by assumption that) s
5 654 M
( each PRAM can locally do a binary search without involving peer PRAM processors. Theoretic) s
5 643 M
(ally all three have similar polylogarithmic \(O\(logN*logN\) at best\) runtime upperbounds. Sec) s
5 632 M
(ond algorithm is better than First and Third probably because the constant involved in Big-) s
5 621 M
(O notation in second algorithm is very small compared to First and Third.) s
5 599 M
(It is apt to mention the resemblance of K-MergeSort of Hyperbolic Tile segments and Burrows) s
5 588 M
(-Wheeler Transform \(BWT\) of a string. Burrows-Wheeler Transform sorts all rotation permutat) s
5 577 M
(ions of a string, extracts the last index fr) s
5 566 M
(om each sorted permutation, concatenates them into a transformed string which has co-locate) s
5 555 M
(d substrings. This co-location of similar substrings is invertible and useful for compressi) s
5 544 M
(on and indexes. K-MergeSort Computational Geometric Factorization merges and sorts concaten) s
5 533 M
(ated tile segment strings, resulting in a sorted string which has) s
5 522 M
(colocated similar factor points.) s
5 500 M
(An Unsorted Search algorithm has been implemented in NeuronRain \(Section 500\) to locate a q) s
5 489 M
(uery point on an unsorted array of numbers, by representing the numbers as arrays of hashta) s
5 478 M
(bles for each digit.This algorithm can find factors in the concatenation of merged pixelate) s
5 467 M
(d hyperbolic tile segments with no requirement for sorting. But this involves hashtable pre) s
5 456 M
(processing.) s
5 434 M
(Length of each tile on x-axis can be derived from equating for N:) s
5 423 M
(        xy = \(x+delta\)\(y-1\)) s
5 412 M
(        delta = x/\(y-1\) = N/[y\(y-1\)]) s
5 390 M
(Sum of lengths of all pixelated hyperbolic tiles along x-axis is the series:) s
5 379 M
(        N/\(1*2\) + N/\(2*3\) + N/\(3*4\) + ...) s
5 368 M
(But:) s
5 357 M
(        N/\(1*2\) + N/\(2*3\) + N/\(3*4\) + ... < N/1 + N/2^2 + N/3^2 + ... < N + DefiniteIntegra) s
5 346 M
(l_2_to_N\(dx/x^2\) = 1.5N-1) s
5 335 M
(=> Sum of lengths of all pixelated hyperbolic tiles is upperbounded by 1.5N-1 or O\(N\)) s
5 313 M
(Some more optimizations:) s
5 302 M
(------------------------) s
5 291 M
([#] Sorting is required only if end points of two adjoined segments are in conflict \(only s) s
5 280 M
(ome, not all, elements in next tile are greater than last element of the preceding tile\). ) s
5 258 M
([Subsegment1] Elements of succeeding tile segment become bigger than last element in preced) s
5 247 M
(ing tile segment if:) s
5 236 M
(        xy < \(x + delta\)\(y-1\)) s
5 225 M
(        xy < xy - x + delta\(y-1\)) s
5 214 M
(        => delta > x/\(y-1\)) s
5 192 M
([Subsegment2] Similarly first element in succeeding tile is bigger than last element in Sub) s
5 181 M
(segment1 if:) s
5 170 M
(        \(x+delta\)y < \(x + N/\(y-1\)\(y-2\)\)\(y-1\) ) s
5 148 M
(Splitting each tile segment of length l into two subsegments of length delta and l-delta an) s
5 137 M
(d binary searching two sets of concatenations of these split tile segments can find factors) s
5 126 M
( in O\(logN\) sequentially with no necessity for PRAMs if concatenation can be done in sequen) s
5 115 M
(tial in O\(logN\) time \(tree of list concatenations can be done in parallel on PRAMs in O\(log) s
5 104 M
(N\) time, but doing sequential concatenation of lists in sublinear time is an open problem\).) s
5 93 M
( In other words hyperbolic arc bow is broken into two concatenated tile segement sets and t) s
5 82 M
(hese two tile concatenations are searched.) s
5 60 M
([#] If the quadrant containing hyperbolic arc is partitioned by parallel ray shooting queri) s
5 49 M
(es from origin, separated by angles proportional to location of factor points, there is no ) s
5 38 M
(necessity for sorting. Number of primes factors are O\(loglogN\). Thus kloglogN ray shooting ) s
5 27 M
(queries from origin pierce the hyperbolic arc bow in parallel. If angular spacing between r) s
5 16 M
(ay shooting queries are approximately equal, following trigonometric expression gives the a) s
5 5 M
(pproximate prime factor for each ray angle:) s
_R
S
%%Page: (297) 297
%%BeginPageSetup
_S
18 36 translate
/pagenum 297 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (297) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        y\(m\) = SquareRoot\(N/[tan\(m*pi/\(2*k*loglogN\)\)]\) - 1 for m=1,2,3,...,kloglogN) s
5 731 M
(These are only approximate angles. Factors should lie in close proximity of the intersectio) s
5 720 M
(n points of these rays with in hyperbolic bow.) s
5 698 M
(References:) s
5 687 M
(-----------) s
5 676 M
(486.1 Parallel Segment Trees - [AV Gerbessiotis] - https://web.njit.edu/~alexg/pubs/papers/) s
5 665 M
(segment.ps.gz) s
5 654 M
(486.2 Distributed Segment Trees - [Guobin Shen, Changxi Zheng, Wei Pu, and Shipeng Li - Mic) s
5 643 M
(rosoft Research] - http://www.cs.columbia.edu/~cxz/publications/TR-2007-30.pdf) s
5 632 M
(486.3 Computational Geometry - Algorithms and Applications - [Mark de Berg, Otfried Cheong,) s
5 621 M
( Marc van Kreveld, Mark Overmars] - Chapter 10 - More Geometric Datastructures - Interval T) s
5 610 M
(rees and Segment Trees - http://people.inf.elte.hu/fekete/algoritmusok_msc/terinfo_geom/kon) s
5 599 M
(yvek/Computational%20Geometry%20-%20Algorithms%20and%20Applications,%203rd%20Ed.pdf) s
5 588 M
(486.4 Parallel Construction of Binary Search Trees - [MJAtallah,SRKosaraju,LLLarmore,GLMill) s
5 577 M
(er,SHTeng] - https://www.cs.cmu.edu/~glmiller/Publications/Papers/ConstructingTreesInParall) s
5 566 M
(el.pdf - general binary search trees can be constructed in parallel.) s
5 555 M
(486.5 Segment Trees - definition and diagrams - [Computational Geometry Course Notes - Anto) s
5 544 M
(ine Vigneron - King Abdullah University of Science and Technology] - https://algo.kaust.edu) s
5 533 M
(.sa/documents/cs372l07.pdf - Segments are sorted by endpoints. Leaves of the binary search ) s
5 522 M
(segment tree are atomic elementary intervals created by start-end coordinates of segments. ) s
5 511 M
(Internal nodes of the segment tree contain list of segments. Internal node n of segment tre) s
5 500 M
(e has a segment [s1,s2] if and only if Interval\(n\) is a subset of [s1,s2] and Interval\(pare) s
5 489 M
(nt\(n\)\) is not a subset of [s1,s2] and n is closest to root. Stabbing Query "Which are the s) s
5 478 M
(egments containing a point q?" is answered by traversing the segment search tree from root ) s
5 467 M
(recursively and choosing one of the two child subtree intervals containing q at each level.) s
5 456 M
( In Computational Geometric Factorization, segment binary search tree stores the tile segme) s
5 445 M
(nts of pixelated hyperbola and stabbing query is "Which of the tile segments have the facto) s
5 434 M
(rization point N=pq?" which is O\(k+logN\) and k is the O\(loglogN\) because number of tile seg) s
5 423 M
(ments containing N is exactly equal to number of factors of N which is loglogN from Hardy-R) s
5 412 M
(amanujan Theorem. Thus finding all factor points is O\(loglogN + logN\). It has to be noted h) s
5 401 M
(ere this further optimizes the factorization algorithm by local binary search of tiles in p) s
5 390 M
(arallel described earlier in 481. Loop in the algorithm is replaced by a segment tree of ti) s
5 379 M
(le segments. But construction preprocessing time of segment search tree is O\(NlogN\) which r) s
5 368 M
(equires a parallel tile segment tree construction in polylogarithmic time mentioned in refe) s
5 357 M
(rences below - Thus segment tree construction + stabbing query for factor points is: O\(logN) s
5 346 M
(^2 + loglogN + logN\) = O\(\(logN\)^2\) which is same as the time required in Factorization loop) s
5 335 M
(.) s
5 324 M
(486.6 Hardy-Ramanujan Theorem - https://en.wikipedia.org/wiki/Hardy%E2%80%93Ramanujan_theor) s
5 313 M
(em) s
5 302 M
(486.7 Parallel Construction of Segment Trees - https://www.cs.dartmouth.edu/~trdata/reports) s
5 291 M
(/TR92-184.pdf - [Peter Su, Scot Drysdale] - Section 4.2 - Analysis of Algorithm S - "...Thu) s
5 280 M
(s we expect runtime of algorithm S would be between O\(logN^2\) and O\(logN^3\) depending on ho) s
5 269 M
(w good our sorting algorithm is...") s
5 258 M
(486.8 Parallel Computational Geometry - Parallel Construction of Segment Trees is O\(logN\) t) s
5 247 M
(ime - Section 5 - Pages 308-309 - [A.Aggarwal,B.Chazelle,L.Guibas,C.O.Dunlaing,C.Yap] - htt) s
5 236 M
(ps://www.cs.princeton.edu/~chazelle/pubs/ParallelCompGeom.pdf) s
5 225 M
(486.9 Small omega - Number distinct prime factors of an integer - https://oeis.org/A001221 ) s
5 214 M
(- is O\(loglogN\) from Hardy-Ramanujan and Erdos-Kac Theorems) s
5 203 M
(486.10 Big omega - Number prime factors of an integer with multiplicity - https://oeis.org/) s
5 192 M
(A001222 - is sum of prime powers in unique factorization of n. For quadratfrei\(squarefree\) ) s
5 181 M
(integers Big Omega = Small Omega. An optimization in the segment tree search or local binar) s
5 170 M
(y search in parallel for factor points is it is not necessary to find all factorization poi) s
5 159 M
(nts in stabbing query. Segment tree search or local binary search can stop once first facto) s
5 148 M
(r is found. Other factors are obtained by repetitive application of this algorithm after di) s
5 137 M
(viding the integer by factor found in previous step.) s
5 126 M
(486.11 Parallel Construction of Segment Trees applied in another setting - [Helmut Alt, Lud) s
5 115 M
(mila Scharf] - computing depth of arrangement of axis parallel rectangles - http://cs.au.dk) s
5 104 M
(/fileadmin/madalgo/PDF/Parallel_Algorithms_for_Shape_Matching.pdf and https://pdfs.semantic) s
5 93 M
(scholar.org/99e5/2d0c99263dd97d5db289b72f82b233528765.pdf - O\(\(logN\)^2\) time parallel const) s
5 82 M
(ruction of a balanced search tree) s
5 71 M
(486.12 Function plot of Number of PRAM processors - N/\(logN\)^k - For k=1, N/logN has been p) s
5 60 M
(lotted in https://github.com/shrinivaasanka/asfer-github-code/blob/master/python-src/testlo) s
5 49 M
(gs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.NbylogN_Desmos_Function_P) s
5 38 M
(lot.pdf - N/\(logN\)^k can be rewritten as 2^\(logN-kloglogN\). If N^m = 2^\(logN-kloglogN\), m =) s
5 27 M
( log\(logN - kloglogN\)/logN << 1 for large kloglogN.) s
5 16 M
(486.13 Interval Hash Trees - [T. F. Syeda-Mahmood, P. Raghavan, N. Megiddo] - http://www.al) s
5 5 M
(maden.ibm.com/cs/people/stf/papers/caivd99.pdf - Variant of Interval Trees which includes M) s
_R
S
%%Page: (298) 298
%%BeginPageSetup
_S
18 36 translate
/pagenum 298 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (298) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(erkle Hash Trees for Region hashing of affine rectangles within images. Merkle trees are tr) s
5 731 M
(ees of hashes - leaves are hashes of regions of file blocks, internal nodes are hashes of c) s
5 720 M
(oncatenations of hashes of its children nodes. If hyperbola is represented as an image, com) s
5 709 M
(putational geometric factorization reduces to querying the factor point or rectangles havin) s
5 698 M
(g factors in the image.) s
5 687 M
(486.14 Efficient Parallel Algorithms for Geometric Clustering and Partitioning Problems \(19) s
5 676 M
(94\) - [Amitava Datta] - http://www.informatik.uni-freiburg.de/tr/1994/Report64/report64.ps.) s
5 665 M
(gz - Section 2.1 - Parallel Construction of Range Tree by creating Segment Tree in parallel) s
5 654 M
( in O\(logN\) time and O\(N\) processors.) s
5 643 M
(486.15 Parallel computational geometry of rectangles - [Chandran-Kim-Mount] - https://link.) s
5 632 M
(springer.com/article/10.1007/BF01758750 - this algorithm is applied in 486.14 for parallel ) s
5 621 M
(construction of segment trees.) s
5 610 M
(486.16 SCALABLE PARALLEL COMPUTATIONAL GEOMETRY FOR COARSE GRAINED MULTICOMPUTERS - [FRANK ) s
5 599 M
(DEHNE, ANDREAS FABRI, ANDREW RAU-CHAPLIN] - http://citeseerx.ist.psu.edu/viewdoc/download?d) s
5 588 M
(oi=10.1.1.46.1429&rep=rep1&type=pdf - describes a Scalable Parallel Segment Tree Constructi) s
5 577 M
(on and Search Algorithm.) s
5 566 M
(486.17 Simpler example of Segment trees - tree of nested intervals - http://www.eng.biu.ac.) s
5 555 M
(il/~wimers/files/courses/VLSI_Backend_CAD/Lecture_Notes/SegmentTree.ppt - each internal nod) s
5 544 M
(e has an interval of endpoints which is union of intervals of subtree rooted in it. E.g Int) s
5 533 M
(ernal node having children [10,11] and [11,13] has interval [10,13] - Set of pixelated tile) s
5 522 M
( segments of hyperbolic arc bow creates a lower envelope - list of tile segment endpoints -) s
5 511 M
( which has no overlaps. Segment tree of this envelope is parallelly created by one of the p) s
5 500 M
(arallel segment tree constructions algorithms referred previously.) s
5 489 M
(486.18 Parallel construction of Bounding Volume Hierarchy Trees \(BVH\) - BVH trees are compu) s
5 478 M
(tational geometric binary search datastructures similar to BSP and kd-trees for hierarchica) s
5 467 M
(l space partitions. Each internal node of the search tree has union of volumes bounded by i) s
5 456 M
(ts children. In this respect BVH trees are 3-dimensional counterparts of segment trees. BVH) s
5 445 M
( trees can be constructed in parallel in GPU - https://dcgi.felk.cvut.cz/projects/ploc/ploc) s
5 434 M
(-tvcg.pdf) s
5 423 M
(486.19 Parallel Algorithms for Geometric Problems - [Anita Chow] - Ph.D Thesis - http://www) s
5 412 M
(.dtic.mil/dtic/tr/fulltext/u2/a124353.pdf - Planar Point Location Binary Search Tree for Pl) s
5 401 M
(ain Simple Line Graph \(similar to segment tree\) - "...In this section we describe two algor) s
5 390 M
(ithms: \(i\) the construction of a search structure for the set of edges on the SMl4 with N p) s
5 379 M
(rocessors and \(ii\) the concurrent location of M points with M processors. The construction ) s
5 368 M
(and the location run in time 0\(\(logN\)^2*loglogN\) and O\(\(logN\)^2\) respectively..." - Section) s
5 357 M
( 4.1 - Page 60) s
5 346 M
(486.20 Parallel Augmented Maps \(PAM\) - https://arxiv.org/pdf/1612.05665.pdf - [Yihan Sun, D) s
5 335 M
(aniel Ferizovic, Guy Blelloch] - Recent Algorithm for Parallel Construction of Interval Tre) s
5 324 M
(es by Parallel Augmented Maps - Segment Trees are specialized versions of Interval Trees. I) s
5 313 M
(nterval Trees can also answer stabbing query on interval, not just a point - Section 5.1 an) s
5 302 M
(d Section 6.2 - "...In parallel, on 10^8 intervals, our code can build an interval tree in ) s
5 291 M
(about 0.23 second, achieving a 63-fold speedup. We also give the speedup of our PAM interva) s
5 280 M
(l tree in Figure 6\(d\). Both construction and queries scale up to 144 threads \(72 cores with) s
5 269 M
( hyperthreads\)....") s
5 258 M
(486.21 Burrows-Wheeler Transform - Example transformed string "^BANANA|" - https://en.wikip) s
5 247 M
(edia.org/wiki/Burrows%E2%80%93Wheeler_transform) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(-----------------------------------------------) s
5 203 M
(487. \(THEORY\) Thermodynamics Gas Diffusion Entropy Model of Information Diffusion in Social) s
5 192 M
( Networks and Text Graphs - 11 December 2017) s
5 181 M
(- related to 383) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(-----------------------------------------------) s
5 148 M
(Second Law of Thermodynamics implies entropy of a closed system always increases. Gas diffu) s
5 137 M
(sion in a closed chamber distributes molecules) s
5 126 M
(at random with in the space of the chamber. Gas chamber is a 3-dimensional grid of volume N) s
5 115 M
(. If in initial state, all gas molecules were confined to a small fractional cubic volume, ) s
5 104 M
(probability of finding m gas molecules in kN \(k < 1\) grid points is kNCm / NCm. As the frac) s
5 93 M
(tional volume gets close to N \(k is almost 1\), gas molecules engulf the chamber. Increase i) s
5 82 M
(n fractional volume facilitates increase in degrees of freedom. Entropy of this closed syst) s
5 71 M
(em is defined as clogN where c is Boltzmann constant. Diffusion of information in Social ne) s
5 60 M
(twork graphs can be likened to gas diffusion in closed chamber and adjacent vertices of a s) s
5 49 M
(ocial network node are the neigbouring grid points. In other words, social network graph is) s
5 38 M
( plotted as non-planar simple line graph in a 3-dimensional space and information diffuses ) s
5 27 M
(along edges of this graph. Entropy of this system can then be defined as O\(logV\) where V is) s
5 16 M
( number of vertices. Probability of finding a diffused information in any fraction kV of th) s
5 5 M
(e network follows previous Gas diffusion model = \(kV\)Ci/VCi where i is the total number of ) s
_R
S
%%Page: (299) 299
%%BeginPageSetup
_S
18 36 translate
/pagenum 299 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (299) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(information units diffused among social network vertices. For text defintion graphs, this i) s
5 731 M
(s nothing but Korner Entropy.) s
5 709 M
(References:) s
5 698 M
(----------) s
5 687 M
(487.1 Solomon Asch Conformity Experiments and Herd behaviour - Information Diffusion in Soc) s
5 676 M
(ial Media - Section 7.1 - http://dmml.asu.edu/smm/SMM.pdf - this is a psychology experiment) s
5 665 M
( where set of subjects are swayed by peer opinions and rational independent decision making) s
5 654 M
( ceases i.e majority voting can go wrong.) s
5 643 M
(487.2 Emperor's New Mind - [Roger Penrose] - Inexorable increase in entropy - Page 405) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(--------------------------------------------------) s
5 599 M
(488. \(FEATURE-DONE\) NeuronRain AsFer-KingCobra MAC Electronic Money - Proof-of-Work and Uni) s
5 588 M
(versally Unique ID Hash implementation -) s
5 577 M
(14 December 2017) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(--------------------------------------------------) s
5 544 M
(\(#\) Fictitious Message-As-Currency \(MAC\) in AsFer-KingCobra has been named "Neuro".) s
5 533 M
(\(#\) This commit implements a non-trivial proof-of-work computation and finds a universally ) s
5 522 M
(unique hash id for each Neuro currency) s
5 511 M
( which has 2 leading "ff"s - Proof of Work is analogous to reCAPTCHA in websites for filter) s
5 500 M
(ing out robots) s
5 489 M
(\(#\) Unique id is created from Boost UUID random generator and checked in a loop for 2 leadi) s
5 478 M
(ng "ff" in stringified hex representation) s
5 467 M
(\(#\) Protocol Buffer version has been upgraded to 3.5/15 and currency.proto has been recompi) s
5 456 M
(led with protoc) s
5 445 M
(\(#\) asfercloudmoveclient.cpp has been updated to make a choice between std::move\(\) and std:) s
5 434 M
(:forward\(\) move semantics:) s
5 423 M
(     - std::move\(\) just does =operator overload and moves Neuro currency over network) s
5 412 M
(     - std::forward\(\) + std::move\(\) first deferences rvalue of && for currency uuid and the) s
5 401 M
(n does =operator overload to move Neuro currency) s
5 390 M
(\(#\) Limitation: Presently there is no documented way to create an rvalue for non-primitive ) s
5 379 M
(datatypes. For example std::string can have rvalue) s
5 368 M
(as literal string "xxxxxx".) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(-----------------------------------------------) s
5 324 M
(489. \(FEATURE-DONE\) AsFer-KingCobra Neuro Electronic Currency - Rvalue NonPrimitive Perfect) s
5 313 M
( Forward - 18 December 2017) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-----------------------------------------------) s
5 280 M
(\(#\) New constructor for cloudmove which takes const char* uuid has been defined. This enabl) s
5 269 M
(es) s
5 258 M
(assigning a string literal rvalue to cloudmove<currency::Currency> objects.) s
5 247 M
(\(#\) New move operator= which takes const char* uuid has been defined. This internally insta) s
5 236 M
(ntiates) s
5 225 M
(a currency::Currency object) s
5 214 M
(\(#\) New move operator= which takes cloudmove<T>& lvalue has been defined.) s
5 203 M
(\(#\) New value and a clause for move semantics, "nonprimitiveforward" has been defined. This) s
5 192 M
( clause) s
5 181 M
(does std::forward\(\) of an rvalue cloudmove<currency::Currency> and then invokes std::move\(\)) s
5 170 M
( of the currency over network.) s
5 159 M
(\(#\) This differs from move semantics "std::forward" which is specific to std::string uuid o) s
5 148 M
(nly, and thus solves the generic currency::Currency object rvalue forward and move.) s
5 137 M
(\(#\) client and server logs for this network move have been committed to testlogs.) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(----------------------------------------------) s
5 93 M
(490. \(THEORY\) Generalization of Complementation Undecidability to Rationals\(Q\) and Reals\(R\)) s
5 82 M
( by H10\(Hilbert Tenth Problem\) and) s
5 71 M
(Connection between ZF with Axiom of Choice \(ZFC\) and Complementation - related to 471 - 28 ) s
5 60 M
(December 2017, 29 March 2018) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(----------------------------------------------) s
5 27 M
(Thus far Function Complementation described in drafts of this document are oriented towards) s
5 16 M
( set of natural numbers only - e.g Coloring of Integer Sequences, Diophantines Sets of Inte) s
5 5 M
(gers and associated Diophantine polynomials having Integer Solutions. As mentioned earlier,) s
_R
S
%%Page: (300) 300
%%BeginPageSetup
_S
18 36 translate
/pagenum 300 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (300) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( finding the map f from a diophantine set a={a1,a2,...,an} is equivalent to solving the dio) s
5 731 M
(phantine f\(x,a\)=0 for unknown x and parameter a and f itself being an arbitrary unknown dio) s
5 720 M
(phantine. Integer solutions to x in f\(x,a\)=0 creates the enumeration f\(0\)=a1,f\(1\)=a2,... wh) s
5 709 M
(ich is the constructed complement map. But from MRDP theorem solving integer diophantine f\() s
5 698 M
(x,a\)=0 is undecidable. MRDP theorem does not apply for set of reals which is uncountable/no) s
5 687 M
(n-recursively-enumerable - Reals have cardinality 2^|N| where N is set of natural numbers \() s
5 676 M
(there are atleast two levels of infinities\). Because any set of cardinality greater than se) s
5 665 M
(t of natural integers are uncountable, reals cannot be enumerated as f\(0\),f\(1\),... [By Cant) s
5 654 M
(or diagonalization there exists a real between any two reals]. For reals, Sturm's and Tarsk) s
5 643 M
(i methods solve arbitrary diophantines for real solutions to unknowns and thus H10 is decid) s
5 632 M
(able for reals. But there are undecidable real diophantine problems which involve sine\(\) fu) s
5 621 M
(nction\(details in references\). Construction of complementation is not just about solving un) s
5 610 M
(knowns in a diophantine but to construct the diophantine itself which is harder problem tha) s
5 599 M
(n proving undecidability from H10. Constructing the complement diophantine by previous mapp) s
5 588 M
(ing procedure mandates x to be always a natural integer for enumerability/listability and e) s
5 577 M
(xistence of a corresponding diophantine for this enumerable set - f\(0\),f\(1\),f\(2\),... - once) s
5 566 M
( the mapping process terminates, interpolation can find the diophantine polynomial from the) s
5 555 M
( ordered pairs \(x1,f\(x1\)\),\(x2,f\(x2\)\),...,\(xn,f\(xn\)\). Undecidability of complement construct) s
5 544 M
(ion for recursively enumerable sets arises when mapping procedure itself is not recursive. ) s
5 533 M
(Removing restriction that x has to be integer and admitting real solutions for a and x, mak) s
5 522 M
(es f\(x,a\)=0 decidable.) s
5 500 M
(Axiom of Choice: For set of sets S={s1,s2,s3,...} there exists a choice function C\(si\)=xi w) s
5 489 M
(hich chooses an element xi from every set si in S.) s
5 467 M
(Following is a special case example of Axiom of Choice in Boolean Social Choice functions:) s
5 456 M
(Depth-2 boolean function/circuit B leaves of which are sets s1,s2,s3,.... and nodes at leve) s
5 445 M
(l one are C\(s1\)=x1,C\(s2\)=x2,... for C\(si\) = 0 or 1 and si={si1,si2}, si1,si2 in {0,1}. Root) s
5 434 M
( is an AND/OR gate. For example C\(si\) is a boolean AND/OR function. Boolean complementation) s
5 423 M
( of C\(si\) flips the chosen element per each set si. This yields a complement choice functio) s
5 412 M
(n per set. If this example of Boolean Axiom of Choice complementation is generalized to any) s
5 401 M
( set and is True, S={C\(s1\),C\(s2\),C\(s3\),...,C\(sn\)} is a recursively enumerable set listed by) s
5 390 M
( function C and has a diophantine representation by MRDP theorem and its complement set cre) s
5 379 M
(ated from complement choice function C' of C denoted by S'={C'\(s1\),C'\(s2\),C'\(s3\),...}. If t) s
5 368 M
(his complement set S' is also recursively enumerable, then both sets S and S' are recursive) s
5 357 M
(. This implies choice functions C and C' are constructible and have a diophantine represent) s
5 346 M
(ation.) s
5 324 M
(Disjoint Set Cover is also known as Exact Cover defined as subcollection S' of collection o) s
5 313 M
(f subsets S of a universal set X, and each element in) s
5 302 M
( X is contained in exactly one subset in S'. S' is a disjoint collection and the exact set ) s
5 291 M
(cover of X. Exact Cover problem is NP-complete and is) s
5 280 M
( solved by DLX Dancing Links algorithm. Complementary or Ramsey k-colored sets are created ) s
5 269 M
(by Exact Set Cover.) s
5 247 M
(Hilbert's Tenth Problem for Rationals \(Q\) is open. Some approaches to solving Diophantines ) s
5 236 M
(over Q - defining integers via rationals i.e integers are definable in first order theory o) s
5 225 M
(f rationals - have been mentioned in references.) s
5 203 M
(References:) s
5 192 M
(----------) s
5 181 M
(490.1 Diophantines for Reals - http://wwwmayr.in.tum.de/konferenzen/Jass07/courses/1/Sadovn) s
5 170 M
(ikov/Sadovnikov_Paper.pdf - Section 1.2 - "...It would be natural to ask if the complements) s
5 159 M
( of the sets listed above are also Diophantine. We can easily build a Diophantine represent) s
5 148 M
(ation for the complement of the first set while the answer for two other complements is not) s
5 137 M
( so evident: ... " and Section 3) s
5 126 M
(490.2 Uncountable sets and non-recursively enumerable languages - http://www.cs.colostate.e) s
5 115 M
(du/~massey/Teaching/cs301/RestrictedAccess/Slides/301lecture23.pdf) s
5 104 M
(490.3 Deciding the Undecidable - https://books.google.co.in/books?id=1rjnCwAAQBAJ&pg=PA10&l) s
5 93 M
(pg=PA10&dq=real+solutions+to+diophantine+tarski&source=bl&ots=W2QvvG1KJX&sig=PqhrS-5ThqyokM) s
5 82 M
(AvXDIYNivBPAc&hl=en&sa=X&ved=0ahUKEwj05ofgmqzYAhUBro8KHUaYA-sQ6AEINDAC#v=onepage&q=real%20s) s
5 71 M
(olutions%20to%20diophantine%20tarski&f=false - Tarski's Decision Procedure for Algebra over) s
5 60 M
( Reals) s
5 49 M
(490.4 Introduction to Automata Theory, Languages and Computation - [John E.Hopcroft,Rajeev ) s
5 38 M
(Motwani,Jeffrey D.Ullman] - Theorem 9.4 - Page 376 - If both language L and its complement ) s
5 27 M
(L' are recursively enumerable, then L is recursive and L' is recursive as well. L'=A*-L for) s
5 16 M
( set of alphabets A.) s
5 5 M
(490.5 Real Roots of polynomials - https://en.wikipedia.org/wiki/Root-finding_algorithm) s
_R
S
%%Page: (301) 301
%%BeginPageSetup
_S
18 36 translate
/pagenum 301 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (301) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(490.6 Constructing Diophantine Representation of a Listable Set, Register Machines preferre) s
5 731 M
(d over Turing Machines - https://books.google.co.in/books?id=GlgLDgAAQBAJ&pg=PA43&lpg=PA43&) s
5 720 M
(dq=constructing+diophantine+representations&source=bl&ots=UT5_nW-OUn&sig=vpIkAMBvoNBD1PvqdZ) s
5 709 M
(-qmP7QYME&hl=en&sa=X&ved=0ahUKEwjkxKWnsa_YAhVFr48KHcpJCvUQ6AEIPjAC#v=onepage&q=constructing) s
5 698 M
(%20diophantine%20representations&f=false - Chapter 2 - Martin Davis and H10 - [Y.Matiyasevi) s
5 687 M
(ch] - Constructing Diophantine representation for a listable complementary set is exactly c) s
5 676 M
(onstruction of a complement function.) s
5 665 M
(490.7 Diophantine Representation, Non-Deterministic Diophantine Machine \(NDDM\), Complexity ) s
5 654 M
(class NP, Single Fold Diophantine - [Yuri Matiyasevich, St.Petersburg, Department of Steklo) s
5 643 M
(v Institute of Mathematics of Russian Academy of Sciences] - https://www.newton.ac.uk/files) s
5 632 M
(/seminar/20120111170017302-152989.pdf - Adleman-Manders class D of Diophantines which have ) s
5 621 M
(total binary length of unknowns <= [binary length of parameter]^k - Open Problem: Is D = NP) s
5 610 M
(?) s
5 599 M
(490.8 DPR theorem and finite-fold diophantine representations - [Yuri Matiyasevich] - ftp:/) s
5 588 M
(/ftp.pdmi.ras.ru/pub/publicat/znsl/v377/p078.pdf - Every effectively enumerable set has sin) s
5 577 M
(gle-fold exponential diophantine representation \(a diophantine polynomial which has unknown) s
5 566 M
(s in exponents and value for unknowns per parameter tuple is unique\) of the form: <a1,a2,..) s
5 555 M
(.> in S <=> There exist y,x1,x2,...,a1,a2,... P\(y,x1,x2,...,a1,a2,...\) = 4^y + y for a diop) s
5 544 M
(hantine polynomial P in integer coefficients.) s
5 533 M
(490.9 Factoring Semi-primes \(numbers of the form N=pq for prime p,q\) by Diophantine Equatio) s
5 522 M
(ns - http://www2.mae.ufl.edu/~uhk/FACTORING-VIA-DIOPHANTINE.pdf) s
5 511 M
(490.10 Dancing Links X Algorithm For Exact Cover - Pentominoes Example - 4-way doubly linke) s
5 500 M
(d list - [Donald E. Knuth] - https://arxiv.org/pdf/cs/0011047.pdf) s
5 489 M
(490.11 Dancing Links - [Hitotumatu, Hirosi; Noshita, Kohei] \(1979\). "A Technique for Implem) s
5 478 M
(enting Backtrack Algorithms and its Application". Information Processing Letters. 8 \(4\): 17) s
5 467 M
(4\342\\200\\223175. doi:10.1016/0020-0190\(79\)90016-4.) s
5 456 M
(490.12 Hilbert Tenth Problem for Rationals - https://rjlipton.wordpress.com/2010/08/07/hilb) s
5 445 M
(erts-tenth-over-the-rationals/ - "...One of the most celebrated such results is that decidi) s
5 434 M
(ng whether or not a polynomial {P\(x_1,x_2,\\dots,x_m\)} has an integer solution is undecidabl) s
5 423 M
(e. This is the famous negative solution to Hilbert\342\\200\\231s Tenth. An obvious question, wh) s
5 412 M
(ich is still open, is what happens if we ask for solutions where the {x_1,x_2,\\dots,x_m} ar) s
5 401 M
(e allowed to be rationals? This is open\342\\200\\224I discussed it recently as a potential mill) s
5 390 M
(ion dollar problem....An approach to proving that H10 extended to the rationals is also und) s
5 379 M
(ecidable is to show that the integers are definable by a polynomial formula. Suppose \\displ) s
5 368 M
(aystyle  \\exists y_1 \\dots \\exists y_n \\ R\(x,y_1,\\dots,y_n\) = 0 is true for a rational {x} ) s
5 357 M
(if and only if {x} is actually an integer. Note, the quantifiers range over rationals. Then) s
5 346 M
(, we can transform a question about integers into a question about rationals\342\\200\\224this w) s
5 335 M
(ould show that H10 for rationals is also undecidable. ...") s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(---------------------------------------------------) s
5 291 M
(491. \(FEATURE-DONE\) All pairs of encoded strings - Sum of Distances - algorithm mentioned i) s
5 280 M
(n Grafit course notes implemented - 3 January 2018) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(---------------------------------------------------) s
5 247 M
(\(#\) For pairwise pattern mining, sum of distances between binary encoded strings algorithm ) s
5 236 M
(mentioned in Grafit course notes has been) s
5 225 M
(implemented which is better than bruteforce.) s
5 214 M
(\(#\) asfer.conf has been updated) s
5 203 M
(\(#\) asferencodestr.cpp and asferencodestr.h have been updated for new class member function) s
5 192 M
(s \(factorial and combinations\)) s
5 181 M
(\(#\) logs have been committed to testlogs/) s
5 170 M
(\(#\) This is only in GitHub \(NeuronRain Enterprise\) repo which has binary encoded strings. N) s
5 159 M
(euronRain Research repo in SourceForge) s
5 148 M
(has astronomically encoded unicode strings which requires a variant of this implementation ) s
5 137 M
(\(must be sum of 10 combination terms for each character - each term is per symbol\).) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(----------------------------------------------------) s
5 93 M
(492. \(THEORY and FEATURE-DONE\) Complement Function Map Construction - Diophantine Represent) s
5 82 M
(ation - Lagrange's Four Square Theorem SymPy solver) s
5 71 M
(\(Draft updates to: https://arxiv.org/abs/1106.4102\) - related to 472 - 4 January 2018) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(----------------------------------------------------) s
5 38 M
(\(#\) This commit implements diophantine representation of an enumerable recursive set by Sum) s
5 27 M
( of Four squares solver) s
5 16 M
(in SymPy.) s
5 5 M
(\(#\) New function that enumerates each element x of the complement set and applies it as a p) s
_R
S
%%Page: (302) 302
%%BeginPageSetup
_S
18 36 translate
/pagenum 302 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (302) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(arameter to Sum of Squares Diophantine solver) s
5 731 M
(to obtain the quadruple \(a,b,c,d\) such that a^2 + b^2 + c^2 + d^2 = x) s
5 720 M
(\(#\) This is mostly partial recursive function and not necessarily a total recursive functio) s
5 709 M
(n\(defined for all possible quadruples\).) s
5 698 M
(\(#\) logs for this have been committed to testlogs/) s
5 687 M
(\(#\) SymPy has other diophantine solvers too which require more than one parameters.) s
5 676 M
(\(#\) SymPy does not have exponential diophantine support yet which if available could constr) s
5 665 M
(uct an exponential diophantine for almost every) s
5 654 M
(recursively enumerable set \('almost' because of MRDP theorem - there are diophantine equati) s
5 643 M
(ons for recursively enumerable non-recursive sets and undecidable\)) s
5 621 M
(Any partial function f:X - Y which maps a subset X' of X to Y, can be converted to a total ) s
5 610 M
(function by mapping all elements in the unmapped complement domain set X - X' to an element) s
5 599 M
( y in a new extended codomain Y' = Y U {y} or an existing element in Y. This partial-turned) s
5 588 M
(-total function map can be interpolated to obtain a polynomial.) s
5 577 M
( ) s
5 566 M
(References:) s
5 555 M
(-----------) s
5 544 M
(492.1 Reduction of arbitrary diophantine equation to one in 13 unknowns - [Matijasevic-Robi) s
5 533 M
(nson] - http://matwbn.icm.edu.pl/ksiazki/aa/aa27/aa27125.pdf - This implies every effective) s
5 522 M
(ly enumerable complement set can be represented by a diophantine in 13 unknowns.) s
5 511 M
(492.2 Distinction between Enumerable and Effectively Enumerable - http://faculty.washington) s
5 500 M
(.edu/keyt/Effenumerability.pdf - "1\) A set is enumerable if, and only if, it is the range o) s
5 489 M
(f a total or partial function on the natural numbers.  2\) A set is effectively enumerable i) s
5 478 M
(f, and only if, it is the range of a total or partial effectively computable function on th) s
5 467 M
(e natural numbers.  3\) A function \306\\222 is effectively computable if, and only if, there is) s
5 456 M
( a list of instructions giving a step-by-step procedure that will determine in a finite num) s
5 445 M
(ber of steps the value \306\\222\(n\) for any argument n for which \306\\222 returns a value...." - E) s
5 434 M
(ffectively enumerable sets are recursive sets created by a partial or total recursive funct) s
5 423 M
(ion i.e an algorithm can always find a diophantine representation of the set. From previous) s
5 412 M
( result every recursive set can be represented by a diophantine in 13 unknowns. If each unk) s
5 401 M
(nown has maximum limit l, then there are l^13 possible 13-tuples t\(i\) of unknowns which is ) s
5 390 M
(the maximum cardinality of the effectively enumerable set - mapping is enumerated as f\(t\(0\)) s
5 379 M
(\),f\(t\(1\)\),...,f\(t\(l^13-1\)\). This kind of complementation has two phases:) s
5 368 M
(        \(*\) first 13-tuples are found by a diophantine solver and) s
5 357 M
(        \(*\) these tuples are listed as t\(0\),t\(1\),t\(2\),....) s
5 346 M
(492.3 Function Spaces - Extending partial function to a total function - https://en.wikiped) s
5 335 M
(ia.org/wiki/Partial_function#Total_function) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(---------------------------------------------) s
5 291 M
(493. \(FEATURE-DONE\) Computation Geometric Factorization - Binary Search for Tiles - Optimiz) s
5 280 M
(ation - Benchmarks - Revised - 4 January 2018) s
5 269 M
(- related to 480) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(---------------------------------------------) s
5 236 M
(\(#\) Factorization benchmarks for Tile binary search optimization have been redone on dual c) s
5 225 M
(ore \(local[2]\) after removing some print statements in python spark code which were CPU int) s
5 214 M
(ensive.) s
5 203 M
(\(#\) Following are the durations for factoring same 24 bit integer factorized previously aft) s
5 192 M
(er removing print statements - an improvement of more than 3X:) s
5 181 M
(--------------------------------------------------------------) s
5 170 M
(Factorization of 9333123 \(24-bit\) - without print statements) s
5 159 M
(--------------------------------------------------------------) s
5 148 M
(real    35m56.196s \(Spark Duration = 1839.146seconds\)) s
5 137 M
(user    3m2.836s) s
5 126 M
(sys     4m56.668s) s
5 115 M
(-----------------------------------------------------------------) s
5 104 M
(Factorization of 9333123 \(24-bit\) - with print statements earlier) s
5 93 M
(-----------------------------------------------------------------) s
5 82 M
(real    112m24.101s \(Spark duration 12:21 to 14:02 = 101minutes = 6060seconds\)) s
5 71 M
(user    0m0.000s) s
5 60 M
(sys     0m0.004s) s
5 49 M
(=================================================) s
5 38 M
(Factors of 9333123 are \(excerpt from logs\):) s
5 27 M
(=================================================) s
5 16 M
(...) s
5 5 M
(Factor is =  219) s
_R
S
%%Page: (303) 303
%%BeginPageSetup
_S
18 36 translate
/pagenum 303 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (303) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Factor is =  1387) s
5 731 M
(Factor is =  2243) s
5 720 M
(Factor is =  4161) s
5 709 M
(Factor is =  6729) s
5 698 M
(Factor is =  6729) s
5 687 M
(Factor is =  42617) s
5 676 M
(Factor is =  127851) s
5 665 M
(Factor is =  163739) s
5 654 M
(Factor is =  491217) s
5 643 M
(Factor is =  3111041) s
5 632 M
(Factor is =  9333123) s
5 621 M
(=================================================) s
5 610 M
(\(#\) Compressed Spark log for this factorization has been committed to python-src/testlogs/) s
5 599 M
(\(#\) General Number Field Sieve algorithm is sequential, exponential in number of bits and r) s
5 588 M
(equires O\(2^\(c\(logN\)^0.33*\(loglogN\)^0.67\)\) where c=1.901883 \(for atleast one factor\). For 2) s
5 577 M
(4-bit \(=logN\) this is approximately k*128 time units for some constant k. But Computational) s
5 566 M
( Geometric Factorization Sieve finds all factors in O\(logN*logN\) time on multicore\(PRAMs\).) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(--------------------------------) s
5 522 M
(494. \(THEORY and FEATURE-DONE\) Complement Diophantine Map - Converts a Partial Function to ) s
5 511 M
(Total Function - 6 January 2018) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(--------------------------------) s
5 478 M
(\(#\) Sum of Four Squares diophantine solutions are quadruples \(a,b,c,d\) which form a subset ) s
5 467 M
(of all possible tuples and thus) s
5 456 M
(complement function unknows-to-parameter map is partial.) s
5 445 M
(\(#\) This is remedied by extending the parameter codomain by adding -1 as additional possibl) s
5 434 M
(e parameter value and mapping all unmapped tuples in domain to -1.  Resultant map is Total ) s
5 423 M
(defined for all possible unknown tuples.) s
5 412 M
(\(#\) logs for this have been committed to testlogs/) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(------------------------------------------) s
5 368 M
(495. \(THEORY\) Factoring as a service - General Number Field Sieve on Amazon EC2 cloud - RSA) s
5 357 M
( 512 bit - Relevance to Computational) s
5 346 M
(Geometric NC-PRAM-Multicore Factorization Theoretical O\(\(logN\)^2\) bound - related to 481 - ) s
5 335 M
(9 January 2018) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(------------------------------------------) s
5 302 M
(Number field sieve has been implemented as Amazon EC2 cloud service. Benchmarks for RSA 512) s
5 291 M
( bit achieve factorization in less than) s
5 280 M
(4 hours applying CADO-NFS and MSieve NFS implementations optimized for Elastic Cloud. Insta) s
5 269 M
(nce type used is c4.8xlarge \(each instance has two Intel Xeon E5-2666 v3 processor chips, w) s
5 258 M
(ith 36 vCPUs in a NUMA configuration with 60 GB of RAM\) and maximum of 200 instances were i) s
5 247 M
(n the cloud connected by Elastic Network Adapter\(ENA\). RSA 512 GNFS benchmark has some para) s
5 236 M
(llels in Computational Geometric Factorization - Most time intensive preprocessing step is ) s
5 225 M
(to create tile segments in parallel by pixelating the hyperbolic arc. Presently this is imp) s
5 214 M
(lemented as SparkContext.parallelize\(tilesegementslist\) which creates tile segment RDDs in ) s
5 203 M
(parallel on cloud reading tile segment array on flatfile. Ideally, each PRAM processor \(ass) s
5 192 M
(uming there are N/\(logN\)^k PRAMs\) must read in a tile by computation and not from storage. ) s
5 181 M
(For example in the algorithm mentioned in 481, p-th PRAM has to compute the tile segment in) s
5 170 M
(terval \(tilestart,tileend\) locally in i-th iteration as tilestart=\(x,N/x\) and tileend=\(x,N/) s
5 159 M
(x-N/x\(x+1\)\) for x=\(p+i*N/\(logN\)^k\). Factoring 512 bit by Hyperbolic pixelation and sort-sea) s
5 148 M
(rch of tiles theoretically requires constant*\(512\)^k parallel time units and 2^512/\(512\)^k ) s
5 137 M
(PRAM processors. It has to be mentioned that real advantage of this Computational Geometric) s
5 126 M
( Factorization can be felt only for large integers on huge multicores and is by-and-large a) s
5 115 M
( theoretical fancy abiding by definition of NC \("Factorization is in NC"\) in the absence of) s
5 104 M
( a practical large scale cloud benchmark. Number of PRAMs required in definition of NC-PRAM) s
5 93 M
( equivalence is high even for work-optimal NC. Necessity of sorting the tile segments arise) s
5 82 M
(s because successive segments though locally sorted ascending cannot be merged by splicing ) s
5 71 M
(end-to-end directly because some elements in end of a segment could be larger than some ele) s
5 60 M
(ments in the beginning of next segment. Local tile search redresses this deficit.) s
5 38 M
(References:) s
5 27 M
(----------) s
5 16 M
(495.1 Factoring as a service - slides - http://crypto.2013.rump.cr.yp.to/981774ce07e51813fd) s
5 5 M
(4466612a78601b.pdf) s
_R
S
%%Page: (304) 304
%%BeginPageSetup
_S
18 36 translate
/pagenum 304 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (304) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(495.2 Factoring as a service - https://github.com/eniac/faas - Parallelizing Number Field S) s
5 731 M
(eive - Polynomial selection, Sieving, Linear Algebra, Square root - paper - [Luke Valenta, ) s
5 720 M
(Shaanan Cohney, Alex Liao, Joshua Fried, Satya Bodduluri, Nadia Heninger - University of Pe) s
5 709 M
(nnsylvania] - https://eprint.iacr.org/2015/1000.pdf - "...The current public factorization ) s
5 698 M
(record, a 768-bit RSA modulus, was reported in 2009 by Kleinjung, Aoki, Franke, Lenstra, Th) s
5 687 M
(om\303\251, Bos, Gaudry, Kruppa, Montgomery, Osvik, te Riele, Timofeev, and Zimmermann, and took ) s
5 676 M
(about 2.5 calendar years and a large academic effort [23],...We experimented with Apache Sp) s
5 665 M
(ark [37] to manage data flow, but Spark was not flexible enough for our needs, and our init) s
5 654 M
(ial tests suggested that a Spark-based job distribution system was more than twice as slow ) s
5 643 M
(as the system we were aiming to replace. Ultimately we chose Slurm \(Simple Linux Utility fo) s
5 632 M
(r Resource Management\) [36] for job distribution...") s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(-------------------------------------------------) s
5 588 M
(496. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization Update - Local Tile Co) s
5 577 M
(mputation and necessity for storage removed -) s
5 566 M
(10 January 2018 - 30-bit integer dual core single node Spark Cluster benchmark - related to) s
5 555 M
( 495) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-------------------------------------------------) s
5 522 M
(As mentioned in previous section, reading tiles from storage in SparkContext.parallelize\(\) ) s
5 511 M
(is a serious bottleneck. In this commit, tile interval storage is obviated and each foreach) s
5 500 M
(\(\) invokes a function which computes non-persisted tile interval locally and does binary se) s
5 489 M
(arch to print factors. SparkContext.parallelize\(\) takes xrange\(\) as argument. Python xrange) s
5 478 M
(\(\) is an optimized implementation of list and returns XRange object.XRange object does not ) s
5 467 M
(store all the elements in memory and is more like an iterator. A thirty bit integer has bee) s
5 456 M
(n factored and numbers are below:) s
5 445 M
(---------------------------) s
5 434 M
(Factorization of 921234437:) s
5 423 M
(---------------------------) s
5 412 M
(18/01/10 17:56:56 INFO Utils: /home/shrinivaasanka/Krishna_iResearch_OpenSource/GitHub/asfe) s
5 401 M
(r-github-code/python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py ) s
5 390 M
(has been previously copied to /tmp/spark-9fba8482-8ca1-4022-9bcc-1c285a8e1f58/userFiles-3e4) s
5 379 M
(bf574-9b1a-44c5-8b96-3873e96dc6c3/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Opti) s
5 368 M
(mized.py) s
5 357 M
(Factor is =  1) s
5 346 M
(Factor is =  17) s
5 335 M
(Factor is =  19) s
5 324 M
(Factor is =  59) s
5 313 M
(Factor is =  323) s
5 302 M
(Factor is =  1003) s
5 291 M
(Factor is =  1121) s
5 280 M
(Factor is =  19057) s
5 269 M
(Factor is =  48341) s
5 258 M
(Factor is =  821797) s
5 247 M
(Factor is =  918479) s
5 236 M
(Factor is =  2852119) s
5 225 M
(Factor is =  15614143) s
5 214 M
(Factor is =  48486023) s
5 203 M
(Factor is =  54190261) s
5 192 M
(18/01/10 18:08:51 INFO PythonRunner: Times: total = 714516, boot = 649, init = 23, finish =) s
5 181 M
( 713844) s
5 159 M
(Spark Duration: 18:08:51 - 17:56:56 = 535seconds) s
5 137 M
(Spark-Python has RPC and serialization latencies and following numbers could be better if i) s
5 126 M
(mplemented in a different frameworks like Slurm and on a Gigabit ENA cloud. First non-trivi) s
5 115 M
(al factor above was printed within few seconds and this benchmark is for sieving all factor) s
5 104 M
(s. Time utility is misleading because it includes all Spark RPC overhead. ) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(--------------------------------------) s
5 60 M
(497. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Non-Persistent Tile ) s
5 49 M
(Segments - 30 bit Single Node Dual Core Spark Benchmarks - 11 January 2018 - related to 495) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(--------------------------------------) s
5 16 M
(\(#\) Benchmarks for factoring another 30-bit integer 999994437 on single node dual core Spar) s
5 5 M
(k cluster have been committed to python-src/testlogs/) s
_R
S
%%Page: (305) 305
%%BeginPageSetup
_S
18 36 translate
/pagenum 305 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (305) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\(#\) Similar to previous 30 bit integer, time utility prints 40 minutes 56 seconds while the) s
5 731 M
( actual Spark duration is between first and last factors:) s
5 720 M
(18/01/11 13:34:34 INFO Utils: /home/shrinivaasanka/Krishna_iResearch_OpenSource/GitHub/asfe) s
5 709 M
(r-github-code/python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py ) s
5 698 M
(has been previously copied to /tmp/spark-5630f619-b8a7-46b8-b15b-7296508792c5/userFiles-44c) s
5 687 M
(23be8-a7b3-48d3-bfd7-98acf1971e10/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Opti) s
5 676 M
(mized.py) s
5 665 M
(=================================================) s
5 654 M
(Factor is = 1) s
5 643 M
(=================================================) s
5 632 M
(=================================================) s
5 621 M
(Factor is = 3) s
5 610 M
(=================================================) s
5 599 M
(=================================================) s
5 588 M
(Factor is = 9) s
5 577 M
(=================================================) s
5 566 M
(=================================================) s
5 555 M
(Factor is = 13) s
5 544 M
(=================================================) s
5 533 M
(=================================================) s
5 522 M
(Factor is = 23) s
5 511 M
(=================================================) s
5 500 M
(=================================================) s
5 489 M
(Factor is = 27) s
5 478 M
(=================================================) s
5 467 M
(=================================================) s
5 456 M
(Factor is = 39) s
5 445 M
(=================================================) s
5 434 M
(=================================================) s
5 423 M
(Factor is = 69) s
5 412 M
(=================================================) s
5 401 M
(=================================================) s
5 390 M
(Factor is = 97) s
5 379 M
(=================================================) s
5 368 M
(=================================================) s
5 357 M
(Factor is = 117) s
5 346 M
(=================================================) s
5 335 M
(=================================================) s
5 324 M
(Factor is = 207) s
5 313 M
(=================================================) s
5 302 M
(=================================================) s
5 291 M
(Factor is = 291) s
5 280 M
(=================================================) s
5 269 M
(=================================================) s
5 258 M
(Factor is = 299) s
5 247 M
(=================================================) s
5 236 M
(=================================================) s
5 225 M
(Factor is = 351) s
5 214 M
(=================================================) s
5 203 M
(=================================================) s
5 192 M
(Factor is = 621) s
5 181 M
(=================================================) s
5 170 M
(=================================================) s
5 159 M
(Factor is = 873) s
5 148 M
(=================================================) s
5 137 M
(=================================================) s
5 126 M
(Factor is = 897) s
5 115 M
(=================================================) s
5 104 M
(=================================================) s
5 93 M
(Factor is = 1261) s
5 82 M
(=================================================) s
5 71 M
(=================================================) s
5 60 M
(Factor is = 1277) s
5 49 M
(=================================================) s
5 38 M
(=================================================) s
5 27 M
(Factor is = 2231) s
5 16 M
(=================================================) s
5 5 M
(=================================================) s
_R
S
%%Page: (306) 306
%%BeginPageSetup
_S
18 36 translate
/pagenum 306 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (306) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Factor is = 2619) s
5 731 M
(=================================================) s
5 720 M
(=================================================) s
5 709 M
(Factor is = 2691) s
5 698 M
(=================================================) s
5 687 M
(=================================================) s
5 676 M
(Factor is = 3783) s
5 665 M
(=================================================) s
5 654 M
(=================================================) s
5 643 M
(Factor is = 3831) s
5 632 M
(=================================================) s
5 621 M
(=================================================) s
5 610 M
(Factor is = 6693) s
5 599 M
(=================================================) s
5 588 M
(=================================================) s
5 577 M
(Factor is = 8073) s
5 566 M
(=================================================) s
5 555 M
(=================================================) s
5 544 M
(Factor is = 11349) s
5 533 M
(=================================================) s
5 522 M
(=================================================) s
5 511 M
(Factor is = 11493) s
5 500 M
(=================================================) s
5 489 M
(=================================================) s
5 478 M
(Factor is = 16601) s
5 467 M
(=================================================) s
5 456 M
(=================================================) s
5 445 M
(Factor is = 20079) s
5 434 M
(=================================================) s
5 423 M
(=================================================) s
5 412 M
(Factor is = 29003) s
5 401 M
(=================================================) s
5 390 M
(=================================================) s
5 379 M
(Factor is = 29371) s
5 368 M
(=================================================) s
5 357 M
(=================================================) s
5 346 M
(Factor is = 34047) s
5 335 M
(=================================================) s
5 324 M
(=================================================) s
5 313 M
(Factor is = 34479) s
5 302 M
(=================================================) s
5 291 M
(=================================================) s
5 280 M
(Factor is = 49803) s
5 269 M
(=================================================) s
5 258 M
(=================================================) s
5 247 M
(Factor is = 60237) s
5 236 M
(=================================================) s
5 225 M
(=================================================) s
5 214 M
(Factor is = 87009) s
5 203 M
(=================================================) s
5 192 M
(=================================================) s
5 181 M
(Factor is = 88113) s
5 170 M
(=================================================) s
5 159 M
(=================================================) s
5 148 M
(Factor is = 123869) s
5 137 M
(=================================================) s
5 126 M
(=================================================) s
5 115 M
(Factor is = 149409) s
5 104 M
(=================================================) s
5 93 M
(=================================================) s
5 82 M
(Factor is = 261027) s
5 71 M
(=================================================) s
5 60 M
(=================================================) s
5 49 M
(Factor is = 264339) s
5 38 M
(=================================================) s
5 27 M
(=================================================) s
5 16 M
(Factor is = 371607) s
5 5 M
(=================================================) s
_R
S
%%Page: (307) 307
%%BeginPageSetup
_S
18 36 translate
/pagenum 307 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (307) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(=================================================) s
5 731 M
(Factor is = 381823) s
5 720 M
(=================================================) s
5 709 M
(=================================================) s
5 698 M
(Factor is = 448227) s
5 687 M
(=================================================) s
5 676 M
(=================================================) s
5 665 M
(Factor is = 783081) s
5 654 M
(=================================================) s
5 643 M
(=================================================) s
5 632 M
(Factor is = 793017) s
5 621 M
(=================================================) s
5 610 M
(=================================================) s
5 599 M
(Factor is = 1114821) s
5 588 M
(=================================================) s
5 577 M
(=================================================) s
5 566 M
(Factor is = 1145469) s
5 555 M
(=================================================) s
5 544 M
(=================================================) s
5 533 M
(Factor is = 1610297) s
5 522 M
(=================================================) s
5 511 M
(=================================================) s
5 500 M
(Factor is = 2848987) s
5 489 M
(=================================================) s
5 478 M
(=================================================) s
5 467 M
(Factor is = 3344463) s
5 456 M
(=================================================) s
5 445 M
(=================================================) s
5 434 M
(Factor is = 3436407) s
5 423 M
(=================================================) s
5 412 M
(=================================================) s
5 401 M
(Factor is = 4830891) s
5 390 M
(=================================================) s
5 379 M
(=================================================) s
5 368 M
(Factor is = 8546961) s
5 357 M
(=================================================) s
5 346 M
(=================================================) s
5 335 M
(Factor is = 10309221) s
5 324 M
(=================================================) s
5 313 M
(=================================================) s
5 302 M
(Factor is = 14492673) s
5 291 M
(=================================================) s
5 280 M
(=================================================) s
5 269 M
(Factor is = 25640883) s
5 258 M
(=================================================) s
5 247 M
(=================================================) s
5 236 M
(Factor is = 37036831) s
5 225 M
(=================================================) s
5 214 M
(=================================================) s
5 203 M
(Factor is = 43478019) s
5 192 M
(=================================================) s
5 181 M
(=================================================) s
5 170 M
(Factor is = 76922649) s
5 159 M
(=================================================) s
5 148 M
(=================================================) s
5 137 M
(Factor is = 111110493) s
5 126 M
(=================================================) s
5 115 M
(18/01/11 13:48:32 INFO PythonRunner: Times: total = 837634, boot = 641, init = 37, finish =) s
5 104 M
( 836956) s
5 93 M
(18/01/11 13:48:32 INFO Executor: Finished task 0.0 in stage 0.0 \(TID 0\). 1529 bytes result ) s
5 82 M
(sent to driver) s
5 71 M
(18/01/11 13:48:32 INFO TaskSetManager: Starting task 1.0 in stage 0.0 \(TID 1, localhost, ex) s
5 60 M
(ecutor driver, partition 1, PROCESS_LOCAL, 6208 bytes\)) s
5 49 M
(18/01/11 13:48:32 INFO Executor: Running task 1.0 in stage 0.0 \(TID 1\)) s
5 38 M
(=================================================) s
5 27 M
(Factor is = 333331479) s
5 16 M
(=================================================) s
5 5 M
(18/01/11 13:48:32 INFO TaskSetManager: Finished task 0.0 in stage 0.0 \(TID 0\) in 838426 ms ) s
_R
S
%%Page: (308) 308
%%BeginPageSetup
_S
18 36 translate
/pagenum 308 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (308) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(on localhost \(executor driver\) \(1/3\)) s
5 720 M
(which is almost 14 minutes \( 13:48:32 - 13:34:34 \). First non-trivial factor was printed wi) s
5 709 M
(thin 10 seconds. Time utility prints 40 minutes including overhead for finishing Spark RPC ) s
5 698 M
(tasks) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(---------------------------------------------------) s
5 654 M
(498. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Non-Persistent Tile ) s
5 643 M
(Segments - 31 bit Single Node Dual Core Spark Benchmarks - Primality Testing - Multiplicati) s
5 632 M
(ve Partition - Factorisatio Numerorum - 12 January 2018 - related to 495) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(---------------------------------------------------) s
5 599 M
(31-bit integer 2147483647 has been factorized by searching non-persisted pixelated hyperbol) s
5 588 M
(ic tile segments. Only trivial factors are found and is a mersenne prime. This integer is t) s
5 577 M
(he maximum permissible limit for xrange\(\) and printed by python sys module \(sys.maxsize\). S) s
5 566 M
(imilar to integer partition function which is number of ways of splitting an integer as sum) s
5 555 M
( of smaller integers, multiplicative partition function f\(n\) = number of ways of unordered ) s
5 544 M
(factorizations of n. This function has an upperbound of : a{n} <= n\(exp{{log n * logloglog ) s
5 533 M
(n}/{loglog n}}\)^{{-1+o\(1\)}}.) s
5 511 M
(----------------------------------------------------------------------------) s
5 500 M
(Factorization/Primality of 2147483647) s
5 489 M
(----------------------------------------------------------------------------) s
5 478 M
(18/01/12 14:33:12 INFO Utils: /home/shrinivaasanka/Krishna_iResearch_OpenSource/GitHub/asfe) s
5 467 M
(r-github-code/python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py ) s
5 456 M
(has been previously copied to /tmp/spark-169ef9d3-56df-46eb-9b09-d63561491f87/userFiles-9f5) s
5 445 M
(5cc79-e7cc-46e6-bad7-540f950587b5/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Opti) s
5 434 M
(mized.py) s
5 423 M
(=================================================) s
5 412 M
(Factor is =  1) s
5 401 M
(=================================================) s
5 390 M
(18/01/12 15:02:57 INFO PythonRunner: Times: total = 1784724, boot = 643, init = 23, finish ) s
5 379 M
(= 1784058) s
5 368 M
(----------------------------------------------------------------------------) s
5 357 M
(Spark Duration 15:02:57 - 14:33:12 = 29 minutes 45 seconds) s
5 335 M
(Spark Logs have been committed to python-src/testlogs/) s
5 313 M
(References:) s
5 302 M
(----------) s
5 291 M
(498.1 Multiplicative Partition Function - ON THE OPPENHEIM\342\\200\\231S \342\\200\\235FACTORISATIO ) s
5 280 M
(NUMERORUM\342\\200\\235 FUNCTION - [FLORIAN LUCA, ANIRBAN MUKHOPADHYAY AND KOTYADA SRINIVAS] - h) s
5 269 M
(ttps://arxiv.org/pdf/0807.0986.pdf - "... The function f\(n\) is related to various partition) s
5 258 M
( functions. For example, f\(2^n\) = p\(n\), where p\(n\) is the number of partitions of n. Furthe) s
5 247 M
(rmore, f\(p1p2 \302\267 \302\267 \302\267 pk\) = Bk, where Bk is the kth Bell number which counts the number of) s
5 236 M
( partitions of a set with k elements in nonempty disjoint subsets. In general, f\(p1^\316\2611*p2^) s
5 225 M
(\316\2612 \302\267 \302\267 \302\267 pk^\316\261k\) is the number of partitions of a multiset consisting of \316\261i copies of ) s
5 214 M
({i} for each i = 1, . . . , k.  Throughout the paper, we put log x for the natural logarith) s
5 203 M
(m of x. We use p and q for prime numbers and O and o for the Landau symbols. ..." ) s
5 192 M
(498.2 Multiplicative Partition Function - https://oeis.org/A001055) s
5 181 M
(498.3 Bound for Multiplicative Partition Function - [Canfield-Erdos-Pomerance] - https://ww) s
5 170 M
(w.math.dartmouth.edu/~carlp/PDF/paper39.pdf) s
5 159 M
(498.4 Eigth Mersenne Prime - 2^31 - 1 = 2147483647 - https://en.wikipedia.org/wiki/2,147,48) s
5 148 M
(3,647 - this was largest known prime till 1867.) s
5 137 M
(498.5 M31 - http://primes.utm.edu/curios/page.php/2147483647.html - The first prime that ca) s
5 126 M
(nnot be tested on 32-bit primality-check software.) s
5 115 M
(498.6 Cryptography in NC0 - [Benny Applebaum, Yuval Ishai, Eyal Kushilevitz] - http://www.c) s
5 104 M
(s.technion.ac.il/~abenny/pubs/nc0.pdf, Hardness of factoring - [Emanuele Viola] - https://e) s
5 93 M
(manueleviola.wordpress.com/2018/02/16/i-believe-pnp/ - One way functions are in NC0 and the) s
5 82 M
(re are PRGs for which output bit depends only on O\(1\) bits of seed implying factoring is ha) s
5 71 M
(rd for constant depth. Computational Geometric Factorization doable in O\(logN^2\) PRAM time ) s
5 60 M
(in NC2, implies factoring can be made easy by parallelism and polylog depth circuits.) s
5 49 M
(498.7 Binary Quadratic Diophantine Equations \(BQDE\) and BQDE for Factorization - [JC Lagari) s
5 38 M
(as] - https://arxiv.org/pdf/math/0611209 - Succinct Certificates for the Solvability of BQD) s
5 27 M
(E.) s
5 16 M
(498.8 Polynomial Time Quantum Algorithm for Solving Pell's Equation - [Hallgren] - http://w) s
5 5 M
(ww.cse.psu.edu/~sjh26/pell.pdf - Integer Solutions to Pell's Equation reduce to Factoring -) s
_R
S
%%Page: (309) 309
%%BeginPageSetup
_S
18 36 translate
/pagenum 309 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (309) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( e.g Solving for x,y for known N in x^2 - Ny^2 = 1 factorizes N by rewriting as: \(x^2 - 1\) ) s
5 731 M
(/ y^2 = N => \(\(x+1\)/y\)\(\(x-1\)/y\) = N. In this respect, Hallgren's algorithm is equivalent to) s
5 720 M
( Shor Quantum Factorization. Computational Geometric Factorization in NC-PRAM or Sequential) s
5 709 M
( Optimization in P could therefore imply Pell's equation is solvable by PRAM model and in N) s
5 698 M
(C or in P as follows:) s
5 687 M
(        \(x+1\)/y = a) s
5 676 M
(        \(x-1\)/y = b) s
5 665 M
(        2/y = a-b for factors a,b of N.) s
5 654 M
(        y = 2/a-b ) s
5 643 M
(        => \(x+1\) = 2a/\(a-b\)) s
5 632 M
(        => x = 2a/\(a-b\) - 1) s
5 621 M
(Historicity of this problem \(Brahmagupta's Chakravala\) and a polylog approximation based on) s
5 610 M
( Newton-Raphson square root recurrence is described in GRAFIT course material https://kuja2) s
5 599 M
(7.blogspot.in/2018/04/grafit-course-material-newton-raphson.html) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(------------------------------) s
5 555 M
(499. \(FEATURE-DONE\) Secure Neuro Currency Cloud Perfect Forward Move - OpenSSL client and s) s
5 544 M
(erver - 19 January 2018) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(------------------------------) s
5 511 M
(Neuro Currency Cloud Perfect Forward Move socket code has been openSSL enabled:) s
5 500 M
(- Makefile updated include -DOPENSSL #ifdef option for compiling SSL client-server headers) s
5 489 M
(- license headers updated) s
5 478 M
(- new header asfercloudmove_openssl.h has been added to repository for invoking openSSL cli) s
5 467 M
(ent and server functions in opensslclient.h) s
5 456 M
(and opensslserver.h) s
5 445 M
(- An example fictitious X.509 cert.pem and key.pem have been created by openssl utility for) s
5 434 M
( certificate verification) s
5 423 M
(- new headers opensslclient.h and opensslserver.h have been added to repository which defin) s
5 412 M
(e openSSL client and server functions \(these) s
5 401 M
( are reference examples in www.openssl.org Wiki changed for cloud move\)) s
5 390 M
(- logs for SSL cloud_move client and server have been committed to cloud_move/testlogs/) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(---------------------------------) s
5 346 M
(500. \(FEATURE-DONE\) Searching Unsorted List of Numbers - Algorithm in GRAFIT Open Learning ) s
5 335 M
(Implemented - 21 January 2018) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(---------------------------------) s
5 302 M
(An algorithm to search list of numbers better than bruteforce search mentioned in GRAFIT Co) s
5 291 M
(urse Notes:) s
5 280 M
(https://github.com/shrinivaasanka/Grafit/blob/master/course_material/ComputerScienceMiscell) s
5 269 M
(aneous/ComputerScienceMiscellaneous_CourseNotes.txt) s
5 258 M
(has been implemented in NeuronRain AsFer.) s
5 236 M
(This lifts one dimensional numbers to multidimensional tuples and creates hashtables for ea) s
5 225 M
(ch dimension of tuple. Lookup for a query number is) s
5 214 M
(lookup of each digit in query in these hash tables in succession. If all hash lookups succe) s
5 203 M
(ed queried number exists in the unsorted list) s
5 181 M
(This implementation pads each number with "#" so that it is right justified and maximum num) s
5 170 M
(ber of digits is stipulated.) s
5 148 M
(Searching Unsorted lists is the most fundamental open research problem and this implementat) s
5 137 M
(ion uses Locality sensitive hashing as the hash table) s
5 126 M
(. Python dictionaries are hash maps and not hash tables which support collisions. Each digi) s
5 115 M
(t in query is lookedup for nearest neighbours and if) s
5 104 M
( there is a match digitmatch is set to True. Logical AND of all digit matches is returned a) s
5 93 M
(s True/False.) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(------------------------------------------) s
5 49 M
(501. \(THEORY\) Answer-Questioning \(Reversal of Interview\) and Recursive Gloss Overlap Dense ) s
5 38 M
(Subgraph Classification - 21 January 2018) s
5 27 M
(- related to 412, 420) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(------------------------------------------) s
_R
S
%%Page: (310) 310
%%BeginPageSetup
_S
18 36 translate
/pagenum 310 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (310) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Recursive Gloss Overlap Definition Graph of a text previously has been demonstrated to clas) s
5 731 M
(sify documents in unsupervised manner based on) s
5 720 M
(dense subgraphs: centrality, k-cores, pageranks etc., Dense subgraphs of text graph extract) s
5 709 M
( the essence of an article and highlight the keywords) s
5 698 M
(which may or may not be present in the document. Keywords not present in the document can b) s
5 687 M
(e classes of a document because of the recursive) s
5 676 M
(deep learning of definitions. From the keywords, a question or set of permutations of quest) s
5 665 M
(ions can be constructed which the text answers.) s
5 654 M
(Relevance of Question depends on the relatedness e.g Tensor Neuron of all possible pairs of) s
5 643 M
( keyword class vertices.) s
5 621 M
(Example:) s
5 610 M
(--------) s
5 599 M
(If a text graph of an academic research text has been classified in following word vertices) s
5 588 M
( of high core numbers) s
5 577 M
(                [Prime, Factorization, Theorem, Composites, Diophantine, Polynomials,...]) s
5 566 M
(in decreasing value of centrality/k-core/pagerank and pairwise Tensor Neuron potentials are) s
5 555 M
( ranked as below:) s
5 544 M
(                Prime-Factorization = 0.34234) s
5 533 M
(                Theorem-Composites=0.33333) s
5 522 M
(                Diophantine-polynomials=0.221212) s
5 511 M
(                ... and so on) s
5 500 M
(then question\(s\) can be constructed based on previous ranking of Tensor relatedness as:) s
5 489 M
(                Does this article discuss relation between [Primes] and [Factorization]?) s
5 478 M
(                ....) s
5 456 M
(Reference:) s
5 445 M
(---------) s
5 434 M
(501.1 CALO, SIRI, PAL - https://pal.sri.com/architecture/ - Cognitive Assistants, Question ) s
5 423 M
(Answering) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(-----------------------------------------------) s
5 379 M
(502. \(FEATURE-DONE\) Scheduler Analytics - Interprocess Distance Computation by DictDiffer -) s
5 368 M
( 24 January 2018) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(-----------------------------------------------) s
5 335 M
(1. Representing OS Process Information as Feature Vectors has been mentioned as Software Sc) s
5 324 M
(heduler Analytics usecase in) s
5 313 M
(http://neuronrain-documentation.readthedocs.io/en/latest/) s
5 302 M
(2. This commit implements a new python function which reads process info as a dictionary fr) s
5 291 M
(om psutils. Psutils has an option to read individual) s
5 280 M
(process metrics or to read the dictionary in its entirety.) s
5 269 M
(3. Psutils per-process dictionary has all the basic details pertaining to instantaneous res) s
5 258 M
(ource consumptions of a process) s
5 247 M
(4. These per-process features are collated in an array and are json.dump\(\)-ed as strings in) s
5 236 M
( asfer.enterprise.encstr.scheduleranalytics file) s
5 225 M
(which can be used as input by clustering/classification NeuronRain-AsFer C++ implementation) s
5 214 M
(s.) s
5 203 M
(5. logs for this have been committed to software_analytics/testlogs/DeepLearning_SchedulerA) s
5 192 M
(nalytics.log.24January2018) s
5 181 M
(6. Distance between two process feature dictionaries/vectors are printed by DictDiffer whic) s
5 170 M
(h has been imported and length of the diff is) s
5 159 M
( the distance function between any two processes.) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(------------------------------------------------) s
5 115 M
(503. \(FEATURE-DONE\) Scheduler Analytics - Process kNN classification and K-Means clustering) s
5 104 M
(, Process Dict Hashing - 25 January 2018) s
5 93 M
(\(Only in NeuronRain Enterprise - GitHub\)) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(------------------------------------------------) s
5 60 M
(1. python-src/software_analytics/DeepLearning_SchedulerAnalytics.py has been updated to def) s
5 49 M
(ine a getHash\(\) function similar to Streaming_<algorithm>.py implementations, which creates) s
5 38 M
( an MD5 hash of process psutils dictionary string. ) s
5 27 M
(2. This hashing of dictionary is because of huge size of process dictionary storing of whic) s
5 16 M
(h requires few KBs for each process. Computing distance \(Levenshtein\) of these strings is a) s
5 5 M
(gain memory intensive.) s
_R
S
%%Page: (311) 311
%%BeginPageSetup
_S
18 36 translate
/pagenum 311 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (311) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(3. DictDiffer distance implemented in python-src/software_analytics/DeepLearning_SchedulerA) s
5 731 M
(nalytics.py is not directly invocable in C++ and diff between process dictionary strings is) s
5 720 M
( also huge in KBs.) s
5 709 M
(4. Succinct representation of process dictionary string - Fingerprinting - is therefore a n) s
5 698 M
(ecessity to optimize space. MD5 binary hash digest of the process dictionary string is writ) s
5 687 M
(ten to python-src/software_analytics/asfer.enterprise.encstr.scheduleranalytics prefixed by) s
5 676 M
( process name and process id , instead of complete chunk.) s
5 665 M
(5. cpp-src/asferkNNclustering.cpp and cpp-src/asferkmeansclustering.cpp are updated for EOF) s
5 654 M
( check and number of clusters has been increased to 10 in kNN classifier.) s
5 643 M
(6. asfer binary has been rebuilt and asfer.conf has been updated to do clustering and class) s
5 632 M
(ification.) s
5 621 M
(7. process statistics dataset - cpp-src/asfer.enterprise.encstr, cpp-src/asfer.enterprise.e) s
5 610 M
(ncstr.clustered and cpp-src/asfer.enterprise.encstr.kNN have been updated.) s
5 599 M
(8. asfer kNN classification and KMeans clustering has been executed on this encoded process) s
5 588 M
( statistics dataset ) s
5 577 M
(9. logs have been committed to cpp-src/testlogs/asfer.SchedulerAnalytics.KMeansAndkNNCluste) s
5 566 M
(ring.log.25January2018 \(Scheduler Analytics\) and cpp-src/testlogs/asfer.SchedulerAnalytics.) s
5 555 M
(KMeansAndkNNClustering.log.25January2018 \(kNN classification and KMeans clustering\) - for 1) s
5 544 M
(94 processes) s
5 533 M
(10. logs for clustering and classification imply similar processes flock together - e.g exc) s
5 522 M
(erpt from KMeans cluster logs show lot of kworkers in same cluster:) s
5 511 M
(===========) s
5 500 M
(Cluster 6) s
5 489 M
(===========) s
5 478 M
(encoded string [5574:bash:0b110111011110100011111010001100001111101110000110100100010011001) s
5 467 M
(1010011011000001110010100101100000110000110001011001100100110000001000011110100010100000000) s
5 456 M
(000]) s
5 445 M
(encoded string [139:kworker/u4:4:0b11001110101100100111010100010000100111011001100100111100) s
5 434 M
(1100100110110001100111111101011011001010111100000000010110111111011000010101001110100100010) s
5 423 M
(010010010001]) s
5 412 M
(encoded string [145:usb-storage:0b110000101010111000011111001110110001011101110101000000000) s
5 401 M
(1100110001100100110110101001101010010100000011011111000100101110101110001001010111101101000) s
5 390 M
(111000001]) s
5 379 M
(encoded string [35:fsnotify_mark:0b10110111100000011110100110001101010110100011000000100100) s
5 368 M
(0101010011010111110100111100001110010100011100011100100000010100001100010111010110010010100) s
5 357 M
(0001101101110]) s
5 346 M
(encoded string [2769:cups-browsed:0b1110011010000000111100101100010010111011110111110111100) s
5 335 M
(1111010110100100000110011101010011011101111001010100010011111010011000101101000100111011100) s
5 324 M
(1100000000100]) s
5 313 M
(encoded string [5673:bash:0b100000010101001101011100011111101110001010000110100001011110101) s
5 302 M
(1000001101011010010000110001011100001101000101110100010011010000011011011101010111101010111) s
5 291 M
(00011]) s
5 280 M
(encoded string [49:acpi_thermal_pm:0b111001010000011111010000001000010111100000100001100100) s
5 269 M
(1111010111100101000000101110111100100010100101111101000011100000110101011001100011000110100) s
5 258 M
(011100001010100]) s
5 247 M
(encoded string [6220:kworker/u4:1:0b1011111100100011001100000010111100111111110001000101011) s
5 236 M
(1101001110011010101101010101110100001110010101100011011111111001010001100011110111101010110) s
5 225 M
(0111001100100]) s
5 214 M
(encoded string [5977:kworker/0:0:0b11010000100100010111011001000010110110110111011001111001) s
5 203 M
(0111000011111101110110010100101101010110000000011100110101101101100000110111000011111011010) s
5 192 M
(1000110010010]) s
5 181 M
(encoded string [5905:kworker/u4:0:0b1011011110010010111000111001101101001000001010100100100) s
5 170 M
(1010011100001111001110011011101001011010000010111010100000100100011010101001100010001111111) s
5 159 M
(00100111100010]) s
5 148 M
(encoded string [2433:kworker/u5:0:0b1100100101100010100101000010001010111010010111110110011) s
5 137 M
(1101111000011101101101011100100101010011010111110110001011100000010010001101001000101110111) s
5 126 M
(10000110000101]) s
5 115 M
(encoded string [2439:kworker/u5:2:0b1110100001111010101011110110101110101101001100000111000) s
5 104 M
(1111000110100001100111110110010111010001001101011000101011000101000100100010111101101110010) s
5 93 M
(1101000001111]) s
5 82 M
(encoded string [5:kworker/0:0H:0b1000110000100110011111100011111100100001000110011011001000) s
5 71 M
(1110010111001001101011011101011011001010011100111011101011111111111101110111000010010001000) s
5 60 M
(10010011000]) s
5 49 M
(encoded string [9:migration/0:0b11001101000011110110001000011100110000101111100101010010111) s
5 38 M
(1001010110110100010110110011100110011011101011011110111110010011011110100100001010010000011) s
5 27 M
(001001000]) s
5 16 M
(encoded string [6300:kworker/0:1:0b11000110011011100000000001000001000111001101100010111011) s
5 5 M
(1001101001110100000101111100101101000000000110101010100010110010110100001111101011001100011) s
_R
S
%%Page: (312) 312
%%BeginPageSetup
_S
18 36 translate
/pagenum 312 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (312) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(010001110100]) s
5 731 M
(encoded string [5065:upstart-dbus-bridge:0b101000011111100000000010011101011010011000110010) s
5 720 M
(1110101010111001100011000111111110101110100001010011110011100001101001111101101100010101100) s
5 709 M
(100100101100011101000]) s
5 698 M
(===========) s
5 687 M
( ) s
5 676 M
(Reference:) s
5 665 M
(----------) s
5 654 M
(503.1 Randomized Algorithms - [Rajeev Motwani, Prabhakar Raghavan] - Pages 168 and 214 - 7.) s
5 643 M
(4 Verifying Equality of Strings and 8.4 Hash Tables for string fingerprinting) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(-----------------------------------------------) s
5 599 M
(504. \(FEATURE-DONE\) Streaming Algorithms - Encoded Strings Data Source - 26 January 2018) s
5 588 M
(\(For MD5 hash and other Encoded Strings\)) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(-----------------------------------------------) s
5 555 M
(1. python-src/Streaming_AbstractGenerator.py iterator has been updated for new data storage) s
5 544 M
( "AsFer_Encoded_Strings" and data source "NeuronRain") s
5 533 M
(for streaming encoded strings created by NeuronRain AsFer) s
5 522 M
(2. Streaming algorithm implementations have been updated to stream data from this new datas) s
5 511 M
(ource and logs have been committed to testlogs/) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(-----------------------------------------------) s
5 467 M
(505. \(FEATURE-DONE\) Scheduler Analytics - Sequence Mining - 29 January 2018) s
5 456 M
(\(Only in NeuronRain Enterprise - GitHub\)) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(-----------------------------------------------) s
5 423 M
(1. Sequence Mining has been executed on Scheduler Analytics process statistics \(few process) s
5 412 M
(es and max length set to 5\).) s
5 401 M
(2. Candidate initial item set has been changed to alphanumeric) s
5 390 M
(3. Declared boolean flag for choosing between MD5 hash encoding of process dicts or plain s) s
5 379 M
(tring representation of process dict) s
5 368 M
(4. updated software_analytics/asfer.enterprise.encstr.scheduleranalytics) s
5 357 M
(5. Sequence Mined Scheduler Analytics has been committed to testlogs/SequenceMining.log.Sch) s
5 346 M
(edulerAnalytics.29January2018) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(------------------------------------------------------) s
5 302 M
(506. \(THEORY\) Computational Geometric Factorization - Feasibility of Sequential Optimizatio) s
5 291 M
(n - related to 486 - 6 February 2018, 1 September 2018) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(------------------------------------------------------) s
5 258 M
(Doing away with Parallel RAMs in Computational Geometric Factorization by breaking the hype) s
5 247 M
(rbolic arc bow into two sets of tilesegments ) s
5 236 M
(and searching their concatenations which are implicitly sorted ascending, has problems beca) s
5 225 M
(use concatenation of multiple tile segments may not be sublinear. Concatenating tile segmen) s
5 214 M
(ts can be likened to concatenation of multiple strings. Concatenation of two strings can be) s
5 203 M
( done) s
5 192 M
(in O\(logN\) time by using Rope Strings which are tree representations of strings \(logarithmi) s
5 181 M
(c in length of strings and not in number of) s
5 170 M
(strings\). But concatenation of multiple strings/tiles logarithmic time in number of strings) s
5 159 M
( is still open.) s
5 137 M
(Following sequential optimization tries to find feasibility of doing Sequential Factorizati) s
5 126 M
(on without PRAMs and concatenation of tile segments:) s
5 104 M
(number_to_factorize=N) s
5 93 M
(factor_candidate=N/2) s
5 71 M
(---------------------------) s
5 60 M
(Loop for subsegment1 tree:) s
5 49 M
(---------------------------) s
5 38 M
(while\(factor is not found\)) s
5 27 M
({) s
5 16 M
(        1. Find the tile segment/interval containing factor candidate.) s
5 5 M
(        [2. Split the candidate tile segment to two subsegments - subsegment1 contains poin) s
_R
S
%%Page: (313) 313
%%BeginPageSetup
_S
18 36 translate
/pagenum 313 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (313) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ts which are less than previous segment's end point,subsegment2 contains points which are g) s
5 731 M
(reater than previous segment's end point.]) s
5 720 M
(        3. Binary Search each node in subsegment1 tree for factor points \(p,q\) \(N=pq\) - The) s
5 709 M
(re are 3 possibilities:) s
5 698 M
(        3.1 All points in this subsegment1 tree node are less than N => Binary Search has t) s
5 687 M
(o be done on right subsegment1 subtree recursively, factor_candidate is updated) s
5 676 M
(        3.2 All points in this subsegment1 tree node are greater than N => Search has to be) s
5 665 M
( done on left subsegment1 subtree recursively, factor_candidate is updated) s
5 654 M
(        3.3 N is present in this subsegment1 tree node and factor point N=pq is found) s
5 643 M
(}) s
5 621 M
(---------------------------) s
5 610 M
(Loop for subsegment2 tree:) s
5 599 M
(---------------------------) s
5 588 M
(while\(factor is not found\)) s
5 577 M
({) s
5 566 M
(        4. Find the tile segment/interval containing factor candidate.) s
5 555 M
(        [5. Split the candidate tile segment to two subsegments - subsegment1 contains poin) s
5 544 M
(ts which are less than previous segment's end point,subsegment2 contains points which are g) s
5 533 M
(reater than previous segment's end point.]) s
5 522 M
(        6. Binary Search each node in subsegment2 tree for factor points \(p,q\) \(N=pq\) - The) s
5 511 M
(re are 3 possibilities:) s
5 500 M
(        6.1 All points in this subsegment2 tree node are less than N => Binary Search has t) s
5 489 M
(o be done on right subsegment2 subtree recursively) s
5 478 M
(        6.2 All points in this subsegment2 tree node are greater than N => Search has to be) s
5 467 M
( done on left subsegment2 subtree recursively) s
5 456 M
(        6.3 N is present in this subsegment2 tree node and factor point N=pq is found) s
5 445 M
(}) s
5 423 M
(7.Above algorithm is Depth-2 Two Level Binary Search:) s
5 412 M
(7.1\) First binary search finds the subsegment node in subsegment trees in O\(logN\)) s
5 401 M
(7.2\) Second binary search searches within subsegment node in O\(logN\)) s
5 390 M
(and thus requires O\(logN*logN\) sequential time.) s
5 368 M
(8. Sets of subsegment1\(s\) and subsegment2\(s\) constitute 2 binary search trees of segments, ) s
5 357 M
(but these two search trees are not physically created. Binary search of tile containing fac) s
5 346 M
(tor candidate dynamically creates treelike traversal.) s
5 324 M
(9. Finding tile segment containing a factor candidate point is non-trivial planar point loc) s
5 313 M
(ation problem in general. But Following algorithm finds the interval containing the point i) s
5 302 M
(n O\(1\) time specific to hyperbolic pixelated tiling:) s
5 291 M
(Sum of lengths of k consecutive hyperbolic pixelated tiles = N/\(1*2\) + N/\(2*3\) + N/\(3*4\) + ) s
5 280 M
(... + N/\(k*\(k+1\)\)) s
5 269 M
(        = N\(1/1 - 1/2 + 1/2 - 1/3 + 1/3 - 1/4 + ... + 1/k - 1/\(k+1\)\)) s
5 258 M
(        = N\(1 - 1/\(k+1\)\)) s
5 247 M
(        = Nk/\(k+1\)) s
5 236 M
(Tile containing point x:) s
5 225 M
(        Nk/\(k+1\) < x < N\(k+1\)/\(k+2\)) s
5 214 M
(        k < x/\(N-x\)) s
5 203 M
(integer round-off of k is the index of tile interval containing x.) s
5 181 M
(10. Previous sequential optimization of O\(\(logN\)^2\) though removes PRAMs, proves only that ) s
5 170 M
(Factorization is in P. Computational geometric factorization by PRAMs is still a better res) s
5 159 M
(ult because it implies Factorization is in NC from PRAM-NC equivalence despite requirement ) s
5 148 M
(of high number of parallel processors.) s
5 126 M
(11. For each segment k in loops previously, 2 subsegments of it have following interval end) s
5 115 M
(points - \(xleft,yleft,xright,yright\):) s
5 104 M
(        subsegment1:  \(N/\(k+2\),\(k+1\),N/\(k+2\)+delta,\(k+1\)\)) s
5 93 M
(        subsegment2:  \(N/\(k+2\)+delta,\(k+1\),N/\(k+1\),\(k+1\)\)) s
5 82 M
(and delta=N/\(\(k+1\)\(k+2\)\)) s
5 60 M
(12. CAVEAT: Two factor points \(x1,y1\) and \(x2,y2\) can equal by x1*y1=x2*y2 but these two po) s
5 49 M
(ints are located in different subsegments of different tiles because points within subsegme) s
5 38 M
(nt1 or subsegment2 of a tile segment have same y-coordinates. Previous inequality applies o) s
5 27 M
(nly to a binary search segment tree comprised of subsegment2\(s\) of all segments by implicit) s
5 16 M
( geometric spatial sortedness i.e end of subsegment2 in previous segment is less than start) s
5 5 M
( of subsegment2 in next segment. Set of subsegment1\(s\) need not be implicitly sorted and th) s
_R
S
%%Page: (314) 314
%%BeginPageSetup
_S
18 36 translate
/pagenum 314 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (314) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(us can not be searched by a segment tree constructed sequentially. This renders previous op) s
5 731 M
(timization feasible only to a subset of integers. Algorithms for Parallel RAM construction ) s
5 720 M
(of segment tree described previously are therefore necessary to find factor points in polyl) s
5 709 M
(ogarithmic time and thus in NC and all these algorithms require parallel k-mergesort. This ) s
5 698 M
(sequential algorithm has been mentioned only as an optimization.) s
5 676 M
(--------------------------------------) s
5 665 M
(13. Tile Summation and Wavelet trees:) s
5 654 M
(--------------------------------------) s
5 643 M
(Sum of lengths of first n tile segments of pixelated hyperbolic curve derived previously:) s
5 632 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] = Nn/\(n+1\)) s
5 621 M
(which can be equated to sum of distances between first m prime factors by Hardy-Ramanujan T) s
5 610 M
(heorem:) s
5 599 M
(        Nn/\(n+1\) = mN/kloglogN) s
5 577 M
(=> n = m/\(kloglogN - m\) = number of tiles till m-th prime factor. Sum of lengths \(N/x\(x+1\) ) s
5 566 M
(each\) of these n tiles \(=O\(loglogN\)\) till m-th prime factor finds approximate m-th prime fa) s
5 555 M
(ctor. Constructing wavelet tree for concatenated unsorted string of tile segments of epsilo) s
5 544 M
(n radius around approximate factors and doing select\(N\) on the wavelet string finds atleast) s
5 533 M
( one factor location. Geometric intuition: Tile summations are hyperbolic pixel polygons an) s
5 522 M
(d if vertices of this polygon - endpoints of concatenation - coincide with factor points on) s
5 511 M
( x-y axis grid, factors are found. Accuracy depends on precision of tile summation and this) s
5 500 M
( is only an optimization. If epsilon radius centered around each approximate prime factor i) s
5 489 M
(s e, total length of concatenated unsorted tile for all prime factors is: O\(2*e*loglogN\). S) s
5 478 M
(equential Construction and select\(\) for wavelet tree for this string is:) s
5 467 M
(        O\(2eloglogN * log\(2eloglogN\)\) + log\(2eloglogN\) = O\(e*loglogN * log\(e*loglogN\)\) + lo) s
5 456 M
(g\(e*loglogN\)) s
5 445 M
(For sequential polylogarithmic factorization, e has to be upperbounded by O\(\(logN\)^l\).) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(--------------------------------------------------) s
5 401 M
(507. \(THEORY\) Tournament Graph Election, Coloring, Intrinsic Merit, Partitions and Bell Num) s
5 390 M
(ber - 8 February 2018) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(--------------------------------------------------) s
5 357 M
(Tournament Graph of n vertices has n\(n-1\)/2 edges \(complete\). Each vertex of the tournament) s
5 346 M
( graph is uniquely colored by total of n colors.) s
5 335 M
(Each edge \(v1,v2\) is the contest between vertices v1 and v2. Each edge of the tournament gr) s
5 324 M
(aph is progressively colored by the color of winning vertex of the edge endpoints. Thus at ) s
5 313 M
(the end of the tournament, n\(n-1\)/2 edges are partitioned into n monochromatic sets of edge) s
5 302 M
(s. Number of) s
5 291 M
(all possible partitions of a set is the Bell number. Vertex corresponding to Color of the b) s
5 280 M
(iggest part in this edge set partition is the final winner. Any partition which has unequal) s
5 269 M
( parts has biggest part. Thus number of partitions of edges having atleast one biggest part) s
5 258 M
( = BellNumber - 1 because there is exactly one partition of n\(n-1\)/2 edges into n sets of e) s
5 247 M
(qual size \(n-1\)/2. Tournament Graph Election is an alternative social choice function and d) s
5 236 M
(oes not involve Majority voting. Win in contest between two vertices of an edge can be defi) s
5 225 M
(ned as the vertex having greater Intrinsic Merit \(In social networks this is the standard I) s
5 214 M
(ntrinsic Fitness of a vertex\). This formalizes the intrinsic merit usecases mentioned in Ne) s
5 203 M
(uronRain Documentation and FAQ in http://neuronrain-documentation.readthedocs.io/en/latest/) s
5 192 M
( . One additional usecase where majority voting falters and Intrinsic Merit is a necessity ) s
5 181 M
(is the indispensability of experimental evidences in exact sciences. For example, in archae) s
5 170 M
(ology/history/mythology, "an artefact existed few millenia ago" is quite presumptive hypoth) s
5 159 M
(esis which cannot be proved by mere majority voting in contemporary era. In tournaments inv) s
5 148 M
(olving knock-out\(s\), each elimination removes \(n-1\) edges and n/2 rounds decides winner.) s
5 126 M
(References:) s
5 115 M
(-----------) s
5 104 M
(507.1 Tournament Trees - Minimum Comparison Selection - [Don Knuth] - The Art of Computer P) s
5 93 M
(rogramming - Volume 3) s
5 82 M
(- Page 207-209 - Section 5.3.3 - Kislitsyn Theorem - In a knockout tournament tree of n pla) s
5 71 M
(yers, minimum number o) s
5 60 M
(f comparisons required to find second best player is n - 2 + ceil\(logn\). For first best pla) s
5 49 M
(yer minimum number of comparisons required is n - 1.   ) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(-----------------------------) s
5 5 M
(508. \(FEATURE-DONE\) Streaming Analytics Abstract Generator Update - Socket Streaming Dataso) s
_R
S
%%Page: (315) 315
%%BeginPageSetup
_S
18 36 translate
/pagenum 315 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (315) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(urce Added - 8 February 2018) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-----------------------------) s
5 709 M
(1.Streaming Abstract Generator facade/generator pattern implementation has been updated for) s
5 698 M
( a new "Socket Streaming" data storage/data source.) s
5 687 M
(2.Constructor Datasource arg is the remote host and port is hardcoded to 64001 \(one more th) s
5 676 M
(an kernel_analytics driver streaming port\)) s
5 665 M
(3.Python socket has been imported and socket client code has been added to __iter__\(\)) s
5 654 M
(4.As example, Hyper LogLog Counter Streaming implementation has been updated to read stream) s
5 643 M
(ing data from remote streaming webservice host) s
5 632 M
(5.Logs for this have been committed to testlogs/) s
5 621 M
(6.Example webserver commandline:) s
5 610 M
(        nc -l 64001) s
5 599 M
(        ><data>) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(---------------------------------------------) s
5 555 M
(509. \(FEATURE-DONE\) Scheduler Analytics - Socket Streaming Server - Decorator pattern imple) s
5 544 M
(mentation - 9 February 2018) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(---------------------------------------------) s
5 511 M
(1. New Socket Streaming Server for Scheduler Analytics has been implemented in python-src/s) s
5 500 M
(oftware_analytics/SchedulerAnalytics_WebServer.py) s
5 489 M
(2. This invokes get_stream_data\(\) function in python-src/software_analytics/DeepLearning_Sc) s
5 478 M
(hedulerAnalytics.py) s
5 467 M
(3. get_stream_data\(\) function is decorated by a Decorator class implemented in a new file p) s
5 456 M
(ython-src/webserver_rest_ui/NeuronRain_Generic_WebServer.py) s
5 445 M
(4. SocketWebServerDecorator implemented in python-src/webserver_rest_ui/NeuronRain_Generic_) s
5 434 M
(WebServer.py is generic and overrides) s
5 423 M
( __init__\(\) and __call__\(\) functions. __call__\(\) invokes the decoratee function get_stream_) s
5 412 M
(data\(\) specific to Scheduler Analytics.) s
5 401 M
(5. SocketWebServerDecorator can decorate any other streaming datasource, not just scheduler) s
5 390 M
( analytics - decoratee function has to be implemented) s
5 379 M
( accordingly.) s
5 368 M
(6. Logs for Socket Streaming Server have been committed to python-src/software_analytics/te) s
5 357 M
(stlogs/SchedulerAnalytics_WebServer.log.9February2018 and example Socket Streaming Client H) s
5 346 M
(yperLogLogCounter logs are at python-src/testlogs/Streaming_HyperLogLogCounter.log.9Februar) s
5 335 M
(y2018) s
5 324 M
(7. Global configs for socket streaming server host and port \(64001\) have been set in a new ) s
5 313 M
(config file python-src/software_analytics/SchedulerAnalytics_Config.py) s
5 302 M
(8. Known issue: There seems to be a random iterator disconnect because of psutil process_it) s
5 291 M
(er\(\) process statistics streaming delay) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(----------------------------------------------) s
5 247 M
(510. \(FEATURE-DONE\) Scheduler Analytics Socket Streaming Decorator - Psutil iterator freque) s
5 236 M
(nt disconnects resolution - 11 February 2018) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(----------------------------------------------) s
5 203 M
(1. SocketWebServerDecorator frequently and periodically throws "NoneType object not callabl) s
5 192 M
(e" exception.) s
5 181 M
(2. This exception happens after every 215 or 217 processes \(not sure what this magic number) s
5 170 M
( is\)) s
5 159 M
(3. Because of this try/except error handling has been added throughout decorator code) s
5 148 M
(4. Socket listen queue size has been increased to 100) s
5 137 M
(5. datasourcefunc\(\) is re-called once an exception is thrown in a loop - a palliative cure) s
5 126 M
(6. After this 215 barrier is breached. Logs for 558 processes streamed by Socket Server Dec) s
5 115 M
(orator and received by Streaming Abstract) s
5 104 M
(Generator client have been committed to python-src/software_analytics/testlogs/SchedulerAna) s
5 93 M
(lytics_WebServer.log.11February2018 and) s
5 82 M
(python-src/testlogs/Streaming_HyperLogLogCounter.log.11February2018) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(-----------------------------------------------) s
5 38 M
(511. \(FEATURE-DONE\) Approximate 3SAT Solver Randomized Rounding Update - NumPy random choic) s
5 27 M
(e\(\) replacing permutation\(\) - 27 February 2018) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(-----------------------------------------------) s
_R
S
%%Page: (316) 316
%%BeginPageSetup
_S
18 36 translate
/pagenum 316 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (316) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(1. CNFSATSolver.py - function creating random 3SAT instances has been updated to invoke Num) s
5 731 M
(Py random choice\(\) instead of) s
5 720 M
(permutation\(\) without replacement - equivalent to nP3 per clause for n variables.) s
5 709 M
(2. Logs for 16 variables - 16 clauses and 18 variables - 18 clauses have been committed to ) s
5 698 M
(testlogs/CNFSATSolver.16variables16clauses.log2.27February2018) s
5 687 M
(and testlogs/CNFSATSolver.18variables18clauses.log.27February2018) s
5 676 M
(3. Numpy random choice\(\) is based on Uniform distribution.) s
5 665 M
(4. It is remarkable to note that observed probability average and Random Matrix probability) s
5 654 M
( 1/sqrt\(m*n\)) s
5 643 M
( are strikingly equal - a confirmation of the least squares randomized rounding and relaxat) s
5 632 M
(ion SAT solver's accuracy) s
5 621 M
(5. Logs for 16*16 and 18*18 have few hundreds and thousand plus random 3SAT instances which) s
5 610 M
( are solved 100%) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(---------------) s
5 566 M
(512. \(FEATURE-DONE\) ConceptNet5 Update - REST endpoints changed - 27 February 2018) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(---------------) s
5 533 M
(1. ConceptNet5 rest_client.py has been imported which already wraps REST methods and endpoi) s
5 522 M
(nts) s
5 511 M
(2. REST endpoints for search,lookup and query have been updated for ConceptNet 5.5 which we) s
5 500 M
(re 5.4 earlier) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(--------------------------------------------------) s
5 456 M
(513. \(FEATURE-DONE and THEORY\) Approximate SAT Solver and ConceptNet REST client updates - ) s
5 445 M
(21 variables,21 clauses LSMR and Common Ancestor Distance in ConceptNet5 - 28 February 2018) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(--------------------------------------------------) s
5 412 M
(1.Least Square SAT solver has been updated to print more readable debug messages and highli) s
5 401 M
(ght MAXSAT approximation ratio) s
5 390 M
( average for SATs solved thus far) s
5 379 M
(2.Number of variables and clauses is set to 21,21 and MAXSAT ratio is 98% for 34 random 3SA) s
5 368 M
(Ts) s
5 357 M
(3.Logs for 21,21 has been committed to testlogs/CNFSATSolver.21variables21clauses.log.28Feb) s
5 346 M
(ruary2018 which shows the observed literal) s
5 335 M
(probabilities and random matrix 1/sqrt\(m*n\) literal probability agreeing well.) s
5 324 M
(4.This is because of uniform unbiased \(mostly\) choice\(\) when number of clauses = number of ) s
5 313 M
(variables causing 1/sqrt\(m*n\) = 1/n) s
5 302 M
(5.For unequal clauses and variables numbers, an epsilon biased PRG implementation in linux ) s
5 291 M
(kernel is necessary \(random.c might have to be) s
5 280 M
( rewritten\)) s
5 269 M
(---------------------) s
5 258 M
(6.ConceptNet5 client has been updated to include a related\(\) function wrapper which invokes) s
5 247 M
( /related REST endpoint for finding similar concepts.) s
5 236 M
(7.ConceptNet5 finds related concepts by word embeddings implementation of word2vec which ma) s
5 225 M
(ps each word to a vector and similar words/concepts) s
5 214 M
(are clustered together in this vector space. More precisely, word distances are represented) s
5 203 M
( as a word-word 2 dimensional matrix/graph) s
5 192 M
(and sum of path edge weights between word pair is the distance.) s
5 181 M
(8.For finding distance between two concepts a common ancestor algorithm has been implemente) s
5 170 M
(d in new conceptnet_distance\(\) function which recursively invokes related\(\) to deep learn c) s
5 159 M
(oncepts and grows paths between the two concept endpoints. This recursion stops when paths ) s
5 148 M
(grown from both ends meet i.e when there is a common ancestor \(inspired by Savitch and USTC) s
5 137 M
(ONN in logspace theorems\).) s
5 126 M
(9.Common ancestors are printed in end and distance between the concepts is also printed) s
5 115 M
(10.Some example conceptnet_distance\(\) invocations have been captured in ConceptNet/testlogs) s
5 104 M
(/ConceptNet5Client.log.28February2018) s
5 93 M
( ) s
5 82 M
(References:) s
5 71 M
(-----------) s
5 60 M
(513.1 ConceptNet 5.5: An Open Multilingual Graph of General Knowledge - [Robert Speer,Joshu) s
5 49 M
(a Chin,Catherine Havasi-Luminoso Technologies] - https://arxiv.org/pdf/1612.03975.pdf) s
5 38 M
(513.2 ConceptNet blog - https://blog.conceptnet.io/) s
5 27 M
(513.3 Microsoft Concept Graph - Probase - https://concept.research.microsoft.com/Home/Intro) s
5 16 M
(duction - similar to ConceptNet) s
_R
S
%%Page: (317) 317
%%BeginPageSetup
_S
18 36 translate
/pagenum 317 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (317) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(-----------------------------------------------) s
5 720 M
(514. \(THEORY\) ConceptNet, Graph Tensor Neuron Network Intrinsic Merit, Word2Vec Word Embedd) s
5 709 M
(ings - 2 March 2018 - related to 412, 513) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(-----------------------------------------------) s
5 676 M
(ConceptNet5 /related REST endpoint retrieves concepts similar to a concept and ranks them b) s
5 665 M
(y word2vec word embedding similarity score. Recursiv) s
5 654 M
(e Lambda Function Growth algorithm mentioned previously, grows lambda functions for random ) s
5 643 M
(walks in a text definition graph created by Recursiv) s
5 632 M
(e Gloss Overlap and word-word similarity/relevance is formalized by Neural Tensor Network. ) s
5 621 M
(ConceptNet /related word2vec word embedding word-word similarity scores are perfect fit for) s
5 610 M
( Neuron Tensor Network entity relation potentials. Per random walk lambda function composit) s
5 599 M
(ion tree composes the neuron tensor potentials of all relations in the random walk. Composi) s
5 588 M
(tion trees are ranked by these composed potentials and Lambda composition tree of maximum p) s
5 577 M
(otential best approximates the meaning of the Natural Language Text. This implies ConceptNe) s
5 566 M
(t itself is one huge Graph Tensor Neuron Network Monolith. ) s
5 544 M
(Rationale for creating random walks in text definition graph is: Process of Human Text Comp) s
5 533 M
(rehension is simulated by connecting concepts in text in various possible random walks of f) s
5 522 M
(inite lengths, creating a tree of their meaning as lambda function composition and choosing) s
5 511 M
( the most rewarding random walk ranked by composed potentials. Most rewarding random walk m) s
5 500 M
(ust contain the word vertices of high core numbers \(or centralities/classes of the text\) be) s
5 489 M
(cause most number of paths in the graph go through these hub vertices \(Section 5.16 in http) s
5 478 M
(s://tac.nist.gov/publications/2010/participant.papers/CMI_IIT.proceedings.pdf proves this n) s
5 467 M
(otion for Recursive Gloss Overlap graph in terms of WordNet relations\). Cycles in the defin) s
5 456 M
(ition graph have also been experimentally found to approximate the text well. Random walks/) s
5 445 M
(Cycles in the definition graph have close resemblance to Word-Chain Theory in Psycholinguis) s
5 434 M
(tics which postulates Brain stores the information as chain of words. Word-Chain Theory was) s
5 423 M
( dismissed by the Deep Structure theory of Chomsky. Lambda Function Composition of Random W) s
5 412 M
(alks/Cycles combines Word-Chain and Deep Tree Structure into one - converts list of words i) s
5 401 M
(nto a meaning tree. ) s
5 379 M
(References:) s
5 368 M
(----------) s
5 357 M
(514.1 Neural Tensor Network - [Socher-Chen-Manning-Ng] - https://nlp.stanford.edu/pubs/Soch) s
5 346 M
(erChenManningNg_NIPS2013.pdf - Section 3.1 - "...The goal of our approach is to be able to ) s
5 335 M
(state whether two entities \(e1, e2\) are in a certain relationship R. For instance, whether ) s
5 324 M
(the relationship \(e1, R, e2\) = \(Bengal tiger, has part, tail\) is true and with what certain) s
5 313 M
(ty. ... The Neural Tensor Network \(NTN\) replaces a standard linear neural network layer wit) s
5 302 M
(h a bilinear tensor layer that directly relates the two entity vectors across multiple dime) s
5 291 M
(nsions. ...") s
5 280 M
(514.2 The Language Instinct - [Steven Pinker] - Chapter 4 - How Language Works - Word Chain) s
5 269 M
(s and Chomsky) s
5 258 M
(514.3 Chomsky-Norvig Debate on Algorithmic Versus Statistical Learning - http://daselab.cs.) s
5 247 M
(wright.edu/nesy/NeSy13/norvig.pdf - 98% learning models are probabilistic/statistical while) s
5 236 M
( 2% are algorithmic. Chomsky's viewpoints:) s
5 225 M
(        <quote>) s
5 214 M
(        - Statistical language models have had engineering success, but that is irrelevant ) s
5 203 M
(to science.) s
5 192 M
(        - Accurately modeling linguistic facts is just butterfly collecting; what matters i) s
5 181 M
(n science \(and specifically linguistics\) is the underlying principles.) s
5 170 M
(        - Statistical models are incomprehensible; they provide no insight.) s
5 159 M
(        - Statistical models may provide an accurate simulation of some phenomena, but the ) s
5 148 M
(simulation is done completely the wrong way; people don't decide what the third word of a s) s
5 137 M
(entence should be by consulting a probability table keyed on the previous two words, rather) s
5 126 M
( they map from an internal semantic form to a syntactic tree-structure, which is then linea) s
5 115 M
(rized into words. This is done without any probability or statistics.) s
5 104 M
(        - Statistical models have been proven incapable of learning language; therefore lan) s
5 93 M
(guage must be innate, so why are these statistical modelers wasting their time on the wrong) s
5 82 M
( enterprise?) s
5 71 M
(        <unquote>) s
5 60 M
(Recursive Gloss Overlap and Recursive Lambda Function Growth are Algorithmic Language Learn) s
5 49 M
(ing Models.) s
5 38 M
(514.4 Gold's Theorem - www.lps.uci.edu/~johnsonk/Publications/Johnson.GoldsTheorem.pdf and ) s
5 27 M
(limit on learnability  - language L has infinite elasticity if there exist subsets T1 in T2) s
5 16 M
( in ... ad infinitum such that Ti in Li and T\(i+1\) not in Li for set of languages Li and Li) s
5 5 M
(m Ti = L . Languages of infinite elasticity are not learnable.) s
_R
S
%%Page: (318) 318
%%BeginPageSetup
_S
18 36 translate
/pagenum 318 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (318) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(514.5 Power Law Distribution, Scale-Invariance, Small Word Phenomenon in Roget's Thesaurus ) s
5 731 M
(and WordNet -Section 4.3 -  http://web.mit.edu/cocosci/Papers/03nSteyvers.pdf - Roget's The) s
5 720 M
(saurus and WordNet follow Pareto's Power Law Distribution i.e P\(k\) = k^\(-e\) where P\(k\) is t) s
5 709 M
(he probability of vertices having k incoming links and e is the scale exponent. Power Law i) s
5 698 M
(mplies large number of nodes have small incoming links and small number of nodes have high ) s
5 687 M
(incoming links. Both Roget's Thesaurus and WordNet have scale exponent ~3, high sparsity, v) s
5 676 M
(ery short average distances among words\(5.6 and 10.56\), single connected component containi) s
5 665 M
(ng almost all words, high local clustering.) s
5 654 M
(514.6 Pareto's 80/20 rule, Scale-Invariance in phase-transition - Chapter 6: Sixth Link - L) s
5 643 M
(inked - [Albert Laszlo Barabazi]) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(------------) s
5 599 M
(515. \(THEORY and FEATURE-DONE\) Recursive Lambda Function Growth - ConceptNet5 support, Per ) s
5 588 M
(random walk ) s
5 577 M
(Lambda Function Composition Tree Graph Tensor Neuron Network Intrinsic Merit - 3 March 2018) s
5 566 M
( - related to 514) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(------------) s
5 533 M
(Recursive Lambda Function Growth implementation has been updated to print per random walk l) s
5 522 M
(ambda function) s
5 511 M
(composition tree and its Graph Tensor Neuron Network Intrinsic Merit. Similarity has been m) s
5 500 M
(ade configurable by a flag to choose between 2 Antology Nets - WordNet and ConceptNet. Logs) s
5 489 M
( for this have been committed to testlogs/RecursiveLambdaFunctionnGrowth.log.GraphTensorNeu) s
5 478 M
(ronNetwork.3March2018. Logs show a striking similarity between Maximum Intrinsic Merit Rand) s
5 467 M
(om Walk Composition and Centralities/Classes of the definition graph \(excerpts below\):) s
5 456 M
(...) s
5 445 M
(grow_lambda_function3\(\): Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Meri) s
5 434 M
(t : \(u'\(present\(etc,\(infrastructure\(country,\(urban\(area,\(Mumbai\(city,largest\)\)\)\)\)\)\)\)', 3.79) s
5 423 M
(0350877192983\)) s
5 412 M
(...) s
5 401 M
(===========================================================================================) s
5 390 M
(==================) s
5 379 M
(Unsupervised Classification based on top percentile Core numbers of the definition graph\(su) s
5 368 M
(bgraph of WordNet\)) s
5 357 M
(===========================================================================================) s
5 346 M
(==================) s
5 335 M
(This document belongs to class: Mumbai ,core number= 12) s
5 324 M
(This document belongs to class: infrastructure ,core number= 9) s
5 313 M
(...) s
5 302 M
(which is an evidence to the fact intrinsic merit peaks for random walks through high core n) s
5 291 M
(umbered hub word vertices. Another aspect of ConceptNet's relevance to Graph Tensor Neuron ) s
5 280 M
(Network is the strong resemblance of word2vec word embeddings to Connectomes in Computation) s
5 269 M
(al Neuroscience \(mentioned in references\). Connectomes are the wiring diagrams for neurons ) s
5 258 M
(in brain. Word2Vec clusters similar words of a text in vector space forming a clique. These) s
5 247 M
( word cluster cliques are wired together into a text graph. Thus Graph representation of Te) s
5 236 M
(xt and Neuron Cliques and Connectome Information Propagation Among Cliques of Neurons have ) s
5 225 M
(uncanny similarities. ) s
5 203 M
(References:) s
5 192 M
(-----------) s
5 181 M
(515.1 Cliques and Cavities in Human Brain - [Ann Sizemore, Chad Giusti, Ari Kahn, Richard F) s
5 170 M
(. Betzel, Danielle S. Bassett] - https://arxiv.org/abs/1608.03520 ) s
5 159 M
(515.2 Algebraic topology and Computational Neuroscience - https://www.technologyreview.com/) s
5 148 M
(s/602234/how-the-mathematics-of-algebraic-topology-is-revolutionizing-brain-science/) s
5 137 M
(515.3 Brain Graphs of Women are better expander graphs than men - http://journals.plos.org/) s
5 126 M
(plosone/article?id=10.1371/journal.pone.0130045 - Brain Graphs \(or\) Connectomes of Brain ha) s
5 115 M
(ve been analyzed in computational neuroscience as Graph Expanders. Better Expander implies ) s
5 104 M
(the Brain Graph or Graph of Neurons have better epsilon-Expansion trait i.e each vertex sub) s
5 93 M
(set S of brain graph has epsilon*|S| incident edges. - "...Expander graphs and the expander) s
5 82 M
(-property of graphs are one of the most interesting area of graph theory: they are closely ) s
5 71 M
(related to the convergence rate and the ergodicity of Markov chains, and have applications ) s
5 60 M
(in the design of communication- and sorting networks and methods for de-randomizing algorit) s
5 49 M
(hms [25]. A graph is an \311\\233-expander, if every\342\\200\\224not too small and not too large\342) s
5 38 M
(\\200\\224vertex-set S of the graph has at least \311\\233\342\\210\243S\342\\210\243 outgoing edges \(see [25] ) s
5 27 M
(for the exact definition\).  Random walks on good expander graphs converge very fast to the ) s
5 16 M
(limit distribution: this means that good expander graphs, in a certain sense, are \342\\200\\234) s
5 5 M
(intrinsically better\342\\200\\235 connected than bad expanders. It is known that large eigengap) s
_R
S
%%Page: (319) 319
%%BeginPageSetup
_S
18 36 translate
/pagenum 319 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (319) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( of the walk transition matrix of the graph implies good expansion property [25].  We have ) s
5 731 M
(found that women\342\\200\\231s connectomes have significantly larger eigengap, and, consequentl) s
5 720 M
(y, they are better expander graphs than the connectomes of men. For example, in the 83-node) s
5 709 M
( resolution, in the left hemisphere and in the unweighted graph, the average female connect) s
5 698 M
(ome\342\\200\\231s eigengap is 0.306 while in the case of men it is 0.272, with p = 0.00458..." ) s
5 687 M
(- High expansion implies least energy by [Barabasi-Bianconi] Bose-Einstein condensation and) s
5 676 M
( vertices are able to attract high number of links. In the context of random walks in Recur) s
5 665 M
(sive Lambda Function Growth previously, assuming the lambda function tree as logical connec) s
5 654 M
(tome - because role of neurons is simulated by the lambda functions - random walks on high ) s
5 643 M
(expanding, least energy definition graph should converge faster theoretically. ) s
5 632 M
(515.4 Mapping Neurone Synapses to Connectomes - https://neurophys.gu.se/digitalAssets/1553/) s
5 621 M
(1553052_richard_dybowski.pdf - Workflow for Segmentation of fMRI images, Identifying membra) s
5 610 M
(nes, Inferring Connectomes by Deep Learning.) s
5 599 M
(515.5 Measuring Intrinsic Fitness in WWW and Scientific Publications \(Bianconi-Barabasi Mod) s
5 588 M
(el\) - http://networksciencebook.com/6#bianconi-model - Sections 6.3 - Case studies of journ) s
5 577 M
(als \(Nature,PRL,PNAS,Science etc.,\) and Bose-Einstein Condensation in some networks - Secti) s
5 566 M
(on 6.4) s
5 555 M
(515.6 Analysis of Brain Graphs or Connectomes - https://arxiv.org/pdf/1105.4705.pdf - Netwo) s
5 544 M
(rk Motifs - "...Similarly, human structural connectivity between brain regions shows small-) s
5 533 M
(world properties with a small-worldness S of 10.6 \(Text S2, Hagmann et al., 2008\). For huma) s
5 522 M
(n functional connectivity between brain regions, the clustering coefficient is 53% \(22% in ) s
5 511 M
(random networks\) and the path length 2.5 \(2.3 in random networks\) \(Achard et al., 2006\)...") s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(----------------------------------------) s
5 467 M
(516. \(FEATURE-DONE\) SAT Solver - verbose print and iterations reduced - 4 March 2018) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(----------------------------------------) s
5 434 M
(Least Squares LSMR SAT solver implementation has been updated to print LSMR internal calcul) s
5 423 M
(ations. Maximum iterations, conlim, atol, btol parameters have been set to least values for) s
5 412 M
( reducing latency. But this reduces MAXSAT accuracy to ~94% which is still above 88% \(7/8 a) s
5 401 M
(pproximation\). SciPy Sparse dsolve.spsolve\(\) was tried for solving least squares by csc_mat) s
5 390 M
(rix and there were nan errors.Finally, LSMR looks to be the best of the lot. Logs for few r) s
5 379 M
(andom 3SATs of \(21 clauses, 21 variables\) have been committed to testlogs/CNFSATSolver.21va) s
5 368 M
(riables21clauses.log.4March2018. Observed average probability of choosing a literal again a) s
5 357 M
(grees quite well to 1/sqrt\(m*n\) Random Matrix theoretical probability as gleaned from logs.) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(---------------------------------------) s
5 313 M
(517. \(THEORY\) Majority+Voter Composition Hardness Amplification Lemma, Sensitivity Conjectu) s
5 302 M
(re - Updated Hardness Bound -) s
5 291 M
(related to 318,355 - 5 March 2018) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(---------------------------------------) s
5 258 M
(Hardness Amplification for Majority+Voter Composition has been described earlier by adaptin) s
5 247 M
(g XOR Lemma to Majority function as:) s
5 225 M
(     Hardness of Maj+voter composition       [c/sqrt\(n*delta\)] + [sum\(column2 error entries) s
5 214 M
(\)] - [sum\(column3 no error entries\)]) s
5 203 M
(    -----------------------------------  =  -----------------------------------------------) s
5 192 M
(-----------------------------------) s
5 181 M
(         Hardness of voter function                                             delta) s
5 159 M
(which is based on the sudivided BP* error scenarios matrix mentioned earlier and described ) s
5 148 M
(again below:) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(------) s
5 115 M
(        x                               |    f\(x\) = f\(x/e\)      |       f\(x\) != f\(x/e\) Nois) s
5 104 M
(e    |) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(------) s
5 71 M
(x in L, x/e in L                        |       No error        |       Error              ) s
5 60 M
(     |) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(------) s
5 27 M
(x in L, x/e not in L                    |       Error           |   No error if f\(x\)=1,f\(x/) s
5 16 M
(e\)=0 |) s
5 5 M
(                                        |                       |   else Error             ) s
_R
S
%%Page: (320) 320
%%BeginPageSetup
_S
18 36 translate
/pagenum 320 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (320) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(     |) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(------) s
5 709 M
(x not in L, x/e in L                    |       Error           |   No error if f\(x\)=0,f\(x/) s
5 698 M
(e\)=1 |) s
5 687 M
(                                        |                       |   else Error             ) s
5 676 M
(     |) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(------) s
5 643 M
(x not in L, x/e not in L                |       No error        |      Error               ) s
5 632 M
(     |) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(------) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-----) s
5 577 M
(       x                                |                       f\(x\)                       ) s
5 566 M
(    |) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-----) s
5 533 M
(Randomized Decision tree evaluation     |       No error       |       Error               ) s
5 522 M
(    |) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(-----) s
5 489 M
(This matrix picturises the various false positives and false negative errors possible in ma) s
5 478 M
(jority voting. Language L denotes voting pattern for candidate 0 to win \(and its complement) s
5 467 M
( is voting pattern for candidate 1\). Correlation x/e is the flip in voting pattern. Previou) s
5 456 M
(s matrix divides BP* errors into 2 dimensions based on 1\) whether the voting pattern is val) s
5 445 M
(id 2\) Noise sensitivity/stability . For example a voting pattern x for candidate 0's win is) s
5 434 M
( correlated/flipped to x/e so that candidate 1 wins and input to Majority function f\(\), but) s
5 423 M
( yet majority function treats them with equal outcome - in matrix this error scenario is: x) s
5 412 M
( in L, x/e not in L and f\(x\)=f\(x/e\). Other scenarios follow this convention. Based on this ) s
5 401 M
(error matrix, Hardness amplification ratio derived previously can be rewritten as:) s
5 379 M
( Hardness of Maj+voter composition       [sum\(column2 entries\)] + [sum\(column3 entries\)] - ) s
5 368 M
([sum\(all no error entries\)]) s
5 357 M
( -----------------------------------  =  --------------------------------------------------) s
5 346 M
(----------------------------) s
5 335 M
(     Hardness of voter function                                                 delta) s
5 313 M
(But Stability\(f\(x\)\) = Pr\(f\(x\)=f\(x/e\)\) - Pr\(f\(x\) != f\(x/e\)\) from definition of Noise stabili) s
5 302 M
(ty => Pr\(f\(x\)=f\(y\)\) = \(1+Stability\)/2.) s
5 291 M
(Sum\(column2 entries\) = Pr\(f\(x\)=f\(y\)\) = \(1+Stability\)/2.) s
5 280 M
(Sum\(column3 entries\) = NoiseSensitivity) s
5 269 M
(=> Hardness of Maj+Voter composition = \(1+Stability\)/2 + NoiseSensitivity - [sum\(all no err) s
5 258 M
(or entries\)]) s
5 247 M
(For majority function, Stability = \(2/pi\)*delta + O\(\(delta\)^1.5\) and NoiseSensitivity = O\(1) s
5 236 M
(/sqrt\(n*delta\)\)) s
5 225 M
(=> Hardness of Maj+Voter composition = 1 + \(2/pi\)*delta + O\(\(delta\)^1.5\) + O\(1/sqrt\(n*delta) s
5 214 M
(\)\) - [sum\(all no error entries\)]) s
5 203 M
(For large n, previous hardness tends to 1 + \(2/pi\)*delta + O\(\(delta\)^1.5\) - [sum\(all no err) s
5 192 M
(or entries\)]) s
5 170 M
(From definition of BP*, Probability of No error entries >= 2/3 => Sum\(all no error entries\)) s
5 159 M
( >= 2/3) s
5 148 M
(=> Hardness of Maj+Voter composition <= [pi + 2*delta + k*pi*\(delta\)^1.5]/2*pi - 2/3) s
5 137 M
(=> Hardness Amplification for Majority+Voter Composition <= [3*pi + 6*delta + 6k*pi*\(delta\)) s
5 126 M
(^1.5 - 2] /[6*pi*delta]) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(--------------------) s
5 93 M
(=> Hardness Amplification for Majority+Voter Composition <= 1/delta*\(1/2-1/3*pi\) + 1/pi + 6) s
5 82 M
(k*pi*\(delta\)^0.5) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(--------------------) s
5 49 M
(which is huge amplification for small hardness of voter boolean functions.) s
5 38 M
(=> weak voters are hardened by majority) s
5 27 M
(=> Computing majority by a circuit is increasingly hard as voters become weak \(intuitively ) s
5 16 M
(obvious because if voter circuits err, majority circuit errs, an indirect proof of Margulis) s
5 5 M
(-Russo Threshold and Condorcet Jury Theorem\).) s
_R
S
%%Page: (321) 321
%%BeginPageSetup
_S
18 36 translate
/pagenum 321 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (321) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(Sensitivity Conjecture polynomially relates sensitivity and block sensitivity of boolean fu) s
5 720 M
(nctions as: s\(f\) <= bs\(f\) <= poly\(s\(f\)\). So far only Noise Sensitivity has been applied as ) s
5 709 M
(sensitivity measure throughout for quantifying BP* error in Majority voting because it is a) s
5 698 M
( probability measure. But Sensitivity and Block Sensitivity are maximum number of bits and ) s
5 687 M
(disjoint blocks of bits sensitive to output. Noise sensitivity probability can be written a) s
5 676 M
(s:) s
5 665 M
(                                for_all_length_e\(Number of correlations x/e for which [f\(x\)) s
5 654 M
( != f\(x/e\)]\)) s
5 643 M
(        -----------------------------------------------------------------------------------) s
5 632 M
(--------------------------------------------) s
5 621 M
(        for_all_length_e\(Number of correlations x/e for which [f\(x\) == f\(x/e\)] + Number of ) s
5 610 M
(correlations x/e for which [f\(x\) != f\(x/e\)]\)) s
5 588 M
(Sensitivity and Block Sensitivity are maximum values of e\(which can be number of bits or nu) s
5 577 M
(mber of blocks\) in summations of numerator and denominator. Block Sensitivity in Majority+V) s
5 566 M
(oter composition implies voter boolean functions are interdependent \(correlated majority\) a) s
5 555 M
(nd swayed by peer opinions en masse \(Herding\). Hardness of voter boolean function and major) s
5 544 M
(ity are indirectly related to sensitivity and block sensitivity through summations in Noise) s
5 533 M
( Sensitivity probability.) s
5 511 M
(NOTE: Here hardness of voter boolean function is approximately assumed to equal NoiseSensit) s
5 500 M
(ivity of Voter Boolean Function and delta=epsilon. To be precise, delta = epsilon +/- error) s
5 489 M
( by BP* versus NoiseSensitivity/Stability Scenarios Matrix conventions. This +/- term is ig) s
5 478 M
(nored. Accounting for this +/- error:) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(---------------------------------------------) s
5 445 M
(=> Hardness Amplification for Majority+Voter Composition <= 1/\(delta + or - error\)*\(1/2-1/3) s
5 434 M
(*pi\) + 1/pi + 6k*pi*\(delta + or - error\)^0.5) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(---------------------------------------------) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(----------------------------------------------------) s
5 368 M
(518. \(THEORY and FEATURE-DONE\) Hardness of Majority Voting, SAT Solver Update - Compressed ) s
5 357 M
(Sensing and Moore-Penrose Pseudoinverse ) s
5 346 M
(- Conflicts - 6 March 2018 - related to 517) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(----------------------------------------------------) s
5 313 M
(Approximate CNF SAT Solver has been updated to invoke Moore-Penrose Pseudoinverse function ) s
5 302 M
(to compute approximate inverse of random 3SAT matrix and is multiplied as A^-1*b to find as) s
5 291 M
(signments x. Compressed Sensing implementation already uses pseudoinverse to decompress ima) s
5 280 M
(ge from sketch which is similar to this SAT solver. Performance is almost similar to LSMR a) s
5 269 M
(nd MAXSAT approximation ratio hovers around 97-98% for 306 random 3SAT instances of 21 vari) s
5 258 M
(ables and 21 clauses. Randomized rounding threshold has been increased to 0.5 from 0.1 \(a l) s
5 247 M
(iteral is set to 0 if it is < 0.5 and to 1 if >= 0.5\). Observed per literal probabilities a) s
5 236 M
(re equal to random matrix expected probability 1/sqrt\(m*n\). This reduces SAT solving to Com) s
5 225 M
(pressed Sensing. There are some conflicts between the findings of SAT Solver and Hardness o) s
5 214 M
(f Majority:) s
5 203 M
(        \(#\) Hardness of Majority+Voter Boolean Function Composition in both directions - bo) s
5 192 M
(ttom-up Voter-Majority and top-down MajorityInverse-VoterInverse have been described earlie) s
5 181 M
(r \(bottom-up hardness has been derived\) and top-down inversion is considerably harder \(#P-c) s
5 170 M
(omplete counting problem\) and a likely choice for an one-way function and strong pseudorand) s
5 159 M
(om generator implying P != NP \(or does it imply something more than P != NP because top-dow) s
5 148 M
(n inversion is in #P?\).In oracle notation, top-down inversion is #P^#P assuming VoterInvers) s
5 137 M
(e\(\) assignments are #P oracles to MajorityInverse\(\) #P problem. Toda's theorem implies PH i) s
5 126 M
(s in P^#P. If P^#P is in #P^#P, then top-down inversion is harder than PH and hardness of t) s
5 115 M
(op-down inversion implies more than just P != NP.) s
5 104 M
(        \(#\) SAT Solver random matrix analysis per-literal probability agrees with observed ) s
5 93 M
(findings so far in small number of variables and clauses and MAXSAT approximation ratio for) s
5 82 M
( \(21,21\) and less number of variables-clauses combinations is almost 97% in most of the Sol) s
5 71 M
(ver executions - SAT solver solves the equal number of clause-variable instances exceeding ) s
5 60 M
(7/8-approximation similar to Karloff-Zwick semidefinite programming randomized algorithm bu) s
5 49 M
(t in deterministic polynomial time. Solving unequal clause-variables requires choice in a n) s
5 38 M
(on-uniform distribution. Solving large number of variables-clauses in the order of millions) s
5 27 M
( might further confirm this trend but is cpu-intensive. So it still remains open if this mo) s
5 16 M
(re than 7/8-approximation implies P=NP. It is unusual that a simple rounding of real soluti) s
5 5 M
(ons to 0 or 1 from linear system of \(boolean\) equations, is able to solve most number of cl) s
_R
S
%%Page: (322) 322
%%BeginPageSetup
_S
18 36 translate
/pagenum 322 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (322) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(auses per random SAT which is more obvious compared to other Randomized Rounding/Relaxation) s
5 731 M
( techniques like Semi-definite programming.) s
5 720 M
(        \(#\) If Hardness of Majority implies something stronger than P != NP e.g an one-way ) s
5 709 M
(function or PRG in #P^#P then there is no conflict from SAT Solver >7/8-approximation in de) s
5 698 M
(terministic Polynomial time and P=NP.) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(---------------------------------------------------) s
5 654 M
(519. \(THEORY and FEATURE-DONE\) SAT Solver Update - pinv2\(\) - 1000 variables and 1000 clause) s
5 643 M
(s - 6 March 2018) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(---------------------------------------------------) s
5 610 M
(SAT Solver has been updated to use pinv2\(\) pseudoinverse function which has been documented) s
5 599 M
( to be faster. After removing some code causing) s
5 588 M
(redundant bottleneck, 1000 variables-1000 clauses random SATs have been solved by pinv2\(\) a) s
5 577 M
(nd matrix multiplication to find real assignments which have been rounded. This means solvi) s
5 566 M
(ng a million entry matrix \(1000*1000\). MAXSAT approximation ratio is 97%-98% again. Probabi) s
5 555 M
(lity per literal average observed coincides with theoretical value of 1/sqrt\(m*n\). It has t) s
5 544 M
(o be noted that Random matrix expectation for solving SAT translated to linear system of eq) s
5 533 M
(uations is an average case solution and is not worst case. This >7/8 approximation could im) s
5 522 M
(ply AverageP=AverageNP or PromiseP=PromiseNP \(for equal number of variables-clauses\) if not) s
5 511 M
( P=NP. This is the likely reason for observed per literal probability being 97% asymptotica) s
5 500 M
(lly less than theoretical per literal probability 100%.) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(--------------------------------------------------) s
5 456 M
(520. \(THEORY and FEATURE-DONE\) SAT Solver Update - 2500 clauses and 2500 variables - LSMR,L) s
5 445 M
(SQR and PseudoInverse Benchmarks - related to 518) s
5 434 M
(- 9 March 2018) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(--------------------------------------------------) s
5 401 M
(1. SAT Solver class has been changed to accept the algorithm as parameter which can be func) s
5 390 M
(tion names for LSMR,LSQR,PseudoInverse,SPSOLVE,) s
5 379 M
(SOLVE etc.,) s
5 368 M
(2. 2500 variables and 2500 clauses combination of SAT instances have been benchmarked by in) s
5 357 M
(voking LSMR, LSQR and PseudOInverse\(pinv2\) separately.) s
5 346 M
(3. LSMR benchmark has 405 random 3SAT instances and is the fastest, LSQR and PseudoInverse\() s
5 335 M
(pinv2\) benchmarks have only few random 3SAT instances.) s
5 324 M
(4. LSQR and PseudoInverse\(pinv2\) are equally slower compared to LSMR by many orders of magn) s
5 313 M
(itude.) s
5 302 M
(5. But approximation ratio for LSMR is 91-92% while LSQR and PseudoInverse trend at 96-97% ) s
5 291 M
(though for small number of iterations. This probably) s
5 280 M
(implies an accuracy versus speed tradeoff: LSMR is less accurate but fast while LSQR and Ps) s
5 269 M
(eudoInverse\(pinv2\) are more accurate but less fast.) s
5 258 M
(6. Observed probability per literal for all three coincide with random matrix 1/sqrt\(m*n\) u) s
5 247 M
(niform distribution probability per literal) s
5 236 M
(7. These numbers are only representative figures and number of iterations for LSQR and Pseu) s
5 225 M
(doInverse\(pinv2\) are too meagre.) s
5 214 M
(8. Logs have been committed to:) s
5 203 M
(  python-src/testlogs/CNFSATSolver.2500clauses2500variables.LSMR.log.9March2018) s
5 192 M
(  python-src/testlogs/CNFSATSolver.2500clauses2500variables.LSQR.log.9March2018) s
5 181 M
(  python-src/testlogs/CNFSATSolver.2500clauses2500variables.PseudoInverse.log.9March2018) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(-------------------------------------------------) s
5 137 M
(521. \(THEORY and FEATURE-DONE\) SAT Solver Update - Non-Uniform Choice - For both equal and ) s
5 126 M
(unequal number of clauses and variables -) s
5 115 M
(related to 520 - 11 March 2018) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(-------------------------------------------------) s
5 82 M
(SAT Solver has been updated to include a new Non-Uniform Choice function for creating rando) s
5 71 M
(m SAT instances by choosing a literal by) s
5 60 M
(probability = 1/sqrt\(m*n\) which works for both equal and unequal number of clauses. This ne) s
5 49 M
(w function chooses non-uniformly. This function creates a submatrix of dimension \(sqrt\(m\),s) s
5 38 M
(qrt\(n\)\) chosen uniformly from larger matrix of \(m clauses * n variables\) by invoking choice) s
5 27 M
(\(\) function to choose sqrt\(m\) rows from m rows and sqrt\(n\) columns from n columns. This uni) s
5 16 M
(formly chooses sqrt\(m\)*sqrt\(n\) entries from m*n entries of random matrix. This simulates th) s
5 5 M
(e random matrix probability 1/sqrt\(m*n\) = sqrt\(m*n\)/m*n. From this submatrix 3 literals are) s
_R
S
%%Page: (323) 323
%%BeginPageSetup
_S
18 36 translate
/pagenum 323 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (323) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( chosen in succession to create a random 3SAT clause. Replace flag in choice\(\) was set to F) s
5 731 M
(alse and True while creating random clause and there was not much difference and has been s) s
5 720 M
(et to True.Logs for following 3 variables-clauses combinations have been committed to testl) s
5 709 M
(ogs/ for ~100 random 3SAT instances each:) s
5 698 M
(        1000 variables, 1000 clauses - CNFSATSolver.1000variables1000clauses.NonUniformChoi) s
5 687 M
(ce.log.11March2018) s
5 676 M
(        1100 variables, 1200 clauses - CNFSATSolver.1100variables1200clauses.NonUniformChoi) s
5 665 M
(ce.log.11March2018) s
5 654 M
(        1200 variables, 1100 clauses - CNFSATSolver.1200variables1100clauses.NonUniformChoi) s
5 643 M
(ce.log.11March2018) s
5 632 M
(From logs it is evident non-uniform choice function defined as previously approximately sim) s
5 621 M
(ulates the bias and almost matches theoretical 1/sqrt\(m*n\) random matrix expected per liter) s
5 610 M
(al probability. LSMR algorithm has been chosen and MAXSAT approximation ratio is 91-93% for) s
5 599 M
( 100 iterations for each of the 3 variable-clause combinations. For equal variable-clause c) s
5 588 M
(ombinations, non-uniform choice function is equivalent to choice\(\) and expected and observe) s
5 577 M
(d probabilities per literal agree fully. Previous benchmarks have been done to verify the r) s
5 566 M
(andom matrix theory for Satisfiability problem which is a probabilistic average case P?=NP ) s
5 555 M
(problem mentioned in hardness amplification conflicts previously. There is also a special c) s
5 544 M
(ase conflict with PARITYSAT Hastad-Linial-Mansour-Nisan Theorem circuit size counterexample) s
5 533 M
( mentioned in 53.15. Also unequal variable-clause SATs can be simulated by equal variable-c) s
5 522 M
(lause SATs by setting redundant variables to 0 in disjunction of the literals in clauses or) s
5 511 M
( redundant clauses in conjunction to 1. Thus non-uniform choice may not be necessary.) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(----------------------------------------------) s
5 467 M
(522. \(THEORY and FEATURE-DONE\) SAT Solver Update - Non-Uniform Choice - 3200 variables and ) s
5 456 M
(3100 clauses and Alpha=4.26 - related to 521 ) s
5 445 M
(- 12 March 2018) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(----------------------------------------------) s
5 412 M
(SAT Solver has been updated for some aesthetics - literal selection in non-uniform choice h) s
5 401 M
(as been parametrized: sequential or simultaneous) s
5 390 M
( based on how three random literals are chosen per random 3SAT clause - sequentially as 3*n) s
5 379 M
(P1 or simultaneously as nP3. But no difference was) s
5 368 M
(observed between these two choices. Number of variables is set to 3200 and clauses to 3100.) s
5 357 M
( LSMR iteration has been increased to 5 and conlim) s
5 346 M
(reduced to 10. For few random 3SATs, observed MAXSAT approximation ratio average stands at ) s
5 335 M
(~95%. This accuracy has been observed to increase proportional to number of LSMR iterations) s
5 324 M
(. Commercial SAT solvers solve million variable-clause combinations in few seconds but in e) s
5 313 M
(xponential time. Two other logs have been committed which solve the notorious Alpha=4.26 Cl) s
5 302 M
(ause/Variable ratio, which is known to be hardest subset of SAT and) s
5 291 M
(where a phase transition occurs from easy-to-hard. Number of unsatisfiable formulae increas) s
5 280 M
(e for alpha > 4.26. MAXSAT approximation ratio observed for few random 3SAT instances is ~9) s
5 269 M
(1% for number of variables 300 and 1000 and alpha=4.26. Observed per literal probability is) s
5 258 M
( skewed and substituting it in random matrix MAXSAT approximation ratio m^2*n^2*p^4 shows a) s
5 247 M
(n anomaly. Another fact observed: per literal probability does not change at all for any nu) s
5 236 M
(mber of iterations and stays put and because of this observed MAXSAT ratio converges within) s
5 225 M
( few iterations itself.) s
5 203 M
(References:) s
5 192 M
(-----------) s
5 181 M
(522.1 SAT Solvers and Phase Transition at Alpha=4.26 [Clause/Variable Ratio] - [Carla P. Go) s
5 170 M
(mes, Henry Kautz, Ashish Sabharwal, and Bart Selman] - https://www.cs.cornell.edu/gomes/pdf) s
5 159 M
(/2008_gomes_knowledge_satisfiability.pdf) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(------------------------------------------------) s
5 115 M
(523. \(THEORY and FEATURE-DONE\) SAT Solver Update - Non-uniform Choice 2 - 5000 variables an) s
5 104 M
(d Alpha=4.267 and some intuition - related to 522 ) s
5 93 M
(- 15 March 2018) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(------------------------------------------------) s
5 60 M
(SAT Solver has been updated for a new nonuniform choice function nonuniform_choice2\(\) which) s
5 49 M
( has following algorithm:) s
5 38 M
(        - Each permutation nPn of length n is elongated to n*n*alpha length array by replic) s
5 27 M
(ating a non-variable X of large index \(n*n\)) s
5 16 M
(        - Literals are chosen from this new array as \(n*n*alpha\)P1 or \(n*n*alpha\)P3 in a wh) s
5 5 M
(ile loop till a valid literal which is not equal to n*n is found ) s
_R
S
%%Page: (324) 324
%%BeginPageSetup
_S
18 36 translate
/pagenum 324 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (324) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        - This creates a probability of fraction n/\(n*n*alpha\)=1/\(n*alpha\) for per literal ) s
5 731 M
(choice.) s
5 720 M
(But this implementation was found to be no different from nonuniform_choice\(\) which chooses) s
5 709 M
( a submatrix in per literal probability and therefore has been commented at present. MAXSAT) s
5 698 M
( approximation ratio observed was 88% for nonuniform_choice2\(\) versus 90% for nonuniform_ch) s
5 687 M
(oice\(\). 5000 variables and Alpha=4.267 have been solved for few iterations and MAXSAT appro) s
5 676 M
(ximation ration is 90-91%. In all the benchmarks done so far, it has been observed that equ) s
5 665 M
(al variables-clause combinations almost always converge to ~95% MAXSAT approximation ratio ) s
5 654 M
(and  Alpha=4.267 almost always converge to ~90-91%. Though these numbers are not conclusive) s
5 643 M
( and comprehensive, previous emerging pattern is too striking. ) s
5 621 M
(Here the intuition on how LSMR/LSQR works has to be mooted - Each binary assignment string ) s
5 610 M
(can be thought of as a step function plotted as binary value versus variables. For example,) s
5 599 M
( assignment 001101 is plotted as:) s
5 588 M
(                        ----  -) s
5 577 M
(                        |  | |) s
5 566 M
(                      ---  ---) s
5 555 M
(where troughs represent 0s and peaks 1s. LSMR/LSQR finds a set of real valued points on a s) s
5 544 M
(inusoidal polynomial which approximates this step function by minimizing sum of distances/e) s
5 533 M
(rrors between troughs-peaks of polynomial and those of step function. By rounding the peaks) s
5 522 M
( and troughs of this LSMR polynomial to 1s and 0s thus converts the sinusoid to a step func) s
5 511 M
(tion. Minimizing the sum of squares distance error implies, this polynomial is almost uniqu) s
5 500 M
(e\(though there can be multiple satisfying assignments\) and is able to extract atleast one s) s
5 489 M
(atisfying assignment.) s
5 467 M
(Probability of an LSMR/LSQR real-to-binary round off assignment failing to satisfy a random) s
5 456 M
( 3SAT:) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(------) s
5 423 M
(For each binary variable xi, LSMR/LSQR creates a real value which is rounded off as:) s
5 412 M
(        xi   -    0  if  xi < 0.5) s
5 401 M
(        xi   -    1  if  xi > 0.5) s
5 390 M
(This round off can fail if:) s
5 379 M
(        xi   -    1  if  xi < 0.5) s
5 368 M
(        xi   -    0  if  xi > 0.5) s
5 346 M
(Lovasz Local Lemma Analyses described earlier further explain the clause-variable dependenc) s
5 335 M
(y graph\(Factor graph\) scenarios but only lowerbound the MAXSAT approximation ratio for vari) s
5 324 M
(ous values of dependency. But Random Matrix Least Squares Error Partial Derivative Analysis) s
5 313 M
( forbids values of assignments which cause such large deviations of real solutions from 0s ) s
5 302 M
(and 1s to maximum possible extent,by providing a mechanism on how to choose a literal - 1/s) s
5 291 M
(qrt\(m*n\) probability - reverse-engineered a posteriori probability. In other words, real so) s
5 280 M
(lutions are almost in proximity to 0 or 1 - sinusoid approximates step-function near-perfec) s
5 269 M
(tly. Any other probability distribution of per literal choice is theoretically inferior.) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(-------------------------------------------------) s
5 225 M
(524. \(THEORY and FEATURE-DONE\) SAT Solver Update - Variables and Alpha as parameters and tw) s
5 214 M
(o Alpha Versus MAXSAT ratio graph plots -) s
5 203 M
(related to 523 - 16 March 2018) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(-------------------------------------------------) s
5 170 M
(SAT Solver has been updated to accept commandline parameters of number of variables and Alp) s
5 159 M
(ha \(Clause/Variable ratio\) as:) s
5 148 M
(                $python CNFSATSolver.py <number_of_variables> <alpha>) s
5 137 M
(Some debug prints have been changed. Following sets of SATs were solved and variation of MA) s
5 126 M
(XSAT approximation ratio versus Alpha has been) s
5 115 M
(captured as graph \(for nonuniform_choice\(\)\):) s
5 104 M
(-----------------------------------------------------------) s
5 93 M
(Number of Variables - 600 \(after atleast 15 random 3SAT iterations\)) s
5 82 M
(-----------------------------------------------------------) s
5 71 M
(Alpha                           Observed MAXSAT Approximation Ratio) s
5 60 M
(-------                         -----------------------------------) s
5 49 M
(1                               94.5%) s
5 38 M
(2                               92.7%) s
5 27 M
(3                               91.5%) s
5 16 M
(4                               90.74%) s
5 5 M
(4.267                           90.45%) s
_R
S
%%Page: (325) 325
%%BeginPageSetup
_S
18 36 translate
/pagenum 325 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (325) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(5                               90.28%) s
5 731 M
(6                               90.25%) s
5 720 M
(-----------------------------------------------------------) s
5 709 M
(Number of Variables - 300 \(after atleast 15 random 3SAT iterations\)) s
5 698 M
(-----------------------------------------------------------) s
5 687 M
(Alpha                           Observed MAXSAT Approximation Ratio) s
5 676 M
(------                          -----------------------------------) s
5 665 M
(1                               95%) s
5 654 M
(2                               93%) s
5 643 M
(3                               92%) s
5 632 M
(4                               90.6%) s
5 621 M
(4.267                           90.6%) s
5 610 M
(5                               90.49%) s
5 599 M
(6                               90.73%) s
5 577 M
(Logs for an iteration of 5000 variables and Alpha=4.267 has been committed to python-src/te) s
5 566 M
(stlogs/CNFSATSolver.5000variablesAlpha4.267.log.16March2017 which also has MAXSAT approxima) s
5 555 M
(tion ratio of 90-91%. Gradual nosedive of MAXSAT approximation ratio as Alpha increases is ) s
5 544 M
(notable and it stabilizes to 90-91% after Alpha >= 4 for both 300 and 600 variables implyin) s
5 533 M
(g phase transition.) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(-----) s
5 500 M
(SAT Solver has been updated for a new nonuniform_choice3\(\) function based on an Epsilon Bia) s
5 489 M
(s Test Snippet EpsilonBiasNonUniformChoice.py which has been added to repository. This is s) s
5 478 M
(imilar to nonuniform_choice2\(\) but Probabilities of nonuniformly chosen literals are comput) s
5 467 M
(ed separately and updated within the while loops also. Algorithm is similar to nonuniform_c) s
5 456 M
(hoice2\(\) which elongates a permutation by replicating a skew variable. Average probabilitie) s
5 445 M
(s of all variables other than skew variable almost match the random matrix 1/sqrt\(m*n\) prob) s
5 434 M
(ability. Logs which print these probabilities for 1000 variables and Alpha=1/Alpha=4.267 ha) s
5 423 M
(ve been committed to testlogs/CNFSATSolver.1000variablesAlpha1.log.16March2018 and testlogs) s
5 412 M
(/CNFSATSolver.1000variablesAlpha4.267.log.16March2018.) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(----------------------------------------------) s
5 368 M
(525. \(FEATURE-DONE\) SAT Solver Update - nonuniform_choice3\(\) updated for constant multiple ) s
5 357 M
(in expansion of the variables array) s
5 346 M
(- 19 March 2018 - related to 524) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(----------------------------------------------) s
5 313 M
(1. CNFSATSolver.py nonuniform_choice3\(\) has been changed to expand the variables array by f) s
5 302 M
(ollowing relation:) s
5 291 M
(        n + x = n*sqrt\(alpha\)) s
5 280 M
(        x = n*\(sqrt\(alpha\)-1\)) s
5 269 M
(        => array of n variables is expanded to array of size n*\(sqrt\(alpha\)-damp\) for alpha) s
5 258 M
( = number_of_clauses/number_of_variables) s
5 247 M
(2. damp variable has been hardcoded to 2 than 1 which approximates theoretical 1/sqrt\(m*n\) ) s
5 236 M
(probability well because of round-off.) s
5 225 M
(3. This expansion creates an approximate nonuniform probability 1/n*sqrt\(alpha\) per literal) s
5 214 M
( excluding replicated skew variable which is) s
5 203 M
(filtered in the while loops) s
5 192 M
(4. Example SAT Solver logs for 1000 variables and Alpha=4.267 has been committed to python-) s
5 181 M
(src/testlogs/CNFSATSolver.1000variablesAlpha4.267.log.19March2018) s
5 170 M
(5. MAXSAT Approximation ratio again is 90-91% for 20+ random 3SATs and nonuniform per liter) s
5 159 M
(al probability almost matches 1/sqrt\(m*n\)) s
5 148 M
(\(till penultimate decimal\)) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(------------------------------------------------) s
5 104 M
(526. \(THEORY\) Counterexample in Majority Voting, Timeline Evolution of Belief Propagation, ) s
5 93 M
(Intrinsic Merit - related to 507 - 20 March 2018) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(------------------------------------------------) s
5 60 M
(Previous sections described a counterexample in Majority Voting for a question:) s
5 49 M
(        "Did an artefact exist millenia ago?") s
5 38 M
(There are two possible answers: Yes and No which depend on intrinsically determining truth ) s
5 27 M
(of answer to this question. Both possible answers are belief propagated as trees which evol) s
5 16 M
(ve over time following a gossip protocol. Root of either of the trees propagates its belief) s
5 5 M
( to its children and so on recursively for all other internal nodes. Each edge in either of) s
_R
S
%%Page: (326) 326
%%BeginPageSetup
_S
18 36 translate
/pagenum 326 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (326) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( the trees has a belief potential for "Yes" and "No". Parent node propagates its belief to ) s
5 731 M
(the children proportional to this potential. If potential is below a threshold, belief prop) s
5 720 M
(agation stops and trees are pruned.  Thus there are two trees which correspond to two sets ) s
5 709 M
(of people who believe "Yes" and "No" by potentials percolated from Roots. Only the root nod) s
5 698 M
(e has most authentic direct intrinsic evidence to either Yes or No truth value to the quest) s
5 687 M
(ion. Question is: How can intrinsic absolute truth of answer be determined? Does size of th) s
5 676 M
(e trees imply truth i.e Can Majority Voting determine intrinsic truth value at the root? Th) s
5 665 M
(is problem becomes all the more non-trivial when a chronologically ancient portion of tree ) s
5 654 M
(\(e.g Root is extinct\) is not available and only nodes closer to leaves remain. Value of bel) s
5 643 M
(ief potential is a function of intrinsic truth viewed by the roots of either tree.) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(-------------------------------------------------) s
5 599 M
(527. \(THEORY and FEATURE-DONE\) Hardy-Ramanujan Approximate Ray Shooting Queries for Factors) s
5 588 M
( - Optimization in Computational Geometric) s
5 577 M
(Factorization - 21 March 2018 - related to 486) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(-------------------------------------------------) s
5 544 M
(1. Ray Shooting Queries based on Hardy-Ramanujan Theorem for Normal Order of number of fact) s
5 533 M
(ors of an integer has been implemented as a) s
5 522 M
(new function.) s
5 511 M
(2. Each approximate factor is queried by a ray from origin of slope tan\(m*pi/\(2*k*loglogN\)\)) s
5 500 M
( intersecting hyperbolic arc bow and approximate factors are:) s
5 489 M
(                sqrt\(N/[tan\(m*pi/\(2*k*loglogN\)\)]\)-1 for m=1,2,3,...,kloglogN) s
5 478 M
(3. Two integers have been factorized using local tile search and comparison between approxi) s
5 467 M
(mate factors and actual factors have been logged in:) s
5 456 M
(        python-src/testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.) s
5 445 M
(HardyRamanujanRayShootingQueries.log.21March2018) s
5 434 M
(        python-src/testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.) s
5 423 M
(HardyRamanujanRayShootingQueries2.log.21March2018) s
5 412 M
(4. Approximate Ray Shooting could be useful for integers having large value of factor multi) s
5 401 M
(plicity BigOmega \(sum of prime factor powers\)) s
5 390 M
(5. Constant k has been hardcoded presently and has to be heuristically found.) s
5 379 M
(6. Approximate Factors are helpful for sieving huge integers and binary search can be local) s
5 368 M
(ized based on these approximate factors as beacons.It is not necessary to search the entire) s
5 357 M
( pixelated hyperbolic arc.) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(---------------------------------------------------) s
5 313 M
(528. \(FEATURE-DONE\) Unsorted Search Update - Streaming Abstract Generator File Datasource S) s
5 302 M
(upport, Prefix-Suffix substrings hashtables ) s
5 291 M
(- 23 March 2018) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(---------------------------------------------------) s
5 258 M
(1. Hardcoded File name in Streaming Abstract Generator has been replaced by a file name var) s
5 247 M
(iable and file contents are tokenized and) s
5 236 M
(stripped of leading and trailing whitespaces and yielded.) s
5 225 M
(2. Padding of '#' in Unsorted Search has been replaced by '0'. Revised Unsorted Search Algo) s
5 214 M
(rithm in https://github.com/shrinivaasanka/Grafit/blob/master/course_material/ComputerScien) s
5 203 M
(ceMiscellaneous/ComputerScienceMiscellaneous_CourseNotes.txt has been implemented by creati) s
5 192 M
(ng hash tables for all integer-string prefixes and suffixes \(though not for all substrings\)) s
5 181 M
( than just for single digits.) s
5 170 M
(3.New function to print contents of all hashtables has been added.) s
5 159 M
(4.Function create_prefix_suffix_hashtables\(\) initializes prefix and suffix hashtables for s) s
5 148 M
(trings from Streaming Abstract Generator ) s
5 137 M
(5.search_number\(\) function has been rewritten to search for all prefixes and suffixes hasht) s
5 126 M
(ables and match True/False is written) s
5 115 M
(6.New input file First100Primes.txt has been created. ) s
5 104 M
(7.Primes and Non-Primes are lookedup and logs has been committed to testlogs/UnsortedSearch) s
5 93 M
(.log.23March2018) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(--------------------------------------------------) s
5 49 M
(529. \(THEORY\) Consensus, Pareto Optimality, Intrinsic-Perceived Value/Merit Equilibrium, Fa) s
5 38 M
(ir Division, Nultiple Agent Resource Allocation\(MARA\),MAXSAT ranking of texts - related to ) s
5 27 M
(432,440,513,526 and all Intrinsic Fitness/Merit sections - 26 March 2018,27 March 2018) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(--------------------------------------------------) s
_R
S
%%Page: (327) 327
%%BeginPageSetup
_S
18 36 translate
/pagenum 327 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (327) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Intrinsic Fitness/Merit and Perceived Merit Equilibrium has been described earlier as an ap) s
5 731 M
(proximate consensus measure for agreeing on value or) s
5 720 M
(merit of an entity. Consensus problem for absolute intrinsic merit arises in the following ) s
5 709 M
(context of Fair Division where set of resources have) s
5 698 M
(to be allocated amongst multiple agents fairly \(also known as MARA-Multi Agent Resource All) s
5 687 M
(ocation\). Fairness in allocation is usually expressed by Pareto Optimality which is defined) s
5 676 M
( as:) s
5 665 M
(For a utility function u:\(Good,Agent\)->Happiness, set of agents \(x1,x2,x3,...,xn\) and goods) s
5 654 M
(/services/resources \(r1,r2,r3,...,rm\) allocated by u  with a Happiness Vector V=\(a1,a2,a3,.) s
5 643 M
(..,an\) , there is no other alternative allocation Happiness Vector V'=\(a1',a2',a3',...,an'\)) s
5 632 M
( for which u\(ai'\) >= u\(ai\) for all i=1,2,3,...,n and there exists an agent i such that u\(ai) s
5 621 M
('\) > u\(ai\).) s
5 610 M
(Most obvious application of Pareto Optimality is Pricing or Determining Value of Goods. All) s
5 599 M
(ocation is Envy-Free if no agent feels its own resource allocation as inferior to others. E) s
5 588 M
(quating Intrinsic Value and Intrinsic Merit reduces the Multi Agent Resource Allocation or ) s
5 577 M
(Fair Division problem to Fair Judgement of Intrinsic Merit. Preferences or Desires of an ag) s
5 566 M
(ent are specified by Logic clauses - Ceteris Paribus - all others being equal agent prefers) s
5 555 M
( \(P1 /\\ !P2\) to \(!P1 /\\ P2\). Translating the Intrinsic Value MARA problems to Intrinsic Mer) s
5 544 M
(it MARA problem is non-trivial. For example, if the agents are web URLs and merit has to be) s
5 533 M
( fairly apportioned to the Web URLs \(Ranking\), to ensure no URL feels envious requires defi) s
5 522 M
(ning per URL preferences. This is precisely where MAXSAT representation of per text/URL pre) s
5 511 M
(ferences finds its utility - number of clauses satisfied per text/URL determines its merit ) s
5 500 M
(i.e text/URL prefers some clauses over others or it has certain special qualities not in ot) s
5 489 M
(hers. Pareto Optimality is NP-Complete by reduction from Set Packing problem\(Problem of fin) s
5 478 M
(ding disjoint subsets from a collection of subsets\).) s
5 456 M
(Traditional Ranking methodology followed is to compute ranking scores per website URL indep) s
5 445 M
(endent of other URLs i.e envy is not accounted for which vitiates fairness. By MARA based r) s
5 434 M
(anking, Ranking Fairness is strengthened and Total Cumulative Intrinsic Merit = 1.0, is vie) s
5 423 M
(wed as Pie/Cake cutting problem and websites are allocated pareto-optimal fractional merit ) s
5 412 M
(by an envy-free protocol. Thus Sum\(rank\(url\)\)=1.) s
5 390 M
(An example envy-free cake cutting algorithm is a hash function which distributes the values) s
5 379 M
( nearly equally onto the per-key buckets of the hash table - all buckets have equal number ) s
5 368 M
(of values or resources are equidistributed. Varying the hash functions changes the per-key ) s
5 357 M
(bucket number of values. Each key is an agent requiring certain number of values in its buc) s
5 346 M
(ket and Choosing a hash function which satisfies this constraint is a MARA protocol.) s
5 324 M
(There exists a bijection between a discrete probability distribution and per-bucket sizes o) s
5 313 M
(f hashtables \(or\) parts in a set partition. If each discrete random variable xi has probabi) s
5 302 M
(lity p\(xi\), sum\(p\(xi\)\) = 1. Similarly, if each bucket xi of a hash table \(part in a set par) s
5 291 M
(tition/exact cover\) has size b\(xi\), sum\(b\(xi\)\) = N \(total number of values\). Choosing an ap) s
5 280 M
(t probability distribution does fair allocation e.g If fair allocation constraint is a gaus) s
5 269 M
(sian, mapping discrete points in normal probability distribution \(p\(xi\)\) to size of hash ta) s
5 258 M
(ble buckets fairly allocates. Expressing the fair allocation constraints as 3SAT and solvin) s
5 247 M
(g it by Random Matrix LSMR/LSQR Approximate SAT Solver yields real solutions to the constra) s
5 236 M
(int variables if rounding is overlooked. As described earlier, this random matrix SAT solve) s
5 225 M
(r approximates the assignment step function by a polynomial traversing these real assignmen) s
5 214 M
(t points. Riemann Sum Discrete Integral of points on this polynomial should be theoreticall) s
5 203 M
(y equal or close to parity of the binary assignment extracted by LSMR/LSQR.) s
5 181 M
(References:) s
5 170 M
(-----------) s
5 159 M
(529.1 MARA Survey - https://staff.science.uva.nl/u.endriss/MARA/mara-survey.pdf ) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(------------------------------------------------) s
5 115 M
(530. \(THEORY and FEATURE-DONE\)  Recursive Lambda Function Growth - Graph Tensor Neuron Netw) s
5 104 M
(ork Intrinsic Merit for Random Walks ) s
5 93 M
(- Analysis for different text - 26 March 2018) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(------------------------------------------------) s
5 60 M
(1. Text input for Recursive Lambda Function Growth has been updated) s
5 49 M
(2. Graph Tensor Neuron Network Intrinsic Merit for Lambda Function Composition of Random Wa) s
5 38 M
(lks of Definition Graph have been captured in) s
5 27 M
(log testlogs/RecursiveLambdaFunctionGrowth.log.GraphTensorNeuronNetwork.26March2018) s
5 16 M
(3. Maximum Graph Tensor Neuron Network Intrinsic Merit occurs for Random Walk Composition:) s
5 5 M
(grow_lambda_function3\(\): Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Meri) s
_R
S
%%Page: (328) 328
%%BeginPageSetup
_S
18 36 translate
/pagenum 328 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (328) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(t :) s
5 731 M
(\(u'\(housing\(protective,\(certain\(zone,\(something\(target,\(part\(include,\(urban\(area,\(Chennai\(c) s
5 720 M
(ity,formerly\)\)\)\)\)\)\)\)\)\)\)\)', 6.023684210526316\)) s
5 709 M
(4.Top percentile Unsupervised Classes of this text by Dense Subgraph Discovery \(Core Number) s
5 698 M
(s\) are:) s
5 687 M
(===========================================================================================) s
5 676 M
(==================) s
5 665 M
(Unsupervised Classification based on top percentile Core numbers of the definition graph\(su) s
5 654 M
(bgraph of WordNet\)) s
5 643 M
(===========================================================================================) s
5 632 M
(==================) s
5 621 M
(This document belongs to class: arsenic ,core number= 16) s
5 610 M
(This document belongs to class: Greenwich_Village ,core number= 14) s
5 599 M
(This document belongs to class: state_of_matter ,core number= 14) s
5 588 M
(This document belongs to class: order ,core number= 14) s
5 577 M
(This document belongs to class: include ,core number= 10) s
5 566 M
(This document belongs to class: part ,core number= 10) s
5 555 M
(This document belongs to class: exploitation ,core number= 9) s
5 544 M
(This document belongs to class: area ,core number= 9) s
5 533 M
(This document belongs to class: three ,core number= 9) s
5 522 M
(This document belongs to class: collector ,core number= 8) s
5 511 M
(This document belongs to class: housing ,core number= 8) s
5 500 M
(This document belongs to class: January ,core number= 8) s
5 489 M
(This document belongs to class: trey ,core number= 8) s
5 478 M
(This document belongs to class: Chennai ,core number= 7) s
5 467 M
(This document belongs to class: urban ,core number= 7) s
5 456 M
(This document belongs to class: planning ,core number= 6) s
5 445 M
(This document belongs to class: zone ,core number= 6) s
5 434 M
(This document belongs to class: free-base ,core number= 6) s
5 423 M
(This document belongs to class: travel ,core number= 6) s
5 412 M
(This document belongs to class: one ,core number= 6) s
5 401 M
(This document belongs to class: target ,core number= 6) s
5 390 M
(This document belongs to class: something ,core number= 6) s
5 379 M
(This document belongs to class: republic ,core number= 6) s
5 368 M
(This document belongs to class: government ,core number= 5) s
5 357 M
(This document belongs to class: legal_power ,core number= 5) s
5 346 M
(----------------------------------------------------------------------) s
5 335 M
(which reasonably coincide with the vertices of the maximum intrinsic merit random walk and ) s
5 324 M
(capture the Legal/Gubernatorial/Urban planning nature) s
5 313 M
(of the text though there are WordNet anomalies printing 'arsenic' etc., as classes. These a) s
5 302 M
(nomalies are caused because usually Urban planning is related to exploitation and Solid Was) s
5 291 M
(te Management which in turn are connected to Toxic substances and Pollutants. WordNet conta) s
5 280 M
(ins all these relations.  Some other Net like ConceptNet5 might probably do better which ar) s
5 269 M
(e word2vec based.) s
5 247 M
(Essence:) s
5 236 M
(--------) s
5 225 M
(Meaning of a text is approximated as:) s
5 214 M
(        - Create a Definition Graph Representation of Text from some Ontology) s
5 203 M
(        - Do random walks/Hamiltonian on the graph to simulate the human text comprehension) s
5 192 M
(        - Get classes of the text from Recursive Gloss Overlap Unsupervised Classifier) s
5 181 M
(        - Compute Lambda Composition Trees for all random walks in definition graph) s
5 170 M
(        - These random walk lambda composition trees are approximations of all possible mea) s
5 159 M
(nings of the text) s
5 148 M
(        - Compute Graph Tensor Neuron Network Intrinsic Merit for all random walk lambda co) s
5 137 M
(mposition trees) s
5 126 M
(        - Lambda Composition Tree of Maximum Graph Tensor Neuron Network Intrinsic Merit is) s
5 115 M
( the most likely approximate meaning of the text) s
5 104 M
(        - This is obvious because this maximum merit tree has Neuron Tensor Network Relatio) s
5 93 M
(ns of maximum similarity/truth value and) s
5 82 M
(these similarities are composed and belief propagated) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(----------------------------------------------) s
5 38 M
(531. \(FEATURE-DONE\) Recursive Lambda Function Growth - Simple Cycles and Rich Club Coeffici) s
5 27 M
(ent - 27 March 2018) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(----------------------------------------------) s
_R
S
%%Page: (329) 329
%%BeginPageSetup
_S
18 36 translate
/pagenum 329 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (329) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(1.Recursive Lambda Function Growth implementation has been updated to loop through cycles i) s
5 731 M
(n the definition graph of text and to choose) s
5 720 M
(between Cycles and Random Walks by a boolean flag ClosedPaths.) s
5 709 M
(2.Closed Paths or Cycles simulate the meaning better and the tree lambda composition obtain) s
5 698 M
(ed from cycle vertices has been experimentally) s
5 687 M
(found to approximate meaning more closely.) s
5 676 M
(3.Logs for this has been committed to testlogs/RecursiveLambdaFunctionGrowth.log.GraphTenso) s
5 665 M
(rNeuronNetwork.27March2018) s
5 654 M
(4.Rich Club Coefficients of the Definition Graph has been printed for each degree as a meas) s
5 643 M
(ure of connectivity of high degree vertices\(rich club\):) s
5 632 M
(Rich Club Coefficient of the Recursive Gloss Overlap Definition Graph: {0: 0.00486559107248) s
5 621 M
(7624, 1: 0.016526610644257703, 2: 0.018738738738738738, 3: 0.02396259497369959, 4: 0.024154) s
5 610 M
(589371980676, 5: 0.023809523809523808, 6: 0.028985507246376812, 7: 0.032679738562091505, 8:) s
5 599 M
( 0.022222222222222223, 9: 0.0, 10: 0.0}) s
5 588 M
(5.Top core number classes from Unsupervised Recursive Gloss Overlap Classifier:) s
5 577 M
(===========================================================================================) s
5 566 M
(==================) s
5 555 M
(Unsupervised Classification based on top percentile Core numbers of the definition graph\(su) s
5 544 M
(bgraph of WordNet\)) s
5 533 M
(===========================================================================================) s
5 522 M
(==================) s
5 511 M
(This document belongs to class: incorporate ,core number= 4) s
5 500 M
(This document belongs to class: environment ,core number= 4) s
5 489 M
(This document belongs to class: regional ,core number= 4) s
5 478 M
(This document belongs to class: `in ,core number= 4) s
5 467 M
(This document belongs to class: component ,core number= 4) s
5 456 M
(This document belongs to class: exploitation ,core number= 4) s
5 445 M
(This document belongs to class: useful ,core number= 4) s
5 434 M
(This document belongs to class: relating ,core number= 4) s
5 423 M
(This document belongs to class: unit ,core number= 4) s
5 412 M
(This document belongs to class: particular ,core number= 4) s
5 401 M
(This document belongs to class: making ,core number= 4) s
5 390 M
(This document belongs to class: process ,core number= 4) s
5 379 M
(This document belongs to class: sphere ,core number= 4) s
5 368 M
(This document belongs to class: something ,core number= 4) s
5 357 M
(This document belongs to class: goal ,core number= 4) s
5 346 M
(This document belongs to class: farm ,core number= 4) s
5 335 M
(This document belongs to class: urbanization ,core number= 4) s
5 324 M
(This document belongs to class: strategic ,core number= 4) s
5 313 M
(This document belongs to class: ' ,core number= 4) s
5 302 M
(This document belongs to class: increase ,core number= 4) s
5 291 M
(This document belongs to class: comforts ,core number= 4) s
5 280 M
(This document belongs to class: city ,core number= 4) s
5 269 M
(This document belongs to class: district ,core number= 4) s
5 258 M
(This document belongs to class: farming ,core number= 4) s
5 247 M
(This document belongs to class: urban ,core number= 4) s
5 236 M
(This document belongs to class: way ,core number= 4) s
5 225 M
(This document belongs to class: plan ,core number= 4) s
5 214 M
(This document belongs to class: do ,core number= 4) s
5 203 M
(This document belongs to class: contain ,core number= 4) s
5 192 M
(This document belongs to class: see ,core number= 4) s
5 181 M
(This document belongs to class: state ,core number= 4) s
5 170 M
(This document belongs to class: region ,core number= 4) s
5 159 M
(This document belongs to class: proposal ,core number= 4) s
5 148 M
(This document belongs to class: life ,core number= 4) s
5 137 M
(This document belongs to class: decisiveness ,core number= 4) s
5 126 M
(This document belongs to class: lives ,core number= 4) s
5 115 M
(This document belongs to class: metropolitan ,core number= 4) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(coincide reasonably well to the Maximum Merit Cycle as below and the meaning of the text ca) s
5 82 M
(n be inferred from the composition tree of the word chain and the composed tensor potential) s
5 71 M
( is printed for this maximum merit cycle:) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(Cycle : [u'particular', u'regional', u'region', u'something', u'see', u'make', u'plan', u'g) s
5 38 M
(oal', u'state', u'city', u'urban', u'area', u'exploitation', u'land', u'farm', u'unit', u'a) s
5 27 M
(ssembly', u'parts', u'environment', u'sphere']) s
5 16 M
(Cycle Composition Tree for this cycle : \(u'particular\(\(region\(regional,\(see\(something,\(plan) s
5 5 M
(\(make,\(state\(goal,\(urban\(city,\(exploitation\(area,\(farm\(land,\(assembly\(unit,\(environment\(par) s
_R
S
%%Page: (330) 330
%%BeginPageSetup
_S
18 36 translate
/pagenum 330 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (330) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ts,sphere\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)', 7.250082923612336\)) s
5 731 M
(maximum_per_random_walk_graph_tensor_neuron_network_intrinsic_merit= \(u'\(regional\(particula) s
5 720 M
(r,\(`in\(region,\(pronounce\(way,\(see\(certain,\(add\(make,\(important\(increase,\(plan\(strategic,\(st) s
5 709 M
(ate\(goal,\(urban\(city,\(administrative\(relating,\(unit\(agency,\(land\(farm,\(useful\(exploitation,) s
5 698 M
(\(proper\(necessitate,\(metropolitan\(person,\(environment\(lives,sphere\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)) s
5 687 M
(\)\)\)\)\)\)\)', 14.322488296017706\)) s
5 676 M
(===================================================================) s
5 665 M
(grow_lambda_function3\(\): Graph Tensor Neuron Network Intrinsic Merit for this text: 3804.34) s
5 654 M
(147246) s
5 643 M
(6.NetworkX library has been upgraded to recently released version 2.1) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(----------------------------------------------------) s
5 599 M
(532. \(THEORY-FEATURE-DONE\) Least Squares SAT Solver Benchmarks - 1000 variables - Non-unifo) s
5 588 M
(rm choice 3 - different values of Alpha - 29 March 2018 - related to 524) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(----------------------------------------------------) s
5 555 M
(1. SAT Solver \(LSMR\) has been benchmarked for 1000 variables and for varying values of Alph) s
5 544 M
(a as below. MAXSAT approximation ratio after) s
5 533 M
(atleast 20 iterations of random 3SAT for nonuniform_choice3\(\) are:) s
5 522 M
(Alpha = 1 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses pe) s
5 511 M
(r CNF satisfied so far: 94.3032258065) s
5 500 M
(Alpha = 2 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses pe) s
5 489 M
(r CNF satisfied so far: 92.2115384615) s
5 478 M
(Alpha = 3 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses pe) s
5 467 M
(r CNF satisfied so far: 91.1458333333) s
5 456 M
(Alpha = 4.267 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clause) s
5 445 M
(s per CNF satisfied so far: 90.196679346) s
5 434 M
(Alpha = 5 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses pe) s
5 423 M
(r CNF satisfied so far: 89.7233333333) s
5 412 M
(Alpha = 6 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses pe) s
5 401 M
(r CNF satisfied so far: 89.8702898551) s
5 390 M
(Alpha = 7 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses pe) s
5 379 M
(r CNF satisfied so far: 89.8266233766) s
5 357 M
(2.As usual for equal variable-clauses MAXSAT ratio is the maximum at 94-95% and decreases f) s
5 346 M
(or increasing alpha. For Alpha=4.267, MAXSAT ratio is 90-91% similar to previous benchmarks) s
5 335 M
(\(which were done on nonuniform_choice\(\)\).) s
5 313 M
(3.Log excerpts have been captured in testlogs/CNFSATSolver.1000variablesDifferentAlphasBenc) s
5 302 M
(hmarks.29March2018) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(---------------------) s
5 258 M
(533. \(THEORY\) Packing/Filling/Tiling problems, Complement Functions/Diophantine Equations, ) s
5 247 M
(Ramsey Coloring, ) s
5 236 M
(Exact Cover, Matiyasevich-Robinson-Davis-Putnam Theorem  - related to 461,462,490 - 19 Apri) s
5 225 M
(l 2018) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(---------------------) s
5 192 M
(As mentioned in previous sections, complement functions are subsets of set of Diophantine E) s
5 181 M
(quations defining) s
5 170 M
(each diophantine set in an exact cover - this generalizes definition of complement function) s
5 159 M
(s to exact cover of size greater than 2. Exact Cover is a special scenario of Bin Packing/S) s
5 148 M
(pace Filling/Tiling plane \(e.g Pentominoes tiling of a Chess board, N-Queens Problem etc.,\)) s
5 137 M
(. Complement Diophantine Equations for sets in an exact cover uniquely determine each eleme) s
5 126 M
(nt in tiling and thus create a bijective map between Diophantines and Tiles\(i.e sets in exa) s
5 115 M
(ct cover\).) s
5 93 M
(Reference:) s
5 82 M
(----------) s
5 71 M
(533.1 Pentominoes Tiling Exact Cover for Chess board - https://en.wikipedia.org/wiki/Exact_) s
5 60 M
(cover - Each pentomino tile can be defined by a Diophantine Equation because Exact Cover is) s
5 49 M
( NP-complete recursive set, from MRDP theorem. These diophantine equations for tiles are co) s
5 38 M
(mplement functions of the exact cover.) s
5 27 M
(533.2 Euclidean Ramsey Theory - http://www.math.ucsd.edu/~ronspubs/pre_Euclidean.pdf - [RL ) s
5 16 M
(Graham] - Euclidean Ramsey Theory pertains to the coloring/partitioning of euclidean plane ) s
5 5 M
(E into tiles Ci i.e E = U Ci and there exists set of subsets E' of E such that for every x ) s
_R
S
%%Page: (331) 331
%%BeginPageSetup
_S
18 36 translate
/pagenum 331 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (331) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(in E', x is exactly contained in one Ci.) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(--------------------) s
5 698 M
(534. \(THEORY and FEATURE-DONE\) Complement Diophantine and Factorization - Pell Equation Sol) s
5 687 M
(ver Update - ) s
5 676 M
(20 April 2018) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(--------------------) s
5 643 M
(1. Complement Function Implementation has been updated to invoke sympy Pell Equation solver) s
5 632 M
( for some N and D) s
5 621 M
(in x^2 - D*y^2 = N) s
5 610 M
(2. Factorization reduces to integer solutions of Pell Equation but the converse is harder -) s
5 599 M
( factors must be known) s
5 588 M
(a priori as pq = N from some factoring algorithm. Then following equations can be solved:) s
5 577 M
(        x + sqrt\(D\)*y = p) s
5 566 M
(        x - sqrt\(D\)*y = q) s
5 555 M
(for x and y.) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(--------------------) s
5 511 M
(535. \(THEORY and FEATURE-DONE\) Complement Diophantine and Factorization - Pell Equation Sol) s
5 500 M
(ver Update 2 -) s
5 489 M
(20 April 2018) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(--------------------) s
5 456 M
(1. Complement Function Implementation has been updated to invoke sympy Pell Equation solver) s
5 445 M
( for some N and D) s
5 434 M
(in x^2 - D*y^2 = N for D=1) s
5 423 M
(2. Following are the factors p,q of N:) s
5 412 M
(  x + y = p) s
5 401 M
(  x - y = q) s
5 390 M
(for Pell equation solutions x and y. This is exponential in number of bits of N and equival) s
5 379 M
(ent to most) s
5 368 M
(Number Field Sieve algorithms for Factorization in vogue. Computational Geometric Factoriza) s
5 357 M
(tion in NC) s
5 346 M
(implies x and y can be found in parallel polynomial time \(which is quite surprising given t) s
5 335 M
(he antiquity and) s
5 324 M
(notorious difficulty of this ~1500 year old problem\).) s
5 313 M
(3. Pell's Equation for Factoring and Prime polynomials \(e.g Matiyasevich, Jones-Sato-Wada-W) s
5 302 M
(iens\) are thus) s
5 291 M
(complement diophantines representing the exact cover {Primes,Composites} of the Set of Natu) s
5 280 M
(ral Numbers ) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(-------------------) s
5 236 M
(536. \(THEORY\) Complement Functions, Complement Graphs, Ramsey coloring, Intrinsic Merit of ) s
5 225 M
(Text-Graph - ) s
5 214 M
(related to 2,338 - 21 April 2018, 25 April 2018) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(-------------------) s
5 181 M
(Relations between the concept of complement functions and complement graphs have been descr) s
5 170 M
(ibed earlier in the) s
5 159 M
(context of Perfect Graph Theorem. This notion of complement graphs has direct application i) s
5 148 M
(n graph representation of texts \(text-graph\) and resulting Intrinsic Merit qualities of the) s
5 137 M
( text-graph. For example, complement graph dual of a text-graph has edges amongst word vert) s
5 126 M
(ices absent in its primal. Also cliques in primal graph G become independent sets in comple) s
5 115 M
(ment dual graph G' and vice-versa. Complement graphs have spawned vast literature of theore) s
5 104 M
(tical results foremost being Perfect Graph Theorem. Recursive Gloss Overlap and Recursive L) s
5 93 M
(ambda Function Growth algorithms map text to Graph of word vertices and composition of Lamb) s
5 82 M
(da Functions - a language between Context Free Grammar and Context Sensitive Grammar. Compo) s
5 71 M
(sition of lambda functions by random walks/cycles/girth in text graphs makes it a Church-Tu) s
5 60 M
(ring-equivalent model which is an overlap of two fields - Formal Languages Theory and Graph) s
5 49 M
( Theory. It is an open question as to what Complements of text-graph and their Chromatic nu) s
5 38 M
(mber imply: Does a complement of text-graph negate the meaning of text? As opposed to Color) s
5 27 M
(ing a linear sentence by Part-of-speech tagging, what does coloring of text-graph imply? E.) s
5 16 M
(g The sentence "It rained heavily today" is colored by PoS tags as Pronoun-Verb-Adjective-O) s
5 5 M
(bject which is a Ramsey coloring of text construed as a sequence of words. Alphabet colorin) s
_R
S
%%Page: (332) 332
%%BeginPageSetup
_S
18 36 translate
/pagenum 332 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (332) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(g and arithmetic progressions of alphabet positions in text has been already described in 2) s
5 731 M
(.10,2.11 and 2.12. In text-graphs coloring is usually edge coloring and not vertex coloring) s
5 720 M
( where each edge color corresponds to a relation \(Is-a, Has-a, Is-part-of etc.,\) between wo) s
5 709 M
(rd vertices. All theorems related to Edge Coloring therefore apply to text graphs. Thus Com) s
5 698 M
(plement Functions/Complement Graphs are useful in deep structure analysis of text graphs. I) s
5 687 M
(f the text-graph is complete, Ramsey Theorem for edge k-coloring applies \(relations are col) s
5 676 M
(ors\), order emerges and there exists a c-homogeneous subgraph edge-colored by same relation) s
5 665 M
( c.) s
5 643 M
(There is a known theorem which states that if a graph G is disconnected its complement G's ) s
5 632 M
(is connected and vice-versa. This can be proved by elementary arguments. If x-y is not an e) s
5 621 M
(dge in G, x-y have an edge in G'. If x-y is an edge in G, x and y are in same component in ) s
5 610 M
(G. If z is a vertex in some other disconnected component of G, then there are no x-z and y-) s
5 599 M
(z vertices in G but they exist in G' and there is x-z-y path in G' and G' is connected. In ) s
5 588 M
(the context of WordNet relations, variant of this theorem has been proved as condition for ) s
5 577 M
(meaningfulness and Intrinsic Merit in Section 5.16 of https://tac.nist.gov/publications/201) s
5 566 M
(0/participant.papers/CMI_IIT.proceedings.pdf . This qualitatively answers the previous ques) s
5 555 M
(tion on meaningfulness of text-graph complement. If text-graph G is disconnected \(i.e less ) s
5 544 M
(meaningful\) its complement G' is connected \(i.e more meaningful\). Here two meanings of prim) s
5 533 M
(al and its complement text graph need not negate each other. Meaning of complement could be) s
5 522 M
( totally different from primal and may be in some other class.) s
5 500 M
(WordNet Synsets for words have noun,verb etc., suffixes \(.n,.v,...\) which is tantamount to ) s
5 489 M
(vertex coloring of the text-graph as nouns,verbs,adjectives etc.,. Set of vertices of same ) s
5 478 M
(color class constitute independent sets or partition the word vertices into monochromatic i) s
5 467 M
(ndependent sets. Perfect Graph Theorem applies if text-graph G and its complement G' are pe) s
5 456 M
(rfect \(i.e if every induced subgraph of G or G' has its Chromatic Number equal to Maximal C) s
5 445 M
(lique Number\).) s
5 423 M
(References:) s
5 412 M
(----------) s
5 401 M
(536.1 Introduction to Graph Theory - [Douglas B.West] - Perfect Graph Theorem for complemen) s
5 390 M
(t graphs, Ramsey Theorem for Graphs - Pages 226,380) s
5 379 M
(536.2 A New Measure of Word Semantic Similarity based on WordNet Hierarchy and DAG Theory -) s
5 368 M
( https://pdfs.semanticscholar.org/d3a0/c2a70d3d39a5b41b4ef8c4890a481307259f.pdf) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(------------------) s
5 324 M
(537. \(FEATURE-DONE\) ConceptNet Client Upgrade to 5.6 - REST endpoints for Emoticons - 23 Ap) s
5 313 M
(ril 2018) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(------------------) s
5 280 M
(1. ConceptNet Client has been updated for new REST endpoints in ConceptNet 5.6) s
5 269 M
(2. Function for querying emotions has been added for new emoji endpoints in ConceptNet 5.6) s
5 258 M
(3. logs for this have been committed to testlogs/ConceptNet5Client.log.23April2018) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(------------------) s
5 214 M
(538. \(THEORY\) Shell Turing Machines, Word2Vec and Intrinsic Merit - 24 April 2018, 25 April) s
5 203 M
( 2018 - related to 42) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(------------------) s
5 170 M
(Shell Turing Machines described earlier are experimental enhancements to Turing Machine def) s
5 159 M
(inition which) s
5 148 M
(introduces dimension as a parameter in addition to tapes, alphabets, head etc., Adding dime) s
5 137 M
(nsion to Turing) s
5 126 M
(Machines has immense applications and simulates lot of real world computations which span a) s
5 115 M
(cross multiple) s
5 104 M
(dimensions. For example a Turing Machine defined in dimension d+1 has more computational po) s
5 93 M
(wer than a machine) s
5 82 M
(defined in dimension d i.e L\(T\(d\)\) is in L\(T\(d+1\)\). This is a dimensional hierarchy as oppo) s
5 71 M
(sed to Time and Space) s
5 60 M
(hierarchies of Turing Machines. This has striking applications in graph representation of t) s
5 49 M
(exts. Each word) s
5 38 M
(vertex in a definition graph G1 can be represented as a vector in a space of dimension d. W) s
5 27 M
(ord2Vec embeddings) s
5 16 M
(\(e.g ConceptNet\) already implement this by mapping each word to a vector in space of some d) s
5 5 M
(imension.) s
_R
S
%%Page: (333) 333
%%BeginPageSetup
_S
18 36 translate
/pagenum 333 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (333) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Then another definition graph G2 of words defined on a vector space of dimension d+1 can el) s
5 731 M
(icit more meaning) s
5 720 M
(from text than G1. Recursive Lambda Composition Trees for G1 and G2 are two Turing-equivale) s
5 709 M
(nt computation models) s
5 698 M
( approximating the meaning - G2 approximates better than G1. Essentially a Turing Machine/L) s
5 687 M
(ambda Function is ) s
5 676 M
(extracted from natural language text by growing Lambda Function by recursive composition. I) s
5 665 M
(n other words intrinsic merit computed for G2 is more accurate than G1 for same text. Prese) s
5 654 M
(nt algorithms for Recursive Gloss Overlap and Recursive Lambda Function Growth do not affix) s
5 643 M
( dimension information for word vertices.) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(--------------------) s
5 599 M
(539. \(THEORY\) Recursive Lambda Function Growth for sentences - related to 385,412,530,536 -) s
5 588 M
( 26 April 2018) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(--------------------) s
5 555 M
(Recursive Lambda Function Growth algorithm described so far depends on a text graph and wal) s
5 544 M
(ks/cycles in the text) s
5 533 M
(graph are deemed as sentences of word vertices connected by WordNet/ConceptNet/Ontology rel) s
5 522 M
(ations which are converted to lambda function composition tree. This section explains how t) s
5 511 M
(o construct a lambda function composition from linear sentences with no text-graph represen) s
5 500 M
(tation.) s
5 478 M
(Approximate algorithm to create a lambda composition tree from sentence:) s
5 467 M
(-------------------------------------------------------------------------) s
5 456 M
(*\) PoS/NER tag the sentence into Nouns,Verbs,Adjectives,Adverbs,Pronouns etc.,) s
5 445 M
(*\) Make all words tagged as verbs into lambda functions and noun/object for the verb as res) s
5 434 M
(pective arguments) s
5 423 M
(for the lambda function. This is a thumbrule because verbs in the sentences are the crux/ac) s
5 412 M
(tions on the nouns and objects.) s
5 401 M
(*\) Most natural languages are self-similar in the sense, the simple sentence template Noun-) s
5 390 M
(Pronoun-Adverb-Verb-Adjective-Object is recursively substituted to create large sentences. ) s
5 379 M
(For example Object in Noun-Verb-Object template can itself be another template of the form ) s
5 368 M
(Noun-Verb-Object.) s
5 357 M
(*\) Adjectives/Adverbs qualifying nouns/verbs/objects are created as wrapper lambda function) s
5 346 M
(s for nouns/verbs/objects.) s
5 335 M
(*\) This algorithm for extracting Lambda functions/Turing Machines from Natural Language Tex) s
5 324 M
(ts is the maximum theoretical limit attainable if Church-Turing Thesis is true. In other wo) s
5 313 M
(rds, this algorithm creates Turing machines recognizing Recursively Enumerable sets.) s
5 291 M
(Example sentence: "It rained heavily today") s
5 280 M
(The example sentence is PoS tagged as Pronoun-Verb-Adjective-Object. Verb "rained" is marke) s
5 269 M
(d as lambda function \(after normalizing to "rain" if preferred.\). Adjective "heavily" quali) s
5 258 M
(fying Object "today" is the wrapper function "heavily\(today\)". "It" is a separate lambda fu) s
5 247 M
(nction for pronoun. Verb function "rained" thus accepts "It" and "heavily\(today\)" as argume) s
5 236 M
(nts creating the tree:) s
5 225 M
(        rained\(It, heavily\(today\)\)) s
5 214 M
(This algorithm is independent of natural language of the text. Lacuna in this composition f) s
5 203 M
(rom flat sentence is the deep structure - connections/paths between words - is not exploite) s
5 192 M
(d which is remedied by the random walks/cycle traversal in text-graph and maximum merit com) s
5 181 M
(position is chosen.) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(--------------------) s
5 137 M
(540. \(THEORY and FEATURE-DONE\) Recursive Lambda Function Growth - Update - WordNet Relation) s
5 126 M
(s Deep Structure) s
5 115 M
(- 1 May 2018) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(--------------------) s
5 82 M
(1. Recursive Lambda Function Growth python implementation has been updated to define a new ) s
5 71 M
(function to expand the) s
5 60 M
(Random Walks and Simple Cycles in Recursive Gloss Overlap graph to include the deep structu) s
5 49 M
(re relations between the pairs of words.) s
5 38 M
(2. This invokes path_between\(\) function implemented in WordNetPath.py which is python alter) s
5 27 M
(native implemented in NeuronRain to WordNet::Similarity in Perl CPAN) s
5 16 M
(3. Logs for this have been committed to testlogs/RecursiveLambdaFunctionGrowth.log.GraphTen) s
5 5 M
(sorNeuronNetworkDeepStructure.1May2018) s
_R
S
%%Page: (334) 334
%%BeginPageSetup
_S
18 36 translate
/pagenum 334 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (334) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(4. This is the deepest possible graph structure which can be extracted from a Natural Langu) s
5 731 M
(age Text for an ontology.) s
5 720 M
(5. Maximum merit lambda function composition printed abstracts the concept of expansion of ) s
5 709 M
(a Megapolis as Hyponyms/Hypernyms "event","geographic area","region","definite quantitty",") s
5 698 M
(land" etc.,:) s
5 687 M
(grow_lambda_function3\(\): Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Meri) s
5 676 M
(t : \(u'event\(\(social_event\(affair,\(property\(abstraction,\(property\(abstraction,\(property\(abs) s
5 665 M
(traction,\(property\(abstraction,\(resource\(abstraction,\(resource\(abstraction,\(kind\(abstractio) s
5 654 M
(n,\(abstraction\(concept,\(concept\(kind,\(information\(abstraction,\(abstraction\(evidence,\(eviden) s
5 643 M
(ce\(information,\(entity\(abstraction,\(entity\(measure,\(abstraction\(plan,\(abstraction\(abstracti) s
5 632 M
(on,\(district\(entity,\(region\(location,\(entity\(physical_entity,\(municipality\(district,\(munici) s
5 621 M
(pality\(district,\(region\(district,\(region\(district,\(physical_entity\(location,\(event\(entity,\() s
5 610 M
(exploitation\(abstraction,\(use\(activity,\(entity\(psychological_feature,\(abstraction\(event,\(pr) s
5 599 M
(operty\(land,\(land\(abstraction,\(abstraction\(property,\(point\(entity,\(farm\(location,\(entity\(ph) s
5 588 M
(ysical_entity,\(location\(point,\(physical_entity\(farm,\(definite_quantity\(entity,\(definite_qua) s
5 577 M
(ntity\(entity,\(assembly\(entity,\(artifact\(physical_entity,\(assembly\(entity,\(geographical_area) s
5 566 M
(\(physical_entity,\(region\(location,\(geographical_area\(physical_entity,\(region\(location,\(enti) s
5 555 M
(ty\(physical_entity,\(situation\(abstraction,entity\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)) s
5 544 M
(\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)', 36.399953525147026\)) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(------------------) s
5 500 M
(541. \(THEORY and FEATURE-DONE\) Recursive Lambda Function Growth - Update - Postorder Traver) s
5 489 M
(sal of AVL Lambda Composition Tree - 2 May 2018) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(------------------) s
5 456 M
(1. Text file extracting lambda function composition tree has been updated to increase the s) s
5 445 M
(ize of the text) s
5 434 M
(and more precisely represent the concept of "Expansion of Chennai Metropolitan Area".) s
5 423 M
(2. Lambda Function Composition AVL Tree is evaluated as a Postfix expression \(Postorder Tra) s
5 412 M
(versal of AVL tree\)) s
5 401 M
(3. Maximum Merit composition from logs:) s
5 390 M
(grow_lambda_function3\(\): Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Meri) s
5 379 M
(t : \(u'physical_entity\(\(artifact\(road,\(object\(event,\(entity\(way,\(abstraction\(living_thing,\() s
5 368 M
(entity\(causal_agent,\(entity\(planner,\(physical_entity\(means,\(abstraction\(property,\(entity\(en) s
5 357 M
(tity,\(entity\(entity,\(abstraction\(definite_quantity,\(abstraction\(one,\(entity\(auditory_commun) s
5 346 M
(ication,\(music\(measure,\(digit\(property,\(relation\(abstraction,\(part\(part,\(event\(abstraction,) s
5 335 M
(\(relation\(entity,\(event\(abstraction,\(entity\(relation,\(politics\(investigation,\(investigation) s
5 324 M
(\(politics,\(entity\(relation,\(entity\(Security_Service,\(abstraction\(abstraction,\(group\(abstrac) s
5 313 M
(tion,\(international_intelligence_agency\(intelligence,\(international_intelligence_agency\(gro) s
5 302 M
(up,\(Security_Service\(intelligence,\(entity\(abstraction,\(unit\(region,\(entity\(location,\(entity) s
5 291 M
(\(physical_entity,\(district\(district,\(physical_entity\(location,\(grasping\(control,\(event\(enti) s
5 280 M
(ty,\(region\(embrace,\(activity\(abstraction,\(entity\(event,\(grasping\(psychological_feature,\(cla) s
5 269 M
(sp\(abstraction,\(embrace\(abstraction,\(abstraction\(group,\(abstraction\(control,\(clasp\(abstract) s
5 258 M
(ion,\(unit\(division,\(clergyman\(leader,\(living_thing\(entity,\(causal_agent\(entity,\(object\(livi) s
5 247 M
(ng_thing,\(curate\(leader,\(clergyman\(curate,\(object\(person,\(entity\(physical_entity,\(thing\(phy) s
5 236 M
(sical_entity,\(physical_entity\(external_body_part,\(abstraction\(entity,\(abstraction\(district,) s
5 225 M
(\(entity\(entity,\(head\(causal_agent,\(group\(region,\(entity\(physical_entity,\(abstraction\(abstra) s
5 214 M
(ction,\(entity\(event,\(abstraction\(increase,\(event\(action,\(event\(abstraction,\(expansion\(entit) s
5 203 M
(y,\(expansion\(abstraction,\(action\(fact,\(proposal\(abstraction,\(information\(abstraction,\(abstr) s
5 192 M
(action\(plan,\(abstraction\(entity,\(event\(plan,\(entity\(increase,\(mathematical_relation\(abstrac) s
5 181 M
(tion,\(relation\(entity,\(location\(region,\(function\(entity,\(location\(region,\(entity\(concept,\(g) s
5 170 M
(iven\(physical_entity,\(physical_entity\(idea,\(given\(entity,\(abstraction\(abstraction,\(people\(e) s
5 159 M
(ntity,\(concept\(abstraction,\(abstraction\(location,abstraction\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)) s
5 148 M
(\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)) s
5 137 M
(\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)', 63.80089169516415\)) s
5 126 M
(4. This maximum merit lambda function composition has lambda functions "expansion", "mathem) s
5 115 M
(atical_relation","region" which grasps the leitmotif of the text: "Expansion" is a "mathema) s
5 104 M
(tical relation" on the "region" implying numeric increase in area from 1189 sqkms to 8848 s) s
5 93 M
(qkms) s
5 82 M
(5. logs have been committed to testlogs/RecursiveLambdaFunctionGrowth.log.GraphTensorNeuron) s
5 71 M
(NetworkDeepStructurePostFix.2May2018) s
5 60 M
(6. Classifier Core number for "expansion" is also maximum at 4.) s
5 49 M
(7. Text for this is a mix of news articles from following websites:) s
5 38 M
(        https://ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Chennai_Me) s
5 27 M
(tropolitan_Area.html) s
5 16 M
(        https://en.wikipedia.org/wiki/Chennai_metropolitan_area) s
5 5 M
(        http://www.thehindu.com/todays-paper/tp-national/tp-tamilnadu/metropolitan-planning) s
_R
S
%%Page: (335) 335
%%BeginPageSetup
_S
18 36 translate
/pagenum 335 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (335) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-area-expanded/article22639607.ece) s
5 731 M
(        https://www.newstodaynet.com/index.php/2018/02/06/chennai-to-grow-from-metropolis-t) s
5 720 M
(o-megapolis/) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(-------------------) s
5 676 M
(542. \(THEORY and FEATURE-DONE\) SAT Solver Update - Parity of the Assignment - 3 May 2018) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(-------------------) s
5 643 M
(1. solve_SAT2\(\) function of CNFSATSolver.py has been changed to compute binary parity \(sum ) s
5 632 M
(of 1s\) after rounding) s
5 621 M
(and real parity \(sum of real values for variables before rounding\)) s
5 610 M
(2. Rationale is both the parities should be approximately close enough which is another mea) s
5 599 M
(sure of efficiency) s
5 588 M
(of MAXSAT approximation. Real parity is nothing but Riemann Sum Discrete Integral of the po) s
5 577 M
(lynomial through) s
5 566 M
(real assignment points.) s
5 555 M
(3. Notion of real parities is non-conventional and is introduced as proprietary NeuronRain ) s
5 544 M
(SAT Solver feature.) s
5 533 M
(4. This instance solves 1000 variables and Alpha=1.0 and MAXSAT approximation ratio is ~97%) s
5 522 M
(. LSQR solver) s
5 511 M
(has been invoked instead of LSMR because of absence of LSMR in SciPy 0.9.0) s
5 500 M
(5. Logs for this have been committed to testlogs/CNFSATSolver.1000variablesAlpha1Assignment) s
5 489 M
(Parity.3May2018) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(--------------------) s
5 445 M
(543. \(FEATURE-DONE\) SAT Solver Update - SciPy Upgrade to 1.1 for restoring LSMR - 1000 clau) s
5 434 M
(ses and Alpha=1.0) s
5 423 M
(- 16 May 2018) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(--------------------) s
5 390 M
(1. SciPy has been upgraded to SciPy 1.1 by installing scipy 1.1 wheel file as "easy_install) s
5 379 M
( scipy==1.1") s
5 368 M
(2. LSMR invocation has been uncommented and invoked restoring status quo ante) s
5 357 M
(3. Almost 150, 1000 variables and 1000 clauses random SAT instances have been solved and MA) s
5 346 M
(XSAT approximation) s
5 335 M
(ratio is > 94 pegged at 94.5% which coincides with Alpha=1.0 pattern of ~95% for all execut) s
5 324 M
(ions so far.) s
5 313 M
(4. Logs for this have been committed to testlogs/) s
5 302 M
(5. Scipy 1.1 has initial guess parameter for x \(SAT assignment\) for faster convergence whic) s
5 291 M
(h can be utilized in) s
5 280 M
(future versions of SAT Solver.) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(--------------------) s
5 236 M
(544. \(FEATURE-DONE\) Computational Geometric Factorization - Spark 2.3 Upgrade - Single Core) s
5 225 M
( - 30-bit integer) s
5 214 M
(- 17 May 2018) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(--------------------) s
5 181 M
(1.Spark has been upgraded to 2.3 \(oracle jdk 1.8\) and Hyperbolic local tile search optimiza) s
5 170 M
(tion for Computational) s
5 159 M
(Geometric Factorization has been executed for a 30-bit integer on Single Core Processor.) s
5 148 M
(2.Parallelism wont be perceptible in Single Core. This is just a dependency upgrade.) s
5 137 M
(3.Logs have been committed to testlogs/) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(------------------) s
5 93 M
(545. \(FEATURE-DONE\) SAT Solver Update - Initial Guess for LSMR - 1000 variables and Alpha=4) s
5 82 M
(.267 and 1.0) s
5 71 M
(- 18 May 2018) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(------------------) s
5 38 M
(1. SAT Solver has been updated to invoke lsmr\(\) function with an initial guess assignment v) s
5 27 M
(ector - hardcoded) s
5 16 M
(to a decimal value < 1 and close to 0 for all variables.) s
5 5 M
(2. Binary and Real parities \(Riemann Discrete Integral Sum\) are printed along side the assi) s
_R
S
%%Page: (336) 336
%%BeginPageSetup
_S
18 36 translate
/pagenum 336 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (336) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(gnment vector for each random SAT) s
5 731 M
(3. SAT Solver has been executed for 1000 variables - Alpha=1.0 and 1000 variables - Alpha=4) s
5 720 M
(.267 for this) s
5 709 M
(initial guess and logs have been captured in testlogs/CNFSATSolver.1000variablesAlpha1.0.lo) s
5 698 M
(g.initial_guess.18May2018 and testlogs/CNFSATSolver.1000variablesAlpha4.267.log.initial_gue) s
5 687 M
(ss.18May2018) s
5 676 M
(4. As usual Alpha=1.0 converges to ~95% and Alpha=4.267 to ~90% for 150 and 20 random SAT i) s
5 665 M
(terations respectively.) s
5 654 M
(5. Non-uniform choice probability for Alpha=4.267 is alomst close to theoretical random mat) s
5 643 M
(rix probability 1/sqrt\(m*n\)) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(---------------------) s
5 599 M
(546. \(THEORY\) Depth-2 Recursive Majority Circuit and a Contradiction - related to 14,319,43) s
5 588 M
(0 - 20 May 2018) s
5 577 M
(- Updates to https://sites.google.com/site/kuja27/IndepthAnalysisOfVariantOfMajorityVotingw) s
5 566 M
(ithZFAOC_2014.pdf) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(---------------------) s
5 533 M
(Depth-2 Recursive Majority Circuit consists of two levels of Majority circuits composed as:) s
5 522 M
(        Maj\(Maj1,Maj2,Maj3,...,Majn\)) s
5 511 M
(for majority functions Maj1,Maj2,...Majn for each constituencies c1,c2,c3,...,cn respective) s
5 500 M
(ly.This kind of social) s
5 489 M
( choice function is followed by most real world democracies. For Multiway Contests binary i) s
5 478 M
(ndices 0,1 for candidates are replaced by large integers. Following is a schematic for hash) s
5 467 M
( table representation of depth-2 Majority voting function for 2 candidates:) s
5 445 M
(        c1:     ########################################) s
5 434 M
(                @@@@@@@@@@@@@@@@@@@) s
5 412 M
(        c2:     ####################) s
5 401 M
(                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@) s
5 379 M
(        c3:     ################################) s
5 368 M
(                @@@@@@@@@@@@@@@@@@@@) s
5 357 M
(                ...) s
5 335 M
(for constituencies c1,c2,c3,... and for candidate0 and candidate1. Votes for Candidate0 are) s
5 324 M
( collated in bucket marked # and Votes for Candidate1 are collated in bucket marked @ per c) s
5 313 M
(onstituency by a theoretical electronic voting machine using Locality Sensitive Hashing. Wi) s
5 302 M
(nners are: ) s
5 291 M
(        For c1, Candidate0 \(#\)) s
5 280 M
(        For c2, Candidate1 \(@\)) s
5 269 M
(        For c3, Candidate0 \(#\)) s
5 258 M
(and in 2 of 3 constituencies, Candidate0 wins and therefore attains depth-2 majority. But i) s
5 247 M
(f the constituency gerrymandering vanishes and votes in all constituencies for Candidate0 a) s
5 236 M
(nd Candidate1 are summed up, Candidate1 wins- Total @\(s\) outnumber Total #\(s\). Previous has) s
5 225 M
(h table representation of depth-2 Majority function can be translated to depth-2 Majority c) s
5 214 M
(ircuit composition Maj\(Maj1,Maj2,...,Majn\). In terms of Majority depth-2 composition circui) s
5 203 M
(t this can be written as:) s
5 192 M
(        leaf: Sum\(parity\(c1,0\),parity\(c2,0\),...\) > Sum\(parity\(c1,1\),parity\(c2,1\),...\)) s
5 181 M
(        depth-1: Sum\(parity\(c1,0\),parity\(c2,0\),...\) < Sum\(parity\(c1,1\),parity\(c2,1\),...\)) s
5 170 M
(In other words, Total number of 0s > Total number of 1s at leaf of the Majority depth-2 cir) s
5 159 M
(cuit but Total number of 0s < Total number of 1s at depth 1 of the composition. Depth-2 maj) s
5 148 M
(ority is a direct consequence and application of Axiom of Choice in ZF Set Theory which sta) s
5 137 M
(tes that there exists a choice function which chooses an element from each set in a set of ) s
5 126 M
(sets possibly infinite.) s
5 104 M
(References:) s
5 93 M
(----------) s
5 82 M
(546.1 Boots and Socks Metaphor for Axiom of Choice - [Bertrand Russell] - https://en.wikipe) s
5 71 M
(dia.org/wiki/Axiom_of_choice#cite_note-30 - AoC is necessary to choose a sock but not to ch) s
5 60 M
(oose a shoe.) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(-------------------) s
5 16 M
(547. \(FEATURE-DONE\) Graph Mining - GSpan Algorithm Implementation Update - for mining patte) s
5 5 M
(rns in EventNet ) s
_R
S
%%Page: (337) 337
%%BeginPageSetup
_S
18 36 translate
/pagenum 337 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (337) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(DOT files - 21 May 2018) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-------------------) s
5 709 M
(1.GSpan GraphMining implementation has been updated to read EventNet DOT file as input) s
5 698 M
(2.This enables mining EventNet Event-Partakers Graph for patterns) s
5 687 M
(3.EventNet has been implemented in NeuronRain AsFer in C++ and Python for persisting genera) s
5 676 M
(l purpose Cloud Event-Actors conversations as Graph.) s
5 665 M
(4.EventNet is also an Economic Trading Network/Money Flow Market for KingCobra Fictitious N) s
5 654 M
(euro Electronic Currency and Buyer-Seller networks in Neuro Money Flow Markets e.g AsFer-Ki) s
5 643 M
(ngCobra Cloud Move of Neuro Currency writes out an EventNet edge in a DOT file from Buyers ) s
5 632 M
(to Sellers) s
5 621 M
(5.Mining this Economic Network EventNet requires Frequent SubGraph Mining\(GSpan\)) s
5 610 M
(6.log for this has been committed to testlogs/GraphMining_GSpan.log.21May2018) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(--------------------) s
5 566 M
(548. \(FEATURE-DONE\) ThoughtNet - Contextual Multi Armed Bandit Evocation - Update - 21 May ) s
5 555 M
(2018) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(--------------------) s
5 522 M
(1.Python implementation DeepLearning_ReinforcementLearningThoughtNet.py has been updated to) s
5 511 M
( Classify the input) s
5 500 M
(text by Recursive Gloss Overlap Definition Graph Core Number Classifier and lookup the clas) s
5 489 M
(ses in the ThoughtNet) s
5 478 M
(Hypergraph) s
5 467 M
(2.ThoughtNet Hypergraph has been recreated having classes mostly belonging to terrorism, ec) s
5 456 M
(onomics, social progress etc.,) s
5 445 M
( extracted from chronologically older thought edges.) s
5 434 M
(3.Input to ThoughtNet Reinforcement Learning has been updated to have recent events/thought) s
5 423 M
(s/stimuli) s
5 412 M
(4.Logs for the evocation of the new thoughts on the ThoughtNet hypergraph is in ThoughtNet/) s
5 401 M
(ThoughtNet_Hypergraph_Generated.txt) s
5 390 M
(5.Logs show a recent terrorist event evoking an older event of similar class among others.) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(-------------------) s
5 346 M
(549. \(FEATURE-DONE\) ThoughtNet Reinforcement Learning - Contextual Multi Armed Bandit Evoca) s
5 335 M
(tion Update) s
5 324 M
(- 22 May 2018) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(-------------------) s
5 291 M
(1. RecursiveGlossOverlap_Classifier.py has been updated to return both the definition graph) s
5 280 M
( NetworkX object) s
5 269 M
(and Recursive Gloss Overlap Intrinsic Merit) s
5 258 M
(2. RecursiveLambdaFunctionGrowth.py has been updated to return all intrinsic merits from gr) s
5 247 M
(ow_lambda_function3\(\):) s
5 236 M
(        2.1 Korner Entropy of Definition Graph) s
5 225 M
(        2.2 Bose Einstein Intrinsic Fitness) s
5 214 M
(        2.3 Graph Tensor Neuron Network Instrinsic Merit) s
5 203 M
(        2.4 Definition Graph Density) s
5 192 M
(        2.5 Definition Graph Recursive Gloss Overlap Intrinsic Merit) s
5 181 M
(        2.6 Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Merit) s
5 170 M
(3.ThoughtNet/Create_ThoughtNet_Hypergraph.py has been updated to make a choice for merit cr) s
5 159 M
(iterion by choosing between) s
5 148 M
(sentiment scoring and graph tensor neuron network intrinsic merit for ThoughtNet HyperGraph) s
5 137 M
( edges) s
5 126 M
(4.ThoughtNet/ThoughtNet_Hypergraph_Generated.txt has been recreated based on Graph Tensor N) s
5 115 M
(euron Network Intrinsic Merit and the sorted order of hyperedges for most vertices is diffe) s
5 104 M
(rent compared to) s
5 93 M
(sentiment scoring earlier) s
5 82 M
(5.Logs for previous ThoughtNet creation has been committed to ThoughtNet/testlogs/Create_Th) s
5 71 M
(oughtNet_Hypergraph.GraphTensorNeuronNetwork.log.22May2018) s
5 60 M
(6.Logs for ThoughtNet Contextual Multi Armed Bandit Evocation has been committed to testlog) s
5 49 M
(s/DeepLearning_ReinforcementLearningThoughtNet.log.22May2018) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(--------------------) s
5 5 M
(550. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Single Core - Hardy-) s
_R
S
%%Page: (338) 338
%%BeginPageSetup
_S
18 36 translate
/pagenum 338 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (338) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Ramanujan Ray Shooting Queries - 23 May 2018) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(--------------------) s
5 709 M
(1. Hard-Ramanujan Approximate Ray Shooting Queries function has been refactored to compute ) s
5 698 M
(the angle and tangent) s
5 687 M
(of the ray simply as functions of multiples of N/k*loglogN.) s
5 676 M
(2. Precisely angle between the rays must be a function of spacing/gap between prime factors) s
5 665 M
( of N which is) s
5 654 M
(at present assumed to be equal.) s
5 643 M
(3. Cramer's bound for Spacing between primes is O\(sqrt\(p\)*log\(p\)\) assuming Riemann Hypothes) s
5 632 M
(is is true while) s
5 621 M
( the best known modern bound proved in 1995 and 2001 by [Baker-Harman-Pintz] is p^\(0.525\) w) s
5 610 M
(hich is unconditional.) s
5 599 M
(4. Prime number theorem implies prime counting function ~ N/logN. Probability that a prime ) s
5 588 M
(below N is a prime factor of N is roughly: \(loglogN*logN\)/N - ratio of Hardy-Ramanujan esti) s
5 577 M
(mate and Prime Counting Function.) s
5 566 M
(5. Even with this equal spacing between prime factors, two experimental logs committed here) s
5 555 M
(with show) s
5 544 M
(previous approximate ray shooting is exact, passing through an exact factor found by tile b) s
5 533 M
(inary search. Both logs have an exact match for one factor - approximate and exact ray shoo) s
5 522 M
(ting coincide.) s
5 511 M
(6. By replacing equal spacing by a function of Cramer and Baker-Harman-Pintz Prime Gap esti) s
5 500 M
(mate might accurately fine tune the location of a factor further.) s
5 478 M
(References:) s
5 467 M
(-----------) s
5 456 M
(550.1 Gaps between Consecutive Primes - [Harald Cramer] - http://matwbn.icm.edu.pl/ksiazki/) s
5 445 M
(aa/aa2/aa212.pdf) s
5 434 M
(550.2 Gaps between Integers with Same Prime Factors - [Cochrane-Dressler] - https://pdfs.se) s
5 423 M
(manticscholar.org/0dea/870aecd2513323c6f7df6b27fc31660b215c.pdf) s
5 412 M
(550.3 Gaps between Consecutive Primes - [Baker-Harman-Pintz] - https://academic.oup.com/plm) s
5 401 M
(s/article-abstract/83/3/532/1479119) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(---------------------) s
5 357 M
(551. \(THEORY\) Computational Geometric Factorization - Hardy-Ramanujan and Prime Number Theo) s
5 346 M
(rems, Gap between) s
5 335 M
(consecutive prime factors of an integer, Ray shooting queries based on these - 24 May 2018) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(---------------------) s
5 302 M
(From [Baker-Harman-Pintz] estimate Gap between primes p\(n\) and p\(n+1\) is approximately \(p\(n) s
5 291 M
(\)\)^0.525. Combining) s
5 280 M
(Hardy-Ramanujan and Prime Number Theorem following estimate of number of primes between two) s
5 269 M
( prime factors of an) s
5 258 M
(integer N can be found:) s
5 236 M
(Approximate number of primes between 2 prime factors of N = \(Number of primes less than N\) ) s
5 225 M
(/ \(Number of prime factors of N\) ~ N/\(\(logN\)*\(loglogN\)\)) s
5 203 M
(If pf\(n\) and pf\(n+1\) are two consecutive prime factors of N, then from Prime Number Theorem) s
5 192 M
( number of primes between pf\(n\) and pf\(n+1\) = \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\) whi) s
5 181 M
(ch is equivalent to Hardy-Ramanujan and Prime Number Theorem estimate N/\(\(logN\)*\(loglogN\)\)) s
5 159 M
(=> pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\) = N/\(\(logN\)*\(loglogN\)\)) s
5 148 M
(=> pf\(n+1\)/log\(pf\(n+1\)\) = pf\(n\)/log\(pf\(n\)\) + N/\(\(logN\)*\(loglogN\)\)) s
5 126 M
(Previous relation finds the next prime factor pf\(n+1\) in terms of pf\(n\) as a logarithmic ra) s
5 115 M
(tio. Similar recurrence can be arrived at based on [Baker-Harman-Pintz] estimate too. If p1) s
5 104 M
(,p2,p3,...,pm are primes between pf\(n\) and pf\(n+1\):) s
5 93 M
(        p1 = pf\(n\) + \(pf\(n\)\)^0.525) s
5 82 M
(        p2 = p1 + p1^0.525) s
5 71 M
(        p3 = p2 + p2^0.525) s
5 60 M
(        ...) s
5 49 M
(        pf\(n+1\) = pm + pm^0.525) s
5 27 M
(Expanding this recurrence yields a continued nested exponentiation of 0.525 for pf\(n+1\) in ) s
5 16 M
(terms of pf\(n\) which must be equal to Hardy-Ramanujan-Prime Number Theorem estimate N/\(\(log) s
5 5 M
(N\)*\(loglogN\)\). This estimate for gap between two consecutive prime factors of an integer ca) s
_R
S
%%Page: (339) 339
%%BeginPageSetup
_S
18 36 translate
/pagenum 339 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (339) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(n be substituted for computing angles for prime factor points ray shooting queries in Compu) s
5 731 M
(tational Geometric Factorization in lieu of equal spacing.) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(------------------) s
5 687 M
(552. \(FEATURE-DONE\) Computational Geometric Factorization - Ray Shooting Queries - Hardy-Ra) s
5 676 M
(manujan-Prime Number Theorem and Baker-Harman-Pintz Gap between Prime Numbers - 24 May 2018) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(------------------) s
5 643 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to inc) s
5 632 M
(lude two new) s
5 621 M
(functions for ray shooting queries - 1\) based on Hardy-Ramanujan-Prime Number Theorem estim) s
5 610 M
(ate for number) s
5 599 M
(of primes between two prime factors 2\) based on Baker-Harman-Pintz Gap between prime number) s
5 588 M
(s.) s
5 577 M
(2.These two functions are quite nascent and might be refined in next commits.) s
5 566 M
(3.Two numbers have been factored and all three ray shooting query algorithms print the appr) s
5 555 M
(oximate location of) s
5 544 M
(factors.) s
5 533 M
(4.Of the three, Hardy-Ramanujan query is very simple and finds the factor exactly in most e) s
5 522 M
(xecutions \(logs show an exact match for one factor in both integers\).) s
5 511 M
(Hardy-Ramanujan-Prime Number Theorem and Baker-Harman-Pintz estimates are too skewed. But t) s
5 500 M
(heoretically latter two estimates are tighter approximations compared to Hardy-Ramanujan ra) s
5 489 M
(y shooting.) s
5 478 M
(5.Logs for these two integer factorizations have been committed to testlogs/) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(-------------------) s
5 434 M
(553. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Ray Shooting Queries) s
5 423 M
( and Cramer Prime Gap Updates - 29 May 2018) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-------------------) s
5 390 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to inc) s
5 379 M
(lude a new ray shooting query function for Cramer Prime Gaps \(sqrt\(p\)*log\(p\)\)) s
5 368 M
(2.All Four Ray Shooting Query functions have been executed on two integers and factorizatio) s
5 357 M
(n logs have been) s
5 346 M
(captured in testlogs/ \(Single Core - Spark 2.3\)) s
5 335 M
(3.Both logs don't show an exact shoot \(but are sufficiently close\)) s
5 324 M
(4.Of the Four, Hardy-Ramanujan ray shooting is still the best and estimates are close to ex) s
5 313 M
(act factors and sometimes exact.) s
5 302 M
(5.Baker-Harman-Pintz, Hardy-Ramanujan-PrimeNumberTheorem Ray Shooting functions have been s) s
5 291 M
(lightly changed for) s
5 280 M
(initial prime factor, constant for Prime Counting Function normal order etc.,) s
5 269 M
(----------) s
5 258 M
(6.Analysis:) s
5 247 M
(----------) s
5 236 M
(These ray shooting queries are Monte Carlo algorithms with an error bounded by the spacing ) s
5 225 M
(between two prime) s
5 214 M
(factors. Ray shooting to find a prime factor by Hardy-Ramanujan succeeds with a probability) s
5 203 M
( loglogN/N which is) s
5 192 M
( loglogN/2^logN=loglogN/\(2^\(2^loglogN\)\) which is exponentially small. But real benefit of r) s
5 181 M
(ay shooting queries is in the following factorization algorithm:) s
5 170 M
(        - Sequentially ray shoot O\(loglogN\) queries in O\(loglogN\) time to create beacons) s
5 159 M
(        - Distance between any two such beacon in the hyperbolic arc bow is O\(N/loglogN\)) s
5 148 M
(        - This creates O\(loglogN\) hyperbolic pixelated segments of length O\(N/loglogN\)) s
5 137 M
(        - Pixelation of O\(N/loglogN\) sized segment requires Parallel RAM sorting \(e.g. Usin) s
5 126 M
(g Cole's Parallel Sort each pixelated segment of length O\(N/loglogN\) can be sorted in O\(log) s
5 115 M
(\(N/loglogN\)\) on PRAMs.\)) s
5 104 M
(        - Each pixelated segment can be binary searched in log\(N/loglogN\) time) s
5 93 M
(        - Sequentially this requires O\(loglogN\)*O\(log\(N/loglogN\)\) time for all segments) s
5 82 M
(        - Total factorization time = O\(loglogN\) + O\(loglogN\)*O\(log\(N/loglogN\)\) + O\(loglogN\)) s
5 71 M
(*O\(log\(N/loglogN\)\) < O\(loglogN\) * O\(logN\)) s
5 60 M
(        - This PRAM algorithm does factorization in at most O\(loglogN*logN\) time compared t) s
5 49 M
(o O\(\(logN\)^2\) or O\(\(logN\)^3\) PRAM time algorithms using segment trees and sorting described) s
5 38 M
( earlier.) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(-------------------) s
_R
S
%%Page: (340) 340
%%BeginPageSetup
_S
18 36 translate
/pagenum 340 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (340) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(554. \(FEATURE-DONE\) Scheduler Analytics Update - Rewrite of scheduler analytics webserver f) s
5 731 M
(unctionality and Spark log mapreduce of "perf sched script" - 30 May 2018) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(-------------------) s
5 698 M
(1.SparkKernelLogMapReduceParser.py has been rewritten to remove hardcoded filenames and pat) s
5 687 M
(terns - new function log_mapreducer\(\) has been defined for passing log file name and patter) s
5 676 M
(n as arguments.) s
5 665 M
(2.software_analytics/DeepLearning_SchedulerAnalytics.py and software_analytics/SchedulerAna) s
5 654 M
(lytics_WebServer.py h$) s
5 643 M
(been refactored and get_stream_data\(\) \(@Generic Socket Web Server\) decorated function has b) s
5 632 M
(een moved to software$) s
5 621 M
(3.software_analytics/DeepLearning_SchedulerAnalytics.py invokes log_mapreducer\(\) defined in) s
5 610 M
( SparkKernelLogMapRed$) s
5 599 M
( for new scheduler performance file perf.data.schedscript and pattern sched_stat_runtime.) s
5 588 M
(4.New perf.data file has been created from perf utility by "perf sched record" commandline) s
5 577 M
(5.New perf.data.schedscript has been created from perf.data by "perf sched script" commandl) s
5 566 M
(ine for printing) s
5 555 M
(scheduler context switches and runtime in nanoseconds) s
5 544 M
(6.logs for both have been committed to software_analytics/testlogs/DeepLearning_SchedulerAn) s
5 533 M
(alytics.log.30May2018 and software_analytics/testlogs/SchedulerAnalytics_WebServer.log.30Ma) s
5 522 M
(y2018) s
5 511 M
(7.Perf utility support has been added for potential clockticks-to-processes dynamic hash ta) s
5 500 M
(ble creation later.) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(--------------------) s
5 456 M
(555. \(THEORY\) Non-majority social choice, Majority social choice - Boolean Composition of M) s
5 445 M
(ajority+SAT Versus SAT Oracles, Margulis-Russo Threshold , KRW Conjecture, Condorcet Jury T) s
5 434 M
(heorem and a conflict - 4 June 2018 - related to 129, 317, 355, 358, 400, 429 and all other) s
5 423 M
( Majority Voting related sections) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(--------------------) s
5 390 M
(In the theoretical drafts in this document, relativizing proofs involving oracle access to ) s
5 379 M
(Voter SAT have been) s
5 368 M
(neglected in favour of boolean function composition/communication complexity proofs based o) s
5 357 M
(n composition of ) s
5 346 M
(Majority and Voter SAT boolean functions. But a recent result has proved BQP^A is not conta) s
5 335 M
(ined in PH^A relative) s
5 324 M
(to some oracle A. This has direct relation to Condorcet Jury Theorem circuit for Majority V) s
5 313 M
(oting having SAT oracle access. P\(Good\) binomial series \(or Condorcet Jury Theorem\) equates) s
5 302 M
( Non-majority and Majority social choice based on correctness of electorate group decision ) s
5 291 M
(vis-a-vis individual decision correctness. This is tantamount to equating goodness of follo) s
5 280 M
(wing two algorithms in different complexity classes:) s
5 269 M
(        *\) LHS: An algorithm having access to PRG making a random choice of a boolean funct) s
5 258 M
(ion\(voter\) - could be in BPP/BQP/RP/BPNC/RNC) s
5 247 M
(        *\) RHS: An algorithm which does majority voting by composing Majority function and ) s
5 236 M
(Individual voter SATs - could be in PH \(DC-uniform\) if the number of variables m, per Voter) s
5 225 M
( SAT are same for all and size of the electorate is n=2^m - exponential fanin - and depth r) s
5 214 M
(estricted \(unrestricted is in EXP\).) s
5 192 M
(Assuming both LHS and RHS have equal goodness \(1-error\) of 0.5 \(by Margulis-Russo Threshold) s
5 181 M
( and Condorcet Jury Theorem\), which happens when each individual votes with correctness p=0) s
5 170 M
(.5 \(homogeneous voters\), Oracle version of the previous equality is \(for some oracle Voter ) s
5 159 M
(SAT A which has goodness p=0.5\):) s
5 148 M
(        *\) LHS: BPP^A / BQP^A / RNC^A / BPNC^A) s
5 137 M
(        *\) RHS: PH^A / EXP^A / Other larger classes) s
5 115 M
(Caveat: This assumes equal error/goodness implies lowerbounds and there are complete proble) s
5 104 M
(ms for respective classes.) s
5 82 M
(Since goodness/error is equal, if one side of the equality is a C-complete problem, the oth) s
5 71 M
(er side devours class C. E.g:) s
5 60 M
(        *\) if LHS is BQP^A-complete and RHS is PH^A, BQP^A is in PH^A - this is in direct c) s
5 49 M
(onflict with 555.1 which separates BQP and PH relative to some oracle A.) s
5 38 M
(        *\) if RHS is PH^A-complete and LHS is BQP^A, PH^A is in BQP^A) s
5 16 M
(Resolving this conflict requires:) s
5 5 M
(        *\) LHS and RHS have different Oracles \(Pseudorandom Oracle A1 for LHS and SAT Oracl) s
_R
S
%%Page: (341) 341
%%BeginPageSetup
_S
18 36 translate
/pagenum 341 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (341) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(e A2 for all voters in RHS\) - but in real-world voting nothing prohibits all voters from ma) s
5 731 M
(king a random choice and thus there is always a possibility electorate votes at random \(The) s
5 720 M
(refore Both Oracles are Pseudorandom Generators and A1=A2. This is exactly Balls-and-Bins p) s
5 709 M
(roblem described in sections on theoretical EVMs based on LSH and separate chaining hashtab) s
5 698 M
(les elsewhere in this draft\).) s
5 687 M
(        *\) ruling out existence of BPQ^A-complete problems for Voter SAT oracle A separatin) s
5 676 M
(g PH and BPQ.) s
5 665 M
(        *\) assumption of equal goodnesses of LHS and RHS implying lowerbounds is wrong.) s
5 654 M
(        *\) Oracle A which separates \(BQP^A is not in PH^A\) has goodness > 0.5 or < 0.5 viol) s
5 643 M
(ating Margulis-Russo threshold.) s
5 621 M
(But if LHS is Promise-BPP-Complete which are known to exist and RHS is PH^A, Promise-BPP is) s
5 610 M
( in PH^A.) s
5 588 M
(References:) s
5 577 M
(-----------) s
5 566 M
(555.1 Oracle Separation of BQP and PH - [AvishayTal-Raz] - https://eccc.weizmann.ac.il/repo) s
5 555 M
(rt/2018/107/download) s
5 544 M
(555.2 Margulis-Russo Threshold for Majority at p=0.5 - [RyanODonnell] - Pages 224-225 - htt) s
5 533 M
(p://www.cs.tau.ac.il/~amnon/Classes/2016-PRG/Analysis-Of-Boolean-Functions.pdf) s
5 522 M
(555.3 Promise-BPP-Complete problems - [OdedGoldreich] - http://www.wisdom.weizmann.ac.il/~o) s
5 511 M
(ded/PSX/prpr-r.pdf) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(-------------------) s
5 467 M
(556. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Ray Shooting Queries) s
5 456 M
( - Yitang Zhang Prime Gap Estimate - 5 June 2018) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(-------------------) s
5 423 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to inc) s
5 412 M
(lude a new function) s
5 401 M
(for ray shooting queries which implements recent breakthrough result in Prime Gap estimatio) s
5 390 M
(n - there are) s
5 379 M
(infinitely many twin primes separated by gap < 70000000 - by [Yitang Zhang] which refines) s
5 368 M
([Goldston-Pintz-Yildirim] Sieve. This might have effect only for finding primes between pri) s
5 357 M
(me factors of) s
5 346 M
(large integers and summing up the gap for spacing between any two prime factors.) s
5 335 M
(2.Constants k and l for multiplying estimation bounds have been changed slightly.) s
5 324 M
(3.logs for this have been committed to testlogs/ for an 8-digit 26-bit integer.) s
5 313 M
(4.None of the five ray shooting queries in the bouquet shoot exactly. But Hardy-Ramanujan i) s
5 302 M
(s still the best and) s
5 291 M
(Baker-Harman-Pintz estimate is also close enough to actual factors.) s
5 280 M
(5.Ray Shooting's success rate depends on the number and multiplicity of the prime factors -) s
5 269 M
( Integers of large Big Omega and Small Omega would have lot of prime factors taking a point) s
5 258 M
(-blank hit. In other words large multiplicative partition \(Factorisatio Numerorum\) number o) s
5 247 M
(f an integer is a pre-requisite for exact ray shooting. Finding the values of the constants) s
5 236 M
( for estimation functions which are normal orders, is presently done by trial and error.  C) s
5 225 M
(orrect values for these constants are also crucial for exact shooting.) s
5 214 M
(6.Another weird observation is the convergence of the Hardy-Ramanujan-PrimeNumberTheorem lo) s
5 203 M
(g ratio \(p/log\(p\), also known as Merit\) estimate after some iterations and this converged i) s
5 192 M
(nteger sometimes matches closely with actual factors. This has happened in earlier logs too) s
5 181 M
(.) s
5 159 M
(References:) s
5 148 M
(-----------) s
5 137 M
(556.1 Bounded Gaps between Primes - [Yitang Zhang] - http://citeseerx.ist.psu.edu/viewdoc/d) s
5 126 M
(ownload?doi=10.1.1.308.998&rep=rep1&type=pdf) s
5 115 M
(556.2 Goldston-Pintz-Yildirim Sieve - [K.Soundararajan] - https://arxiv.org/pdf/math/060569) s
5 104 M
(6.pdf - there are infinitely many twin primes such that lim sup \(p\(n+1\) - pn\) / log\(pn\) ~ 0) s
5 93 M
( - there exist prime tuples which are arbitrarily close apart) s
5 82 M
(556.3 Primes in Tuples - [Goldston-Pintz-Yildirim] - https://arxiv.org/pdf/math/0508185.pdf) s
5 71 M
( ) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(------------------) s
5 27 M
(557. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Ray shooting queries) s
5 16 M
( - correction) s
5 5 M
(- 6 June 2018) s
_R
S
%%Page: (342) 342
%%BeginPageSetup
_S
18 36 translate
/pagenum 342 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (342) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(------------------) s
5 720 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to cor) s
5 709 M
(rect the) s
5 698 M
(number of primes estimate between two factors - constant for prime counting function \(merit) s
5 687 M
(\) O\(p/logp\) has been) s
5 676 M
(moved to numerator which was earlier in denominator incorrectly.) s
5 665 M
(2.Two integers have been factored and logs have been committed to testlogs/. Both show exac) s
5 654 M
(t ray shoot finding) s
5 643 M
(factors correctly matching with actual factors. These are on Single Core + Spark 2.3 with l) s
5 632 M
(ocal[4]. This) s
5 621 M
(simulates quadcore on single core and some factors are printed out of order probably becaus) s
5 610 M
(e of Spark Driver) s
5 599 M
(Executor Threads.) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(-------------------) s
5 555 M
(558. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Hardy-Ramanujan-PNT ) s
5 544 M
(Ray Shooting - Correction - 7 June 2018) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(-------------------) s
5 511 M
(1. Mysterious convergence of merit p/logp has been investigated.) s
5 500 M
(2. This estimate equates the Prime number theorem merit difference between 2 prime factors ) s
5 489 M
(and ratio of Prime) s
5 478 M
(counting function and Hardy-Ramanujan prime factors estimate as below:) s
5 467 M
(        l*pf\(n+1\)/log\(pf\(n+1\)\) - l*pf\(n\)/log\(pf\(n\)\) = l*N/\(logN * k*loglogN\)) s
5 456 M
(3. Earlier the constant multiples k and l were missing in some places which has been rectif) s
5 445 M
(ied.) s
5 434 M
(4. Even after this, previous ratio converges after lot of iterations for l=10 and k=6. So s) s
5 423 M
(uitable value of l) s
5 412 M
(is still elusive.) s
5 401 M
(5. Two integers with large Omega \(usually numbers ending in 5 have lot of factors\) have bee) s
5 390 M
(n factored. While) s
5 379 M
(one integer has exact shoot from Hardy-Ramanujan, the other has close shave, but approximat) s
5 368 M
(e factors are quite) s
5 357 M
(in proximity to actual factors.) s
5 346 M
(6. This establishes utility of ray shooting queries as an Oracle access implementation whic) s
5 335 M
(h can be used both) s
5 324 M
(by classical P and quantum period-finding BQP \(P^A versus BQP^A\) Factoring Turing Machines ) s
5 313 M
(which at most requires) s
5 302 M
(O\(loglogN\) queries.) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(---------------------) s
5 258 M
(559. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Ray Shooting Queries) s
5 247 M
( - Constant Changes) s
5 236 M
(- 8 June 2018) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(---------------------) s
5 203 M
(1.Constants in all ray shooting query functions have been changed so that gaps are reduced ) s
5 192 M
(and possibility) s
5 181 M
(of exact hit increases. Specifically constant l for Cramer, Baker-Harman-Pintz, Zhang has b) s
5 170 M
(een made small to) s
5 159 M
(widen xrange\(\).) s
5 148 M
(2.2 integers have been factored and approximate factors for all 5 queries are printed after) s
5 137 M
( these new constant values. Zhang and Cramer queries were overshooting previously beyond N.) s
5 126 M
( None of the queries exactly shoot but are quite close to actual factors.) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(---------------) s
5 82 M
(560. \(THEORY and FEATURE-DONE\) SAT Solver Update - nonuniform_choice3\(\) damp - 2000 variabl) s
5 71 M
(es and Alpha=4.267) s
5 60 M
(- 12 June 2018) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(---------------) s
5 27 M
(1.CNFSATSolver.py - damp variable in nonuniform_choice3\(\) function has been fine tuned to m) s
5 16 M
(atch the) s
5 5 M
(theoretical probability of 1/sqrt\(m*n\) - observed probability almost matches with theoretic) s
_R
S
%%Page: (343) 343
%%BeginPageSetup
_S
18 36 translate
/pagenum 343 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (343) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(al) s
5 731 M
(2.random 3SAT instances for Number of variables=100,200,300,400,500,600,700,800,900,1000,11) s
5 720 M
(00,1200,1300,1400,1500 and 2000 for alpha=4.267) s
5 709 M
(have been solved and observed probability closely matches the random matrix probability) s
5 698 M
(3.Logs for 2000 variables and Alpha=4.267 have been committed to) s
5 687 M
( testlogs/CNFSATSolver.2000clausesAlpha4.267.log.12June2018.) s
5 676 M
(4.Observed MAXSAT approximation ratio for first few iterations hovers around 90-91-92% for ) s
5 665 M
(all previous) s
5 654 M
(variable combinations.) s
5 643 M
(5.Theoretically, if damp variable is perfectly tuned to create required bias in nonuniform ) s
5 632 M
(choice, then MAXSAT) s
5 621 M
(ratio observed for unequal variable-clause combinations should also be in the range of 94-9) s
5 610 M
(5% if not 100%.) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(--------------------) s
5 566 M
(561. \(FEATURE-DONE\) Scheduler Analytics Update - New Convolution Network for analyzing stre) s
5 555 M
(am of 2-dimensional graphics performance image data - 14 June 2018) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(--------------------) s
5 522 M
(Pictorial Performance Pattern Mining by Convolution Network:) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(--------------------) s
5 489 M
(Input to this Convolution Network is an image bitmap matrix obtained from some standard gra) s
5 478 M
(phic) s
5 467 M
(performance analyzers - runqueuelat, BPF/bcc-tools, perf etc., Following example image is c) s
5 456 M
(reated) s
5 445 M
(by "perf timechart" on perf.data which captures the state,timeslice etc., information of li) s
5 434 M
(st of) s
5 423 M
(processes in scheduler at any instant in the form of a gantt chart. Backpropagation-Convolu) s
5 412 M
(tion is) s
5 401 M
(then applied to this performance snapshot and convolution, maxpooling, final neuron layers ) s
5 390 M
(are) s
5 379 M
(computed as usual. This convolution is iterated periodically for stream of performance snap) s
5 368 M
(shot bitmaps.) s
5 357 M
(Advantages of mining graphic images of performances captured periodically are:) s
5 346 M
(       - number of dimensions of a performance snapshot image is 2 while psutils creates 1 ) s
5 335 M
(dimensional) s
5 324 M
(       array stream of data per process id.) s
5 313 M
(       - 2 dimensional performance snapshots are system wide and capture all process id\(s\) ) s
5 302 M
(at a time) s
5 291 M
(       and not process id specific.) s
5 280 M
(       - Recent advanced performance analyzers like BPF/bcc-tools provide a histogram equiv) s
5 269 M
(alent of) s
5 258 M
(       timechart in perf \(runqueuelat\) which is also an image bitmap. So support for graphi) s
5 247 M
(c performance) s
5 236 M
(       data analytics is futuristic.) s
5 225 M
(       - Processing stream of performance snapshot image bitmaps by convolution to extract ) s
5 214 M
(patterns is) s
5 203 M
(       more universal/holistic than applying convolution to stream of process structure dat) s
5 192 M
(a) s
5 181 M
(       - Specifically if remaining_clockticks-to-processes dynamic hash tables are availabl) s
5 170 M
(e as) s
5 159 M
(       stream of histogram images, applying convolution on this stream creates frequent rec) s
5 148 M
(urring) s
5 137 M
(       patterns of queueing in OS Scheduler \(Described in GRAFIT course material:) s
5 126 M
(                - https://github.com/shrinivaasanka/Grafit/blob/master/course_material/Neur) s
5 115 M
(onRain/AdvancedComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.) s
5 104 M
(txt,) s
5 93 M
(                - https://gitlab.com/shrinivaasanka/Grafit/blob/master/course_material/Neur) s
5 82 M
(onRain/AdvancedComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.) s
5 71 M
(txt) s
5 60 M
(        \)) s
5 38 M
(NOTE on linux kernel versions: All the NeuronRain commits being done \(in SourceForge and Gi) s
5 27 M
(tHub\) for the past 2 months since April 2018 are based on executions/tests on linux kernel ) s
5 16 M
(3.x.x + Single Core. Berkeley Packet Filtering\(BPF\)/bcc-tools performance analyzer which in) s
5 5 M
(cludes runqlat is recent addition to mainstream linux kernel from version 4.x.x onwards. Co) s
_R
S
%%Page: (344) 344
%%BeginPageSetup
_S
18 36 translate
/pagenum 344 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (344) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(mmits prior to April 2018 were done on a linux kernel 4.13.3 + Dual Core development enviro) s
5 731 M
(nment which was sabotaged by a probable severe Cybercrime in first week of April 2018 causi) s
5 720 M
(ng catastrophic damage to partitions and hardware failure too making recovery impossible. T) s
5 709 M
(his incident caused total destruction of all dev and build setups necessitating full checko) s
5 698 M
(uts from GitHub and SourceForge repositories and continued development on another base linu) s
5 687 M
(x kernel of lesser version which does not support BPF/bcc-tools. Previous provision for gra) s
5 676 M
(phic performance data pattern recognition is mainly targeted towards supporting BPF/bcc-too) s
5 665 M
(ls in future.) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-------------------) s
5 621 M
(562. \(THEORY\) Computational Geometric PRAM-NC Factorization, Ray Shooting Query Oracles, Qu) s
5 610 M
(antum NC, Quantum ) s
5 599 M
(Factorization, Classical-Quantum Transition and Knot Theory - related to 34,351,555 - 15 Ju) s
5 588 M
(ne 2018 and) s
5 577 M
(18 June 2018) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(--------------------) s
5 544 M
(Earlier sections define various Ray Shooting Query functions on Hyperbolic curve to find ap) s
5 533 M
(proximate factors - ) s
5 522 M
(Hardy-Ramanujan, Prime Number Theorem, Baker-Harman-Pintz, Zhang, Cramer etc.,These Ray sho) s
5 511 M
(oting functions are) s
5 500 M
(utilized as supporting preprocessing oracles to k-mergesort, local tile search, segment tre) s
5 489 M
(es based PRAM factorization algorithms - oracles locate prime factors approximately and som) s
5 478 M
(etimes exactly in sequential time of O\(loglogN\). If an oracle ray shooting query succeeds, ) s
5 467 M
(factorization is over in O\(loglogN\) steps with no necessity for further pixelation of hyper) s
5 456 M
(bolic curve and mergesort/search for factors in PRAM-NC - of parallel time O\(\(logN\)^2\) or O) s
5 445 M
(\(\(logN\)^3\). If an oracle ray shooting query is approximate, PRAM k-mergesort/search phase o) s
5 434 M
(f factorization is taken up using the approximate factors queried by ray shooting as beacon) s
5 423 M
(s - search in vicinity of approximate factor should easily locate the exact factor. Therefo) s
5 412 M
(re a factorization involving both ray shooting queries and k-mergesort/segment trees/tile s) s
5 401 M
(earch is a problem in complexity class NC^A where A is a ray shooting query oracle in P or ) s
5 390 M
(NC \(if O\(loglogN\) parallel ray shooting queries are made on O\(loglogN\) PRAMs in O\(1\) time\).) s
5 379 M
( Similar to classical NC, Quantum NC is the class of problems solvable in polynomial size q) s
5 368 M
(uantum circuits \(controlled-U gates, controlled-not gates, Hadamard gates\) in polylogarithm) s
5 357 M
(ic time. There exists an oracle A such that P^A=BQP^A and NC^A is contained in P^A. Also BQ) s
5 346 M
(P is contained in AWPP i.e. any quantum computation can be simulated by a GapP function f\(x) s
5 335 M
(\) computed by a NPTIME Turing Machine \(= number of accepting paths of x - number of rejecti) s
5 324 M
(ng paths of x\) such that:) s
5 313 M
(        Pr\(M\(x\) accepts] = f\(x\)/5^\(2*t\(x\)\)) s
5 302 M
(for a Turing Machine M\(x\) in BQP. Since NC is contained in QNC, PRAMs in NC Factorization c) s
5 291 M
(an be termed as decohered quantum gates in corresponding QNC algorithm. Since Every quantum) s
5 280 M
( computation can be transformed into a braid evaluated by Jones Polynomial, an oracle A of ) s
5 269 M
(Jones Polynomial can be non-constructively shown to exist such that quantum part in a BQP T) s
5 258 M
(uring Machine is mapped to a deterministic computation. Theorem 6.1 in reference 562.4 defi) s
5 247 M
(nes such a Jones polynomial PTIME braid oracle A so that BQP is contained in P^A.) s
5 225 M
(Computational Geometric Factorization involves both Parallel and Sequential phases - Pixela) s
5 214 M
(ting hyperbolic arc bow and k-mergesorting/segment-tree them requires parallel RAMs whereas) s
5 203 M
( binary search of k-mergesorted/segment-tree tiles can be done by sequential binary search ) s
5 192 M
(with no necessity for PRAMs. If each PRAM is replaced by a Quantum Gate, computational geom) s
5 181 M
(etric factorization can be done in QNC instead of NC which is contained in BQP. Following a) s
5 170 M
(lgorithm maps the mergesort and search of hyperbolic tiles as below and does away with sort) s
5 159 M
(ing and searching.) s
5 137 M
(---------------------------------------------------------------------------------) s
5 126 M
(Pixelated Hyperbolic arc bow as superposition of quantum state pixels) s
5 115 M
(---------------------------------------------------------------------------------) s
5 104 M
(Set of pixel coordinates in pixelated hyperbolic arc bow can be construed as superposed pix) s
5 93 M
(el quantum states each of some amplitude:) s
5 82 M
(        |\(p,q\)> = B1|\(x1,y1\)> + B2|\(x2,y2\)| + ... + Bn|\(xO\(N\),yO\(N\)\)>) s
5 71 M
(for complex amplitudes Bi of O\(N\) coordinate states in pixelated hyperbolic arc. This super) s
5 60 M
(position implies all the coordinates of hyperbolic arc simultaneously have certain probabil) s
5 49 M
(ity of being the factor of N. Factorization reduces to maximizing probability of decoherenc) s
5 38 M
(e of this superposition to correct classical factor state |\(xl,yl\)> i.e xl*yl=N.) s
5 16 M
(Number of distinct prime factors of N = kloglogN for some constant k from Hardy-Ramanujan T) s
5 5 M
(heorem. Set of all factors = Set of all multiplicative partitions of N. Average Probability) s
_R
S
%%Page: (345) 345
%%BeginPageSetup
_S
18 36 translate
/pagenum 345 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (345) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( of a coordinate in pixelated hyperbolic arc to be the factor of N = O\(\(Multiplicative Part) s
5 731 M
(ition Number of N\) / N\). But square of complex amplitude Bi^2 is the classical probability ) s
5 720 M
(of a pixel coordinate state |\(xi,yi\)>. Each state |\(xi,yi\)> is created by a quantum toffoli) s
5 709 M
( multiplication gate and requires 2*logN qubits. Amplitude Bi for each state |\(xi,yi\)> can ) s
5 698 M
(be defined as the complex number function of coordinate:) s
5 687 M
(        Bi = f\(xi,yi\) + i*g\(xi,yi\)) s
5 676 M
(Classical probability of being a factor of N = Bi^2 which is 1 for factor points. Solving B) s
5 665 M
(i^2 = 1, yields f and g. ) s
5 643 M
(Classical probability \( \(modulus\(Bi\)\)^2 \) of pixel coordinate state |\(xi,yi\)> - assumed to ) s
5 632 M
(be normalized so that) s
5 621 M
(Sum\(Bi^2\) = 1 - can be defined as below:) s
5 610 M
(        \(modulus\(Bi\)\)^2 = f\(xi,yi\)^2 + g\(xi,yi\)^2 = floor\(1 - abs\(xi*yi/N - 1\)\)) s
5 599 M
(which is 1 only if xi*yi = N, the factor point, and is 0 if xi*yi/N > 1 or xi*yi/N < 1 , th) s
5 588 M
(e non-factor points on pixelated hyperbolic arc bow, because floor\(\) makes the enclosing fr) s
5 577 M
(action to 0.) s
5 555 M
(---------------------------------------------------------------------------------) s
5 544 M
(Quantum NC equivalent of Classical PRAM-NC Computational Geometric Factorization:) s
5 533 M
(---------------------------------------------------------------------------------) s
5 522 M
(        - Input to the quantum NC circuit is the equation for hyperbola, xy=N) s
5 511 M
(        - Length of pixelated hyperbolic arc bow is O\(N\) or approximately 1.5N-1) s
5 500 M
(        - For factorization it suffices if each pixel \(p,q\) in the pixelated hyperbola is i) s
5 489 M
(nput to a ) s
5 478 M
(        quantum gate and it is verified by all gates in parallel if pq=N) s
5 467 M
(        - Succeeding multiplication gates with pq=N find factors p,q in parallel. This is s) s
5 456 M
(imilar to) s
5 445 M
(        multiplication in modular exponentiation subroutine of Shor Factorization \(or\) a qu) s
5 434 M
(antum) s
5 423 M
(        multiplication circuit similar to reference 562.7) s
5 412 M
(        - Pixelated Tiles and their pixel coordinates are found in parallel by tiling equat) s
5 401 M
(ion N/\(x\(x+1\)\)) s
5 390 M
(        - Each multiplication gate for p,q has 2*logN bits inputs - |p| + |q|) s
5 379 M
(        - Number of multiplication gates required < 1.5N-1 \(adheres to QNC definition if in) s
5 368 M
(put size is N and) s
5 357 M
(        not logN\)) s
5 346 M
(        - No sorting and search is necessary ) s
5 335 M
(        - Modular multiplication of pixel coordinates \(p,q\) = pq mod N and verifying it to ) s
5 324 M
(be 0 is sufficient to conclude p,q are divisors/factors of N. Succeeding Quantum Modular Mu) s
5 313 M
(ltiplication Gates have pq mod N = 0 and each modular multiplication gate is of polylogarit) s
5 302 M
(hmic depth) s
5 291 M
(        - Exact sum of tiles of pixelated hyperbolic arc bow:) s
5 280 M
(        N/\(1.2\) + N/\(2.3\) + ... N/\(\(N-k\)\(N-k+1\)\) = N*{1/1 - 1/2 + 1/2 - 1/3 + 1/3 - 1/4 + .) s
5 269 M
(.. + 1/\(N-k\) - 1/\(N-k+1\)}) s
5 258 M
(        = N*\(1 - 1/\(N-k+1\)\) = N*\(N-k\)/\(N-k+1\)) s
5 247 M
(        But tiling ends when N=\(N-k\)\(N-k+1\) or N=N^2 - 2Nk + N + k^2 - k) s
5 236 M
(        => k^2 - k\(2N+1\) + N^2 = 0) s
5 225 M
(        \(or\) k = [\(2N+1\) +/- sqrt\(4N^2 + 4N + 1 - 4N^2\)]/2) s
5 214 M
(        => k = [\(2N+1\) +/- sqrt\(4N + 1\)]/2 ) s
5 203 M
(        => k ~ N - sqrt\(N\) + 0.5 = Approximate Number of tiles\(arrays of pixels\)) s
5 192 M
(        => Sum of tile lengths = N*\(N-N+sqrt\(N\)-0.5\)/\(N-N+sqrt\(N\)+0.5\) ) s
5 181 M
(        => Sum of tile lengths = N*\(sqrt\(N\)-0.5\)/\(sqrt\(N\)+0.5\) ~ 0.999999...*N for large N) s
5 170 M
(        - Tiling phase also requires Quantum multiplication gates e.g Division in N/\(x\(x+1\)) s
5 159 M
(\) is converted to a multiplication circuit \([BeameCookHoover] - division reduces to multipl) s
5 148 M
(ication\)) s
5 126 M
(References:) s
5 115 M
(-----------) s
5 104 M
(562.1 Quantum NC - https://arxiv.org/pdf/quant-ph/9808027.pdf) s
5 93 M
(562.2 Shor's Factorization simulated on GPUs \(comparison to Microsoft LIQuiD Quantum simula) s
5 82 M
(tor\) - https://arxiv.org/pdf/quant-ph/9808027.pdf) s
5 71 M
(562.3 Complexity limitations on Classical Computation - [Fortnow-Rogers] - https://arxiv.or) s
5 60 M
(g/pdf/cs/9811023.pdf - BQP is in AWPP \(Lemma 3.2\) and P^A=BQP^A \(Theorem 4.1\)) s
5 49 M
(562.4 Approximate Counting and Quantum Computation - [M. Bordewich, M. Freedman, L. Lovasz,) s
5 38 M
( D. Welsh] - http://web.cs.elte.hu/~lovasz/morepapers/additive1.pdf - "...A classical polyn) s
5 27 M
(omial time algorithm can convert a quantum circuit for an instance of such a problem, into ) s
5 16 M
(a braid, such that the probability that the output of the quantum computation is zero, is a) s
5 5 M
( simple \(polynomial time\) function of the Jones polynomial of the braid at a 5th root of un) s
_R
S
%%Page: (346) 346
%%BeginPageSetup
_S
18 36 translate
/pagenum 346 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (346) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ity. For an exact statement of this see Freedman, Kitaev, Larsen and Wang [5], or the more ) s
5 731 M
(detailed papers by Freedman, Kitaev and Wang [6], and Freedman, Larsen and Wang [7, 8]. ...) s
5 720 M
(" and "...The Kitaev-Solvay theorem, [K, S] together with the density theorem ,Freedman, La) s
5 709 M
(rsen and Wang [7, 8], yields an algorithm for an approximation of any gate by a braid of le) s
5 698 M
(ngth polylog \(1/e\) under a Jones representation. We take the number of strings m, as the si) s
5 687 M
(ze of the input, however the number of crossings in the link is the same as the number of g) s
5 676 M
(ates in the BQP computer, which is bounded by a polynomial in the input size, hence an algo) s
5 665 M
(rithm will be polynomial with respect to both measures \(or neither\)..." -  Theorem 6.1 - "L) s
5 654 M
(et A\(L\) be an oracle that returns the sign of the Jones polynomial of the link L evaluated ) s
5 643 M
(at e^2\317\\200i/5 . Then BQP \342\\212\\206 P^A") s
5 632 M
(562.5 Jones Polynomial, Knot Theory and Equivalence of Quantum and Classical Computation - ) s
5 621 M
(https://en.wikipedia.org/wiki/Jones_polynomial - related to 562.4 - Quantum part of any com) s
5 610 M
(putation can be replaced by approximate evaluation of Jones Polynomial of certain braid und) s
5 599 M
(er a Jones representation.) s
5 588 M
(562.6 Shor Quantum Factorization - [Peter Shor] - \(1995\) and \(1996\) - https://arxiv.org/abs) s
5 577 M
(/quant-ph/9508027 - modular exponentiation and Quantum Fourier Transform of an integer stat) s
5 566 M
(e |a>) s
5 555 M
(562.7 Quantum Karatsuba Integer Multiplication - https://arxiv.org/pdf/1706.03419.pdf) s
5 544 M
(562.8 Quantum Multiplication Modulo N Gate Example - https://www.math.ksu.edu/reu/sumar/Qua) s
5 533 M
(ntumAlgorithms.pdf - Depth of multiplication gates is polylogarithmic in N.) s
5 522 M
(562.9 Log Depth Circuits for Division and Related Problems - [BeameCookHoover] - https://pd) s
5 511 M
(fs.semanticscholar.org/29c6/f0ade6de6c926538be6420b61ee9ad71165e.pdf) s
5 500 M
(562.10 Quantum Machine Learning - HHL Algorithm - https://www.scottaaronson.com/papers/qml.) s
5 489 M
(pdf - HHL solves system of linear equations Ax=B in quantum logarithmic time. Quantum RAM l) s
5 478 M
(oads the classical amplitudes of all states - Quoted excerpts - "...If the HHL algorithm co) s
5 467 M
(uld be adapted to the case where \(say\) a single bi is 1 and all the others are 0, then it w) s
5 456 M
(ould contradict the impossibility of an exponential speedup for black-box quantum search, w) s
5 445 M
(hich was proved by Bennett, Bernstein, Brassard, and Vazirani...". This is relevant in the ) s
5 434 M
(context of pixel state superposition above i.e if exactly one Bi corresponding to a factor ) s
5 423 M
(point is made to 1 and all others are 0, factorization immediately follows. HHL algorithm f) s
5 412 M
(its well in the context of least squares SAT solver also which maps 3SAT clauses to system ) s
5 401 M
(of linear equations and finds assignments approximately by solving random matrix equation, ) s
5 390 M
(Ax=B.) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(----------------) s
5 346 M
(563. \(THEORY and FEATURE-DONE\) Random 3SAT Approximate LSQR/LSMR Solver update - Increase i) s
5 335 M
(n Accuracy) s
5 324 M
(- 19 June 2018) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(----------------) s
5 291 M
(1.CNFSATSolver.py has been updated to increase the accuracy of least squares approximation ) s
5 280 M
(of SAT assignments) s
5 269 M
(by setting atol=btol=conlim=0 as prescribed by SciPy documentation in :) s
5 258 M
(https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.sparse.linalg.lsmr.html) s
5 247 M
(Also set the damp to a low value close to zero to solve the 3SAT as regularized least squar) s
5 236 M
(es problem which is) s
5 225 M
(a generalization of least squares.) s
5 214 M
(2.Random 3SAT instances of 1000 variables and Alpha=1.0 have been solved and MAXSAT approxi) s
5 203 M
(mation ratio for this) s
5 192 M
(converge to ~97% for few iterationsA) s
5 181 M
(3.This increase in accuracy slows down LSMR. But by better least squares optimization which) s
5 170 M
( is parallelizable on cloud viz., LSRN - http://web.stanford.edu/group/SOL/software/lsrn/ w) s
5 159 M
(hich is recent parallel algorithm for) s
5 148 M
(solving least squares \(LSRN paper - http://web.stanford.edu/group/SOL/papers/lsrn-sisc-2014) s
5 137 M
(.pdf\) this slow down can be remedied. Invoking LSRN instead of LSMR implies SAT Solver can ) s
5 126 M
(be executed on cloud.) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(------------------) s
5 82 M
(564. \(THEORY and FEATURE-DONE\) SAT Solver Update - Randomized Rounding and other linear sys) s
5 71 M
(tem of equation solvers - 21 June 2018) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(------------------) s
5 38 M
(1.SAT Solver has been updated to include a special if condition to check if Alpha=1 and dir) s
5 27 M
(ectly invoke) s
5 16 M
(linear system of equations solvers instead of least squares regression solvers. Various sys) s
5 5 M
(tem of equations) s
_R
S
%%Page: (347) 347
%%BeginPageSetup
_S
18 36 translate
/pagenum 347 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (347) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(solvers like minres,cg,solve and their variants in ScipPy were tried for number_of_clauses=) s
5 731 M
(=number_of_variables) s
5 720 M
( and minres was found to be the best equalling lsmr's accuracy. But they have been commente) s
5 709 M
(d and lsmr\(\) is) s
5 698 M
(invoked with no regularization damp for Alpha=1) s
5 687 M
(2.Randomized Rounding of the fractional real assignments computed from least squares has be) s
5 676 M
(en refined. Earlier) s
5 665 M
(the rounding threshold was set to 0.5 which has been generalized to the midpoint of the ass) s
5 654 M
(ignment array \(\(min + max\)/2\)) s
5 643 M
(3. This midpoint computation is important because it finds the halfway inflexion point of t) s
5 632 M
(he polynomial traversing the real assignment points. This polynomial is approximated to a s) s
5 621 M
(tep function of 1s and 0s based on whether the assignment for a variable is above or below ) s
5 610 M
(half-way mark.) s
5 599 M
(4. Polynomial through the fractional assignment points is sinusoidal and it crosses this mi) s
5 588 M
(dpoint in as many places as there are 0-to-1 and 1-to-0 inflexions.) s
5 577 M
(5. Another randomized rounding scheme is also implemented by computing a pseudorandom fract) s
5 566 M
(ion between 0 and 1 as) s
5 555 M
(threshold. Midpoint threshold is quite accourate and is mostly 0.5 which is on the expected) s
5 544 M
( lines, while values) s
5 533 M
(other than 0.5 are caused because of negative values to some variables in least squares. Th) s
5 522 M
(is follows the usual) s
5 511 M
(randomized rounding convention \(e.g for Set Cover\).) s
5 500 M
(6. Few Random SAT instances of 1000 variables and Alpha=1 have been computed and MAXSAT app) s
5 489 M
(roximation ratio has been found to be 97-98% which is captured in logs. In some other execu) s
5 478 M
(tions, this ratio touched even 98.5%) s
5 467 M
(7. Accuracy of randomized rounding threshold is crucial to maximizing MAXSAT ratio.) s
5 456 M
(8. Quantum HHL algorithm solves system of equations Ax=B in logarithmic time while previous) s
5 445 M
( classical solvers) s
5 434 M
(are polynomial in clauses-variables. Theoretically this SAT Solver invoking HHL on a quantu) s
5 423 M
(m computer should be) s
5 412 M
(able to solve SAT NP-Complete problem approximately in logtime and thus in BQ-P \(or BQ-NC\).) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(----------------) s
5 368 M
(565. \(FEATURE-DONE\) Query Index and Ranking - Sorting by merit - 22 June 2018) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(----------------) s
5 335 M
(1.QueryIndexAndRank.py has been changed to sort the results queried from LSH and ThoughtNet) s
5 324 M
( indices by) s
5 313 M
(descending order of Graph Tensor Neuron Network Intrinsic Merit. Earlier sorting was missin) s
5 302 M
(g. Two) s
5 291 M
(dictionaries have been created for LSH and ThoughtNet index rankings and are sorted descend) s
5 280 M
(ing.) s
5 269 M
(2.Locations of ThoughtNet Hypergraph have been updated in Indexing/) s
5 258 M
(3.Logs for the ranking have been captured in testlogs/QueryIndexAndRank.log.22June2018) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(--------------------) s
5 214 M
(566. \(THEORY\) Exact Learning of Boolean Functions\(e.g absolute CNF\) and Intrinisic Merit - ) s
5 203 M
(22 June 2018) s
5 192 M
(- related to 529) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(--------------------) s
5 159 M
(Intrinsic Merit problem has been defined as MAXSAT problem earlier assuming there exists an) s
5 148 M
( absolute universal) s
5 137 M
(CNF which accepts merit variable values from texts/AVs. Merit variables in this universal C) s
5 126 M
(NF are boolean) s
5 115 M
( based on threshold: if a merit value > threshold, merit variable is 1 and 0 otherwise. For) s
5 104 M
( example if graph) s
5 93 M
(tensor neuron network intrinsic merit of a text exceeds a threshold, corresponding variable) s
5 82 M
( "intrinsic_merit") s
5 71 M
(in universal CNF is set to 1. Texts/AVs are ranked by descending order of percentage of cla) s
5 60 M
(uses satisfied in this) s
5 49 M
(universal CNF which is MAXSAT problem. Problem is how to learn this universal CNF if it exi) s
5 38 M
(sts. There are ) s
5 27 M
(approximate learning algorithms like PAC learning which can learn a concept class approxima) s
5 16 M
(tely correctly) s
5 5 M
(with a bounded error. Traditional exact learning model uses halving algorithm based on memb) s
_R
S
%%Page: (348) 348
%%BeginPageSetup
_S
18 36 translate
/pagenum 348 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (348) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ership and ) s
5 731 M
(equivalence queries to gradually shrink the concept class to 1 element. Number of queries r) s
5 720 M
(equired are log|C|.) s
5 709 M
(Membership queries ask an oracle if x is in C and equivalence queries ask an oracle if f\(x\)) s
5 698 M
(=h\(x\). This halving) s
5 687 M
(algorithm is analogous to interval halving proof of Bolzano-Weierstrass Theorem which state) s
5 676 M
(s that every infinite sequence has a convergent monotone subsequence. Applying this halving) s
5 665 M
( procedure to set of all texts and AVs couldexactly learn a universal CNF in logarithmic nu) s
5 654 M
(mber of Angluin model membership and counterexample/equivalence ) s
5 643 M
(queries.) s
5 621 M
(References:) s
5 610 M
(-----------) s
5 599 M
(566.1 Oracles and Queries That Are Sufficient for Exact Learning - [Nader H. Bshouty, Richa) s
5 588 M
(rd Cleve, Ricard Gavaldah, Sampath Kannan and Christino Tamon] - https://ac.els-cdn.com/S00) s
5 577 M
(2200009690032X/1-s2.0-S002200009690032X-main.pdf?_tid=735940ad-7047-40d2-a9a7-2575422672c3&) s
5 566 M
(acdnat=1529665709_798fd8cba3f740826f4c3ce299cdb6c1) s
5 555 M
(566.2 Bolzano-Weierstrass theorem and its application to MARA - https://en.wikipedia.org/wi) s
5 544 M
(ki/Bolzano%E2%80%93Weierstrass_theorem) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(-------------------) s
5 500 M
(567. \(FEATURE-DONE\) Streaming Analytics - Facebook Graph API - Python 3.4 and facebook-sdk ) s
5 489 M
(- 29 June 2018) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(-------------------) s
5 456 M
(1.Similar to Streaming_<datasource>.py for LinkedIn and Twitter, Streaming_FacebookData.py ) s
5 445 M
(has been added to) s
5 434 M
(NeuronRain AsFer repositories in SourceForge,GitHub and GitLab.) s
5 423 M
(2.This imports facebook-sdk for python 3.4. This is the first python implementation on pyth) s
5 412 M
(on 3.4.) s
5 401 M
(3.This upgrade to python 3.4 from python 2.7 is necessitated because:) s
5 390 M
(        3.1 facebook-sdk on python 2.7 requires python 2.7.9) s
5 379 M
(        3.2 But importing facebook-sdk on Python 2.7.9 raises errors related to _ssl and _h) s
5 368 M
(ashlib \(md5,sha etc.,\)) s
5 357 M
(which are not by default supported by python 2.7.9) s
5 346 M
(        3.3 Enabling SSL flags in Modules/Setup.dist for python 2.7.9 non-system builds als) s
5 335 M
(o does not resolve this error and ssl is not built along with python) s
5 324 M
(        3.4 Facebook sdk supports only python 3.4 and 3.7 in 3.x) s
5 313 M
(        3.5 Python3.4 has been installed from a non standard PPA) s
5 302 M
(        3.6 VirtualEnv, EasyInstall3, PIP also do not solve the above SSL import issue) s
5 291 M
(        3.7 In python3.4 too, lot of facebook-sdk dependencies have to be git-cloned,built ) s
5 280 M
(and installed \(requests, idna, certifi, chardet etc.,\) for facebook import to work) s
5 269 M
(4. Example temporary access token has been created from from https://developers.facebook.co) s
5 258 M
(m/tools/explorer/) s
5 247 M
(5. Simple name and id REST query has been done using requests and logs committed to testlog) s
5 236 M
(s/) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(-----------------) s
5 192 M
(568. \(FEATURE-DONE\) Streaming Analytics - Facebook Graph - 2 July 2018) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(-----------------) s
5 159 M
(1.Streaming_FacebookData.py has been parametrized to accept user name as commandline argume) s
5 148 M
(nt) s
5 137 M
(        $python3.4 Streaming_FacebookData.py <facebook_user>) s
5 126 M
(2.Wall Posts and Friends of a user are obtained by facebook-sdk REST) s
5 115 M
(3.Friends generator object is iterated and printed) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(------------) s
5 71 M
(569. \(THEORY and FEATURE\) SAT Solver - Discrete Fourier Transform \(FFT\) of the real assignm) s
5 60 M
(ent,) s
5 49 M
(Parseval/Plancherel Theorems, Semidefinite Programming Approximation and Least Squares - 3 ) s
5 38 M
(July 2018) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(------------) s
5 5 M
(1. SAT Solver has been updated to compute Fast Fourier Transform of the real assignment poi) s
_R
S
%%Page: (349) 349
%%BeginPageSetup
_S
18 36 translate
/pagenum 349 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (349) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(nts for each) s
5 731 M
(random 3SAT.) s
5 720 M
(2. Discrete Fourier Transform of set of points is:) s
5 709 M
(        X\(N\) = Sum\(x\(n\) * e^\(2*pi*n*k/N\)\), k=0,1,2,...,N-1) s
5 698 M
(X\(i\) are frequencies and x\(i\) are discrete points in real assignment vector computed from L) s
5 687 M
(east Squares) s
5 676 M
(3. Mapping the real assignment points to frequency domain enables finding periodicity withi) s
5 665 M
(n the real assignments and) s
5 654 M
(applying Parseval/Plancherel Theorems \(https://en.wikipedia.org/wiki/Discrete_Fourier_trans) s
5 643 M
(form\)) s
5 632 M
(4. Parseval Theorem equates the inner product of two vectors to inner product of Fourier Tr) s
5 621 M
(ansform Frequencies.) s
5 610 M
(5. Inner product of two assignment vectors \(exact binary and real approximate - for values ) s
5 599 M
(of variables\)) s
5 588 M
(is a measure of distance between the exact \(if known\) and approximate assignments) s
5 577 M
(6. Least Square Approximation solves the system of linear equations AX = B for random 3SAT ) s
5 566 M
(while Semidefinite) s
5 555 M
(Programming \(SDP\) solves the Convex Optimization Problem:) s
5 544 M
(                maximize/minimize: Double_Summation\(a\(i,k\)*xi * yk\)) s
5 533 M
(                Subject to Constraints: Double_Summation\(cl*xi*yk\) < bl) s
5 522 M
(7. In other words, SDP solves:) s
5 511 M
(                maximize/minimize: A*X) s
5 500 M
(                Subject to Constraints: C*X < B) s
5 489 M
(                X is a Positive Semidefinite Gramian Matrix having entries from inner produ) s
5 478 M
(ct space of vectors) s
5 467 M
(                \(or v*X*v^T is non-zero for real vectors v\)) s
5 456 M
(8. [Goemans-Williamson] MAXCUT Approximation algorithm - http://www-math.mit.edu/~goemans/P) s
5 445 M
(APERS/maxcut-jacm.pdf -Journal of the Association for Computing Machinery,vol. 42, No.6, No) s
5 434 M
(vember1995 - solves) s
5 423 M
(MAXCUT in ~88% by SDP.) s
5 412 M
(9. Any symmetric matrix can be approximated to nearest positive semidefinite matrix \(e.g co) s
5 401 M
(v_nearest - http://www.statsmodels.org/dev/generated/statsmodels.stats.correlation_tools.co) s
5 390 M
(v_nearest.html\)) s
5 379 M
(10. There is an SDP variation of least squares, Semidefinite Least Squares, which solves th) s
5 368 M
(e convex program:) s
5 357 M
(                minimize: |X-C|^2) s
5 346 M
(                Subject to: AX=B for positive semidefinite matrix X.) s
5 335 M
(which is similar to least squares solution for variable vector X. X is positive semidefinit) s
5 324 M
(e because for any real) s
5 313 M
(vector v and some assignment to X, v*X*vT is positive. Minimizing |X-C|^2 for some binary a) s
5 302 M
(ssignment C) s
5 291 M
(finds closest approximation of X to binary step function characterized by C. \(Example: http) s
5 280 M
(s://ljk.imag.fr/membres/Jerome.Malick/Talks/08-louvain.pdf\)) s
5 269 M
(11.logs for 2000 variables and alpha=1 have been committed to testlogs/ which show usual MA) s
5 258 M
(XSAT approximation) s
5 247 M
(ratio convergence to >= 97%) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(-------------------) s
5 203 M
(570. \(THEORY and FEATURE\) Computational Geometric Factorization, Ray Shooting Query Oracles) s
5 192 M
(, ABC Conjecture) s
5 181 M
(- related to 486, 527, 550, 558 and all other sections on factorization - 6 July 2018) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(-------------------) s
5 148 M
(ABC Conjecture implies there exist finite number of coprime integer triples a,b,c as soluti) s
5 137 M
(ons to diophantine ) s
5 126 M
(equation c=a+b constrained by:) s
5 115 M
(                        log\(c\)) s
5 104 M
(        quality =       ------          < 1 + epsilon for all epsilon > 0) s
5 93 M
(                        log\(rad\(abc\)\) ) s
5 82 M
(radical\(N\) or rad\(N\) is the product of distinct prime factors of N \(square-free\).) s
5 60 M
(Gap between numbers c and a having same prime factors has been conjectured in reference 570) s
5 49 M
(.1 as: ) s
5 38 M
(c - a > C\(epsilon\)a^\(0.5-epsilon\) which is derived from ABC Conjecture. This is contrasted ) s
5 27 M
(against the observed) s
5 16 M
(convergence of merit difference in Hardy-Ramanujan-PrimeNumberTheorem ray shooting query or) s
5 5 M
(acle:) s
_R
S
%%Page: (350) 350
%%BeginPageSetup
_S
18 36 translate
/pagenum 350 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (350) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        l*pf\(n+1\)/log\(pf\(n+1\)\) - l*pf\(n\)/log\(pf\(n\)\) = l*N/\(logN * k*loglogN\)) s
5 731 M
(which is the approximate gap between merit of n-th and \(n+1\)st prime factors pf\(n\) and pf\(n) s
5 720 M
(+1\) of an integer N.) s
5 709 M
(An example factorization and ray shooting query log has been committed which shows actual a) s
5 698 M
(nd ray shooting estimates of factors in 4 of 5 algorithms \(Hardy-Ramanujan, Hardy-Ramanujan) s
5 687 M
(-PNT, Cramer, Baker-Harman-Pintz\) which are in close agreement \(off by small distance for m) s
5 676 M
(ost factors\) and Hardy-Ramanujan-PNT estimate converges. If c=N1 and a=N2 are two integers ) s
5 665 M
(having same prime factors, previous Hardy-Ramanujan-PNT ray shooting estimate of gap betwee) s
5 654 M
(n prime factors for N1 and N2 is:) s
5 643 M
(        l1*pf\(n+1\)/log\(pf\(n+1\)\) - l1*pf\(n\)/log\(pf\(n\)\) = l1*N1/\(logN1 * k1*loglogN1\)) s
5 632 M
(        l2*pf\(n+1\)/log\(pf\(n+1\)\) - l2*pf\(n\)/log\(pf\(n\)\) = l2*N2/\(logN2 * k2*loglogN2\)) s
5 621 M
(rewriting N1 and N2 in terms of merit difference of prime factors:) s
5 610 M
(        \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\)*logN1*k1*loglogN1 = N1 = pf1^s1 * pf2^s2 ) s
5 599 M
(* ... * pfn^sn) s
5 588 M
(        \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\)*logN2*k2*loglogN2 = N2 = pf1^t1 * pf2^t2 ) s
5 577 M
(* ... * pfn^tn) s
5 566 M
(        => N1 - N2 = c - a > C\(epsilon\)*N2^\(0.5-epsilon\) if ABC conjecture is true) s
5 555 M
(=> \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\)*\(logN1*k1*loglogN1 - logN2*k2*loglogN2\) = N1 -) s
5 544 M
( N2 > C\(epsilon\)*N2^\(0.5-epsilon\)) s
5 533 M
(=> \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\) > C\(epsilon\)*N2^\(0.5-epsilon\)/\(logN1*k1*loglog) s
5 522 M
(N1 - logN2*k2*loglogN2\)) s
5 511 M
(which is the approximate lower bound on number of primes between two prime factors of N1 an) s
5 500 M
(d N2 having same prime factors if ABC conjecture is true.) s
5 478 M
(References:) s
5 467 M
(-----------) s
5 456 M
(570.1 Gaps between integers having same prime factors - [Cochrane-Dressler] - http://www.am) s
5 445 M
(s.org/journals/mcom/1999-68-225/S0025-5718-99-01024-8/S0025-5718-99-01024-8.pdf - Conjectur) s
5 434 M
(e 2 and Theorem 1 - "...Conjecture 2. For any epsilon > 0 there exists a constant C\(epsilon) s
5 423 M
(\) such that if a<c are positive integers having the same prime factors, then c \342\\210\\222 a ) s
5 412 M
(\342\\211\245 C\(epsilon\)\(a^\(0.5-epsilon\)\)..." and "...Theorem 1. The abc conjecture implies Conjec) s
5 401 M
(ture 2...."  ) s
5 390 M
(570.2 Pillai's Conjecture and ABC Conjecture - [Subbayya Sivasankaranarayana Pillai] - http) s
5 379 M
(s://webusers.imj-prg.fr/~michel.waldschmidt/articles/pdf/abcEnVI.pdf - Difference of consec) s
5 368 M
(utive perfect powers tends to infinity - Pillai\342\\200\\231s conjecture as a consequence of th) s
5 357 M
(e abc Conjecture : if x^p != y^q, then |x^p - y^q| >= c\(e\)*max{x^p , y^q}^\(k-e\) with k = 1 ) s
5 346 M
(- 1/p - 1/q\302\267 Factoring Perfect powers is special case of factorization and in previous ray) s
5 335 M
( shooting algorithm N1=x^p and N2=x^q and both N1 and N2 have same prime factors. ) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(------------------) s
5 291 M
(571. \(FEATURE\) Streaming Facebook Analytics - Exhaustively print all wall posts of a user -) s
5 280 M
( 6 July 2018) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(------------------) s
5 247 M
(1. Loop has been added to Streaming_FacebookData.py for printing all pages of user wall pos) s
5 236 M
(ts in json) s
5 225 M
(2. logs for this have been committed to testlogs/Streaming_FacebookData.log.6July2018) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(------------------) s
5 181 M
(572. \(THEORY\) Merit Versus Fame, an example definition of Intrinsic Fitness/Merit in social) s
5 170 M
( networks, some) s
5 159 M
(contradictions - 9 July 2018) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(------------------) s
5 126 M
(Intrinsic Merit-Versus-Fame/Image discrepancy is a well-studied problem in social networks ) s
5 115 M
(and is the leitmotif of Intrinsic/Absolute Choice versus Majority voting theoretical comple) s
5 104 M
(xities discussed at length in many sections of this draft. The populist engineering facet o) s
5 93 M
(f this includes various definitions of intrinsic merit and fame in different disciplines\(sp) s
5 82 M
(orts,science etc.,\). Bianconi-Barabasi Bose-Einstein condensation phenomenon in social netw) s
5 71 M
(orks occurs when links \(particles\) accrue in some prominent fittest hub vertices \(least ene) s
5 60 M
(rgy levels\). Defining what least energy implies in social networks is still an open problem) s
5 49 M
(. An example definition of Intrinsic Merit function for Bianconi-Barabasi least energy soci) s
5 38 M
(al network profile is described:) s
5 16 M
(Most link-attractive social profiles fall into three disjoint categories:) s
5 5 M
(        -  Wealthy: Affluent/Businesses/Political \(W\), ) s
_R
S
%%Page: (351) 351
%%BeginPageSetup
_S
18 36 translate
/pagenum 351 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (351) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        -  Educative: Oratory/Academic/Science/Research \(E\),) s
5 731 M
(        -  Valorous: Media/Entertainment/Sportspersons/Heroics \(V\)) s
5 709 M
(Log-Normal Fitness Attachment \(LNFA\) Function of previous three, f\(W,E,V\) = g\(W\)*h\(E\)*l\(V\) ) s
5 698 M
(formed by multiplication of individual merits in three categories. When a social profile ha) s
5 687 M
(s overlaps with 2 or all 3 of these categories, its ability to attract link increases manif) s
5 676 M
(old implying protean all-round nature of profile. E.g Superheroes in fiction/history were v) s
5 665 M
(ersatile and had two or all three. Log Normal distribution is a sum of these random variabl) s
5 654 M
(es and tends to Gaussian by Central Limit Theorem. It remains to define merits in individua) s
5 643 M
(l categories:) s
5 632 M
(        -  Wealth: Income, Gravity Model based on GDP) s
5 621 M
(        -  Education: Publications, Citations, Degrees, Awards) s
5 610 M
(        -  Valour: Elo Rating, IPR ) s
5 599 M
(Metrics like HDI and SPI already incorporate mixture of these variables. ) s
5 577 M
(Log Normal summation of these three quantities therefore is factor causing links to gravita) s
5 566 M
(te towards a vertex thereby relating to least energy as:) s
5 555 M
(        Energy of a Social Profile Vertex ~ 1/\(logW + logE + logV\) ) s
5 544 M
(=> When the log normal sum of merit random variables tends to maximum/infinity, energy of a) s
5 533 M
( vertex is at its nadir. On a side note, these three quantities are interdependent:) s
5 522 M
(        - Education causes Wealth i.e W is a function of E mostly though there are exceptio) s
5 511 M
(ns) s
5 500 M
(        - Valour causes Wealth i.e W is a function of V mostly though there are exceptions) s
5 478 M
(In references below, it is surmised that Fame increases linearly or exponentially with meri) s
5 467 M
(t. The two contrarian cases when 1\) Fame occurs with no merit 2\) Merit does not cause Fame,) s
5 456 M
( complement this educated guess and is equivalent to group decision correctness probability) s
5 445 M
( \(p\) defined by Condorcet Jury Theorem and Margulis-Russo Threshold when majority function ) s
5 434 M
(has a sharp transition at p=0.5. For majority to decide correctly \(or\) for Fame to coincide) s
5 423 M
( with merit p has to be atleast 0.5. Margulis-Russo Formula equates derivative of expected ) s
5 412 M
(value of boolean function for bias p to the Ratio of Sum of Influences of individual variab) s
5 401 M
(les \(voters\) and Standard Deviation. In simple terms, this theoretical bound implies Fame o) s
5 390 M
(r Majority Voting opinion depends on how influential the voters are \(i.e how flipping indiv) s
5 379 M
(idual preference affects group decision outcome\). For majority voting function, this first ) s
5 368 M
(derivative of Pr[MajorityDecision\(N\) == Good] or influence is O\(sqrt\(number_of_voters\)\) at ) s
5 357 M
(p=0.5. Both of the previous contrary scenarios occur when bias p < 0.5 which is obvious bec) s
5 346 M
(ause the group is prejudiced because all its constituents are prejudiced. Therefore probabi) s
5 335 M
(lity of this bias being less than 0.5 has to be quantified:) s
5 324 M
(Probability of per voter bias p < 0.5 for all N voters = \(0.5\)^N because random variable fo) s
5 313 M
(r p has two values\(p >= 0.5 and p < 0.5 both equally probable\) and voting is uncorrelated w) s
5 302 M
(hich is exponentially meagre though not impossible. This implies previous Fame-Merit mismat) s
5 291 M
(ch error occurs with \(0.5\)^N probability and is infact a converse of Margulis-Russo.) s
5 269 M
(References:) s
5 258 M
(-----------) s
5 247 M
(572.1 The quantitative measure and statistical distribution of fame - [Ramirez-Hagen] - htt) s
5 236 M
(ps://arxiv.org/pdf/1804.09196.pdf - Fame is measured by Google Hits, Google News references) s
5 225 M
(, Wikipedia edits, Wikipedia views.) s
5 214 M
(572.2 How Famous is a Scientist - Famous to those who know us - [James P. Bagrow, Hern\302\264an ) s
5 203 M
(D. Rozenfeld, Erik M. Bollt, and Daniel ben-Avraham ] - http://people.clarkson.edu/~dbenavr) s
5 192 M
(a/paper/118.pdf - Fame increases near-exponentially with achievement/merit i.e Fame = c\(Ach) s
5 181 M
(ievement\)^\(epsilon\). Achievement or Intrinsic merit in science is defined as number of publ) s
5 170 M
(ications.) s
5 159 M
(572.3 Untangling Performance from Success - [Burcu Yucesoy and Albert-L\303\241szl\303\263 Barab\303\241si] -) s
5 148 M
( http://barabasi.com/f/908.pdf - defines a least square fit of wikipedia references to a te) s
5 137 M
(nnis player versus a function of his/her ATP rank, Tournament value, number of matches, ran) s
5 126 M
(k of the best opponent, Career length. - "...For example, only $\357\\230\274.\357\\230\272 million of Ro) s
5 115 M
(ger Federer\342\\200\\231s $\357\\230\275\357\\230\276.\357\\230\272 million reported \357\\230\272\357\\230\271\357\\233\\234\357\\230\274 inc) s
5 104 M
(ome was from tournament prizes [\357\\230\274\357\\233\\234], the rest came from endorsements tied to t) s
5 93 M
(he public recognition of the athlete. Yet, Novak Djokovic, who was better ranked than Feder) s
5 82 M
(er during \357\\230\272\357\\230\271\357\\233\\234\357\\230\274, received over $\357\\233\\234\357\\230\272.\357\\233\\234 million pri) s
5 71 M
(ze money but only $\357\\230\272\357\\233\\234 million via endorsements, about a third of Federer\342\\200) s
5 60 M
(\\231s purse ...") s
5 49 M
(572.4 Chess Players' Fame Versus Their Merit - [M.V. Simkin and V.P. Roychowdhury] - https:) s
5 38 M
(//arxiv.org/pdf/1505.00055.pdf -  defines a linear and exponential fit of Fame versus Elo I) s
5 27 M
(PR score of a Chess player. - "...This suggests that fame grows exponentially with Elo rati) s
5 16 M
(ng rather than linearly. ...") s
5 5 M
(572.5 Only 15 Minutes? The Social Stratification of Fame in Printed Media - [Arnout van de ) s
_R
S
%%Page: (352) 352
%%BeginPageSetup
_S
18 36 translate
/pagenum 352 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (352) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Rijt, Eran Shor, Charles Ward, and Steven Skiena] -  http://citeseerx.ist.psu.edu/viewdoc/d) s
5 731 M
(ownload?doi=10.1.1.888.1629&rep=rep1&type=pdf - "...  We measure a person\342\\200\\231s fame as) s
5 720 M
( the number of appearances of that person\342\\200\\231s name in newspaper records. More precise) s
5 709 M
(ly, for every day, we count the number of distinct newspaper articles in which a name appea) s
5 698 M
(red ...") s
5 687 M
(572.6 Log Normal Fitness Attachment - [Shilpa Ghadgea, Timothy Killingback, Bala Sundaram a) s
5 676 M
(nd Duc A. Tran] - https://www.cs.umb.edu/~duc/www/research/publications/papers/ijpeds10.pdf) s
5 665 M
( - "...we consider it reasonable that in many complex networks each node will have associat) s
5 654 M
(ed to it a quantity, which represents the property of the node to attract links, and this q) s
5 643 M
(uantity will be formed multiplicatively from a number of factors....") s
5 632 M
(572.7 p-biased boolean functions analysis, Margulis-Russo Formula - http://www.cs.tau.ac.il) s
5 621 M
(/~amnon/Classes/2016-PRG/Analysis-Of-Boolean-Functions.pdf - Section 8.4 - Equation 8.8 - P) s
5 610 M
(age 225 - Example 8.49 and Question 8.23 \(Condorcet Jury Theorem\)) s
5 599 M
(572.8 Sybils,Collusions and Reputations - GRAFIT course material - https://gitlab.com/shrin) s
5 588 M
(ivaasanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComputerScienceAndMachineLe) s
5 577 M
(arning/AdvancedComputerScienceAndMachineLearning.txt - PageRank majority function which is ) s
5 566 M
(non-boolean peer-to-peer converged markov chain random walk voting is a generalization of B) s
5 555 M
(oolean Majority function Margulis-Russo Threshold. Boolean majority function is equivalent ) s
5 544 M
(to PageRank computed for 2 candidate websites on \(n+2\)-vertex graph \(n user websites choose) s
5 533 M
( between 2 candidate websites - Good\(1\) and Bad\(0\), choice is fraction of outdegree from a ) s
5 522 M
(user website\) normalized to 0 \(smaller pagerank\) and 1 \(bigger pagerank\). Margulis-Russo th) s
5 511 M
(reshold d\(Pr\(Choice=Good=1\)\)/dp on this PageRank version of Majority function is ratio of s) s
5 500 M
(um of influences of variables \(user websites\) to standard deviation which has a phase trans) s
5 489 M
(ition to Good\(1\) at per-voter website bias p >= 0.5. It is obvious that bias p is inversely) s
5 478 M
( proportional to probability of a website being a Sybil - increased bias implies user votes) s
5 467 M
( more correctly and probability of it being a Sybil decreases.) s
5 456 M
(572.9 Cascading and Thresholds in Social Networks - Chapter 8 - Six Degrees - [Duncan J.Wat) s
5 445 M
(ts] - Cascading is the phenomenon of deluge of acceptance of new concept/innovation in Soci) s
5 434 M
(al Networks. Every social profile has a threshold above which he/she accepts an innovation ) s
5 423 M
(spread as a meme/fad. Probability of a user acceptance/voting for A increases sharply after) s
5 412 M
( more than a threshold of its neighbours accept/vote for A implying Herding.) s
5 401 M
(572.10 Bradley Effect and Noelle-Neumann Spiral of Silence - https://en.wikipedia.org/wiki/) s
5 390 M
(Spiral_of_silence - Minority opinion is silenced by Majority - "...which stipulates that in) s
5 379 M
(dividuals have a fear of isolation ... social group or the society in general might isolate) s
5 368 M
(, neglect, or exclude members due to the members' opinions. This fear of isolation conseque) s
5 357 M
(ntly leads to remaining silent instead of voicing opinions...". Bradley effect in psepholog) s
5 346 M
(y is problem of opinion/exit polls going wrong because of this spiral of silence.) s
5 335 M
(572.11 Achievement of a Nobel Laureate defined in terms of Fame - https://www.tandfonline.c) s
5 324 M
(om/doi/full/10.1080/13504851.2016.1200176) s
5 313 M
(572.12 Fame Versus Merit in Economic Networks - CPI\(Corruption Perception Index\)/Global Int) s
5 302 M
(egrity Versus Real Gross Domestic Product - https://arxiv.org/pdf/0705.0161.pdf, https://ar) s
5 291 M
(xiv.org/pdf/0710.1995.pdf - CPI\(Transparency International\) which ranks perceived corruptio) s
5 280 M
(n \(not absolute\) in countries based on various surveys \(WEF etc.,\) is the counterpart of Fa) s
5 269 M
(me/Reputation ranking for countries similar to WWW/Social Networks. GDP has been accepted a) s
5 258 M
(s intrinsic standard to measure wealth of a nation. These articles describe a power law dis) s
5 247 M
(tribution between CPI and Foreign Direct Investment/GDP.) s
5 236 M
(572.13 Methodology of TI Corruption Perception Index - https://www.stt.lt/documents/soc_tyr) s
5 225 M
(imai/KSI_methodology_2007.pdf - Density Function for each Normalized Variable - Matching Pe) s
5 214 M
(rcentiles and Beta Transformation - Samples, Perception and Reality - an example of Fame/In) s
5 203 M
(famy correlating to Merit/Demerit.) s
5 192 M
(572.14 Strength of Weak Ties - [Mark Granovetter] - https://www.cs.cmu.edu/~jure/pub/papers) s
5 181 M
(/granovetter73ties.pdf - Social Networks have clusters of strong ties among themseleves \(Cl) s
5 170 M
(iques\) and Strength of weak tie between individuals in two separate groups determines diffu) s
5 159 M
(sion of influence.) s
5 148 M
(572.15 Linked - Chapter 10 - Viruses and Fads - Viruses \(Biological and Computational\), Pan) s
5 137 M
(demics, Epidemics, Memes/Fads, Scale Free Topology \(few nodes have high degree - number_of_) s
5 126 M
(nodes\(degree x\) is proportional to 1/\(\(constant\)^x\)\) ) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(-------) s
5 82 M
(573. \(FEATURE\) Streaming Facebook Analytics - Comments - 10 July 2018) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(-------) s
5 49 M
(For each wall post, comments object is retrieved by requests and printed) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(--------------------) s
5 5 M
(574. \(FEATURE\) DeepLearning - Reinforcement Learning - Recommender Systems - Recursive Lamb) s
_R
S
%%Page: (353) 353
%%BeginPageSetup
_S
18 36 translate
/pagenum 353 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (353) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(da Function Growth Merit - 12 July 2018) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(--------------------) s
5 709 M
(1.RecommenderSystems/Create_RecommenderSystems_Hypergraph.py has been changed similar to Th) s
5 698 M
(oughtNet/ to rank the) s
5 687 M
(hypergraph edges by both Sentiment and Graph Tensor Neuron Network Intrinsic Merit) s
5 676 M
(2.RecommenderSystems/RecommenderSystems_Hypergraph_Generated.shoppingcart3.txt has been rec) s
5 665 M
(reated and rankings for hyperedges through hypergraph stack vertices is different from sent) s
5 654 M
(iment scoring) s
5 643 M
(3.DeepLearning_ReinforcementLearningRecommenderSystems.py has been changed to remove creamy) s
5 632 M
( layer computation for) s
5 621 M
(classes and all classes are lookedup in hypergraph) s
5 610 M
(4.Logs for these have been committed to RecommenderSystems/testlogs/Create_RecommenderSyste) s
5 599 M
(ms_Hypergraph.GraphTensorNeuronNetworkMerit.log.12July2018 and testlogs/DeepLearning_Reinfo) s
5 588 M
(rcementLearningRecommenderSystems.shoppingcart3.log.12July2018) s
5 577 M
(5.Example input is a book on quantum physics and is lookedup in Recommender Systems Hypergr) s
5 566 M
(aph and matches return lot of books on quantum mechanics and physics) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(--------------------) s
5 522 M
(575. \(THEORY\) Computational Geometric Factorization and Parallel Construction of Wavelet Tr) s
5 511 M
(ees - 13 July 2018) s
5 500 M
(- related to 34, 486) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(--------------------) s
5 467 M
(Classical algorithm for Computational Geometric Factorization described earlier is based on) s
5 456 M
( storing the pixelatedhyperbolic tile segments in parallelly constructed Interval Trees/Seg) s
5 445 M
(ment Trees and doing stabbing query for factor point N=\(p,q\) or by k-mergesort of locally s) s
5 434 M
(orted tile segments and doing binary search which are O\(logN*logN\) parallel time. Wavelet T) s
5 423 M
(rees are recently gaining prominence as succinct binary search tree data structure for bigd) s
5 412 M
(ata algorithms like string search, indexing etc., Wavelet Trees are binary search trees hav) s
5 401 M
(ing following traits:) s
5 390 M
(        \(*\) Prerequisite is a set of symbols \(alphabets\) and sequence of symbols \(string\)) s
5 379 M
(        \(*\) Alphabets are divided into two equal sized sets encoded as 0 and 1 ) s
5 368 M
(        \(*\) At root full string is encoded as 0-1 bitmap by previous set encoding for symbo) s
5 357 M
(ls) s
5 346 M
(        \(*\) Left subtree contains first half of the parent alphabets and Right subtree the ) s
5 335 M
(second half and encoded as 0-1 by dividing into two sets again) s
5 324 M
(        \(*\) Previous subdivision of alphabets in each node is recursed encoded as 0 and 1 t) s
5 313 M
(ill single element per node is reached at leaves. ) s
5 302 M
(        \(*\) Wavelet trees have two operators: rank\(c,S,i\) and select\(c,S,j\)) s
5 291 M
(        \(*\) rank\(c,S,i\) queries number of occurrences of symbol c in string sequence S till) s
5 280 M
( position i. ) s
5 269 M
(        \(*\) select\(c,S,j\) queries position of j-th occurrence of symbol c in string sequenc) s
5 258 M
(e S.) s
5 247 M
(        \(*\) Both rank\(\) and select\(\) are logarithmic time operations traversing the tree fr) s
5 236 M
(om root to leaf.) s
5 214 M
(Binary Search for Factor points N=\(p,q\) on hyperbolic tile segments can be mapped to wavele) s
5 203 M
(t tree:) s
5 192 M
(        \(*\) Set of all segments of length N/x\(x+1\) of y-axis endpoints \(N/x, N/\(x+1\)\) are c) s
5 181 M
(oncatenated into) s
5 170 M
(a single String sequence in ascending order of y-axis unsorted) s
5 159 M
(        \(*\) Each element of this unsorted concatenated string is an integer some of which c) s
5 148 M
(ould be factor points) s
5 137 M
(        \(*\) Alphabets of this string are integers in the vicinity of N in the interval [N-e) s
5 126 M
(psilon,N+epsilon] and size of this alphabet is 2*epsilon << N ) s
5 115 M
(        \(*\) select\(N,S,j\) queries index k of j-th occurrence of N in this concatenated stri) s
5 104 M
(ng which is nothing but a factor point N=\(k,N/k\) and maximum of value of j = number of fact) s
5 93 M
(ors of N. This selection finds factor in logarithmic time.) s
5 82 M
(        \(*\) But previous algorithm requires Wavelet Tree construction on PRAMs or Multicore) s
5 71 M
(s to be in NC and there have been many parallel algorithms for wavelet tree construction me) s
5 60 M
(ntioned in references.) s
5 38 M
(LevelWT parallel wavelet tree construction algorithm in 575.7 requires O\(NlogS\) work and O\() s
5 27 M
(logS*logN\) depth \(S is the size of the alphabet and N is size of input\). For Computational ) s
5 16 M
(Geometric Factorization by select\(\) on concatenated unsorted hyperbolic tile segments into ) s
5 5 M
(one huge string, Parallel Wavelet Tree construction requires O\(log\(Epsilon\)*logN\) depth and) s
_R
S
%%Page: (354) 354
%%BeginPageSetup
_S
18 36 translate
/pagenum 354 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (354) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( O\(Nlog\(Epsilon\)\) work which implies requiring O\(N/logN\) PRAM processors. This is far bette) s
5 731 M
(r polylogarithmic depth bound than parallel k-mergesort/interval tree/segment tree which re) s
5 720 M
(quire O\(logN*logN\) parallel time \(depth\) minimum. No necessity for sorting the hyperbolic s) s
5 709 M
(egments is another advantage and Wavelets can store huge strings suitable for factoring ver) s
5 698 M
(y large integers - Each concatenated unsorted hyperbolic segments string is O\(N\).) s
5 676 M
(References:) s
5 665 M
(-----------) s
5 654 M
(575.1 Parellel Construction of Wavelet Trees on Multicore Architectures - [Sepulveda \302\267 Eri) s
5 643 M
(ck Elejalde \302\267 Leo Ferres \302\267 Diego Seco] - https://arxiv.org/pdf/1610.05994.pdf) s
5 632 M
(575.2 Parallel lightweight wavelet tree, suffix array and FM-Index construction - [Labeit e) s
5 621 M
(t al] - https://people.csail.mit.edu/jshun/JDA2017.pdf - Parallel Cilkplus Implementation :) s
5 610 M
( https://github.com/jlabeit/wavelet-suffix-fm-index) s
5 599 M
(575.3 Wavelet Trees for All - [Navarro] - https://www.dcc.uchile.cl/~gnavarro/ps/cpm12.pdf) s
5 588 M
(575.4 Improved Parallel Construction of Wavelet Trees and Rank/Select - [Julian Shun] - htt) s
5 577 M
(ps://arxiv.org/pdf/1610.03524.pdf) s
5 566 M
(575.5 Wavelet Trees and RRR Succinct Data Structure for O\(1\) rank\(\) - http://alexbowe.com/w) s
5 555 M
(avelet-trees/ - Each node in Wavelet Tree invokes RRR for O\(1\) rank computation per node) s
5 544 M
(575.6 RRR - Succinct Indexable Dictionaries with Applications to Encoding k-ary Trees, Pref) s
5 533 M
(ix Sums and Multisets - [Rajeev Raman, Venkatesh Raman, S. Srinivasa Rao] - https://arxiv.o) s
5 522 M
(rg/pdf/0705.0552.pdf - Succinct Data Structure for computing rank\(\) and select\(\) of a bitma) s
5 511 M
(p in O\(1\) time. Bitmap is divided into blocks and sets of blocks\(superblocks\). For each blo) s
5 500 M
(ck, rank is computed and stored in a class-offset two level lookup dictionary where class i) s
5 489 M
(s the rank of the block and offset is index into set of permutations for that block. Superb) s
5 478 M
(locks add the ranks of the blocks. ) s
5 467 M
(575.7 Shared Memory Parallelism Can Be Simple, Fast and Scalable - [Julian Shun] - http://r) s
5 456 M
(eports-archive.adm.cs.cmu.edu/anon/2015/CMU-CS-15-108.pdf - Theorem 34 - Section 14.4.1 and) s
5 445 M
( Page 10 footnote 6 on NC - "...Polylogarithmic-depth algorithms are also desirable for com) s
5 434 M
(putational complexity reasons, as they fall in the class NC \(Nick\342\\200\\231s Class\) containi) s
5 423 M
(ng problems that can be solved on circuits with polylogarithmic depth and polynomial size [) s
5 412 M
(15] ...") s
5 401 M
(575.8 Wavelet Tree in Computational Geometry - [Meng He] - Planar Point Location - https://) s
5 390 M
(pdfs.semanticscholar.org/f32b/bece8f1cd11e5c50acab532b41aaac34f8e0.pdf - "...M\303\244kinen et al) s
5 379 M
(. [54] showed that a wavelet tree can be used to support orthogonal range counting and repo) s
5 368 M
(rting for n points on an n \303\\227 n grid, when the points have distinct x-coordinates \(this ) s
5 357 M
(restriction can be removed through a reduction [14]\). To construct a wavelet tree for such ) s
5 346 M
(a point set, we conceptually treat it as a string S of length n over alphabet [n], in which) s
5 335 M
( S[i] stores the y-coordinate of the point whose x-coordinate is i. Thus Figure 1 can also ) s
5 324 M
(be considered as a wavelet tree constructed for 8 points on an 8 by 8 grid, and this point ) s
5 313 M
(set is given in the caption of the figure ..." - "... Fig. 1. A wavelet tree constructed fo) s
5 302 M
(r the string 35841484 over an alphabet of size 8.This is also a wavelet tree constructed fo) s
5 291 M
(r the following point set on an 8 by 8 grid:{1, 3}, {2, 5}, {3, 8}, {4, 4}, {5, 1}, {6, 4},) s
5 280 M
( {7, 8}, {8, 4}..." - Previous Computational Geometric Factorization algorithm exactly appl) s
5 269 M
(ies this and construes set of points of hyperbolic arc on 2 dimensional plane as single hug) s
5 258 M
(e string.) s
5 247 M
(575.9 Wavelet Tree for Computational Geometric Planar Range Search in 2 dimensions - https:) s
5 236 M
(//www.researchgate.net/profile/Christos_Makris2/publication/266871959_Wavelet_trees_A_surve) s
5 225 M
(y/links/5729c5f708ae057b0a05a885/Wavelet-trees-A-survey.pdf?origin=publication_detail - "..) s
5 214 M
(. Therefore,  consider  a  set  of  points  in  the  xy-plane  with  the  x- and  y-coordin) s
5 203 M
(ates taking values in {1,\342\\200\246,n}; assume without loss of generality that no two points sh) s
5 192 M
(are the same x- and  y-coordinates, and that each value in {1,\342\\200\246,n} appears as a x- and) s
5 181 M
( y- coordinate.  We need a data structure in order to count the points that are in a range ) s
5 170 M
([lx, rx]  \303\\227  [by, uy] in time O\(logn\), and permits the  retrieval of each of these poin) s
5 159 M
(ts in  O\(logn\) time. ... this structure is essentially equivalent to the wavelet tree. The ) s
5 148 M
(structure is a perfect binary tree, according to the x\342\\200\\223coordinates of the search po) s
5 137 M
(ints,  with each node of  the tree storing its  corresponding set  of points ordered accord) s
5 126 M
(ing to the y-coordinate. In this way the tree mimics the distinct phases of a mergesort pro) s
5 115 M
(cedure that sorts the points according to the  y-coordinate,  assuming  that  the  initial ) s
5 104 M
( order  was  given  by  the  x-coordinate. ..." - In the PRAM k-mergesort version of comput) s
5 93 M
(ational geometric factorization \(http://sourceforge.net/projects/acadpdrafts/files/Discrete) s
5 82 M
(HyperbolicPolylogarithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_) s
5 71 M
(Upperbound_updateddraft.tex/download\) 2 dimensional plane which has the hyperbolic curve is) s
5 60 M
( divided into logN rectangles of length N/logN and hyperbolic point-sets in each of these r) s
5 49 M
(ectangles are sorted and searched for factor points. Wavelet tree exactly applies to this r) s
5 38 M
(ectangular range search and can retrieve a factor point from hyperbolic arc point set in O\() s
5 27 M
(logN\) time per rectangle. For logN rectangles, time to find factors is O\(logN*logN\). As men) s
5 16 M
(tioned in the reference, Wavelet Tree mimics sorting the points. But this 2-dimensional Wav) s
5 5 M
(elet tree requires parallel multicore construction NC algorithms mentioned earlier for loga) s
_R
S
%%Page: (355) 355
%%BeginPageSetup
_S
18 36 translate
/pagenum 355 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (355) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(rithmic depth.) s
5 731 M
(575.10 Wavelet Tree in Computational Geometry - Range Report - [Travis Gagie, Gonzalo Navar) s
5 720 M
(ro, Simon J. Puglisi] - https://ac.els-cdn.com/S0304397511009625/1-s2.0-S0304397511009625-m) s
5 709 M
(ain.pdf?_tid=bb9ebcde-9e40-41b4-8327-4b9ed4e2fb57&acdnat=1536661119_222f9c6a5423840eec8e09f) s
5 698 M
(8107d3f71 - report points in a rectangular area in logarithmic time. As mentioned in previo) s
5 687 M
(us reference, point in each rectangle bounding a pixelated hyperbolic point-set can be retr) s
5 676 M
(ieved in logarithmic time e.g query factor point N=\(p,q\) on the point-set.) s
5 665 M
(575.11 Functional Approach to Data Structures and their use in Multi-dimensional Searching ) s
5 654 M
(- [Bernard Chazelle] -) s
5 643 M
( https://www.cs.princeton.edu/~chazelle/pubs/FunctionalDataStructures.pdf - Data structure ) s
5 632 M
(which inspired wavelet) s
5 621 M
( tree in geometric search - M-Structures \(Mergesort-Structures\)) s
5 610 M
(575.12 Space Efficient Data Analysis Queries on Grids - [Gonzalo Navarro, Yakov Nekrich, Lu) s
5 599 M
(\303\255s M.S. Russo] - https://ac.els-cdn.com/S0304397512010742/1-s2.0-S0304397512010742-main.pd) s
5 588 M
(f?_tid=fa66c1a6-518d-4fd1-b6f3-59720d2736fa&acdnat=1537341599_ebf10ba8401e952f49aa06f516819) s
5 577 M
(2ba - Space efficient representation of point-sets on 2-dimensional grid) s
5 566 M
(575.13 Succinct Orthogonal Range Search Structures on a Grid with Applications to Text Inde) s
5 555 M
(xing - [Prosenjit Bose, Meng He, Anil Maheshwari, and Pat Morin] - https://pdfs.semanticsch) s
5 544 M
(olar.org/3d28/169f7c1524cf87c9215b61d536939ae5841a.pdf - Orthogonal range reporting of poin) s
5 533 M
(ts in a rectangle - "Lemma 8. Let N be a set of points from the universe M = [1..n]\303\\227[1.) s
5 522 M
(.n], where n = |N|. N can be represented using n lg n + o\(n lg n\) bits to support orthogona) s
5 511 M
(l range reporting in O\(k lg n/ lg lg n\) time, where k is the size of the output....". This ) s
5 500 M
(implies each hyperbolic point in rectangle of width N/logN in http://sourceforge.net/projec) s
5 489 M
(ts/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveForIntegerFactorization_PRAM_Til) s
5 478 M
(eMergeAndSearch_And_Stirling_Upperbound_updateddraft.pdf/download containing pixelated hype) s
5 467 M
(rbolic point-sets can be reported in sub-logarithmic time \(k=1\) independent of other rectan) s
5 456 M
(gles thereby obviating k-mergesort of the tile segments \(or mimicking it\). ) s
5 445 M
(575.14 Succinct Datastructure for Multidimensional Orthogonal Range Searching - [Ishiyama-S) s
5 434 M
(adakane] - https://www.computer.org/csdl/proceedings/dcc/2017/6721/00/07921922.pdf - kd-tre) s
5 423 M
(e example for orthogonal range reporting - Figure 1.) s
5 412 M
(  ) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(---------------------) s
5 379 M
(576. \(FEATURE\) Spark Streaming - Java 1.8 - Spark Java Upgrade to 2.3 and Some Structured S) s
5 368 M
(treaming ) s
5 357 M
(Enhancements - 17 July 2018) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(---------------------) s
5 324 M
(1. Spark Generic Streaming Java Implementation has been compiled on Spark 2.3 upgraded from) s
5 313 M
( Spark 2.1 and sparkgenericstreaming.jar has been repackaged ) s
5 302 M
(2. JavaPairDStream code which was commented earlier has been uncommented to return Word Cou) s
5 291 M
(nt instead of Words) s
5 280 M
(3. Structured Streaming usecase example in https://spark.apache.org/docs/latest/structured-) s
5 269 M
(streaming-programming-guide.html for website advertisement analytics has been implemented b) s
5 258 M
(y computing timestamp of each word occurrence along with its count) s
5 247 M
(4. Word.java has been changed for doing get/set of Time,Count and Word) s
5 236 M
(5. DataFrame schema has been changed to Word, Count and Timestamp instead of just Word.) s
5 225 M
(6. This Structured Streaming DataFrame prints periodically changing tables of word occurren) s
5 214 M
(ces, frequencies and timestamp as a tabular column.) s
5 203 M
(7. JavaPairDStream still does not have Java Pair support but only scala.Tuple2.) s
5 181 M
(8. Commandline for spark-submit has been changed for jsoup: /home/kashrinivaasan/spark-2.3.) s
5 170 M
(0-bin-hadoop2.7/bin/spark-submit --jars /home/kashrinivaasan/jdk1.8.0_171/lib/jsoup-1.11.3.) s
5 159 M
(jar --class SparkGenericStreaming --master local[2] sparkgenericstreaming.jar  "https://twi) s
5 148 M
(tter.com/search?f=tweets&vertical=news&q=Chennai&src=typd") s
5 126 M
(9. CLASSPATH for spark 2.3 has been changed as for catalyst, scala-reflect: /home/kashriniv) s
5 115 M
(aasan/spark-2.3.0-bin-hadoop2.7/jars/spark-streaming_2.11-2.3.0.jar:.:/home/kashrinivaasan/) s
5 104 M
(spark-2.3.0-bin-hadoop2.7/jars/scala-library-2.11.8.jar:/home/kashrinivaasan/spark-2.3.0-bi) s
5 93 M
(n-hadoop2.7/jars/spark-sql_2.11-2.3.0.jar:/home/kashrinivaasan/spark-2.3.0-bin-hadoop2.7/ja) s
5 82 M
(rs/spark-core_2.11-2.3.0.jar:/home/kashrinivaasan/jdk1.8.0_171/lib/jsoup-1.11.3.jar:/home/k) s
5 71 M
(ashrinivaasan/spark-2.3.0-bin-hadoop2.7/jars/spark-catalyst_2.11-2.3.0.jar:/home/kashriniva) s
5 60 M
(asan/spark-2.3.0-bin-hadoop2.7/jars/scala-reflect-2.11.8.jar:/home/kashrinivaasan/jdk1.8.0_) s
5 49 M
(171/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin) s
5 27 M
(10. Example logs for streamed news analysis has been committed to testlogs/) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (356) 356
%%BeginPageSetup
_S
18 36 translate
/pagenum 356 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (356) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------) s
5 731 M
(577. \(THEORY and FEATURE\) Computational Geometric Factorization and its Pell Diophantine \(C) s
5 720 M
(omplement Diophantine of Prime Valued Polynomials\) - Updates - 18 July 2018) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(-------------------) s
5 687 M
(1. DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to pe) s
5 676 M
(rsist the factors) s
5 665 M
(found to a JSON file \(json.dump\(\) and json.load\(\)\).) s
5 654 M
(2. Aggregating factors found by multiple Spark executors requires defining a new Spark Broa) s
5 643 M
(dcast Accumulator) s
5 632 M
(class which appends a factor to already existing accumulator value globally) s
5 621 M
(3. complement.py has been updated for solving both directions of Pell-Factoring \(for D=1 an) s
5 610 M
(d N > 1\):) s
5 599 M
(        3.1 Pell Equation to Factoring: Solves Pell equation x^2-y^2=N for D=1 and finds fa) s
5 588 M
(ctors \(x+y\) and \(x-y\) in exponential time \(or between polynomial and exponential - http://w) s
5 577 M
(ww.math.leidenuniv.nl/~psh/ANTproc/01lenstra.pdf\)) s
5 566 M
(        3.2 Factoring to Pell Equation: Computes all factors \(p,q\) of N by PRAM Computation) s
5 555 M
(al Geometric Factorization and finds x and y in Pell Equation as: x=\(p+q\)/2 and y=\(p-q\)/2. ) s
5 544 M
(This solves a special case of Pell Equation in classical NC for D=1 \(for generic, only quan) s
5 533 M
(tum polynomial time algorithms are known so far\)) s
5 522 M
(4. Logs for these have been committed to testlogs/DiscreteHyperbolicFactorizationUpperbound) s
5 511 M
(_TileSearch_Optimized.JSONPersistence.18July2018 and testlogs/complement.PellEquation.Solve) s
5 500 M
(dByPRAMNCFactoring.18July2018) s
5 489 M
(5. Ray Shooting Oracle shows some exact and close ray shooting of factors. For simple Hardy) s
5 478 M
(-Ramanujan ray shooting factorization requires only O\(loglogN\) + O\(log\(N/loglogN\)*log\(N/log) s
5 467 M
(logN\)\) + O\(log\(N/loglogN\)\) time to find a factor because prime factors are O\(loglogN\) and d) s
5 456 M
(istance between any two prime factors is O\(N/loglogN\).) s
5 445 M
(6. Hyperbolic arc bow for this x-axis distance is sufficient to locate a factor. K-mergesor) s
5 434 M
(t/Segment-tree of this subset is O\(log\(N/loglogN\)*log\(N/loglogN\)\) and binary search is O\(lo) s
5 423 M
(g\(N/loglogN\)\).) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(---------------) s
5 379 M
(578. \(FEATURE\) ConceptNet 5.6 Client Update - Common Ancestor Algorithm rewrite for path be) s
5 368 M
(tween concepts) s
5 357 M
(- 19 July 2018) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(---------------) s
5 324 M
(1. ConceptNet 5.6 provides a REST endpoint /query for finding connections between two conce) s
5 313 M
(pts which has been) s
5 302 M
(wrapped by a new function conceptnet_path\(\)) s
5 291 M
(2. Common Ancestor Algorithm for finding distance betwen two concepts has been rewritten to) s
5 280 M
( create a NetworkX) s
5 269 M
(subgraph from the edges connecting two concepts. Function conceptnet_distance\(\) has been re) s
5 258 M
(named to conceptnet_least_common_ancestor_distance\(\)) s
5 247 M
(3. Loop iterating over cartesian product has been split into 2 loops which grow from two op) s
5 236 M
(posite directions) s
5 225 M
(\(concept1, --- \) and \(--- ,concept2\) and intersect at common ancestors.) s
5 214 M
(4. Edges recursively seen by /related REST query are collected in a list and a NetworkX DiG) s
5 203 M
(raph is created from) s
5 192 M
(it which has all paths between concept1 and concept2) s
5 181 M
(5. Shortest path on this subgraph yields the shortest distance and path between concept1 an) s
5 170 M
(d concept2 and thus passes via the least common ancestor between two concepts) s
5 159 M
(6. Logs for this have been captured in testlogs/ConceptNet5Client.log.19July2018 which show) s
5 148 M
( conceptnet_least_common_ancestor_distance\(\) computes deeper paths than /query) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(------------------) s
5 104 M
(579. \(THEORY and FEATURE\) SAT Solver Update - some refactoring, and replace=True - 20 July ) s
5 93 M
(2018) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(------------------) s
5 60 M
(1.CNFSATSolver.py has been refactored for invoking Uniform and Non-uniform choice based on ) s
5 49 M
(Variables==Clauses) s
5 38 M
( or Variables != Clauses and lsmr\(\) invocation has been changed to remove regularized LSQR) s
5 27 M
(2.replace=False has been set to replace=True in np.random.choice\(\) for Uniform choice of ra) s
5 16 M
(ndom 3SAT variables) s
5 5 M
(\(and everywhere else\). For very long time replace was set to False) s
_R
S
%%Page: (357) 357
%%BeginPageSetup
_S
18 36 translate
/pagenum 357 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (357) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(3.logs for this have been committed to testlogs/CNFSATSolver.2000VariablesAlpha1.0.log.20Ju) s
5 731 M
(ly2018 and) s
5 720 M
(MAXSAT approximation ratio for few iterations ranges from ~95% to ~99% \(logs for 98.25% hav) s
5 709 M
(e not been committed\)) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(------------------) s
5 665 M
(580. \(THEORY\) Random Matrix Least Square SAT Solver, kSAT Sharp Threshold and Friedgut Theo) s
5 654 M
(rem, ThoughtNet ) s
5 643 M
(Hypergraph as k-SAT problem, TextGraph and Social Network Property Testing - 26 July 2018 -) s
5 632 M
( related to 453) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(------------------) s
5 599 M
(Margulis-Russo Threshold and Condorcet Jury Theorem in the context of Sharp Threshold of Ma) s
5 588 M
(jority Function have) s
5 577 M
(been extensively described earlier. Random Matrix Least Squares SAT Solver has been analyze) s
5 566 M
(d and distribution for) s
5 555 M
(choosing a literal has been derived as 1/sqrt\(m*n\). Similar to Majority Function Sharp Thre) s
5 544 M
(sholds exist for) s
5 533 M
(kSAT formulae from Friedgut's Theorem which is stated as:) s
5 522 M
(        The satisfiability property for random k-CNF has a sharp threshold, i.e. there exis) s
5 511 M
(ts p' such that for any epsilon > 0, ) s
5 500 M
(        \302\265p\(A\) \342\\206\\222 \( 1 if p \342\\211\244 \(1 \342\\210\\222 epsilon\)p', 0 if p \342\\211\245 \(1 + epsilo) s
5 489 M
(n\)p' \)) s
5 478 M
(        where p' = alpha\(n\)*n/N.) s
5 467 M
(probability of choosing a clause p is \(M=Number of clauses in a random kSAT\)/\(N=All possibl) s
5 456 M
(e clauses in a random kSAT\). Number of all possible clauses in a random kSAT = N = nCk*2^k ) s
5 445 M
(and alpha = M/n \(n is number of variables\) => p = \(alpha*n\)/N.) s
5 423 M
(Probability of choosing a random 3SAT clause in Random Matrix SAT Solver p = [1/sqrt\(mn\)]^3) s
5 412 M
( = 1/\(\(mn\)^1.5\). From Friedgut's Theorem number of satisfied clauses increase if p <= \(1-ep) s
5 401 M
(silon\)p'. This leads to inequality:) s
5 390 M
(        1/\(mn\)^1.5 <= \(\(1-epsilon\)alpha\(n\)*n\)/N) s
5 379 M
(        => 1/\(mn\)^1.5 <= [\(\(1-epsilon\)alpha\(n\)*n\)*6*\(n-3\)!]/\(8*n!\) from N = nC3*2^3) s
5 368 M
(        Simplifying reduces to:) s
5 357 M
(        1/\(mn\)^1.5 <= [\(\(1-epsilon\)alpha\(n\)\)*0.75*]/\(\(n-1\)\(n-2\)\) from N = nC3*2^3) s
5 335 M
(But mn=alpha\(n\)*n^2 substituting which reduces the previous inequality to:) s
5 324 M
(        [\(n-1\)\(n-2\)/\(n^3*\(1-epsilon\)*0.75\)]^0.4 <= alpha\(n\)) s
5 302 M
(Example - For n=10 and alpha\(n\)=4.267 previous inequality becomes:) s
5 291 M
(        0.39165/\(1-epsilon\)^0.4 <= alpha\(n\)) s
5 280 M
(        => epsilon <= 0.6154) s
5 269 M
(implying a sharp thresold to increased number of satisfied clauses.) s
5 247 M
(Related note: Sharp Thresholds in k-SAT have some applications in graph representation of t) s
5 236 M
(exts e.g Definition graphs, ThoughtNet Hypergraph. Any random k-SAT formula can be represen) s
5 225 M
(ted as a hypergraph \(Factor graph\) of variables as vertices and clauses as hyperedges. Thou) s
5 214 M
(ghtNet hypergraph is a Factor graph for some k-SAT and extracting the k-SAT from ThoughtNet) s
5 203 M
( translates the Contextual Multi Armed Bandit ThoughtNet to a random kSAT instance. Graph r) s
5 192 M
(epresentation of texts can be queried for various properties e.g number of matchings, trian) s
5 181 M
(gles, connected components which extract pattern in the meaning of text. For example, Margu) s
5 170 M
(lis-Russo threshold is a graph property threshold of atleast n\(n-1\)/2 random edges between ) s
5 159 M
(n vertices in a random graph where each edge is created with probability p. Similar thresho) s
5 148 M
(ld holds for Social Network Random graphs.) s
5 126 M
(References:) s
5 115 M
(-----------) s
5 104 M
(580.1 Thresholds in Random Graphs and k-SAT - [Emmanuel Abbe] - https://pdfs.semanticschola) s
5 93 M
(r.org/d862/14a9e02c3749ca92515b592f2fdb38710b45.pdf - Proof of Margulis-Russo Threshold \(Le) s
5 82 M
(mma 2\), Sharp Threshold of k-SAT and Friedgut Theorem \(Section 6 - Theorem 7\) ) s
5 71 M
(580.2 Hunting for Sharp Thresholds - [Ehud Friedgut] - http://www.ma.huji.ac.il/~ehudf/docs) s
5 60 M
(/survey.ps - "...Much like water that freezes abruptly as its temperature drops below zero ) s
5 49 M
(the structure of the random graph quickly changes from a primordial soup of small tree-like) s
5 38 M
( connected components to a graph in which the giant component, one of linear size, captures) s
5 27 M
( a constant proportion of the vertices...." - Erdos-Renyi edge probability threshold in ran) s
5 16 M
(dom graphs has close resemblance to Bose-Einstein condensation in networks.) s
_R
S
%%Page: (358) 358
%%BeginPageSetup
_S
18 36 translate
/pagenum 358 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (358) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(--------------------) s
5 720 M
(581. \(THEORY\) Rice Theorem, Complement Diophantines, Program Analysis, SAT Solver and Undec) s
5 709 M
(idability of ) s
5 698 M
(Non-trivial properties of Turing Machines - 30 July 2018 - related to 166, 471) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(-------------------- ) s
5 665 M
(Draft updates to:) s
5 654 M
(-----------------) s
5 643 M
(1. Decidability of Complement Functions \(2011\) - Section on Rice Theorem - https://arxiv.or) s
5 632 M
(g/abs/1106.4102v1) s
5 621 M
(-------------------------------) s
5 610 M
(Rice Theorem implies every non-trivial property of Turing Machines are undecidable. Non-tri) s
5 599 M
(vial property is defined as below.) s
5 577 M
(For a non-trivial subset S of recursively enumerable languages which is a non-empty proper ) s
5 566 M
(subset of all recursively enumerable languages RE\(trivial subsets are empty-set and RE\):) s
5 555 M
(        581.1 Turing Machine M which accepts a language in S) s
5 544 M
(        581.2 Turing Machine M' which accepts a language in complement of S \(RE \\ S\) ) s
5 522 M
(Previous proofs of undecidability of complement diophantines by Post Correspondence Problem) s
5 511 M
( and MRDP theorem are devoted only to the question of existence of a complement function. S) s
5 500 M
(ince all languages in RE are diophantine, languages which are recursively enumerable but no) s
5 489 M
(t recursive do not have accept/reject halting Turing Machine to decide diophantine polynomi) s
5 478 M
(al representation. But Rice Theorem applies in a different setting: Once the set S and its ) s
5 467 M
(complement RE \\ S are known, it is undecidable if an arbitrary Turing Machine M accepts a l) s
5 456 M
(anguage in S or RE \\ S. In terms of equivalence of RE and Diophantine Equations, it is unde) s
5 445 M
(cidable if an arbitrary Diophantine Equation represents a set in S or its complement in RE ) s
5 434 M
(\\ S i.e. Given a \(complement\) diophantine D and 2 complementary sets in RE \(disjoint set co) s
5 423 M
(ver of RE\) it is undecidable to decide which set in S or RE \\ S are values of diophantine D) s
5 412 M
( which is the converse direction of existence of complement diophantine. ) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(-------------------) s
5 368 M
(PhD Thesis Proposal \(2011\) - Sections on Program Comprehension - https://sites.google.com/s) s
5 357 M
(ite/kuja27/PhDThesisProposal.pdf - Theoretical Answers to some questions in it:) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(-------------------) s
5 324 M
(For the same reason, Comprehending a Program behaviour is a non-trivial property X which as) s
5 313 M
(ks "Does the Code do X?". Translating Code to Boolean Formula and applying a SAT Solver \(as) s
5 302 M
( done in SATURN Program Analyzer\) is also a non-trivial property: "Does the Code Satisfy th) s
5 291 M
(e 3SAT?". Similarly automated debug analytics of code is undecidable too. Software solution) s
5 280 M
(s to these are only approximations.) s
5 258 M
(A circular timerwheel hashmap of dynamic sets of timeout clockticks to queues of processes ) s
5 247 M
(- Survival Index Timeout - has been applied to OS Scheduler in https://github.com/shrinivaa) s
5 236 M
(sanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComputerScienceAndMachineLearni) s
5 225 M
(ng/AdvancedComputerScienceAndMachineLearning.txt which estimates a non-trivial undecidable ) s
5 214 M
(property approximately - Worst Case Execution Time of a process.) s
5 192 M
(Licensing Violation is a great problem in Open Source Software \(advertently or inadvertentl) s
5 181 M
(y\) and Software Similarity Detection provides solutions to identify similar source codes. M) s
5 170 M
(ostly available Similarity Detectors parse function and variable names in two source trees ) s
5 159 M
(and compare similarity but rarely compare the control flow graphs.But Frequent Subgraph Min) s
5 148 M
(ing of SATURN Control Flow Graphs \(static\) and Valgrind/Callgrind/KCachegrind Call Graphs \() s
5 137 M
(dynamic\) in NeuronRain AsFer takes it further solving similarity detection holistically. Th) s
5 126 M
(ird-party Graph Isomorphism Detectors can also be applied on these compiletime and runtime ) s
5 115 M
(graphs. NeuronRain AsFer also provides indexing of source code and pairwise similarity by L) s
5 104 M
(atent Semantic Analysis. ) s
5 82 M
(References:) s
5 71 M
(----------) s
5 60 M
(581.3 Rice Theorem applications in Programming - http://ai.cs.unibas.ch/_files/teaching/fs1) s
5 49 M
(6/theo/slides/theory-d08.pdf - Every question on comprehending Programs is undecidable) s
5 38 M
(581.4 Mortality Problem/Halting Problem Undecidability Proof of Rice Theorem - http://peopl) s
5 27 M
(e.seas.harvard.edu/~cs125/fall14/lec17.pdf ) s
5 16 M
(581.5 Approximate Program Analysis - https://cs.au.dk/~amoeller/spa/1%20-%20TIP.pdf - Exact) s
5 5 M
( Program Analysis is undecidable) s
_R
S
%%Page: (359) 359
%%BeginPageSetup
_S
18 36 translate
/pagenum 359 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (359) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(581.6 OSSPolice - Identifying Open-Source License Violation and 1-day Security Risk at Larg) s
5 731 M
(e Scale - [Ruian Duan, Ashish Bijlani, Meng Xu, Taesoo Kim, Wenke Lee] - https://acmccs.git) s
5 720 M
(hub.io/papers/p2169-duanA.pdf) s
5 709 M
(581.7 OSSPolice - https://github.com/osssanitizer/osspolice) s
5 698 M
(581.8 Bliss - Graph Isomorphism Detector - http://www.tcs.hut.fi/Software/bliss/) s
5 687 M
(581.9 Program Analysis - Analysis of Control Statements - expected and variance of executio) s
5 676 M
(n times and laplace transforms - Appendix E - Probability and Statistics, Queueing, Reliabi) s
5 665 M
(lity and Computer Science - [Kishore Shridharbhai Trivedi, Duke University]) s
5 654 M
(581.10 Program Analysis - JRF self-study - 2008 Course Notes - [Madhavan Mukund, CMI and Sr) s
5 643 M
(iram Rajamani, Microsoft Research] - Pointer Analysis - Andersen and Steensgaard algorithms) s
5 632 M
( creating points-to graphs - https://www.cs.cmu.edu/~aldrich/courses/15-819O-13sp/resources) s
5 621 M
(/pointer.pdf - Graph Mining algorithms can be applied to points-to graphs \(static\)) s
5 610 M
(581.11 Comparing Call Graphs - [Lohtak] - https://plg.uwaterloo.ca/~olhotak/pubs/paste07.pd) s
5 599 M
(f) s
5 588 M
(581.12 Principles of Program Analysis - [Flemming Nielsen-Hanne Riis Nielsen-Chris Hankin] ) s
5 577 M
(- https://books.google.co.in/books?id=YseqCAAAQBAJ&printsec=frontcover&dq=nielsen+nielsen+h) s
5 566 M
(ankin&hl=en&sa=X&ved=0ahUKEwiki_-gsOXfAhUPeysKHWpmA1gQ6AEIKjAA#v=onepage&q&f=false - Interp) s
5 555 M
(rocedural Analysis - Section 2.5.4 Call Strings as Context and Examples 2.33 and 2.37 - fun) s
5 544 M
(ction call stacks or paths in dynamic call graphs can be formalized as unbounded call strin) s
5 533 M
(gs which are defined by concatenation of values of transfer functions for each entry and ex) s
5 522 M
(it\(return\) of functions invoked along a path in call graph.) s
5 511 M
(581.13 Survey of Tools for estimation of Worst Case Execution Time of a program - Fig. 5 Bo) s
5 500 M
(und Calculation - CFG, Path based, IPET, Transformation rules, Structure based - http://mos) s
5 489 M
(s.csc.ncsu.edu/~mueller/ftp/pub/mueller/papers/1257.pdf) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(--------------------) s
5 445 M
(582. \(THEORY\) Cloud, Autonomous Vehicles, EventNet Logical Clock, Relativity, Lorentz Trans) s
5 434 M
(form, Lamport's Clock) s
5 423 M
( - related to 70-86 - 2 August 2018, 3 August 2018) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(--------------------) s
5 390 M
(Cloud of autonomus vehicles\(e.g drones\) in a wireless network are mostly not stationary and) s
5 379 M
( each node has a velocity. This relative motion between nodes of a cloud fits in the realm ) s
5 368 M
(of relativistic time dilation. Lorentz Transform for a stationary and a moving observer wit) s
5 357 M
(h respect to a frame of reference is derived as below:) s
5 346 M
(                ) s
5 335 M
(                        x1) s
5 324 M
(                        |  \\ ) s
5 313 M
(                        |       \\) s
5 302 M
(                        V            \\) s
5 291 M
(                        x2 -----------> x3) s
5 269 M
(Node x1 in vehicle cloud transmits an information with speed of light c \(which is fixed for) s
5 258 M
( all observers by Maxwell Equations as 3 * 10^5 km/s\) as electromagnetic signal, which is r) s
5 247 M
(eceived by both x2 and x3. x2 is stationary and x3 is moving with velocity v. Each node has) s
5 236 M
( its own clock t\(xi\). For x2, information from x1 reaches in t\(x2\)*c and for x3 information) s
5 225 M
( from x1 reaches in t\(x3\)*c. By this time x3 has travelled t\(x3\)*v distance from x2. This l) s
5 214 M
(eads to Lorentz transform below:) s
5 203 M
(                \(t\(x2\)*c\)^2 + \(t\(x3\)*v\)^2 = \(t\(x3\)*c\)^2) s
5 192 M
(                \(t\(x2\)*c\)^2 = \(t\(x3\)*c\)^2 - \(t\(x3\)*v\)^2) s
5 181 M
(                => \(t\(x2\)*c\)^2 = t\(x3\)^2*\(c^2 - v^2\)) s
5 170 M
(                => t\(x2\)^2 = t\(x3\)^2*\(1 - \(v/c\)^2\)) s
5 159 M
(                => t\(x2\) = t\(x3\)*sqrt\(1 - \(v/c\)^2\)) s
5 148 M
(                i.e clock of vehicle x3 slows down compared to x2's clock as x3 moves faste) s
5 137 M
(r. ) s
5 126 M
(Though autonomus vehicles could have speed less than light, if event timestamps are in nano) s
5 115 M
(seconds \(C++ provides nanosecond resolution in std::chrono::duration_cast<std::chrono::nano) s
5 104 M
(seconds>\), relativistic time dilation could be non-trivial. Lamport's Logical Clock has the) s
5 93 M
( causation protocol \(s,r\):) s
5 82 M
(                sender\(s\) - transmits timestamp to receiver) s
5 71 M
(                receiver\(r\) - finds maximum of local timestamp and received timestamp and i) s
5 60 M
(ncrements by 1) s
5 49 M
(which is valid only for stationary nodes in cloud and has to be augmented by previous relat) s
5 38 M
(ivistic time dilation transform for moving nodes in cloud. ) s
5 16 M
(Previous time dilation is because of Special Relativity where as General Relativity predict) s
5 5 M
(s clocks in objects closer to a heavier mass tick slower. This causes onboard clocks in GPS) s
_R
S
%%Page: (360) 360
%%BeginPageSetup
_S
18 36 translate
/pagenum 360 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (360) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( satellites to tick faster than those on earth slowed down by its mass and corrections are ) s
5 731 M
(applied. Drones using GPS navigation are directly affected by this. EventNet is a partial o) s
5 720 M
(rdered directed acyclic graph \(infinite\) and causality in EventNet Logical Clock \(for wirel) s
5 709 M
(ess clouds\) is defined by light cone i.e an expanding circular region travelled by light pl) s
5 698 M
(otted against arrow of time - two events P and Q are causally related if Q is in past light) s
5 687 M
(cone or future lightcone of P and viceversa. ) s
5 665 M
(References:) s
5 654 M
(----------) s
5 643 M
(582.1 On the Relativistic Structure of Logical Time in Distributed Systems - https://www.vs) s
5 632 M
(.inf.ethz.ch/publ/papers/relativistic_time.pdf - Section 5 - Minkowski Spacetime of \(n-1\) s) s
5 621 M
(pace and 1 time dimensions and Light Cone Causality - Time is a partial order and not linea) s
5 610 M
(r - Causal ordering between two spacetime points U and V) s
5 599 M
(582.2 Atomic Clocks, Satellite GPS and Special/General Relativity - http://www.astronomy.oh) s
5 588 M
(io-state.edu/~pogge/Ast162/Unit5/gps.html) s
5 577 M
(582.3 Feynman's Lectures on Physics - [Richard Feynman] - Volume 1 - Chapter 15 - Lorentz T) s
5 566 M
(ransformation and Special Relativity) s
5 555 M
(582.4 CAP Theorem,Spanner Database,TrueTime clock - [Breuer] - https://storage.googleapis.c) s
5 544 M
(om/pub-tools-public-publication-data/pdf/45855.pdf - Spanner achieves almost all three \(Con) s
5 533 M
(sistency, Availability, Partition Tolerance\) - "...The short answer is \342\\200\\234no\342\\200\\235) s
5 522 M
( technically, but \342\\200\\234yes\342\\200\\235 in effect and its users can and do assume CA.  The ) s
5 511 M
(purist answer is \342\\200\\234no\342\\200\\235 because partitions can happen and in fact have happen) s
5 500 M
(ed at Google, and during \(some\) partitions, Spanner chooses C and forfeits A. It is technic) s
5 489 M
(ally a CP system. We explore the impact of partitions below...") s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(----------------) s
5 445 M
(583. \(FEATURE\) *\) Sentiment Analyzer - Empath word embeddings - multipolar sentiment analys) s
5 434 M
(is) s
5 423 M
(*\) Factorization - JSON - 6 August 2018) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-----------------) s
5 390 M
(1.SentimentAnalyzer.py has been changed to invoke Empath lexical analyzer for various signa) s
5 379 M
(ls \(sentiments\)) s
5 368 M
(in Markov Random Fields Belief Propagation Sentiment Analysis function.) s
5 357 M
(2.Empath invocation computes objective maximum score from the dictionary returned by lexica) s
5 346 M
(l analyzer for) s
5 335 M
(each vertex in a clique) s
5 324 M
(3.RecursiveLambdaFunctionGrowth.py invokes Markov Random Fields Belief Propagation Sentimen) s
5 313 M
(t Analyzer function) s
5 302 M
(for the text graph and returns the sentiment score in intrinsic_merit_dict["empath_sentimen) s
5 291 M
(t"]) s
5 280 M
(4.Logs for this have been committed to testlogs/RecursiveLambdaFunctionGrowth.log.Empath_Be) s
5 269 M
(liefPropagation_RGO_M) s
5 258 M
(-----) s
5 247 M
(5.JSON for a sample factorization execution has also been committed) s
5 225 M
(References:) s
5 214 M
(-----------) s
5 203 M
(583.1. Analyzing Right Wing YouTube Channels - [Raphael Ottoni,Evandro Cunha,Gabriel Magno,) s
5 192 M
(Pedro Bernardina,) s
5 181 M
(Wagner Meira Jr.,Virgilio Almeida,Berkman Klein] - https://arxiv.org/pdf/1804.04096.pdf) s
5 170 M
(583.2. Empath - http://empath.stanford.edu/) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(-----------------) s
5 126 M
(584. \(FEATURE\) Latent Semantic Analysis/Indexing \(LSA/LSI\) Implementation - 7 August 2018) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-----------------) s
5 93 M
(1. Latent Semantic Analysis/Indexing has been implemented as python class in LatentSemantic) s
5 82 M
(Analysis.py) s
5 71 M
(2. This reads list of filenames from LatentSemanticAnalysis.txt and converts into term-docu) s
5 60 M
(ment matrix) s
5 49 M
(by invoking Pandas DataFrame and ScikitLearn Vector libraries) s
5 38 M
(3. Pandas DataFrame is converted to NumPy array and Singular Value Decomposition \(SVD\) is d) s
5 27 M
(one on) s
5 16 M
(term-document matrix to arrive at UEV^T decomposition.) s
5 5 M
(4. Documents are represented by U and terms by V. E is matrix of singular values.) s
_R
S
%%Page: (361) 361
%%BeginPageSetup
_S
18 36 translate
/pagenum 361 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (361) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(5. Cosine similarity of pairs of documents in U is computed for all pairs of documents and ) s
5 731 M
(printed in log:) s
5 720 M
(testlogs/LatentSemanticAnalysis.log.7August2018) s
5 709 M
(6. This class is multipurpose and can be used for variety of applications including Program) s
5 698 M
( Analysis.) s
5 687 M
(7. Corpus for this execution is list of python files and similarity between python code is ) s
5 676 M
(evidenced by) s
5 665 M
(cosine similarity) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(--------------------) s
5 621 M
(585. \(FEATURE\) SAT Solver - CVXOPT LAPACK gels\(\) least squares - 9 August 2018) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(--------------------) s
5 588 M
(1. SAT Solver has been changed to invoke LAPACK gels\(\) least squares from CVXOPT) s
5 577 M
(2. For this NumPy array is cast to CVXOPT real matrix object) s
5 566 M
(3. CVXOPT gels\(\) works only if the matrix is full-rank \(number of linearly independent rows) s
5 555 M
( is equal to number of rows and similarly for columns\) and throws ArithmeticError exception) s
5 544 M
( otherwise) s
5 533 M
(4. Approximately 1040 random 3SAT instances for 10 variables - 10 clauses have been execute) s
5 522 M
(d and MAXSAT) s
5 511 M
(approximation ratio converges to ~97%. For larger values of variables, finding full rank ma) s
5 500 M
(trix needs lot of) s
5 489 M
(iterations but still for 20 variables - 20 clauses similar convergence to ~96% was observed) s
5 478 M
(.) s
5 467 M
(5. Support for CVXOPT is crucial because of wide range of functionalities \(including Convex) s
5 456 M
( programs, SDPs\) present in CVXOPT) s
5 445 M
(6. logs for this have been committed to testlogs/CNFSATSolver.10variablesAlpha1.0.CVXOPT.lo) s
5 434 M
(g.9August2018) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(------------) s
5 390 M
(586. \(FEATURE\) Latent Semantic Analysis - Low Rank Approximation - 9 August 2018) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(------------) s
5 357 M
(1. New function for computing low rank approximation of term-document matrix has been inclu) s
5 346 M
(ded) s
5 335 M
(2. For SVD of td = UEV^T, few least singular values \(square root of eigen values of td\) are) s
5 324 M
( set to zero) s
5 313 M
(\(hardcoded to 10, because matrix_rank\(\) computation is quite slow for large term-document m) s
5 302 M
(atrices\)) s
5 291 M
(3. Low rank approximation of td is computed from matrix product of U * rankreduced\(E\) * V^T) s
5 280 M
(4. logs for this have been committed to testlogs/LatentSemanticAnalysis.log.9August2018) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(------------) s
5 236 M
(587. \(THEORY\) ImageNet, EventNet and Recursive Lambda Function Growth and Merit of Large Sc) s
5 225 M
(ale Visuals ) s
5 214 M
( - ImageGraph Algorithm - related to 249,410 - 10 August 2018) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(------------) s
5 181 M
(ImageNet is the pictorial WordNet and has received lot of attention in Computer Vision and ) s
5 170 M
(Large Scale) s
5 159 M
(Visual Recognition \(LSVR\) from Images/Videos. Deciding merit of a Video intrinsically with ) s
5 148 M
(no reputation rankings) s
5 137 M
(has been an open problem \(in Fame versus Merit\). Recursive Lambda Function Growth algorithm) s
5 126 M
( which generalizes) s
5 115 M
(Recursive Gloss Overlap for text-graph creation has been so far restricted only to text ana) s
5 104 M
(lysis. ImageNet) s
5 93 M
(has been applied for Object recognition/tracking based on Convolution Networks in Video dat) s
5 82 M
(asets \(e.g VID\). ) s
5 71 M
(This section describes an algorithm to map a video to ImageNet graph of visuals and infer m) s
5 60 M
(erit from this ) s
5 49 M
(image-graph:) s
5 38 M
(----------------------------------------------) s
5 27 M
(ImageNet-EventNet ImageGraph Algorithm:) s
5 16 M
(----------------------------------------------) s
5 5 M
(        \(*\) Every Video is set of frames of Images continuously played out in time. ) s
_R
S
%%Page: (362) 362
%%BeginPageSetup
_S
18 36 translate
/pagenum 362 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (362) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        \(*\) Some image frames in the past causally relate to some frames in future in the V) s
5 731 M
(ideo.) s
5 720 M
(        \(*\) For each image frame:) s
5 709 M
(        {) s
5 698 M
(                \(*\) Each frame is recognized by a standard LSVR algorithm \(e.g ConvNet\) and) s
5 687 M
( objects are annotated by bounding boxes.) s
5 676 M
(                \(*\) Each bounded recognized object in a frame is lookedup in ImageNet and a) s
5 665 M
(n ImageGraph is constructed per frame by computing ImageNet path between every pair of reco) s
5 654 M
(gnized objects and unifying the paths to create an ImageGraph for the frame, similar to Wor) s
5 643 M
(dNet Path s-t connectivity algorithm mentioned earlier for TextGraphs. ) s
5 632 M
(                \(*\) Merit of Video in human judgement is more than mere connectedness of in) s
5 621 M
(formation conveyed - it also depends on visual appeal e.g object attributes like Angle, Res) s
5 610 M
(olution, Lighting, Texture, Aesthetics etc., Edge weights in frame ImageGraph has to reckon) s
5 599 M
( these factors.) s
5 588 M
(        }) s
5 577 M
(        \(*\) Previous loop creates a huge set of ImageGraphs for frames in Video.) s
5 566 M
(        \(*\) Following EventNet convention, every frame is an Event vertex of set of actors ) s
5 555 M
(\(partakers\) in EventNet. Causation between two Event ImageGraphs for chronologically ordere) s
5 544 M
(d frames F1 and F2 \(E\(F1\) and E\(F2\)\) is determined by causal similarity of the graphs E\(F1\)) s
5 533 M
( and E\(F2\) i.e if there exist ImageNet paths from vertices of E\(F1\) to vertices of E\(F2\) th) s
5 522 M
(en F1 "causes" F2.) s
5 511 M
(        \(*\) Example: If frame F1 has recognized visual ImageGraph of a birthday party and F) s
5 500 M
(2 has recognized visual ImageGraph of cake-cutting, and if there exists an ImageNet path "b) s
5 489 M
(irthday - celebration - cake - cutting " ,then E\(F1\) causes E\(F2\).) s
5 478 M
(        \(*\) Previous algorithm converts a Video into a Graph of Graphs \(or\) Tensor which is) s
5 467 M
( a matrix having matriix entries. Size of this video tensor is O\(number_of_frames\).) s
5 456 M
(        \(*\) If Audio is also annotated by a Speech Recognition algorithm to text, it cataly) s
5 445 M
(ses in deciphering causation amongst sets of frames \(by creating AudioGraph per set of fram) s
5 434 M
(es from WordNet and connecting AudioGraphs by WordNet distances and this creates an audio t) s
5 423 M
(ensor\). ) s
5 412 M
(        \(*\) Once these tensors for video and audio are created, merit is computed by how ca) s
5 401 M
(usally connected these tensors are from standard Graph complexity measures already defined ) s
5 390 M
(for TextGraphs.) s
5 368 M
(------------------------------------------) s
5 357 M
(ImageGraph Merit as Tensor Products:) s
5 346 M
(------------------------------------------) s
5 335 M
(        \(*\) Two causally related \(having ImageNet path between their vertices\) ImageGraphs ) s
5 324 M
(E\(F1\) and E\(F2\) for frames F1 and F2 can be multiplied by Tensor Product which is a cartesi) s
5 313 M
(an/kronecker product of two adjacency matrices of each ImageGraph per frame - resulting ten) s
5 302 M
(sor product graph has:) s
5 291 M
(                \(*\) ImageNet vertex gh for g in V\(E\(F1\)\) and h in V\(E\(F2\)\) ) s
5 280 M
(                \(*\) ImageNet edge \(a,b\)-\(c,d\) iff edge \(a,c\) in E\(F1\) and \(b,d\) in E\(F2\)) s
5 269 M
(        \(*\) the tensor product for two frame ImageGraphs in the Video \(which are connected ) s
5 258 M
(causally by ImageNet\) as E\(F1\) * E\(F2\) yields a semantic similarity measure between success) s
5 247 M
(ive chronologically causative frames. e.g edges \(birthday, congregation\) in E\(F1\) and \(cake) s
5 236 M
(, serving\) in E\(F2\) are mapped to edge \(birthday-cake, congregation-serving\) in the product) s
5 225 M
( graph.) s
5 214 M
(        \(*\) EventNet Causality of ImageGraphs in a Video is represented by an adjacency mat) s
5 203 M
(rix defined as:) s
5 192 M
(                \(*\) EventNet matrix EN for a video of N image frames has N rows and N colum) s
5 181 M
(ns) s
5 170 M
(                \(*\) entry EN\(i,j\) = tensor product of Event ImageGraph for frame i and Even) s
5 159 M
(t ImageGraph for frame j if there is an ImageNet path between ImageGraphs for Frame i and j) s
5 148 M
(, else, 0) s
5 137 M
(        \(*\) This EventNet adjacency matrix represents a graph of causality between frames i) s
5 126 M
(n the video. ) s
5 115 M
(        \(*\) Weight of every edge \(a,b\)-\(c,d\) \(or\) \(ab\)-\(cd\) in tensor product of ImageGraph) s
5 104 M
(s for frames F1 and F2, E\(F1\)*E\(F2\) \(i.e \(a,c\) in E\(F1\) and \(b,d\) in E\(F2\)\) = 1/\(d\(a,b\)*d\(c) s
5 93 M
(,d\)\) for ImageNet distance d between two vertices in different ImageGraphs E\(F1\) and E\(F2\).) s
5 82 M
(        \(*\) Previous Inverse Weight implies an edge has more weight in Tensor Product graph) s
5 71 M
( if distance between endpoints of edges in two different ImageGraphs are close enough in Im) s
5 60 M
(ageNet. When either of the endpoints in two different ImageGraphs are not related by ImageN) s
5 49 M
(et, d is infinity and respective adjacency matrix entry for tensor product graph is 0.) s
5 38 M
(        \(*\) Applicability of EventNet to Large Scale Visual Recognition is quite unusual. N) s
5 27 M
(ecessity of tensor product entries as edge weights in Video EventNet adjacency matrix, than) s
5 16 M
( simple scalar weights is because of necessity of capturing distance between every pair of ) s
5 5 M
(vertices among 2 causally related ImageGraphs - one vertex is in E\(F1\) and other in E\(F2\) ) s
_R
S
%%Page: (363) 363
%%BeginPageSetup
_S
18 36 translate
/pagenum 363 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (363) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(------------------------------------------) s
5 720 M
(Gist and Intuition of previous algorithm) s
5 709 M
(------------------------------------------) s
5 698 M
(Every Video \(set of frames\) can be mapped to 1\) a causation graph of image frame event vert) s
5 687 M
(ices and 2\) each frame event itself is a subgraph of ImageNet - depth 2 graph-of-graphs cre) s
5 676 M
(ation. Causality between frame events is determined by ImageNet distances between vertices ) s
5 665 M
(in ImageGraphs of the frames represented as tensor product.) s
5 643 M
(References:) s
5 632 M
(-----------) s
5 621 M
(587.1 ImageNet Large Scale Visual Recognition Challenge - [Olga Russakovsky* \302\267 Jia Deng* \302) s
5 610 M
(\267 Hao Su \302\267 Jonathan Krause \302\267 Sanjeev Satheesh \302\267 Sean Ma \302\267 Zhiheng Huang \302\267 Andrej Karpa) s
5 599 M
(thy \302\267 Aditya Khosla \302\267 Michael Bernstein \302\267 Alexander C. Berg \302\267 Li Fei-Fei] - https://arx) s
5 588 M
(iv.org/pdf/1409.0575.pdf) s
5 577 M
(587.2 Zig-Zag Product - [Reingold, O.; Vadhan, S.; Wigderson, A. \(2000\)], "Entropy waves, t) s
5 566 M
(he zig-zag graph product, and new constant-degree expanders and extractors", Proc. 41st IEE) s
5 555 M
(E Symposium on Foundations of Computer Science \(FOCS\), pp. 3\342\\200\\22313 - https://arxiv.org) s
5 544 M
(/abs/math/0406038 - Graph product of large graph G and small graph H in which each vertex i) s
5 533 M
(n G is replaced by copy of H. In ImageGraph EventNet Tensor above, each vertex in EventNet ) s
5 522 M
(G is replaced by ImageGraph of Frame Event.) s
5 511 M
(587.3 Tensor Product of Graphs - https://en.wikipedia.org/wiki/Tensor_product_of_graphs) s
5 500 M
(587.4 ImageNet publications - http://image-net.org/about-publication) s
5 489 M
(587.5 ImageNet VID dataset - https://www.kaggle.com/c/imagenet-object-detection-from-video-) s
5 478 M
(challenge) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(--------------------) s
5 434 M
(588. \(THEORY\) Analyzing Youtube Videos, Ranking Movies and ImageGraph Tensor Products Algor) s
5 423 M
(ithm for ) s
5 412 M
(Merit of Large Scale Visuals - 14 August 2018, 15 August 2018 - related to 587) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(--------------------) s
5 379 M
(Analyzing Videos in public domain and Ranking Movies based on merit as opposed to usual hum) s
5 368 M
(an review/reputation ) s
5 357 M
(based rankings is one of the hardest Large Scale Visual Recognition Challenge. Algorithm fo) s
5 346 M
(r Mapping Video or Movie to EventNet Graph of frame ImageGraphs and representing EventNet e) s
5 335 M
(dge weights as Tensor Products has been described earlier.  This algorithm just elicits the) s
5 324 M
( graph complexity of visual information contained in the Video overlooking sentimental pola) s
5 313 M
(rities and psychological impact. Language Inquiry and Word Count \(LIWC\) is a dictionary of ) s
5 302 M
(human voted words categorized by their human psychological emotions. Classifying the object) s
5 291 M
(s in Video or Movie of human viewership therefore demands emotional categories of words. Fo) s
5 280 M
(llowing changes are made to previous algorithm for quantifying emotions:) s
5 269 M
(        \(*\) Emotions are mostly verbal and Speech Recognition annotated AudioGraph of Video) s
5 258 M
( or Movie Dialogue Transcript are created per frame/scene by union of WordNet paths for all) s
5 247 M
( pairs of words in Transcript per frame/scene) s
5 236 M
(        \(*\) Word Vertices of Each ImageGraph and AudioGraph per frame in Video or Movie are) s
5 225 M
( also annotated by the psychological polarity of the Word Vertex in LWIC ) s
5 214 M
(        \(*\) Weight of every edge \(a,b\)-\(c,d\) \(or\) \(ab\)-\(cd\) in tensor product of AudioGraph) s
5 203 M
(s and ImageGraphs for frames F1 and F2, E\(F1\)*E\(F2\) \(i.e \(a,c\) in E\(F1\) and \(b,d\) in E\(F2\)\)) s
5 192 M
( is the ordered pair of inverse distance similarity and majority LIWC polarity = \(1/\(dist\(a) s
5 181 M
(,b\)*dist\(c,d\)\), majority_LIWC_polarity_of\(a,b,c,d\)\) for ImageNet distance dist between two ) s
5 170 M
(vertices in different ImageGraphs or AudioGraphs E\(F1\) and E\(F2\).) s
5 159 M
(        \(*\) Merit of the Video or Movie in toto is the ordered pair = \(Tensor Rank of the A) s
5 148 M
(udioGraph and ImageGraph EventNet Tensors, Sorted list of top percentile LIWC polarity of e) s
5 137 M
(dge weights in ImageGraph and AudioGraph Tensor Products\) ) s
5 126 M
(        \(*\) Computing Tensor Rank is NP-Complete for Finite Fields and NP-hard for Rational) s
5 115 M
(s.) s
5 104 M
(        \(*\) Previous Merit captures both the complexity and emotional content of the Large ) s
5 93 M
(Scale Visual.) s
5 82 M
(        \(*\) Tensor Rank is the generalization of Matrix Rank \(number of linearly independen) s
5 71 M
(t rows\) = Dimension of Tensor = Minimum number of Tensors Ti to linearly express Tensor T =) s
5 60 M
( Sigma\(Ti\) ) s
5 49 M
(        \(*\) Most algorithms for Video analysis are caption and statistics based whereas the) s
5 38 M
( previous algorithm is a graph theoretic formulation of a machine learning computer vision ) s
5 27 M
(problem.) s
5 16 M
(        \(*\) There are recent other alternatives to LIWC e.g Empath.) s
5 5 M
(        \(*\) Intuition for choice of Tensor Rank as Merit of Large Scale Visuals:) s
_R
S
%%Page: (364) 364
%%BeginPageSetup
_S
18 36 translate
/pagenum 364 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (364) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                \(*\) Tensor Rank of EventNet is the number of Independent n-rows/n-columns o) s
5 731 M
(f Events in the Video) s
5 720 M
(                where n-columns and n-rows are hypercubes considering Tensor as multidimens) s
5 709 M
(ional array) s
5 698 M
(                \(*\) Increased Tensor Rank implies the Events in the Video are more disconne) s
5 687 M
(cted/independent) s
5 676 M
(                while decreased Tensor Rank implies the Events are more connected/dependent) s
5 665 M
(                \(*\) Therefore Video of Low Tensor Rank is heavily connected.) s
5 654 M
(        \(*\) Though applied to Video EventNet, tensor rank has wider philosophical ramificat) s
5 643 M
(ions because EventNet formalizes flow of time logically and has weird implication - EventNe) s
5 632 M
(t Logical Time Tensor can be written as linear sum of independent tensors and therefore Tim) s
5 621 M
(e tensor essentially is a linear function of finer time subdivision tensors.) s
5 610 M
(        \(*\) An important difference between Videos and Theoretical EventNet is: Event verti) s
5 599 M
(ces and participants/actors within an Event vertex can be created in parallel independent o) s
5 588 M
(f other event vertices in theoretical eventnet \(and causality edges between event vertices ) s
5 577 M
(could be established later in parallel too\) while a video \(youtube, movie etc.,\) is always ) s
5 566 M
(a serialized set of frames \(events\) though it could depict concurrent events - video is non) s
5 555 M
(-parallel unless more than one video source is simultaneously streamed. EventNet can be for) s
5 544 M
(mally defined by some Process calculi.) s
5 533 M
(        \(*\) Usually Like-ing Versus Merit of Videos has the following conflict: Videos or m) s
5 522 M
(ovies which induce viewers to repetitively watch them, garner huge popular support which is) s
5 511 M
( not necessarily a reflection of their merit. Music/Audio has an equivalent of this phenome) s
5 500 M
(non known as "Earworm") s
5 478 M
(References:) s
5 467 M
(----------) s
5 456 M
(588.1 Language Inquiry and Word Count - LIWC - http://liwc.wpengine.com/wp-content/uploads/) s
5 445 M
(2015/11/LIWC2015_LanguageManual.pdf) s
5 434 M
(588.2 Exploring Tensor Rank - http://www.its.caltech.edu/~matilde/WeitzMa10Abstract.pdf) s
5 423 M
(588.3 Tensor Rank is NP-Complete - [Hastad] - http://www.nada.kth.se/~johanh/tensorrank.pdf) s
5 412 M
( ) s
5 401 M
(588.4 Computational Complexity of Tensor Problems - https://www.stat.uchicago.edu/~lekheng/) s
5 390 M
(meetings/agtd/hillar13.pdf) s
5 379 M
(588.5 Tensor Rank as Measure of its Complexity - http://web.math.unifi.it/users/ottavian/co) s
5 368 M
(lloquium_kias.pdf) s
5 357 M
(588.6 Process Calculi - https://en.wikipedia.org/wiki/Process_calculus) s
5 346 M
(588.7 Actor Model and Process Calculi - https://en.wikipedia.org/wiki/Actor_model_and_proce) s
5 335 M
(ss_calculi_history) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(-----------------) s
5 291 M
(589. \(THEORY and FEATURE\) SAT Solver - CVXOPT - gesv\(\) least squares - 16 August 2018 - rel) s
5 280 M
(ated to 424) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(-----------------) s
5 247 M
(1. CNFSATSolver.py has been changed to import gesv, getrs, sysv functions for least squares) s
5 236 M
( in cvxopt) s
5 225 M
(2. Each of these were tried for 10 variables and 10 clauses combinations and gesv\(\) has the) s
5 214 M
( highest accuracy) s
5 203 M
(observed so far \(~99% to 100%\) in any of the least squares algorithms.) s
5 192 M
(3. logs for 500 random 3SAT instances have been committed to testlogs/CNFSATSolver.10variab) s
5 181 M
(lesAlpha1.0.CVXOPT.log.16August2018) s
5 170 M
(4. Caveat: Though the number of variables/clauses are less which could cause repetitive cho) s
5 159 M
(ice of same 3SAT similar randomness did not attain 99% accuracy for other least squares alg) s
5 148 M
(orithms earlier for similar variable-clause combination.) s
5 137 M
(5. gesv\(\) also throws ArithmeticError for non full-rank matrices and logs for gesv\(\) are fi) s
5 126 M
(ltered-out random 3SAT instances which are full rank. This leaves some random 3SAT instance) s
5 115 M
(s unsolved.) s
5 104 M
(6. try...except has been changed to print exception stacktrace for ArithmeticError) s
5 82 M
(CVXOPT gesv\(\) has breached the accuracy barrier to large extent from 95-97% to > 99% coinci) s
5 71 M
(ding with Random Matrix Analysis for 3SAT. But problem is with high number of variables and) s
5 60 M
( clauses which do not churn out full rank matrices for 3SAT and lot of instances are left o) s
5 49 M
(ut. So the average is only for full-rank random 3SATs. If this implies P=NP, Polynomial Hie) s
5 38 M
(rarchy PH collapses to P implying existence of PH-complete problems.) s
5 16 M
(-------------------------------------------------------------------------------------------) s
5 5 M
(------------------) s
_R
S
%%Page: (365) 365
%%BeginPageSetup
_S
18 36 translate
/pagenum 365 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (365) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(590. \(FEATURE\) Program Analysis + Software Analytics - Valgrind/Callgrind/KCachegrind Call ) s
5 731 M
(Graph DOT file ) s
5 720 M
(creation and its Cyclomatic Complexity - 18 August 2018) s
5 709 M
(-------------------------------------------------------------------------------------------) s
5 698 M
(------------------) s
5 687 M
(1. Valgrind/Callgrind are the standard tools for call graph profiling and memory leak check) s
5 676 M
( of userspace code.) s
5 665 M
(2. Cyclomatic Complexity is already computed for DOT files created by SATURN Program Analyz) s
5 654 M
(er for Linux Kernel ) s
5 643 M
(by VIRGO SATURN Program Analysis Driver. For userspace call graph DOT files are created by ) s
5 632 M
(Kcachegrind complementing SATURN in userspace.\(https://github.com/shrinivaasanka/virgo64-li) s
5 621 M
(nux-github-code/blob/master/virgo-docs/VIRGO_SATURN_Program_Analysis_Integration.txt\)) s
5 610 M
(3. Valgrind for an example Spark program \(Factorization\) is invoked as:) s
5 599 M
(valgrind --tool=callgrind -v --dump-every-bb=10000000 /media/Ubuntu2/spark-2.3.1-bin-hadoop) s
5 588 M
(2.7/bin/spark-submit ../DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py 8) s
5 577 M
(19289) s
5 566 M
(4. callgrind.out files are written to:) s
5 555 M
(        callgrind.DiscreteHyperbolicFactorization_TileSearch_Optimized.out.14531) s
5 544 M
(suffixed by process id.) s
5 533 M
(5. callgrind.out file is viewed by kcachegrind \(requires KDE\) and call graph is exported as) s
5 522 M
( DOT and image files in:) s
5 511 M
(        5.1 kcachegrind_callgraph_DiscreteHyperbolicFactorization_TileSearch_Optimized.png ) s
5 500 M
(        5.2 kcachegrind_callgraph_DiscreteHyperbolicFactorization_TileSearch_Optimized.dot) s
5 489 M
(6. CyclomaticComplexitySparkMapReducer.py has been updated for doing Spark wordcount of bot) s
5 478 M
(h SATURN and Valgrind/Callgrind/KCachegrind DOT Control Flow Graph / call graph files and p) s
5 467 M
(rint Cyclomatic Complexity.) s
5 456 M
(7. This leverages on already implemented Convolution Net Deep Learning of Graphic Performan) s
5 445 M
(ce Patterns by Perf and FlameGraph.) s
5 434 M
(8. Essentially Program Behaviour Analysis in userspace+kernelspace reduces to Graph Mining ) s
5 423 M
(of these DOT graphs.) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(------------------) s
5 379 M
(591. \(FEATURE\) Program Analysis + Software Analytics - Graph Mining of Call graph and CFG D) s
5 368 M
(OT files ) s
5 357 M
(- 20 August 2018) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(------------------) s
5 324 M
(1.GraphMining_GSpan.py has been changed to check for an error condition of number of vertic) s
5 313 M
(es per edge) s
5 302 M
(2.New function graph_mining\(\) has been included in software_analytics/CyclomaticComplexityS) s
5 291 M
(parkMapReducer.py for) s
5 280 M
(invocation of Graph Mining GSpan implementation to print frequent subgraph patterns in SATU) s
5 269 M
(RN CFG and Valgrind/Callgrind/KCachegrind graph DOT files) s
5 258 M
(3.logs for this have been committed to software_analytics/testlogs/CyclomaticComplexitySpar) s
5 247 M
(kMapReducer.log.GraphMining.20August2018) s
5 236 M
(4.This formally unifies the two ends: Program Analysis and Software Analytics \(Deep Learnin) s
5 225 M
(g and Graph Mining\)) s
5 214 M
(5.Frequent Subgraphs in DOT files of Call graph and Control Flow Graph\(CFG\) extract static ) s
5 203 M
(patterns in underlying software running on a system while the FlameGraph/Perf Graphics Deep) s
5 192 M
(Learning Analytics extract runtime patterns) s
5 181 M
(6.Theoretically, if SAT for a Program is created by SATURN, Least Square SAT Solver in Neur) s
5 170 M
(onRain could be model checker for the Program) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(------------------) s
5 126 M
(592. \(THEORY and FEATURE\) SAT Solver - CVXOPT - L1-norm Regularized Least Squares Quadratic) s
5 115 M
( Program l1regls\(\) ) s
5 104 M
(and gesv\(\) - 22 August 2018) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(------------------) s
5 71 M
(1.This commit includes a special SAT Solver in CVXOPT documentation example l1regls\(\) [http) s
5 60 M
(s://cvxopt.org/examples/mlbook/l1regls.html] which solves the L1-norm regularized Least Squ) s
5 49 M
(ares Quadratic Program\(QP\):) s
5 38 M
(        minimize error |AX-B|^2 + L1Norm\(|X|\)) s
5 27 M
(which is the most accurate Least Square Solution. Geometric intuition and preference of L1 ) s
5 16 M
(norm for least squares is depicted in Q&A: https://www.quora.com/Why-is-L1-regularization-b) s
5 5 M
(etter-than-L2-regularization-provided-that-all-Norms-are-equivalent) s
_R
S
%%Page: (366) 366
%%BeginPageSetup
_S
18 36 translate
/pagenum 366 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (366) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(2. In the context of SAT, previous minimization implies, the polynomial approximating the b) s
5 720 M
(inary assignment) s
5 709 M
(heaviside step function is as close as possible to satisfying each clause \(because B is uni) s
5 698 M
(t vector of 1s for) s
5 687 M
(each clause\) and sum of real fractional assignments \(real parity\) is minimum. This can be v) s
5 676 M
(isualized as a) s
5 665 M
(sinusoidal string pulled on both directions and string settles at an equilibrium curvature ) s
5 654 M
(which minimizes the) s
5 643 M
(QP above.) s
5 621 M
(3. Prerequisite l1regls from https://cvxopt.org/_downloads/l1regls.py has to be downloaded ) s
5 610 M
(and PYTHONPATH must be set to it.) s
5 588 M
(4. CNFSATSolver.py has been refactored with if clauses for the least square algorithm invok) s
5 577 M
(ed. For equal variable-clause "lapack\(\)" invokes gesv\(\) and for unequal variable-clause gel) s
5 566 M
(s\(\) is invoked) s
5 544 M
(5. Few 1000 variables * 1000 clauses random 3SAT instances have been solved for l1regls\(\) w) s
5 533 M
(ith MAXSAT approximation ratio 96%-97%) s
5 511 M
(6. CVXOPT gesv\(\) has been tested again for 10 variables * 10 clauses and similar MAXSAT app) s
5 500 M
(roximation ratio of 99%-100% has been observed.  gesv\(\) throws ArithmeticError if A is sing) s
5 489 M
(ular \(not invertible, determinant 0\) while gels\(\) throws ArithmeticError if A is not full-r) s
5 478 M
(ank - gesv\(\) is exact solver and gels\(\) is least square solver. \(NumPy solve\(\) internally u) s
5 467 M
(ses lapack gesv\). So the logs filter out singular random 3SAT matrices.) s
5 445 M
(References:) s
5 434 M
(-----------) s
5 423 M
(592.1 Advanced Engineering Mathematics - Tenth Edition - [Erwin Kreyszig] - https://www.saf) s
5 412 M
(aribooksonline.com/library/view/advanced-engineering-mathematics/9780470458365/Chapter006.h) s
5 401 M
(tml#ch006-sec003 - Many Unit Heavyside step function and Laplace Transforms. Randomized Rou) s
5 390 M
(nding of real assignments creates a many unit Heavyside step function.) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(--------------------) s
5 346 M
(593. \(FEATURE\) Audio/Music Pattern Mining - Audio to Time Series - 24 August 2018) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(--------------------) s
5 313 M
(1.Similar to image_pattern_mining/ImageToBitMatrix.py, new file AudioToBitMatrix.py has bee) s
5 302 M
(n committed to) s
5 291 M
(repository for converting an audio file \(e.g MP3, .wav\) to time series array) s
5 280 M
(2.AudioToBitMatrix.py imports librosa \(audioread\) Python library which returns waveform tim) s
5 269 M
(e series floating point array and sampling rate.) s
5 258 M
(3.audio-to-bitmatrix function has optional arguments to specify if the time series is binar) s
5 247 M
(y or float \(defaults to float\) and duration of the timeseries \(defaults to full\)) s
5 236 M
(4.Binary time series invokes bin\(\) on each time series point) s
5 225 M
(5.An example audio MP3 file has been converted to time series and logs have been committed ) s
5 214 M
(to testlogs/AudioToBitMatrix.log.24August2018) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(--------------------) s
5 170 M
(594. \(THEORY\) Horn3SAT and Least Squares Approximate SAT Solver - 7 September 2018) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(--------------------) s
5 137 M
(Horn3SAT is the special case of 3SAT in which each clause is Horn clause having single posi) s
5 126 M
(tive literal known) s
5 115 M
(as Head and all other literals are negative. Horn3SAT is P-complete and is solved by unit p) s
5 104 M
(ropagation algorithm in polynomial time. Unit propagation algorithm has 2 repetitive phases) s
5 93 M
(: *\) Remove all unit clauses having single literal *\) Remove negated literal in all clauses) s
5 82 M
(. Horn3SAT can be solved by Least Squares Approximate Solver by creating random Horn3SAT ma) s
5 71 M
(trix similar to random 3SAT matrix. This random Horn3SAT matrix is very sparse and has only) s
5 60 M
( one 1 per row for head literal and all other columns are 0s. Since Horn3SAT is P-complete,) s
5 49 M
( there exists a deterministic \(and possibly parallel because P-completeness implies NC\) alg) s
5 38 M
(orithm to solve it one of which is unit propagation. Solution to this Horn3SAT random matri) s
5 27 M
(x Linear system of equations for equal variable-clause is deterministic polynomial time \(ge) s
5 16 M
(sv\(\) solver can be applied for non-singular instances\) while unequal variable-clauses are l) s
5 5 M
(east squares solvable by algorithms - lsmr/gels/lsqr etc., Cloud algorithms like lsrn can s) s
_R
S
%%Page: (367) 367
%%BeginPageSetup
_S
18 36 translate
/pagenum 367 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (367) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(olve Horn3SAT random matrix instance in NC if number of parallel processors are logdepth an) s
5 731 M
(d polynomial size.) s
5 709 M
(References:) s
5 698 M
(----------) s
5 687 M
(594.1 Unit Propagation Horn3SAT Solver - https://en.wikipedia.org/wiki/Unit_propagation) s
5 676 M
(594.2 Binary Least Squares and SAT Solver - http://www.mirlab.org/conference_papers/Interna) s
5 665 M
(tional_Conference/ICASSP%202011/pdfs/0003780.pdf - Binary Least Squares Solution to AX=B fo) s
5 654 M
(r boolean X is NP-Hard - Semidefinite Relaxation of Least Squares - Gaussian Randomization ) s
5 643 M
(for obtaining binary values for X from feasible Semidefinite solution - Section 3 - Page 37) s
5 632 M
(82) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(-----------------) s
5 588 M
(595. \(FEATURE\) Music/Audio Pattern Mining - Histogram and Probability Distribution Function) s
5 577 M
( extraction \(PDF\)) s
5 566 M
(- 7 September 2018) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-----------------) s
5 533 M
(1.New function audio_features\(\) has been added for analyzing features in audio/music signal) s
5 522 M
(2.Considering audio as time series there are 2 standard ways to extract probability distrib) s
5 511 M
(ution from) s
5 500 M
(time series: 1\) Histogram 2\) Bandt and Pompe - [Andres M. Kowalski,Maria Teresa Martin,Ange) s
5 489 M
(lo Plastino and George Judge] - www.mdpi.com/1099-4300/14/10/1829/pdf) s
5 478 M
(3.audio_features\(\) invokes histogram\(\) function and extracts PDF from NumPy by setting dens) s
5 467 M
(ity=True) s
5 456 M
(4.Comparing two music signals amounts to finding Jensen-Shannon Divergence of two probabili) s
5 445 M
(ty distributions) s
5 434 M
(5.Histogram for an example audio signal is printed in testlogs/AudioToBitMatrix.log.7Septem) s
5 423 M
(ber2018) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(------------------) s
5 379 M
(596. \(FEATURE\) Music/Audio Pattern Mining - Jensen-Shannon Divergence of Probability Distri) s
5 368 M
(butions of two ) s
5 357 M
(audio signals - 8 September 2018) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(------------------) s
5 324 M
(1.audio_features\(\) in AudioToBitMatrix.py returns the probability histogram and bins in a t) s
5 313 M
(uple) s
5 302 M
(2.JensenShannonDivergence.py has been rewritten to compute normalization inline \(normalize\() s
5 291 M
(\) function has been) s
5 280 M
(removed\), import audio functions from AudioToBitMatrix.py and compute probability histogram) s
5 269 M
(s for two) s
5 258 M
(different audio files.) s
5 247 M
(3.logs for Jensen-Shannon Divergence distance between two audio files have been committed t) s
5 236 M
(o testlogs/JensenShannonDivergence.log.8September2018 \(For same audio, distance is zero\)) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(-------------------) s
5 192 M
(597. \(THEORY\) Computational Geometric Sequential Factorization Optimization by Wavelet Tree) s
5 181 M
(s, Tile Summation ) s
5 170 M
(Ray Shooting Queries and Error Probability - related to 506, 575 - 14 September 2018, 15 Se) s
5 159 M
(ptember 2018,) s
5 148 M
(16 September 2018) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(-------------------) s
5 115 M
(Sequential Factorization Optimization by Tile Summation Ray Shooting Queries and searching ) s
5 104 M
(the epsilon radius) s
5 93 M
(in the vicinity of approximate factors described earlier have the following error probabili) s
5 82 M
(ty in failing to) s
5 71 M
(find a factor:) s
5 49 M
(If epsilon radius is O\(\(logN\)^l\) around an approximate factor, probability of not finding a) s
5 38 M
( factor =) s
5 27 M
(        distance between periphery of 2 epsilon radius circles surrounding an approximate f) s
5 16 M
(actor) s
5 5 M
(        -----------------------------------------------------------------------------------) s
_R
S
%%Page: (368) 368
%%BeginPageSetup
_S
18 36 translate
/pagenum 368 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (368) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-----) s
5 731 M
(                        N/kloglogN) s
5 709 M
(        = [N\(m+1\) - Nm] / kloglogN - 2q\(logN\)^l ) s
5 698 M
(        ---------------------------------------) s
5 687 M
(                        N/kloglogN  ) s
5 665 M
(        = N/kloglogN - 2q\(logN\)^l) s
5 654 M
(        --------------------------) s
5 643 M
(                N/kloglogN) s
5 621 M
(For low error probability, numerator tends to 0:) s
5 610 M
(        N/kloglogN = 2q\(logN\)^l) s
5 599 M
(        => l = log\(N/2kqloglogN\)/loglogN = O\(log\(N/loglogN\)/loglogN\) which is exponential.) s
5 588 M
( ) s
5 577 M
(For constant l, probability of error is non-trivial. This epsilon radius vicinity search ap) s
5 566 M
(plies to other ray shooting algorithms too \(by replacing Hardy-Ramanujan estimate with the ) s
5 555 M
(corresponding ray shooting algorithm and equating to tile summation\). Advantage of tile sum) s
5 544 M
(mation is it always results in an integral value and coincides with some factor point on xy) s
5 533 M
(-plane. ) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(---------------------) s
5 489 M
(598. \(THEORY\) Hastad Switching Lemma, Least Squares Approximate SAT Solver, Random Restrict) s
5 478 M
(ions, CNFSAT) s
5 467 M
(to DNFSAT - 18 September 2018) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(---------------------) s
5 434 M
(Least Squares Approximation by Random 3SAT matrix analysis previously has so far solved alm) s
5 423 M
(ost 99%-100% clauses) s
5 412 M
(\(observed\) excluding singular random 3SAT matrix instances. This implies binary assignments) s
5 401 M
( to some variables ) s
5 390 M
(are not right by randomized rounding of real assignments, falsifying some of the clauses. H) s
5 379 M
(astad Switching Lemma) s
5 368 M
(implies setting values to alpha fraction of variables \(restriction\) in a CNF\(or DNF\) formul) s
5 357 M
(a and evaluating the restricted formula by switching it to DNF\(or CNF\) and computing its de) s
5 346 M
(cision tree abides by the inequality:) s
5 335 M
(        Pr[DTdepth\(f/alpha\) > d] <= \(10*alpha*w\)^d) s
5 324 M
(for s = sigma*n <= n/5, d >= 0, w is formula width. Least Squares Approximation thus can be) s
5 313 M
( construed as restriction generator by following algorithm:) s
5 302 M
(        \(*\) Solve a random 3SAT matrix by Least Squares \(e.g gesv\(\)\) ) s
5 291 M
(        \(*\) Variables in all satisfied clauses in least squares solution form a random rest) s
5 280 M
(riction - set variables) s
5 269 M
(        \(*\) Variables in all unsatisfied clauses in least squares solution \(excluding varia) s
5 258 M
(bles in satisfied clauses\) are made unset variables ) s
5 247 M
(        \(*\) Switch the restricted CNF3SAT to a DNF3SAT in unset variables) s
5 236 M
(        \(*\) DNF3SAT is solvable in polynomial time \(linear\)) s
5 214 M
(References:) s
5 203 M
(-----------) s
5 192 M
(598.1 Hastad Switching Lemma - [Johan Hastad] - PhD Thesis - Chapter 4 - Lemma 4.1 - "Let G) s
5 181 M
( be an AND of ORs all of size <= t and rho a random restriction from R\(p\). Then the probabi) s
5 170 M
(lity that G/rho cannot be written as an OR of ANDs all of size < s is bounded by alpha^s wh) s
5 159 M
(ere alpha is the unique positive root to the equation:) s
5 148 M
(        \(1 + 4p/\(1+p\)*\(1/alpha\)\)^t = \(1 + 2p/\(1+p\)*\(1/alpha\)\)^t + 1" and Stronger Switching) s
5 137 M
( Lemma - Lemma 4.2 - "Let G = /\\ Gi where Gi are ORs of fanin <= t. Let F be an arbitrary f) s
5 126 M
(unction and p, a random restriction in R\(p\).Then Pr[min\(G\) >= s/Fp = 1] <= \(alpha\)^s" - htt) s
5 115 M
(ps://www.nada.kth.se/~johanh/thesis.pdf) s
5 104 M
(598.2 Hastad Switching Lemma - [Vikraman Arvind] - JRF Course Notes - Complexity 2 - August) s
5 93 M
(-December 2010 - Institute of Mathematical Sciences, Chennai.) s
5 82 M
(598.3 Randomized Rounding of Set Cover - [CR Subramanian] - JRF Course Notes - Randomized A) s
5 71 M
(lgorithms - August-December 2010 - Institute of Mathematical Sciences, Chennai. Least Squar) s
5 60 M
(es SAT Solver rounds real assignment by midpoint of max-min values in assignment vector. Al) s
5 49 M
(ternatively, each variable x* in real assignment vector can be rounded with respect to maxi) s
5 38 M
(mum value f in real assignment as: x = 0 if x* < 1/f else x = 1.) s
5 27 M
(598.4 Hastad Switching Lemma - Course Notes - [Jonathan Katz] - Corollary 3 - "Let f:{0,1}^) s
5 16 M
(n - {0,1} be computed by a DNF formula \(resp. CNF formula\) of width at most w. Let alpha be) s
5 5 M
( a random s-restriction with s <= n/5. Then f/alpha can be computed by a CNF formula \(resp.) s
_R
S
%%Page: (369) 369
%%BeginPageSetup
_S
18 36 translate
/pagenum 369 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (369) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( DNF formula\) of width w except with probability at most \(10sw/n\)^w => Pr[DT\(f/alpha\) >= s]) s
5 731 M
( < \(10sw/n\)^w \(or\) Pr[DTdepth\(f/alpha\) > d] <= \(10*sigma*w\)^d for s=sigma*n <= n/5 and d>= ) s
5 720 M
(0." - http://www.cs.umd.edu/~jkatz/complexity/f05/switching-lemma.pdf) s
5 709 M
(598.5 Switching Lemma - https://en.wikipedia.org/wiki/Switching_lemma - "...The switching l) s
5 698 M
(emma says that depth-2 circuits in which some fraction of the variables have been set rando) s
5 687 M
(mly depend with high probability only on very few variables after the restriction. The name) s
5 676 M
( of the switching lemma stems from the following observation: Take an arbitrary formula in ) s
5 665 M
(conjunctive normal form, which is in particular a depth-2 circuit. Now the switching lemma ) s
5 654 M
(guarantees that after setting some variables randomly, we end up with a Boolean function th) s
5 643 M
(at depends only on few variables, i.e., it can be computed by a decision tree of some small) s
5 632 M
( depth d. This allows us to write the restricted function as a small formula in disjunctive) s
5 621 M
( normal form. A formula in conjunctive normal form hit by a random restriction of the varia) s
5 610 M
(bles can therefore be "switched" to a small formula in disjunctive normal form....") s
5 599 M
(598.6 Cutting Planes - Gomory Cut - https://ocw.mit.edu/courses/sloan-school-of-management/) s
5 588 M
(15-053-optimization-methods-in-management-science-spring-2013/tutorials/MIT15_053S13_tut11.) s
5 577 M
(pdf - for Integer Linear Programs.) s
5 566 M
(598.7 Chapter 14 - Cutting planes - Combinatorial Optimization - [Stiglitz-Papadimitriou]) s
5 555 M
(598.8 Randomized Rounding Survey - [Aravind Srinivasan] - http://homepage.divms.uiowa.edu/~) s
5 544 M
(sriram/196/fall08/rr-final.pdf - Pr[Clause is satisfied] > 0.75*\(sum of relaxed fractional ) s
5 533 M
(assignments\) - "...One intuitive justification for this is that if x\342\\210\\227\(j\) were \342\\200) s
5 522 M
(\\234high\342\\200\\235, i.e., close to 1, it may be taken as an indication by the LP that it is ) s
5 511 M
(better to set variable j to True; similarly for the case where x\(j\) is close to 0. ..." - L) s
5 500 M
(east Squares SAT Solver applies this intuition for rounding.) s
5 489 M
(598.9 Randomized Rounding - Randomized Algorithms - [Motwani-Raghavan] - Pages 81,96,105,10) s
5 478 M
(6 - optimized wiring nets.) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(-------------------) s
5 434 M
(599. \(FEATURE\) Streaming Algorithms - Approximate Counting and Distinct Elements - 21 Septe) s
5 423 M
(mber 2018) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-------------------) s
5 390 M
(599.1. Two new python implementations for Streaming Approximate Counting and Distinct Eleme) s
5 379 M
(nts in a random subset) s
5 368 M
(have been committed to repository) s
5 357 M
(599.2. These are implementations of two algorithms from JRF presentation notes \(on 28-29/10) s
5 346 M
(/2010\) for course - Topics in Datamining - during August-December 2010, Chennai Mathematica) s
5 335 M
(l Institute, Chennai.) s
5 324 M
(599.3. They have been implemented because of their importance for processing Streaming Data) s
5 313 M
(sets e.g Spark Streaming) s
5 291 M
(References:) s
5 280 M
(-----------) s
5 269 M
(599.4. Approximate Counting Algorithm - [Morris-Flajolet] - http://algo.inria.fr/flajolet/P) s
5 258 M
(ublications/Slides/aofa07.pdf) s
5 247 M
(599.5. Distinct Elements algorithm - [BarYossef] - https://slideplayer.com/slide/4943252/) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(------------------) s
5 203 M
(600. \(FEATURE\) Streaming Abstract Generator - Absolute paths to Relative paths - 21 Septemb) s
5 192 M
(er 2018) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(------------------) s
5 159 M
(File Datasource paths have been changed from absolute to relative paths) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(------------------) s
5 115 M
(601. \(THEORY\) Algebraic Geometry and Computational Geometric Factorization - some definitio) s
5 104 M
(ns ) s
5 93 M
(- 24 September 2018) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(------------------) s
5 60 M
(Euclidean Rings are defined as: ) s
5 49 M
(For a,b in ring R, both non-zero, there exist t,r in R such that a=tb + r) s
5 38 M
(where r >= 0. Unique Factorization Theorem is defined on Euclidean Rings. ) s
5 27 M
(Set of Integers are examples of Euclidean Rings.) s
5 5 M
(Let R be a Ring. An Ideal I of R is a subgroup of \(R,+\) and for all x in I and for all r in) s
_R
S
%%Page: (370) 370
%%BeginPageSetup
_S
18 36 translate
/pagenum 370 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (370) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( R, x.r and r.x in I.) s
5 731 M
(Set of all Integers Z divisible by an integer n is an ideal denoted by nZ. Ideals can be ge) s
5 720 M
(nerated by a subset X) s
5 709 M
(of Z. Special case is when X is a singleton X={a} for some a in Z, named Principal Ideal:) s
5 698 M
(        => aZ = {ar | r in Z}) s
5 687 M
(        and Za = {ra | r in Z}) s
5 676 M
(These ideals are left and right principal ideals generated by X={a} i.e multiples of a.) s
5 654 M
(Every hyperbolic tile segment in Computational Geometric Factorization is the union of inte) s
5 643 M
(rsections of principalideals - one infinite ideal y1*Z parallel to x-axis and other k infin) s
5 632 M
(ite ideals xi*Z parallel to y-axis in xy-grid \(each intersection is a pixel in xy-grid\) for) s
5 621 M
( xi and y1 in Z - this intersection of principal ideals is finite:) s
5 610 M
(        y1*Z = {y1, y1*2, y1*3,...}) s
5 599 M
(        x1*Z = {x1, x1*2, x1*3,...}) s
5 588 M
(        x2*Z = {x2, x2*2, x2*3,...}) s
5 577 M
(        x3*Z = {x3, x3*2, x3*3,...}) s
5 566 M
(        ...) s
5 555 M
(        xk*Z = {xk, xk*2, xk*3,...}) s
5 533 M
(        Tile segment = \(x1*Z /\\ y1*Z\) \\/ \(x2*Z /\\ y1*Z\) \\/ ... \(xk*Z /\\ y1*Z\)) s
5 511 M
(In Algebraic Geometric terms, a hyperbolic pixelation is union of tile segments \(union of u) s
5 500 M
(nion of intersections of principal ideals\). Sum of lengths of first n tile segments of pixe) s
5 489 M
(lated hyperbolic curve:) s
5 478 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] = Nn/\(n+1\)) s
5 467 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] <= N/1^2 + N/2^2 + N/3^2 + N/4^2 + ... ) s
5 456 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] <= \(RiemannZetaFunction\(s=2\)\)*N) s
5 445 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] <= 1.6449*N) s
5 423 M
(An algebraic subset of Z^2 for hyperbolic variety is defined as \(N is number to factorize\):) s
5 412 M
(        V\(S\) = { \(x1,y1\) in Z^2 | x1*y1 - N = 0 }) s
5 401 M
(which is the point-set on the hyperbolic tile segments \(equivalent to previous definition b) s
5 390 M
(ased on principal ideals\).) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(Computational Geometric Hyperbolic tile segments pixelation as Variety over Finite Fields:) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(Algebraic Varieties are defined as set of zeros of polynomial equations. If K is a Field an) s
5 324 M
(d N is a positive integer, an affine N-Space over K is defined as:) s
5 313 M
(        A^N\(K\) = {\(a1,a2,...,aN\)| a1,a2,...,aN in K}) s
5 302 M
(A subset of affine N-Space is an affine Algebraic Variety over K defined as:) s
5 291 M
(        X\(K\) = {a in A^N\(K\)| f1\(a\) = 0,f2\(a\) = 0,...,fr\(a\)=0}) s
5 280 M
(if there are polynomials f1,f2,...,fr having coefficients from K[T1,T2,...,Tn]. In Computat) s
5 269 M
(ional Geometric Factorization, Hyperbolic tile segment pixelation is an affine Algebraic Va) s
5 258 M
(riety defined over a finite field or Galois Field K of order p^n >> N \(p^n is a prime power) s
5 247 M
(\) satisfying polynomial x1*y1 - N = 0 for \(x1,y1\) in affine 2-Space A^2\(K\). Counting number) s
5 236 M
( of elements in finite algebraic variety is non-trivial problem - in the context of geometr) s
5 225 M
(ic factorization, this is tantamount to finding number of points in hyperbolic tile segment) s
5 214 M
(s.) s
5 192 M
(References:) s
5 181 M
(-----------) s
5 170 M
(601.1 Algebraic Geometry - Chapters 1 and 2 - [JS Milne] - https://www.jmilne.org/math/Cour) s
5 159 M
(seNotes/AG.pdf ) s
5 148 M
(601.2 Principal Ideal - https://en.wikipedia.org/wiki/Ideal_\(ring_theory\)) s
5 137 M
(601.3 Topics in Algebra - [Israel N. Herstein] - Pages 143-144 - Euclidean Rings) s
5 126 M
(601.4 Value of Riemann Zeta Function at s=2 - https://en.wikipedia.org/wiki/Particular_valu) s
5 115 M
(es_of_the_Riemann_zeta_function - pi^2/6=1.6449...) s
5 104 M
(601.5 Counting Points of Varieties over Finite Fields - [Sudhir Ghorpade, IIT Bombay, Mumba) s
5 93 M
(i] - http://www.math.iitb.ac.in/~srg/Talks/IRCCAwardLecture_Ghorpade_29Aug2012.pdf) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(---------------) s
5 49 M
(602. \(THEORY\) Software Analytics - GraphFrames - GraphX - Parallel Graph Algorithms for Cal) s
5 38 M
(lGraph/CFG/SATURN Graph DOT files - 27 September 2018) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(---------------) s
5 5 M
(1.NeuronRain till now has a native implementation of parallelized graph processing \(e.g def) s
_R
S
%%Page: (371) 371
%%BeginPageSetup
_S
18 36 translate
/pagenum 371 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (371) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(inition graph growth) s
5 731 M
(implementation in InterviewAlgorithm/ for texts\) and sequential NetworkX Graph objects) s
5 720 M
(2.Spark has parallel graph library GraphX and a separate repository GraphFrames which inter) s
5 709 M
(nally wraps GraphX) s
5 698 M
(\(http://graphframes.github.io/api/python/graphframes.html\)) s
5 687 M
(3.This commit introduces an option to choose GraphFrames in analyzing Software Analytics Ca) s
5 676 M
(llGraph/CFG/SATURN DOT files in CyclomaticComplexitySparkMapReducer.py and invokes few para) s
5 665 M
(llel algorithm functions for indegrees, strongly connected components, triangle counting.) s
5 654 M
(4.Number of strongly connected components, degrees, triangles in CallGraph/CFG/SATURN graph) s
5 643 M
(s are cyclomatic measures of code complexity \(both static and dynamic\)) s
5 632 M
(5.logs for GraphFrames is committed to testlogs/CyclomaticComplexitySparkMapReducer.log.Gra) s
5 621 M
(phXFrames.27September2018) s
5 610 M
(6.GraphFrames can be applied not just to Program Analysis DOT files but to any other source) s
5 599 M
( \(TextGraph, Social Networks etc.,\)`) s
5 588 M
(7.Spark Commandline for GraphFrames package: /media/Ubuntu2/spark-2.3.1-bin-hadoop2.7/bin/s) s
5 577 M
(park-submit --packages graphframes:graphframes:0.6.0-spark2.3-s_2.11 CyclomaticComplexitySp) s
5 566 M
(arkMapReducer.py) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(------------------) s
5 522 M
(603. \(THEORY and FEATURE\) ImageGraph creation from an Image - Keras-Theano - related to 587) s
5 511 M
( and 588 -) s
5 500 M
(EventNet Tensor Products Algorithm for Merit of Large Scale Visuals - 30 September 2018) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(------------------) s
5 467 M
(1.This commit introduces a primitive but crucial implementation of EventNet Tensor Products) s
5 456 M
( Algorithm ) s
5 445 M
(for Large Scale Visuals which creates a text graph from information gained from processing ) s
5 434 M
(of a visual \(.jpg\).) s
5 423 M
(2.Keras is a framework for Computer Vision which supports pre-trained ImageNet datasets \(VG) s
5 412 M
(G, ResNet\) annotated) s
5 401 M
(to ImageNet vertices by Convolution Neural Networks.ImageNet presently has 14 million verti) s
5 390 M
(ces.) s
5 379 M
(3.Keras has support for TensorFlow, Theano, CNTK backends. A python implementation which im) s
5 368 M
(ports Keras and sets) s
5 357 M
(the backend to Theano and predicts objects in an image from ImageNet has been committed to ) s
5 346 M
(image_pattern_mining/ImageNet/ImageGraph_Keras_Theano.py) s
5 335 M
(4.This script loads an image in keras-theano, converts it to an image array, expands its di) s
5 324 M
(mensions and predicts the objects in the image by ResNet50 pre-trained ImageNet dataset. ) s
5 313 M
(5.Predictions for objects in image are decoded into array of tuples of the form \(id, imagen) s
5 302 M
(et_vertex, probability\).) s
5 291 M
(6.An example prediction for few images is described in : https://www.pyimagesearch.com/2016) s
5 280 M
(/08/10/imagenet-classification-with-python-and-keras/ along with probabilities for objects ) s
5 269 M
(annotated.) s
5 258 M
(7.These predicted ImageNet vertices are concatenated into a text and passed on to Recursive) s
5 247 M
(GlossOverlap_Classifier.py which creates a Text Graph - ImageGraph - by invoking RecursiveG) s
5 236 M
(lossOverlapGraph\(\) on this text.) s
5 225 M
(8.This algorithm essentially maps an Image to a TextGraph. Presently only still images are ) s
5 214 M
(supported - extending to Video is straightforward by getting all frames in a video and comp) s
5 203 M
(uting ImageGraphs for all frames and Tensor Products of the causally related ImageGraphs.) s
5 192 M
(9.logs for few images \(one of which is courtesy: https://www.aazp.in/live-streaming/ - Whit) s
5 181 M
(eTiger_1.jpg\) have been committed to image_pattern_mining/ImageNet/testlogs/) s
5 170 M
(10.Graphs printed in logs show fairly reasonable inference of prominent entities in image. ) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(------------------) s
5 126 M
(604. \(FEATURE\) Music Pattern Mining - Onset of Notes Detection - 1 October 2018 - related t) s
5 115 M
(o 67,68,69) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(------------------) s
5 82 M
(1. audio_features\(\) function in AudioToBitMatrix.py has been updated to compute notes onset) s
5 71 M
( from audio signal) s
5 60 M
(2. Notes Onset Detection involves finding peaks in onset strength of the signal time series) s
5 49 M
(.) s
5 38 M
(3. Extracting notes from signal converts the music time series to a string from a language ) s
5 27 M
(of notes alphabets.) s
5 16 M
(4. Most algorithms for audio analysis are time-series \(fft,statistics etc.,\) based. Conside) s
5 5 M
(ring music as a Formal language opens new vistas into theoretical analysis of music. For ex) s
_R
S
%%Page: (372) 372
%%BeginPageSetup
_S
18 36 translate
/pagenum 372 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (372) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ample, finding a deterministic finite state automaton for sequence of notes in a music sign) s
5 731 M
(al is measure of complexity in music. ) s
5 720 M
(5. Not just automata, variety of string complexity measures \(e.g Kolmogorov complexity - MD) s
5 709 M
(L\) can effectively) s
5 698 M
(describe music notes strings. ) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(------------------) s
5 654 M
(605. \(THEORY\) Computational Geometric Factorization, Parallel Planar Point Location, Ray Sh) s
5 643 M
(ooting Queries,) s
5 632 M
(Multisearch, PRAM and BSP models - 2 October 2018 - related to 34, 506, 575, 597) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(------------------) s
5 599 M
(Factorization by Computational Geometric algorithms - k-mergesort, segment trees, wavelet t) s
5 588 M
(rees, ray shooting) s
5 577 M
(queries - described earlier implement a generic idiom of Planar Point Location which locate) s
5 566 M
(s factor points ) s
5 555 M
(inside some of the polygons in the planar subdivision created by the hyperbolic pixel array) s
5 544 M
( segments. Planar) s
5 533 M
(Point Location is a special problem in Multisearch which is defined as: Given a set of quer) s
5 522 M
(y points and set of) s
5 511 M
(line segments in 2D plane, multisearch returns the line segments containing the query point) s
5 500 M
(s which is exactly) s
5 489 M
(what is required in factorization. There are lot of parallel planar point location algorith) s
5 478 M
(ms for PRAM and BSP) s
5 467 M
(model and thus in NC \(references in 34\). After locating a pixel array polygon by parallel p) s
5 456 M
(lanar point location, factor can be found by binary search of the segment polygon containin) s
5 445 M
(g the factor because each hyperbolic segment is implicitly sorted - one of the ordinate axe) s
5 434 M
(s is constant and other increases i.e each tile is an arithmetic progression. Parallel Plan) s
5 423 M
(ar Point Location algorithm in reference 34.83 can locate a polygon containing factor point) s
5 412 M
( in O\(\(logN\)^2\) PRAM time with additional O\(logN\) sequential time for binary search to loca) s
5 401 M
(te the factor within polygon. ) s
5 379 M
(Ray shooting query algorithms described earlier reduce the necessity of parallelism to grea) s
5 368 M
(t extent by making an) s
5 357 M
(educated guess of approximate location of factor points by applying number theory results a) s
5 346 M
(nd search their circular vicinity for exact factors by k-mergesort, segment trees or wavele) s
5 335 M
(t trees. Probability of error in ray shooting has been derived earlier. Planar Point Locati) s
5 324 M
(on and Ray Shooting queries can be combined into one by following) s
5 313 M
(algorithm for multisearch:) s
5 302 M
(        \(*\) Sequentially shoot ray queries for O\(loglogN\) approximate prime factors with av) s
5 291 M
(erage spacing O\(N/loglogN\) between rays shot from origin. This is O\(loglogN\) sequential tim) s
5 280 M
(e \(assuming Hardy-Ramanujan estimate\)) s
5 269 M
(        \(*\) Locate the segments \(pixel array polygons\) containing each of the approximate f) s
5 258 M
(actors by Parallel Planar Point Location. This returns O\(loglogN\) segments in O\(\(logN\)^2*lo) s
5 247 M
(glogN\) parallel time. With high probability a segment containing approximate factor might a) s
5 236 M
(lso contain exact factor:) s
5 225 M
(                \(*\) Each tile segment is of variable length N/[x\(x+1\)] but spacing between ) s
5 214 M
(prime factors is equalkN/loglogN for some constant k) s
5 203 M
(                \(*\) Error occurs if  N/[x\(x+1\)] < kN/loglogN \(or\) loglogN < k\(x\(x+1\)\)) s
5 192 M
(                \(*\) Solving for x in x^2 + x - \(loglogN/k\) > 0:) s
5 181 M
(                        x > -0.5 + 0.5*sqrt\(1 + 4loglogN/k\)) s
5 170 M
(        \(*\) Each O\(loglogN\) segment\(polygon\) can be binary searched in O\(logN*loglogN\) sequ) s
5 159 M
(ential time. ) s
5 148 M
(        \(*\) Total Parallel and Sequential time of previous 3 steps = O\(loglogN + \(logN\)^2*l) s
5 137 M
(oglogN + logN*loglogN\)) s
5 126 M
(        \(*\) This is just another sequential optimization which makes some parallel computat) s
5 115 M
(ion sequential. ) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(-----------------) s
5 71 M
(An average case sequential optimization for removing parallelism in Computational Geometric) s
5 60 M
( Factorization:) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(-----------------) s
5 27 M
(\(*\) Average number of tiles between two approximate prime factors m and \(m+1\) found by ray ) s
5 16 M
(shooting:) s
5 5 M
(                = \(m+1\)/[kloglogN - m - 1] - m/[kloglogN - m]) s
_R
S
%%Page: (373) 373
%%BeginPageSetup
_S
18 36 translate
/pagenum 373 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (373) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(because number of tiles till m-th prime factor = n = m/[kloglogN - m] for m=1,2,3,...,klogl) s
5 731 M
(ogN) s
5 720 M
(\(*\) Polygon \(hyperbolic tile segment\) containing the ray shot approximate factor can be fou) s
5 709 M
(nd by equation in 2-level binary search sequential optimization described previously - Tile) s
5 698 M
( containing approximate factor point x can be expressed by inequality:) s
5 687 M
(        Nk/\(k+1\) < x < N\(k+1\)/\(k+2\)) s
5 676 M
(        k < x/\(N-x\)) s
5 665 M
(integer round-off of k is the index of tile interval containing x. This a simple sequential) s
5 654 M
( planar point location identity in elementary arithmetic with no necessity for PRAMs or BSP) s
5 643 M
(.) s
5 632 M
(\(*\) Each consecutive tile in N/kloglogN spacing between approximate factors can be found by) s
5 621 M
( tiling equation N/[x\(x+1\)] - subtract y coordinate by N/[x\(x+1\)] and increment x coordinat) s
5 610 M
(e by 1 or vice versa - and each of these tiles in N/kloglogN spacing can be individually bi) s
5 599 M
(nary searched in O\(logN\).) s
5 588 M
(\(*\) Thus total average sequential time to sweep binary search tiles in N/kloglogN spacing b) s
5 577 M
(etween 2 consecutive approximate factors found by ray shooting:) s
5 566 M
(        = O\([\(m+1\)/[kloglogN - m - 1] - m/[kloglogN - m]] * logN\)) s
5 555 M
(\(*\) Maximum number of tiles in N/kloglogN spacing occurs by setting m=kloglogN - 2 \(because) s
5 544 M
( of geometric intuition of hyperbolic tiling, most tiles occur within an interval in topmos) s
5 533 M
(t or rightmost extreme of hyperbolic arc which contains kloglogN-th factor on either axes\):) s
5 522 M
(        = O\([\(kloglogN - 2 + 1\)/[kloglogN - kloglogN + 2 - 1] - \(kloglogN - 2\)/[kloglogN - ) s
5 511 M
(kloglogN + 2]]\)) s
5 500 M
(        = O\(kloglogN - 1 - \(kloglogN - 2\)/2\)) s
5 489 M
(        = O\(kloglogN\)) s
5 478 M
(=> Maximum time to binary search tiles in N/kloglogN spacing = O\(loglogN * logN\)) s
5 467 M
(=> Each of O\(loglogN\) spacings between approximate factors can be searched in: ) s
5 456 M
(        O\(loglogN*loglogN*logN\)) s
5 445 M
(average case sequential time with no necessity for parallel processing.) s
5 423 M
(References:) s
5 412 M
(-----------) s
5 401 M
(605.1 Truly efficient parallel algorithms: 1-optimal multisearch for an extension of the BS) s
5 390 M
(P model - [Armin Baumker, Wolfgang Dittrich, Friedhelm Meyer auf der Heide] - Elsevier Theo) s
5 379 M
(retical Computer Science - https://core.ac.uk/download/pdf/81931675.pdf - Parallel Planar P) s
5 368 M
(oint Location by Multisearch in BSP* model - Section 1.1.) s
5 357 M
(605.2 Communication Effcient Deterministic Parallel Algorithms for Planar Point Location an) s
5 346 M
(d 2d Voronoi Diagram - [Mohamadou Diallo , Afonso Ferreira and Andrew Rau-Chaplin] - Sectio) s
5 335 M
(n 2 - Hyperbolic pixelation is in a sense a Voronoi tessellation in which factor points are) s
5 324 M
( ensconced by the pixel array polygons. ) s
5 313 M
(605.3 Computational Geometric Planar Point Location on Arrangements - Section 9.9.1 - Rando) s
5 302 M
(mized Algorithms - [Motwani-Raghavan] - Pixelated Hyperbolic tile segments are adjacent arr) s
5 291 M
(angements) s
5 280 M
(605.4 Rectifiable Curves - Principles of Mathematical Analysis - [Walter Rudin] - Pages 136) s
5 269 M
(-137 - Section 6.26 and Theorem 6.27 - Pixelation of Hyperbolic arc is exactly rectificatio) s
5 258 M
(n - map is defined by y = N/x and interval [1,N] is partitioned into tile segments of lengt) s
5 247 M
(hs N/[x\(x+1\)] and sum of lengths of tile segments is the length of polygonal path.) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(-------------------) s
5 203 M
(606. \(THEORY and FEATURE\) VideoGraph EventNet Tensor Product Merit for Large Scale Visuals ) s
5 192 M
(- 3 October 2018) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(-------------------) s
5 159 M
(1. Two new functions have been committed to ImageGraph_Keras_Theano.py for reading a Video ) s
5 148 M
(file, extracting) s
5 137 M
(frames from the video upto certain number and extract object information by Keras-Theano Im) s
5 126 M
(ageNet predictions) s
5 115 M
(for each frame.) s
5 104 M
(2. imagenet_videograph\(\) function depends on OpenCV 3.4.3 \(cv2\) Python for reading Videos a) s
5 93 M
(nd writing Frame) s
5 82 M
(JPEG files suffixed by unique id. Each frame is mapped to a TextGraph - ImageGraph - by ima) s
5 71 M
(genet_imagegraph\(\)) s
5 60 M
(3. videograph_eventnet_tensor_product\(\) function computes tensor products of pairs of Frame) s
5 49 M
( ImageGraphs and) s
5 38 M
(returns an EventNet Tensor from NetworkX. ) s
5 27 M
(4. logs, an example Video \(MP4\) and 2 sample extracted frames \(JPEG\) for EventNet Tensor re) s
5 16 M
(presentation of) s
5 5 M
(a video have been committed to testlogs/ImageGraph_Keras_Theano.log.3October2018 ) s
_R
S
%%Page: (374) 374
%%BeginPageSetup
_S
18 36 translate
/pagenum 374 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (374) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(5. From this EventNet Tensor any kind of intrinsic merit can be computed - e.g previously d) s
5 731 M
(escribed ImageNet based inverse weights, Graph Edit Distance between two Frame ImageGraphs,) s
5 720 M
( Tensor Rank for connectedness etc.,) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(-----------------) s
5 676 M
(607. \(THEORY and FEATURE\) Video EventNet Tensor Products - Inverse Distance Merit of Large ) s
5 665 M
(Scale Visuals) s
5 654 M
(- 4 October 2018) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-----------------) s
5 621 M
(1.New function inverse_distance_intrinsic_merit\(\) has been included in ImageGraph_Keras_The) s
5 610 M
(ano.py. It) s
5 599 M
(iterates through each tensor product entry of Video EventNet Tensor Products matrix and for) s
5 588 M
( every edge) s
5 577 M
(\(a,b\)-\(c,d\) in tensor product computes inverse wordnet distance \(which is basis for ImageNe) s
5 566 M
(t\):) s
5 555 M
(        1/dist\(a,b\)*1/dist\(c,d\)) s
5 544 M
(and populates a weights matrix per tensor product graph.) s
5 533 M
(2.Each tensor product in EventNet Tensor corresponds to causality between any 2 frames in t) s
5 522 M
(he video.) s
5 511 M
(3.An example merit computation log has been committed to testlogs/ImageGraph_Keras_Theano.l) s
5 500 M
(og.4October2018) s
5 489 M
(which shows merits for 4 tensor products \(2 frames * 2 frames\).) s
5 478 M
(4.Lot of weights in merit matrix in logs have huge values implying high causality between t) s
5 467 M
(wo frame events.) s
5 456 M
(5.EventNet Tensor Product Algorithm is computationally intensive. Each ImageGraph per frame) s
5 445 M
( encodes relationship) s
5 434 M
(between objects \(actors\) in the frame event.) s
5 423 M
(6.Size of the EventNet Tensor is O\(number_of_frames * number_of_frames * average_number_of_) s
5 412 M
(actors_per_frame * average_number_of_actors_per_frame\) and memory intensive too.) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(-----------------) s
5 368 M
(608. \(THEORY and FEATURE\) Video EventNet Tensor Products - Emotional Merit of Large Scale V) s
5 357 M
(isuals ) s
5 346 M
(- 15 October 2018) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-----------------) s
5 313 M
(1. EventNet Tensor Product representation of a Large Scale Visual just infers the connected) s
5 302 M
(ness of the) s
5 291 M
(information in the video with no emotional or sentiment scoring.) s
5 280 M
(2. To redress this, new function has been included in ImageGraph_Keras_Theano.py to lookup ) s
5 269 M
(the edges of) s
5 258 M
(tensor product graph in empath and aggregate the sentiments of the vertices as a tuple whic) s
5 247 M
(h is qualitative emotive merit of the video.) s
5 236 M
(3. Two new example visuals have been added: ExampleImage_1.jpg and ExampleVideo_2.mp4 in ad) s
5 225 M
(dition to earlier) s
5 214 M
(ExampleVideo_1.mp4 and images.) s
5 203 M
(4. Keras has mistook ExampleImage_1.jpg to be a theatre audience which is indeed a classroo) s
5 192 M
(m photo and annotated) s
5 181 M
(it accordingly \(probably because seating and ambience are similar in both\). Also Empath has) s
5 170 M
( misjudged the alumni website content in ExampleVideo_2.mp4 to large extent excluding "coll) s
5 159 M
(ege" as emotional annotation. Logs have been committed to testlogs/ImageGraph_Keras_Theano.) s
5 148 M
(log.15October2018 ) s
5 137 M
(5. These Photo and Videos are courtesy \(and related to self\):  ) s
5 126 M
(\(*\) ExampleVideo_1.mp4 - https://www.cmi.ac.in/people/fac-profile.php?id=shrinivas - Chenna) s
5 115 M
(i Mathematical Institute - Research Scholar website - 2010-11) s
5 104 M
(\(*\) ExampleImage_1.jpg - http://www.angelfire.com/id/95cse/album.html - PSG College of Tech) s
5 93 M
(nology - 1995-99 CSE batch alumni website album - Classroom Photo \(class1.jpg\)) s
5 82 M
(\(*\) ExampleVideo_2.mp4 - https://alumni.psgtech.ac.in/profile/view/srinivasan-kannan-1 - PS) s
5 71 M
(G College of Technology Official Alumni website ) s
5 60 M
(6. Frames captured by OpenCV2 are prefixed by the Video file name.) s
5 49 M
(7. THEANO_FLAGS have been set as: declare -x THEANO_FLAGS="cxx=/usr/bin/g++-6") s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(---------------) s
5 5 M
(609. \(THEORY\) EventNet Tensor Products - Example for Movie and Youtube Merit - 16 October 2) s
_R
S
%%Page: (375) 375
%%BeginPageSetup
_S
18 36 translate
/pagenum 375 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (375) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(018) s
5 731 M
(- related to 608) s
5 720 M
(-------------------------------------------------------------------------------------------) s
5 709 M
(---------------) s
5 698 M
(Previous videos were proof-of-concept implementations for utility of EventNet Tensor. Follo) s
5 687 M
(wing is stated just as a theoretical example with no testcases because computation involved) s
5 676 M
( is massive requiring millions of frames and their EventNet Tensor Product - EventNet Tenso) s
5 665 M
(r Products Algorithm can be applied to set of movie/youtube datasets to deduce the connecte) s
5 654 M
(dness and emotions in the videos. Since most movie and youtube channels are emotions orient) s
5 643 M
(ed which are expressed visually, comparing the emotion annotated tuples \(e.g by Empath prev) s
5 632 M
(iously described\) of any pair of movies/youtube videos, could rank them by emotional quotie) s
5 621 M
(nt approximately. Also the previous Empath emotion annotation creates a set of emotions and) s
5 610 M
( not a hashmap of emotion annotations to their number of occurrences in the Audio-Visual wh) s
5 599 M
(ich is yet another indicator. Comparing emotions occurrence hashmaps of two Audio-Visuals i) s
5 588 M
(s a ranking measure - requires sorting two hashmaps by emotions occurrence values, comparin) s
5 577 M
(g top percentile emotions in two Audio-Visual hashmaps and finding correlation coefficient ) s
5 566 M
(between the two probability distributions. Added advantage could be speech recognition in t) s
5 555 M
(he AV frame-by-frame or for set of frames which is not done by previous Keras-Theano implem) s
5 544 M
(entation and creating AudioGraph from it \(there is no AudioNet library so far\).) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(------------------) s
5 500 M
(610. \(THEORY\) Summary of Large Scale Visuals and EventNet Subgraphs - related to 158,423 - ) s
5 489 M
(19 October 2018) s
5 478 M
(and 20 October 2018) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(------------------) s
5 445 M
(Guessing/Discovering a Larger EventNet causality Graph from Subgraphs of EventNet has been ) s
5 434 M
(mentioned earlier.) s
5 423 M
(An opposite of it is to summarize a huge EventNet Graph into a small summary EventNet subgr) s
5 412 M
(aph without much) s
5 401 M
(loss of causality information. Text Summarization is text analysis application of Graph Sum) s
5 390 M
(marization which has been earlier described and implemented by Recursive Lambda Function Gr) s
5 379 M
(owth algorithm. Realworld application of ) s
5 368 M
(Graph Summary is Video Summarization by EventNet Tensor Products representation e.g a movie) s
5 357 M
( or a youtube video is a small duration summary \(minutes or hours\) of real life events \(and) s
5 346 M
( their causalities\) enacted by set of people over many years - this involves sampling an Ev) s
5 335 M
(entNet Tensor Product Graph of a Video at relevant vertices and induce a summary subgraph o) s
5 324 M
(n it which preserves meaning. Similar to Text Summarization, Video Summary could also be ap) s
5 313 M
(proximated by choosing dense subgraphs \(or high core number vertices\) of Video EventNet Ten) s
5 302 M
(sor Products. Topological Sort of Dense Subgraph of Video EventNet Tensor Product Graph giv) s
5 291 M
(es a flattened summary of the video by some ordering \(a gist of important frames\).) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(-----------------) s
5 247 M
(611. \(THEORY and FEATURE\) Video Emotions Hashmap, Video Core Topological Sort Summary - 25 ) s
5 236 M
(October 2018) s
5 225 M
(- related to 611) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(-----------------) s
5 192 M
(\(*\) Empath emotions of the Video EventNet Tensor Products Graph have been aggregated in a h) s
5 181 M
(ashmap. This facilitates quantitative emotional scoring of the video. Hashmap correlates th) s
5 170 M
(e empath emotion and its cumulative score. ) s
5 159 M
(\(*\) Core \(Main core\) of the Video EventNet Tensor Product Graph has been computed and is so) s
5 148 M
(rted topologically for creating some ordering for the summary. ) s
5 137 M
(\(*\) New example MP4 video has been created from 6 JPEG photos \(in which I was present\) and ) s
5 126 M
(google search related to self \(ExampleVideo_3.mp4\) : ) s
5 115 M
(        Frame 1 - Self - Mahabalipuram, Chennai - 2012 \(Copyright: Self\)) s
5 104 M
(        Frame 2 - Self - photo \(Copyright: Self\)) s
5 93 M
(        Frame 3 - Self - VISA photo \(Copyright: Self\)) s
5 82 M
(        Frame 4 - Self - Family photo \(Copyright: Self\)) s
5 71 M
(        Frame 5 - Self - IEC Sun Microsystems - Bengaluru - 2004 \(Copyright: Ex-Colleagues ) s
5 60 M
(at Sun Microsystems\) ) s
5 49 M
(        Frame 6 - Self - IEC Sun Microsystems - Bengaluru - 2000 \(Copyright: Sun Microsyste) s
5 38 M
(ms/Oracle\)) s
5 27 M
(        Frame 7 and 8 - Google Search of Self) s
5 16 M
(\(*\) Previous recording is a mix of photos of varied genre. Sentiment hashmap for this video) s
5 5 M
( prints \(excerpts\):) s
_R
S
%%Page: (376) 376
%%BeginPageSetup
_S
18 36 translate
/pagenum 376 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (376) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Sentiment Analysis of the Video: [\('work', 1484.0\), \('toy', 424.0\), \('tool', 848.0\), \('tech) s
5 731 M
(nology', 3180.0\), \('social_media', 1060.0\), \('shopping', 424.0\), \('science', 1060.0\), \('res) s
5 720 M
(taurant', 848.0\), \('reading', 424.0\), \('programming', 2544.0\), \('play', 424.0\), \('phone', 1) s
5 709 M
(696.0\), \('office', 1060.0\), \('negative_emotion', 0.0\), \('musical', 424.0\), \('music', 424.0\)) s
5 698 M
(, \('messaging', 1272.0\), \('meeting', 424.0\), \('internet', 2968.0\), \('hiking', 424.0\), \('fur) s
5 687 M
(niture', 212.0\),  \('dance', 212.0\),  \('computer', 5088.0\), ...]. This is a remarkable infer) s
5 676 M
(ence of the Video content by Keras-Theano ImageNet giving high weightage to office and tech) s
5 665 M
(nology as emotional annotations.) s
5 654 M
(\(*\) Logs for this have been committed to testlogs/ImageGraph_Keras_Theano.log.25October2018) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(-----------------) s
5 610 M
(612. \(FEATURE\) Video EventNet Core Topological Sort Summary - Bugfixes - 28 October 2018 ) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-----------------) s
5 577 M
(\(*\) Some errors in inverse distance merit computation of the Video EventNet Tensor have bee) s
5 566 M
(n corrected which) s
5 555 M
(was earlier a 2-dimensional tensor and has been made 3-dimensional in this commit.) s
5 544 M
(\(*\) Core Summary of the Video has also been changed to compute maximum merit for each tenso) s
5 533 M
(r product inverse) s
5 522 M
(distance merit vector and apply a threshold filter for the distance merit.) s
5 511 M
(\(*\) Three dimensional EventNet Tensor is mapped to NetworkX Graph after previous threshold ) s
5 500 M
(filter.) s
5 489 M
(\(*\) Only causal frames above inverse distance threshold are included in the NetworkX graph ) s
5 478 M
(and main core is computed on this graph ) s
5 467 M
(\(*\) self loops and parallel edges are removed and topological sorting is performed on main ) s
5 456 M
(core.) s
5 445 M
(\(*\) logs for this have been committed to testlogs/ImageGraph_Keras_Theano.log.28October2018) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(---------------) s
5 401 M
(613. \(FEATURE\) People Analytics - HR Analytics Implementation and Least Energy Intrinsic Me) s
5 390 M
(rit of a ) s
5 379 M
(social profile - 9 November 2018 - related to 365, 443, 572) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(---------------) s
5 346 M
(\(*\) People Analytics is the generalized version of HR Analytics for analyzing any social pr) s
5 335 M
(ofile vertex.) s
5 324 M
(\(*\) This commit adds SocialNetworkAnalysis_PeopleAnalytics.py python implementation to repo) s
5 313 M
(sitory which) s
5 302 M
(at present analyzes LinkedIn profiles and computes:) s
5 291 M
(        \(*\) Graph Tensor Neuron Network Intrinsic Merit of the profile text with no field p) s
5 280 M
(arsing - this treats) s
5 269 M
(the social profile as an en masse text with no delineations and applies Recursive Lambda Fu) s
5 258 M
(nction Growth algorithm to create lambda function composition tree of the resume text. Core) s
5 247 M
( classification and Centrality measures throw some interesting insights:) s
5 236 M
(                \(*\) Core number 4 identifies the class of the social profile ) s
5 225 M
(                \(*\) Maximum merit random walk of the lambda composition tree approximately ) s
5 214 M
(guesses the purport) s
5 203 M
(of the text in the social profile) s
5 192 M
(                \(*\) Betweenness and Closeness Centralities estimate the top-ranked classes ) s
5 181 M
(accurately compared to Degree and PageRank Centralities) s
5 170 M
(        \(*\) Log Normal Fitness of the social profile after parsing the total work experienc) s
5 159 M
(e and academic) s
5 148 M
(stints of the profile - for linkedin this inverse log normal least energy fitness is 1/\(log) s
5 137 M
(E + logV\) with no Wealth estimates - Wealth is caused by E\(Education\) and V\(Work/Valour\) as) s
5 126 M
( far as professional profiles are concerned. Lowest Value of Least Energy Fitness implies H) s
5 115 M
(ighest Fitness. Parsing is done by parse_profile\(\) function which implements a switch desig) s
5 104 M
(n pattern - stint polymorphs from work to academic tenures.) s
5 93 M
(        \(*\) Log Normal Experiential Intrinsic Fitness of the social profile \(by applying mi) s
5 82 M
(stake bound learning differential equation for recursive mistake correction tree described ) s
5 71 M
(earlier\) - log normalized because of huge exponents) s
5 60 M
(\(*\) Because of limitations due to Updated LinkedIn Scraping Policy \(https://www.forbes.com/) s
5 49 M
(sites/forbestechcouncil/2017/09/20/linkedin-vs-hiq-ruling-casts-a-long-shadow-over-the-tech) s
5 38 M
(-industry/#19f535f35e6c\), this is only implemented as a non-crawled example for LinkedIn pr) s
5 27 M
(ofile of self: https://www.linkedin.com/comm/in/srinivasan-kannan-608a671 \(pdf and text ver) s
5 16 M
(sion of pdf by pdf2txt\)) s
5 5 M
(\(*\) datetime python package is used to compute timedelta\(s\) and a regex matcher isdaterange) s
_R
S
%%Page: (377) 377
%%BeginPageSetup
_S
18 36 translate
/pagenum 377 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (377) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\(\) function has been implemented for parsing date ranges in the profile:) s
5 731 M
(        \(*\) Work Experience Date Ranges have the Regex: <Month> <Year> - <Month> <Year>) s
5 720 M
(        \(*\) Academic Date Ranges have the Regex: <Year> - <Year> and months are implicit) s
5 709 M
(\(*\) This implementation does not assume a Web Crawler and Social Profile Datasource and onl) s
5 698 M
(y requires a file input \(datasource, file type and file name are passed in as arguments to ) s
5 687 M
(parse_profile\(\)\) - optionally, crawled social profiles can be invoked as file arguments to ) s
5 676 M
(parse_profile\(\). Presently only linkedin datasource, text file types are supported. PDF par) s
5 665 M
(sing has been implemented by PyPDF2 but there are IndirectObject related errors.) s
5 643 M
(-------) s
5 632 M
(Theory:) s
5 621 M
(-------) s
5 610 M
(An obvious application of HR analytics is feasibility of automatic recruitment of people by) s
5 599 M
( profile analytics. Usual Interview and Written Test based process of recruitment measures ) s
5 588 M
(Intrinsic Merit \(approximately subject to error\) of people. Analytics of Professional Netwo) s
5 577 M
(rks is Fame \(Degree etc.,\) based. From 572.8 \("...Boolean majority function is equivalent t) s
5 566 M
(o PageRank computed for 2 candidate websites on \(n+2\)-vertex graph \(n user websites choose ) s
5 555 M
(between 2 candidate websites - Good\(1\) and Bad\(0\), choice is fraction of outdegree from a u) s
5 544 M
(ser website\) normalized to 0 \(smaller pagerank\) and 1 \(bigger pagerank\). Margulis-Russo thr) s
5 533 M
(eshold d\(Pr\(Choice=Good=1\)\)/dp on this PageRank version of Majority function is ratio of su) s
5 522 M
(m of influences of variables \(user websites\) to standard deviation which has a phase transi) s
5 511 M
(tion to Good\(1\) at per-voter website bias p >= 0.5..."\). Majority Voting/PageRank or any ot) s
5 500 M
(her Fame/Degree measure is known to have phase transition from Low accuracy to High accurac) s
5 489 M
(y for per voter p-bias > 0.5 implying automatic recruiting is feasible if Fame lowerbounds ) s
5 478 M
(Intrinsic Merit \(Intrinsic Merit >= Fame\). Stability or Resilience of Interview as LTF vis-) s
5 467 M
(a-vis Majority Function has been analyzed earlier in 365. Problematic condition for renderi) s
5 456 M
(ng automatic crowdsourced recruitment infeasible is: Intrinsic Merit << Fame. Comparison of) s
5 445 M
( Intrinsic Merit to Fame by correlation coefficients requires normalization of fame and mer) s
5 434 M
(it rankings e.g fame and merit probability distributions and distance between these two dis) s
5 423 M
(tributions for same dataset. From references in 572, most experimental results in sports\(e.) s
5 412 M
(g Elo rating\), science \(e.g research published\) etc., show fame grows exponentially to meri) s
5 401 M
(t implying merit is quantitatively proportional to log\(Fame\). For example, if PageRank/Degr) s
5 390 M
(ee centrality is computed on Professional Network Vertices and dynamic experiential intrins) s
5 379 M
(ic merit E of a profile at time point t is computed by previous implementation:) s
5 368 M
(                E = M*e^\(kMt\) = log\(dv\(t\)\) * e^\(klog\(dv\(t\)\)*t/clogt\) / clogt for evolving d) s
5 357 M
(egree dv\(t\)) s
5 346 M
(crowdsourcing infeasibility condition reduces to:) s
5 335 M
(                log\(dv\(t\)\) * e^\(klog\(dv\(t\)\)*t/clogt\) / clogt << dv\(t\)) s
5 324 M
(                \(klog\(dv\(t\)\)*t/clogt\) << log\(clogt * dv\(t\) / log\(dv\(t\)\)\)) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-------------------) s
5 280 M
(614. \(FEATURE\) Social Network Analysis - People Analytics - Another example and Unicode cor) s
5 269 M
(rections - ) s
5 258 M
(12 November 2018 - related to 613) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(-------------------) s
5 225 M
(1. RecursiveGlossOverlap_Classifier.py has been changed to ignore unicode errors in text st) s
5 214 M
(rings) s
5 203 M
(2. New example Curriculum Vitae TeX \(self\) has been analyzed by Recursive Lambda Function G) s
5 192 M
(rowth Algorithm) s
5 181 M
(for various intrinsic merit measure it prints.) s
5 170 M
(3. Core classifier shows high relevance to human judgement and again Closeness and Betweenn) s
5 159 M
(ess centralities are) s
5 148 M
( better than Degree and PageRank centralities \(classes like "Silver" are probably produced ) s
5 137 M
(because of relevance of "Silver" to "Hyderabad"\)) s
5 126 M
(4. RecursiveLambdaFunctionGrowth.dot file has been recreated.) s
5 115 M
(5. logs for this have been committed to testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.) s
5 104 M
(12November2018) s
5 93 M
(6. Textual analysis of a CV is quite open-ended and unstructured - Nonetheless the classifi) s
5 82 M
(cation by TextGraph core numbers gives reasonable estimate of crucial aspects in the resume) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(-------------------) s
5 38 M
(615. \(THEORY\) Hash Table Chaining, Locality Sensitive Hashing and Frequently occurring patt) s
5 27 M
(erns - 13 November) s
5 16 M
(2018 - related to all sections on LSH partitions, Majority Voting, Theoretical EVMs, Stream) s
5 5 M
(ing, ) s
_R
S
%%Page: (378) 378
%%BeginPageSetup
_S
18 36 translate
/pagenum 378 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (378) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Audio-Visual Pattern Mining, Bigdata Analytics) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-------------------) s
5 709 M
(Locality Sensitive Hashing is a collision-supportive hash chaining which as described earli) s
5 698 M
(er has multitude) s
5 687 M
(of applications in clustering similar elements of a set which can be votes for candidates\(E) s
5 676 M
(VMs which colocate votes for a candidate in same bucket\), bigdata or audio-visual spectrogr) s
5 665 M
(am-histogram representation. Essentially, every chained hash table or LSH partition of a se) s
5 654 M
(t is a histogram of probability distribution when viewed pictorially - e.g audio signals re) s
5 643 M
(presented as series of animated histograms. Assuming dataset is a stream of these LSH parti) s
5 632 M
(tions, problem is to decipher patterns underlying these histograms. There are LSH algorithm) s
5 621 M
(s like Nilsimsa hash, Minhash etc., which find similarities of two sets \(texts for example ) s
5 610 M
(in Nilsimsa\) by Jaccard, Hamming and other distance coefficients. If each element in the st) s
5 599 M
(ream of histograms/LSH partition/Chained Hashtable are considered as set of buckets, compar) s
5 588 M
(ing two such histograms is tantamount to computing similarity of 2 consecutive sets of buck) s
5 577 M
(ets by some hash metric e.g Minhash. It is worthwhile to mention that this histogram \(set o) s
5 566 M
(f buckets\) pattern is ubiquitous across any algorithm doing an LSH partition or hash table ) s
5 555 M
(bucket chaining. In the People Analytics example previously, LSH partition of People and Pr) s
5 544 M
(ofessional Profiles splits them into buckets of similar traits.) s
5 522 M
(Distributed Hash Tables which geographically decentralize chunks of a huge table realise th) s
5 511 M
(eoretical Electronic Voting Machines which have been defined earlier in terms of LSH partit) s
5 500 M
(ions or Separate Chaining Hash tables in distributed/cloud setting - buckets of votes for c) s
5 489 M
(andidates are distributed on cloud nodes. CAP Theorem applies to Theoretical EVMs implying ) s
5 478 M
(only 2 of 3 \(Consistency-serialization, Availability-readwrites are 100% reflected and Part) s
5 467 M
(ition Tolerance-resilience to node/network failures\) are feasible on an internet EVM based ) s
5 456 M
(on LSH Partition/Separate Chaining. Real world EVMs are most vulnerable to network, sabotag) s
5 445 M
(e or power failure \(partition\) making it a CA system.This limitation is less visible if num) s
5 434 M
(ber of candidates is small and table is local but serious if number of candidates \(buckets\)) s
5 423 M
( are huge and requires distribution. Even if partitions are assumed to be nil, there is alw) s
5 412 M
(ays a tradeoff between consistency and latency i.e a distributed system has to compromise o) s
5 401 M
(n speed for greater consistency. This has been formalized as extension of CAP Theorem - PAC) s
5 390 M
(ELC theorem.) s
5 368 M
(Example:) s
5 357 M
(If profiles are represented as TextGraphs as in previous implementation of HR Analytics, ed) s
5 346 M
(ges between vertices of the textgraph encodes the temporal information because most social ) s
5 335 M
(profiles contain chronologically ordered timeline history of events - similarity measure fo) s
5 324 M
(r any two profiles could be the temporal cause-effect similarity between two profiles and t) s
5 313 M
(hus Social Profile TextGraph is an EventNet too.) s
5 291 M
(References:) s
5 280 M
(----------) s
5 269 M
(615.1 PACELC Theorem extension of CAP - [Daniel Abadi] - http://cs-www.cs.yale.edu/homes/dn) s
5 258 M
(a/papers/abadi-pacelc.pdf) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(---------------------) s
5 214 M
(616. \(FEATURE\) Software Analytics - Cyclomatic Complexity - Rewrite for merging two clauses) s
5 203 M
( - 14 November 2018) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(---------------------) s
5 170 M
(1. CyclomaticComplexitySparkMapReducer.py has been changed to merge True and False clauses ) s
5 159 M
(for GraphFrames) s
5 148 M
(2. Cyclomatic Complexity \(Zeroth Betti Number\) has been computed from GraphFrames stronglyC) s
5 137 M
(onnectedComponents\(\)) s
5 126 M
(as per definition of Cyclomatic Number in Topological Graph Theory) s
5 115 M
(3. Cyclomatic Complexity \(First Betti Number\) has been computed as E-V+[Zeroth Betti Number) s
5 104 M
(]) s
5 93 M
(4. New callgrind and kcachegrind DOT files for execution of command "ls" have been committe) s
5 82 M
(d and included for) s
5 71 M
(Cyclomatic Complexity and Call graph GSpan mining:) s
5 60 M
(        callgrind.ls.out.3104) s
5 49 M
(        kcachegrind_callgraph_ls.dot) s
5 38 M
(5. logs for this have been committed to CyclomaticComplexitySparkMapReducer.log.GraphXFrame) s
5 27 M
(s.14November2018) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (379) 379
%%BeginPageSetup
_S
18 36 translate
/pagenum 379 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (379) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(--------------------) s
5 731 M
(617. \(THEORY\) Beatty Sequences and Complement Diophantines - related to all sections on Com) s
5 720 M
(plementary Sets) s
5 709 M
(,Ramsey 2-coloring and their Diophantine/Function representations - 16 November 2018, 18 No) s
5 698 M
(vember 2018 - draft updates to ) s
5 687 M
(https://arxiv.org/pdf/1106.4102v1) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(--------------------) s
5 654 M
(Complement Functions have been defined for arbitrary complementary sets \(Integers/Rationals) s
5 643 M
(/Reals\) in https://arxiv.org/pdf/1106.4102v1 and their relevance to Ramsey Coloring of Sequ) s
5 632 M
(ences and decidability of Diophantine representation of complementary sets \(MRDP Theorem\) h) s
5 621 M
(ave been expounded in detail earlier. Special Case of Complementary Sets of Integers is a w) s
5 610 M
(ell-studied problem and a classic result due to Beatty defines 2 complementary sets of inte) s
5 599 M
(gers based on solutions to equation 1/a + 1/b = 1 for irrationals a and b. Thus terminologi) s
5 588 M
(es - Complement Functions, Complement Diophantines, Ramsey 2-Coloring of Sequences and Beat) s
5 577 M
(ty Complementary Sequences - are synonymous with respect to set of Integers Z. Notion of Co) s
5 566 M
(mplementation generalizes it to any sets Boolean, Integer, Real or Rational. Integer and Re) s
5 555 M
(al Complementation have solvable algorithms in the form of Diophantine equations subject to) s
5 544 M
( MRDP theorem and Tarski/Sturm, but complementation over rationals is open problem for the ) s
5 533 M
(direction N to Q - mapping Q to N is straightforward. ) s
5 511 M
(ABC Conjecture and Complement Diophantines:) s
5 500 M
(-------------------------------------------) s
5 489 M
(ABC conjecture states there are finite coprime triples a,b,c such that a+b=c and quality\(q\)) s
5 478 M
(=log\(c\)/log\(rad\(abc\)\) > 1 + epsilon for every epsilon > 0. Though there are infinitely many) s
5 467 M
( coprime triples a,b,c \(a+b=c\) having quality > 1, this conjecture predicts there are only ) s
5 456 M
(finite number of coprime triples cluttered between every real value of epsilon. Complementa) s
5 445 M
(ry version of ABC conjecture is defined as:) s
5 434 M
(        \(*\) T = set of all coprime triples \(a,b,a+b=c\)) s
5 423 M
(        \(*\) Q1 = set of all coprime triples of quality > 1) s
5 412 M
(        \(*\) Q0 = set of all coprime triples of quality < 1) s
5 401 M
(        \(*\) Q0 U Q1 = T and Q0 /\\ Q1 = Empty i.e sets Q0 and Q1 are complementary infinite ) s
5 390 M
(sets \(creates Beatty sequences equivalent for triples\).) s
5 379 M
(        \(*\) Complementary Sets Version of ABC Conjecture: Infinite set of triples Q1 is the) s
5 368 M
( disjoint set cover or exact cover of finite sets of triples of quality 1+epsilon for every) s
5 357 M
( real epsilon.) s
5 346 M
(        \(*\) Previous complementary sets can be picturised as:) s
5 335 M
(                \(*\) T is a Rubik's cube in which each ordinate is a coprime triple \(a,b,c\) ) s
5 324 M
(                \(*\) Q0 and Q1 partition T into two disjoint sets of qualities less than 1 a) s
5 313 M
(nd greater than 1.) s
5 302 M
(                \(*\) Q1 is the 3 dimensional half-space of Cube tiled by finite sets of trip) s
5 291 M
(les of quality 1+epsilon for every real epsilon. As mentioned earlier, Pentominoes tiling i) s
5 280 M
(s an exact cover problem for 2 dimensions.) s
5 258 M
(References:) s
5 247 M
(-----------) s
5 236 M
(617.1 Beatty functions and Complementary Sets - http://citeseerx.ist.psu.edu/viewdoc/downlo) s
5 225 M
(ad?doi=10.1.1.514.2119&rep=rep1&type=pdf - "...Let U be a subset of Z. We call two non-empt) s
5 214 M
(y sets A, B complementary with respect to U if A \342\\210\251 B = \342\\210\\205 and A \342\\210\252 B = U. A) s
5 203 M
( classical result of 1926 due to S.  Beatty [1] states that if \316\261 and \316\262 are positive irrat) s
5 192 M
(ional numbers with 1/\316\261 + 1/\316\262 = 1, then {floor\(n\316\261\)} and {floor\(n\316\262\)} \(n \342\\210\\210 N\) are ) s
5 181 M
(complementary with respect to N, where floor\(x\) denotes the greatest integer function of re) s
5 170 M
(al x. This result has since then been generalized by a number of authors, see e.g., [2], [4) s
5 159 M
(], [5], [6] and [7]. ...") s
5 148 M
(617.2 Diophantine Equations over Rationals and Reals - Section 3.1 - http://wwwmayr.in.tum.) s
5 137 M
(de/konferenzen/Jass07/courses/1/Sadovnikov/Sadovnikov_Paper.pdf - Solving in Q\(multiplicati) s
5 126 M
(on by integers\), Solving in R \(Tarski and Sturm methods\)) s
5 115 M
(617.3 Three Dimensional Visualization of ABC Conjecture - http://www.lactamme.polytechnique) s
5 104 M
(.fr/images/CABC.21.20.1.M.D/display.html - visual intuition of the finite sets of coprime t) s
5 93 M
(riples for every real epsilon > 0 for quality > 1 + epsilon.) s
5 82 M
(617.4 Fraenkel Conjecture for exact cover decomposition of Z - https://core.ac.uk/download/) s
5 71 M
(pdf/82382652.pdf) s
5 60 M
(617.5 Diophantines for 2D Pentominoes Tiling - https://did.mat.uni-bayreuth.de/~alfred/home) s
5 49 M
(/pentominoes.ps.gz - Locations of Tiles in 9*10 rectangle are specified by linear diophanti) s
5 38 M
(nes.) s
5 27 M
(617.6 Kummer Theorem for Universal Diophantine Equation representation of arbitrary recursi) s
5 16 M
(vely enumerable set - Hilbert Tenth Problem and Two-way bridge between Number Theory and Co) s
5 5 M
(mputer Science - [Yuri Matiyasevich] - http://www.cs.auckland.ac.nz/~cristian/tcspi/ch9.ps ) s
_R
S
%%Page: (380) 380
%%BeginPageSetup
_S
18 36 translate
/pagenum 380 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (380) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- Diophantine Hierarchy - 9 Unknowns - Best known bound of number of unknowns \(u\) and degre) s
5 731 M
(e \(d\) for Diophantine representation of an RE Set \(in other words complement diophantine in) s
5 720 M
( the context of complementary sets\) is \(d,u\) = \(1.6 * 10^45, 9\). Kummer theorem equates a b) s
5 709 M
(inomial coefficient \(a+b, b\) to its exponential prime factorization 2^a2*3^a3*... where a2,) s
5 698 M
(a3,... are defined by Kummer Theorem: If integers a and b are written in p-adic \(prime radi) s
5 687 M
(x p\) notation and are added the number of carries during this addition is given by ap. Beca) s
5 676 M
(use set of integers in binary notations can be expressed by binomial coefficients \(a is num) s
5 665 M
(ber of 1s and b is number of 0s, a+b is the length of the binary integer string, \(a+b,b\) is) s
5 654 M
( the number of all possible integers having b 0s in binary representation\), Kummer's theore) s
5 643 M
(m is widely used for exponential diophantine representation of arbitrary recursively enumer) s
5 632 M
(able sets. Word concatenations also have diophantine representation \(related to 2.11 and 2.) s
5 621 M
(12 - Ramsey 255-coloring texts by alphabets\) implying natural language texts can be represe) s
5 610 M
(nted by a diophantine equation which is helpful in text compression.) s
5 599 M
(617.7 Further results on Hilbert Tenth Problem - [Zhi Wei Sun] - https://arxiv.org/pdf/1704) s
5 588 M
(.03504.pdf - Solving Diophantines in 11 unknowns over Z is undecidable.) s
5 577 M
(617.8 Hilbert Tenth Problem for Rational Functions over Finite Fields is Undecidable - [Phe) s
5 566 M
(idas] - https://link.springer.com/article/10.1007/BF01239506 - related to previous problem ) s
5 555 M
(of finite sets tile cover but finite fields require size of tiles to be power of prime \(cha) s
5 544 M
(racteristic\)) s
5 533 M
(617.9 Decision method for elementary algebra and geometry - [Alfred Tarski] - Rand Corporat) s
5 522 M
(ion - https://www.rand.org/content/dam/rand/pubs/reports/2008/R109.pdf - decision procedure) s
5 511 M
( for real diophantines) s
5 500 M
(617.10 Chaos Theory, Diophantines, Chaitin Theorem, Minimum Descriptive Complexity\(Kolmogor) s
5 489 M
(ov\) - [Matiyasevich] - ftp://ftp.pdmi.ras.ru/pub/publicat/znsl/v377/p078.pdf - Computationa) s
5 478 M
(l Chaos Theory implies disorder in large sets arising from order \(e.g.Logistic Map x\(n+1\) =) s
5 467 M
( kxn\(xn-1\)\) - Chaitin theorem constructs a Diophantine set S which is chaotic and an expone) s
5 456 M
(ntial diophantine for it and its kolmogorov complexity for an initial finite fragment of S ) s
5 445 M
(is O\(log|S|\).) s
5 434 M
(617.11 Rayleigh Theorem or Beatty Theorem - https://en.wikipedia.org/wiki/Beatty_sequence -) s
5 423 M
( "...The Rayleigh theorem \(also known as Beatty's theorem\) states that given an irrational ) s
5 412 M
(number r > 1, there exists s > 1 so that the Beatty sequences {B}_{r} and {B}_{s} partition) s
5 401 M
( the set of positive integers: each positive integer belongs to exactly one of the two sequ) s
5 390 M
(ences...." - Examples - Upper and Lower Wythoff Sequences [nr] and [ns] generated by Golden) s
5 379 M
( ratio r and s=r+1) s
5 368 M
(617.12 Generalization of Beatty Theorem for Complementary Continuous functions over reals -) s
5 357 M
( https://web.archive.org/web/20140419091400/http://math.uncc.edu/sites/math.uncc.edu/files/) s
5 346 M
(2002_17_0.pdf - "...Main Theorem: Let F and G be real, continuous, strictly increasing, fun) s
5 335 M
(ctions) s
5 324 M
(with domains [0,\342\\210\\236\) satisfying F\(0\) = G\(0\) = 0 and limx\342\\206\\222\342\\210\\236\(F\(x\) + G\(x) s
5 313 M
(\)\) = \342\\210\\236.For all t > 0, let Pt = {0,\(F + G\)\342\\210\\2221\(t\),\(F + G\)\342\\210\\2221\(2t\),\(F + G) s
5 302 M
(\)\342\\210\\2221\(3t\), . . .}, and P+t = Pt\\{0}. Then the two sequences At and Bt defined by At =) s
5 291 M
( {c\(F\342\\210\\2221\)\342\\210\\2221\(n\)b Pt:n \342\\210\\210 N+t } and Bt = {b\(G\342\\210\\2221\)\342\\210\\2221\(n\)c ) s
5 280 M
( Pt: n \342\\210\\210 N+t } partition P+tfor all t > 0. Also, the elements of At are distinct an) s
5 269 M
(d the elements of Bt are distinct ...") s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(----------------------) s
5 225 M
(618. \(FEATURE\) People Analytics - Experiential Intrinsic Merit - LinkedIn Profile Connectio) s
5 214 M
(ns - 20 November 2018) s
5 203 M
(- related to 443) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(----------------------) s
5 170 M
(1.SocialNetworkAnalysis_PeopleAnalytics.py has been changed to parse connections of a linke) s
5 159 M
(din profile) s
5 148 M
(2.Number of connections of a profile is then used to compute experiential intrinsic merit b) s
5 137 M
(ased on degree of) s
5 126 M
(a vertex as:) s
5 115 M
(    E = M*e^\(kMt\) = log\(dv\(t\)\) * e^\(klog\(dv\(t\)\)*t/clogt\) / clogt for evolving degree dv\(t\)) s
5 104 M
(3.This identity is derived from exponential relation between Fame \(Degree\) and Merit \(Intri) s
5 93 M
(nsic fitness\) of a) s
5 82 M
(social profile - in https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/Fir) s
5 71 M
(st-to-Market-is-not-Everything-an-Analysis-of-Preferential-Attachment-with-Fitness.pdf \(des) s
5 60 M
(cribed earlier\)) s
5 49 M
(4.Previous relation is anachronistic in the sense merit is defined in terms of fame when it) s
5 38 M
( has to be other way around. Function for experiential_intrinsic_merit\(\) takes number of co) s
5 27 M
(nnections as a parameter and branches off into two clauses for least enery log normal merit) s
5 16 M
( if degree is 0 and degree based merit for degree > 0.) s
5 5 M
(5.Example LinkedIn Profile Connections \(committed in pdf and txt\) have been analyzed for pr) s
_R
S
%%Page: (381) 381
%%BeginPageSetup
_S
18 36 translate
/pagenum 381 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (381) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(evious degree based) s
5 731 M
(experiential merit and Recursive Lambda Function Growth merit. Example linkedin Connection ) s
5 720 M
(pdf and text file have been committed to:) s
5 709 M
(        ConnectionsLinkedIn_KSrinivasan.pdf) s
5 698 M
(        ConnectionsLinkedIn_KSrinivasan.txt) s
5 687 M
(6.Definition TextGraph of connections \(.txt\) extracts essence of the aura surrounding a soc) s
5 676 M
(ial profile.) s
5 665 M
(7.Dense subgraph \(core\) of this connections textgraph is a clustering coefficient measure i) s
5 654 M
(.e how well the neighbours of a vertex have semantic connections among themselves. ) s
5 643 M
(8.Though social profiles are prone to Sybil links for artificially bumping up popularity, p) s
5 632 M
(revious analysis is) s
5 621 M
(based on the assumption that humans do not link to another human unless they are trusted/be) s
5 610 M
(friended.) s
5 599 M
(9.logs for this have been committed to:) s
5 588 M
(        SocialNetworkAnalysis_PeopleAnalytics.log.20November2018 \(degree experiential merit) s
5 577 M
(\)) s
5 566 M
(        SocialNetworkAnalysis_PeopleAnalytics.log2.20November2018 \(recursive lambda functio) s
5 555 M
(n growth merit\)) s
5 544 M
(10.Recursive Lambda Function Growth merit logs have been truncated because of following rec) s
5 533 M
(ursion depth error in bintrees AVL Tree:) s
5 522 M
(        RuntimeError: maximum recursion depth exceeded) s
5 511 M
(but the logs show few erratic cycles having "missiles" which are inferred from random walk ) s
5 500 M
(paths printed in the logs. Also Names of the connections have not been filtered which misle) s
5 489 M
(ads the WordNet. Previous error impedes full analysis based on core number. But there are s) s
5 478 M
(ome relevant cycles related to "head hunter","Ph.D","dissertation","entrepreneur","engineer) s
5 467 M
(","managers","information_technology" etc., giving a glimpse of the social circle's nature.) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(---------------------) s
5 423 M
(619. \(THEORY and FEATURE\) Software Analytics - Cyclomatic Complexity - FTrace call graphs -) s
5 412 M
( 28 November 2018) s
5 401 M
(- related to 581) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(---------------------) s
5 368 M
(1. FTrace kernel function call graph shell script \(asfer_ftrace.sh\) already in USBmd and US) s
5 357 M
(Bmd64 have been included as part of AsFer Cyclomatic Software Analytics for analyzing what ) s
5 346 M
(happens in kernel within while executing a userspace code.) s
5 335 M
(2. Example ftrace.log for Computational Geometric Factorization has been recorded in ftrace) s
5 324 M
(.DiscreteHyperbolicFactorization_TileSearch_Optimized.log ) s
5 313 M
(3. DOT graph creation function for parsing ftrace call graph log has been added in Cyclomat) s
5 302 M
(icComplexitySparkMapReducer.py) s
5 291 M
(4. FTrace call graph DOT file is written to CyclomaticComplexitySparkMapReducer.ftrace_call) s
5 280 M
(graph.dot) s
5 269 M
(5. logs for Cyclomatic Analysis of kernel callgraph for previous factorization example have) s
5 258 M
( been committed to:) s
5 247 M
(        testlogs/CyclomaticComplexitySparkMapReducer.log.FTrace.28November2018) s
5 236 M
(        testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.factors) s
5 225 M
(        testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.ftrace.log.) s
5 214 M
(28November2018) s
5 203 M
(6. PageRank, Degree Centrality, Cycles and Longest Path of Call graph are printed.) s
5 192 M
(7. Least pageranked kernel functions are:) s
5 181 M
(        ... \('unix_release\\n', 0.0006824636787772093\), \('nf_ct_get_tuple\\n', 0.000682463678) s
5 170 M
(7772093\), \('insert_work\\n', 0.0006824636787772093\), \('wake_up_worker\\n', 0.0006824636787772) s
5 159 M
(093\), \('__tcp_push_pending_frames\\n', 0.0006824636787772093\), \('bictcp_cong_avoid\\n', 0.000) s
5 148 M
(6824636787772093\), \('fsnotify_clear_marks_by_inode\\n', 0.0006824636787772093\), \('tcp_timewa) s
5 137 M
(it_state_process\\n', 0.0006824636787772093\), \('ktime_get\\n', 0.0006824636787772093\), \('free) s
5 126 M
(_page_and_swap_cache\\n', 0.0006824636787772093\), \('update_page_reclaim_stat\\n', 0.000682463) s
5 115 M
(6787772093\), \('__cond_resched\\n', 0.0006824636787772093\), \('unlink_anon_vmas\\n', 0.00068246) s
5 104 M
(36787772093\), \('timer_interrupt\\n', 0.0006824636787772093\), \('inet_put_port\\n', 0.000682463) s
5 93 M
(6787772093\), \('update_process_times\\n', 0.0006824636787772093\), \('tcp_v4_send_ack\\n', 0.000) s
5 82 M
(6824636787772093\), \('ext4_get_inode_loc\\n', 0.0006824636787772093\), \('enable_8259A_irq\\n', ) s
5 71 M
(0.0006824636787772093\), \('__pagevec_free\\n', 0.0006824636787772093\), \('getnstimeofday\\n', 0) s
5 60 M
(.0006824636787772093\), \('dequeue_task\\n', 0.0006824636787772093\), \('__jbd2_journal_file_buf) s
5 49 M
(fer\\n', 0.0006824636787772093\), \('fuse_prepare_release\\n', 0.0006824636787772093\), \('tcp_es) s
5 38 M
(tablished_options\\n', 0.0006824636787772093\), \('fuse_release_common\\n', 0.00068246367877720) s
5 27 M
(93\) ) s
5 16 M
(...) s
5 5 M
(which are top level invocations closest to userspace arising out of TCP traffic in Spark Ex) s
_R
S
%%Page: (382) 382
%%BeginPageSetup
_S
18 36 translate
/pagenum 382 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (382) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ecutor Driver \(TCP in kernel: http://vger.kernel.org/~davem/tcp_output.html\)) s
5 731 M
(8. It is worthy to note lot of ----exit\(\) kernel functions related to VMA paging \(e.g.do_ex) s
5 720 M
(it\(\)\) which release virtual memory pages \(possibly by GC\) and TCP \(tcp_write_xmit\(\), tcp_tr) s
5 709 M
(ansmit_skb\(\), etc.,\) having high degree centrality showing heavy TCP traffic.) s
5 687 M
(Comparing call graphs by Graph Isomorphism or Graph Non-Isomorphism deduces code similariti) s
5 676 M
(es. This is somewhat counterintuitive surprise to Program Equivalence Problem which is unde) s
5 665 M
(cidable implying isomorphism detection is only an approximation. Program Equivalence essent) s
5 654 M
(ially asks if two Turing machines accept same language \(equivalent\).) s
5 632 M
(References:) s
5 621 M
(-----------) s
5 610 M
(619.1 Program Equivalence Problem is Undecidable - [Nancy Lynch] - Mapping Reduction to/fro) s
5 599 M
(m Halting Problem - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science) s
5 588 M
(/6-045j-automata-computability-and-complexity-spring-2011/lecture-notes/MIT6_045JS11_lec09.) s
5 577 M
(pdf - two Turing machines M1 and M2 are contrived and hypothetical Turing Machine M compare) s
5 566 M
(s the M1 and M2. Reduction: M halts on x <=> <M1,M2> are not equivalent \(EQ'\). M1 always re) s
5 555 M
(jects while M2 accepts if M accepts x else rejects. There are two possibilities:) s
5 544 M
(        \(*\) M1 rejects and M2 accepts \(because M accepts x => M1 != M2\)) s
5 533 M
(        \(*\) M1 rejects and M2 rejects \(because M rejects x => M1 == M2\)) s
5 522 M
(        \(*\) But LHS is undecidable Mortality problem => M1 and M2 are not equivalent is und) s
5 511 M
(ecidable) s
5 500 M
(        \(*\) Complement of the previous is hence undecidable) s
5 489 M
(619.2 Call Graphs for Multilingual Software Analysis - [Anne Marie Bogar, Damian Lyons, Dav) s
5 478 M
(id Baird] - https://arxiv.org/pdf/1808.01213.pdf - NeuronRain Call Graphs are dynamic and m) s
5 467 M
(ultilingual - KCachegrind for userspace C/C++/Java and SATURN/FTrace for kernelspace C code) s
5 456 M
(.) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(---------------------) s
5 412 M
(620. \(THEORY\) Space Filling, Separate Chaining Hash Tables, Theoretical EVMs, Timeout, Ball) s
5 401 M
(s-and-Bins, Linear) s
5 390 M
( Programming, Program Analysis, Cellular Automata, Majority Hardness Amplification Lemma - ) s
5 379 M
(30 November 2018, 1 December 2018, 2 December 2018, 28 January 2019 - related to 135, 517, ) s
5 368 M
(615) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(---------------------) s
5 335 M
(Space Filling has been defined in terms of Linear Program in https://sites.google.com/site/) s
5 324 M
(kuja27/Analysis%20of%20a%20Randomized%20Space%20Filling%20Algorithm%20and%20its%20Linear%20) s
5 313 M
(Program%20Formulation.pdf and its cellular automaton algorithm version has been described e) s
5 302 M
(arlier. This linear program with constraint that every variable is non-zero:) s
5 291 M
(                x1 + x2 + ... + xn = N, for all xi > 0) s
5 280 M
(is isomorphic to an LSH set partition, Integer Partition or Separate Chaining hash table pa) s
5 269 M
(rtition of n parts of a set of N items. In most scenarios this is a restricted partition. S) s
5 258 M
(eparate Chaining and Balls-Bins problems are equivalent if buckets are filled at random. Fo) s
5 247 M
(llowing are some of the probability estimates for Balls-and-Bins problem:) s
5 236 M
(620.1 Average number of balls in a bin = n/b \(n balls and b bins\)) s
5 225 M
(620.2 Number of balls to toss till a bin contains a ball:) s
5 214 M
(        probability of ball/item landing in a bin/bucket q=1/b, p=1-q) s
5 203 M
(        Number of tosses till success is Bernoulli trial geometric distribution) s
5 192 M
(        For success after kth ball toss, bernoulli probability: p^\(k-1\)q) s
5 181 M
(        Since k is a random variable, E\(k\) = Sum over k*p^\(k-1\)q = b) s
5 170 M
(620.3 Number of balls tossed till every bin has a ball:) s
5 159 M
(        Total number of bins = b) s
5 148 M
(        Number of balls n is partitioned as n1 + n2 + n3 + ... + nk = N for each stage of t) s
5 137 M
(ossing.) s
5 126 M
(        After ith stage, number of bins having atleast one ball = i-1) s
5 115 M
(        Number of remaining buckets = b-i+1) s
5 104 M
(        Probability of a toss landing in remaining buckets in ith stage = \(b-i+1\)/b) s
5 93 M
(        Each ni is a random variable of probability = b/\(b-i+1\)) s
5 82 M
(        Sum of E\(ni\) < O\(blnb\) before every bin has a ball.) s
5 71 M
(Balls and Bins have histogram representation and previous bounds apply to histogram pattern) s
5 60 M
(s too. In the context of theoretical EVMs if every voter votes perfectly at random with no ) s
5 49 M
(prejudice to a candidate, number of) s
5 38 M
(voters required  for every candidate to have atleast 1 vote = O\(blnb\) for b candidates. Cou) s
5 27 M
(rse material in \(https://github.com/shrinivaasanka/Grafit/blob/master/course_material/Neuro) s
5 16 M
(nRain/AdvancedComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.t) s
5 5 M
(xt\) describe a separate chaining hashtable timeout based OS scheduler pattern and similar b) s
_R
S
%%Page: (383) 383
%%BeginPageSetup
_S
18 36 translate
/pagenum 383 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (383) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ounds apply - Number of processes required for atleast one process per timeout value = O\(bl) s
5 731 M
(nb\). Previous linear program version of separate chaining if solved by Balls-and-Bins has s) s
5 720 M
(imilar bounds - O\(n*ln\(n\)\) for solving LP of n variables.) s
5 698 M
(To ensure secrecy of balloting, every vote appended to a candidate bucket in Theoretical Se) s
5 687 M
(parate Chaining EVM has to be mapped to a unique one time randomly generated numeric id obf) s
5 676 M
(uscating the voter identity \(and each bucket is encrypted\). Mining patterns in this anonymo) s
5 665 M
(us dictionary elicits only voting patterns and not voter patterns. Majority version of hard) s
5 654 M
(ness amplification lemma described earlier envisages a MajorityInverse\(\) function which inv) s
5 643 M
(erts Majority+VoterSAT Boolean function composition for 2 candidates and obtains voters vot) s
5 632 M
(ing for a candidate and per voter SAT assignments top-down. Hardness of this MajorityInvers) s
5 621 M
(e\(\) is crucial to prove amplification. Theoretical EVM for 2 candidates is exactly separate) s
5 610 M
( chaining/LSH version of Majority gate of binary inputs 0 and 1 and Majority\(\) and Majority) s
5 599 M
(Inverse\(\) are defined as: ) s
5 588 M
(        - Majority\(\): candidate of maximum sized voters bucket) s
5 577 M
(        - MajorityInverse\(\): voters bucket for a candidate) s
5 566 M
(Intriguingly, MajorityInverse\(\) is palpably easier in this separate chaining/LSH version of) s
5 555 M
( majority gate but previous anonymizer rules out easy inversion. Voter is issued a receipt ) s
5 544 M
(containing the encrypted ciphertext of the candidate bucket index his/her vote is appended ) s
5 533 M
(to. Encrypted receipt of vote issued to voter is more reliable than VVPAT which is in plain) s
5 522 M
(text and not voter-received. Ballot secrecy is not compromised because this encryption is a) s
5 511 M
(s secure as any other ciphertext transmitted over the network by public key infrastructure.) s
5 500 M
( Only authority accountable for conduct of voting can decrypt the receipt in case of disput) s
5 489 M
(es.) s
5 467 M
(References:) s
5 456 M
(-----------) s
5 445 M
(620.4 Introduction to Algorithms - [Cormen-Leiserson-Rivest-Stein] - Coupon Collector Probl) s
5 434 M
(em/Balls and Bins Problem - Page 134 \(5.4.2\), Page 1201 \(C.4\)) s
5 423 M
(620.5 Analysis of Electronic Voting System - John Hopkins Paper - [TADAYOSHI KOHNO, ADAM ST) s
5 412 M
(UBBLEFIELD, AVIEL D. RUBIN,DAN S. WALLACH] - https://homes.cs.washington.edu/~yoshi/papers/) s
5 401 M
(eVoting/vote.pdf - Analyzes C++ Source Code of Diebold AccuVote EVM and stresses VVPAT. Vul) s
5 390 M
(nerabilities include unencrypted ballot definition file tamper, Safety of Protective Counte) s
5 379 M
(r storing number of votes polled, Party Affiliation tamper etc., - "...On a potentially muc) s
5 368 M
(h larger scale, if the voting terminals download the ballot definition over a network conne) s
5 357 M
(ction, then an adversary could tamper with the ballot definition file en-route from the bac) s
5 346 M
(k-end server to the voting terminal; of course, additional poll-worker procedures could be ) s
5 335 M
(put in place to check the contents of the file after downloading, but we prefer a technolog) s
5 324 M
(ical solution. With respect to modifying the file as it is sent over a network, we point ou) s
5 313 M
(t that the adversary need not be an election insider; the adversary could, for example, be ) s
5 302 M
(someone working at the local ISP. If the adversary knows the structure of the ballot defini) s
5 291 M
(tion, then the adversary can intercept and modify the ballot definition while it is being t) s
5 280 M
(ransmitted. Even if the adversary does not know the precise structure of the ballot definit) s
5 269 M
(ion, many of the fields inside are easy to identify and change, including the candidates\342) s
5 258 M
(\\200\\231 names, which appear as plain ASCII text...". In the context of theoretical EVMs on) s
5 247 M
( cloud defined previously based on LSH/Separate chaining, these encryption prerequisites ar) s
5 236 M
(e relevant in addition to CAP theorem limitations and PACELC theorem consistency versus spe) s
5 225 M
(ed trade-off. Per-candidate vote counters are replaced by hash table buckets which have to ) s
5 214 M
(be secured. History preserving VVPAT audit trails require linking voters to votes which is ) s
5 203 M
(obviously evident from per-candidate vote buckets. Frequent item set mining \(e.g FPGrowth\) ) s
5 192 M
(of EVM buckets could point to malicious and suspicious voting patterns which is not feasibl) s
5 181 M
(e in counter increment.) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(--------------------) s
5 137 M
(621. \(FEATURE\) Social Network Analysis - People Analytics - Dictionary filter for names - 4) s
5 126 M
( December 2018) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(--------------------) s
5 93 M
(1.RecursiveGlossOverlap_Classifier.py has been changed to define a new function nondictiona) s
5 82 M
(ryword\(\) for filtering nondictionary words. This is necessary for parsing text of Social Pr) s
5 71 M
(ofiles which contain names in SocialNetworkAnalysis_PeopleAnalytics.py. Finding names in te) s
5 60 M
(xt is an open AI problem which comes under the purview of Named Entity Recognition \(NER\) wh) s
5 49 M
(ich often requires CRF or Neural Network Training models.) s
5 38 M
(2.As an alternative to statistical learning, if a word in text is not in a language Diction) s
5 27 M
(ary it is assumed to have exited any semantic network \(WordNet for English etc.,\) which cou) s
5 16 M
(ld be names of people, places etc., But there are some exceptions to this and countably few) s
5 5 M
( names are in language dictionaries and encyclopedia.) s
_R
S
%%Page: (384) 384
%%BeginPageSetup
_S
18 36 translate
/pagenum 384 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (384) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(3.Function nondictionaryword\(\) looksup a word in PyDictionary which is based on WordNet, Go) s
5 731 M
(ogle Translation, Thesaurus.com and returns true or false based on language dictionary. If ) s
5 720 M
(for a word lookup null meaning is returned, it is outside Semantic Network and nondictionar) s
5 709 M
(yword\(\) returns true.) s
5 698 M
(4.Depth of the Recursive Gloss Overlap recursion has been parametrized in RecursiveGlossOve) s
5 687 M
(rlap_Classifier.py and RecursiveLambdaFunctionGrowth.py and invoked in SocialNetworkAnalysi) s
5 676 M
(s_PeopleAnalytics.py for depth 2.) s
5 665 M
(5.WordNet and ConceptNet consist of network of concepts than textual words. PyDictionary ha) s
5 654 M
(s additional support for other datasources - Google Translation and Thesaurus - specific to) s
5 643 M
( language words.) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(--------------------) s
5 599 M
(622. \(THEORY and FEATURE\) Text \(De\)Compression by HMM on Vowelless texts - Prefix and Suffi) s
5 588 M
(x Probabilities from English Dictionary - 6 December 2018) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(--------------------) s
5 555 M
(1.Python implementation for Decompressing vowelless compressed text TextCompression.py has ) s
5 544 M
(been updated to invoke Prefixes and Suffixes probability priors computed from English Dicti) s
5 533 M
(onary instead of hardcoded priors.) s
5 522 M
(2.New source file WordSubstringProbabilities.py for computing word prefixes and suffixes pr) s
5 511 M
(obabilities by FreqDist has been committed which parses English Wordlist from Dictionary.tx) s
5 500 M
(t into two probability distribution dictionaries for prefixes and suffixes.) s
5 489 M
(3.Function wordprefixsuffixprobdist\(\) in WordSubstringProbabilities.py called in TextCompre) s
5 478 M
(ssion.py has been  nominal because of computationally intensive Maximum Likelyhood Estimato) s
5 467 M
(r in Hidden Markov Model \(likelydict\) and hardcoded priors are used.) s
5 456 M
(4.Logs for this commit have been committed to WordSubstringProbabilities.log.6December2018 ) s
5 445 M
(and TextCompression.log.6December2018.gz) s
5 434 M
(5.compressedtext.txt and decompressedtext.txt have been updated) s
5 423 M
(6.MLE likelydict is O\(prefixes*suffixes\) = O\(number_of_words^2*length_of_longest_word^2\) is) s
5 412 M
( costly one time disk read and might require some memcache-ing during initialization.) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(---------------------) s
5 368 M
(623.\(THEORY\) Arithmetic Circuit Complexity, Diophantine Complexity, Universal Diophantine E) s
5 357 M
(quation, ABC) s
5 346 M
(Conjecture, Complementary Sets, Diophantine Representation of Complementary Sets, Proof Com) s
5 335 M
(plexity - 7 December 2018, 8 December 2018 - related to 617) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(---------------------) s
5 302 M
(Arithmetic Circuits are directed acyclic graphs of operands +\(sum\),*\(product\) as internal c) s
5 291 M
(ircuit elements \(gates\) and variable or numeric constant inputs as leaves. There is one out) s
5 280 M
(put gate at root. Arithmetic circuits formalize computation of polynomials over a coefficie) s
5 269 M
(nt field. Some prominent upper bound \(Big-O\) results in arithmetic complexity include Matri) s
5 258 M
(x Multiplication and lower bound \(Omega\) results include size of arithmetic cicruit computi) s
5 247 M
(ng exponential polynomials. It has to be noted that solving Diophantine equations and compu) s
5 236 M
(ting polynomials are two opposite inverse directions - solving diophantines involves search) s
5 225 M
(ing for a solution space while computing polynomials is circuit value problem and involves ) s
5 214 M
(substituting solution values in arithmetic circuit input variables and evaluating the root ) s
5 203 M
(gate. Algebraic Complexity classes VP and VNP define the arithmetic hierarchy of polynomial) s
5 192 M
(s - VP contains polynomials which have polynomial size arithmetic circuits while VNP has po) s
5 181 M
(lynomials such that coefficient of every monomial in it can be found efficiently. Permanent) s
5 170 M
( of a matrix has been shown to be complete for the class VNP by [Valiant]. If Permanent has) s
5 159 M
( polynomial size circuits, VP=VNP. From MRDP theorem, every recursively enumerable set is k) s
5 148 M
(nown to have a diophantine equation representation. There exists a universal diophantine eq) s
5 137 M
(uation which represents every recursively enumerable set \([Jones] theorem\). Present state-o) s
5 126 M
(f-the-art is universal diophantine of 9 unknowns of huge degree 1.6 * 10^45. It is open if ) s
5 115 M
(Diophantine complexity class D \([Adleman-Manders]\) is in NP \(or D in VNP in algebraic compl) s
5 104 M
(exity because P in NP implies VP in VNP?\). Complementary Sets \(Beatty Sequences\) and their ) s
5 93 M
(relevance to ABC Conjecture have been described earlier. By universal diophantine equation ) s
5 82 M
(of 9 unknowns but huge degree, every subset of quality 1+epsilon for every real epsilon > 0) s
5 71 M
( predicted by ABC conjecture can be represented. Complexity of a Diophantine Equation is al) s
5 60 M
(so expressed by proof complexity notion of number of additions, multiplications required fo) s
5 49 M
(r verifying a solution. For universal diophantine equation, current known proof complexity ) s
5 38 M
(bound is 100.) s
5 16 M
(References:) s
5 5 M
(-----------) s
_R
S
%%Page: (385) 385
%%BeginPageSetup
_S
18 36 translate
/pagenum 385 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (385) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(623.1 Arithmetic Circuit Complexity - https://en.wikipedia.org/wiki/Arithmetic_circuit_comp) s
5 731 M
(lexity) s
5 720 M
(623.2 Circuit Complexity - [Heribert Vollmer] - Chapter 5 - Arithmetic Circuits and Straigh) s
5 709 M
(tline Programs - https://books.google.co.in/books?id=qOepCAAAQBAJ&pg=PA172&lpg=PA172&dq=ari) s
5 698 M
(thmetic+circuits+heribert+vollmer&source=bl&ots=KiFHOVH3kh&sig=Q5PaW5rJEHI8LBU0iYfNSrRXrwk&) s
5 687 M
(hl=en&sa=X&ved=2ahUKEwivu8GZo43fAhXLTn0KHek8BWI4ChDoATAJegQIABAB#v=onepage&q=arithmetic%20c) s
5 676 M
(ircuits%20heribert%20vollmer&f=false) s
5 665 M
(623.3 Undecidable Diophantine Equations - [James P Jones] - https://pdfs.semanticscholar.or) s
5 654 M
(g/7f96/11e582cf4a2efb1155c2fde9c891c6fc7be3.pdf - Universal Diophantine Equation for repres) s
5 643 M
(enting every recursively enumerable set which applies Kummer's Theorem for factoring Binomi) s
5 632 M
(al Coefficients.) s
5 621 M
(623.4 Arithmetization of 3SAT - Randomized Algorithms - [Rajeev Motwani - Prabhakar Raghava) s
5 610 M
(n] - Page 177 \(Section 7.7\) - 3SAT can be arithmetized to a multilinear diophantine polynom) s
5 599 M
(ial by replacing each clause of the form \(x1 V x2 V x3\) to \(1-\(1-x1\)\(1-x2\)\(1-x3\)\) which can) s
5 588 M
( be solved for integer or real solutions. Number of unknowns in diophantine equals number o) s
5 577 M
(f variables of 3SAT. This reduction implies diophantine class D is in NP. Real solutions to) s
5 566 M
( this SAT diophantine \(e.g by Tarski method\) is another kind of relaxation similar to least) s
5 555 M
( squares approximate MAXSAT Solver. But an added advantage is there exists a universal diop) s
5 544 M
(hantine equation in 9 unknowns for any 3SAT diophantine though number of variables in 3SAT ) s
5 533 M
(could be unlimited.) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(---------------------) s
5 489 M
(624. \(THEORY\) Shell Turing Machines, MRDP Theorem, Category Theory, Diophantine Equations, ) s
5 478 M
(Turing Degrees, Embedding Formal Languages in Vector Space - 10 December 2018, 21 August 20) s
5 467 M
(19 - related to 538) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(---------------------) s
5 434 M
(Intuition for Shell Turing Machines defined in https://5d99cf42-a-62cb3a1a-s-sites.googlegr) s
5 423 M
(oups.com/site/kuja27/UndecidabilityOfFewNonTrivialQuestions.pdf has been explained in Neuro) s
5 412 M
(nRain FAQ https://neuronrain-documentation.readthedocs.io/en/latest/ . Dimension of a Shell) s
5 401 M
( Turing Machine parallels Turing Degree of a Turing Machine which is a measure of unsolvabi) s
5 390 M
(lity of a set. Every Shell Turing Machine is defined on a vector space and all Shell Turing) s
5 379 M
( machines of similar dimension create an equivalence class. Partial Order Semi-Lattice is i) s
5 368 M
(nduced by this vector space dimensional hierarchy of Shell Turing Machines. Following examp) s
5 357 M
(le Shell Turing Machines defined over two different vector spaces of dimensions d1 and d2 m) s
5 346 M
(otivate solvability hierarchy:) s
5 324 M
(Turing Machines Td1 and Td2 find the lexicographically longest tuple \(word\) in languages L\() s
5 313 M
(Td1\) and L\(Td2\). Tuples in L\(Td1\) and L\(Td2\) are of the form [x1,x2,x3,...,xd1] and [x1,x2,) s
5 302 M
(x3,...,xd2] respectively. Though both Td1 and Td2 are computationally similar, words in L\(T) s
5 291 M
(d1\) and L\(Td2\) belong to two different vector spaces of dimensions d1 and d2 therefore retu) s
5 280 M
(rning different results of lengths d1 and d2. This implies Turing degrees of Td1 and Td2 ar) s
5 269 M
(e different and the two machines solve varied difficulties.) s
5 247 M
(In this sense, Shell Turing Machines generalize the notion of word embeddings of natural la) s
5 236 M
(nguages \(e.g Word2Vec\) in a vector space to any formal language - Regular, Context-Free, Co) s
5 225 M
(ntext-Sensitive or Natural, Recursive, Recursively Enumerable - and formal languages become) s
5 214 M
( algebraic sets \(similarity to VP and VNP is intriguing\). MRDP Theorem implies Goedel's Fir) s
5 203 M
(st Incompleteness Theorem. MRDP Theorem implies there are recursively enumerable sets havin) s
5 192 M
(g Diophantine representation but not recursive \(there are no halting accept/reject Turing m) s
5 181 M
(achines and therefore H10 is undecidable for set of integers\). For Shell Turing Machines, M) s
5 170 M
(RDP theorem applies too but there is an additional fine structure \(Dimension hieararchy par) s
5 159 M
(tial order\) introduced by vector space dimensions similar to Turing Degrees. Another releva) s
5 148 M
(nt question arises: How Shell Turing Machines map to Diophantine representations i.e What i) s
5 137 M
(s the relation between \(number of unknowns, degree\) of a diophantine equation of an RE set ) s
5 126 M
(to the vector space dimension of Shell Turing Machine accepting it.) s
5 104 M
(Example embedding of natural language text sentence in a Shell Turing Machine defined over ) s
5 93 M
(vector space:) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(-------------) s
5 60 M
(Sentence: "This is bigger than the biggest" is an oxymoron if read flat with no dimensional) s
5 49 M
( depth. Assuming) s
5 38 M
(there exists set of Shell Turing Machines defined on a vector space of dimension d+x having) s
5 27 M
( oracle access to) s
5 16 M
(Shell Turing Machine defined on a vector space of dimension d \(Turing Jump\), following dime) s
5 5 M
(nsion subscripted sentence is an example sentence in a Shell Turing Machine of dimension d+) s
_R
S
%%Page: (386) 386
%%BeginPageSetup
_S
18 36 translate
/pagenum 386 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (386) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(x having oracle access to lower dimensional \(d\) Shell Turing Machine and transcends two vec) s
5 731 M
(tor spaces of varied dimensions:) s
5 720 M
(        This \(d+x\) is bigger \(d+x\) than the biggest\(d\)) s
5 709 M
(Vector Space for a Shell Turing Machine can be any arbitrary topological space in real anal) s
5 698 M
(ysis e.g Baire Space, Cantor Space \(sets homeomorphic to Cantor Set Fractal obtained by rem) s
5 687 M
(oving midsegment of a line indefinitely\)) s
5 665 M
(Set of Recursively Enumerable Languages can be written as disjoint union/exact cover of rec) s
5 654 M
(ursively enumerable languages of Shell Turing Machines embedded in vector spaces of all pos) s
5 643 M
(sible dimensions:) s
5 632 M
(        RE = RE\(d1\) U RE\(d2\) U RE\(d3\) ... U RE\(dn\)) s
5 621 M
(Since each dimension corresponds to a Turing Degree \(measure of unsolvability\), Partial Ord) s
5 610 M
(er Semi Lattice of all Shell Turing Machines has a Lowest Upper Bound dimension - There exi) s
5 599 M
(sts a maximal dimension Turing Machine dm accepting some RE\(dm\) language. Shell Turing Mach) s
5 588 M
(ines are most befitting in formalizing Computational Physics problems e.g Quantum and Relat) s
5 577 M
(ivistic Physics, String Theory/M-Theory, Branes, Multiverses.) s
5 555 M
(An adaptation of Halting Problem to Shell Turing Machines) s
5 544 M
(----------------------------------------------------------) s
5 533 M
(Undecidability of Halting Problem is proved by following gadget \(oversimplified\):) s
5 522 M
(Turing Machine M' accepts an encoding of another Turing Machine M and an input x - M'\(M,x\).) s
5 511 M
( ) s
5 500 M
(                M' rejects and halts if M accepts and halts on x) s
5 489 M
(                M' accepts and halts if M rejects and halts on x) s
5 478 M
(Turing Machine M'' accepts if M' rejects and rejects if M' accepts which detects M has halt) s
5 467 M
(ed either way - M''\(M'\(M,x\)\)) s
5 445 M
(Contradiction is established by changing the Turing machine encoding to M' from M as M'\(M',) s
5 434 M
(x\):) s
5 423 M
(                M' rejects and halts if M' accepts and halts on x) s
5 412 M
(                M' accepts and halts if M' rejects and halts on x) s
5 401 M
(which is crucial to undecidability of halting. Previous encoding has no dimensional informa) s
5 390 M
(tion. If M' and M are) s
5 379 M
(Shell Turing Machines of varied dimensions d1 and d2, Halting Problem is rephrased as - M'') s
5 368 M
(\(M'[d1]\(M[d2],x[d2]\)\) - Turing Machine M' defined in space of dimension d1 accepts encoding) s
5 357 M
( of Turing Machine M and an input x defined in space of dimension d2 \(d1 > d2\)) s
5 335 M
(Following diagonalization proof of halting problem undecidability extends to Shell Turing M) s
5 324 M
(achines:) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(--------) s
5 291 M
(Let f\(x,i\) be a function defined as:) s
5 280 M
(        f\(x,i\) = 1 if Turing Machine x halts on input i, 0 if Turing Machine x does not hal) s
5 269 M
(t on input i.) s
5 258 M
(Let g\(y\) be another function defined as:) s
5 247 M
(        g\(y\) = 0 if f\(y,y\)=0, else undefined \(if f\(y,y\)=1\)) s
5 225 M
(Diagonalization is an infinite two dimensional matrix D defined as:) s
5 214 M
(        D\(x,y\)  = 1 if Turing Machine x halts on input y, 0  if Turing Machine x does not h) s
5 203 M
(alt on y) s
5 192 M
(Proof is by showing function f\(x,i\) is partial and not total \(not defined for all inputs\) a) s
5 181 M
(nd thus not recursive but recursively enumerable.) s
5 159 M
(Nothing prevents asking what is g\(g\):) s
5 148 M
(        g\(g\) = if f\(g,g\)=0 then 0, else undefined \(if f\(g,g\) = 1\)) s
5 126 M
(=> f\(g,g\) = 1 if Machine g halts on encoding of g, 0 if Machine g does not halt on encoding) s
5 115 M
( of g \(Diagonal of the Diagonalization Matrix D\)) s
5 93 M
(But from previous definition of g\(g\):) s
5 82 M
(        g\(g\) = if f\(g,g\)=0 \(if Machine g does not halt on g\) then g\(g\) halts returning 0 an) s
5 71 M
(d) s
5 60 M
(                if f\(g,g\)=1 \(if Machine g halts on g\) then g\(g\) is undefined) s
5 49 M
(which is a contradiction.) s
5 27 M
(The fact that there exists atleast one Turing Machine g whose halting is not decidable make) s
5 16 M
(s f\(x,i\) partial and not a total recursive function and therefore Halting problem is undeci) s
5 5 M
(dable. It has to be noted that function g has oracle access to Halting problem function f\(x) s
_R
S
%%Page: (387) 387
%%BeginPageSetup
_S
18 36 translate
/pagenum 387 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (387) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(,i\) thus defining a Turing jump \(0'\). But Recursively Enumerable set has been previously ex) s
5 731 M
(pressed as disjoint union of languages of Shell Turing Machines defined on all possible vec) s
5 720 M
(tor spaces. This implies there are Shell Turing Machines which are not recursive \(but repre) s
5 709 M
(sented by a Diophantine equation\). Implications of this for problems in Quantum computation) s
5 698 M
( and Relativistic Physics defined for example on Hilbert Spaces are huge - There are Shell ) s
5 687 M
(Turing Machines defined on certain vector spaces which are not recursive \(or\) there are no ) s
5 676 M
(physics experiments for verifying truths of physical realities represented by these Hilbert) s
5 665 M
( Machines. ) s
5 643 M
(Problem of relevance to Shell Turing Machines is: What happens to halting problem if functi) s
5 632 M
(ons f and g are defined on two different vector spaces of unequal dimensions. If f\(x,i\) is ) s
5 621 M
(embedded on a Hilbert space S1 which contains all other vector spaces and g\(y\) on another H) s
5 610 M
(ilbert space S2 \(S1 contains S2\), truth value of a logical statement in two quantifiers:) s
5 588 M
(For all Shell Turing Machines x defined in Hilbert space S\(d\) of dimension d, there exists ) s
5 577 M
(input i defined in S\(d\) such that x halts on i \(True or False\)) s
5 555 M
(has to be exported to f\(x,i\) defined on Hilbert space S1 containing S\(d\)) s
5 533 M
(This lifting/export of logical statements between Hilbert Spaces of 2 different dimensions ) s
5 522 M
(is accomplished by Linear Transformations between Hilbert Spaces. Section 4.2 of Reference ) s
5 511 M
(624.5 describes some example definitions of logical formulas \(conjunctive normal form\) in H) s
5 500 M
(ilbert Spaces. Conjunctive Clauses of the formulas are represented as vectors of a Hilbert ) s
5 489 M
(Space. It is not necessary that all transformations are possible. Computational Physics exa) s
5 478 M
(mple: Assuming logical statements inside a blackhole singularity are defined in some Hilber) s
5 467 M
(t Space, existence of all possible linear transformations implies information \(truths of lo) s
5 456 M
(gical formulas\) oozes out of the blackhole space into observable space \(e.g Hawking Radiati) s
5 445 M
(on, Blackholes are not Black, Blackhole information paradox\)) s
5 423 M
(Traditional results on homomorphisms between Vector Spaces apply to Shell Turing Machines d) s
5 412 M
(efined on any two vector spaces one of which is a subspace of the other: ) s
5 401 M
(        \(*\) If T is a homomorphism defined from vectorspace U to vectorspace V of kernel W,) s
5 390 M
( then V is isomorphic to U/W. Conversely, if U is a vectorspace and W is a subspace of U, t) s
5 379 M
(hen there is a homomorphism of U onto U/W.) s
5 368 M
(        \(*\) If U is a vectorspace defined over field F, and W is a subspace of V then V/W i) s
5 357 M
(s a quotient vectorspace over F if for v1, v2 in V and v1 + W in V/W, v2 + W in V/W:) s
5 346 M
(        \(v1 + W\) + \(v2 + W\) = \(v1+v2\) + W) s
5 335 M
(                \(and\)) s
5 324 M
(        For a in F, a\(v1 + W\) = av1 + W) s
5 302 M
(If Shell Turing Machines S1\(U\) and S2\(W\) are defined over vector spaces V and W and W is su) s
5 291 M
(bspace of V and there is a homomorphism T\(defined by relation "bigger than"\) from V to V/W,) s
5 280 M
( previous example oxymoron sentence - "This is bigger than the biggest" - is logically defi) s
5 269 M
(ned in quotient space V/W in first order logic quantifiers as \(annotated by square parenthe) s
5 258 M
(ses]:) s
5 247 M
(        This is [There exists v1 in V] bigger than [T\(v1,identity + w1\):v1 > identity + w1]) s
5 236 M
( the biggest [there exists w1 in W such that for all w in W, w1 > w]) s
5 214 M
(Shell Turing Machines can be defined in terms of Category Theory too:) s
5 203 M
(---------------------------------------------------------------------) s
5 192 M
(Category Theory of [Eilenberg-MacLane] abstracts whole of mathematics into following:) s
5 181 M
(        \(*\) Category C is a Set of Objects associated with a topological space) s
5 170 M
(        \(*\) Every Category has set of morphisms f:a-b defined on objects a,b in Category C ) s
5 159 M
(- morphisms are maps between objects on topological spaces - every morphism f:a-b on object) s
5 148 M
(s a,b in topological spaces can be a Shell Turing Machine defined on topological spaces of ) s
5 137 M
(a and b ) s
5 126 M
(        \(*\) Functors F are maps between two Categories C1 and C2 - for each object x in C1,) s
5 115 M
( F\(x\) is in C2 and for each morphism f:a-b in C1) s
5 104 M
(morphism, F\(f\):F\(a\)-F\(b\) is in C2 - every functor F can be a Shell Turing Machine defined o) s
5 93 M
(n topological spaces of F\(a\) and F\(b\)) s
5 82 M
(        ) s
5 71 M
(References:) s
5 60 M
(----------) s
5 49 M
(624.1 Turing Jump, Priority Method of Emil Post, Injury - https://en.wikipedia.org/wiki/Tur) s
5 38 M
(ing_degree#Post's_problem_and_the_priority_method - Turing jump of a Turing Machine X is th) s
5 27 M
(e set X' of Turing machines which halt by having oracle access to X or in other words, X' i) s
5 16 M
(s set of harder problems than X. Priority method is applied to prove existence or otherwise) s
5 5 M
( of intermediate degrees between two turing machines of different jumps e.g Turing Degree 0) s
_R
S
%%Page: (388) 388
%%BeginPageSetup
_S
18 36 translate
/pagenum 388 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (388) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( \(halting problem\) and Turing Degree 0' \(problems having oracle access to halting problem\).) s
5 731 M
( Priority method tabulates requirements Ae and Be for an oracle  machine e where Ae stipula) s
5 720 M
(tes e does not compute 0' from X and Be implies non-oracle machine e does not compute X. Di) s
5 709 M
(mensional Hierarchy of unsolvability follows from Turing Jump.) s
5 698 M
(624.2 Embedding Turing Machines on Hilbert Space - https://mathoverflow.net/questions/31334) s
5 687 M
(3/embedding-turing-machine - Counts Functions \(for languages of Turing Machines\) by number ) s
5 676 M
(of states and searches for the Turing Machines for these languages - This is the opposite d) s
5 665 M
(irection of Shell Turing Machine definition which has an intrinsic dimensional parameter in) s
5 654 M
( addition to state.) s
5 643 M
(624.3 Definability of Turing Jump - [Shore-Slaman] - https://math.berkeley.edu/~slaman/pape) s
5 632 M
(rs/jump.pdf - relation between Turing Machines A and B, A <T B implies A is recursive in B ) s
5 621 M
(or A is Turing-computable by oracle access to B. A =T B \(A <T B and B <T A\) is the Turing D) s
5 610 M
(egree, an equivalence class of machines solving sets of similar difficulties. Turing Jump A) s
5 599 M
('={e| Machine e halts on oracle access to A}) s
5 588 M
(624.4 Aspects of Turing Jump - [Slaman] - https://math.berkeley.edu/~slaman/papers/lc2000.p) s
5 577 M
(df) s
5 566 M
(624.5 Hilbert Machines - Turing Machines in Complex Inner Product Spaces and Applications t) s
5 555 M
(o Quantum Computation - http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.36.73&rep=) s
5 544 M
(rep1&type=pdf - has close resemblance to definition of Shell Turing Machines. Linear Machin) s
5 533 M
(es are conventional Turing Machines defined over input vector space, output vector space an) s
5 522 M
(d a state vector space. Concrete Hilbert Machines are Linear Machines defined over a Hilber) s
5 511 M
(t Complex Vector Space and a linear Complex Operator - Theorem 8 - Any finite automata can ) s
5 500 M
(be represented in a finite dimensional Hilbert Space by a Hilbert Machine - Examples of Hil) s
5 489 M
(bert Machines - Quantum Computation: Input and Output to a Quantum Computer are represented) s
5 478 M
( by vectors on Hilbert Space and computation \(state transition\) is performed by Unitary Ope) s
5 467 M
(rator H on Hilbert Spaces \(Operator HH*=H*H=I, H* is infinite dimensional conjugate transpo) s
5 456 M
(se of H\) - Expected Value of State\(at time t\) = e^\(-iHt\). Shell Turing Machines go beyond j) s
5 445 M
(ust embedding a Turing Machine in vector space - As the name "Shell" suggests inspired by U) s
5 434 M
(nix shells, truths of logical statements in lower dimensional vector spaces are allowed to ) s
5 423 M
(be exported to higher dimensions.) s
5 412 M
(624.6 The Elegant Universe: Superstrings, Hidden Dimensions, and the Quest for the Ultimate) s
5 401 M
( Theory - [Brian Greene] ) s
5 390 M
(624.7 Turing Degrees of Diophantine Sets - Computably Enumerable Turing Degrees - Hilbert T) s
5 379 M
(enth Problem - Sixth Asian Logic Conference - https://books.google.co.in/books?id=7IbVCgAAQ) s
5 368 M
(BAJ&pg=PA152&lpg=PA152&dq=diophantine+equations+turing+degree&source=bl&ots=q9HomH3o-9&sig=) s
5 357 M
(rHKb81u6mifJvOX_-kjKv4YRdUY&hl=en&sa=X&ved=2ahUKEwjMpLvsur3fAhVNeisKHd_MA-U4ChDoATABegQIBRA) s
5 346 M
(B#v=onepage&q=diophantine%20equations%20turing%20degree&f=false) s
5 335 M
(624.8 Degrees of Unsolvability: Tutorial - https://pdfs.semanticscholar.org/acae/fe1907be68) s
5 324 M
(d357700f0690519251fc948fdb.pdf - Mass Problems, Muchnik Degrees, Turing Degrees) s
5 313 M
(624.9 Linear Transformations in Hilbert Space - [Stone] - https://www.ams.org/journals/bull) s
5 302 M
(/1934-40-11/S0002-9904-1934-05973-1/S0002-9904-1934-05973-1.pdf - Transform points on one H) s
5 291 M
(ilbert Space to points on another Hilbert Space) s
5 280 M
(624.10 Geometry of Interaction and Linear Logic - [Girard] - https://en.wikipedia.org/wiki/) s
5 269 M
(Geometry_of_interaction - Proofs are represented as Networks of Logical Statement implicati) s
5 258 M
(ons than trees in Sequent Calculus. This has some resemblance to Implication Graph Convex H) s
5 247 M
(ulls defined in http://sourceforge.net/projects/acadpdrafts/files/ImplicationGraphsPGoodEqu) s
5 236 M
(ationAndPNotEqualToNPQuestion_excerpts.pdf/download, https://sites.google.com/site/kuja27/N) s
5 225 M
(otesOnConceptHypergraphHMM_and_ImplicationGraphConvexHulls_2013-12-30.pdf?attredirects=0&d=) s
5 214 M
(1, https://sites.google.com/site/kuja27/ImplicationRandomGraphConvexHullsAndPerfectVoterPro) s
5 203 M
(blem_2014-01-11.pdf?attredirects=0&d=1) s
5 192 M
(624.11 Searle's Chinese Room Argument, Turing Test and AI - https://en.wikipedia.org/wiki/C) s
5 181 M
(hinese_room - Turing test differentiates a human from a machine by question-answering \(e.g ) s
5 170 M
(reCAPTCHA\). If there is a machine translation turing machine translating English to Chinese) s
5 159 M
(, it does not necessarily imply machine understands English and Chinese\(strong AI\), but onl) s
5 148 M
(y simulates it \(weak AI\) - Human equivalent of a Turing machine in a room can exactly mimic) s
5 137 M
(k Turing Machine by executing the translation algorithm churning out Chinese from English w) s
5 126 M
(ith no knowledge of English or Chinese whatsoever. Chinese room example demarcates measure ) s
5 115 M
(of difficulties of two sets - understandability/consciousness and simulatability - and thus) s
5 104 M
( a Turing jump - human has oracle access to a translation turing machine.) s
5 93 M
(624.12 Definability of Logical Formulas - http://www.math.wisc.edu/~msoskova/talks/MadisonC) s
5 82 M
(olloquium.pdf) s
5 71 M
(624.13 Topics in Algebra - [Israel N.Herstein] - Chapter 4 - Vector Spaces and Modules - Pa) s
5 60 M
(ge 174 - Theorem 4.1.1 and Lemma 4.1.2 - Quotient Spaces) s
5 49 M
(624.14 Reproducing Kernel Hilbert Space - https://en.wikipedia.org/wiki/Reproducing_kernel_) s
5 38 M
(Hilbert_space - Mathematical Functions are embedded on Hilbert Space and have distance metr) s
5 27 M
(ic defined on them. Every Function can be defined by a Turing Machine from Church-Turing Th) s
5 16 M
(esis.) s
_R
S
%%Page: (389) 389
%%BeginPageSetup
_S
18 36 translate
/pagenum 389 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (389) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------------------) s
5 731 M
(------------------) s
5 720 M
(625. \(THEORY\) Recursive Lambda Function Growth - TextGraph Machine Translation - 10 Decembe) s
5 709 M
(r 2018 - related) s
5 698 M
(to 178) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(------------------) s
5 665 M
(1. RecursiveLambdaFunctionGrowth python implementation has a new function to do machine tra) s
5 654 M
(nslation of Text) s
5 643 M
(Graph english word vertices to another natural language. It uses PyDictionary Google Transl) s
5 632 M
(ate REST API service internally.) s
5 621 M
(2. An example Text Graph from Recursive Lambda Function Growth has been translated from Eng) s
5 610 M
(lish to Kannada \(an Indian language\).) s
5 599 M
(3. This is just a primitive implementation without sentences creation which can be done thr) s
5 588 M
(ough usual graph traversal or random walks. ) s
5 577 M
(4. Logs have been committed to testlogs/RecursiveLambdaFunctionGrowth.log.MachineTranslatio) s
5 566 M
(n.10December2018 ) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(------------------) s
5 522 M
(626. \(THEORY\) Partial Ordered Rankings, Intrinsic Merit Vectors, Galois Connections and Tho) s
5 511 M
(ughtNet - related) s
5 500 M
(to all sections expanding https://tac.nist.gov//publications/2010/participant.papers/CMI_II) s
5 489 M
(T.proceedings.pdf) s
5 478 M
(and https://arxiv.org/abs/1006.4458 and ThoughtNet - 21 December 2018) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(------------------) s
5 445 M
(Search Engines usually rank results as linear total order. Alternatively for each query ran) s
5 434 M
(ked set of results) s
5 423 M
(can be a partial order and not necessarily total. This has been mentioned as a passing refe) s
5 412 M
(rence in ArXiv and) s
5 401 M
(NIST TAC articles previously. Traditionally Intrinsic Merit/Fitness is a scalar quantity wh) s
5 390 M
(ich can be vectorized) s
5 379 M
(based on feature dimensions. Consequently, two URLs may not be comparable by a total orderi) s
5 368 M
(ng < relation. Following example intrinsic merit vector partial ordered rankings of website) s
5 357 M
(s intuit this:) s
5 335 M
(\(1\) Subset partial ordered ranking - set of subsets ordered by containment:) s
5 324 M
(        [1,2,3,4]) s
5 313 M
(        |       \\) s
5 302 M
(        [1,2,3] [2,3,4]) s
5 291 M
(        |        |) s
5 280 M
(        [1,2]   [2,3]) s
5 258 M
(\(2\) Less Than or Equal To Ranking - Each tuple has elements of value less than or equal to ) s
5 247 M
(elements of predecessor tuple:) s
5 236 M
(        [1,2,3,4]       [2,3,2,5]) s
5 225 M
(        |                       |) s
5 214 M
(        [1,1,2,3] ----- [2,2,3,4]) s
5 203 M
(        |) s
5 192 M
(        [1,1,1,2]) s
5 170 M
(Search Results for any two different queries thus create two partial ordered tuple sets of ) s
5 159 M
(rankings. Galois ) s
5 148 M
(connections define maps F and G between elements of two posets A and B subject to condition) s
5 137 M
(s:) s
5 126 M
(        a in A, b in B) s
5 115 M
(        F\(a\)=c in B, G\(b\)=d in A) s
5 104 M
(        F\(a\) <= b if and only if a <= G\(b\)) s
5 93 M
(Previous Galois Connections provide an alternative spectacle to perceive ThoughtNet - Thoug) s
5 82 M
(htNet as defined) s
5 71 M
(elsewhere earlier is a hypergraph of sentence hyperedges on evocative hypervertices motivat) s
5 60 M
(ed by Psycho-and-Neurolinguistics. Search engine queries can be construed as evocatives ret) s
5 49 M
(urning results evoked by the query) s
5 38 M
(and thus search engine results are hyperedges of a ThoughtNet \(Internet itself as a Thought) s
5 27 M
(Net\) and queries are evocative hypervertices - same search result URL can appear in more th) s
5 16 M
(an two queries creating the hyperedge across these query hypervertices.Previous partial ord) s
5 5 M
(ered rankings of search results bring an additional application of Galois connections among) s
_R
S
%%Page: (390) 390
%%BeginPageSetup
_S
18 36 translate
/pagenum 390 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (390) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(st search result posets - if URLs a,b,c,d are such that a=c and b=d aforementioned Galois c) s
5 731 M
(onnections are equivalent to hyperedges between ranked search query result posets in Though) s
5 720 M
(tNet and evocative hypervertices are search queries => ThoughtNet is a giant transitive Gal) s
5 709 M
(ois Connection which is different from Contextual Multi Armed Bandit formulation of Thought) s
5 698 M
(Net earlier. Various results and theorems applicable to ThoughtNet Hypergraphs \(and its str) s
5 687 M
(ipped down version of Survival Index Timeout pattern\) have been mentioned in:) s
5 676 M
(https://github.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/AdvancedCom) s
5 665 M
(puterScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt) s
5 643 M
(References:) s
5 632 M
(-----------) s
5 621 M
(626.1 Galois Connections - https://en.wikipedia.org/wiki/Galois_connection) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(--------------------) s
5 577 M
(627. \(FEATURE\) Vowelless Text \(De\)Compression - simplified likelydict MLE for HMM - 3 Janua) s
5 566 M
(ry 2019) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(--------------------) s
5 533 M
(1. TextCompression.py has been classified to new class VowellessText and all functions have) s
5 522 M
( been made its members.) s
5 511 M
(2. One time Likelyhood Dictionary computation of prefixes,suffixes and substrings has been ) s
5 500 M
(shifted to WordSubstringProbabilities.py - wordlikelydict\(\) and wordprefixsuffixsubstringsp) s
5 489 M
(robdist\(\)) s
5 478 M
(3. All precomputed prefix and suffix priors are initialized in TextCompression.py __init__\() s
5 467 M
(\)) s
5 456 M
(4. Costly loop in HiddenMarkovModel_MLE\(\) of TextCompression.py has been done away with and) s
5 445 M
( instead wordlikelydict\(\) has been changed to choose between costly exhaustive search and s) s
5 434 M
(ubstringsdict list comprehension.) s
5 423 M
(5. Hardcoded priors for HMM have been removed and replaced by previous likelihood computati) s
5 412 M
(on.) s
5 401 M
(6. Logs for this have been committed to testlogs/TextCompression.log.3January2019) s
5 390 M
(7. likelydict is created on demand once per compressed word than earlier heavy initializati) s
5 379 M
(on for all possible likelihoods.) s
5 368 M
(8. Regular Expressions are used in list comprehension for matching strings - "_" are treate) s
5 357 M
(d as alphabets in lower or upper case.) s
5 346 M
(9. For Exhaustive Search. following line is crucial which computes the conditional probabil) s
5 335 M
(ity of a prefix for a suffix:) s
5 324 M
(                likelydict[k3[:-1]+k3[len\(k3\)-1]+k4[1:]] = v3 * v4) s
5 313 M
(10. The else clause, generalizes it and applies precomputed frequency probabilities of conc) s
5 302 M
(atenated substrings circumventing the following conditional probability:) s
5 291 M
(                likelydict[substring1 + substring2 + ... + substringN] = Pr\(substring1\) * P) s
5 280 M
(r\(substring2\) * ... * Pr\(substringN\)) s
5 269 M
(by:) s
5 258 M
(                likelydict[substring1 + substring2 + ... + substringN] = Pr\(substring1 + su) s
5 247 M
(bstring2 + ... + substringN\)) s
5 236 M
(11. Both should be almost equal if substring random variables are independent and identical) s
5 225 M
(ly distributed.) s
5 214 M
(12. An example English text from https://www.valmikiramayan.net/utf8/yuddha/sarga128/yuddha) s
5 203 M
(_128_frame.htm - Verse 120 has been compressed and decompressed.) s
5 192 M
(13. Decompressed text has almost more than 50% accuracy and most priors are equal misleadin) s
5 181 M
(g the decipherment.) s
5 170 M
(14. Previous HMM based probabilistic decompression can be compared to List decoding Berleka) s
5 159 M
(mp-Welch implementation which maps text to a polynomial ) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(--------------------) s
5 115 M
(628. \(FEATURE\) Software Analytics - Hardcoded inputlayer replaced by Psutils - 8 January 20) s
5 104 M
(19 - Usecase) s
5 93 M
(in 399 implemented) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(--------------------) s
5 60 M
(1.DeepLearning_SoftwareAnalytics.py in software_analytics/ has been updated and hardcoded p) s
5 49 M
(rocess statistics) s
5 38 M
(for input layer of BackPropagation have been replaced by Psutil systemwide load percentages) s
5 27 M
(2.This implements the usecase for software analytics mentioned earlier and finds the weight) s
5 16 M
(s for) s
5 5 M
(input layer, hidden layer and output layer of BackPropagation multilayered perceptron.) s
_R
S
%%Page: (391) 391
%%BeginPageSetup
_S
18 36 translate
/pagenum 391 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (391) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(3.Psutil provides cpu_percentage\(\), memory_percentage\(\) and disk_usage\(\) functions fields f) s
5 731 M
(rom which have been used as input layer of the perceptron.) s
5 720 M
(4.Sampling loop has been limited to 2 but it can be any number. For each value of instantan) s
5 709 M
(eous system load \(cpu, memory, disk IO\) backpropagation iterates for sometime \(limited to 1) s
5 698 M
(0000\) and finds the weights.) s
5 687 M
(5.For any two successive load values of input layer at two time points t and t+delta, the w) s
5 676 M
(eights of the perceptron fluctuate and should theoretically stabilize for significant numbe) s
5 665 M
(r of load samples \(which is presently 2\)) s
5 654 M
(6.Output layer has been set to a high value of 99% implying heavily thrashed system and inp) s
5 643 M
(ut percentage values are divided by 10000 instead of 100 for probabilities to prevent overf) s
5 632 M
(low errors \(NaN and Inf\).) s
5 621 M
(7.Logs have been committed to testlogs/DeepLearning_SoftwareAnalytics.log.8January2019) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-------------) s
5 577 M
(629. \(THEORY\) Complement Diophantine Equations over Complex Numbers and Algebraic/Arithmeti) s
5 566 M
(c Circuits for them, Blum-Shub-Smale Turing Machines, Thue and Siegel Equations, Elliptic C) s
5 555 M
(urves, Mordell Conjecture and Theorem, ABC Conjecture, Riemann Zeta Function - 9 January 20) s
5 544 M
(19 - related to 24,490,617) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(-------------) s
5 511 M
(As mentioned in previous sections, finding Diophantine representation of a complementary se) s
5 500 M
(t reduces to creating a map f from diophantine set a={a1,a2,...,an} such that f\(x,b\)=0 for ) s
5 489 M
(unknown x in {Integers/Reals/Rationals/Complex} and parameter b in a. Discussions previousl) s
5 478 M
(y have been mostly restricted to Integers, Reals and Rationals and terminology "complement ) s
5 467 M
(function" is applied to a diophantine of integer solutions to x and is totally defined for ) s
5 456 M
(all x\(recursive\) throughout all sections of this draft. Extension to Complex Diophantine Se) s
5 445 M
(ts involves applying a converse of Thue's Equation which exactly solves a known homogenous ) s
5 434 M
(bivariate diophantine f:) s
5 423 M
(        f\(x,y\)=m, m is non-zero integer.) s
5 412 M
(f\(x,y\) is factorized as:) s
5 401 M
(        f\(x,y\)=a\(d\)*product_r=1_to_d\(x-alpha\(r\)*y\)) s
5 390 M
(where alpha\(r\) are complex roots of f\(t,1\)=a0+a1*t+a2*t^2+...a\(d\)*t^d=0.) s
5 368 M
(But f is assumed to be unknown for a complementary diophantine set and has to be represente) s
5 357 M
(d by reversing the factorization to an interpolation:) s
5 346 M
(        f\(x,y\)=a\(d\)*product_r=1_to_d\(x-alpha\(r\)*y\)) s
5 335 M
(for all alpha\(r\) in a complex complementary diophantine set CDS={alpha1,alpha2,...,alphad} ) s
5 324 M
(which yields f\(x,y\) for integer values of x,y. Assumption here is CDS is the set of complex) s
5 313 M
( roots of f\(t,1\)=a0+a1*t+a2*t^2+...a\(d\)*t^d=0.) s
5 291 M
(Siegel Equation generalizes Thue's Theorem for arbitrary diphantine equations in integer co) s
5 280 M
(effients. f\(x,y\) is decomposed as:) s
5 269 M
(        f\(x,y\) = h\(x,y\) + k\(x,y\) ) s
5 258 M
(where h\(x,y\) is homogenous and Thue's equation applies. Set of complex solutions of f\(x,y\) ) s
5 247 M
(adjoined by set of distinct {alpha\(r\)} form a Riemann compact surface of singularities or a) s
5 236 M
(n algebraic curve which is the required Complement Diophantine Surface over Complex Numbers) s
5 225 M
(. Mordell-Weil Theorem is a classic result which states diophantine elliptic curves of the ) s
5 214 M
(form:) s
5 203 M
(        y^2 = x^3 + ax^2 + bx + c ) s
5 192 M
(have finitely many rational solutions which can be obtained by a chord-tangent algorithm an) s
5 181 M
(d create an abelian group. Elliptic curve diophantines of finite rational solutions are sui) s
5 170 M
(table candidates for formalizing finite sets of triples in complement diophantine version o) s
5 159 M
(f ABC conjecture mentioned in 617 - "...Q1 is the 3 dimensional half-space of Cube tiled by) s
5 148 M
( finite sets of triples of quality 1+epsilon for every real epsilon. As mentioned earlier, ) s
5 137 M
(Pentominoes tiling is an exact cover problem for 2 dimensions...".) s
5 115 M
(Algebraic or Arithmetic circuits for Diophantines over Complex Numbers can be defined by co) s
5 104 M
(mplexity classes over complex numbers \(classes Pc, Npc,...\). Blum-Shub-Smale Turing Machine) s
5 93 M
( model generalizes Turing Machines over Z]2] to any Field Real,Complex,Rationals etc.,For e) s
5 82 M
(xample, Hilbert Nullstellensatz) s
5 71 M
(problem decides if set of polynomials have common root and is in algebraic complexity class) s
5 60 M
( HNc over complex numbers. Riemann Zeta Function can be represented as a disjunctive clause) s
5 49 M
(s or non-uniform Hilbert Nullstellensatz algebraic circuit in 0-1-HNc \(0 if s is a non-triv) s
5 38 M
(ial zero else 1\) of product polynomials having complex roots \(non-trivial zeros\): ) s
5 27 M
(        RZF=product_of\(1/[1-prime\(k\)^\(-s\)]\) for all primes 2,3,5,7,...) s
5 16 M
(Algebraic computation is defined by a binary tree - Algebraic Computation Tree over +,-.%,*) s
5 5 M
(,sqrt\(\).From Koiran's Theorem 0-1-NPc \(variables are binary but polynomial size certificate) s
_R
S
%%Page: (392) 392
%%BeginPageSetup
_S
18 36 translate
/pagenum 392 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (392) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(s are complex\) is in AM[2]=BP.NP if Riemann Hypothesis is True which equates conventional c) s
5 731 M
(omplexity classes over Z[2] and algebraic classes. 0-1-HNc is 0-1-NPc-complete and 0-1-HNc ) s
5 720 M
(is in PSPACE. This is an alternative circuit formulation to Euler-Fourier polynomial mentio) s
5 709 M
(ned in 24 for Riemann Zeta Function. Number of solutions \(non-trivial zeros\) to previous RZ) s
5 698 M
(F circuit can be characterized by counting class equivalent Sharp-0-1-HNc \(not in literatur) s
5 687 M
(e\). From Riemann Hypothesis, all these solutions must have Re\(s\) = 0.5.) s
5 665 M
(References:) s
5 654 M
(-----------) s
5 643 M
(629.1 Diophantine Equations - Survey - [V Srinivas, Tata Institute of Fundamental Research]) s
5 632 M
( - https://www.currentscience.ac.in/Downloads/article_id_059_12_0589_0594_0.pdf) s
5 621 M
(629.2 Exploring Number Theory via Diophantine Equations - https://www.csbsju.edu/Documents/) s
5 610 M
(Math/Sunil-CC-2009-B1.pdf - Gaussian Intgers, Pythagorean Triples) s
5 599 M
(629.3 Fermat's Last Theorem - [Amir D.Aczel] - Shimura-Taniyama Conjecture: Elliptic Curves) s
5 588 M
( are Modular Forms and proof of Fermat's Last Theorem by [Andrew Wiles]) s
5 577 M
(629.4 Algebraic Complexity - [Arora-Barak] - Blum-Shub-Smale Model - http://theory.cs.princ) s
5 566 M
(eton.edu/complexity/algebraicchap.pdf) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(--------------) s
5 522 M
(630. \(THEORY and FEATURE\) Music Pattern Mining - Audio to Notes - Intrinsic Merit of Music ) s
5 511 M
(- 12 January 2019, 21 January 2019 - related to all sections on Intrinsic Merit and Fame - ) s
5 500 M
(related to 67,68,69,593) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(--------------) s
5 467 M
(1. Implementations in NeuronRain on Intrinsic Merit Versus Fame previously have so far conc) s
5 456 M
(entrated only on Merit of Text \(TextGraphs\), Large Scale Visuals \(Videos and Images - LSVR\)) s
5 445 M
( and People \(Interview/Examination/Contest based merit, Analytics of Social Network Profile) s
5 434 M
( Vertices\). Merit of Audio or Complexity of Music has been defined theoretically earlier as) s
5 423 M
( a minimum size DFA or Turing Machine accepting musical notes as language which is a minimu) s
5 412 M
(m description length measure similar to Kolmogorov complexity.) s
5 401 M
(2.To this effect music_pattern_mining/AudioToBitMatrix.py has been changed to include a new) s
5 390 M
( function which converts an audio waveform to frequency domain by FFT. These frequencies ar) s
5 379 M
(e in turn mapped to a string of musical notes over octave alphabet - C,D,E,F,G,A,B,C \(12 in) s
5 368 M
(cluding fine divisions of notes denoted by #\) - librosa API are invoked.) s
5 357 M
(3.Essentially by mapping music to huge strings over octave alphabets the problem of music m) s
5 346 M
(ining is made easier and all algorithms implemented for string mining in NeuronRain apply t) s
5 335 M
(o music as well.) s
5 324 M
(4.Since music is often related to creative genius, complexity of string of notes is an appr) s
5 313 M
(oximation of merit.) s
5 302 M
(5.String of musical notes differ from usual text strings because of an inherent periodicity) s
5 291 M
( in music \(self-similar fractal-like ascending and descending sequence of notes\)) s
5 280 M
(6.logs for an example audio to notes string has been committed to python-src/music_pattern_) s
5 269 M
(mining/testlogs/AudioToBitMatrix.log.AudioToNotes.12January2019) s
5 258 M
(7.State machine diagrams for Minimum Turing Machine or DFA accepting languages of strings o) s
5 247 M
(f octave notes) s
5 236 M
(are directed graphs possibly having lots of cycles implying inherent periodicity in music. ) s
5 225 M
(All directed graph complexity measures and algorithms therefore could quantify merit of aud) s
5 214 M
(io or music.) s
5 203 M
(8.Emphasis is laid more on music patterns than audio patterns because audio is simply some ) s
5 192 M
(textual content extractable by speech recognition and spelt out in flat notes of similar fr) s
5 181 M
(equency mostly without modulation excluding emotives.) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(-------------) s
5 137 M
(631. \(THEORY\) Computational Geometric Factorization, Alternative Ray Shooting Algorithm, BQ) s
5 126 M
(P and QNC, Pythagorean Triples, Possibility of decoherence from Quantum NC to Classical PRA) s
5 115 M
(Ms, No cloning theorem - related to 562 and all other sections on factorization - 21 Januar) s
5 104 M
(y 2019) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(-------------) s
5 71 M
(Pythagorean triples are integers of the form a^2 + b^2 = c^2 which can be factorized into p) s
5 60 M
(roduct of) s
5 49 M
(Gaussian Integers \(Z[i]\) as c = \(a+ib\)\(a-ib\) which is a hyperbolic curve defined on complex) s
5 38 M
( number field \(C^2\). This extends integer factorization to complex Gaussian Integers factor) s
5 27 M
(ization of Pythagorean triples. Blum-Shub-Smale Turing Machines can factorize Pythagoren tr) s
5 16 M
(iples to Gaussian Integers. Ray Shooting Query Algorithms so far described previously depen) s
5 5 M
(d on rays from origin \(0,0\) and piercing hyperbolic arc bow at different spacings. Instead ) s
_R
S
%%Page: (393) 393
%%BeginPageSetup
_S
18 36 translate
/pagenum 393 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (393) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(of ray shooting from origin \(0,0\), end points of the hyperbolic arc can be connected by a c) s
5 731 M
(hord \(line between \(0,N\) and \(N,0\)\) and midpoint of this chord is an alternative origin for) s
5 720 M
( ray shooting queries. This inverts the sweepline direction of rays from \(0,0\) to \(N,N\) to ) s
5 709 M
(\(N,N\) to \(0,0\). ) s
5 687 M
(From QNC Computational Geometric Factorization described earlier, hyperbolic pixelated arc ) s
5 676 M
(bow can be specified as a Hilbert Space vector superposition of factor/product states \(ket ) s
5 665 M
(notation\) over complex amplitudes Bi:) s
5 654 M
(        |\(p,q\)> = B1|\(x1,y1\)> + B2|\(x2,y2\)> + ... + Bn|\(xO\(N\),yO\(N\)\)>) s
5 643 M
(and Bi^2 is the classical probability of a state |\(xi,yi\)>. QNC contains polynomial size qu) s
5 632 M
(antum multiplication logdepth toffoli gates while NC has polynomial size logdepth PRAM proc) s
5 621 M
(essors and containment NC in QNC in BQP is known. Quoting reference 562.10 - "...If the HHL) s
5 610 M
( algorithm could be adapted to the case where \(say\) a single bi is 1 and all the others are) s
5 599 M
( 0, then it would contradict the impossibility of an exponential speedup for black-box quan) s
5 588 M
(tum search, which was proved by Bennett, Bernstein, Brassard, and Vazirani...", if classica) s
5 577 M
(l probability Bi^2 of some state |\(xi,yi\)> is 1:) s
5 566 M
(                Bi^2 = \(a+ib\)^2 = \(a^2 - b^2\) + i\(2ab\) = 1) s
5 555 M
(                implying b=0 and |a| = 1) s
5 544 M
(Zero imaginary part in previous sceanario implies a possibility of decoherence from quantum) s
5 533 M
( toffoli gates in QNC to PRAMs in NC. No cloning theorem implies quantum state cannot be re) s
5 522 M
(plicated. But since NC is contained in QNC, every PRAM algorithm in NC can be translated to) s
5 511 M
( a quantum algorithm in QNC. For example any two toffoli multiplication gates in QNC algori) s
5 500 M
(thm for two PRAMs in NC algorithm \(e.g for previous factorization problem allowing decohere) s
5 489 M
(nce\), must have different state superposition vectors v1 and v2 such that v1 has some facto) s
5 478 M
(r state amplitude Bi\(v1\) and v2 has other factor state amplitude Bk\(v2\) of classical probab) s
5 467 M
(ilities 1: Bi\(v1\)^2 = Bk\(v2\)^2 = 1 which does not violate No cloning theorem.) s
5 445 M
(Even if classical probability Bi^2 of some factor state Bi=|\(xi,yi\)> is not 1 but close to ) s
5 434 M
(1 in previous superposition of factor/product states, implying amplitudes of other factor s) s
5 423 M
(tates are non-zero, QNC factorization collapses to a classical BPNC factorization \(e.g. a r) s
5 412 M
(andomized PRAM factorization algorithm\) despite no derandomization to NC. Derandomizing BPN) s
5 401 M
(C to NC has been mentioned previously in references 53.12.1 and 53.12.4 \(Hitting Set Genera) s
5 390 M
(tors\) which does not rule out possibility of a complete collapse of QNC all the way upto NC) s
5 379 M
( via BPNC.) s
5 357 M
(References:) s
5 346 M
(-----------) s
5 335 M
(631.1 Wave Function Collapse and Various Interpretations of QM - https://en.wikipedia.org/w) s
5 324 M
(iki/Wave_function_collapse - Quantum Decoherence is one of the ways to interpret collapse o) s
5 313 M
(f wave function to a classical state) s
5 302 M
(631.2 Computational Meaning of Quantum Gates and Measurement Gates - https://www.fi.muni.cz) s
5 291 M
(/usr/gruska/quantum10f/qc1004.pdf - [Bernstein-Vazirani] Theorem implies for universal quan) s
5 280 M
(tum gates it is sufficient to have real amplitudes) s
5 269 M
(631.3 Measurement Principles of Quantum Gates - http://www-inst.eecs.berkeley.edu/~cs191/sp) s
5 258 M
(12/notes/chap1&2.pdf - Measurement by Phases) s
5 247 M
(631.4 BQP is contained in PP - https://www.cs.cmu.edu/~odonnell/quantum15/lecture23.pdf - B) s
5 236 M
(ounded Error Quantum Polynomial Time computation is contained in Classical Probabilistic Po) s
5 225 M
(lynomial Time computation - Theorem 4.1 - [Adleman-DeMarrais-Huang]. But derandomizing PP t) s
5 214 M
(o P or PP success amplification does not seem to have a parallel to that of BPP success amp) s
5 203 M
(lification. As a special case, hypothetical PP factoring algorithm can be made bounded erro) s
5 192 M
(r by invoking ray shooting query oracles to find approximate factors which bound the failur) s
5 181 M
(e probability and thus bringing factorization to BPP or BPNC \(by parallel ray shooting\) whi) s
5 170 M
(ch can then be derandomized to NC.) s
5 159 M
(631.5 BPP is contained in BQP and Feynman Path Integral Proof of BQP in PP - https://www.sc) s
5 148 M
(ottaaronson.com/democritus/lec10.html - classical coin flip is a quantum Hadamard Gate mapp) s
5 137 M
(ing qubit |0> to 1/sqrt\(2\)\(|0> + |1>\) and qubit |1> to 1/sqrt\(2\)\(|0> - |1>\). Hadamard Gate ) s
5 126 M
(is a Universal Quantum Computation Gate. Combined together Bounded Error Quantum Computatio) s
5 115 M
(n lies between bounded classical 2-sided error and unbounded classical 2-sided error comple) s
5 104 M
(xity classes) s
5 93 M
(631.6 Quantum Hadamard Gate - https://en.wikipedia.org/wiki/Quantum_logic_gate#Hadamard_\(H\)) s
5 82 M
(_gate) s
5 71 M
(631.7 Is Factoring really in BQP? really? - https://rjlipton.wordpress.com/2011/01/23/is-fa) s
5 60 M
(ctoring-really-in-bqp-really/ - "...The problem is that if we press the button again at tim) s
5 49 M
(e {i+1}, we may get a bit that pertains to some other value {y_{i+1}} that is not the same ) s
5 38 M
(as {y_i}. If we could guarantee that repeated taps on {B_1} would stay focused on {y_i} the) s
5 27 M
(n we could apply search-to-decision and recover the function value {y_i}...") s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (394) 394
%%BeginPageSetup
_S
18 36 translate
/pagenum 394 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (394) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(------------) s
5 731 M
(632. \(FEATURE and THEORY\) Intrinsic Merit of Music, Exact Learning of DFAs, Minimum Descrip) s
5 720 M
(tion Length) s
5 709 M
(Merit - 29 January 2019 - related to all sections on Intrinsic Merit and Fame - related to ) s
5 698 M
(67,68,69,593,) s
5 687 M
(630) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(------------) s
5 654 M
(1. New function audio_merit\(\) has been defined in AudioToBitMatrix.py which invokes minimum) s
5 643 M
(_descriptive_complexity\(\) to compute MDL for string of octave notes for a musical clip.) s
5 632 M
(2.Source files MinimumDescLength.py and Entropy.py have been changed to include __main__ an) s
5 621 M
(d rewritten) s
5 610 M
(to define member function minimum_descriptive_complexity\(\) and some other error checks for ) s
5 599 M
(floating point overflow.) s
5 588 M
(3.An example musical MP4 clip excerpt of JS Bach has been analyzed. This masterpiece is fea) s
5 577 M
(tured in Douglas Hofstadter's Godel-Escher-Bach:An Eternal Golden Braid for its self-simila) s
5 566 M
(r strange loops of notes \(a mandelbrot fractal set\)) s
5 555 M
(4.This implementation thus is a culmination of 4 classes of intrinsic merits on Internet an) s
5 544 M
(d WWW - Text, Video, Audio and People - defined in this draft.) s
5 533 M
(5. Following are intrinsic merit implementations in this draft which expand on publications) s
5 522 M
( http://arxiv.org/abs/1006.4458, http://www.nist.gov/tac/publications/2010/participant.pape) s
5 511 M
(rs/CMI_IIT.proceedings.pdf and http://arxiv.org/abs/1106.4102 \(Complement Diophantines are ) s
5 500 M
(intrinsic merit measures too because text obtained by word concatenations can be represente) s
5 489 M
(d by word diophantine equations and can be Ramsey 255-colored by alphabet locations thereby) s
5 478 M
( creating arithmetic progressions\):) s
5 467 M
(        5.1.Textual merit is analyzed by Recursive Gloss Overlap and Recursive Lambda Funct) s
5 456 M
(ion Growth algorithms - Graph Tensor Neuron Network Merit. ) s
5 445 M
(        5.2 People Merit is analyzed by a mixture model of Intrinsic\(Academic/Work/Intervie) s
5 434 M
(w/Contest/Examinations\) and Experiential Mistake Bound Merit by a recursive mistake correct) s
5 423 M
(ion tree differential equation. ) s
5 412 M
(        5.3 Video Merit is analyzed by EventNet/ImageNet Tensor Products Algorithm. ) s
5 401 M
(        5.4 Audio Merit is defined theoretically as complexity of exact learning of DFAs on) s
5 390 M
( strings of notes and their minimization in [Dana Angluin] L* Algorithm Model and implement) s
5 379 M
(ed by a less intensive Minimum Description Length merit on string of notes in this commit. ) s
5 368 M
(Implementation of L* could be exponential and there are PAC learning approximate DFA learni) s
5 357 M
(ng algorithms.) s
5 346 M
(6.Previous algorithms for 4 classes of intrinsic merit are theoretical approximations based) s
5 335 M
( on algorithmic graph theory, causality and logical time in clouds, learning theory and con) s
5 324 M
(nectomes with no invocation of statistical tool and by no means the only way to analyze mer) s
5 313 M
(it but one of them.) s
5 291 M
(References:) s
5 280 M
(-----------) s
5 269 M
(632.1 Hilbert Tenth Problem: What was done and What is to be done - [Yuri Matiyasevich] - h) s
5 258 M
(ttps://books.google.co.in/books?id=qWYbCAAAQBAJ&pg=PA11&lpg=PA11&dq=word+concatenation+diop) s
5 247 M
(hantine&source=bl&ots=zQDO7Jy-kK&sig=ACfU3U1CeZ4WvshXDu62TEIOmb0bofrcbg&hl=en&sa=X&ved=2ahU) s
5 236 M
(KEwjItsyO5JLgAhUSfSsKHZ-NAx8Q6AEwAnoECAQQAQ#v=onepage&q=word%20concatenation%20diophantine&) s
5 225 M
(f=false - "...Under this representation of matrices, concatenation words corresponds to mat) s
5 214 M
(rix multiplication and thus can be easily expressed by a system of diophantine equations ..) s
5 203 M
(.") s
5 192 M
(632.2 The Musical Offering - JS Bach - https://en.wikipedia.org/wiki/The_Musical_Offering) s
5 181 M
(632.3 Godel Escher Bach: An Eternal Golden Braid - [Hofstadter] - Endlessly rising canon - ) s
5 170 M
("...In this canon, Bach has given us our first example of the notion of Strange Loops. The) s
5 159 M
("Strange Loop" phenomenon occurs whenever, by moving upwards \(or downwards\)) s
5 148 M
(through the levels of some hierarchical system, we unexpectedly find ourselves right) s
5 137 M
(back where we started...") s
5 126 M
(632.3 Exact Learning of DFA - Angluin's L* Algorithm - teacher/learner model of membership ) s
5 115 M
(and equivalence queries - http://www.cs.ox.ac.uk/james.worrell/DFA-learning.pdf) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(--------------) s
5 71 M
(633. \(THEORY and FEATURE\) GIS and Urban Planning Analytics, Convex Hull - 31 January 2019) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(--------------) s
5 38 M
(1. ImageGraph_KerasTheano.py has been changed to include a new function for finding convex ) s
5 27 M
(hull of set of) s
5 16 M
(points/pixels in an image) s
5 5 M
(2. QHull ConvexHull\(\) function from SciPy Spatial library - https://docs.scipy.org/doc/scip) s
_R
S
%%Page: (395) 395
%%BeginPageSetup
_S
18 36 translate
/pagenum 395 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (395) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(y/reference/generated/scipy.spatial.ConvexHull.html - has been invoked in the new convex_hu) s
5 731 M
(ll\(\) function defined for this purpose.) s
5 720 M
(3. An example demographic GIS satellite image of Chennai Megapolis \(Population density of U) s
5 709 M
(rban Agglomeration\) from SEDAC website - http://sedac.ciesin.columbia.edu/mapping/popest/gp) s
5 698 M
(w-v4/ - has been analyzed to draw a convex hull around thickly populated regions and convex) s
5 687 M
( hull vertices are printed in terms of some area units \(not sqkm or sqmiles\).) s
5 676 M
(4. OpenCV2 provides api for convex hull too - https://docs.opencv.org/2.4/doc/tutorials/img) s
5 665 M
(proc/shapedescriptors/hull/hull.html) s
5 654 M
(5. Convex Hull analytics of GIS imagery is helpful for Urban planners and sustainable devel) s
5 643 M
(opment.) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(--------------) s
5 599 M
(634. \(FEATURE\) Software Analytics and Scheduler Analytics - Backpropagation correction - 9 ) s
5 588 M
(February 2019) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(--------------) s
5 555 M
(1.DeepLearning_SchedulerAnalytics.py and DeepLearning_SoftwareAnalytics.py have been update) s
5 544 M
(d for) s
5 533 M
(correction to a serious bug in BackPropagation computation.) s
5 522 M
(2.Earlier, BackPropagation Neural Network \(BPNN\) object for Software and Scheduler Analytic) s
5 511 M
(s was getting created for every input training dataset element erroneously.) s
5 500 M
(3.This has been remedied by instantiating BackPropagation class only once outside the loop ) s
5 489 M
(and updating only the input layer and/or expected output layer for each element in input da) s
5 478 M
(taset iteration.) s
5 467 M
(4.Iterations have been curtailed for concise logs.) s
5 456 M
(5.By this change, weights are updated for every psutil per process proc object \(Scheduler A) s
5 445 M
(nalytics\) or systemwide process statistics info \(Software Analytics\) thus learning weights ) s
5 434 M
(of the multilayer perceptron from system performance.) s
5 423 M
(6.logs for this have been committed to testlogs/DeepLearning_SchedulerAnalytics.log.9Februa) s
5 412 M
(ry2019 and testlogs/DeepLearning_SoftwareAnalytics.log.9January2019 \(Timestamped wrongly - ) s
5 401 M
(must be read DeepLearning_SoftwareAnalytics.log.9February2019\)) s
5 390 M
(7.After sufficiently large number of input training data, hopefully this BPNN would be able) s
5 379 M
( to predict outputs from input per-process and systemwide performance statistics data e.g 9) s
5 368 M
(9% load average.) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(------------) s
5 324 M
(635. \(THEORY and FEATURE\) Intrinsic Merit of Texts, Ramsey Theory, Complement Diophantines ) s
5 313 M
(- Ramsey) s
5 302 M
(number of text graph - related to 2,617,630,632 and all sections on Fame and Merit - 11 Feb) s
5 291 M
(ruary 2019) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(------------) s
5 258 M
(1.It has been mentioned earlier that texts which are concatenations of words can be represe) s
5 247 M
(nted by) s
5 236 M
(*\) Matrix Diophantine Equations *\) and \(255 or 511\) coloring of texts by ASCII/Unicode alph) s
5 225 M
(abets \(excluding space\) which give rise to ramsey ordering by Van Der Waerden Theorem assum) s
5 214 M
(ing texts of size N are integer sequences of locations 1-to-N colored by alphabets containi) s
5 203 M
(ng monochromatic arithmetic progressions of alphabet\(color\) locations.) s
5 192 M
(2.Best known upper bound for Van Der Waerden Number for a least length sequence of N intege) s
5 181 M
(rs = W\(r,k\) for r-coloring of an integer sequence and arithmetic progression of least lengt) s
5 170 M
(h k <= 2^2^\(r^2^2^\(k+9\)\) by [Timothy Gowers]) s
5 159 M
(3.Previous upperbound for texts colored by alphabets of size 255 implies size N of a natura) s
5 148 M
(l language text to have length k arithmetic progressions on alphabet locations <= 2^2^\(255^) s
5 137 M
(2^2^\(k+9\)\) which is huge even for small k.) s
5 126 M
(4.Ramsey coloring R\(r,s\) of graphs is equivalent of Van Der Waerden sequence coloring which) s
5 115 M
( defines emergence of monochromatic cliques r or independent sets s \(also known as Friends ) s
5 104 M
(and Strangers theorem\).) s
5 93 M
(5.By definition of complementation in generic sense, k-coloring partitions a set into k dis) s
5 82 M
(joint subsets which can be represented by some diophantine \(e.g Beatty functions\) - Complem) s
5 71 M
(entation is a size 2 partition.) s
5 60 M
(5.In this commit, Ramsey R2 function is invoked from NetworkX API on textgraphs of natural ) s
5 49 M
(language texts and maxclique-maxindependentset pairs are computed.) s
5 38 M
(7.This is a less intensive intrinsic merit measure for a text and Van Der Waerden number co) s
5 27 M
(mputation has no mention in python libraries presently and is daunting too - SAT solvers ar) s
5 16 M
(e used to compute Van Der Waerden Numbers in some algorithms.) s
5 5 M
(8.Following this reasoning, strings of octave alphabets in music can be construed as 12-col) s
_R
S
%%Page: (396) 396
%%BeginPageSetup
_S
18 36 translate
/pagenum 396 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (396) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(oring \(and more including majors and minors\) of music as sequence and indicates inevitable ) s
5 731 M
(emergence of order from chaos.) s
5 709 M
(References:) s
5 698 M
(-----------) s
5 687 M
(635.1 SAT Solver for Van Der Waerden number 1132 = V\(2,6\) - https://www.cs.umd.edu/~gasarch) s
5 676 M
(/TOPICS/vdw/1132.pdf) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(------------) s
5 632 M
(636. \(THEORY\) Computational Geometric Factorization - Parallel Planar Point Location of fac) s
5 621 M
(tors in Monotone Subdivision formed by Hyperbolic Arc Pixel Polygons with no necessity for ) s
5 610 M
(Ray Shooting Queries, Van Der Waerden Ramsey Coloring of Sequences) s
5 599 M
(- related to 506,605 and other sections on factorization - 12 February 2019, 18 February 20) s
5 588 M
(19, 20 February 2019) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(------------) s
5 555 M
(In previous sections on computational geometric factorization, various parallel algorithms ) s
5 544 M
(based on k-mergesort,segment tree, wavelet tree,sorting networks,planar point location and ) s
5 533 M
(ray shooting were described to locate factors on the hyperbolic arc tile segments \(or\) pixe) s
5 522 M
(l array polygons. A continuous hyperbolic curve is "rectified" to a chain of non-intersecti) s
5 511 M
(ng polygons \(juxtaposed\) by considering each tile segment \(x, N/x, x+1, N/x\) of hyperbola o) s
5 500 M
(btained by differential calculus identity delta=N/[x\(x+1\)] as a rectangular polygon of dime) s
5 489 M
(nsion 1 * N/[x\(x+1\)] which is an array of pixels of dimension 1 * 1 containing the product ) s
5 478 M
(of x and y ordinates in arithmetic progression and thus implicitly sorted. These adjoining ) s
5 467 M
(rectangular polygons which meet at endpoints, create a plain simple line graph formed by th) s
5 456 M
(eir vertices and edges which is strongly connected. This set of polygons partition the 2 di) s
5 445 M
(mensional plane of area \(1,N\)*\(1,N\) into 3 planar subdivisions - space above hyperbolic pol) s
5 434 M
(ygons, space within the hyperbolic polygons and space below hyperbolic polygons. Earlier al) s
5 423 M
(gorithms assumed arbitrary subdivisions and had ray shooting to find a polygon containing a) s
5 412 M
(pproximate factor as a prerequisite which is then binary searched. But this chain of hyperb) s
5 401 M
(olic tile polygons is monotone because y-axis is strictly decreasing or non-increasing for ) s
5 390 M
(any path along the plain simple line graph \(PSLG\) formed by hyperbolic polygonal planar sub) s
5 379 M
(division. There are efficient algorithms for PRAM geometric searching of monotone subdivisi) s
5 368 M
(ons mentioned in references below. Thus locating a hyperbolic pixel array polygon containin) s
5 357 M
(g factor point can be done in O\(logN\) PRAM time and finding the factor in this polygon by s) s
5 346 M
(equential binary search in additional O\(logN\) sequential time. Thus factorization by planar) s
5 335 M
( point location in monotone subdivision of hyperbolic pixel array polygons is in O\(logN\) pa) s
5 324 M
(rallel + O\(logN\) sequential time - and thus in Nick's class - without requirement of approx) s
5 313 M
(imate factoring by ray shooting queries.) s
5 291 M
(Arithmetic Progression of points as product of ordinates within each Hyperbolic pixel array) s
5 280 M
( polygon brings Ramsey/Van Der Waerden coloring of sequences into the realm of factorizatio) s
5 269 M
(n - by k-mergesort the tile segement polygons are unified into single totally ordered integ) s
5 258 M
(er sequence of length N*N/\(N+1\). If each arithmetic progression polygon is colored uniquely) s
5 247 M
(, the sorted sequence is a union of set of k-colored arithmetic progressions of some minimu) s
5 236 M
(m length \(or\) N*N/\(N+1\) = VanDerWaerden\(k, minimum length of a segment\)) s
5 214 M
(In all sections related to factorization in this draft, factoring only one integer at a tim) s
5 203 M
(e has been the focus. Geometric intuition of hyperbolic tile/polygon segmentation allows st) s
5 192 M
(oring segments or polygons for hyperbolic curves of multiple integers in same datastructure) s
5 181 M
( which could be segment tree, wavelet tree, or point location tree. For example two rectifi) s
5 170 M
(ed hyperbolic polygons/segments for xy=N1 and xy=N2 for factoring N1 and N2 can be stored i) s
5 159 M
(n single search tree which can be queried for factor points of N1 and N2 independently. Thi) s
5 148 M
(s optimization saves lot of parallel tree construction time and space.) s
5 126 M
(References:) s
5 115 M
(----------) s
5 104 M
(636.1 Parallel Planar Point Location for Monotone Subdivisions - https://www.csun.edu/~ctot) s
5 93 M
(h/Handbook/chap46.pdf - Table 46.5.1 - Parallel Point location in monotone subdivision by E) s
5 82 M
(REW PRAM in O\(log n\) time, O\(n\) parallel work - Reference [TV91] in 636.2) s
5 71 M
(636.2 Parallel transitive closure and point location in planar structures - Lemma 4.8 - [Ta) s
5 60 M
(massia-Vitter] - http://www.ittc.ku.edu/~jsv/Papers/TaV91.transclosure.ps.gz) s
5 49 M
(636.3 Computational Geometry - [Preparata-Shamos] - Point Location - Section 2.2 - https://) s
5 38 M
(books.google.co.in/books?id=_p3eBwAAQBAJ&printsec=frontcover#v=onepage&q=point%20location&f) s
5 27 M
(=false) s
5 16 M
(636.4 Point Location in Successive Convex Hulls - [Greenlaw-Hoover-Ruzzo] - List of P-Compl) s
5 5 M
(ete Parallel RAM Problems - A.9.5 - https://homes.cs.washington.edu/~ruzzo/papers/limits.pd) s
_R
S
%%Page: (397) 397
%%BeginPageSetup
_S
18 36 translate
/pagenum 397 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (397) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(f - Given a point on 2D Plane, is the point in k-th remaining convex hull after finding and) s
5 731 M
( removing convex hulls repetitively? - Previous monotone chain of hyperbolic pixel array po) s
5 720 M
(lygons are successive convex hulls containing respective tile segment points) s
5 709 M
(636.5 CREW Parallel RAM Version of Kirkpatrick's Planar Point Location - Chapter 5 - Some P) s
5 698 M
(arallel Geometric Algorithms - Section 3 - https://books.google.co.in/books?id=ThBR22HOjMcC) s
5 687 M
(&pg=PA85&lpg=PA85&dq=parallel+planar+point+location&source=bl&ots=jFBpEv60Ab&sig=ACfU3U1fff) s
5 676 M
(e1j5o-w6GWnZHKxAsW0iaU_A&hl=en&sa=X&ved=2ahUKEwik4uHr9cTgAhUDBIgKHRDlAwc4FBDoATAFegQICRAB#v) s
5 665 M
(=onepage&q=parallel%20planar%20point%20location&f=false - Kirkpatrick's decomposition trian) s
5 654 M
(gulates a Planar Straight Line Graph \(plain simple line graph or PSLG\) e.g PSLG of Hyperbol) s
5 643 M
(ic arc pixel array polygons previously described for factorization. CREW PRAM Version of th) s
5 632 M
(is triangulation algorithm is O\(\(logN\)^k\) parallel time and O\(logN\) sequential query time b) s
5 621 M
(ut requires O\(N\) processors.) s
5 610 M
(636.6 Parallel Planar Point Location by Parallel Construction of Subdivision Hierarchies - ) s
5 599 M
([N. DADOUN AND D. G. KIRKPATRICK] -https://ac.els-cdn.com/0022000089900421/1-s2.0-002200008) s
5 588 M
(9900421-main.pdf?_tid=c9b3fe06-f5de-4038-a511-1e201f91edc8&acdnat=1550480942_c4eea646a5bb64) s
5 577 M
(a5444edc195ca6743d - "...It is worth noting that Atallah and Goodrich [AG] use the parallel) s
5 566 M
( plane sweep technique to perform planar point location with O\(log n log log n\) parallel pr) s
5 555 M
(eprocessing, O\(n log n\) space and O\(log n\) sequential query time. The subdivision hierarchy) s
5 544 M
( technique uses 0\(\(log n\)^2\) parallel preprocessing \(O\(log n log* n\) for convex subdivision) s
5 533 M
(s\), O\(n\) space and O\(log n\) sequential query time. ...") s
5 522 M
(636.7 Parallel Planar Point Location by Parallel Construction of Plane Sweep Tree - [Atalla) s
5 511 M
(h and Goodrich] - https://docs.lib.purdue.edu/cgi/viewcontent.cgi?referer=https://www.googl) s
5 500 M
(e.com/&httpsredir=1&article=1481&context=cstech - Theorem 3.12 and Table 1 - Summary of Res) s
5 489 M
(ults in the end - "...Given a planar subdivision S consisting of n edges, we can construct ) s
5 478 M
(in parallel) s
5 467 M
(a data structure which, once constructed, enables one processor to determine for any query ) s
5 456 M
(point) s
5 445 M
(p the face in S containing p in O\(logn\) time. The construction takes O\(lognloglogn\) time an) s
5 434 M
(d) s
5 423 M
(O\(nlogn\) space using O\(n\) processors on a CREW PRAM...." - It has to be observed that PSLG ) s
5 412 M
(from Hyperbolic arc pixel array polygonal rectification is the simplest form of its kind co) s
5 401 M
(ntaining O\(N\) rectangular faces and <= 4*N edges, 4 per rectangle.) s
5 390 M
(636.8 List of Problems in NC and Drawbacks of NC Theory - http://pages.cs.wisc.edu/~tvrdik/) s
5 379 M
(3/html/Section3.html - Parallel sorting and most of Computational Geometric Problems are in) s
5 368 M
( NC - "...The class NC may include some algorithms which are not efficiently parallelizable) s
5 357 M
(. The most infamous example is parallel binary search...NC theory assumes situations where ) s
5 346 M
(a huge machine \(polynomial number of processors, e.g., millions\) solves very quickly \(polyl) s
5 335 M
(ogarithmic time, e.g., seconds\) moderately sized problems \(e.g., hundred of thousands input) s
5 324 M
( items\). In practice, however, moderately sized machines \(hundreds, at most thousands of pr) s
5 313 M
(ocessors\) are used to solve large problems \(e.g., millions of input items\). So that the num) s
5 302 M
(ber of processors tends to be subpolynomial, even sublinear...." - This practical limitatio) s
5 291 M
(n of NC applies to computational geometric factorization by planar point location especiall) s
5 280 M
(y when huge integers e.g semiprimes of the order of 1024 bits or more in public key infrast) s
5 269 M
(ructure have to be factorized. This requires huge number of processors \(PRAMs\) but yet theo) s
5 258 M
(retically highly parallelly feasible. Precision ray shooting queries optimization like tile) s
5 247 M
(-summation ray shooting sieves out lot of factorless segments of hyperbolic arc bow finding) s
5 236 M
( approximate factors which are in proximity to exact factors and with high probability in s) s
5 225 M
(ame polygon/segment facilitating binary search of arithmetic progression.If a ray shooting ) s
5 214 M
(query followed by binary search fails to find exact factor, angle of the ray can be altered) s
5 203 M
( in either direction and shot again covering unswept areas of the plane. Ray shooting parti) s
5 192 M
(tions the hyperbolic arc into O\(N/loglogN\) segments for O\(loglogN\) prime factor ray queries) s
5 181 M
(.) s
5 170 M
(636.9 NC1 and L - Theorem 3.5 - https://cse.buffalo.edu/~regan/papers/pdf/ALRch27.pdf - [Er) s
5 159 M
(ic Allender,Rutgers University,Michael C. Loui,University of Illinois at Urbana-Champaign,K) s
5 148 M
(enneth W. Regan,State University of New York at Buffalo] - O\(logN\) Parallel Planar Point Lo) s
5 137 M
(cation time implies complexity class NC^1 which is contained in deterministic logspace clas) s
5 126 M
(s L. This is quite counterintuitive because despite prohibitively high number of PRAMs even) s
5 115 M
( if simulated by BSP, space required for computational geometric factorization is logarithm) s
5 104 M
(ic.) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(-------------) s
5 60 M
(637. \(FEATURE\) NeuronRain Usecases - Analytics Piloted Drone Online Shopping Delivery - 25 ) s
5 49 M
(February 2019) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(-------------) s
5 16 M
(1.This commit creates a new NeuronRainApps/ directory in python-src/ for illustrating useca) s
5 5 M
(ses defined in asfer-docs/NeuronRainUsecases.txt) s
_R
S
%%Page: (398) 398
%%BeginPageSetup
_S
18 36 translate
/pagenum 398 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (398) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(2.An unmanned aerial vehicle usecase is implemented by a pseudocode in NeuronRainApps/Drone) s
5 731 M
(s/OnlineShoppingDelivery.py) s
5 720 M
(3.Following static mission plan example from DronecodeSDK has been changed to OnlineShoppin) s
5 709 M
(gDelivery.py:) s
5 698 M
(        3.1 Example Drone Mission - https://github.com/Dronecode/DronecodeSDK-Python/blob/m) s
5 687 M
(aster/examples/mission.py) s
5 676 M
(        3.2 Drone MissionItem Proto - https://github.com/Dronecode/DronecodeSDK-Proto/blob/) s
5 665 M
(a54b353d73ff8d6e36c716b5278990e0f8cb770c/protos/mission/mission.proto) s
5 654 M
(4.Dynamic Mission Plan: Autopilots the UAV drone based on GIS analytics navigation variable) s
5 643 M
(s ) s
5 632 M
(- e.g. longitude, latitude, altitude, speed, camera action etc., -) s
5 621 M
(read by Streaming Abstract Generator socket streaming and appends MissionItems to) s
5 610 M
(flight plan dynamically restricted by ordinates convex hull. Convex Hull for a terrain imag) s
5 599 M
(e is obtained from ImageNet/ImageGraph_Keras_Theano.py. When drone is within convex hull ai) s
5 588 M
(rspace, its altitude is set to 0 \(or minimal value\) and landed) s
5 577 M
(5.Dynamic flight trajectory remote-controlled by analytics are applicable to online shoppin) s
5 566 M
(g deliveries  when multiple courier items have to be delivered en route which is NP-Hard Ha) s
5 555 M
(miltonian problem - Finding most optimal shortest tour from origin, through intermediate de) s
5 544 M
(livery point vertices and back to origin) s
5 533 M
(6.This is not compileable, executable code but only a pseudocode and has not been tested on) s
5 522 M
( a drone because of lack of it and aviation licensing requirements) s
5 500 M
(References:) s
5 489 M
(----------) s
5 478 M
(637.1 GIS and Drones - https://www.itu.int/en/ITU-D/Regional-Presence/AsiaPacific/SiteAsset) s
5 467 M
(s/Pages/Events/2018/Drones-in-agriculture/asptraining/A_Session1_Intro-to-Drones-RS-GIS.pdf) s
5 456 M
( - GIS Image Classification, Rasters and Layers) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(-------------) s
5 412 M
(638.\(FEATURE\) Software Analytics - Scheduler Analytics - /etc/sysctl.conf kernel.sched_* op) s
5 401 M
(tional) s
5 390 M
(clause - 25 February 2019) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-------------) s
5 357 M
(1.DeepLearning_SchedulerAnalytics.py has been changed to include new clause for writing sys) s
5 346 M
(ctl.conf kernel.sched_* variables instead of scheduler classes within learnt_scheduler_clas) s
5 335 M
(s\(\) based on output layer of BackPropagation Neural Network\(BPNN\)) s
5 324 M
(2.These variables are documented in:) s
5 313 M
(        2.1 https://www.kernel.org/doc/Documentation/scheduler/) s
5 302 M
(        2.2 https://doc.opensuse.org/documentation/leap/tuning/html/book.sle.tuning/cha.tun) s
5 291 M
(ing.taskscheduler.html) s
5 280 M
(3.Different values of kernel.sched_* are returned based on numpy mean of output layer of BP) s
5 269 M
(NN. For example:) s
5 258 M
(["kernel.sched_latency_ns=9000000",) s
5 247 M
( "kernel.sched_migration_cost_ns=100000",) s
5 236 M
( "kernel.sched_wakeup_granularity_ns=2000000",) s
5 225 M
( "kernel.rr_timeslice_ms=10",) s
5 214 M
( "sched_rt_runtime_us=990000",) s
5 203 M
( "sched_nr_migrate=12",) s
5 192 M
( "sched_time_avg_ms=100"]) s
5 181 M
(which increase CPU affinity of a process, its timeslice quantum and reduce cost of CPU load) s
5 170 M
(balancing and migration if it is CPU-intensive.) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(------------) s
5 126 M
(639.\(FEATURE\) Software Analytics - Scheduler Analytics - /proc/sched_debug support - 27 Feb) s
5 115 M
(ruary 2019) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(------------) s
5 82 M
(1.Missing kernel prefix for some of the /etc/sysctl.conf variables have been included in re) s
5 71 M
(turn array.) s
5 60 M
(2./proc/sched_debug support has been included by defining a new function to read /proc/sche) s
5 49 M
(d_debug and) s
5 38 M
(print the red-black tree of the Complete Fair Scheduler \(CFS\) [https://elixir.bootlin.com/l) s
5 27 M
(inux/v3.2/source/kernel/sched_fair.c] runqueue for user defined iterations in a loop - read) s
5 16 M
(s the /proc/sched_debug periodically, reverses the list of lines to print the tail.) s
5 5 M
(3./proc/sched_debug is a convenient alternative to BCC tools runqlat) s
_R
S
%%Page: (399) 399
%%BeginPageSetup
_S
18 36 translate
/pagenum 399 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (399) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(4.Kernel CFS chooses the root of the red-black tree which has least virtual runtime to sche) s
5 731 M
(dule it to run on CPU thereby prioritizing and fairly treating starved processes.) s
5 720 M
(5.Tree Key field is the virtual runtime of the process id - Example below prints runqueue a) s
5 709 M
(t any instant for a CPU:) s
5 687 M
(runnable tasks:) s
5 676 M
(            task   PID         tree-key  switches  prio     exec-runtime         sum-exec  ) s
5 665 M
(      sum-sleep) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(---------------) s
5 632 M
(        metacity  2709   2070924.605059   1155243   120   2070924.605059    104482.007672  ) s
5 621 M
(13723394.606366 /autogroup-149) s
5 610 M
(  unity-2d-panel  2724   2070927.500112    232355   120   2070927.500112     58204.926440  ) s
5 599 M
(14229127.111319 /autogroup-149) s
5 588 M
(  gnome-terminal  3049   2070927.622210     59498   120   2070927.622210     22064.526687  ) s
5 577 M
(14285212.740904 /autogroup-149) s
5 566 M
(R            cat  7834    612871.102038         1   120    612871.102038         2.269097  ) s
5 555 M
(       0.000000 /autogroup-153) s
5 533 M
(6.Logs for this have been committed to testlogs/DeepLearning_SchedulerAnalytics.log.27Febru) s
5 522 M
(ary2019) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-------------) s
5 478 M
(640.\(FEATUE\) Software Analytics - Streaming Analytics + Scheduler Analytics - /proc/sched_d) s
5 467 M
(ebug -) s
5 456 M
(28 February 2019) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(-------------) s
5 423 M
(1.DeepLearning_SchedulerAnalytics.py - sched_debug_runqueue\(\) has been changed to return a ) s
5 412 M
(dictionary) s
5 401 M
(of process runqueue and loop has been removed) s
5 390 M
(2.Streaming Analytics support has been provided for Operating System performance statistics) s
5 379 M
( \(e.g runqueue\) by adding new data_storage "OperatingSystem" and data_source "SchedulerRunQ) s
5 368 M
(ueue" to Streaming_AbstractGenerator.py) s
5 357 M
(3.New clause for previous Scheduler Analytics streaming has been added in __iter__\(\) which ) s
5 346 M
(invokes) s
5 335 M
(sched_debug_runqueue\(\) in a loop and yields the scheduler runqueue dictionaries.) s
5 324 M
(4.This integrates Streaming and Software Analytics seamlessly and any Streaming or other ma) s
5 313 M
(chine learning algorithm can process Operating System Stats Dictionary Stream like a bigdat) s
5 302 M
(a source. ) s
5 291 M
(5.DeepLearning_SchedulerAnalytics.py imports this Streaming Abstract Generator by "Operatin) s
5 280 M
(gSystem" and "SchedulerRunQueue" parameters and reads the scheduler stats as input stream.) s
5 269 M
(6.In future, any operating system data source other than scheduler runqueue can be plugged ) s
5 258 M
(into Streaming Abstract Generator iterable and fulfils the foremost requirement for real ti) s
5 247 M
(me software streaming analytics.) s
5 225 M
(References:) s
5 214 M
(-----------) s
5 203 M
(640.1 Load Averages - /proc/loadavg versus /proc/sched_debug - http://www.brendangregg.com/) s
5 192 M
(blog/2017-08-08/linux-load-averages.html - Linux load averages include uninterrutible IO ta) s
5 181 M
(sks too apart from CPU load.) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(-------------) s
5 137 M
(641.\(THEORY\) Word Diophantine Equations, Intrinsic Merit defined by Word Equations - 4 Marc) s
5 126 M
(h 2019 -) s
5 115 M
(related to 635 and all sections on Merit and Complement Diophantines) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(-------------) s
5 82 M
(Throughout this draft intrinsic merit of text has been analyzed by results from algorithmic) s
5 71 M
( graph theory and dense subgraph complexity measures. Renowned Word Problem in computabilit) s
5 60 M
(y encodes every word from an alphabet into an equation. In the context of World Wide Web, C) s
5 49 M
(oncatenations of words form a text. This leads to concatenation representation of word equa) s
5 38 M
(tions of text by Diophantines. This kind of word equation representation is not just limite) s
5 27 M
(d to text but to other genre of merits - audio/music, video, social profiles of people enco) s
5 16 M
(ded as words over binary alphabet - as well. Thus Diophantine representation unifies all 4 ) s
5 5 M
(classes of merit - text, audio/music, video, people - into one thereby facilitating number ) s
_R
S
%%Page: (400) 400
%%BeginPageSetup
_S
18 36 translate
/pagenum 400 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (400) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(theoretic analysis of merit drastically different from graph theoretic perspective earlier:) s
5 731 M
(        \(*\) Text - Text Graphs -> Text Word Equation Diophantines) s
5 720 M
(        \(*\) Video - EventNet Tensor Products -> Binary encoded Video Word Equation Diophant) s
5 709 M
(ines) s
5 698 M
(        \(*\) Audio/Music - DFA Learning -> Binary encoded Audio/Music Word Equation Diophant) s
5 687 M
(ines) s
5 676 M
(        \(*\) People - Mistake Bound Experiential Learning Merit and Social Profile Analytics) s
5 665 M
( -> Binary encoded social profile Word Equation Diophantines) s
5 643 M
(Decidability of Hilbert's Tenth Problem is still open for solutions to Word Diophantine Equ) s
5 632 M
(ations. Diophantine Word Equations can enforce arbitrary number of conditions on the soluti) s
5 621 M
(ons e.g length of words.Solutions to a Word Diophantine Equation - text, audio/music, video) s
5 610 M
(, people - are kind of unsupervised classifiers which cluster similar texts, audio/music, v) s
5 599 M
(ideo and people. For example, Complement Word Equation Diophantines bifurcate the set of te) s
5 588 M
(xts, audio/music, video and people.) s
5 566 M
(References:) s
5 555 M
(------------) s
5 544 M
(641.1 Word Equations, Fibonacci Numbers, and Hilbert\342\\200\\231s Tenth Problem - [Yuri Matiya) s
5 533 M
(sevich] - Steklov Institute of Mathematics at Saint-Petersburg, 27 Fontanka, Saint-Petersbu) s
5 522 M
(rg, 191023, Russia - URL: http://logic.pdmi.ras.ru/~yumat - https://logic.pdmi.ras.ru/~yuma) s
5 511 M
(t/talks/turku2006/FibonacciWordsAbstract.pdf.gz - "...Every word X = \317\\207n \317\\207n\342\\210\\222) s
5 500 M
(1 . . . \317\\2071 in the alphabet B can be viewed as the number x = \317\\207n un + \317\\207n\342\\210) s
5 489 M
(\\2221 un\342\\210\\2221 + \302\267 \302\267 \302\267 + \317\\2071 u1 \(1\) written in positional system with weights of ) s
5 478 M
(digits being the Fibonacci numbers u1 = 1, u2 = 1, u3 = 2, u4 = 3, u5 = 5, . . . \(rather th) s
5 467 M
(an traditional 1, 2,) s
5 456 M
(4, 8, 16, . . . \)....") s
5 445 M
(641.2 Collected works of Richard J.Buchi - https://books.google.co.in/books?id=9BfvAAAAMAAJ) s
5 434 M
(&q=inauthor:%22J.+Richard+B%C3%BCchi%22&dq=inauthor:%22J.+Richard+B%C3%BCchi%22&hl=en&sa=X&) s
5 423 M
(ved=0ahUKEwio19KMhejgAhXEfXAKHW6tB7oQ6AEIKjAA - Every existential formula in concatenation ) s
5 412 M
(is Diophantine) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(------------) s
5 368 M
(642. \(FEATURE\) Merit of Audio/Music - Music Synthesizer from Random samples and State Machi) s
5 357 M
(ne - 5 March 2019) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(------------) s
5 324 M
(1.New function notes_to_audio\(\) has been implemented in music_pattern_mining/AudioToBitMatr) s
5 313 M
(ix.py) s
5 302 M
(2.It creates a .wav file from random Scipy array or traverses a finite state machine to cre) s
5 291 M
(ate a stream of notes in CDEFGABC notation which are translated to integer array of frequen) s
5 280 M
(cies in hertz) s
5 269 M
(3.Scipy.io.wavefile.write\(\) is invoked to write out this ndarray to a .wav file of sampling) s
5 258 M
( rate 44100) s
5 247 M
(4.Finite state machine has been implemented simply in a dictionary and supports quasi-non-d) s
5 236 M
(eterminism \(array of possible previous states\)) s
5 225 M
(5.Two .wav files automaton_synthesized_music.wav and notes_synthesized_music.wav are writte) s
5 214 M
(n for the two clauses: automaton or notes array) s
5 203 M
(6.logs for synthesizer have been committed to testlogs/AudioToBitMatrix.log.MusicSynthesize) s
5 192 M
(r.5March2019) s
5 181 M
(7.It is pertinent to mention here that Stanford Music Information Retrieval at https://musi) s
5 170 M
(cinformationretrieval.com/genre_recognition.html does a statistical genre recognition of mu) s
5 159 M
(sic as opposed to automata theoretic analysis in NeuronRain) s
5 148 M
(8.State machine has been hardcoded presently which have to be read from file and literal_ev) s
5 137 M
(al\(\)-ed.) s
5 115 M
(-------------------------------------------------------------------------------------------) s
5 104 M
(-------------) s
5 93 M
(643. \(FEATURE\) Merit of Audio/Music - Music Synthesizer - Music from mathematical functions) s
5 82 M
( - 6 March 2019) s
5 71 M
(-------------------------------------------------------------------------------------------) s
5 60 M
(-------------) s
5 49 M
(1.New clause has been added to notes_to_audio\(\) for synthesizing music from values of any m) s
5 38 M
(athematical function ) s
5 27 M
(2.Function expression string is eval\(\)-ed in a lambda function and applied to a list of ran) s
5 16 M
(ge values of variable x by map\(\) and a wave file function_synthesized_music.wav is written ) s
5 5 M
(to.) s
_R
S
%%Page: (401) 401
%%BeginPageSetup
_S
18 36 translate
/pagenum 401 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (401) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(3.Error in prevstates has been corrected by prevprevstates and resetting prevstates for eac) s
5 731 M
(h state transition for an alphabet.) s
5 720 M
(4.Logs for this have been committed to testlogs/AudioToBitMatrix.log.MusicSynthesizer.6Marc) s
5 709 M
(h2019) s
5 698 M
(5.The wave files do not play any human palatable music and are representative only.) s
5 687 M
(6.Infact learning the right DFA \(or in general a mathematical function\) for language of mus) s
5 676 M
(ic is the exact opposite of the previous and is measure of merit.) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(------------) s
5 632 M
(644. \(FEATURE\) Intrinsic Merit of Audio/Music - Mel Frequency Cepstral Coefficients - 11 Ma) s
5 621 M
(rch 2019) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(------------) s
5 588 M
(1.New function for Mel Frequency Cepstral Coefficients \(MFCCs\) of a music audio clip \(invok) s
5 577 M
(es librosa\) has been added in this commit. ) s
5 566 M
(2.MFCCs are kind of spectra of spectra of an audio waveform and have been widely used for s) s
5 555 M
(peech recognition and music genre identification.) s
5 544 M
(3.logs for example MFCCs of a music file are committed to testlogs/AudioToBitMatrix.log.MFC) s
5 533 M
(C.11March2019) s
5 511 M
(References:) s
5 500 M
(-----------) s
5 489 M
(644.1 Stanford MIR - https://musicinformationretrieval.com/mfcc.html) s
5 478 M
(644.2 MFCCs for Music Modelling - http://musicweb.ucsd.edu/~sdubnov/CATbox/Reader/logan00me) s
5 467 M
(l.pdf) s
5 456 M
(644.3 Music Emotion Recognition \(MER\): The combined evidence of MFCC and residual phase - [) s
5 445 M
(NJ Nalini , S Palanivel] - Dept of Computer Science and Engineering, Annamalai University, ) s
5 434 M
(Tamil Nadu 608002, India - https://www.sciencedirect.com/science/article/pii/S1110866515000) s
5 423 M
(419) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(-------------) s
5 379 M
(645. \(THEORY\) Comparing Partitions - Related to 620 and all sections on Majority Voting, Th) s
5 368 M
(eoretical EVMs, Separate Chaining Hashtable/LSH Set Partitions, Integer Partitions, Complem) s
5 357 M
(entary Sets and Diophantines, Streaming Histogram/Dictionary Analytics, People Analytics, S) s
5 346 M
(oftware Analytics, Business Analytics - 15 March 2019) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-------------) s
5 313 M
(Previous sections deeply delve into the ubiquitous isomorphism between integer/set partitio) s
5 302 M
(ns and set partitions, particularly those induced by hash table separate chaining buckets. ) s
5 291 M
(A Theoretical EVM has been formulated having separate chaining partition as basis which is ) s
5 280 M
(an encrypted set partition of electorate into candidate buckets. Drawing analytic inference) s
5 269 M
(s from stream of set partitions has been hitherto a far less researched bigdata topic and a) s
5 258 M
(pplies to whole gamut of theory and analytics - For example:) s
5 247 M
(        \(*\) Business Analytics - Customer base intelligence is often represented as dynamic) s
5 236 M
( stream of histogram set partitions or probability distributions of product influences. Has) s
5 225 M
(htable separate chaining can be picturised as histogram of buckets of hashed items) s
5 214 M
(        \(*\) People Analytics - Stream of voting patterns in Theoretical EVMs are dynamicall) s
5 203 M
(y changing set partitions of electorate - vote shares in Psephology) s
5 192 M
(        \(*\) Scheduler Queuing Analytics in Operating Systems - an example hashtable based t) s
5 181 M
(imeout is described in https://github.com/shrinivaasanka/Grafit/blob/master/course_material) s
5 170 M
(/NeuronRain/AdvancedComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLear) s
5 159 M
(ning.txt - finding patterns in stream of scheduler timeout hashtable queues) s
5 148 M
(        \(*\) Music Spectrograms are streams of Histograms) s
5 137 M
(        \(*\) Theoretically set partitions are complementary sets or exact cover of a univers) s
5 126 M
(al set.) s
5 104 M
(Comparing any two set partitions thus far has few standard measures \(rooted in comparing tw) s
5 93 M
(o cluster partitions created by supervised or unsupervised classifiers\) like Rand Index \(RI) s
5 82 M
(\), Adjusted Rand Index etc., \(ARI\) which compute distance between partitions as ratio of ag) s
5 71 M
(reements to disagreements by measuring overlaps. For a stream of set partitions \(which coul) s
5 60 M
(d be any of the above\), Rand Index or Adjusted Rand Index between two consecutive partition) s
5 49 M
(s in the stream themselves create another stream of scalar indices which are easier to inte) s
5 38 M
(rpret. In people analytics or business analytics example above, highly fluctuating stream o) s
5 27 M
(f rand indices for voting or customer histogram patterns is a measure of disarray in voting) s
5 16 M
( and consumers and points to a state of flux whereas a periodic or steady state of stream o) s
5 5 M
(f rand indices indicates voters and consumers have limited options or are content with stat) s
_R
S
%%Page: (402) 402
%%BeginPageSetup
_S
18 36 translate
/pagenum 402 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (402) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(us quo. Similarly a chaotic stream of rand indices for Scheduler implies a heavily thrashed) s
5 731 M
( system.) s
5 709 M
(Theoretically, rand indices define distance metric between two complementary sets and there) s
5 698 M
(fore diophantines \(e.g beatty functions for size two partition\) defined on them - in other ) s
5 687 M
(words, diophantines are embedded in a metric space by rand index distance metric \(similar t) s
5 676 M
(o Reproducing Kernel Hilbert Space of Functions mentioned in 624.14\).) s
5 654 M
(References:) s
5 643 M
(-----------) s
5 632 M
(645.1 Comparing Partitions - Journal of Classification 2:193-218 \(1985\) - Springer-Verlag N) s
5 621 M
(ew York Inc. ) s
5 610 M
(- [Lawrence Hubert ,The University of California, Santa Barbara - Phipps Arabie, University) s
5 599 M
( of Illinois at Champaign] - https://link.springer.com/article/10.1007/BF01908075) s
5 588 M
(645.2 Adjusted Rand Index - https://en.wikipedia.org/wiki/Rand_index#Adjusted_Rand_index) s
5 566 M
(-------------------------------------------------------------------------------------------) s
5 555 M
(--------------) s
5 544 M
(646. \(THEORY\) Complementary Equations, Spectra of Numbers, Complementary Integer Sequences ) s
5 533 M
(- related to 645 and all sections on Complement Functions, Complementary Sets and Diophanti) s
5 522 M
(nes - 16 March 2019) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(--------------) s
5 489 M
(Increasing sequences which partition set of natural integers are known as complementary seq) s
5 478 M
(uences and equations which define both of them are complementary equations. This definition) s
5 467 M
( of complementary equations differs technically from complement functions which are diophan) s
5 456 M
(tine equation representations of either a set or its complement and not both at once. OEIS ) s
5 445 M
(sequences b\(n\)=A005228 and a\(n\)=A030124 are complementary and both are defined simultaneous) s
5 434 M
(ly by complementary equation b\(n\) = a\(n \342\\210\\222 1\) + b\(n \342\\210\\222 1\)) s
5 412 M
(Spectra of numbers are integer sequences and defined in terms of rounding off set of real m) s
5 401 M
(ultiples to nearest integers. For example:) s
5 390 M
(        If r is a positive real number, spectra of r = S\(r\) = { [r],[2r],[3r],...} and [x] ) s
5 379 M
(is the nearest) s
5 368 M
(integer <= x.) s
5 346 M
(There are some special qualities of Spectra of integers - e.g. Spectra of any three real nu) s
5 335 M
(mbers S[r1],S[r2],S[r3] have some pairs which have infinitely many elements in common and t) s
5 324 M
(hus cannot be complementary and thus is a prima facie condition for feasibility of compleme) s
5 313 M
(ntation.) s
5 291 M
(References:) s
5 280 M
(----------) s
5 269 M
(646.1 Complementary Equations - Example 3 - [Journal of Integer Sequences, Vol. 10 \(2007\),C) s
5 258 M
(lark Kimberling,Department of Mathematics,University of Evansville,1800 Lincoln Avenue,Evan) s
5 247 M
(sville, IN 47722,USA] - https://cs.uwaterloo.ca/journals/JIS/VOL10/Kimberling/kimberling26.) s
5 236 M
(pdf) s
5 225 M
(646.2 Complementarity in Philosophy - Dualism - Taichi - Yin-Yang \(Dark-Bright\) - https://e) s
5 214 M
(n.wikipedia.org/wiki/Yin_and_yang) s
5 203 M
(646.3 OEIS - Hofstadter Sequence - https://oeis.org/A005228) s
5 192 M
(646.4 OEIS - Complement of Hofstadter Sequence - https://oeis.org/A030124) s
5 181 M
(646.5 Spectra of Integers - [Graham-Lin-Lin] - https://www.jstor.org/stable/2689998?seq=1#p) s
5 170 M
(age_scan_tab_contents) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(--------------) s
5 126 M
(647. \(THEORY and FEATURE\) Bounded Error Factorization \(Approximate Factors\), Ray Shooting Q) s
5 115 M
(ueries, Transition from Quantum to Classical Computation, Derandomization - related to 597,) s
5 104 M
(631 - 21 March 2019, 2 August 2019) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(--------------) s
5 71 M
(In Computational Geometric Factorization algorithms described previously, Approximate Facto) s
5 60 M
(rs are found by prime factor estimation involving various number theoretic results which na) s
5 49 M
(rrow down the location of exact factor to large extent. By searching a circular radius vici) s
5 38 M
(nity surrounding an approximate factor, probability of finding a factor is amplified. Error) s
5 27 M
( probability of not finding an exact factor by ray queries has been derived previously as:) s
5 5 M
(        N/kloglogN - 2q\(logN\)^l) s
_R
S
%%Page: (403) 403
%%BeginPageSetup
_S
18 36 translate
/pagenum 403 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (403) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        --------------------------) s
5 731 M
(                N/kloglogN) s
5 709 M
(for integer-to-factorize N and constants k,q and l. This error probability though exponenti) s
5 698 M
(al can be brought down to a desired bound by suitable choice of radius and values for const) s
5 687 M
(ants k,q and l or by precision tile summation ray shooting. Shor's BQP factoring algorithm ) s
5 676 M
(can be made a PP classical probabilitstic polytime algorithm by [Adleman-DeMarrais-Huang] t) s
5 665 M
(heorem - BQP in PP. By invocation of Ray Shooting Oracles as subroutines in this PP factori) s
5 654 M
(ng algorithm, PP is error-bounded to a BPP or BPNC algorithm \(by doing ray shooting queries) s
5 643 M
( on parallel RAMs\). Derandomization of BPP to P has known Hitting Set Generator algorithms.) s
5 632 M
( BPNC derandomization has some restrictions - only derandomizing BPNC1 is known. But this c) s
5 621 M
(ould be sufficient because classical PRAM computational geometric factorization is achievab) s
5 610 M
(le by Parallel Planar Point Location NC1 algorithms of O\(logN\) parallel time. This pipeline) s
5 599 M
(d derandomization of BQP through BQP-PP-BPP\(or BPNC\)-P\(or NC\) points to prima facie feasibi) s
5 588 M
(lity of wave function superposition collapse \(a quantum universal gate\) to some classical e) s
5 577 M
(igenstate \(PRAM\).) s
5 555 M
(References:) s
5 544 M
(-----------) s
5 533 M
(647.1 Nisan's PRG and Derandomization of BPNC1 - [Periklis Papakonstantinou] - Section 3.4 ) s
5 522 M
(- "...We consider logspace machines without a stack, and we parametrize on the number of pa) s
5 511 M
(sses over the random tape. This defines a hierarchy of classes between LogSpace and BP\342\\210) s
5 500 M
(\\227LogSpace \342\\212\\207 BPNC1 [Nis93b]. Therefore a full derandomization of this hierarchy d) s
5 489 M
(erandomizes BPNC1 ..." - Section 3.4.1 - http://papakonstantinou.org/periklis/pdfs/phd_thes) s
5 478 M
(is.pdf - "...Observe that a PRG that fools logspace machines with two-way access over the i) s
5 467 M
(nput, also fools NC1 circuits. The classical PRG of Nisan [Nis92] is shown to fool logspace) s
5 456 M
( machines that make r\(n\) = 1 pass over the random or pseudorandom input. Using a simple ana) s
5 445 M
(lysis, we show that for every k > 0 there exists k' such that for seeds of length log^k'\(n\)) s
5 434 M
( the original Nisan\342\\200\\231s PRG is also secure against logspace machines with r\(n\) = log^) s
5 423 M
(k\(n\) passes...") s
5 412 M
(647.2 Simplified Derandomization of BPP by Hitting Set Generator - [Goldreich-Vadhan-Wigder) s
5 401 M
(son] - http://www.wisdom.weizmann.ac.il/~oded/COL/gvw.pdf) s
5 390 M
(647.3 Quantum Factorization and Decoherence - https://arxiv.org/pdf/quant-ph/9503007.pdf - ) s
5 379 M
([I. L. Chuang, R. Laflamme, P. Shor and W. H.Zurek] - "...As a quantum system evolves, info) s
5 368 M
(rmation about its states leaks out into the environment, causing them to loose their purity) s
5 357 M
(, and, consequently, their ability to interfere....The decoherence process has been propose) s
5 346 M
(d as a mechanism for enforcing classical behavior) s
5 335 M
(in the macroscopic realm. Decoherence results in environment-induced superselection[5, 6, 7) s
5 324 M
(] which destroys superpositions between the states of preferred pointer basis[6]. Classical) s
5 313 M
( computers are already decohered \342\\200\\223 ") s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(------------) s
5 269 M
(648. \(THEORY\) Voting in Knot Theory, Gordion Knot, One-Way Functions, Hardness Amplificatio) s
5 258 M
(n Lemma for Majority + VoterSAT Boolean Function Composition, Separate Chaining or LSH Part) s
5 247 M
(ition based Theoretical EVMs - related to 318, 517, 620 - 21 MArch 2019) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(------------) s
5 214 M
(Knot theoretic formulation of One-Way-Functions \(as a Gordion Knot\) has been mentioned in h) s
5 203 M
(ttps://github.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComp) s
5 192 M
(uterScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt. Previous secti) s
5 181 M
(ons describe a hard-to-invert MajorityInverse\(\) function which extracts the identity of the) s
5 170 M
( voters who voted for or against a candidate \(for simplicity binary 0 or 1\). Majority funct) s
5 159 M
(ion can be formulated as a knot polynomial by following example procedure:) s
5 148 M
(        \(*\) Electorate are points on a straightline string ) s
5 137 M
(        \(*\) Each voter has a decision function or VoterSAT of arbitrary complexity class) s
5 126 M
(        \(*\) Knot on this string of voters maps each voter to a point on locus of a knot pol) s
5 115 M
(ynomial in) s
5 104 M
(3 dimensional space. This mapping obfuscates the identity of the voter and vouchsafes secre) s
5 93 M
(cy.) s
5 82 M
(        \(*\) Knot polynomial is defined on 3 variable axes - Voters, Candidates, VoterSATs) s
5 71 M
(        \(*\) Each point on the knot is a tuple \(obfuscated_voter_id, obfuscated_VoterSAT, ca) s
5 60 M
(ndidate_id\) denoting an anonymous vote in ballot) s
5 49 M
(        \(*\) MajorityInverse\(\) for this Knot ballot is defined as:) s
5 38 M
(                MajorityInverse\(obfuscated_voter_id, obfuscated_VoterSAT, candidate_id\) = v) s
5 27 M
(oter_id) s
5 16 M
(        \(*\) Previous example in 3-dimensions is only for illustrative purposes \(Obfuscated ) s
5 5 M
(VoterSAT in the vote tuple may not be necessary\) and knot ballot polynomial can be embedded) s
_R
S
%%Page: (404) 404
%%BeginPageSetup
_S
18 36 translate
/pagenum 404 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (404) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( in arbitrary topological space other than R^3.) s
5 731 M
(        \(*\) Hardness of previous knot version of MajorityInverse\(\) depends on difficulty in) s
5 720 M
( unravelling the knot \(to retrieve voter who voted for a candidate\) so that secret ballot i) s
5 709 M
(s not compromised.) s
5 698 M
(        \(*\) Thus a Gordion Knot Ballot is hard-to-invert MajorityInverse\(\) function.) s
5 687 M
(        \(*\) Number of votes for a candidate is determined by the number of points on the kn) s
5 676 M
(ot polynomial intersecting the 2-dimensional plane for a candidate axis point.) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(-------------) s
5 632 M
(649. \(THEORY\) Planar Graph Theoretic Circle Packing, Space Filling/Grid Filling, CSP/Linear) s
5 621 M
( Programming, Tile Cover and LSH/Separate Chaining Partitions - related to 135 - 25 March 2) s
5 610 M
(019, 1 April 2019) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-------------) s
5 577 M
(Previous algorithms for packing/filling space by circular solids/fluids were based on solvi) s
5 566 M
(ng Linear Program and Cellular Automata by a Parallel Pseudorandom Generator. In this secti) s
5 555 M
(on a random graph theoretic circle packing algorithm is described:) s
5 533 M
(Circle Packing problem is defined as filling a grid with non-overlapping circles of maximum) s
5 522 M
( possible radii. In other words, sum of radii of the non-overlapping tangential circles are) s
5 511 M
( maximized by a constraint satisfaction problem\(CSP\) or LP. Rectangular grid is mapped to a) s
5 500 M
( linear program x11 + x12 + ... + xmn for each ordinate x\(ij\) of the grid. Points on the gr) s
5 489 M
(id are randomly filled by a Parallel Pseudorandom Generator and these points are centroids ) s
5 478 M
(of circles of arbitrary radius which intersect the grid. All grid ordinates intersected by ) s
5 467 M
(or within the circles are set to 1. Circle Packing Theorem implies this set of tangential c) s
5 456 M
(ircles draw a planar intersection graph or coin graph. Conversely for every planar graph, a) s
5 445 M
( set of tangential circles can be demarcated which are solutions to a CSP/LP. This version ) s
5 434 M
(of circle packing has an added parallel randomness ingredient and therefore is a Parallel R) s
5 423 M
(andom Graph Circle Packing:) s
5 412 M
(        while \(there are unfilled grid ordinates\)) s
5 401 M
(        {) s
5 390 M
(                \(*\) Centroids of tangential circles \(which are vertices of random intersect) s
5 379 M
(ion graph\) are chosen by a PRG in parallel) s
5 368 M
(                \(*\) edges are created at random amongst centroid vertices which simulate ta) s
5 357 M
(ngential circles and have length equal to sum of radii of two tangential circles) s
5 346 M
(                \(*\) any overlap of circles is avoided by shrinking the sum of radii as nece) s
5 335 M
(ssary.) s
5 324 M
(                \(*\) all ordinate variables within random tangential circles are set to 1. ) s
5 313 M
(                \(*\) Grid ordinates are stored in a hashmap and an ordinate is removed from ) s
5 302 M
(map after being set to 1. ) s
5 291 M
(                \(*\) At any instant, Parallel PRG choooses only from remaining ordinates in ) s
5 280 M
(the hashmap which is exhausted when grid is completely filled by circles.) s
5 269 M
(        }) s
5 247 M
(Previous Parallel Random Graph Circle Packing is in BPNC/RNC and indirectly probabilistical) s
5 236 M
(ly solves the constraint satisfaction problem for sum of radii in parallel and is an online) s
5 225 M
( algorithm \( whereas sequential CSP/LP solution guarantees that the tangential osculating c) s
5 214 M
(ircles have maximum radius possible apriori\).) s
5 192 M
(Circle Packing is also an exact cover set partition of 2-D space \(e.g infinite number of ci) s
5 181 M
(rcles in Apollonian Gasket\). Set partition and space filling \(by Circle packing, Tile cover) s
5 170 M
( etc.,\) have an isomorphism. Separate Chaining Hashtable and LSH partitions are isomorphic ) s
5 159 M
(to exact tile cover of a rectangular 2-D region and there exists a connection to factorizat) s
5 148 M
(ion if Number of elements of a set S is composite and size of every bucket in set partition) s
5 137 M
( of S is composite i.e every bucket in histogram is mapped to a rectangular tile in tile co) s
5 126 M
(ver of S plotted as a rectangle. Size of every bucket can be written as sum of four squares) s
5 115 M
( by Lagrange Four Squares Theorem and thus every set in a set partition can be mapped to 4 ) s
5 104 M
(juxtaposed squares which reduces Balls-Bins/Set partition problems to Tile Packing.) s
5 82 M
(References:) s
5 71 M
(-----------) s
5 60 M
(649.1 Cicle Packing Survey - Apollonian Gasket - Computational Effort in finding radii - Fi) s
5 49 M
(gure 2 - Packing and Simplicial Complexes -  Discrete Riemann Mapping Theorem - Maximal Pac) s
5 38 M
(king - http://www.math.utk.edu/~kens/Notices_article.pdf - Previous algorithm for Circle Tr) s
5 27 M
(iangulation Packing in Apollonian Gasket is a greedy algorithm where maximum possible radii) s
5 16 M
( are chosen initially which are fractally reduced) s
5 5 M
(649.2 Descartes Circle Theorem - https://en.wikipedia.org/wiki/Descartes%27_theorem - Every) s
_R
S
%%Page: (405) 405
%%BeginPageSetup
_S
18 36 translate
/pagenum 405 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (405) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( four kissing quadratic circles satisfy the quadratic equation - \(b1 + b2 + b3 + b4\)^2 = 2\() s
5 731 M
(b1^2 + b2^2 + b3^2 + b4^2\) where bi are bends or curvatures \(radii\) of the four circles. Qu) s
5 720 M
(ite useful in previous randomized parallel algorithm in finding the radius of inscribed fou) s
5 709 M
(rth circle.) s
5 698 M
(649.3 An example Constraint Satisfaction Problem for unequal Circle Packing in rectangle by) s
5 687 M
( 0-1 Integer Linear Programming - Integer Programming Formulations for Approximate Packing ) s
5 676 M
(Circles in a Rectangular Container - https://www.hindawi.com/journals/mpe/2014/317697/) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(-------------) s
5 632 M
(650. \(THEORY and FEATURE\) Streaming Set Partition \(Histogram\) Analytics - 28 March 2019) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(-------------) s
5 599 M
(1.New Python implementation for multipurpose analytics of streamed set partitions \(histogra) s
5 588 M
(ms\) has been committed - Streaming_SetPartitionAnalytics.py) s
5 577 M
(2.Two new bigdata sources have been defined in Streaming_AbstractGenerator.py - "TextHistog) s
5 566 M
(ramPartition" and "DictionaryHistogramPartition" which respectively:) s
5 555 M
(        \(*\) Map a list of textfiles to list of histograms by finding word frequency in the ) s
5 544 M
(text and yield partition datastructure as iterable which is a dictionary of words to bucket) s
5 533 M
(s in histograms \(occurrences are mapped to array of 1s e.g occurence 5 for word "word" is m) s
5 522 M
(apped to binned bucket \('word',[1,1,1,1,1]\)\)) s
5 511 M
(        \(*\) Read a text file - Streaming_SetPartitionAnalytics.txt - containing list of dic) s
5 500 M
(tionaries, literal_eval\(\) it and yield the elements as iterable) s
5 489 M
(3.TextHistogramPartition is a fancy datasource which facilitates an alternative measure of ) s
5 478 M
(streaming text analytics and text similarity) s
5 467 M
(4.DictionaryHistogramPartition is the conventional datasource for succinctly representing a) s
5 456 M
( set partition which could be anything ranging from LSH partition, Exact Cover, Balls-Bins,) s
5 445 M
( Separate Chained Hashtables, Electronic Voting Machines based on LSH and Separate Chaining) s
5 434 M
(, Business Intelligence Histograms, SMS voting histograms, Music Spectrograms etc.,.) s
5 423 M
(5.adjusted_rand_index\(\) in Streaming_SetPartitionAnalytics.py instantiates both these datas) s
5 412 M
(ource iterators and computes Adjusted Rand Index for two consecutive partitions in the stre) s
5 401 M
(am by SciKitLearn adjusted_rand_score\(\)) s
5 390 M
(6.Because of the fact that every set partition is set of class labels in some classifier, v) s
5 379 M
(arious other clustering performance measures - mutual information, silhouette etc., \(https:) s
5 368 M
(//scikit-learn.org/stable/modules/clustering.html#clustering-evaluation\) could compare part) s
5 357 M
(itions too.) s
5 346 M
(7.tocluster\(\) in Streaming_SetPartitionAnalytics.py maps a partition to an array of labelle) s
5 335 M
(d elements in scikitlearn format) s
5 324 M
(8.An example streaming set partition analytics for linux kernel logs \(TextHistogramPartitio) s
5 313 M
(n\) and list of dictionaries \(DictionaryHistogramPartition\) is committed to Streaming_SetPar) s
5 302 M
(titionAnalytics.log.28March2019 which show how Adjusted Rand Index works for similar and di) s
5 291 M
(ssimilar partitions.) s
5 280 M
(9.For circumventing sklearn exception two compared partitions are truncated to minimum size) s
5 269 M
( of the two) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(-------------) s
5 225 M
(651. \(THEORY and FEATURE\) Reduction from Set Partition to Exact Square Tiles Cover of Recta) s
5 214 M
(ngular Region,) s
5 203 M
(Lagrange Four Square Theorem, Complementary Sets, Computational Geometric Factorization, Sp) s
5 192 M
(ace Filling, Tile Cover, Packing, Set Partition/Histogram Analytics, LSH Partitions, Separa) s
5 181 M
(te Chaining Hashtables - 3 April 2019 - related to 649 and 650) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(-------------) s
5 148 M
(1.Python implementation for Set Partition Analytics \(Streaming_SetPartitionAnalytics.py\) ha) s
5 137 M
(s been updated for a new function which reduces a histogram set partition to exact square t) s
5 126 M
(iles cover of rectangular region which has area equal to number of elements in the histogra) s
5 115 M
(m.) s
5 104 M
(2.Function setpartition_to_tilecover\(\) loops through histogram buckets \(set partition\) and ) s
5 93 M
(maps each bucket size to sum of four squares by Lagrange Four Square Theorem essentially ma) s
5 82 M
(pping each 1-dimensional bucket to 4 2-dimensional square tiles.) s
5 71 M
(3.Collection of these sets of 4 square tiles covers the rectangular region of area equal to) s
5 60 M
( number of elements partitioned by histogram/LSH/Separate Chaining.) s
5 49 M
(4.Example logs in testlogs/Streaming_SetPartitionAnalytics.log.3April2019 demonstrate reduc) s
5 38 M
(tion of histogram buckets [11,12,13,14,15] of total number of 65 elements to tile cover of ) s
5 27 M
(rectangular region which has composite area 13*5=65:) s
5 16 M
(square tiles for partition  11 : set\([\(0, 1, 1, 3\)]\)) s
5 5 M
(square tiles for partition  12 : set\([\(1, 1, 1, 3\)]\)) s
_R
S
%%Page: (406) 406
%%BeginPageSetup
_S
18 36 translate
/pagenum 406 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (406) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(square tiles for partition  13 : set\([\(1, 2, 2, 2\)]\)) s
5 731 M
(square tiles for partition  14 : set\([\(0, 1, 2, 3\)]\)) s
5 720 M
(square tiles for partition  15 : set\([\(1, 1, 2, 3\)]\)) s
5 709 M
(Lagrange Four Square Tiles Cover reduction of Set Partition  [11, 12, 13, 14, 15] : [0, 1, ) s
5 698 M
(1, 9, 1, 1, 1, 9, 1, 4, 4, 4, 0, 1, 4, 9, 1, 1, 4, 9]) s
5 687 M
(5.This reduction indirectly solves factorization problem \(complexity depends on sum of four) s
5 676 M
( squares\) geometrically by following square tiles cover algorithm:) s
5 665 M
(        5.1 Number to factorize N is partitioned arbitrarily by some integer partition and ) s
5 654 M
(is isomorphic to a histogram) s
5 643 M
(        5.2 Square tiles are obtained from partition by previous Lagrange Four Square reduc) s
5 632 M
(tion ) s
5 621 M
(        5.3 Square tiles are geometrically juxtaposed/arranged to create a tiled rectangle ) s
5 610 M
(sides of which are factors of N) s
5 599 M
(        5.4 Finding an arrangement of tiles on a rectangular region can be formulated as a ) s
5 588 M
(non-linear \(quadratic\) convex-concave optimization problem. If x1,x2,x3,...,xn are sides of) s
5 577 M
( square tiles:) s
5 566 M
(        N = area of rectangle = sum of areas of square tiles = x1^2 + x2^2 + x3^2 + ... + x) s
5 555 M
(n^2) s
5 544 M
(        = product of sum of sides of peripheral tiles) s
5 533 M
(        = \(c1*x1 + c2*x2 + ... + cn*xn\)*\(d1*x1 + d2*x2 + ... + dn*xn\) for ci = 0 or 1, di =) s
5 522 M
( 0 or 1) s
5 511 M
(        5.5 Solving N = x1^2 + x2^2 + x3^2 + ... + xn^2 = \(c1*x1 + c2*x2 + ... + ck*xk + cn) s
5 500 M
(*xn\)*\(\(1-c1\)*x1 + \(1-c2\)*x2 + ... + ck*xk + \(1-cn\)*xn\) by Integer Programming for binary ci) s
5 489 M
( amounts to factorizing N \(because tiles of the sides have to be mutually exclusive save co) s
5 478 M
(rner tile\)) s
5 467 M
(        5.6 The corner square tile is common to both sides and ck = dk for exactly one squa) s
5 456 M
(re tile xk.) s
5 445 M
(        ) s
5 434 M
(If Factorization is doable in PRAMs \(and therefore in Nick's Class\) as per previous section) s
5 423 M
(s on various parallel RAM polylogarithmic time algorithms for factoring \(e.g Parallel Plana) s
5 412 M
(r Point Location\), geometric arrangement of square tiles in a rectangle is of polynomial ti) s
5 401 M
(me - find factors which are sides of rectangle, successively tile the rectangle by choosing) s
5 390 M
( largest square remaining. Many randomized algorithms are available for finding Lagrange Su) s
5 379 M
(m of squares. If the factors of N = p*q are known in polylogarithmic time finding the tile ) s
5 368 M
(arrangement is by solving two linear programs:) s
5 357 M
(        c1*x1 + c2*x2 + ... + ck*xk + ... + cn*xn = p) s
5 346 M
(        \(1-c1\)*x1 + \(1-c2\)*x2 + ... + ck*xk + ... + \(1-cn\)*xn = q) s
5 324 M
(Point location by parallel construction of wavelet trees has been described in previous sec) s
5 313 M
(tions,which consider the set of points of a geometric variety \(e.g points on rectified hype) s
5 302 M
(rbolic arc\) on the plane as a string of points represented as a wavelet tree. Point Locatio) s
5 291 M
(n by Parallel Wavelet Tree construction is more obvious than Parallel Point Location by Kir) s
5 280 M
(kpatrick Triangulation, Planar subdivision, Bridge Separator Trees etc.,. The string of poi) s
5 269 M
(nts formed from rectified hyperbolic arc are concatenated straightline segments each of whi) s
5 258 M
(ch is an arithmetic progression. Query select\(B, N, i\) returns the position p of the i-th o) s
5 247 M
(ccurrence of N in concatenated hyperbolic line segments string B from which i-th factors of) s
5 236 M
( N=\(p, N/p\) are obtained.) s
5 214 M
(References:) s
5 203 M
(-----------) s
5 192 M
(651.1 Wang Tiling - https://en.wikipedia.org/wiki/Wang_tile - Previous Lagrangian Tiling ca) s
5 181 M
(n be contrasted to Wang Tiles which is about feasibility of tiling a 2-D plane by multicolo) s
5 170 M
(red square tiles by matching colors of adjacent tiles.) s
5 159 M
(651.2 Alternative partition distance measures - https://arxiv.org/pdf/1106.4579.pdf) s
5 148 M
(651.3 Clustering for set partitioning - k-set partitioning and centroid clustering are equi) s
5 137 M
(valent - https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/OPT2015_paper_) s
5 126 M
(32.pdf) s
5 115 M
(651.4 Sage Set Partitions Implementation - http://doc.sagemath.org/html/en/reference/combin) s
5 104 M
(at/sage/combinat/set_partition.html#sage.combinat.set_partition.SetPartition) s
5 93 M
(651.5 Sage Ordered Set Partitions Implementation - complement of a partition - http://doc.s) s
5 82 M
(agemath.org/html/en/reference/combinat/sage/combinat/set_partition_ordered.html) s
5 71 M
(651.6 Jacobi Sum of Four Squares Theorem - https://en.wikipedia.org/wiki/Jacobi%27s_four-sq) s
5 60 M
(uare_theorem - "...The number of ways to represent n as the sum of four squares is eight ti) s
5 49 M
(mes the sum of the divisors of n if n is odd and 24 times the sum of the odd divisors of n ) s
5 38 M
(if n is even ...") s
5 27 M
(651.7 Succinct and Implicit Data Structures for Computational Geometry - [Meng He,Faculty o) s
5 16 M
(f Computer Science, Dalhousie University, Halifax, NS, B3H 4R2, Canada,mhe@cs.dal.ca] - Fig) s
5 5 M
(ure 1 - "A wavelet tree constructed for the string 35841484 over an alphabet of size 8.This) s
_R
S
%%Page: (407) 407
%%BeginPageSetup
_S
18 36 translate
/pagenum 407 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (407) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( is also a wavelet tree constructed for the following point set on an 8 by 8 grid:{1, 3}, {) s
5 731 M
(2, 5}, {3, 8}, {4, 4}, {5, 1}, {6, 4}, {7, 8}, {8, 4}" and Section 3 - Planar Point Locatio) s
5 720 M
(n - https://web.cs.dal.ca/~mhe/publications/ianfest66_succinctgeometry.pdf) s
5 709 M
(651.8 Simple,Fast and Lightweight Parallel Wavelet Tree Construction - [Fischer-Kurpicz-Lob) s
5 698 M
(el] - https://arxiv.org/pdf/1702.07578.pdf - Comparison to Domain Decomposition Parallel Wa) s
5 687 M
(velet Tree Construction and Variant of Wavelet Tree \(Wavelet Matrix\) - In the context of Co) s
5 676 M
(mputational Geometric Parallel Planar Point Location, size of the alphabet for wavelet tree) s
5 665 M
( is very small in the range [N-delta, N+delta] because hyperbolic tile segments have produc) s
5 654 M
(t of ordinates which are more or less equal to N. ) s
5 643 M
(651.9 Planar Point Location - Algorithms - https://cw.fel.cvut.cz/b181/_media/courses/cg/le) s
5 632 M
(ctures/02-pointloc.pdf) s
5 621 M
(651.10 Segment Trees and Point Location Query - http://www.cs.umd.edu/class/fall2016/cmsc75) s
5 610 M
(4/Lects/cmsc754-fall16-lects.pdf) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(-------------) s
5 566 M
(652. \(FEATURE\) Histogram-Set Partition Analytics - Adjusted Mutual Information - 3 April 20) s
5 555 M
(19) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-------------) s
5 522 M
(1.adjusted_mutual_info_score\(\) from sklearn.metrics has been invoked in adjusted_rand_index) s
5 511 M
(\(\) for comparing two set partitions.) s
5 500 M
(2.Logs in testlogs/Streaming_SetPartitionAnalytics.log2.3April2019 show the difference betw) s
5 489 M
(een two measures - adjusted rand index and adjusted mutual information) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(-------------) s
5 445 M
(653. \(FEATURE and THEORY\) Computational Geometric Factorization - Tile Search - Spark 2.4 -) s
5 434 M
(SparkContext) s
5 423 M
(range\(\) - 16 April 2019) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(-------------) s
5 390 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been changed to rep) s
5 379 M
(lace xrange\(\) by Spark Context range\(\) function in Spark 2.4.) s
5 368 M
(2.Python xrange\(\) is sequential and local while Spark range\(\) is resilient distributed data) s
5 357 M
(set which can be computed on cloud in parallel) s
5 346 M
(3.Some ray query functions have also been transitioned to Spark Context range\(\).) s
5 335 M
(4.An example integer is factorized and logs in testlogs/DiscreteHyperbolicFactorizationUppe) s
5 324 M
(rbound_TileSearch_Optimized.log.16April2019 show some accurate ray shooting by Hardy-Ramanu) s
5 313 M
(jan approximate factoring and exact factors.) s
5 302 M
(5.Spark 2.4 has Barrier Synchronization feature \(mentioned experimental\) which is BSP model) s
5 291 M
( \(like Pregel\) than PRAM - https://spark.apache.org/docs/latest/api/python/pyspark.html#pys) s
5 280 M
(park.BarrierTaskContext.get) s
5 269 M
(6.Greenwich Mean Time \(gmtime\(\)\) is printed after every factor is found for duration analys) s
5 258 M
(is of finding all factors.) s
5 236 M
(-------------------------------------------------------------------------------------------) s
5 225 M
(-----------) s
5 214 M
(654. \(THEORY and FEATURE\) EventNet creation from Video, Actor Model, PetriNets, Video Event) s
5 203 M
(Net Tensor Products Intrinsic Merit - 19 April 2019 - related to all sections on Causality-) s
5 192 M
(Logical Time and Merit) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(-----------) s
5 159 M
(1.ImageNet Keras-Theano Python implementation has been changed to write EventNet Vertices a) s
5 148 M
(nd Edges ) s
5 137 M
(files from causally related frame events of the video which can be read by GraphViz or Neur) s
5 126 M
(onRain EventNet Python implementation) s
5 115 M
(2.EventNet differs from traditional PetriNet in following respects:) s
5 104 M
(        2.1 PetriNets have vertices having tokens called "Places" while EventNet has vertic) s
5 93 M
(es having "actors" or "participants" in an event \(Actor-Event Model\)) s
5 82 M
(        2.2 PetriNets have transitions which move the tokens from Place-a to Place-b while ) s
5 71 M
(EventNet has directed edges which connect a causing event vertex to an effect event vertex ) s
5 60 M
(which is akin to flow of tokens.) s
5 49 M
(        2.3 EventNet is an Actor Model where actors interact in an event, modify local stat) s
5 38 M
(es and send messages to other actors.) s
5 27 M
(3.Video EventNet vertices and edges are written to Video_EventNetEdges.txt and Video_EventN) s
5 16 M
(etVertices.txt) s
_R
S
%%Page: (408) 408
%%BeginPageSetup
_S
18 36 translate
/pagenum 408 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (408) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(References:) s
5 731 M
(-----------) s
5 720 M
(654.1 Actor Model - https://en.wikipedia.org/wiki/Actor_model) s
5 709 M
(654.2 PetriNets - https://www.techfak.uni-bielefeld.de/~mchen/BioPNML/Intro/pnfaq.html) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(-------------) s
5 665 M
(655. \(THEORY and FEATURE-BUGFIX\) EventNet creation from Video - bug resolutions, correction) s
5 654 M
(s to EventNet vertices and edges text files - 21 April 2019) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-------------) s
5 621 M
(1.ImageNet Keras Theano Python Implementation had some bugs in creating EventNet vertices a) s
5 610 M
(nd edges text) s
5 599 M
(files which have been resolved in this commit.) s
5 588 M
(2.Frame prevfix has been included in EventNet edges text file.) s
5 577 M
(3.Extracting EventNet from video facilitates computing usual dense subgraph complexity meas) s
5 566 M
(ures for Video) s
5 555 M
(similar to TextGraphs - e.g k-core, cycles, strongly connected components, algebraic connec) s
5 544 M
(tivity etc.,) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(-------------) s
5 500 M
(656. \(FEATURE\) Medical Imageing Analytics - ElectroCardioGram \(ECG\), EventNet from Video - ) s
5 489 M
(23 April 2019) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(-------------) s
5 456 M
(1.Extracting patterns in medical imagery \(ECG, MRI, Echo Cardio Gram Scans etc.,\) is one of) s
5 445 M
( the most obvious analytics that can be performed on a Medical Image dataset which has wide) s
5 434 M
(spread requirement in healthcare.) s
5 423 M
(2.ImageNet Keras-Theano Python implementation has been augmented with a medical_imageing\(\) ) s
5 412 M
(function which takes an image source \(presently ECG\) and thresholds the image to retrieve c) s
5 401 M
(ontours from it by CV2 findContours\(\).) s
5 390 M
(3.Image Contours are prominent features in an image which are more pronounced and distingui) s
5 379 M
(sh it from other images.) s
5 368 M
(4.Two example ECG images \(Normal and Infarction\) are compared by creating contours \(i.e ext) s
5 357 M
(ract the ECG waveform from image\) and computing the hausdorff distance between the two imag) s
5 346 M
(e contours:) s
5 335 M
(5.Example comparison from logs in testlogs/ImageGraph_Keras_Theano.log.MedicalImageing.23Ap) s
5 324 M
(ril2019:) s
5 313 M
(Distance between Normal ECG and Normal ECG: \(0.0, 0, 0\)) s
5 302 M
(Distance between Normal ECG and Infarction ECG: \(1741.9586677071302, 0, 0\)) s
5 291 M
(6.EventNet edges and vertices numbering in text files Video_EventNetEdges.txt and Video_Eve) s
5 280 M
(ntNetVertices.txt has been corrected.) s
5 258 M
(References:) s
5 247 M
(-----------) s
5 236 M
(656,1 Medical Imageing Analysis - https://www.pyimagesearch.com/2018/12/03/deep-learning-an) s
5 225 M
(d-medical-image-analysis-with-keras/) s
5 214 M
(656.2 ECG Library - https://ecglibrary.com/ecghome.php) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(--------------) s
5 170 M
(657. \(THEORY\) Depth-2 Majority Function, Theoretical EVMs, Set Partitions, People Analytics) s
5 159 M
(, Axiom of Choice - related to 546,490 and all sections on majority voting - 25 April 2019) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(--------------) s
5 126 M
(It has been mentioned in earlier sections on set partitions that every theoretical majority) s
5 115 M
( voting partitions the population into subsets or buckets indexed by the candidate voted fo) s
5 104 M
(r. Most realworld democracies follow the depth-2 majority voting division convention below:) s
5 93 M
(                                        \(Depth-0\)) s
5 82 M
(                                 Winning affiliation) s
5 71 M
(                                        /\\) s
5 60 M
(                                        ||) s
5 49 M
(        \(Depth-1\) {Segment1          Segment2   ....                SegmentP}) s
5 38 M
(                        /\\              /\\                              /\\) s
5 27 M
(                        ||              ||                              ||) s
5 16 M
(\(Depth-2\) {EVM11 EVM12 ... EVM1N}  {EVM21 EVM22 ... EVM2N}      {EVMP1 EVMP2 ... EVMPN}) s
_R
S
%%Page: (409) 409
%%BeginPageSetup
_S
18 36 translate
/pagenum 409 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (409) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(and each EVM is defined by the hiearachy of partitions\( candidates per segment might vary a) s
5 731 M
(s n\(1\),n\(2\),...,n\(P\)\) - votes per candidate k in q-th EVM of p-th segment \(EVMpq\) is denote) s
5 720 M
(d by ckpq :) s
5 698 M
(        EVM11 = c111 + c211 + c311 + ... + cn\(1\)11 ) s
5 687 M
(        EVM12 = c112 + c212 + c312 + ... + cn\(1\)12) s
5 676 M
(        ...) s
5 665 M
(        EVM21 = c121 + c221 + c321 + ... + cn\(2\)21) s
5 654 M
(        ...) s
5 643 M
(        EVMP1 = c1P1 + c2P1 + c3P1 + ... + cn\(P\)P1) s
5 632 M
(        ...) s
5 621 M
(Previous partition tree of depth-2 \(i.e a tree whose nodes are set partitions\) generalizes ) s
5 610 M
(depth-2 boolean majority function to non-boolean setting and is an arithmetic circuit. At D) s
5 599 M
(epth-2 EVM set partitions per segment are summed up partwise \(because all partitions within) s
5 588 M
( a segment should have equal number of parts which is the number of candidates per segment\)) s
5 577 M
( and passed on to Depth-1 - in previous per segment partition identities summing vertically) s
5 566 M
( columnwise yields Depth-1 partition per segment. At Depth-1 index for candidate of maximum) s
5 555 M
( part/bucket size in segmentwise partition sum is computed and passed on to Depth-0. At Dep) s
5 544 M
(th-0, single set partition is created which contains buckets per affiliation of the candida) s
5 533 M
(tes. Maximum size part in Depth-0 set partition is the winning affiliation.) s
5 511 M
(Whole depth-2 majority voting democratic process rests on the correctness of Axiom of Choic) s
5 500 M
(e which avers: For a collection X of subsets, there always exists a choice function f such ) s
5 489 M
(that for every set A in X, f\(A\) is an element of A. In previous example, at Depth-1, maximu) s
5 478 M
(m\(\) is the choice function applied across the board for all segment set partitions for choo) s
5 467 M
(sing the winning candidate per segment \(ruling out ties\). It is readily obvious that each s) s
5 456 M
(egment is a cluster of partitions and empirically distance between majority of EVM partitio) s
5 445 M
(ns of same segment \(partition rank, rand index, mutual info\) should not be abnormally high ) s
5 434 M
(and reflects trend per segment.) s
5 412 M
(By Berry-Esseen Central Limit Theorem, if vote for each candidate \(ckpq\) is a random variab) s
5 401 M
(le, normalized sum of the votes for all candidates or average number of votes per candidate) s
5 390 M
( tends to normal distribution. In other words, every part in each of the EVM partitions pre) s
5 379 M
(viously is a random variable which are summed up. This implies distances between any two EV) s
5 368 M
(M partitions \(which is the function of distance between individual parts in two voting part) s
5 357 M
(itions\) also tend to distance between two normal distributions \(i.e almost a constant on th) s
5 346 M
(e average\). Most importantly, columnwise sum of parts leading to per segment partition in D) s
5 335 M
(epth-1 is also an averaged normal distribution.) s
5 313 M
(Ramanujan's Congruences for EVM partitions imply, for certain size of electorate \(5k + 4, 7) s
5 302 M
(k + 5, 11k + 6\) number of possible voting patterns \(partition number or number of possible ) s
5 291 M
(partitions\) abides by following congruences:) s
5 280 M
(        p\(5k + 4\) mod 5 = 0) s
5 269 M
(        p\(7k + 5\) mod 7 = 0) s
5 258 M
(        p\(11k + 6\) mod 11 = 0) s
5 236 M
(References:) s
5 225 M
(-----------) s
5 214 M
(657.1 Ramanujan Congruences - https://en.wikipedia.org/wiki/Ramanujan%27s_congruences) s
5 203 M
(657.2 Distance measures between partitions - Hamming Distance, Maximum Matching Distance, V) s
5 192 M
(ariation of Information - https://pdfs.semanticscholar.org/d8a2/936cc4bcb8bda106e3b307104c3) s
5 181 M
(ee824b4a8.pdf) s
5 170 M
(657.3 Microsoft ElectionGuard OpenSource EVM - https://blogs.microsoft.com/on-the-issues/20) s
5 159 M
(19/05/06/protecting-democratic-elections-through-secure-verifiable-voting/ - "...First, Ele) s
5 148 M
(ctionGuard provides each voter a tracker with a unique code that can be used to follow an e) s
5 137 M
(ncrypted version of the vote through the entire election process via a web portal provided ) s
5 126 M
(by election authorities. During the process of vote-casting, voters have an optional step t) s
5 115 M
(hat allows them to confirm that their trackers and encrypted votes accurately reflect their) s
5 104 M
( selections....") s
5 93 M
(657.4 Ballot Marking Devices Cannot assure the will of voters - [Appel-DiMello-Stark] - htt) s
5 82 M
(ps://papers.ssrn.com/sol3/papers.cfm?abstract_id=3375755) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(------------) s
5 38 M
(658. \(THEORY and FEATURE\) Video EventNet Causality Graph Complexity Measures, Graph Minors,) s
5 27 M
( Merit of) s
5 16 M
(Large Scale Visuals - 29 April 2019) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (410) 410
%%BeginPageSetup
_S
18 36 translate
/pagenum 410 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (410) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(------------) s
5 731 M
(1.This commit invokes networkx Graph API and creates NetworkX EventNet causality graph obje) s
5 720 M
(ct for an example video. Connectivity of the Video EventNet is printed.) s
5 709 M
(2.Example video in matrovska format which records the facebook profile of the author https:) s
5 698 M
(//www.facebook.com/shrinivaasan.ka \(containing NeuronRain commits twitter feeds\) is comvert) s
5 687 M
(ed to mp4 by ffmpeg:) s
5 676 M
(ffmpeg -i ExampleVideo_Facebook_GRAFIT_29April2019.mkv -strict experimental ExampleVideo_Fa) s
5 665 M
(cebook_GRAFIT_29April2019.mp4) s
5 654 M
(3.Usually most videos have set of frames which are consecutive and closely related. These f) s
5 643 M
(rames create straightline linear paths of vertices of degree 2 in the EventNet Graph undern) s
5 632 M
(eath it.) s
5 621 M
(4.These straightline paths can be coalesced or edge-contracted to single vertex forming Gra) s
5 610 M
(ph Minors of EventNet.) s
5 599 M
(5.Connectivity of a Video is a necessary but not sufficient condition for merit.) s
5 588 M
(6.Rationale for Video EventNet Connectivity as Merit Measure: Video of disconnected underly) s
5 577 M
(ing EventNet causality has scattered non-coherent information which is not appealing to vie) s
5 566 M
(wer.) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-------------) s
5 522 M
(659. \(FEATURE\) Music Pattern Mining - Music Synthesis by Automaton - Read from textfile - 3) s
5 511 M
(0 April 2019) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-------------) s
5 478 M
(1.Hardcoded states2notes DFA has been removed and DFA is read from a textfile NotesStateMac) s
5 467 M
(hine.txt and) s
5 456 M
(ast.literal_eval\(\)-ed to a dictionary.) s
5 445 M
(2.Scaling of notes have been commented and note values are magnified \(multiplied by 1000\). ) s
5 434 M
(Waveform timeseries can be visually analyzed by loading .wav file to a player and displayin) s
5 423 M
(g waveform oscilloscope in visual effects.) s
5 412 M
(3.Logs for this have been committed to testlogs/AudioToBitMatrix.log.MusicSynthesizer.30Apr) s
5 401 M
(il2019) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(-----------------------------) s
5 357 M
(660. \(THEORY and FEATURE\) DeepLearning Convolution BackPropagation - handwriting recognitio) s
5 346 M
(n - utility function - 5 May 2019, 9 May 2019) s
5 335 M
(- related to 159 ) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(-----------------------------) s
5 302 M
(1.DeepLearning_ConvolutionNetwork_BackPropagation.py has been changed to define a new utili) s
5 291 M
(ty function handwriting_recognition\(\) which) s
5 280 M
(loads two images of handwritings by CV2, thresholds them, finds contours of the two images ) s
5 269 M
(and approximates the contours by Douglas-Peucker Polynomial \(DP\) and computes the hausdorff) s
5 258 M
( distance between the two DP approximate polynomials of the handwritten images.) s
5 247 M
(2.testlogs/DeepLearning_ConvolutionNetwork_BackPropagation.log.5May2019 shows how 2 pairs o) s
5 236 M
(f handwritten digits fare against hausdorff distance measure - 2 pictures of handwritten di) s
5 225 M
(git 1 \(similar\), 2 pictures of handwritten digits 1 and 8 \(dissimilar\)) s
5 214 M
(3.Logs show DP polynomials of contours of 1 and 1 are close enough while DP polynomials of ) s
5 203 M
(contours of 1 and 8 are far apart:) s
5 192 M
(#############################################) s
5 181 M
(Handwriting Recognition) s
5 170 M
(#############################################) s
5 159 M
([[[1279  719]]]) s
5 148 M
([[[1276  719]]) s
5 126 M
( [[1279  719]]]) s
5 115 M
(Distance between DP polynomials approximating two handwriting contours: \(3.0, 0, 0\)) s
5 104 M
([[[1279  719]]]) s
5 93 M
([[[  0 564]]]) s
5 82 M
(Distance between DP polynomials approximating two handwriting contours: \(1288.3578695378083) s
5 71 M
(, 0, 0\)) s
5 49 M
(4.Though image Contours and DP approximation are not traditional deep learning, previous co) s
5 38 M
(ntouring and DP approximation could as well be performed on convolution layers and maxpooli) s
5 27 M
(ng map layers of the two images as against images themselves.) s
5 16 M
(5.Function handwriting_recognition\(\) is supervised learner and takes two arguments - traini) s
5 5 M
(ng \(labelled\) and test \(unlabelled\) images - and compares the unlabelled image to training ) s
_R
S
%%Page: (411) 411
%%BeginPageSetup
_S
18 36 translate
/pagenum 411 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (411) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(image \(printed or handwritten\)) s
5 731 M
(6.In the topological sense, each approximate DP polynomial for handwriting contours of same) s
5 720 M
( alphabet or digit are equivalent homeomorphic deformations in R^2. Handwritings of same pe) s
5 709 M
(rson for similar text create a cluster of deformations which are close enough and create ou) s
5 698 M
(tliers for different persons.) s
5 687 M
(7.Pattern grammars described earlier define grammatical rules similar to context free gramm) s
5 676 M
(ars for shape description. For example handwritten alphanumeric 'b' is defined as:) s
5 665 M
(        <b> := <|> <operator> <o>) s
5 654 M
(where <operator> could be <prefix> which tangentially attaches <|> before <o>. Following th) s
5 643 M
(e convention above, a family or cluster of close-enough DP approximate polynomials fit in a) s
5 632 M
(s operands within <> - e.g Coffee mug in 2 dimensions is homeomorphic to the letters 'D' an) s
5 621 M
(d 'O' and all three \(Mug, D, O\) have close-enough DP Approximate polynomials of small hausd) s
5 610 M
(orff distances amongst them. Alternatively, Mug can be written as pattern grammar:) s
5 599 M
(        <Mug> := <I> <prefix> <\)> ) s
5 588 M
(and <I> and <\)> are defined by DP polynomials.) s
5 566 M
(References:) s
5 555 M
(-----------) s
5 544 M
(660.1 Ramer-Douglas-Peucker Curve Decimation Algorithm - approxPolyDP\(\) - https://docs.open) s
5 533 M
(cv.org/2.4/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html) s
5 522 M
(660.2 Coffee Mug is homeomorphic to Donut Torus - Graphic illustration - https://en.wikiped) s
5 511 M
(ia.org/wiki/Homeomorphism) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(----------------------------------------------------) s
5 467 M
(661.\(THEORY and FEATURE\) Music Pattern Mining - Weighted Automaton Learning from Music - 11) s
5 456 M
( May 2019 - related to all sections on) s
5 445 M
(Intrinsic Merit of Music) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(----------------------------------------------------) s
5 412 M
(1.Previous sections described ascertaining merit of music by various analyses of waveforms ) s
5 401 M
(e.g MFCC, learning DFA from music notes. Apart from these there are standard measures viz.,) s
5 390 M
( zero crossings, chroma which quantify genre or merit of music \(https://librosa.github.io/l) s
5 379 M
(ibrosa/feature.html\).) s
5 368 M
(2.Of these learning a deterministic finite automaton from strings of music notes is a quali) s
5 357 M
(tative intrinsic merit measure of music which does not involve any statistical processing.) s
5 346 M
(3.Learning DFA is a computational learning theoretic problem \(PAC Learning, Angluin Model e) s
5 335 M
(tc.,\). Weighted Deterministic Finite State Automata are generalizations of DFA in which sta) s
5 324 M
(te transitions have an associated numeric weightage in addition to alphabets from a languag) s
5 313 M
(e.) s
5 302 M
(4.For example, weighted DFA below has the weighted transitions:) s
5 291 M
(        \(state1, a, state2\) - transition from state1 to state2 on symbol a of weight 1) s
5 280 M
(        \(state2, 2b, state3\) - transition from state2 to state3 on symbol b of weight 2) s
5 269 M
(5.Weighted automata are apt formalisms to represent music notes strings as DFA because note) s
5 258 M
(s have subdivisions - sharp and flat - which can be likened to weightage for state transiti) s
5 247 M
(ons \(https://en.wikipedia.org/wiki/Musical_note - CDEFGABC - ascending and descending graph) s
5 236 M
(ic\).) s
5 225 M
(6.For example string of music notes - "CD\(sharp\)DEEGAF\(flat\)F\(sharp\)" - and its accepting w) s
5 214 M
(eighted music automaton could be:) s
5 203 M
(        state1, C, state2) s
5 192 M
(        state2, Dsharp, state3) s
5 181 M
(        ...) s
5 170 M
(        state10, Fflat, state5) s
5 159 M
(        state6, Fsharp, state2) s
5 148 M
(        ...) s
5 137 M
(where sharp and flat are weights for the transition symbol.) s
5 126 M
(7.Scikit Learn SPLearn \(scikit-splearn\) provides a weighted automaton learning framework ba) s
5 115 M
(sed on Spectral Theory.) s
5 104 M
(8.This commit implements a Music Weighted Automaton python code in MusicWeightedAutomaton.p) s
5 93 M
(y which accepts a set of training string of music notes and fits them to a weighted automat) s
5 82 M
(on using scikit-splearn. It makes predictions later based on training data.) s
5 71 M
(9.Learnt weighted automaton for music notes string is drawn as DOT graph file by graphviz i) s
5 60 M
(n MusicWeightedAutomaton.gv and is rendered to a pdf - MusicWeightedAutomaton.gv.pdf) s
5 49 M
(10.Weighting the transition in music notes has an another advantage: Some portions of the m) s
5 38 M
(usic waveform are more impressive and catchy which makes them to be listened again - https:) s
5 27 M
(//en.wikipedia.org/wiki/Earworm - and transitions for these could have heavy weights.) s
5 16 M
(11.Alphabets in sample music notes strings for scikit-splearn are numeric encoded as - A:0,) s
5 5 M
(B:1,C:2,D:3,E:4,F:5,G:6) s
_R
S
%%Page: (412) 412
%%BeginPageSetup
_S
18 36 translate
/pagenum 412 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (412) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(References:) s
5 720 M
(-----------) s
5 709 M
(661.1 Weighted Automata Theory - https://perso.telecom-paristech.fr/jsaka/CONF/Files/IWAT.p) s
5 698 M
(df) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(--------------------------------------------------) s
5 654 M
(662. \(FEATURE\) Intrinsic Merit of Music - Learning Weighted Automata from Music - Example -) s
5 643 M
( 14 May 2019) s
5 632 M
(-------------------------------------------------------------------------------------------) s
5 621 M
(--------------------------------------------------) s
5 610 M
(1.MusicWeightedAutomaton.py has been updated to define a new function audio_notes_to_sample) s
5 599 M
(s\(\) to read a music clip of certain duration by librosa, convert the waveform to notes, cre) s
5 588 M
(ate notes string samples from them and return samples as word frequency dictionary and nume) s
5 577 M
(ric encoded sample notes strings) s
5 566 M
(2.SplearnArray is instantiated from encoded notes strings of variable size equal to number ) s
5 555 M
(of columns in the notes matrix) s
5 544 M
(3.Weighted automaton is learnt from these Sample dictionary and numeric encoded notes strin) s
5 533 M
(gs) s
5 522 M
(4.automaton graph drawn in MusicWeightedAutomaton.gv.pdf shows a condensed weighted automat) s
5 511 M
(a for an example music clip) s
5 500 M
(5.Logs for this are committed to testlogs/MusicWeightedAutomaton.log.14May2019) s
5 478 M
(-------------------------------------------------------------------------------------------) s
5 467 M
(-----------------------------------------------) s
5 456 M
(663. \(FEATURE\) Named Entity Recognition - Conditional Random Fields - Update - 16 May 2019) s
5 445 M
(-------------------------------------------------------------------------------------------) s
5 434 M
(-----------------------------------------------) s
5 423 M
(1.NamedEntityRecognition_HMMViterbi_CRF.py has been changed to removed hardcoded PoS tagged) s
5 412 M
( sentences and instead to read states and observations from two files: NamedEntityRecogniti) s
5 401 M
(on_HMMViterbi_CRF.states and NamedEntityRecognition_HMMViterbi_CRF.observations which have ) s
5 390 M
(the semi-PoS tagged sentence PoS states and sentence word observations respectively.) s
5 379 M
(2.Emission Probabilities for each state are computed by a skew normal distribution which mo) s
5 368 M
(ves the mean from left to right of the sentence as states progress.) s
5 357 M
(3.This skew normal distribution gives more weightage to respective state than others while ) s
5 346 M
(each state is observed.) s
5 335 M
(4.An example log in testlogs/NamedEntityRecognition_HMMViterbi_CRF.log.16May2019 shows the ) s
5 324 M
(skewing of probability weights from left to right of the sentence ) s
5 313 M
(5.For example, Name-Verb-Object PoS tag is weighted as : First 1/3 of sentence has more wei) s
5 302 M
(ghtage for emission probabilities of "Name",second 1/3 of sentence has more weightage for e) s
5 291 M
(mission probabilities of "Verb" and third 1/3 of sentence has more weightage for emission p) s
5 280 M
(robabilities of "Object") s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(------------) s
5 236 M
(664. \(FEATURE\) Spark 2.4 Structured Streaming - Windowed Stream - 21 May 2019) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(------------) s
5 203 M
(1.SparkGenericStreaming.java in java-src/bigdata_analytics/spark_streaming has been changed) s
5 192 M
( to do windowed structured stream if URL socket is false i.e data is read from plain socket) s
5 181 M
( stream.) s
5 170 M
(2.New boolean flag "windowed" has been added to the java class as static member based on wh) s
5 159 M
(ich Windowed streaming spark code is executed.) s
5 148 M
(3.Windowed streaming spark code fragment uses readStream\(\)/writeStream\(\) facility in Spark ) s
5 137 M
(to read data written over socket.) s
5 126 M
(4.Netcat utility creates the socket server in port 8080.) s
5 115 M
(5.Java lambda functions in FlatMapFunction tokenize the incoming stream of lines to words a) s
5 104 M
(nd organize them as word-timestamp rows dataset.) s
5 93 M
(6.Next groupBy\(\) parses word-timestamp dataset from previous lambda invocation and creates ) s
5 82 M
(structured stream of tables of columns slidingwindow_timestamp-word-count.) s
5 71 M
(7.Logs in testlogs/SparkGenericStreaming.log.21May2019 show dataframe tables for both urlso) s
5 60 M
(cket=false\(windowed=true\) and urlsocket=true boolean option settings.) s
5 49 M
(8.CLASSPATH for compilation of SparkGenericStreaming.java \(javac SparkGenericStreaming.java) s
5 38 M
(\) has been updated to:) s
5 27 M
(CLASSPATH=/media/Ubuntu2/spark-2.4.0-bin-hadoop2.7/jars/spark-streaming_2.11-2.4.0.jar:.:/m) s
5 16 M
(edia/Ubuntu2/spark-2.4.0-bin-hadoop2.7/jars/scala-library-2.11.12.jar:/media/Ubuntu2/spark-) s
5 5 M
(2.4.0-bin-hadoop2.7/jars/spark-sql_2.11-2.4.0.jar:/media/Ubuntu2/spark-2.4.0-bin-hadoop2.7/) s
_R
S
%%Page: (413) 413
%%BeginPageSetup
_S
18 36 translate
/pagenum 413 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (413) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(jars/spark-core_2.11-2.4.0.jar:/media/Ubuntu2/jdk1.8.0_171/lib/jsoup-1.11.3.jar:/media/Ubun) s
5 731 M
(tu2/spark-2.4.0-bin-hadoop2.7/jars/spark-catalyst_2.11-2.4.0.jar:/media/Ubuntu2/spark-2.4.0) s
5 720 M
(-bin-hadoop2.7/jars/scala-reflect-2.11.12.jar:/media/Ubuntu2/jdk1.8.0_171/bin:/usr/local/sb) s
5 709 M
(in:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin) s
5 698 M
(9.sparkgenericstreaming.jar is packaged as bin/jar cvf sparkgenericstreaming.jar *.class) s
5 687 M
(10.SparkGenericStreaming is executed as:) s
5 676 M
(/media/Ubuntu2/spark-2.4.0-bin-hadoop2.7/bin/spark-submit --jars /media/Ubuntu2/jdk1.8.0_17) s
5 665 M
(1/lib/jsoup-1.11.3.jar --class SparkGenericStreaming --master local[2] sparkgenericstreamin) s
5 654 M
(g.jar  "https://twitter.com/search?f=tweets&vertical=news&q=Chennai&src=typd") s
5 632 M
(/media/Ubuntu2/spark-2.4.0-bin-hadoop2.7/bin/spark-submit --jars /media/Ubuntu2/jdk1.8.0_17) s
5 621 M
(1/lib/jsoup-1.11.3.jar --class SparkGenericStreaming --master local[2] sparkgenericstreamin) s
5 610 M
(g.jar  "localhost" "8080" ) s
5 588 M
(for URLSocket and Windowed streaming respectively) s
5 577 M
(11.Reference: Spark Structured Streaming Example in https://github.com/apache/spark/blob/v2) s
5 566 M
(.4.3/examples/src/main/java/org/apache/spark/examples/sql/streaming/JavaStructuredNetworkWo) s
5 555 M
(rdCountWindowed.java) s
5 533 M
(-------------------------------------------------------------------------------------------) s
5 522 M
(-------------------------------------------------) s
5 511 M
(665. \(FEATURE\) Named Entity Recognition - Conditional Random Fields - Skew Normal Distribut) s
5 500 M
(ion Update - 29 May 2019) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(-------------------------------------------------) s
5 467 M
(1.Miscellaneous changes in NamedEntityRecognition_HMMViterbi_CRF.py for corrections to skew) s
5 456 M
( normal distribution which shifts mean of the distribution for each part of speech to the r) s
5 445 M
(ight by some constant multiples.) s
5 434 M
(2.Skew normal distribution mean shift for each state \(part of speech\) is shown in NamedEnti) s
5 423 M
(tyRecognition_HMMViterbi_CRF.29May2019.png) s
5 412 M
(3.Motivation for skew normal distribution mean shift from left to right for emission probab) s
5 401 M
(ilities is: For some part of speech state, successive word observations in the sentence rec) s
5 390 M
(eive more weightage corresponding to the peak value at mean i.e one word in the sentence pe) s
5 379 M
(aks at mean and is more likely candidate observation emitted for respective Part of Speech ) s
5 368 M
(state.) s
5 357 M
(4.In this example 5 words in the sentence peak for 5 part of speech states.) s
5 346 M
(5.logs for this commit have been committed to testlogs/NamedEntityRecognition_HMMViterbi_CR) s
5 335 M
(F.log.29May2019 ) s
5 313 M
(-------------------------------------------------------------------------------------------) s
5 302 M
(-------------------------------------------------) s
5 291 M
(666. \(THEORY\) Approximation of Majority Voting, Streaming majority, Forecasts, Bertrand Bal) s
5 280 M
(lot Theorem, Theoretical EVMs, Set Partitions - 4 June 2019) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(-------------------------------------------------) s
5 247 M
(Bertrand Ballot Theorem states: In a majority voting involving 2 candidates A and B receivi) s
5 236 M
(ng p and q votes respectively of total electorate p+q,probability of candidate A always bei) s
5 225 M
(ng ahead of candidate B in counting of votes is \(p-q\)/\(p+q\). Approximation of Majority voti) s
5 214 M
(ng has important applications in psephological forecast \(pre-poll and post-poll surveys\) wh) s
5 203 M
(ich samples electorate to predict the winner. In pure complexity theoretic perspective, as ) s
5 192 M
(has been mentioned earlier, boolean majority gate can be alternatively represented by a set) s
5 181 M
( partition of 2 candidate buckets indexed 0 and 1 and maximum size candidate bucket index i) s
5 170 M
(s the output of set partition boolean majority gate. It is also worth mentioning here that ) s
5 159 M
(approximating a majority gate of n inputs by a much smaller gate of m inputs \(m << n\) is th) s
5 148 M
(e complexity theoretic equivalent of forecasting a real-world majority voting of 2 candidat) s
5 137 M
(es by sampling m voters from an electorate of size n. It is obvious that process of countin) s
5 126 M
(g of votes creates instantaneous snapshots of the electorate set partition and any m sized ) s
5 115 M
(\(less than n\) voter set partition snapshot is equivalent to a sampling of total electorate.) s
5 104 M
( In terms of set partition definition of majority gate, both buckets of voter set partition) s
5 93 M
( 0 and 1 grow over time and at any instant the set partition of total size m is a sampling ) s
5 82 M
(of n voters.Votes for 2 candidates 1 and 0 can be drawn as timeseries polynomial curves \(vo) s
5 71 M
(tes versus time\) and intersection points of 2 curves are trend reversals contributing to th) s
5 60 M
(e probability \(p-q\)/\(p+q\). Complexity theoretic majority gate assumes all the inputs at the) s
5 49 M
( leaves are immediately available which is not possible in approximation in which only m of) s
5 38 M
( n votes are known. Majority approximation gate predicts output of majority gate of n input) s
5 27 M
(s by a majority gate of m inputs for m << n with some error probability. By Bertrand Ballot) s
5 16 M
( Theorem probability that a majority approximation gate of m inputs \(snapshot at some time ) s
5 5 M
(point\) has the same output as an exact majority gate of n inputs is \(p-q\)/\(p+q\) for total e) s
_R
S
%%Page: (414) 414
%%BeginPageSetup
_S
18 36 translate
/pagenum 414 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (414) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(lectorate p+q=n and p voters for 0 or 1 and q voters for 1 or 0. If m=a+b for a voters for ) s
5 731 M
(0 or 1 and b voters for 1 or 0 in the sample approximation, sample betrand probability is a) s
5 720 M
(ssumed to be proportional to bertrand probability of total electorate:) s
5 709 M
(        \(p-q\)/\(p+q\) = k*\(a-b\)/\(a+b\)) s
5 698 M
(        \(p-q\)/n = k*\(a-b\)/m) s
5 687 M
(        \(p-q\) = n*k*\(a-b\)/m) s
5 676 M
(which extrapolates the sample to the entire electorate.) s
5 654 M
(References:) s
5 643 M
(-----------) s
5 632 M
(666.1 Bertrand Ballot Theorem - https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(--------------------------------------------------) s
5 588 M
(667. \(FEATURE\) Social Network Analysis, People Analytics, PDF file parsing - 13 June 2019) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(--------------------------------------------------) s
5 555 M
(1. Changed SocialNetworkAnalysis_PeopleAnalytics.py to parse PDF files of social network pr) s
5 544 M
(ofiles by PyPDF2 which was not working earlier.) s
5 533 M
(2. PyPDF2 expects PDF files to be written by PDF writer or otherwise blank text is extracte) s
5 522 M
(d) s
5 511 M
(3. As example CV of self written by LaTeX2PDF has been parsed to print profile text to test) s
5 500 M
(logs/SocialNetworkAnalysis_PeopleAnalytics.log.13June2019) s
5 489 M
(4. Recursive Lambda Function Growth import has been commented because of WordNet error:) s
5 478 M
(Traceback \(most recent call last\):) s
5 467 M
(  File "<stdin>", line 1, in <module>) s
5 456 M
(  File "/usr/local/lib/python2.7/dist-packages/wn/__init__.py", line 11, in <module>) s
5 445 M
(    from wn.info import InformationContentSimilarities) s
5 434 M
(  File "/usr/local/lib/python2.7/dist-packages/wn/info.py", line 7, in <module>) s
5 423 M
(    from wn.reader import parse_wordnet_ic_line) s
5 412 M
(  File "/usr/local/lib/python2.7/dist-packages/wn/reader.py", line 22) s
5 401 M
(    offset, lexname_index, pos, n_lemmas, *the_rest = columns_str.split\(\)) s
5 390 M
(                                          ) s
5 379 M
(SyntaxError: invalid syntax) s
5 368 M
(5.LinkedIn PDF Profile has been updated by linkedin pdf export) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(----------------------------------------------) s
5 324 M
(668. \(THEORY\) Computational Geometric Factorization - Average case Sequential Optimization,) s
5 313 M
( Stirling Approximation of Gamma Function, ) s
5 302 M
(Sum of binary search times of each tile and some observations - related to 605 - 14 June 20) s
5 291 M
(19) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(----------------------------------------------) s
5 258 M
(\(*\) Average number of tiles between two approximate prime factors m and \(m+1\) found by tile) s
5 247 M
( summation ray shooting:) s
5 236 M
(                = \(m+1\)/[kloglogN - m - 1] - m/[kloglogN - m]) s
5 225 M
(because number of tiles till m-th prime factor = n = m/[kloglogN - m] for m=1,2,3,...,klogl) s
5 214 M
(ogN) s
5 203 M
(\(*\) Thus total average sequential time to sweep binary search tiles in N/kloglogN spacing b) s
5 192 M
(etween 2 consecutive approximate factors found by ray shooting:) s
5 181 M
(        = O\([\(m+1\)/[kloglogN - m - 1] - m/[kloglogN - m]] * logN\)) s
5 170 M
(\(*\) Maximum number of tiles in N/kloglogN spacing occurs by minimizing denominator and sett) s
5 159 M
(ing m=kloglogN - 2:) s
5 148 M
(        = O\([\(kloglogN - 2 + 1\)/[kloglogN - kloglogN + 2 - 1] - \(kloglogN - 2\)/[kloglogN - ) s
5 137 M
(kloglogN + 2]]\)) s
5 126 M
(        = O\(kloglogN - 1 - \(kloglogN - 2\)/2\)) s
5 115 M
(        = O\(kloglogN\)) s
5 104 M
(=> Maximum time to binary search tiles in N/kloglogN spacing = O\(loglogN * logN\)) s
5 93 M
(=> Each of O\(loglogN\) spacings between approximate factors can be searched in: ) s
5 82 M
(        O\(\(loglogN\)^2*logN\)) s
5 71 M
(average case sequential time with no necessity for parallel processing.) s
5 60 M
(\(*\) If each tile segment arithmetic progression is searched individually and sequentially, ) s
5 49 M
(sum of binary search times for first k adjacent tile segments is:) s
5 38 M
(        log N/\(1*2\) + log N/\(2*3\) + log N/\(3*4\) + ... + log N/\(k*\(k+1\)\)) s
5 27 M
(which can be written as:) s
5 16 M
(        log N - \(log 1 + log 2\) +) s
5 5 M
(        log N - \(log 2 + log 3\) +) s
_R
S
%%Page: (415) 415
%%BeginPageSetup
_S
18 36 translate
/pagenum 415 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (415) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        ...) s
5 731 M
(        log N - \(log k + log \(k+1\)\)) s
5 720 M
(by logarithmic identities and becomes:) s
5 709 M
(        k log N - \(log 1 + log \(k+1\) + 2 log k!\)) s
5 698 M
(But Gamma function is:) s
5 687 M
(        Gamma\(x+1\) = x!) s
5 676 M
(and by Stirling approximation:) s
5 665 M
(        log k! ~= log Gamma\(k+1\) = \(k+0.5\)*log k - k -1 + 0.5*log 2*pi) s
5 654 M
(Substituting in the summation:) s
5 643 M
(Total time for binary searching k adjacent tile segment arithmetic progressions = k log N -) s
5 632 M
( log \(k+1\) - \(2k + 1\)log k + 2\(k+1\) + log \(2*pi\)) s
5 610 M
(A variant approximation of this search time summation has been described in section 5 of ht) s
5 599 M
(tp://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveForIn) s
5 588 M
(tegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.pdf/downloa) s
5 577 M
(d) s
5 555 M
(if k is O\(loglogN\) from previous derivation of maximum number of tiles between 2 approximat) s
5 544 M
(e prime factors, in average case atleast one factor can be found in average time:) s
5 533 M
(        loglogN * log N - log \(loglogN + 1\) - \(2loglogN + 1\)logloglogN + 2\(loglogN+1\) + log) s
5 522 M
( \(2*pi\)) s
5 511 M
(        <= O\(logN * loglogN\)) s
5 489 M
(References:) s
5 478 M
(----------) s
5 467 M
(668.1 Stirling Approximation of Factorial and Gamma Function - https://en.wikipedia.org/wik) s
5 456 M
(i/Stirling%27s_approximation#Stirling's_formula_for_the_gamma_function) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(--------------------------------------------------) s
5 412 M
(669. \(THEORY\) Computational Geometric Factorization, Ramsey Coloring and Arithmetic Progres) s
5 401 M
(sions in the Tile Segments, Van Der Waerden) s
5 390 M
(Numbers - related to 636 - 19 June 2019) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(--------------------------------------------------) s
5 357 M
(By Van Der Waerden theorem, for any positive integers r and k there is number N such that i) s
5 346 M
(f the numbers {1,2,3,...,N} are colored, each with) s
5 335 M
(one of the r different colors then there are atleast k integers in arithmetic progression w) s
5 324 M
(hose elements are of same color. Computational) s
5 313 M
(Geometric Factorization is based on rectification of hyperbolic curve into straightline or ) s
5 302 M
(rectangular polygonal tile segments \(of dimensions 1 * length_of_segment\) and reducing the ) s
5 291 M
(factorization problem to parallel RAM planar point location of factor points \(i.e hyperboli) s
5 280 M
(c curve is rectified to a polygon containing arithmetic progression of products of ordinate) s
5 269 M
(s as its rectangular faces, parallel planar point location finds a rectangular face of the ) s
5 258 M
(polygon having the factor point N=pq in polylogarithmic time and the rectangular face arith) s
5 247 M
(metic progression having factor point is binary searched in logarithmic time - thus in NC\) ) s
5 236 M
(in this rectified polygon. Each hyperbolic tile segment obtained by rectification are const) s
5 225 M
(rued to be arrays of products of ordinates or arrays of ordered pair of ordinates in x-axis) s
5 214 M
( and y-axis. Unsorted Concatenation of these tile segments of ordered pair of ordinates has) s
5 203 M
( the x-axis or y-axis sorted ascending from 1 to N \(or sqrt\(N\) to N\). Since arrays of produ) s
5 192 M
(ct or ordered pair of ordinates in each tile segment have one of the ordinates constant, ea) s
5 181 M
(ch tile segment array is an arithmetic progression of ordinate products elements of which a) s
5 170 M
(re colored monochromatically. Factor point location by parallel RAM sorting based on produc) s
5 159 M
(t of ordinates of ordered pairs in tile segments sorts the product of ordinates but shuffle) s
5 148 M
(s the x-axis ordinate in ordered pair notation which was strictly ascending in unsorted con) s
5 137 M
(catenation. Sorted concatenation of tile segments of product of ordinates is the union of s) s
5 126 M
(ubsets of elements in each monochromatic arithmetic progression and creates a \(pseudo\)rando) s
5 115 M
(m coloring of sorted sequence of integers in the range {N-delta,N+delta}. In other words re) s
5 104 M
(ctification of hyperbolic curve just inverts the Van Der Waerden theorem - instead of findi) s
5 93 M
(ng monochromatic arithmetic progressions in a colored sequence, it forms a mergesorted sequ) s
5 82 M
(ence from monochromatic arithmetic progressions in tile segments. Since rectification of hy) s
5 71 M
(perbolic curve for every integer creates unique set of tile segments, previous inverse of V) s
5 60 M
(an Der Waerden coloring is also unique.) s
5 38 M
(-------------------------------------------------------------------------------------------) s
5 27 M
(--------------------------------------------------) s
5 16 M
(670. \(THEORY\) Computational Geometric NC-PRAM Factorization, Tile Summation Ray Shooting Qu) s
5 5 M
(eries and Gamma approximation, Iterated addition for sum of tile segment lengths - 27 June ) s
_R
S
%%Page: (416) 416
%%BeginPageSetup
_S
18 36 translate
/pagenum 416 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (416) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(2019 - related to 506, 668) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(--------------------------------------------------) s
5 709 M
(Tile summation ray shooting queries:) s
5 698 M
(------------------------------------) s
5 687 M
(Sum of lengths of first n tile segments of pixelated hyperbolic curve derived previously:) s
5 676 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] = Nn/\(n+1\)) s
5 665 M
(which can be equated to sum of distances between first m prime factors by Hardy-Ramanujan T) s
5 654 M
(heorem:) s
5 643 M
(        Nn/\(n+1\) = mN/kloglogN) s
5 621 M
(=> n = m/\(kloglogN - m\) = number of tiles till m-th prime factor. ) s
5 599 M
(Gamma approximated tile summation ray shooting queries:) s
5 588 M
(-------------------------------------------------------) s
5 577 M
(Alternatively, sum of lengths of tiles obtained approximately from sum of binary search tim) s
5 566 M
(es by Gamma function previously can be equated to Hardy-Ramanujan normal order estimate:) s
5 555 M
(        2^\(n log N - log \(n+1\) - \(2n + 1\)log n + 2\(n+1\) + log \(2*pi\)\) = mN/kloglogN) s
5 544 M
(        \(or\) \(n log N - log \(n+1\) - \(2n + 1\)log n + 2\(n+1\) + log \(2*pi\)\) = log\(mN/kloglogN\)) s
5 533 M
(and solved for number of tiles n that have to be summed till m-th prime factor. Total Binar) s
5 522 M
(y Search time has been raised to exponent to get approximate total length searched. Solving) s
5 511 M
( logarithmic equation previously might require some logarithmic series approximation result) s
5 500 M
(ing in a cubic equation or higher degree in n depending on number of terms chosen from loga) s
5 489 M
(rithmic series. ) s
5 467 M
(An important fact ignored so far is the summing of tile lengths while doing ray shooting qu) s
5 456 M
(eries which has to be parallelized too. But tile summation is an iterated addition of O\(N\) ) s
5 445 M
(logN bit integers \(tile lengths are rounded off\) which is in NC1. Thus Computational Geomet) s
5 434 M
(ric NC-PRAM planar point location factorization invoking tile summation ray shooting query ) s
5 423 M
(oracles is in NC again. It can be noted that most other ray shooting query algorithms do no) s
5 412 M
(t have this iterated addition of tile lengths requirement.) s
5 390 M
(References:) s
5 379 M
(----------) s
5 368 M
(670.1 Iterated addition of n n-bit integers is in NC1 - Theorem 8.9 - https://courses.cs.wa) s
5 357 M
(shington.edu/courses/cse532/08sp/lect08.pdf) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-----------------------------------------------) s
5 313 M
(671. \(THEORY and FEATURE\) Intrinsic Merit of Music - MFCC analysis and zero crossing rate -) s
5 302 M
( 27 June 2019) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(-----------------------------------------------) s
5 269 M
(1.AudioToBitMatrix.py MFCC function has been updated to scale MFCCs by sklearn and print me) s
5 258 M
(an and variance of MFCCs of an audio/music waveform) s
5 247 M
(2.zero crossing rate of waveform is also printed which is measure of modulations in music.) s
5 236 M
(3.One of the ways to measure Music merit and Music Genre or Emotion Classification is by cl) s
5 225 M
(ustering music waveforms by distance similarity of MFCCs.) s
5 214 M
(4.MFCC similarity can be used as recommender system where a listener is recommended music o) s
5 203 M
(f similar MFCCs based on historic listening habits.) s
5 192 M
(5.MFCCs of music waveform drawn as images \(e.g by librosa.display.specshow\(\)\) can be compar) s
5 181 M
(ed for similarities.) s
5 159 M
(Reference:) s
5 148 M
(----------) s
5 137 M
(671.1 Music Information Retrieval and MFCCs - https://musicinformationretrieval.com/mfcc.ht) s
5 126 M
(ml) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(-----------------------------------------------) s
5 82 M
(672. \(FEATURE and THEORY\) Intrinsic Merit of People/Professional Profiles - People Analytic) s
5 71 M
(s - Tenure Histogram - 28 June 2019) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(-----------------------------------------------) s
5 38 M
(1.People Analytics implementation has been updated to print Work and Academic Tenure stints) s
5 27 M
( as array \(histogram or integer partition\)) s
5 16 M
(2.This essentially makes tenures as a set partition analytics problem because job and acade) s
5 5 M
(mic stint time durations can be picturized as) s
_R
S
%%Page: (417) 417
%%BeginPageSetup
_S
18 36 translate
/pagenum 417 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (417) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(histograms.) s
5 731 M
(3.Tenures represented as Set Partitions can be quantified by set partition measure of parti) s
5 720 M
(tion rank:) s
5 709 M
(        Length of largest part in  partition - Number of parts in partition ) s
5 698 M
(4.In the context of People Analytics, previous rank measure is quite applicable practically) s
5 687 M
( as attrition metric because:) s
5 676 M
(        4.1 High partition rank implies the professional profile has spent large duration i) s
5 665 M
(n an organization or number of tenure switches are less \(number of parts\)) s
5 654 M
(        4.2 Low Partition rank implies the professional profile has low duration per organi) s
5 643 M
(zation or high number of tenure switches) s
5 632 M
(5.Tenure Partition can be printed as Ferrer or Young Diagram and size of Durfee Square of t) s
5 621 M
(his tenure partition is also a measure of average time spent per organization and thus an a) s
5 610 M
(ttrition metric) s
5 599 M
(6.Recursive Lambda Function Growth wordnet error has been resolved \(pywsd is not used\) and ) s
5 588 M
(import uncommented.) s
5 577 M
(7.logs for this have been committed to testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.2) s
5 566 M
(8June2019) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-------------------------------------------------) s
5 522 M
(673. \(FEATURE\) People Analytics - Partition Rank Attrition Metric of Tenure Histogram - 29 ) s
5 511 M
(June 2019) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-------------------------------------------------) s
5 478 M
(1.People Analytics implementation has been updated to compute partition rank described prev) s
5 467 M
(iously \(Crank of a Partition - Freeman Dyson - https://en.wikipedia.org/wiki/Crank_of_a_par) s
5 456 M
(tition\) of tenure histogram set partition of a person's professional and academic profile.) s
5 445 M
(2.Recursive Lambda Function Growth algorithm has been applied to text of the profile again.) s
5 434 M
(Closeness and Betweenness Centralities rankings are quite relevant than other Centrality me) s
5 423 M
(asures.) s
5 412 M
(3.Logs for this have been committed to testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.2) s
5 401 M
(9June2019) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(--------------------------------------------------) s
5 357 M
(674. \(FEATURE\) People Analytics - Rank Correlation based Attrition Model of Tenure Histogra) s
5 346 M
(m - 1 July 2019) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(--------------------------------------------------) s
5 313 M
(1. People Analytics implementation has been updated to include a function to compute Correl) s
5 302 M
(ation Coefficients of Statistical Dependence between vectors of Tenure Histograms.) s
5 291 M
(2. Tenure Histogram is deemed as a set of vectors of the form \(organization/designation, in) s
5 280 M
(come, duration\) which captures the crucial factors of a tenure) s
5 269 M
(3. New function tenure_partition_rank_correlation\(\) has been implemented to compute rank co) s
5 258 M
(rrelations between each pair of variables of a tenure:) s
5 247 M
(        3.1 Designations versus Remunerations) s
5 236 M
(        3.2 Designations versus Durations) s
5 225 M
(        3.3 Remunerations versus Durations) s
5 214 M
(4.An example tenure histogram vectors of previous format has been analyzed \(presently not p) s
5 203 M
(arsed from profiles\) for Kendall-Tau Rank correlation coefficient and logs are in testlogs/) s
5 192 M
(SocialNetworkAnalysis_PeopleAnalytics.log.1July2019) s
5 181 M
(5.Previous correlations can be interpreted as below:) s
5 170 M
(        5.1 Designations versus Remunerations - If positive or high, professional profile h) s
5 159 M
(as increasing career graph along with increasing remunerations \(expected\). If negative or l) s
5 148 M
(ow, professional profile has increasing career graph vis-a-vis reduced remunerations \(not e) s
5 137 M
(xpected - implies profile preferred more challenging roles than remuneration\) and vice-vers) s
5 126 M
(a \(not expected - implies profile preferred better remuneration than designations\)) s
5 115 M
(        5.2 Designations versus Durations - If positive or high, profile has increasing car) s
5 104 M
(eer graph vis-a-vis durations of tenure \(expected\). If negative or low profile has increasi) s
5 93 M
(ng career graph vis-a-vis decreasing durations per tenure \(not quite expected - increased d) s
5 82 M
(esignations  were not appealing to profile and person decided to leave\) and vice-versa \(not) s
5 71 M
( quite expected - decreasing responsibilities of the role were preferred by the profile whi) s
5 60 M
(ch decided to stay longer\) ) s
5 49 M
(        5.3 Remunerations versus Durations - If positive or high, profile has increasing em) s
5 38 M
(oluments versus increasing durations per tenure \(expected\). If negative or low profile has ) s
5 27 M
(increasing remunerations against decreasing durations per tenure \(not quite expected - prof) s
5 16 M
(ile was more inclined to salary\) and vice-versa \(not quite expected - profile stayed longer) s
5 5 M
( per tenure despite decreasing benefits\). ) s
_R
S
%%Page: (418) 418
%%BeginPageSetup
_S
18 36 translate
/pagenum 418 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (418) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(6. Previous interpretations facilitate inferences \(in parentheses\) of why attritions could ) s
5 731 M
(have happened.) s
5 720 M
(7. From logs following positive and negative correlations are found and can be interpreted ) s
5 709 M
(based on \(5\):) s
5 698 M
(        Kendall Tau Rank Correlations - Designations and Remunerations: tau= 0.714285714285) s
5 687 M
(7143 , pvalue= 0.0301587301587) s
5 676 M
(        Kendall Tau Rank Correlations - Designations and Durations: tau= -0.097590007294853) s
5 665 M
(31 , pvalue= 0.7612636496364197) s
5 654 M
(        Kendall Tau Rank Correlations - Durations and Remunerations: tau= -0.19518001458970) s
5 643 M
(663 , pvalue= 0.5434238636256696) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(--------------------------------------------------) s
5 599 M
(675. \(FEATURE\) Urban Planning Analytics - Analysis of Remote Sensing GIS Imagery of Urban S) s
5 588 M
(prawls - 3 July 2019) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(--------------------------------------------------) s
5 555 M
(1.Analyzing Builtup land, Water bodies etc., of an urban sprawl is crucial for urban planne) s
5 544 M
(rs and is an apt application of image analysis. Urban sprawl is defined as expanse of urban) s
5 533 M
(ization in suburbs and is not measured by governance limits. For example rankings of metrop) s
5 522 M
(olitan areas in India is: https://en.wikipedia.org/wiki/List_of_metropolitan_areas_in_India) s
5 511 M
( \("...) s
5 500 M
(Rank    Metropolitan area       State/Territory Population) s
5 489 M
(Area) s
5 478 M
(\(in km2/sq mi\)) s
5 467 M
(1       Central National Capital Region Delhi, Haryana, Uttar Pradesh   25,735,000 \(2016\)[3) s
5 456 M
(]       2,163 \(835\)[3]) s
5 445 M
(2       Mumbai Metropolitan Region      Maharashtra     20,800,000 \(2005\)[4]    4,354 \(1,68) s
5 434 M
(1\)[5]) s
5 423 M
(3       Kolkata metropolitan area       West Bengal     14,720,000 \(2001\)[6]    1,851 \(715\)) s
5 412 M
([7]) s
5 401 M
(4       Chennai metropolitan area       Tamil Nadu      13,300,253 \(2011\)       1,189 \(459\)) s
5 390 M
(..."\)) s
5 379 M
(which is measure of urbanization.) s
5 357 M
(2.Convex Hull based on Scipy Spatial for urban sprawls has already been implemented in Imag) s
5 346 M
(eGraph_Keras_Theano.py for GIS images from SEDAC \(http://sedac.ciesin.columbia.edu/mapping/) s
5 335 M
(popest/gpw-v4/\) which is also invoked in Drone Online Shopping Delivery NeuronRain usecase) s
5 324 M
(3.A Machine Learning \(Random Forests\) and entropy based analysis of Chennai Urban Sprawl - ) s
5 313 M
(https://www.mdpi.com/1099-4300/19/4/163/pdf - studies the growth of built area and dwindlin) s
5 302 M
(g of water bodies from 1991 to 2016 and predicts scenario for 2027. Images referred to in t) s
5 291 M
(his article are drawn from various Remote Sensing satellite sources \(LandSat, ISRO-Bhuvan G) s
5 280 M
(eo Platform - https://bhuvan.nrsc.gov.in/bhuvan_links.php etc.,\) and are great references f) s
5 269 M
(or Chennai Urban Sprawl Land Usage,Water bodies,Greenery etc.,.) s
5 258 M
(4.Images from https://www.mdpi.com/1099-4300/19/4/163/pdf have been extracted and are analy) s
5 247 M
(zed for Red, Green and Blue Channels in this commit. New python function analyze_remotesens) s
5 236 M
(ing_RGB_patches\(\) has been implemented for this which invokes OpenCV2 split\(\) of the image ) s
5 225 M
(to Red,Green,Blue channels.) s
5 214 M
(5.Rationale for Red-Green-Blue Channel split of Urban Sprawl is most of the images are colo) s
5 203 M
(r coded in Red, Green and Blue for Built Area, Greenery and Water bodies respectively and s) s
5 192 M
(plitting to respective color channels layers the image.) s
5 181 M
(6.Each color channel - Red. Green and Blue - is a NumPy ndarray which is flattened and hist) s
5 170 M
(ograms are computed for each color channel.) s
5 159 M
(7.Color channel images are written to JPG files of respective suffixes and read again to co) s
5 148 M
(mpute Numpy histogram) s
5 137 M
(8.Each color channgel image is grayscale only and percentage of white pixels of value 255 i) s
5 126 M
(s the sum total size of respective color patch in image.) s
5 115 M
(9.Scikit Learn Image has extract_patches_2d\(\) function - https://scikit-learn.org/stable/mo) s
5 104 M
(dules/generated/sklearn.feature_extraction.image.extract_patches_2d.html - which can segmen) s
5 93 M
(t an image to patches or clusters of similar features. But a native implementation of patch) s
5 82 M
( extraction has been preferred for color coded GIS Remote Sensing images.) s
5 71 M
(10.Ratio of white pixels to total number of pixels is computed from color channel image his) s
5 60 M
(tograms as:) s
5 49 M
(Size of 255 \(white\) bucket in image ndarray histogram / Sum of sizes of all buckets in imag) s
5 38 M
(e ndarray histogram) s
5 27 M
(11.Images extracted from https://www.mdpi.com/1099-4300/19/4/163 and their color channel im) s
5 16 M
(ages have been committed to ImageNet/testlogs/RemoteSensingGIS/) s
5 5 M
(12.Logs for this are committed to testlogs/ImageGraph_Keras_Theano.log.RemoteSensingGIS.3Ju) s
_R
S
%%Page: (419) 419
%%BeginPageSetup
_S
18 36 translate
/pagenum 419 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (419) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ly2019 which print the percentage of water bodies \(blue\), built area \(red\) and greenery \(gr) s
5 731 M
(een\) inferred from color channels) s
5 720 M
(13.Alternatively, image ndarray itself could have been mapped to histograms and ratio of re) s
5 709 M
(spective pixel color value buckets could have been computed. But exact color value for each) s
5 698 M
( color coding is not known and color channels grayscale the images and just number of white) s
5 687 M
( pixels \(255\) have to be found.) s
5 665 M
(-------------------------------------------------------------------------------------------) s
5 654 M
(-----------------------------------------------) s
5 643 M
(676. \(FEATURE\) Image Analytics - ImageNet Keras-Theano - Random Forest Classification wrapp) s
5 632 M
(er for images - 4 July 2019) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(-----------------------------------------------) s
5 599 M
(1.New wrapper function has been implemented which invokes scikit learn Random Forests - htt) s
5 588 M
(ps://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html) s
5 577 M
(#sklearn.ensemble.RandomForestClassifier.predict to classify set of test images based on) s
5 566 M
(training images and training labels.) s
5 555 M
(2.This wrapper function random_forest_image_classification\(\) pre-processes the training and) s
5 544 M
( test images by loading to CV2 and flattening the) s
5 533 M
(image ndarray and then reshaping and transposing it so that scikit learn accepts.) s
5 522 M
(3.First the random forest classifier which is a forest of lot of decision trees which vote ) s
5 511 M
(to decide the class label of a sample, is trained by fit\(\) for training images and then tes) s
5 500 M
(t images are labelled by predict\(\)) s
5 489 M
(4.Logs for this are committed to ImageGraph_Keras_Theano.log.RandomForests.4July2019) s
5 478 M
(5.Scikit learn provides train_test_split function which divides set of samples into trainin) s
5 467 M
(g and test images based on which fit\(\) and predict\(\) are invoked.) s
5 456 M
(6.Alternative version without training and test split also follows the above as in logs.) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(------------------------------------------------) s
5 412 M
(677. \(FEATURE\) Image Analytics - ImageNet Keras-Theano - Unsupervised Recursive Gloss Overl) s
5 401 M
(ap classifier based on ImageNet - 5 July 2019) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(------------------------------------------------) s
5 368 M
(1.As opposed to Random Forest classifier implemented earlier based on scikit learn, NeuronR) s
5 357 M
(ain unsupervised graph theoretic Recursive Gloss Overlap classifier has been applied for so) s
5 346 M
(me test images) s
5 335 M
(2.Recursive Gloss Overlap classify\(\) function has been invoked from imagenet_imagegraph\(\) w) s
5 324 M
(hich was earlier only creating text graph from Keras) s
5 313 M
( predictions text for the image.) s
5 302 M
(3.Example Dense subgraph \(core number\) classifications for these images in the logs at test) s
5 291 M
(logs/ImageGraph_Keras_Theano.log.ImageNetClassifier.5July2019 are reasonably accurate and c) s
5 280 M
(lassify the images better. No training labelled data are required.) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(----------------------------------------------) s
5 236 M
(678. \(THEORY\) Majority Hardness Amplification Lemma, Noise Sensitivity, Sensitivity, Block ) s
5 225 M
(Sensitivity - 6 July 2019 - related to) s
5 214 M
(517 ) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(----------------------------------------------) s
5 181 M
(Hardness of a boolean function has been defined previously as how hard computationally it i) s
5 170 M
(s to compute the function with a circuit of size s:) s
5 159 M
(        if Pr\(C\(x\) != f\(x\)\) = delta where C\(x\) computes boolean function f\(x\), then f\(x\) de) s
5 148 M
(lta-hard.) s
5 137 M
(Hardness amplification for Majority + VoterSAT boolean composition has been derived earlier) s
5 126 M
( as:) s
5 115 M
(        Hardness Amplification for Majority+Voter Composition <= 1/\(delta + or - error\)*\(1/) s
5 104 M
(2-1/3*pi\) + 1/pi + 6k*pi*\(delta + or - error\)^0.5) s
5 93 M
(for delta-hard voter SAT boolean functions \(i.e Probability of a circuit incorrectly comput) s
5 82 M
(ing a voter SAT = delta\)) s
5 60 M
(Noise Sensitivity of Majority function has been previously mentioned as O\(1/sqrt\(n*epsilon\)) s
5 49 M
(\) where epsilon is probability of flip per bit. Therefore epsilon is nothing but probabilit) s
5 38 M
(y that a voter boolean function is incorrectly computed and sent as input to Majority funct) s
5 27 M
(ion. This implies Pr\(f\(x\) != C\(x\)\) = delta = epsilon = hardness of all voter functions.) s
5 5 M
(In all sections related to majority voting and majority+voterSAT boolean composition, measu) s
_R
S
%%Page: (420) 420
%%BeginPageSetup
_S
18 36 translate
/pagenum 420 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (420) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(re of sensitivity used is Noise Sensitivity which is Pr\(f\(x\) != f\(y\)\) for 2 correlated bool) s
5 731 M
(ean strings x and y in {0,1}^n and sensitivity and block sensitivity measures have been ign) s
5 720 M
(ored. Lemma 15 in reference 678.1 provides a simple boolean hypercube random walk proof of ) s
5 709 M
(relation between sensitivity and Noise sensitivity from which:) s
5 698 M
(        NoiseSensitivity\(f\) <= 2*delta*sensitivity for probability of a bit flip = delta = ) s
5 687 M
(epsilon) s
5 676 M
(        => NoiseSensitivity\(Majority\) = O\(1/sqrt\(n*epsilon\)\) <= 2*delta*sensitivity) s
5 654 M
(Since sensitivity conjecture \(block sensitivity <= poly\(sensitivity\)\) has been proved recen) s
5 643 M
(tly, sensitivity in previous inequality can be written as a function of block sensitivity. ) s
5 632 M
(Majority Hardness Amplification ratio then can be written as:) s
5 610 M
( Hardness of Maj+voter composition       [c/sqrt\(n*delta\)] +/- randomerror) s
5 599 M
(-----------------------------------  =  ------------------------------    <= 2*delta*sensit) s
5 588 M
(ivity/delta +/- error <= 2*sensitivity +/- error) s
5 577 M
(   Hardness of voter function                  delta) s
5 555 M
(which upperbounds the maximum hardness amplification of Majority+VoterSAT composition almos) s
5 544 M
(t as twice of sensitivity of majority function.) s
5 522 M
(NOTE: Throughout all sections on Majority Voting + VoterSAT boolean composition and its har) s
5 511 M
(dness amplification, Sensitivity measures have been assumed as main contributors to hardnes) s
5 500 M
(s because by definition a hard boolean function is not 100% correctly computable by a circu) s
5 489 M
(it and sensitivity to input correlation \(flipped bits\) is the major factor preventing the c) s
5 478 M
(orrect computation by circuit. There could be other factors intrinsic to boolean function i) s
5 467 M
(tself too apart from sensitivity measures which prevent a circuit from being perfect charac) s
5 456 M
(terized by \(+/-\) error term above - randomized decision tree evaluation being one of them.) s
5 445 M
(        ) s
5 434 M
(References:) s
5 423 M
(-----------) s
5 412 M
(678.1 Smooth Boolean functions are easy - [Parikshit Gopalan,Noam Nisan,Rocco A.Servedio,Ku) s
5 401 M
(nal Talwar,Avi Wigderson] - Lemma 15 - http://www.math.ias.edu/~avi/PUBLICATIONS/GopalanNST) s
5 390 M
(W.pdf) s
5 379 M
(678.2 Proof of Sensitivity Conjecture - [Huang] - http://www.mathcs.emory.edu/~hhuan30/pape) s
5 368 M
(rs/sensitivity_1.pdf) s
5 346 M
(-------------------------------------------------------------------------------------------) s
5 335 M
(-------------------------------------------------) s
5 324 M
(679. \(FEATURE and THEORY\) Fraud Analytics - Principal Component Analysis and KMeans++ clust) s
5 313 M
(ering of an example Credit Card Transactions) s
5 302 M
(Dataset - 8 July 2019) s
5 291 M
(-------------------------------------------------------------------------------------------) s
5 280 M
(-------------------------------------------------) s
5 269 M
(1.This commit implements a rudimentary primitive fraud analytics Python class) s
5 258 M
(2.Fraud Analytics in the context of NeuronRain has already been implemented to some extent ) s
5 247 M
(in USBmd as wireless LAN traffic analytics and ftrace based analysis which is a low level i) s
5 236 M
(ntrusion fraud analytics) s
5 225 M
(3.To broaden the purview new file FraudAnalytics.py has been added to AstroInfer repositori) s
5 214 M
(es and a basic fraud analysis function for credit card data set from https://www.kaggle.com) s
5 203 M
(/mlg-ulb/creditcardfraud/downloads/creditcardfraud.zip/3 has been implemented - creditcard_) s
5 192 M
(fraud_analytics\(\)) s
5 181 M
(4.Traditional algorithm to analyze frauds is to find the outliers in a dataset which are de) s
5 170 M
(viations from the normal.) s
5 159 M
(5.This function applies kmeans++ clustering from scikit learn to classify the previous kagg) s
5 148 M
(le creditcard transactions dataset into two clusters 0 \(normal\) and 1 \(potential fraud\).) s
5 137 M
(6.Kaggle dataset is in CSV format and first 500 rows of it are read by python CSV reader an) s
5 126 M
(d a NumPy ndarrays are created from it which splits ) s
5 115 M
(the transactions into 150 rows training set and 350 rows test set.) s
5 104 M
(7.Columns of the CSV file are Time, 28 columns which obfuscate the identity of the cardhold) s
5 93 M
(er, Amount, label 0 or 1 \(normal or fraud\) which are real transactions happened in 2013 and) s
5 82 M
( each column is considered as a dimension for tranasaction vector) s
5 71 M
(8.Classifying high dimensional data has variety of clustering algorithms including kmeans++) s
5 60 M
( \(https://scikit-learn.org/stable/modules/clustering.html\)) s
5 49 M
(9.To simiplify high dimensional data, convention followed is to apply Principal component A) s
5 38 M
(nalysis to reduce the number of dimensions and then do clustering. e.g https://scikit-learn) s
5 27 M
(.org/stable/modules/generated/sklearn.decomposition.PCA.html, https://scikit-learn.org/stab) s
5 16 M
(le/auto_examples/cluster/plot_kmeans_digits.html#sphx-glr-auto-examples-cluster-plot-kmeans) s
5 5 M
(-digits-py) s
_R
S
%%Page: (421) 421
%%BeginPageSetup
_S
18 36 translate
/pagenum 421 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (421) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(10.Therefore previous credit card transactions vectors are clustered by fit\(\) of the train ) s
5 731 M
(dataset followed by predict\(\) for test dataset.) s
5 720 M
(11.Both predictions- with and without PCA - have been printed for 350 rows test dataset \(0 ) s
5 709 M
(- normal,1 - fraud\):) s
5 698 M
(kmeans estimator pred\(\) labels: [1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 ) s
5 687 M
(0 0 0 0 0 0 0 0) s
5 676 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 665 M
( 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 654 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 643 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 632 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 621 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 610 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 599 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0) s
5 588 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 577 M
(kmeans estimator pca pred\(\) labels: [1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 ) s
5 566 M
(0 0 0 0 0 0 0 0 0 0) s
5 555 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 544 M
( 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 533 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0) s
5 522 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 511 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 500 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 489 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 478 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0) s
5 467 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 456 M
(12.Another alternative is to consider the dataset as multiple concurrent timeseries and plo) s
5 445 M
(t the curves per cardholder identity. Spikes in timeseries are outliers which could be pote) s
5 434 M
(ntially fraudulent.) s
5 412 M
(-------------------------------------------------------------------------------------------) s
5 401 M
(---------------------------------------------------) s
5 390 M
(680. \(FEATURE\) Intrinsic Merit of Audio - Speech Recognition Integration and Graph Tensor N) s
5 379 M
(euron Merit of the recognized speech text -) s
5 368 M
(9 July 2019) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(---------------------------------------------------) s
5 335 M
(1.AudioToBitMatrix python implementation has been updated to include a new function which r) s
5 324 M
(eads an audio WAV file of human speech and invokes speech recognizer \(PocketSphinx\) on the ) s
5 313 M
(audio to get speech text and finds the Recursive Lambda Function Growth intrinsic merit of ) s
5 302 M
(the speech) s
5 291 M
(text) s
5 280 M
(2.Audio merit is split into two - Speech and Music) s
5 269 M
(3.An example speech audio file \(voice of author - K.Srinivasan - explains the 6 types of in) s
5 258 M
(trinsic merit analytics implemented in NeuronRain AstroInfer - text,video,speech,music,peop) s
5 247 M
(le-experiential-intrinsic, people-attrition or HR analytics\) is used for speech recognition) s
5 236 M
( - music_pattern_mining/testlogs/AudioGraphExample_SpeechRecognition_2019-07-09-103018.wav) s
5 225 M
(4.Prerequisite packages to be installed are Python SpeechRecognition, PocketSphinx, Swig, A) s
5 214 M
(LSA development library, PulseAudio development library) s
5 203 M
(5.PocketSphinx recognized speech text is printed \(though not accurate\) and Recursive Lambda) s
5 192 M
( Function Growth grow_lambda_function3\(\) is invoked on recognized speech text to create tex) s
5 181 M
(tgraph, grow lambda functions from textgraph random walks or cycles and print various merit) s
5 170 M
( quantities) s
5 159 M
(6.This assumes Speech Recognizer is accurate to large extent.) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(-------------------------------------------------) s
5 115 M
(681. \(THEORY and FEATURE\) Intrinsic Merit of Music - MFCC Earth Mover Distance similarity b) s
5 104 M
(ased Music Recommender - 12 July 2019) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(-------------------------------------------------) s
5 71 M
(1.Mel Frequency Cepstral Coefficients of a music waveform are concise measures of music gen) s
5 60 M
(re and have been included in AudioToBitMatrix implementation) s
5 49 M
(2.Music Similarity Measure based on MFCC spectral signatures is described in http://citesee) s
5 38 M
(rx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.8524&rep=rep1&type=pdf which clusters music f) s
5 27 M
(iles based on earth mover distance between MFCCs of any two music files) s
5 16 M
(3.Earth Mover Distance also known as Wasserstein distance is a function in SciPy - https://) s
5 5 M
(docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wasserstein_distance.html) s
_R
S
%%Page: (422) 422
%%BeginPageSetup
_S
18 36 translate
/pagenum 422 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (422) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(4.Earth Mover Distance is the amount of work required to transform one distribution \(set pa) s
5 731 M
(rtition or histogram\) to another distribution \(another set partition or histogram\) and thus) s
5 720 M
( is distance measure between two set partitions.) s
5 709 M
(5.A miniature music recommender systems has been implemented based on MFCC earth mover dist) s
5 698 M
(ance which analyzes pair of music files for MFCCs and finds the earth mover similarity betw) s
5 687 M
(een the mean of MFCCs of two music files.) s
5 676 M
(6.Pairwise earth mover distances \(EMD\) are sorted by values of similarity \(low EMD values i) s
5 665 M
(mply high similarity\)) s
5 654 M
(7.3 music files have been pairwise analyzed for MFCC EMD similarity for example \(2 files of) s
5 643 M
( Bach Sonata and 1 file of Veena Instrumental - S.Balachander's Amritavarshini - respective) s
5 632 M
( copyrights attributed\) ) s
5 621 M
(8.Though number of files analyzed is small, Bach Sonata files have high EMD similarities co) s
5 610 M
(mpared to Bach and Veena Instrumental suggesting a clustering of oriental and western class) s
5 599 M
(ical music in terms of spectral analysis.) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(----------------------------------------------) s
5 555 M
(682. \(THEORY\) KRW Conjecture, Majority + VoterSAT Boolean Function Composition, BKS Conject) s
5 544 M
(ure, Computing any function by Parity - 12 July 2019, 17 July 2019, 18 July 2019, 19 July 2) s
5 533 M
(019, 22 July 2019 - related to 365, 368 and all sections on Majority Voting) s
5 522 M
(-------------------------------------------------------------------------------------------) s
5 511 M
(----------------------------------------------) s
5 500 M
(Boolean function composition of Majority and any Voter boolean function and its relevance t) s
5 489 M
(o KRW Conjecture \(Depth\(f+g\) ~= Depth\(f\) + Depth\(g\) or FormulaSize\(f+g\) ~= FormulaSize\(f\) *) s
5 478 M
( FormulaSize\(g\)\) and Communication Complexity - KW Relations - which is an open problem - h) s
5 467 M
(ave been described in detail earlier and an inequality below for lower bound on depth of ci) s
5 456 M
(rcuit computing Majority+VoterSAT composition has been derived assuming KRW conjecture:) s
5 445 M
(        D\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\) >= 5.3*logm  + n - O\(m*logm/) s
5 434 M
(n\)) s
5 423 M
(for m voters having voter SATs of n variables per voter.) s
5 401 M
(KRW Conjecture for composing any boolean function f and parity has been proved by [Hastad] ) s
5 390 M
(and [Dinur-OrMeir]. Proving the general case of KRW conjecture implies P != NC1 \(not all se) s
5 379 M
(quential polytime algorithms are logdepth parallelizable\). If every Voter boolean functions) s
5 368 M
( are computable by circuits of AND, OR and Parity function, previous composition of Majorit) s
5 357 M
(y + VoterSAT is reduced to Majority + function_of\(Parity\) composition replacing Voter SAT c) s
5 346 M
(ircuit by a circuit of AND, OR and parity gates. Recent result in reference 682.2 delves on) s
5 335 M
( upperbounds and lowerbounds for computing symmetric and threshold boolean functions by par) s
5 324 M
(ity gates \(Razborov approximation of AND and OR by low degree polynomials on F[2] and compo) s
5 313 M
(sing them\). Voter decision function can also be thought of as a threshold function \(weighti) s
5 302 M
(ng the variables\). Stability of Interview TQBF has been derived earlier in the context of B) s
5 291 M
(KS Conjecture by formalizing a question-answering in machine learning and learning theory a) s
5 280 M
(s a weighted linear threshold function on answers to questions and their respective weights) s
5 269 M
(. Generalizing proof of KRW Conjecture for composing a function and parity to composition o) s
5 258 M
(f a function and function_of\(parity\) proves the general case of KRW Conjecture. In referenc) s
5 247 M
(e 682.4 previous Communication Complexity \(CC\) Lower bound of composition has been refined ) s
5 236 M
(to CC\(KWf + Un\) \342\\211\245 log L\(f\) + n \342\\210\\222 2 log m \342\\210\\222 10 implying CC\(Majority+Vot) s
5 225 M
(er\) \342\\211\245 5.3*log m + n \342\\210\\222 2*log m \342\\210\\222 10 assuming a universal Voter relation) s
5 214 M
(.) s
5 192 M
(Assuming Voter SATs are indeed Linear or Polynomial Threshold Functions by which each voter) s
5 181 M
( scores the candidate to vote \(0 or 1\) based on some variables \(e.g answers to questions\) a) s
5 170 M
(nd votes for or against based on if the evaluated LTF or PTF exceed threshold or not, is a ) s
5 159 M
(learning theoretic perspective as opposed to SAT based decision making. An experimental pro) s
5 148 M
(of of BKS Conjecture \(Majority is least stable\) previously is restricted to LTFs only. Poly) s
5 137 M
(nomial Threshold Functions have a circuit representation of depth 2 consisting of Parity an) s
5 126 M
(d Threshold gates - layer 1 of parity gates for each monomial and layer 2 of a single thres) s
5 115 M
(hold gate. From classic result of [Minsky-Papert], any computable function can be written i) s
5 104 M
(n terms of threshold function. Circuit representation of Polynomial Threshold Functions are) s
5 93 M
( thus helpful to compute any Voter Decision Function in terms of Parity and Threshold gates) s
5 82 M
(. By Chow's Theorem for threshold functions, any 2 functions f \(LTF\) and g \(any function\) a) s
5 71 M
(re equivalent if the degree-0 and degree-1 Fourier coefficients in Fourier expansion of f a) s
5 60 M
(nd g are equal.) s
5 38 M
(Assuming KRW Conjecture, Formula Size of the Majority + VoterSAT boolean composition is:) s
5 27 M
(        FormulaSize\(Majority + VoterSAT\) ~= FormulaSize\(Majority\) * FormulaSize\(VoterSAT\)) s
5 16 M
(        => FormulaSize\(Majority + VoterSAT\) ~=  m^5.3 * FormulaSize\(VoterSAT\) ) s
5 5 M
(                \(Formula Size implies the circuit composition has fanout 1\)) s
_R
S
%%Page: (423) 423
%%BeginPageSetup
_S
18 36 translate
/pagenum 423 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (423) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(It is known that set of languages of Turing Machine deciding an input in time\(t\) is contain) s
5 731 M
(ed in set of languages accepted by a circuit of size\(tlogt\). Combining this to the previous) s
5 720 M
( composition formula size bound assuming KRW Conjecture an estimated runtime of a Turing Ma) s
5 709 M
(chine equivalent to Majority + VoterSAT composition can be obtained by solving for t in the) s
5 698 M
( equality:) s
5 687 M
(        tlogt = m^5.3 * FormulaSize\(VoterSAT\)) s
5 676 M
(        \(or\) t^t = 2^\(m^5.3 * FormulaSize\(VoterSAT\)\)) s
5 654 M
(if t=O\(FormulaSize\(VoterSAT\)\):) s
5 643 M
(logt = k*m^5.3 \(or\) t = 2^\(k*m^5.3\) for some constant k which is an EXPTIME Turing Machine ) s
5 632 M
(\(i.e exponential in number of voters\) for Majority Voting Circuit Composition, implying unb) s
5 621 M
(ounded depth.) s
5 599 M
(PTF can encode a CNF MAX k-SAT - Example:) s
5 588 M
(\(x1 V !x3 V x4\) /\\ \(x2 V x3 V x5\) /\\ \(x1 V !x2 V x3\) can be encoded as 3-sparse PTF \(x1\)\(1-) s
5 577 M
(x3\)\(x4\) + \(x2\)\(x3\)\(x5\) + \(x1\)\(1-x2\)\(x3\) >= k) s
5 555 M
(References:) s
5 544 M
(-----------) s
5 533 M
(682.1 KRW Conjecture results survey - [OrMeir] - https://simons.berkeley.edu/sites/default/) s
5 522 M
(files/docs/10492/presentation.pdf) s
5 511 M
(682.2 Parity helps compute Majority - Theorem 4 and Theorem 8 on computing symmetric boolea) s
5 500 M
(n functions and threshold functions by parity - [Igor C. Oliveira\342\\210\\227 Department of Co) s
5 489 M
(mputer Science University of Oxford, Rahul Santhanam\342\\200\240 Department of Computer Science U) s
5 478 M
(niversity of Oxford, Srikanth Srinivasan\342\\200\241 Department of Mathematics IIT Bombay] - http) s
5 467 M
(s://eccc.weizmann.ac.il/report/2019/073/download) s
5 456 M
(682.3 Proof of KRW Conjecture for composing a function and parity - [Dinur] - http://drops.) s
5 445 M
(dagstuhl.de/opus/volltexte/2016/5841/) s
5 434 M
(682.4 Improved Composition Theorems for Functions and Relations - [Koroth-OrMeir] - Theorem) s
5 423 M
( 8 - http://drops.dagstuhl.de/opus/volltexte/2018/9452/pdf/LIPIcs-APPROX-RANDOM-2018-48.pdf) s
5 412 M
(682.5 Toward Better Formula Lower Bounds: An Information Complexity Approach to the KRW Com) s
5 401 M
(position Conjecture\342\\210\\227 - [Dmitry Gavinsky\342\\200\240 Or Meir\342\\200\241 Omri Weinstein \302\247 Avi W) s
5 390 M
(igderson\302\266] - http://www.math.ias.edu/~avi/PUBLICATIONS/GavinskyMeWeWi2016.pdf - Section 1.) s
5 379 M
(2.1 - Formula size of Composition of a function and Parity by [Andreev] and [Hastad] - "...) s
5 368 M
(L\(g \\005 \342\\212\\225n\) = L\(g\) \302\267 n^2/poly log m = L\(g\) \302\267 L\(\342\\212\\225n\)/ poly log\(m\),..") s
5 357 M
(682.6 Linear and Polynomial Threshold Functions - http://www.contrib.andrew.cmu.edu/~ryanod) s
5 346 M
(/ - Page 114-116 - Chapter 5 - Chow's Theorem 5.1 and Theorem 5.8, Threshold of Parities Ci) s
5 335 M
(rcuit \(depth 2 comprising parity gates in layer 1 and threshold gate at layer 2\) computing ) s
5 324 M
(a Polynomial Threshold Function) s
5 313 M
(682.7 Perceptrons - [Minsky-Papert] - \(1972:232\): "... a universal computer could be built ) s
5 302 M
(entirely out of linear threshold modules. This does not in any sense reduce the theory of c) s
5 291 M
(omputation and programming to the theory of perceptrons.") s
5 280 M
(682.8 Circuit Complexity Lecture Notes - http://www.cs.umd.edu/~jkatz/complexity/f05/lectur) s
5 269 M
(e4.pdf - Section 1.2 - "Theorem 1 If t\(n\) \342\\211\245 n, then time\(t\) \342\\212\\206 size\(tlog t\)....) s
5 258 M
(") s
5 247 M
(682.9 Satisfiability and Derandomization for Small Polynomial Threshold Circuits - CircuitS) s
5 236 M
(AT for circuits of PTF gates - https://eccc.weizmann.ac.il/report/2018/115/download/ - s-sp) s
5 225 M
(arse PTFs having s monomials can encode MAXSAT of s clauses - Previous Boolean Composition ) s
5 214 M
(of Majority and VoterSAT can alternatively be stated as a Circuit Composition of Majority a) s
5 203 M
(nd Voter PTF circuits - section 1.4 - "...for fixed sparsity s, much more expressive. For e) s
5 192 M
(xample, the polynomial p\(x1, . . . , xn\) = Qn i=1\(xi \342\\212\\2251\) = Qn i=1\(1\342\\210\\222xi\) has) s
5 181 M
( sparsity 1 by our definition, but sparsity 2^n by the usual definition. Sakai, Seto, Tamak) s
5 170 M
(i and Teruyama [SSTT16] recently reported a faster-than-brute-force algorithm for MAX-kSAT ) s
5 159 M
(for any constant k with arbitrary weights \(which implies a satisfiability algorithm for deg) s
5 148 M
(ree-k PTFs\)...") s
5 137 M
(682.10 Bounded Depth Circuits with Weighted Symmetric Gates: Satisfiability, Lower Bounds a) s
5 126 M
(nd Compression - [Sakai-Seto-Tamaki-Teruyama] - https://pdfs.semanticscholar.org/084f/27ca4) s
5 115 M
(98158992b5e5a5a61dbaf4161503b5c.pdf) s
5 104 M
(682.11 Learning DNF - [Klivans-Servedio] - https://pdf.sciencedirectassets.com/272574/1-s2.) s
5 93 M
(0-S0022000000X01572/1-s2.0-S0022000003001363/main.pdf?X-Amz-Security-Token=AgoJb3JpZ2luX2Vj) s
5 82 M
(EJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJIMEYCIQDpY%2BJ8ysvIVFtFSRPRVv6S2w42%2FtC) s
5 71 M
(oesbH0lj0MJMoawIhAKgdNj9DXXjJN1myHJPiU14ZKBUvHmphnWHLaGd%2F0LCFKtoDCBEQAhoMMDU5MDAzNTQ2ODY1) s
5 60 M
(Igwd1ipPK634MOjEQmcqtwPLCTvVsLs90BxtDUtf9IbmHo6ay73ITn2Thu7F%2F%2BdbUWumBXt4nTo%2FyRZle3Bz4) s
5 49 M
(V2GoWLCRjc6AEDJ1GaC4Enc3HMXOtC3PPiKo5DaQ9EH%2BaGSUqb1Nm1fu4OiohaH%2F7%2FqLSau0TqH5QbnoCzqb9) s
5 38 M
(F8cZwI4%2FNhIFdm6IbL3YhOiizEDKzd5tylsXH46lNIZNOcPouFRCZC%2B6korSB0yEhTzp%2BxlOBosz5%2BknhQO) s
5 27 M
(dJGsgog7aHP5O7iB2Aml3V%2BIwQAg8Pl%2BFZ9Dc8WyAtxiQU%2Bh%2BcdJh9faDjqDbjG7VkzSuhKfVH%2B6tQiwb) s
5 16 M
(SPyLSLvosFne65KYI%2FdPytCJ5C7sHMuRot3V4JGJHhmcmyz5h8YeVK3eTwigD4j1cPzZQpifS33XIaca1do32RJNs) s
5 5 M
(9%2BaWCC6dKWlOl6s4wHxVQE%2BcJ6ixOSsbjKuRo%2FRS9dFJ5%2F%2FCfVBoHG2F%2B9rDDktiSZiegDoK7ndITZv) s
_R
S
%%Page: (424) 424
%%BeginPageSetup
_S
18 36 translate
/pagenum 424 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (424) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(PeymzrTbAVZqIHHx83sL3TfJiFLPPwrScwhLkfoF3I32griAkFIURzNWYF%2B6bzxsh1QxQUgNIdshGhmyRRca9ktj3) s
5 731 M
(3sPdyvFDBEHLYHdAhMPHM5ekFOrMBR1vs5b47SxPOuk17oLpowsH6xCobvsX76f2ShEhvoQNLqNQis%2F6LYtV6QNLg) s
5 720 M
(UQj%2BjUobapU2SaT2pMqPrwMvshW06K5Kt1GQMWnF84OiPAxss85P45Za7aCwifUX1GCflCxtm%2FWFqmXuHDrq2ux) s
5 709 M
(ze6LlzExKN0mglTcusR7rZXTolUTqXT2zZ1mjtRXn3mWYIE5uoAS320ECsACejGBOtTCISfjA2GYNQl1Je%2FqASIPd) s
5 698 M
(2aM%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20190725T091916Z&X-Amz-SignedHeaders=hos) s
5 687 M
(t&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTYQWHGSGT4%2F20190725%2Fus-east-1%2Fs3%2Faws) s
5 676 M
(4_request&X-Amz-Signature=b04a101db0c513928d40565cf895dfc601324123b95c08e2938f461bd76c3490&) s
5 665 M
(hash=eb5b8aed06292daa7502dca41a62db9110c81a7c336d1543c86683f1bb58faa3&host=68042c943591013a) s
5 654 M
(c2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0022000003001363&tid=spdf-f4e32f52-62) s
5 643 M
(1c-4768-8b49-b835a3261877&sid=31838a2e23fe724bb06b9d4-5a4c8715f5a8gxrqa&type=client - "...U) s
5 632 M
(sing techniques from learning theory, we show that any s-term DNF over n variables can be c) s
5 621 M
(omputed by a polynomial threshold function of degree O\(n^\(0.33\)log s\): This upper bound mat) s
5 610 M
(ches, up to a logarithmic factor, the longstanding lower bound given by Minsky and Papert i) s
5 599 M
(n their 1968 book Perceptrons....") s
5 588 M
(682.12 New Degree bounds for Polynomial Threshold Functions - [O'Donnell-Servedio] - https:) s
5 577 M
(//kilthub.cmu.edu/articles/New_degree_bounds_for_polynomial_threshold_functions/6607712/fil) s
5 566 M
(es/12098267.pdf - "...We prove that any Boolean formula of depth d and size s is computed b) s
5 555 M
(y a polynomial threshold function of degree \342\\210\\232s\(log s\)^O\(d\)....") s
5 544 M
(682.13 Block Composed Functions and Hardness Amplification - https://arxiv.org/pdf/1710.090) s
5 533 M
(79.pdf - "...The approximate degree of a Boolean function f : {\342\\210\\2221, 1}^n \342\\206\\222 {) s
5 522 M
(\342\\210\\2221, 1}, denoted deg g\(f\), is the least degree of a real polynomial p such that |p\(x) s
5 511 M
(\) \342\\210\\222 f\(x\)| \342\\211\244 1/3 for all x \342\\210\\210 {\342\\210\\2221, 1}^n ... Until very recently,) s
5 500 M
( the method of dual polynomials had been used exclusively to prove hardness amplification r) s
5 489 M
(esults for block-composed functions. That is, the harder function g would be obtained by bl) s
5 478 M
(ock-composing f with another function h, i.e., g = h \342\\227\246 f. Here, a function g : {\342\\210) s
5 467 M
(\\2221, 1}^n\302\267m \342\\206\\222 {\342\\210\\2221, 1} is the block-composition of h: {\342\\210\\2221, 1}^n \342) s
5 456 M
(\\206\\222 {\342\\210\\2221, 1} and f : {\342\\210\\2221, 1}^m \342\\206\\222 {\342\\210\\2221, 1} if g interpret) s
5 445 M
(s its input as a sequence of n blocks, applies f to each block, and then feeds the n output) s
5 434 M
(s into h...." - Majority+VoterSAT boolean composition can be viewed as block composition by) s
5 423 M
( approximating Majority and VoterSAT by low-degree polynomials h and f ) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(-------------------------------------------------) s
5 379 M
(683.\(THEORY\) Proof of KRW Conjecture for Majority+VoterSAT/VoterPTF composition - related t) s
5 368 M
(o 682 - 23 July 2019) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(-------------------------------------------------) s
5 335 M
(Caution: This section is experimental and subject to errors) s
5 313 M
(Previously a reduction from CNF MAX-k-SAT to PTFSAT was described with an example. Any Vote) s
5 302 M
(r SAT can be encoded as a Polynomial Threshold Function g and any Polynomial Threshold Func) s
5 291 M
(tion can be computed by a Threshold-of-Parities circuit of depth 2 described in previous se) s
5 280 M
(ction:) s
5 269 M
(        g = threshold + parity) s
5 258 M
(If Majority function is denoted by f, Majority + VoterSAT/VoterPTF composition can be writt) s
5 247 M
(en in terms of parity as:) s
5 236 M
(        f + g = f + threshold + parity) s
5 225 M
(But composition is associative and therefore:) s
5 214 M
(        \(f + threshold\) + parity = f + \(threshold + parity\)) s
5 203 M
(But composition \(f + threshold\) previously can be any function h:) s
5 192 M
(        \(f + threshold\) + parity = h + parity) s
5 181 M
(which is composition of some function and parity and KRW conjecture for composing any funct) s
5 170 M
(ion and parity has been already proved \([Hastad],[Andreev],[Dinur]\) and thus KRW Conjecture) s
5 159 M
( for Majority + VoterSAT/VoterPTF composition is proved immediately because previous breakd) s
5 148 M
(own of any function as threshold of parities reduces Majority + VoterSAT/VoterPTF compositi) s
5 137 M
(on to composition of any function to parity. ) s
5 115 M
(For a general case of composing any function f to another function g, applying previous thr) s
5 104 M
(eshold of parities representation to both f and g:) s
5 93 M
(        f + g = \(threshold + parity\) + \(threshold + parity\)) s
5 82 M
(and applying associativity of composition:) s
5 71 M
(        f + g = \(threshold + parity + threshold\) + parity) s
5 49 M
(-------------------------------------------------------------------------------------------) s
5 38 M
(------------------------------------------------) s
5 27 M
(684. \(FEATURE\) Urban Planning/GIS Image Analytics - scikit learn extract_patches_2d\(\) integ) s
5 16 M
(ration - 25 July 2019) s
5 5 M
(-------------------------------------------------------------------------------------------) s
_R
S
%%Page: (425) 425
%%BeginPageSetup
_S
18 36 translate
/pagenum 425 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (425) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(------------------------------------------------) s
5 731 M
(1. Scikit Learn extract_patches_2d\(\) has been invoked in a wrapper function analyze_remotes) s
5 720 M
(ensing_2d_patches\(\) for patches analysis of) s
5 709 M
(Remote Sensing Imagery) s
5 698 M
(2. Patch ndarrays are flattened and pixel histogram is computed for each patch of an image) s
5 687 M
(3. Maximum pixel bucket in the patch histogram is an indicator of class of the patch.) s
5 676 M
(4. This is in addition to RGB patch analysis function implemented earlier for Red-Green-Blu) s
5 665 M
(e channel classification of an image) s
5 654 M
(5. Logs of extract_patches_2d\(\) and the patch histograms for 2 example remote sensing image) s
5 643 M
(s are at ImageNet/testlogs/ImageGraph_Keras_Theano.log.RemoteSensingGIS.25July2019) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(-------------------------------------------------) s
5 599 M
(685. \(FEATURE\) People Analytics - Kaggle LinkedIn Dataset Analysis - 26 July 2019) s
5 588 M
(-------------------------------------------------------------------------------------------) s
5 577 M
(-------------------------------------------------) s
5 566 M
(1. This commit introduces a new function in People Analytics implementation - linkedin_data) s
5 555 M
(set_tenure_analytics\(\) - which parses Kaggle LinkedIn dataset from https://www.kaggle.com/k) s
5 544 M
(illbot/linkedin and computes various correlation coefficients between column attributes.) s
5 533 M
(2. Following are the People Analytics field attributes in LinkedIn obfuscated dataset which) s
5 522 M
( has almost 15000 rows:) s
5 511 M
(['avg_n_pos_per_prev_tenure', 'avg_pos_len', 'avg_prev_tenure_len', 'c_name', 'm_urn', 'n_p) s
5 500 M
(os', 'n_prev_tenures', 'tenure_len', 'age', 'beauty', 'beauty_female', 'beauty_male', 'blur) s
5 489 M
(', 'blur_gaussian', 'blur_motion', 'emo_anger', 'emo_disgust', 'emo_fear', 'emo_happiness',) s
5 478 M
( 'emo_neutral', 'emo_sadness', 'emo_surprise', 'ethnicity', 'face_quality', 'gender', 'glas) s
5 467 M
(s', 'head_pitch', 'head_roll', 'head_yaw', 'img', 'mouth_close', 'mouth_mask', 'mouth_open') s
5 456 M
(, 'mouth_other', 'skin_acne', 'skin_dark_circle', 'skin_health', 'skin_stain', 'smile', 'af) s
5 445 M
(rican', 'celtic_english', 'east_asian', 'european', 'greek', 'hispanic', 'jewish', 'muslim') s
5 434 M
(, 'nationality', 'nordic', 'south_asian', 'n_followers'] which include average variables fo) s
5 423 M
(r tenure, positions or designations per tenure, number of previous tenures, tenure lengths ) s
5 412 M
(etc.,) s
5 401 M
(3.Pairwise kendall-tau Correlation coefficients of 3 important variables are computed:) s
5 390 M
(        - average number of positions per previous tenure) s
5 379 M
(        - average length of a position) s
5 368 M
(        - average length of previous tenures) s
5 357 M
(4.Some preprocessing of the linkedin CSV dataset was required to cast the type to integer) s
5 346 M
(5.VectorAssembler is instantiated to create necessary subset projections of the linkedin da) s
5 335 M
(taset columns) s
5 324 M
(6.5 important columns of the Spark CSV dataframe are sliced by list comprehension to 5 arra) s
5 313 M
(ys for \(ethnic, emotional, physical and racial fields are ignored\):) s
5 302 M
(        - average number of positions per previous tenure) s
5 291 M
(        - average length of a position) s
5 280 M
(        - average length of previous tenures) s
5 269 M
(        - number of previous tenures) s
5 258 M
(        - tenure length ) s
5 247 M
(and mapped to a Pandas DataFrame which supports correlation matrix for all datatypes) s
5 236 M
(7.Pandas correlation matrix is printed for these 5 fields:) s
5 225 M
(                                avg_n_pos_per_prev_tenure  avg_pos_len  avg_prev_tenure_len) s
5 214 M
(  n_prev_tenures  tenure_len) s
5 203 M
(avg_n_pos_per_prev_tenure                   1.000000     0.804373             0.836112     ) s
5 192 M
(   0.836637    0.832915) s
5 181 M
(avg_pos_len                                 0.804373     1.000000             0.983461     ) s
5 170 M
(   0.978873    0.993264) s
5 159 M
(avg_prev_tenure_len                         0.836112     0.983461             1.000000     ) s
5 148 M
(   0.968333    0.975659) s
5 137 M
(n_prev_tenures                              0.836637     0.978873             0.968333     ) s
5 126 M
(   1.000000    0.981673) s
5 115 M
(tenure_len                                  0.832915     0.993264             0.975659     ) s
5 104 M
(   0.981673    1.000000) s
5 82 M
(8.In addition to basic designation\(position\),remuneration, tenure duration correlations imp) s
5 71 M
(lemented earlier previous variables provide fine grained pattern analysis.) s
5 60 M
(9,From previous correlation matrix, an obvious negative or low correlation is:) s
5 49 M
(         avg_n_pos_per_prev_tenure - versus - \(avg_prev_tenure_len, n_prev_tenures, tenure_) s
5 38 M
(len\)) s
5 27 M
(implying increased average number of designations\(positions\) in previous tenures implies lo) s
5 16 M
(w average previous tenure lengths, low number of previous tenures and low tenure length whi) s
5 5 M
(ch \(exluding low number of previous tenures\) is against what intuition suggests.) s
_R
S
%%Page: (426) 426
%%BeginPageSetup
_S
18 36 translate
/pagenum 426 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (426) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(------------------------------------------------) s
5 709 M
(686. \(FEATURE\) People Analytics - Kaggle LinkedIn DataSet - Experiential and Degree Intrins) s
5 698 M
(ic Merit - 27 July 2019) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(------------------------------------------------) s
5 665 M
(1.In continuation to previous commit for linkedin dataset analytics, this commit implements) s
5 654 M
( computation of lognormal experiential intrinsic merit and degree based experiential intrin) s
5 643 M
(sic merit for all profiles in linkedin dataset.) s
5 632 M
(2.Pandas DataFrame has been expanded to include two new columns - lognormal_experiential_me) s
5 621 M
(rits and degree_experiential_merits - and correlation matrix is computed for this 7 rows * ) s
5 610 M
(7 columns.) s
5 599 M
(3.Experience of the n-th profile is derived from dataset columns as:) s
5 588 M
(          experience = avg_n_pos_per_prev_tenure[n] * avg_pos_len[n] * n_prev_tenures[n] + ) s
5 577 M
(tenure_len[n]) s
5 566 M
(4.Correlation coefficients for all pairs of 7 variables from logs:) s
5 544 M
(linkedin_dataset_tenure_analytics\(\): pandas correlation coefficient =                      ) s
5 533 M
(           avg_n_pos_per_prev_tenure  avg_pos_len  ...  lognormal_experiential_merits  degr) s
5 522 M
(ee_experiential_merits) s
5 511 M
(avg_n_pos_per_prev_tenure                       1.000000     0.804373  ...                 ) s
5 500 M
(      0.687246                    0.116707) s
5 489 M
(avg_pos_len                                     0.804373     1.000000  ...                 ) s
5 478 M
(      0.566021                    0.112341) s
5 467 M
(avg_prev_tenure_len                             0.836112     0.983461  ...                 ) s
5 456 M
(      0.673678                    0.156701) s
5 445 M
(n_prev_tenures                                  0.836637     0.978873  ...                 ) s
5 434 M
(      0.553288                    0.058373) s
5 423 M
(tenure_len                                      0.832915     0.993264  ...                 ) s
5 412 M
(      0.532364                    0.076770) s
5 401 M
(lognormal_experiential_merits                   0.687246     0.566021  ...                 ) s
5 390 M
(      1.000000                    0.426055) s
5 379 M
(degree_experiential_merits                      0.116707     0.112341  ...                 ) s
5 368 M
(      0.426055                    1.000000) s
5 346 M
([7 rows x 7 columns]) s
5 324 M
(5.Previous matrix shows highly negative or low correlation between first 3 tenure variables) s
5 313 M
( and degree experiential merits and a medium correlation between first 3 variables and logn) s
5 302 M
(ormal_experiential_merits.) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(-------------------------------------------------) s
5 258 M
(687. \(THEORY\) Approximate Polynomials and Approximate Degree of Boolean Functions, Dual Pol) s
5 247 M
(ynomials, Hardness Amplification, KRW Conjecture, Boolean Composition of Majority and Voter) s
5 236 M
(SAT/VoterPTF, Communication Complexity, Linear Program Primal/Dual - related to 365, 368, 6) s
5 225 M
(82 - ) s
5 214 M
(27 July 2019) s
5 203 M
(-------------------------------------------------------------------------------------------) s
5 192 M
(------------------------------------------------- ) s
5 181 M
(From 682.13, the approximate degree of a Boolean function f : {\342\\210\\2221, 1}^n \342\\206\\222 {) s
5 170 M
(\342\\210\\2221, 1}, denoted deg g\(f\), is the least degree of a real polynomial p such that |p\(x) s
5 159 M
(\) \342\\210\\222 f\(x\)| \342\\211\244 1/3 for all x \342\\210\\210 {\342\\210\\2221, 1}^n. Existence of approximat) s
5 148 M
(e polynomials implies that the function is easy. Therefore non-existence of approximate pol) s
5 137 M
(ynomials implies the function is hard. Fact that f can be approximated by a real polynomial) s
5 126 M
( is equivalent to feasibility of a Linear Program on Fourier coefficients. Feasibility of d) s
5 115 M
(ual of this linear program on Fourier Coefficients implies the primal boolean function is h) s
5 104 M
(ard to approximate by a real polynomial and thus is an alternative way to prove hardness of) s
5 93 M
( boolean functions and their compositions especially block-compositions and is quite releva) s
5 82 M
(nt to Majority+VoterSAT composition and KRW-Communication Complexity based size and depth l) s
5 71 M
(owerbounds of it previously derived based on Sensitivity measures. Approximate degree of t-) s
5 60 M
(threshold functions is sqrt\(t\(n-t\)\) and approximate degree of Majority or Parity is Theta\(n) s
5 49 M
(\). From [Nisan-Szegedy], approxdegree\(f\) <= degree\(f\) <= DecisionTree\(f\) < 1296*degree\(f\)^8) s
5 38 M
(. From [Sherstov] theorem, approxdegree\(Majority + VoterSAT\) = approxdegree\(Majority\) * app) s
5 27 M
(roxdegree\(VoterSAT\) <= DecisionTree\(Majority\)*DecisionTree\(VoterSAT\).) s
5 5 M
(References:) s
_R
S
%%Page: (427) 427
%%BeginPageSetup
_S
18 36 translate
/pagenum 427 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (427) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-----------) s
5 731 M
(687.1 Dual Polynomial for OR function - [Robert Spalek, Google, Inc.] - http://www.ucw.cz/~) s
5 720 M
(robert/papers/dualor.pdf) s
5 709 M
(687.2 Degree of Polynomials Approximating Symmetric Boolean Functions - [Ramamohan Paturi] ) s
5 698 M
(- https://cseweb.ucsd.edu/~paturi/myPapers/pubs/Paturi_1992_stoc.pdf) s
5 687 M
(687.3 Approximate degree of composition of boolean functions - Theorem 8 - [Sherstov] - The) s
5 676 M
( Polynomial Method Strikes Back:) s
5 665 M
(Tight Quantum Query Bounds via Dual Polynomials - [Mark Bun Princeton University mbun@cs.pr) s
5 654 M
(inceton.edu, Robin Kothari Microsoft Research robin.kothari@microsoft.com,Justin Thaler Geo) s
5 643 M
(rgetown University justin.thaler@georgetown.edu] - https://arxiv.org/pdf/1710.09079.pdf) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(---------------------------------------------------) s
5 599 M
(688. \(THEORY\) Approximate Polynomials and Approximate Degree of Boolean Functions, Algebrai) s
5 588 M
(c Circuits and KRW Conjecture for Boolean) s
5 577 M
(composition of Majority and VoterSAT/VoterPTF - related to 365, 368, 682, 687 - 28 July 201) s
5 566 M
(9, 1 August 2019) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(---------------------------------------------------) s
5 533 M
(Approximate Polynomial for Majority exists from 687.2 and has approximate degree theta\(n\) a) s
5 522 M
(nd therefore has n roots from Fundamental Theorem of Algebra. This approximate polynomial f) s
5 511 M
(or Majority can be written as factorized product \(assuming reducibile polynomials over fiel) s
5 500 M
(d of reals\):) s
5 489 M
(        Product\(x-xi\) i=1,2,3,...,n) s
5 467 M
(Previous product for approximate polynomial for majority can be expressed by an Algebraic/A) s
5 456 M
(rithmetic Circuit of depth-2 having 2n leaves \(2 leaves per factor\) and n intermediate minu) s
5 445 M
(s gates in depth-1. Root is a multiplication gate of fanin n:) s
5 434 M
(                                                        * \(multiplication operator - Root\)) s
5 412 M
(                                -       -       -       -       -       ... - \(minus operat) s
5 401 M
(ors - Depth 1\)) s
5 379 M
(                             x    x1  x   x2  x   x3  x   x4  x   x5      x   xn \(operands ) s
5 368 M
(- Depth 2\)) s
5 346 M
(Similarly if there exists an approximate polynomial \(assuming reducible over field of reals) s
5 335 M
(\) for an arbitrary VoterSAT/VoterPTF arithmetic circuit of approximate degree d it can be f) s
5 324 M
(actorized and represented by an Algebraic/Arithmetic circuit of depth-2 having 2d leaves, d) s
5 313 M
( intermediate minus gates at depth-1 and multiplication gate at root. Since both arithmetic) s
5 302 M
( circuits for Majority and VoterSAT/VoterPTF have fanout 1, both can be termed arithmetic f) s
5 291 M
(ormulas. Thus approximate polynomials for Majority and VoterSAT/VoterPTF have arithmetic ci) s
5 280 M
(rcuits of size O\(approxdegree\). Block Composing Majority arithmetic formula and VoterSAT/Vo) s
5 269 M
(terPTF arithmetic formula is fairly straightforward in this special setting and ArithmeticF) s
5 258 M
(ormulaSize\(approxpoly\(Majority\)+approxpoly\(VoterSAT\)\) = ArithmeticFormulaSize\(approxpoly\(Ma) s
5 247 M
(jority\)\) * ArithmeticFormulaSize\(approxpoly\(VoterSAT\)\) = O\(n*d\). This is an approximate ver) s
5 236 M
(sion of KRW conjecture and O\(n*d\) could be Theta\(n*d\) because factorization lowerbounds the) s
5 225 M
( number of arithmetic gates. Over field of reals, every irreducible polynomial has degree 1) s
5 214 M
( or 2 at most. Previous algebraic circuit assumes degree 1 irreducibility. For degree 2, in) s
5 203 M
(stead of factors of the form \(x-xi\), factors are ax^2 + bx + c which require arithmetic sub) s
5 192 M
(circuits as below increasing depth by 1 and size multiplies by 4:) s
5 181 M
(                                                +) s
5 159 M
(                                        *       *       *) s
5 137 M
(                                  a   x   x   b   x   c    1) s
5 115 M
(An already known result in reference 688.4 implies intersection of set of polynomials compu) s
5 104 M
(ted by non-uniform arithmetic circuits of polynomial size and set of polynomials of constan) s
5 93 M
(t degree is equal to intersection of set of polynomials computed by nonuniform arithmetic c) s
5 82 M
(ircuits of polynomial size and logN*logN depth and set of polynomials of constant degree fo) s
5 71 M
(r all fields F. This implies each of the arithmetic circuit for approximate univariate poly) s
5 60 M
(nomial over field of reals of a boolean function is a logN * logN depth circuit. Assuming d) s
5 49 M
(egree 1 irreducible factors throughout previously for approximate real polynomials of both ) s
5 38 M
(functions f and g, an estimate of depth lowerbound of the block composition of f and g can ) s
5 27 M
(be arrived at:) s
5 16 M
(        Depth\(f + g\) ~= Depth\(f\) + Depth\(g\) ~ 2*logN*logN) s
_R
S
%%Page: (428) 428
%%BeginPageSetup
_S
18 36 translate
/pagenum 428 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (428) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(References:) s
5 731 M
(-----------) s
5 720 M
(688.1 Algebraic Circuits - [Sanjeev Arora-Boaz Barak] - https://theory.cs.princeton.edu/com) s
5 709 M
(plexity/book.pdf - Section 14.1 and Example 14.3 \(Arithmetic circuits for determinants\)) s
5 698 M
(688.2 Fundamental Theorem of Algebra - https://en.wikipedia.org/wiki/Fundamental_theorem_of) s
5 687 M
(_algebra - "... every non-zero, single-variable, degree n polynomial with complex coefficie) s
5 676 M
(nts has, counted with multiplicity, exactly n complex roots...") s
5 665 M
(688.3 Irreducible polynomials over reals have degree 1 or 2 - https://en.wikipedia.org/wiki) s
5 654 M
(/Irreducible_polynomial) s
5 643 M
(688.4 Arithmetic Circuits versus Boolean Circuits - [Joachim von zur Gathen\342\\200\240 - Gadiel ) s
5 632 M
(Seroussi\342\\200\241] - Section 2 - https://www.sciencedirect.com/science/article/pii/08905401919) s
5 621 M
(0078G) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(-------------------------------------------------) s
5 577 M
(689. \(FEATURE\) Fraud Analytics - Credit Card Dataset - Pandas DataFrame Correlation Coeffic) s
5 566 M
(ient Matrix - 28 July 2019) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-------------------------------------------------) s
5 533 M
(1.Fraud Analytics implementation has been updated to instantiate Pandas DataFrame from cred) s
5 522 M
(it card dataset and print Pandas) s
5 511 M
(Correlation matrix for all the columns.) s
5 500 M
(2.Columns V1-V28 are Obfuscated Names of the cardholders which are numeric unique id\(s\)) s
5 489 M
(3.Correlation between unique identities/names and amount drawn is a behavioural pattern and) s
5 478 M
( any deviation is an alarm \(most swipes are periodic and personality oriented\).) s
5 467 M
(4.Correlation matrix logs are committed to testlogs/FraudAnalytics.log.28July2019) s
5 456 M
(5.Correlation between Timestamp and Amount drawn is also measure of fraud.) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(-------------------------------------------------) s
5 412 M
(690. \(FEATURE\) Time Series Analysis - ARIMA implementation - 1 August 2019) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(-------------------------------------------------) s
5 379 M
(1.Time Series implementation has been made to a new python source file containing time seri) s
5 368 M
(es algorithms implementations for ARMA and ARIMA - Streaming_TimeSeriesData.py) s
5 357 M
(2.Auto Regressive Integrated Moving Averages \(ARIMA\) has been implemented as a function ARI) s
5 346 M
(MA in Streaming_TimeSeriesData.py and factoring has been implemented for a parameter lag in) s
5 335 M
( autoregression_factored\(\)) s
5 324 M
(3.ARIMA differs from ARMA in factoring the autoregression polynomial into two factor polyno) s
5 313 M
(mials one which is dependent on a lag operator.) s
5 302 M
(4.Because Yahoo finance and Google Finance stock data are no longer available, ystockquote ) s
5 291 M
(does not work and throws urllib exception and hence a hardcoded array of timeseries stock c) s
5 280 M
(lose data has been used.) s
5 269 M
(5.ARMA and ARIMA functions from Streaming_TimeSeriesData.py are invoked in Streaming_StockM) s
5 258 M
(arketData.py.) s
5 247 M
(6.Logs for ARIMA and R+rpy2 graphics plot have been committed to DJIA_ARIMA_Time_Series.pdf) s
5 236 M
( and testlogs/Streaming_StockMarketData.ARIMATimeSeries.log.1August2019) s
5 214 M
(-------------------------------------------------------------------------------------------) s
5 203 M
(-------------------------------------------------) s
5 192 M
(691. \(FEATURE\) Time Series Analysis - ARMA and ARIMA implementations - Rewrite - 2 August 2) s
5 181 M
(019) s
5 170 M
(-------------------------------------------------------------------------------------------) s
5 159 M
(-------------------------------------------------) s
5 148 M
(1. ARMA and ARIMA related functions in Streaming_TimeSeriesData.py have been rewritten base) s
5 137 M
(d on ARMA and ARIMA polynomials in https://en.wikipedia.org/wiki/Autoregressive_integrated_) s
5 126 M
(moving_average) s
5 115 M
(2. Projection iterations have been removed and instead are done in the invoking source file) s
5 104 M
( e.g Streaming_StockMarketData.py for randomly chosen regression weights) s
5 93 M
(3. ARMA polynomial is computed as:) s
5 82 M
(    arma=timeseries[len\(timeseries\)-1] - autoregression\(time_series_data[pprime:]\) - moving) s
5 71 M
(_averages\(time_series_data[q:], 5\)) s
5 60 M
(which subtracts the autoregression and moving averages from the latest timeseries point. AR) s
5 49 M
(MA parameters pprime and q are sliced to be as distant from the latest timeseries point) s
5 38 M
(4. ARIMA polynomial is computed as:) s
5 27 M
(    arima=autoregression_factored\(time_series_data[len\(time_series_data\)-d:],p\) - moving_av) s
5 16 M
(erages\(time_series_data[q:], 5\)) s
5 5 M
(which computes autoregression_factored differently as:) s
_R
S
%%Page: (429) 429
%%BeginPageSetup
_S
18 36 translate
/pagenum 429 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (429) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(5.Lag operator for lag d is applied to slice the timeseries data from latest point t to d a) s
5 731 M
(s t-d and autoregression_factored\(\) is invoked to compute regressions from slice t-d-p to t) s
5 720 M
(-d ) s
5 709 M
(6.Finally the autoregression is subtracted from latest timeseries point Xt and moving avera) s
5 698 M
(ges is added to it) s
5 687 M
(7.Logs for rewrite are available for few iterations at testlogs/Streaming_StockMarketData.A) s
5 676 M
(RIMATimeSeries.log.2August2019 ) s
5 665 M
(8.R+rpy2 function plots have been commented) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(--------------------------------------------------) s
5 621 M
(692. \(FEATURE\) Time Series Analysis - ARMA and ARIMA implementations - Rewrite 2 - 3 August) s
5 610 M
( 2019) s
5 599 M
(-------------------------------------------------------------------------------------------) s
5 588 M
(--------------------------------------------------) s
5 577 M
(1. ARMA and ARIMA functions in Streaming_TimeSeriesData.py have been again refactored to im) s
5 566 M
(plement lag operator and binomial expansion of) s
5 555 M
(lag factor in ARIMA polynomial) s
5 544 M
(2. autoregression_factored\(\) has been rewritten to invoke a new function lag_factor_binomia) s
5 533 M
(l_expansion\(\) which in turn expands the factor power term in ARIMA polynomial by binomial s) s
5 522 M
(eries expansion of \(1-L\)^d.) s
5 511 M
(3. lag_factor_binomial_expansion\(\) loop invokes functions binomial_term\(\) which computes th) s
5 500 M
(e numerator and denominator factorial of each binomial term and lag\(\) function for each bin) s
5 489 M
(omial term.) s
5 478 M
(4. Example logs for Stock quotes timeseries data is at Streaming_StockMarketData.ARIMATimeS) s
5 467 M
(eries.log.3August2019 which has comparative projections of rewritten ARMA and ARIMA functio) s
5 456 M
(ns.) s
5 445 M
(5. ARIMA has been invoked by parameters \(2,2,2\)) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(--------------------------------------------------) s
5 401 M
(693. \(FEATURE\) Time Series Analysis and Fraud Analytics - Credit Card Transactions Dataset ) s
5 390 M
(- 3 August 2019) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(--------------------------------------------------) s
5 357 M
(1.FraudAnalytics.py has been updated to import TimeSeries ARMA and ARIMA functions from Str) s
5 346 M
(eaming_TimeSeriesData.py and compute ARMA and ARIMA polynomials on amounts withdrawn timese) s
5 335 M
(ries in credit card transactions dataset.) s
5 324 M
(2.Logs for these projections are at testlogs/FraudAnalytics.log.3August2019) s
5 313 M
(3.Though timeseries is a perfect fit for analyzing credit card amounts withdrawn as timeser) s
5 302 M
(ies, projection curves for ARMA and ARIMA in logs are skewed widely for multiple iterations) s
5 291 M
( of random weights in autoregression and moving averages but values of ARMA and ARIMA are u) s
5 280 M
(niformly same almost.) s
5 258 M
(-------------------------------------------------------------------------------------------) s
5 247 M
(--------------------------------------------------) s
5 236 M
(694. \(FEATURE\) Linear and Logistic Regressions - Rewrite - 4 August 2019, 6 August 2019) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(--------------------------------------------------) s
5 203 M
(1.LinearAndLogisticRegression.py has been rewritten to accept arbitrary number of weights a) s
5 192 M
(nd variables for computing Linear and Logistic) s
5 181 M
(Regressions.) s
5 170 M
(2.Linear And Logistic Regressions are estimators of Intrinsic Economic Merit of Nations in ) s
5 159 M
(Economic Networks. Thus far following classes of intrinsic merit have been researched and i) s
5 148 M
(mplemented in NeuronRain:) s
5 137 M
(        1. Text) s
5 126 M
(        2. Audio - Speech) s
5 115 M
(        3. Audio - Music) s
5 104 M
(        4. Visuals - Images) s
5 93 M
(        5. Visuals - Videos) s
5 82 M
(        6. People - Professional Networks - Experiential Intrinsic Merit) s
5 71 M
(        7. People - Social Networks - Log Normal Least Energy Merit - Education/Wealth/Valo) s
5 60 M
(ur e.g Rankings of Universities based on various factors including research output, Ranking) s
5 49 M
(s of Students based on examinations/contests, Sports IPR \(Elo ratings in Chess, Player rank) s
5 38 M
(ings in sports\)) s
5 27 M
(        8. People - Professional Networks - HR Analytics - Attrition model) s
5 16 M
(and Economic merit of nations is the 9th class of intrinsic merit applicable to Economic Ne) s
5 5 M
(tworks. Regression is one amongst the set of econometric techniques for ascertaining growth) s
_R
S
%%Page: (430) 430
%%BeginPageSetup
_S
18 36 translate
/pagenum 430 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (430) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( of economies:) s
5 731 M
(        9. Nations - GDP, HDI etc.,) s
5 720 M
(3. Logs for the previous are at testlogs/LinearAndLogisticRegression.log.4August2019) s
5 698 M
(References:) s
5 687 M
(-----------) s
5 676 M
(694.1 India\342\\200\\231s GDP Mis-estimation: Likelihood, Magnitudes, Mechanisms, and Implicati) s
5 665 M
(ons - [Arvind Subramanian] - Working Paper - https://growthlab.cid.harvard.edu/files/growth) s
5 654 M
(lab/files/2019-06-cid-wp-354.pdf - "...We divide the sample into two periods, pre-and post-) s
5 643 M
(2011. For each period we estimate the following cross-country regression: \360\\235\\220\272\360\\235) s
5 632 M
(\\220\267\360\\235\\221\\203 \360\\235\\220\272\360\\235\\221\\237\360\\235\\221\\234\360\\235\\221\244\360\\235\\221\241\342\\204\\216\360\\235) s
5 621 M
(\\221\\226 = \360\\235\\233\2750 + \360\\235\\233\2751\360\\235\\220\266\360\\235\\221\\237\360\\235\\221\\222\360\\235\\221\\221\360\\235) s
5 610 M
(\\221\\226\360\\235\\221\241 \360\\235\\220\272\360\\235\\221\\237\360\\235\\221\\234\360\\235\\221\244\360\\235\\221\241\342\\204\\216\360\\235) s
5 599 M
(\\221\\226 + \360\\235\\233\2752\360\\235\\220\270\360\\235\\221\\231\360\\235\\221\\222\360\\235\\221\\220\360\\235\\221\241\360\\235\\221) s
5 588 M
(\\237\360\\235\\221\\226\360\\235\\221\\220\360\\235\\221\\226\360\\235\\221\241\360\\235\\221\246 \360\\235\\220\272\360\\235\\221\\237\360) s
5 577 M
(\\235\\221\\234\360\\235\\221\244\360\\235\\221\241\342\\204\\216\360\\235\\221\\226 + \360\\235\\233\2753\360\\235\\220\270\360\\235\\221\245\360) s
5 566 M
(\\235\\221\\235\360\\235\\221\\234\360\\235\\221\\237\360\\235\\221\241 \360\\235\\220\272\360\\235\\221\\237\360\\235\\221\\234\360\\235) s
5 555 M
(\\221\244\360\\235\\221\241\342\\204\\216\360\\235\\221\\226 +\360\\235\\233\2754\360\\235\\220\274\360\\235\\221\\232\360\\235\\221\\235\360\\235) s
5 544 M
(\\221\\234\360\\235\\221\\237\360\\235\\221\241 \360\\235\\220\272\360\\235\\221\\237\360\\235\\221\\234\360\\235\\221\244\360\\235\\221\241\342) s
5 533 M
(\\204\\216\360\\235\\221\\226 + \360\\235\\233\2755\360\\235\\220\274\360\\235\\221\\233\360\\235\\221\\221\360\\235\\221\\226\360\\235) s
5 522 M
(\\221\\216 + \360\\235\\234\\200\357\277\275 ...") s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-------------------------------------------------) s
5 478 M
(695. \(FEATURE\) Gradient Ascent and Descent - Rewrite - 4 August 2019) s
5 467 M
(-------------------------------------------------------------------------------------------) s
5 456 M
(-------------------------------------------------) s
5 445 M
(1.PerceptronAndGradient.py has been rewritten for computing Gradient Ascent and Descent for) s
5 434 M
( arbitrary number of variables.) s
5 423 M
(2.Earlier loop for partial derivative delta computation for just 2 variables has been gener) s
5 412 M
(alized for any number of variables ) s
5 401 M
(3.Gradient Ascent has also been added based on computed value of weight updated perceptron ) s
5 390 M
(\(+ instead of -\)) s
5 379 M
(4.Logs for Ascent and Descent are at testlogs/PerceptronAndGradient.log.4August2019) s
5 368 M
(5.Hardcoded variable,weights,bias,rho,output values have been removed and made as arguments) s
5 357 M
(.) s
5 335 M
(-------------------------------------------------------------------------------------------) s
5 324 M
(-------------------------------------------------) s
5 313 M
(696. \(FEATURE\) Named Entity Recognition \(NER\)-HMM-Viterbi-CRF - Rewrite - 12 August 2019) s
5 302 M
(-------------------------------------------------------------------------------------------) s
5 291 M
(-------------------------------------------------) s
5 280 M
(1.Named Entity Recognition by Conditional Random Fields Hidden Markov Model has been update) s
5 269 M
(d significantly for resolving some errors in Viterbi computation) s
5 258 M
(2.Prior Emission Probabilities computation by skew normal distribution has been updated to ) s
5 247 M
(renormalize by dividing the skewnorm probability by sum of probabilities) s
5 236 M
(3.New part of speech "adverb" has been included in transition probabilities,emission probab) s
5 225 M
(ilities and states) s
5 214 M
(4.weighted sknorm has been done away with and replaced by previous renormalized skewnorm di) s
5 203 M
(stribution) s
5 192 M
(5.Error in argmax\(\) computation has been corrected - label and maximum are reset in the loo) s
5 181 M
(p) s
5 170 M
(6.logs for this rewrite have been committed to testlogs/NamedEntityRecognition_HMMViterbi_C) s
5 159 M
(RF.log.12August2019) s
5 148 M
(7.Transition probabilities are updated as below:) s
5 137 M
(transition_probabilities={ 'noun':{'noun':0.0, 'verb':0.3, 'object':0.2, 'adjective':0.1, ') s
5 126 M
(adverb':0.1, 'conjunction':0.3},) s
5 115 M
(                          'verb':{'noun':0.1, 'verb':0.0, 'object':0.4, 'adjective':0.2, 'a) s
5 104 M
(dverb':0.1,'conjunction':0.3},) s
5 93 M
(                          'object':{'noun':0.0, 'verb':0.1, 'object':0.4, 'adjective':0.1, ) s
5 82 M
('adverb':0.1,'conjunction':0.3},) s
5 71 M
(                          'adjective':{'noun':0.4, 'verb':0.2, 'object':0.2, 'adjective':0.) s
5 60 M
(0, 'adverb':0.1, 'conjunction':0.1},) s
5 49 M
(                          'adverb':{'noun':0.1, 'verb':0.4, 'object':0.1, 'adjective':0.0, ) s
5 38 M
('adverb':0.1, 'conjunction':0.3},) s
5 27 M
(                          'conjunction':{'noun':0.2, 'verb':0.4, 'object':0.1, 'adjective':) s
5 16 M
(0.1, 'adverb':0.1, 'conjunction':0.1}) s
5 5 M
(                         } ) s
_R
S
%%Page: (431) 431
%%BeginPageSetup
_S
18 36 translate
/pagenum 431 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (431) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(7.It has to be mentioned here that previous state transition probabilities priors are hardc) s
5 731 M
(oded heuristics and based on the following rationale:) s
5 720 M
(        7.1 verb follows nouns more often) s
5 709 M
(        7.2 object follows verb more often) s
5 698 M
(        7.3 object follows object more often) s
5 687 M
(        7.4 noun follows adjective more often) s
5 676 M
(        7.5 verb follows adverb more often) s
5 665 M
(        7.6 verb follows conjunction more often \(e.g infinitives\)) s
5 654 M
(8.Previous heuristics are minimal and could be replaced by more sophisticated probability d) s
5 643 M
(istribution learnt from a training dataset once and loaded everytime.) s
5 621 M
(-------------------------------------------------------------------------------------------) s
5 610 M
(---------------------------------------------------) s
5 599 M
(697. \(THEORY-FEATURE\) Named Entity Recognition and Text Graph Algorithms in NeuronRain Astr) s
5 588 M
(oInfer - a non-statistical alternative - 12 August 2019) s
5 577 M
(-------------------------------------------------------------------------------------------) s
5 566 M
(---------------------------------------------------) s
5 555 M
(TextGraph algorithms in NeuronRain are two-fold:) s
5 544 M
(        697.1 Recursive Gloss Overlap - Project WordNet to a Subgraph by traversing the Syn) s
5 533 M
(sets recursively) s
5 522 M
(        697.2 Recursive Lambda Function Growth - Project WordNet to a Subgraph by traversin) s
5 511 M
(g the Synsets recursively, learn AVL tree based Graph Tensor Neural Network and Lambda expr) s
5 500 M
(essions from cycles and random walks of the WordNet subgraph - this is the maximum attainab) s
5 489 M
(le theoretical limit of learning a formal language \(Turing Machine or a lambda function\) fr) s
5 478 M
(om natural language) s
5 456 M
(Usual Named Entity Recognition algorithms are prior probabilities and Conditional Random Fi) s
5 445 M
(elds-HMM based which relies heavily on statistics ignoring linguistic deep structure. Inste) s
5 434 M
(ad if missing Part-of-Speech tags could be inferred from a textgraph representation of a pa) s
5 423 M
(rtially PoS annotated text, no language PoS priors are required. Following algorithm explor) s
5 412 M
(es this alternative:) s
5 401 M
(        697.3 Partial PoS annoted text is mapped to a text graph by previous algorithms and) s
5 390 M
( each word vertex in the partial annotated text is labelled by either a part of speech or ?) s
5 379 M
( for missing PoS tag.) s
5 368 M
(        697.4 Resultant text graph thus has mixture of word vertices which have either PoS ) s
5 357 M
(known \(labelled by a PoS name\) or PoS unknown \(labelled by ?\)) s
5 346 M
(        697.5 WordNet has support for list of all possible PoS tags for a word vertex) s
5 335 M
(        697.6 It is then a problem of inferring most probable disambiguating PoS tag for a ) s
5 324 M
(word vertex. ) s
5 313 M
(        697.7 Set of all wordnet paths between a PoS annotated word vertex and an adjacent ) s
5 302 M
(PoS unannotated word vertex provide set of sequences) s
5 291 M
(of PoS tags for the paths.') s
5 280 M
(        697.8 For example phrase "can be called as a function" annotated as "conjunction co) s
5 269 M
(njunction verb conjunction conjunction ?" and unannotated "function" has three possible wor) s
5 258 M
(dnet PoS tags which have to be disambiguated - Noun, Verb and Object and set of wordnet pat) s
5 247 M
(hs between "as-a" and "function" could be - {"connective","entity","work"},{"article","enti) s
5 236 M
(ty","event"},{"one","entity","happening"} having PoS sequences as {noun,noun,verb}, {noun,n) s
5 225 M
(oun,noun} and {noun,noun,noun} if function has lemma synsets "work","event" or "happening") s
5 214 M
(        697.9.Of the three possible paths PoS "noun" for "function" wins by majority voting) s
5 203 M
( of 2 to 1 because 2 paths have a penultimate vertices which imply "function" is a noun.) s
5 181 M
(-------------------------------------------------------------------------------------------) s
5 170 M
(--------------------------------------------------) s
5 159 M
(698. \(FEATURE\) GIS Remote Sensing Image Analytics - Image Segmentation - 13 August 2019) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(--------------------------------------------------) s
5 126 M
(1.New function image_segmentation\(\) has been defined in ImageGraph_Keras_Theano.py which se) s
5 115 M
(gments an image into similar regions or patches) s
5 104 M
(2.As opposed to RGB patches and extract_patches_2d\(\) of scikit learn, segmentation of an im) s
5 93 M
(age is generic and segments/patches of arbitrary irregular shapes and containing similar pi) s
5 82 M
(xels can be extracted) s
5 71 M
(3.Example code in OpenCV2 documentation - https://opencv-python-tutroals.readthedocs.io/en/) s
5 60 M
(latest/py_tutorials/py_imgproc/py_watershed/py_watershed.html - has been used as reference ) s
5 49 M
(4.This example filters the image into foreground and background by:) s
5 38 M
(        4.1 applying OTSU threshold filter) s
5 27 M
(        4.2 morphological opening for removal of noise) s
5 16 M
(        4.3 Background - Dilation to increase object boundary to background and demarcate b) s
5 5 M
(ackground accurately) s
_R
S
%%Page: (432) 432
%%BeginPageSetup
_S
18 36 translate
/pagenum 432 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (432) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        4.4 Foreground - Distance transform and then thresholding is applied to demarcate t) s
5 731 M
(he foreground ) s
5 720 M
(        4.5 Markers - Connected components are found from foreground of 4.4) s
5 709 M
(        4.6 Watershed - watershed segmentation algorithm is applied on the marked image to ) s
5 698 M
(find segments.) s
5 687 M
(5.Watershed algorithm works by considering an image as topographic surface of valleys and d) s
5 676 M
(ams between valleys. Valleys in image are filled with water till no two adjacent valleys me) s
5 665 M
(rge creating "dams" or segments bounding the valleys.) s
5 654 M
(6.Watershed segmentation is graphically illustrated in http://www.cmm.mines-paristech.fr/~b) s
5 643 M
(eucher/wtshed.html) s
5 632 M
(7.EventNet Tensor Products Merit algorithm for visuals described earlier depends on boundin) s
5 621 M
(g box segmentation which are squares. Instead segmentation could be the way to go if ImageN) s
5 610 M
(et and Keras support it.) s
5 599 M
(8.Two segmented satellite images of Chennai Metropolitan Area Urban Sprawl are committed at) s
5 588 M
(:) s
5 577 M
(        8.1 testlogs/RemoteSensingGIS/ChennaiUrbanSprawl_Page-10-Image-15_segmented.jpg) s
5 566 M
(        8.2 testlogs/RemoteSensingGIS/ChennaiUrbanSprawl_Page-9-Image-13_segmented.jpg) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(--------------------------------------------------) s
5 522 M
(699.\(THEORY-FEATURE\) Computational Geometric Factorization - Tile Search Optimization - Spa) s
5 511 M
(rk 2.4.3 and QuadCore benchmarks - 13 August 2019) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(--------------------------------------------------) s
5 478 M
(1.This is the first genuine benchmark of Computational Geometric Factorization on Spark 2.4) s
5 467 M
(.3 and QuadCore. Earlier execution on local[4] was a simulation of 4 spark executor threads) s
5 456 M
( on single core) s
5 445 M
(2.SparkContext has been replaced by Spark context of SparkSession) s
5 434 M
(3.logs for factorization are at testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSear) s
5 423 M
(ch_Optimized.log.13August2019 which have some notable estimates of approximate factors by H) s
5 412 M
(ardy-Ramanujan \(1 exact factor ray query\), Baker-Harman-Pintz and Cramer ray shooting queri) s
5 401 M
(es ) s
5 379 M
(-------------------------------------------------------------------------------------------) s
5 368 M
(--------------------------------------------------) s
5 357 M
(700.\(THEORY\) Computational Geometric Factorization, Complement Diophantines, Covering a set) s
5 346 M
( by Arithmetic Progressions, Ramsey Coloring -) s
5 335 M
(related to 24,477,491,636 - 14 August 2019) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(--------------------------------------------------) s
5 302 M
(Computational geometric factorization works by parallel planar point location - rectificati) s
5 291 M
(on of Hyperbolic arc bow into straightline segments which are then made to segment tree, wa) s
5 280 M
(velet tree, interval tree etc., by parallel RAM construction or segments are parallel RAM m) s
5 269 M
(ergesorted and binary searched to find factors and thus factorization \(finding all factors ) s
5 258 M
(of an integer\) is in Nick's class. It has been mentioned earlier that each segment of recti) s
5 247 M
(fied hyperbolic arc bow is an arithmetic progression which facilitates local binary search ) s
5 236 M
(without necessity for parallel mergesort. Thus set of all segments of rectified hyperbolic ) s
5 225 M
(arc create an arithmetic progression cover of set of points on rectified hyperbolic curve. ) s
5 214 M
(Finding a minimum size set of arithmetic progressions covering a set of integers is a hard ) s
5 203 M
(problem. Previous rectification process for factorization solves a special case of arithmet) s
5 192 M
(ic progression cover of a set. It has to be noted that finding an exact arithmetic progress) s
5 181 M
(ion cover of a set is the complement diophantine problem because the set of arithmetic prog) s
5 170 M
(ressions represents each of the diophantine subset in the exact cover partition. Known resu) s
5 159 M
(lt in 700.1 implies covering a set by arithmetic progressions is NP-complete while the prev) s
5 148 M
(ious rectification for factorization solves this special case of arithmetic progression cov) s
5 137 M
(er of set of rectified hyperbolic points in NC.This also implies complement diophantine pro) s
5 126 M
(blem is NP-complete for the special case of arithmetic progression diophantines for some pa) s
5 115 M
(rtition of a set.) s
5 93 M
(References:) s
5 82 M
(----------) s
5 71 M
(700.1 Covering a set by arithmetic progressions is NP-complete - [Lenwood Heath - Virginia ) s
5 60 M
(Tech] - https://vtechworks.lib.vt.edu/bitstream/handle/10919/19566/TR-89-25.pdf?sequence=3&) s
5 49 M
(isAllowed=y) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(-------------------------------------------------) s
5 5 M
(701.\(THEORY\) Category Theory formulation of EventNet - Objects, Morphisms, Functors - relat) s
_R
S
%%Page: (433) 433
%%BeginPageSetup
_S
18 36 translate
/pagenum 433 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:46:38 2019) def
/pagenumstr (433) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ed to 582, 654  - 21 August 2019) s
5 731 M
(-------------------------------------------------------------------------------------------) s
5 720 M
(-------------------------------------------------) s
5 709 M
(Category Theory of [Eilenberg-MacLane] abstracts whole of mathematics into following:) s
5 698 M
(        701.1 Category C is a Set of Objects) s
5 687 M
(        701.2 Every Category has set of morphisms f:a-b defined on objects a,b in Category ) s
5 676 M
(C) s
5 665 M
(        701.3 Functors F are maps between two Categories C1 and C2 - for each object x in C) s
5 654 M
(1, F\(x\) is in C2 and for each morphism f:a-b in C1) s
5 643 M
(morphism, F\(f\):F\(a\)-F\(b\) is in C2) s
5 621 M
(EventNet Tensor Products defined and implemented in NeuronRain and applied as intrinsic mer) s
5 610 M
(it measure for large scale visuals can be formalised in terms of Category theory as follows) s
5 599 M
(:) s
5 588 M
(        701.4 Every Event vertex in EventNet is a category) s
5 577 M
(        701.5 Set of Actors in an Event Category are Objects of the Category) s
5 566 M
(        701.6 Every intra-event interaction between any two actor objects a,b of an event c) s
5 555 M
(ategory E is a Morphism - f:a-b) s
5 544 M
(        701.7 Every inter-event causation between two Event Categories E1 and E2 \(E1 causes) s
5 533 M
( E2\) is a Functor - for each actor object x in E1, F\(x\) is in E2 and for each morphism f:a-) s
5 522 M
(b in E1, morphism F\(f\):F\(a\)-F\(b\) is in E2) s
5 500 M
(References:) s
5 489 M
(----------) s
5 478 M
(701.8 Category Theory - https://en.wikipedia.org/wiki/Category_theory) s
5 467 M
(701.9 Tensor Products as Functors - https://en.wikipedia.org/wiki/Functor - "... Tensor pro) s
5 456 M
(ducts: If C denotes the category of vector spaces over a fixed field, with linear maps as m) s
5 445 M
(orphisms, then the tensor product {\\displaystyle V\\otimes W} V\\otimes W defines a functor C) s
5 434 M
( \303\\227 C \342\\206\\222 C which is covariant in both arguments.[7] ...") s
_R
S
%%Trailer
%%Pages: 433
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
