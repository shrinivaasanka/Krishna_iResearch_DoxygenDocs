%!PS-Adobe-3.0
%%BoundingBox: 18 36 577 806
%%Title: Enscript Output
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Wed Aug 21 16:01:42 2019
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 90

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 559 def
/d_page_h 770 def
/d_header_x 0 def
/d_header_y 755 def
/d_header_w 559 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 559 def
/d_footer_h 0 def
/d_output_w 559 def
/d_output_h 755 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(------------------------------------------------------------------------------------------) s
5 731 M
(KingCobra - A Research Software for Distributed Request Service on Cloud with Arbiters) s
5 709 M
(This program is free software: you can redistribute it and/or modify) s
5 698 M
(it under the terms of the GNU General Public License as published by) s
5 687 M
(the Free Software Foundation, either version 3 of the License, or) s
5 676 M
(\(at your option\) any later version.) s
5 654 M
(This program is distributed in the hope that it will be useful,) s
5 643 M
(but WITHOUT ANY WARRANTY; without even the implied warranty of) s
5 632 M
(MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) s
5 621 M
(GNU General Public License for more details.) s
5 599 M
(You should have received a copy of the GNU General Public License) s
5 588 M
(along with this program.  If not, see <http://www.gnu.org/licenses/>.) s
5 566 M
(#------------------------------------------------------------------------------------------) s
5 555 M
(-------------) s
5 544 M
(#Copyleft \(Copyright+\):) s
5 533 M
(#Srinivasan Kannan) s
5 522 M
(#\(also known as: Ka.Shrinivaasan, Shrinivas Kannan\)) s
5 511 M
(#Ph: 9791499106, 9003082186) s
5 500 M
(#Krishna iResearch Open Source Products Profiles:) s
5 489 M
(#http://sourceforge.net/users/ka_shrinivaasan,) s
5 478 M
(#https://github.com/shrinivaasanka,) s
5 467 M
(#https://www.openhub.net/accounts/ka_shrinivaasan) s
5 456 M
(#Personal website\(research\): https://sites.google.com/site/kuja27/) s
5 445 M
(#emails: ka.shrinivaasan@gmail.com, shrinivas.kannan@gmail.com,) s
5 434 M
(#kashrinivaasan@live.com) s
5 423 M
(#------------------------------------------------------------------------------------------) s
5 412 M
(--------------) s
5 401 M
(*****************************************************************************************/) s
5 379 M
(Theoretical Interludes, Design Notes and ToDo \(long term with no deadline\)) s
5 368 M
(--------------------------------------------------------------------------) s
5 346 M
([This is a major research oriented subsystem of NeuronRain and inspired by COBRA project \(d) s
5 335 M
(one by the author in his BE \(1995-1999\) along with few other esteemed classmates. http://so) s
5 324 M
(urceforge.net/projects/acadpdrafts/files/Excerpts_Of_PSG_BE_FinalProject_COBRA_done_in_1999) s
5 313 M
(.pdf/download.\)]) s
5 291 M
([KingCobra though a misnomer is expanded as ClOud With ARBiters MimicKING containing the an) s
5 280 M
(agram] ) s
5 258 M
(1. \(THEORY\) There is a cloud of nodes which execute a set of services from randomly created) s
5 247 M
( clients. ) s
5 225 M
(2. \(THEORY\) This cloud could be on iCloud \(AsFer+USBmd+VIRGO\) platform or any other opensou) s
5 214 M
(rce cloud platforms like Hadoop Cluster.) s
5 192 M
(3. \(THEORY\) The Clients are publishers of Service requests which are of many types -  misce) s
5 181 M
(llaneous types of Service that could be dynamically added through other kernel modules and ) s
5 170 M
(invoked through a switch-case or embedded in function itself. Identified by unique id\(s\) fo) s
5 159 M
(r different types of services \(for example Problem reports, Suggestions etc.,\)) s
5 137 M
(4. \(THEORY\) The Services on the Cloud are Subscribers to these requests of specific type. T) s
5 126 M
(hus this is the conventional publisher-subscriber model.) s
5 104 M
(5. \(THEORY\) The requests flow through cloud using a workqueue \(which could be a lowlevel Li) s
5 93 M
(nux workqueue or VIRGO queue or some other queuing middleware software like ActiveMQ\). The ) s
5 82 M
(publishers enqueue and Subscribers dequeue the requests.) s
5 60 M
(6. \(THEORY\) The difference is that the Cloud has nodes that "deceive" or "corrupt". ) s
5 38 M
(7. \(THEORY\) Service requests - are published by the clients in the need of a service which ) s
5 27 M
(could be defined by markup file. These requests are scheduled and routed by the middleware ) s
5 16 M
(to competent authority which services it \(with or without timeframe\) and replies to the cli) s
5 5 M
(ent.) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(8. \(THEORY\) Problem reports - are published by clients which are "dissatisfied" by the qual) s
5 720 M
(ity of service by the cloud. These are analyzed by "arbiters" in the cloud which find the f) s
5 709 M
(aulting node\(s\) and take action. This allows manual intervention but minimizes it.) s
5 687 M
(9. \(THEORY\) Suggestions - are enhancement requests sent by clients and require manual inter) s
5 676 M
(vention.) s
5 654 M
(10. \(THEORY\) Cloud nodes have a Quality of Service metric calculated by a model.) s
5 632 M
(11. \(THEORY\) The cloud has a reporting structure of nodes - either as a graph or tree. The ) s
5 621 M
(graph is dynamically reorganized by weighting the Quality of Service of each node.) s
5 599 M
(12. \(THEORY\) The difficult part of the above is using Arbiters to find "faulty" nodes based) s
5 588 M
( on problem reports from clients.  ) s
5 566 M
(13. \(THEORY\) Brewer's CAP conjecture proved by [GilbertLynch] as a theorem \(still debated\) ) s
5 555 M
(states that only 2 of the 3 \(Consistency of data, Avaliability of data and Partition tolera) s
5 544 M
(nce when some nodes or messages are lost\) can be guaranteed and not all 3 are simultaneousl) s
5 533 M
(y achievable. ) s
5 511 M
(14. \(THEORY\) CAP theorem does not seem to apply to the above faulty scenario with corrupt n) s
5 500 M
(odes under Consistency or Availablity or Partition Tolerance. This is because a corrupt nod) s
5 489 M
(e can have any 2 of the 3 - it can give consistent data, is available with success response) s
5 478 M
( or can make the cloud work with missing data in partition tolerance but yet can "corrupt" ) s
5 467 M
(the cloud. Probably this needs to be defined as a new attribute called Integrity.) s
5 445 M
(15. \(THEORY\) As "corruption" is more conspicuous with monetary element, if above services a) s
5 434 M
(re "charged" with a logical currency \(e.g. bitcoin\), then corruption in cloud is defineable) s
5 423 M
( approximately as \(but not limited to\)- "Undue favour or harm meted out to a client not com) s
5 412 M
(mensurate with the charge for the service \(or\) unreasonable extra logical currency demanded) s
5 401 M
( to execute the service of same quality \(or\) deliberate obstruction of justice to a client ) s
5 390 M
(with malevolent and unholy collusion with other cloud nodes with feigned CAP". ) s
5 368 M
(16. \(THEORY\) Identifying criminal nodes as in \(15\) above seems to be beyond the ambit of CA) s
5 357 M
(P. Thus CAP with Integrity further places a theoretical limit on "pure" cloud. If Integrity) s
5 346 M
( is viewed as a Byzantine problem with faulty or corrupt processes in a distributed system,) s
5 335 M
( and if resilience factor is rf \(expected number of faulty nodes\), then most algorithms can) s
5 324 M
( ensure a "working" cloud only if resilience is ~30% or less \(3*rf+1\) of the total number o) s
5 313 M
(f cloud nodes. Probably this could apply to Integrity also that places a limit of 30% on "c) s
5 302 M
(orrupt nodes" for the Cloud to work with sanity. Translating this to a Governance problem, ) s
5 291 M
(a corruption-free administration is achievable with a maximum limit of 30% "corrupt" elemen) s
5 280 M
(ts. ) s
5 258 M
(17. \(THEORY-ONGOING\) Analytics on the Problem reports sent to the cloud queue give a patter) s
5 247 M
(n of corrupt nodes. Intrinsic Merit ranking with Citation graph maxflow considering cloud a) s
5 236 M
(s a flow network where a node positively or negatively cites or "opines" about a node, as m) s
5 225 M
(entioned in http://arxiv.org/abs/1006.4458 \(author's Master's thesis\) and http://www.nist.g) s
5 214 M
(ov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf\(published by the author) s
5 203 M
( during PhD\) give a p2p ranking of cloud nodes that can be used for analysis though may not) s
5 192 M
( be reliable fully. AsFer has bigdata analytics functionality that fits well to this point ) s
5 181 M
(to analyse the problem reports with machine learning algorithms and set the key-value pairs) s
5 170 M
( that are read by VIRGO kernel_analytics module and exported kernelwide. The persisted REQU) s
5 159 M
(EST_REPLY.queue with the logged request-reply IPs and timestamps can be mined with AsFer bi) s
5 148 M
(gdata capability \(e.g. Spark\)) s
5 126 M
(18. \(THEORY\) Policing the cloud nodes with arbiters - This seems to be limited by CAP theor) s
5 115 M
(em and Integrity as above. Also this is reducible to perfect inference problem in http://so) s
5 104 M
(urceforge.net/p/asfer/code/HEAD/tree/AstroInferDesign.txt and drafts in https://sites.googl) s
5 93 M
(e.com/site/kuja27/) s
5 71 M
(19. \(THEORY\) Brooks-Iyengar algorithm for sensors in all cloud nodes is an improved Byazant) s
5 60 M
(ine Fault Tolerant algorithm.) s
5 38 M
(20. \(THEORY\) BitCoin is a Byzantine Fault Tolerant protocol.) s
5 16 M
(21. \(THEORY\) Byzantine Fault Tolerance in Clouds is described in http://www.computer.org/cs) s
5 5 M
(dl/proceedings/cloud/2011/4460/00/4460a444-abs.html, http://www.eurecom.fr/~vukolic/Byzanti) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(neEmpire.pdf which is more on Cloud of Clouds - Intercloud with cloud nodes that have malic) s
5 731 M
(ious or corrupt software. Most of the key-value\(get/set\) implementations do not have byzant) s
5 720 M
(ine nodes \(for example CAP without Byzantine nodes in Amazon Dynamo: http://www.eurecom.fr/) s
5 709 M
(~michiard/teaching/slides/clouds/cap-dynamo.pdf\)) s
5 687 M
(22. \(THEORY\) Related to point 18 - The problem of fact finding or fault finding using a clo) s
5 676 M
(ud police has the same limitation as the "perfect inference" described in http://sourceforg) s
5 665 M
(e.net/p/asfer/code/HEAD/tree/AstroInferDesign.txt. "Money trail" involving the suspect node) s
5 654 M
( in point 28 is important to conclude something about the corruption. In real world trackin) s
5 643 M
(g money trail is a daunting task. In cloud that abides by CAP, missing messages on trail ca) s
5 632 M
(n prevent reaching a conclusion thereby creating benefit-of-doubt. Also fixing exact value ) s
5 621 M
(for a transaction that involves MAC currency message is undecidable - a normative economics) s
5 610 M
( problem can never be solved by exact theoretical computer science. ) s
5 588 M
(23. \(THEORY\) Reference article on cloud BFT for Byzantine, Corrupt brokers - Byzantine Faul) s
5 577 M
(t-Tolerant Publish/Subscribe: A Cloud Computing Infrastructure \(www.ux.uis.no/~meling/paper) s
5 566 M
(s/2012-bftps-srdsw.pdf\) ) s
5 533 M
(---------------------------------------------------------------) s
5 522 M
(24. KingCobra messaging request-response design - options) s
5 511 M
(--------------------------------------------------------------- ) s
5 489 M
(24a. Implementing a message subscription model in kernelspace where clients publish the mes) s
5 478 M
(sage that is queued-in to subscribers' queue \(Topic like implementation - use of ActiveMQ C) s
5 467 M
( implementation if available\).) s
5 445 M
(24b. \(DONE-minimal implementation\) At present a minimum kernelspace messaging system that q) s
5 434 M
(ueues remote request and handles through workqueue handler is in place. This responds to th) s
5 423 M
(e client once the Kingcobra servicerequest function finishes processing the request\(reply_t) s
5 412 M
(o_publisher\(\) in KingCobra driver\). Unlike the usual messaging server, in which client publ) s
5 401 M
(ishes messages of a particular type that are listened to by interested clients, one option ) s
5 390 M
(is to continue the status-quo of KingCobra as a peer-to-peer messaging system. Thus every V) s
5 379 M
(IRGO node is both a kernelspace messaging client and server that can both publish and liste) s
5 368 M
(n. Every message in the cloud can have a universally unique id assigned by a timestamp serv) s
5 357 M
(er - https://tools.ietf.org/html/rfc4122 \(similar to bitcoin protocol\) so that each message) s
5 346 M
( floating in the cloud is unique across the cloud \(or\) no two messages on the VIRGO cloud a) s
5 335 M
(re same. The recipient node executing kingcobra_servicerequest_kernelspace\(\) parses the uni) s
5 324 M
(que-id \(example naive unique-id is <ip-address:port>#localtimestampofmachine which is a sim) s
5 313 M
(plified version of RFC4122\) from the incoming remote request and responds to the remote cli) s
5 302 M
(ent through kernel socket connection  that gets queued-in the remote client and handled sim) s
5 291 M
(ilar to incoming remote request. To differentiate request and response-for-request response) s
5 280 M
( messages are padded with a string "REPLY:<unique-id-of-message>" and requests are padded w) s
5 269 M
(ith "REQUEST:<unique-id-of-message>". This is more or less similar to TCP flow-control with) s
5 258 M
( SEQ numbers but state-less like UDP. Simple analogy is post-office protocol with reference) s
5 247 M
( numbers for each mail and its reply. Thus there are chronologically two queues: \(1\) queue ) s
5 236 M
(at the remote VIRGO cloud service node for request \(2\) queue at the remote client for respo) s
5 225 M
(nse to the request sent in \(1\). Thus any cloudnode can have two types of messages - REQUEST) s
5 214 M
( and REPLY. Following schematic diagram has been implemented so far.) s
5 192 M
(-------------------------------------------------------------------------------------------) s
5 181 M
(----------) s
5 170 M
(24c.\(DONE\) KingCobra - VIRGO queue - VIRGO cpupooling , mempooling and queue service driver) s
5 159 M
(s interaction schematic diagram:) s
5 148 M
(-------------------------------------------------------------------------------------------) s
5 137 M
(----------) s
5 115 M
(        KingCobraClient ==========>=<REQUEST:id>===================> VIRGO cpupooling servi) s
5 104 M
(ce =====> VIRGO Queue ============> KingCobraService) s
5 93 M
(               ||                                                                          ) s
5 82 M
(                                 ||) s
5 71 M
(               ||                                                                          ) s
5 60 M
(                                 ||     ) s
5 49 M
(                <================= VIRGO Queue <====== VIRGO cpupooling service ====<REPLY:) s
5 38 M
(id>=================================== V) s
5 27 M
(        ) s
5 16 M
(        KingCobraClient ==========>=<REQUEST:id>===================> VIRGO mempooling servi) s
5 5 M
(ce =====> VIRGO Queue ============> KingCobraService) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(               ||                                                                          ) s
5 731 M
(                                 ||) s
5 720 M
(               ||                                                                          ) s
5 709 M
(                                 ||     ) s
5 698 M
(                <================= VIRGO Queue <====== VIRGO mempooling service ====<REPLY:) s
5 687 M
(id>==================================== V) s
5 676 M
(        ) s
5 665 M
(        KingCobraClient ==========>=<REQUEST:id>===================> VIRGO Queue service ==) s
5 654 M
(==================================> KingCobraService) s
5 643 M
(               ||                                                                          ) s
5 632 M
(                                 ||) s
5 621 M
(               ||                                                                          ) s
5 610 M
(                                 ||     ) s
5 599 M
(                <================= VIRGO Queue service ============================<REPLY:i) s
5 588 M
(d>==================================== V) s
5 544 M
(24d. \(ONGOING\) kingcobra_servicerequest_kernelspace\(\) distinguishes the "REQUEST" and "REPL) s
5 533 M
(Y" and optionally persists them to corresponding on-disk filesystem.  Thus a disk persisten) s
5 522 M
(ce for the queued messages can either be implemented in 1\) VIRGO queue driver 2\)  workqueue) s
5 511 M
(.c \(kernel itself needs a rewrite \(or\) 3\) KingCobra driver. Option \(2\) is difficult in the ) s
5 500 M
(sense that it could impact the kernel as-a-whole whereas 1\) and 3\) are modularized. At pres) s
5 489 M
(ent Option 3 persistence within KingCobra driver has been implemented.) s
5 467 M
(24e.Above option 24b implements a simple p2p queue messaging in kernel. To get a Topic-like) s
5 456 M
( behaviour in VIRGO queue might be difficult as queue_work\(\) kernel function has to be repe) s
5 445 M
(atedly invoked for the same work_struct on multiple queues which are subscribers of that me) s
5 434 M
(ssage in AMQ protocol. Moreover creating a queue at runtime on need basis looks difficult i) s
5 423 M
(n kernel which is usually done through some CLI or GUI interface in ActiveMQ and other mess) s
5 412 M
(aging servers. ) s
5 390 M
(25. \(ONGOING\) For the timestamp service, EventNet described in http://sourceforge.net/p/asf) s
5 379 M
(er/code/HEAD/tree/AstroInferDesign.txt is a likely implementation choice. AsFer already has) s
5 368 M
( a primitive text files based EventNet graph implementation in place. Periodic topological ) s
5 357 M
(sort \(quite expensive\) of EventNet gives logical ordering and thus a logical timestamp of t) s
5 346 M
(he cloud events.) s
5 324 M
(26. \(THEORY - ONGOING Implementation\) MESSAGE-AS-CURRENCY PROTOCOL: If each message payload) s
5 313 M
( is also construed as a currency carrier, each message id can be mapped to a unique currenc) s
5 302 M
(y or a coin with fixed denomination. This is similar to each currency note having a serial ) s
5 291 M
(number as unique id. Uniqueness is guaranteed since there can be only one message \(or coin\)) s
5 280 M
( with that id on the cloud. This simulates a scenaio - "Sender of the message pays the Rece) s
5 269 M
(iver with a coin having the unique id and Receiver acknowledges receipt". This is an altern) s
5 258 M
(ative to BitCoin protocol. Double spending is also prohibited since at any point in time th) s
5 247 M
(e message or "coin" with unique id can be sent by only one node in the cloud. Unique Cloudw) s
5 236 M
(ide Timestamp server mimicks the functionality of "Mint". There is a difference here betwee) s
5 225 M
(n conventional send-receive of messages - Once a message is sent to remote cloud node, no c) s
5 214 M
(opy of it should exist anywhere in the cloud. That is, every MAC currency message is a clou) s
5 203 M
(dwide singleton. In pseudocode this is expressible as:) s
5 192 M
(        m1=MAC_alloc\(denomination\)) s
5 181 M
(        m2=m1 \(---- this is disallowed\)) s
5 170 M
(Linux kernel allocation functions - kmalloc\(\) - have a krefs functionality for reference co) s
5 159 M
(unting within kernel. Refcount for MAC message can never exceed 1  across cloud for above s) s
5 148 M
(ingleton functionality - this has to be a clause everywhere for any unique MAC id. This req) s
5 137 M
(uires a cloudwide krefs rather. Buyer decrements cloudwide kref and Seller increments it. I) s
5 126 M
(n C++ this is done by std::move\(\) and often required in "Perfect Forwarding" - http://thbec) s
5 115 M
(ker.net/articles/rvalue_references/section_07.html - within single addressspace. By overloa) s
5 104 M
(ding operator=\(\) with Type&& rvalue reference, the necessary networking code can be invoked) s
5 93 M
( that does the move which might include serialization. But unfortunately C++ and Linux kern) s
5 82 M
(el are not compatible. The Currency object has to be language neutral and thus Google Proto) s
5 71 M
(col Buffers which have C,C++,Java, Python .proto files compilers support might be useful bu) s
5 60 M
(t yet the move semantics in Kernel/C is non-trivial that requires cloudwide transactional k) s
5 49 M
(ernel memory as mentioned in \(31\) below.  A C++ standalone userspace client-server cloud ob) s
5 38 M
(ject move implementation based on std::move\(\) over network of Protocol Buffer Currency Obje) s
5 27 M
(cts has been added to AsFer repository at - http://sourceforge.net/p/asfer/code/HEAD/tree/c) s
5 16 M
(pp-src/cloud_move which can optionally be upcall-ed to userspace from VIRGO and KingCobra d) s
5 5 M
(rivers. This C++ implementation is invoked in userspace with call_usermodehelper\(\) from VIR) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(GO Queue Messaging via the kernel workqueue handler. ) s
5 720 M
(26.1 Schematic Diagram for Cloud Perfect Forwarding with AsFer+VIRGOQueue+KingCobraUserspac) s
5 709 M
(e:) s
5 698 M
(-------------------------------------------------------------------------------------------) s
5 687 M
(--) s
5 665 M
(    Telnet or other client ===========> VIRGO Queue Service Listener ======> VIRGO Workqueu) s
5 654 M
(e Handler) s
5 643 M
(                                                                                |) s
5 632 M
(                                                                                |  [KernelS) s
5 621 M
(pace]) s
5 610 M
(                                                                                V) s
5 599 M
(        AsFer Cloud Perfect Forwarding Client <===== KingCobra Userspace shell script\(call_) s
5 588 M
(usermodehelper\)) s
5 577 M
(                        |                                                       |) s
5 566 M
(                        |                                                       |) s
5 555 M
(  Virtual Currency      |                                                       |  [UserSpa) s
5 544 M
(ce]) s
5 533 M
(                        V                                                       V) s
5 522 M
(        AsFer Cloud Perfect Forwarding Server <=================================/) s
5 489 M
(References:) s
5 478 M
(----------) s
5 467 M
(26.2 An example distributed transactional memory implementation in cloud - http://infinispa) s
5 456 M
(n.org/tutorials/simple/tx/ and http://www.cloudtm.eu/ - these are in userspace cloud \(C++ a) s
5 445 M
(nd Java\) and may not have cloud move functionality - move has to be simulated in a transact) s
5 434 M
(ion: replicate data, delete in one endpoint and create in other endpoint) s
5 412 M
(27. \(THEORY\) SIMULATING A VIRTUAL ECONOMY with above MAC protocol \(Message-as-currency\): If) s
5 401 M
( each message sent is considered as "money" element and cloud nodes and clients are the con) s
5 390 M
(sumers and producers of "electronic money", the timestamp "Mint" becomes a virtual Federal ) s
5 379 M
(Reserve or Central Bank that controls the "electronic money" circulation in the cloud. Infa) s
5 368 M
(ct any REPLY messages could be mapped to a Service a client derives by s\(p\)ending the REQUE) s
5 357 M
(ST "money message". Thus value\(REQUEST\) should equal value\(REPLY\) where value\(\) is a functi) s
5 346 M
(on that measures the value of a money denomination and the value of goods and/or services f) s
5 335 M
(or that money. For example Rs.10000 or $10000 has no meaning if it doesn't translate into a) s
5 324 M
( value \(analogy: erstwhile Gold Standard\).When the value\(\) function gets skewed phenomena l) s
5 313 M
(ike Inflation arise. Thus above model could also have a notion of value\(\) and "electronic m) s
5 302 M
(oney inflation". Thus any "message money" with a unique id assigned by the cloud unique id\() s
5 291 M
(or logical timestamp\) server can exist at most in only one node in the cloud. Money trail c) s
5 280 M
(an be implemented by prefixing a header to the incoming message money in each cloud node th) s
5 269 M
(at receives the money which traces the "path" taken. Cloud has to implement some Byzantine ) s
5 258 M
(Fault Tolerant protocol. The value\(\) function to some extent can measure the "deceit" as ab) s
5 247 M
(ove. When a Buyer and Seller's value\(\) functions are at loggerheads then that is starting p) s
5 236 M
(oint of "cloud corruption" at either side and might be an undecidable problem. ) s
5 214 M
(28. \(THEORY\) TRADING WITH ABOVE KINGCOBRA MAC protocol - somewhat oversimplified:) s
5 203 M
(                                ) s
5 192 M
(                                --------------------) s
5 181 M
(                                |Unique MAC id MINT|) s
5 170 M
(                                --------------------) s
5 159 M
(                                        ||) s
5 148 M
(        -----money trail------------------) s
5 137 M
(        |) s
5 126 M
(        V) s
5 115 M
(        ....) s
5 104 M
(        Buyer   ======= sends MAC message \(REQUEST id\) =======> Seller \(stores the MAC in l) s
5 93 M
(ocal cash reserve and prepends money trail\)) s
5 82 M
(        ||                                                      ||) s
5 71 M
(        <============ sends the goods and services \(REPLY id\) ===) s
5 49 M
(In the above schematic, money with unique id in cloud reaches a buyer after many buyer-sell) s
5 38 M
(er transitions called "money trail". The MAC currency is prefixed by each node to create a ) s
5 27 M
(chain. Buyer then sends a request to the seller through MAC virtual currency and seller rep) s
5 16 M
(lies with goods and services. Seller prepends the money trail chain. When a transaction occ) s
5 5 M
(urs the whole cloud need not be notified about it except only buyer and seller. MAC Mint co) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(uld create a bulk of money denominations and circulate them in cloud economy.) s
5 720 M
(References:) s
5 709 M
(-----------) s
5 698 M
(28.1 Price fixing for items in Buyer-Seller-Trader networks - Trading Networks - Market Equ) s
5 687 M
(ilibrium and Walrasian Model of Price fixing - http://www.cs.cornell.edu/~eva/traders.pdf) s
5 676 M
(28.2 Algoithmic Game Theory - Market Equilibrium for Price - Equilibrium is a strategic sta) s
5 665 M
(ndoff - both players can't better their own present by changing strategies e.g Buyer-Seller) s
5 654 M
(s are market players and equilibrium price is the one where both buyer and seller can't gai) s
5 643 M
(n by varying it - http://www.cis.upenn.edu/~mkearns/nips02tutorial/nips.pdf. Buyer-Seller p) s
5 632 M
(ayoff matrix picturises the bargaining problem.) s
5 621 M
(28.3 Price-setting in Trading networks - Chapter 11 - https://www.cs.cornell.edu/home/klein) s
5 610 M
(ber/networks-book/networks-book.pdf) s
5 588 M
(29. \(THEORY\) VALUE FOR ELECTRONIC MONEY: How is above MAC money earned - This again require) s
5 577 M
(s linking value to money \(as money is not a value by itself and only a pointer to valuable ) s
5 566 M
(item or resource\). Thus any buyer can "earn" MAC money by something similar to a barter.) s
5 544 M
(30. \(THEORY and IMPLEMENTATION\) FIXING VALUE FOR MAC MONEY: To delineate corruption as disc) s
5 533 M
(ussed in 27 above with value\(\) disparity between MAC money and REPLY goods and services, an) s
5 522 M
( arbiter node in cloud has to "judge" the value of MAC sent by buyer and goods and services) s
5 511 M
( from seller and proclaim if corruption exists. Thus value\(\) function itself has to be some) s
5 500 M
( kind of machine learning algorithm. This is related to or same as points 12 to 23 above. F) s
5 489 M
(or example, while buying an item for few million bucks, value\(\) has to take as input the de) s
5 478 M
(scription of the item and calculate the value "ideally" which is difficult. Because there a) s
5 467 M
(re no perfect references to evaluate and only a weighted average of available market price ) s
5 456 M
(range has to be taken as a reference which is error-prone. value\(\) function can be recursiv) s
5 445 M
(ely defined as\("Reductionism"\):) s
5 434 M
(        -----------------------------------------------------------------------------------) s
5 423 M
(------------------) s
5 412 M
(        |value\(i\) = summation\(value\(ingredients of i\)\) + cost\(integrating the ingredients t) s
5 401 M
(o create item i\) |) s
5 390 M
(        -----------------------------------------------------------------------------------) s
5 379 M
(------------------) s
5 368 M
(Obviously the above recursion combinatorially explodes into exponential number of nodes in ) s
5 357 M
(the recursion tree. Ideally recursion has to go deep upto quarks and leptons that makeup th) s
5 346 M
(e standard model. If for practical purposes, recursion depth is restricted to t then size o) s
5 335 M
(f value\(\) tree is O\(m^t\) where m is average number of ingredients per component. Hence any ) s
5 324 M
(algorithm computing the value\(\) recursion has to be exponential in time. Computation of val) s
5 313 M
(ue\(\) in the leaf nodes of the recursion is most crucial as they percolate bottom-up. If lea) s
5 302 M
(f nodes of all possible items are same \(like quarks and leptons making up universe\) then su) s
5 291 M
(ch atomic ingredient has to have "same" value for all items. Only the integration cost vari) s
5 280 M
(es in the levels of the tree.For infinite case, value\(\) function is conjectured to be undec) s
5 269 M
(idable - probably invoking some halting problem reduction .But above value\(\) function could) s
5 258 M
( be Fixed Parameter Tractable in parameter recursion depth - t but yet could only be an app) s
5 247 M
(roximation. A Turing machine computing value\(\) function exactly might loop forever and thus) s
5 236 M
( Recursively Enumerable and not Recursive. A CVXPY implementation for Pricing Market Equili) s
5 225 M
(brium has been implemented in KingCobra. ) s
5 203 M
(31. \(THEORY\) Buyer-Seller and MAC electronic money transaction schematic:) s
5 192 M
(-------------------------------------------------------------------------) s
5 181 M
(        ) s
5 170 M
(        Buyer            A-------<id><refcnt:0>----------------------> Seller <id><refcnt:1) s
5 159 M
(> \(increments refcnt\)) s
5 148 M
(        \(<id><refcnt:1>  |) s
5 137 M
(         <id><refcnt:0>  |) s
5 126 M
(        after decrement  |) s
5 115 M
(        refcnt           |) s
5 104 M
(        \)---------------->) s
5 93 M
(Above has to be transactional \(i.e atomic across cloud nodes\)) s
5 71 M
(32. \(THEORY\) MAC protocol reaper) s
5 60 M
(--------------------------------) s
5 49 M
(Reaper thread in each cloud node harvests the zero refcounted allocations and invokes destr) s
5 38 M
(uctors on them. Same  MAC id cannot have kref count of 1 or above in more than one cloud no) s
5 27 M
(de due to the transaction mentioned previously.) s
5 5 M
(33. \(THEORY\) Cloud Policing With Arbiters - Revisited:) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(------------------------------------------------------) s
5 731 M
(When a suspect node is analyzed when a complaint problem is filed on it, \(1\) it is of forem) s
5 720 M
(ost importance on how flawless is the arbiter who investigates on that and is there a perfe) s
5 709 M
(ct way to choose a perfect arbiter. In the absence of the previous credibility of entire cl) s
5 698 M
(oud judiciary is blown to smithereens and falls apart. \(2\) Assuming a perfect arbiter which) s
5 687 M
( is questionable, next thing is to analyze the credibility of the node who sulked. This is ) s
5 676 M
(nothing but the Citation problem in http://arxiv.org/abs/1106.4102 and http://www.nist.gov/) s
5 665 M
(tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf where a node can positivel) s
5 654 M
(y or negatively cite another node a "Societal Norm" which can be faulted and citations/opin) s
5 643 M
(ions could be concocted with malafide intent\(perjury\). This is rather a generalization of P) s
5 632 M
(ageRank algorithm with negative citations. Thus Perfect Cloud Arbitration could be an unsol) s
5 621 M
(vable problem. \(3\) Even if both arbiter and complainant are perfect which is again question) s
5 610 M
(able, there are still loopholes - lack of evidences or implicated witnesses might portray a) s
5 599 M
( negative impression of a positive node. Thus there are 3 tiers of weakenings in cloud arbi) s
5 588 M
(tration and there could be more. P\(Good\) series in https://sites.google.com/site/kuja27/ pr) s
5 577 M
(ecisely addresses this problem.) s
5 555 M
(34. \(THEORY\) MAC Money Flow as MaxFlow problem:) s
5 544 M
(-------------------------------------------) s
5 533 M
(Transactions happening in a cloud are edges between the nodes involved \(buyer and seller\). ) s
5 522 M
(Thus it creates a huge directed graph. Flow of money in this graph can be modelled as Flow ) s
5 511 M
(network. Minimum Cut of this graph shows crucial nodes in the graph which play vital role i) s
5 500 M
(n cloud economy removal of which paralyzes the cloud \(could be Central bank and other finan) s
5 489 M
(cial institutions\). This graph has bidirectional edges where one direction is for money and) s
5 478 M
( the opposite direction is for Goods and Services. In the Flow network sum of flows is zero) s
5 467 M
(. But in the Money Flow Network each node is having a cash reserve ratio \(CRR\) due to comme) s
5 456 M
(rcial transactions which is confidential and privy to that node only  and thus sum of flows) s
5 445 M
( can not be zero. Hub nodes in the Money Flow graph which can be obtained by getting k-core) s
5 434 M
( or D-core of the graph by some graph peeling algorithms are crucial nodes to the economy t) s
5 423 M
(hat contribute to Money circulation. ) s
5 401 M
(35. \(THEORY\) Cycles and components in above MAC Money Flow Graph:) s
5 390 M
(--------------------------------------------------------------) s
5 379 M
(Above graph of money transactions could be cyclic which implies a supply chain. Strongly co) s
5 368 M
(nnected components of this graph are most related nodes that are in same industry. ) s
5 346 M
(36. \(THEORY\) STOCK TRADING:) s
5 335 M
(---------------------------) s
5 324 M
(One of the component in above MAC Money Flow Graph of cloud could be a virtual Stock Exchan) s
5 313 M
(ge. Based on the financial and securities transactions of constituent organizations in the ) s
5 302 M
(graph, index of the exchange varies.  ) s
5 280 M
(37. \(THEORY\) Analysis of Poverty and Alleviation through above money flow graph:) s
5 269 M
(--------------------------------------------------------------------------------) s
5 258 M
(Weights of the edges of money flow graph are the denominations of the transaction. Thus hig) s
5 247 M
(h value edges and low value edges divide the Graph logically into Rich and Poor strata\(Bour) s
5 236 M
(geoisie and Proletariat subgraphs\). Equitable graph is the one which does not have too much) s
5 225 M
( of value difference between Rich and Poor sets of edges - a utopian to achieve. Mathematic) s
5 214 M
(ally, it is an optimization LP problem that seeks to minimize sum\(RichEdges\)-sum\(PoorEdges\)) s
5 203 M
( or Sum\(RichVertices\) - sum\(PoorVertices\) - without harming either - to be precise. This re) s
5 192 M
(quires money flow to be programmed to find a feasible solution to this LP subject to constr) s
5 181 M
(aints like work-pay parity etc.,\(there could be more variables and constraints to this LP\) ) s
5 170 M
(. Due to CRR above Vertices also can be Rich and Poor in addition to Rich Edges and Poor Ed) s
5 159 M
(ges. ) s
5 137 M
(38.\(THEORY\) Demand and Supply and Value\(\) function:) s
5 126 M
(------------------------------------------) s
5 115 M
(Alternative to the recursive definition of value\(\) function above can be done through Deman) s
5 104 M
(d and Supply - more the demand and less the supply, price increases and vice-versa. This is) s
5 93 M
( quite subjective compared to absolute recursive definition above. To simulate demand and s) s
5 82 M
(upply, the weights of the money edges \(-> direction\) in the bidirectional graph change and ) s
5 71 M
(fluctuate dynamically over time for unchanging weights of the Goods and Services edges \( <-) s
5 60 M
( direction\) between any pair of Buyer-Seller vertices. This makes Money and G&S Flow graph ) s
5 49 M
(a Dynamic Graph with edge weight update primitive.) s
5 27 M
(39.\(THEORY\) Hidden or Colored Money:) s
5 16 M
(------------------------------------) s
5 5 M
(In an ideal Cloud with only MAC currencies, colored money can co-exist if \(not limited to\) ) s
_R
S
%%Page: (8) 8
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(some money trails are missing, due to "cloud corruption", systemic failure, hardware and ne) s
5 731 M
(twork issues etc.,. Probably this is the direct consequence of CAP theorem and can be conje) s
5 720 M
(ctured to be undecidable. Hidden money is to some extent dependent on quantity of net flow ) s
5 709 M
(\(if non-zero\) and how much of this net flow is contributed by Rich vertices and Edges. Mone) s
5 698 M
(y Circulation with Colored money can be formulated as Network Flow Problem with Time horizo) s
5 687 M
(n and storage at nodes. Time horizon implies  a certain flow has to happen before a stop ti) s
5 676 M
(me. Flow conservation is affected by this Dynamic Flow because of storage at nodes and mone) s
5 665 M
(y entering a node need not be equal to money leaving. Thus not all Hidden/Colored money is ) s
5 654 M
(illegal in theoretical terms. As mentioned in 39.1, storage is simulated with a closed loop) s
5 643 M
( at nodes so that flow conservation is not seemingly violated. Profiteering is achieved by ) s
5 632 M
(money flows over time in financial markets by assigining a multiplicative factor at each ed) s
5 621 M
(ge which accrues through a cycle and comes back to start node in cycle with a magnification) s
5 610 M
( in value. BlockChain techniques maintain ledgers which record all transactions globally th) s
5 599 M
(us decimating hidden unaccounted wealth if any. KingCobra experimental MAC currency relies ) s
5 588 M
(on unique global identifier and global refcounts with atomic cloud transactions in linux ke) s
5 577 M
(rnel. Money Flow Graph mentioned in 34-39 has striking resemblance to Money Flow Markets al) s
5 566 M
(ready studied in Algorithmic Game Theory\(AGT\). 39.3 primarily devotes to Pricing and Equili) s
5 555 M
(brium of Edges in Money Flow Graphs and not much on Colored Money Flow. An algorithm to fin) s
5 544 M
(d colored money flow could be a major advance in AGT. Prima facie there exists no zero-know) s
5 533 M
(ledge blackbox proof algorithm to find colored money because all storage data is a prerequi) s
5 522 M
(site which is impossible to know. Money trail for MAC currency described in 22,27,28 requir) s
5 511 M
(es tracking of currencies. There are recent dollar and euro bills issued with Radio Frequen) s
5 500 M
(cy ID tags \(RFID\).) s
5 478 M
(Total storage of money in Flow Market Graph = | Incoming money flow at Source - Incoming mo) s
5 467 M
(ney flow at Sink | i.e Flow conservation is no longer obeyed.) s
5 445 M
(There is a special vertex in Money Flow Market designated as Direct Taxation Hub which has ) s
5 434 M
(incoming direct tax money flow edges from all other vertices in Flow market.Colored money i) s
5 423 M
(s then approximately the taxed storage money estimated above minus the net flow of money re) s
5 412 M
(ceived at Taxation Hub.) s
5 390 M
(Colored Money = | Total storage money * Direct Taxation rate - Incoming Flow at Direct Taxa) s
5 379 M
(tion Hub Node|) s
5 368 M
(Colored Money = | Incoming money flow at Source * Direct Taxation rate - Incoming money flo) s
5 357 M
(w at Sink * Direct Taxation rate - Incoming Flow at Direct Taxation Hub Node |) s
5 335 M
(Previous is an approximate naive zero-knowledge estimation of Colored money in Money Flow M) s
5 324 M
(arket. This assumes that there is always a sink in Money Flow Market which is not necessari) s
5 313 M
(ly valid unless notes are returned to mint. Satellite RFID Tracking technologies though inv) s
5 302 M
(asive and intrusive like previous can present a rough figure of total money circulation in ) s
5 291 M
(Source and Sink.) s
5 269 M
(Above estimate is for direct taxation and resultant evasion. For indirect taxes \(on Goods a) s
5 258 M
(nd Services etc.,\), there is no direct impact on the money component and only G&S are affec) s
5 247 M
(ted. Combining Goods,Services and Income into one \(direct+indirect\) taxation could have a n) s
5 236 M
(egative effect on Colored money because incentive to hide money no longer exists. For examp) s
5 225 M
(le, if only Goods and Services consumed by high-income brackets are preferentially taxed at) s
5 214 M
( high percentage replacing tax on income, income is also indirectly taxed in addition to G&) s
5 203 M
(S. Thus there is no necessity to tax income and any advantage of such direct taxation is in) s
5 192 M
(directly usurped by preferential G&S taxation. Previous zero-knowledge estimate then become) s
5 181 M
(s:) s
5 159 M
(Colored Money = | Total Goods and Services * Taxation rate - Incoming Flow at Indirect Taxa) s
5 148 M
(tion Hub Node|) s
5 137 M
(Colored Money = | GDP^2 * Tax-to-GDP ratio - Incoming Flow at Indirect Taxation Hub Node| w) s
5 126 M
(here GDP is assumed to be equal to Total Goods and Services.) s
5 93 M
(References:) s
5 82 M
(-----------) s
5 71 M
(39.1 Network Flows over time over Storage Area Networks \(SAN\) - https://hal.inria.fr/inria-) s
5 60 M
(00071643/document) s
5 49 M
(39.2 Network Flow - [GoldbergTardosTarjan] - http://www.cs.cornell.edu/~eva/network.flow.al) s
5 38 M
(gorithms.pdf) s
5 27 M
(39.3 Algorithmic Game Theory - Flow Markets - [TimRoughGarden] - http://theory.stanford.edu) s
5 16 M
(/~tim/books.html) s
5 5 M
(39.4 RFID tagged currencies - $100 bill - http://www.businessinsider.in/New-Smart-Paper-Cou) s
_R
S
%%Page: (9) 9
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ld-Put-An-End-To-Dark-Money/articleshow/21134569.cms) s
5 731 M
(39.5 Cons of RFID currencies - http://www.prisonplanet.com/022904rfidtagsexplode.html) s
5 720 M
(39.6 Mechanism Design and Machine Learning - https://www.cs.cmu.edu/~mblum/search/AGTML35.p) s
5 709 M
(df - Design of algorithms for maximizing gain in auctions involving sellers and buyers) s
5 698 M
(39.7 Financial and Economic Networks - https://supernet.isenberg.umass.edu/bookser/innov-ch) s
5 687 M
(1.pdf) s
5 665 M
(-----------------------------------------------) s
5 654 M
(Commits as on 1 March 2014) s
5 643 M
(-----------------------------------------------) s
5 632 M
(Example java Publisher and Listeners that use ActiveMQ as the messaging middleware have bee) s
5 621 M
(n committed to repository for an ActiveMQ queue instance created for KingCobra. For multipl) s
5 610 M
(e clients this might have to be a Topic rather than Queue instance. Request types above and) s
5 599 M
( a workflow framework can be added on this. This will be a JMS compliant implementation whi) s
5 588 M
(ch might slow down compared to a linux workqueue or queue implementation being done in VIRG) s
5 577 M
(O.) s
5 566 M
(----------------------------------------------) s
5 555 M
(Commits as on 17 March 2014) s
5 544 M
(---------------------------------------------) s
5 533 M
(KingCobra userspace library and kernelspace driver module have been implemented that are in) s
5 522 M
(voked 1\) either in usermode by call_usermodehelper\(\)) s
5 511 M
(2\) or through intermodule invocation through exported symbols in KingCobra kernel module, b) s
5 500 M
(y the workqueue handler in VIRGO workqueue implementation.) s
5 478 M
(---------------------------------------------) s
5 467 M
(Commits as on 22 March 2014) s
5 456 M
(---------------------------------------------) s
5 445 M
(Minimalistic Kernelspace messaging server framework with kernel workqueue,handler and remot) s
5 434 M
(e cloud client has been completed - For this VIRGO clone cpupooling driver has been added a) s
5 423 M
( clause based on a boolean flag, to direct incoming request from remote client to VIRGO lin) s
5 412 M
(ux workqueue which is popped by workqueue handler that invokes a servicerequest function on) s
5 401 M
( the KingCobra kernel module. \(Build notes: To remove any build or symbol errors, Module.sy) s
5 390 M
(mvers from VIRGO queue has to be copied to VIRGO cloudexec and built to get a unified VIRGO) s
5 379 M
( cloudexec Module.symvers that has exported symbol definitions for push_request\(\)\). End-to-) s
5 368 M
(end test with telnet path client sending a request to VIRGO cloudexec service, that gets qu) s
5 357 M
(eued in kernel workqueue, handled by workqueue handler that finally invokes KingCobra servi) s
5 346 M
(ce request function has been done and the kern.log has been added to repository at drivers/) s
5 335 M
(virgo/queuing/test_logs/) s
5 313 M
(----------------------------------------------) s
5 302 M
(Commits as on 29 March 2014) s
5 291 M
(----------------------------------------------) s
5 280 M
(Initial commits for KingCobra Request Response done by adding 2 new functions parse_ip_addr) s
5 269 M
(ess\(\) and reply_to_publisher\(\) in kingcobra_servicerequest_kernelspace\(\)) s
5 247 M
(--------------------------------------------) s
5 236 M
(Commits as on 30 March 2014) s
5 225 M
(--------------------------------------------) s
5 214 M
(Both VIRGO cpupooling and mempooling drivers have been modified with use_as_kingcobra_servi) s
5 203 M
(ce boolean flag for sending incoming remote cloud node requests to VIRGO queue which is ser) s
5 192 M
(viced by workqueue handler and KingCobra service as per the above schematic diagram and rep) s
5 181 M
(lied to.) s
5 159 M
(--------------------------------------------) s
5 148 M
(Commits as on 6 April 2014) s
5 137 M
(--------------------------------------------) s
5 126 M
(Fixes for REQUEST and REPLY headers for KingCobra has been made in virgo_cloudexec_mempool ) s
5 115 M
(recvfrom\(\) if clause and in request parser in KingCobra with strsep\(\). This has been implem) s
5 104 M
(ented only in VIRGO mempool codepath and not in VIRGO clone.) s
5 82 M
(-------------------------------------------) s
5 71 M
(Commits as on 7 April 2014) s
5 60 M
(-------------------------------------------) s
5 49 M
(New function parse_timestamp\(\) has been added to retrieve the timestamp set by the VIRGO me) s
5 38 M
(mpool driver before pushing the request to VIRGO queue driver) s
5 16 M
(------------------------------------------) s
5 5 M
(Commits as on 29 April 2014) s
_R
S
%%Page: (10) 10
%%BeginPageSetup
_S
18 36 translate
/pagenum 10 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(------------------------------------------) s
5 731 M
(Intial commits for disk persistence of KingCobra request-reply queue messages have been don) s
5 720 M
(e with addition of new boolean flag kingcobra_disk_persistence. VFS calls are used to open ) s
5 709 M
(and write to the queue.) s
5 687 M
(------------------------------------------) s
5 676 M
(Commits as on 26 August 2014) s
5 665 M
(------------------------------------------) s
5 654 M
(KingCobra driver has been ported to 3.15.5 kernel and bugs related to a kernel_recvmsg\(\) cr) s
5 643 M
(ash, timestamp  parsing etc., have been fixed. The random crashes were most likely due to i) s
5 632 M
(ncorrect parameters to filp_open\(\) of disk persistence file and filesystem being mounted as) s
5 621 M
( read-only.) s
5 599 M
(---------------------------------------------------) s
5 588 M
(Version 14.9.9 release tagged on 9 September 2014) s
5 577 M
(--------------------------------------------------) s
5 566 M
(---------------------------------------------------) s
5 555 M
(Version 15.1.8 release tagged on 8 January 2015 ) s
5 544 M
(--------------------------------------------------) s
5 522 M
(-------------------------------------------) s
5 511 M
(Commits as on 17 August 2015) s
5 500 M
(-------------------------------------------) s
5 489 M
(KingCobra + VIRGO Queuing port of Linux Kernel 4.1.5 :) s
5 478 M
( - changed the REQUEST_REPLY.queue disk persisted queue path to /var/log/kingcobra/REQUEST_) s
5 467 M
(REPLY.queue) s
5 456 M
( - kernel built sources, object files) s
5 445 M
( - kern.log with logs for telnet request sent to VIRGO queue driver, queued in kernel work ) s
5 434 M
(queue and handler invocation for the) s
5 423 M
(KingCobra service request kernel function for the popped request; disk persisted /var/log/k) s
5 412 M
(ingcobra/REQUEST_REPLY.queue) s
5 390 M
(--------------------------------------------) s
5 379 M
(Commits as on 14 October 2015) s
5 368 M
(--------------------------------------------) s
5 357 M
(AsFer Cloud Perfect Forwarding binaries are invoked through call_usermodehelper\(\) in VIRGO ) s
5 346 M
(queue. KingCobra commands has been updated with a clause for cloud perfect forwarding.) s
5 324 M
(--------------------------------------------) s
5 313 M
(Commits as on 15 October 2015) s
5 302 M
(--------------------------------------------) s
5 291 M
(- Updated KingCobra module binaries and build generated sources) s
5 280 M
(- kingcobra_usermode_log.txt with "not found" error from output redirection \(kingcobra_comm) s
5 269 M
(ands.c\). This error is due to need for absolute path. But there are "alloc_fd: slot 1 not N) s
5 258 M
(ULL!" after fd_install\(\) is uncommented in virgo_queue.h call_usermodehelper\(\) code. The ke) s
5 247 M
(rn.log with these errors has been added to testlogs) s
5 236 M
(- kingcobra_commands.c has been changed to invoke absolute path executable. With uncommenti) s
5 225 M
(ng of fd_install and set_ds code in virgo_queue the return code of call_usermodehelper\(\) is) s
5 214 M
( 0 indicating successful invocation) s
5 192 M
(---------------------------------------------------------------------------) s
5 181 M
(Commits as on 10 January 2016) s
5 170 M
(---------------------------------------------------------------------------) s
5 159 M
(NeuronRain KingCobra research version 2016.1.10 released.) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(-------) s
5 115 M
(NEURONRAIN VIRGO Commits for virgo_clone\(\)/telnet -> VIRGO cpupooling -> VIRGO Queue -> Kin) s
5 104 M
(gCobra) s
5 93 M
(- as on 12 February 2016) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(-------) s
5 60 M
(VIRGO commit:) s
5 49 M
(https://github.com/shrinivaasanka/virgo-linux-github-code/commit/72d9cfc90855719542cdb62ce4) s
5 38 M
(0b798cc7431b3d) s
5 16 M
(Commit comments:) s
5 5 M
(-----------------------------------------------------------------------------------------) s
_R
S
%%Page: (11) 11
%%BeginPageSetup
_S
18 36 translate
/pagenum 11 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (11) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Commits for Telnet/System Call Interface to VIRGO CPUPooling -> VIRGO Queue -> KingCobra) s
5 731 M
(-----------------------------------------------------------------------------------------) s
5 720 M
(*\) This was commented earlier for the past few years due to a serious kernel panic in previ) s
5 709 M
(ous kernel versions - <= 3.15.5) s
5 698 M
(*\) In 4.1.5 a deadlock between VIRGO CPUPooling and VIRGO queue driver init was causing fol) s
5 687 M
(lowing error in "use_as_kingcobra_service" clause :) s
5 676 M
(  - "gave up waiting for virgo_queue init, unknown symbol push_request\(\)") s
5 665 M
(*\) To address this a new boolean flag to selectively enable and disable VIRGO Queue kernel ) s
5 654 M
(service mode "virgo_queue_reactor_service_mode" has been added.) s
5 643 M
(*\) With this flag VIRGO Queue is both a kernel service driver and a standalone exporter of ) s
5 632 M
(function symbols - push_request/pop_request) s
5 621 M
(*\) Incoming request data from telnet/virgo_clone\(\) system call into cpupooling kernel servi) s
5 610 M
(ce reactor pattern \(virgo cpupooling listener loop\) is treated as generic string and handed) s
5 599 M
( over to VIRGO queue and KingCobra which publishes it.) s
5 588 M
(*\) This resolves a long standing deadlock above between VIRGO cpupooling "use_as_kingcobra_) s
5 577 M
(service" clause and VIRGO queue init.) s
5 566 M
(*\) This makes virgo_clone\(\) systemcall/telnet both synchronous and asynchronous - requests ) s
5 555 M
(from telnet client/virgo_clone\(\) system call can be) s
5 544 M
(either synchronous RPC functions executed on a remote cloud node in kernelspace \(or\) an asy) s
5 533 M
(nchronous invocation through "use_as_kingcobra_service") s
5 522 M
( clause path to VIRGO Queue driver which enqueues the data in kernel workqueue and subseque) s
5 511 M
(ntly popped by KingCobra.) s
5 500 M
(*\) Above saves an additional code implementation for virgo_queue syscall paths - virgo_clon) s
5 489 M
(e\(\) handles, based on config selected, incoming) s
5 478 M
(data passed to it either as a remote procedure call or as a data that is pushed to VIRGO Qu) s
5 467 M
(eue/KingCobra pub-sub kernelspace) s
5 456 M
(*\) Kernel Logs and REQUEST_REPLY.queue for above commits have been added to kingcobra c-src) s
5 445 M
(/testlogs/) s
5 423 M
(-------------------------------------------------------------------------------------------) s
5 412 M
(--------------------) s
5 401 M
(Commits - KingCobra 64 bit and VIRGO Queue + KingCobra telnet requests - 17 April 2017) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(--------------------) s
5 368 M
(*\) Rebuilt KingCobra 64bit kernel module) s
5 357 M
(*\) telnet requests to VIRGO64 Queueing module listener driver are serviced by KingCobra ser) s
5 346 M
(vicerequest) s
5 335 M
(*\) Request_Reply queue persisted for this VIRGO Queue + KingCobra routing has been committe) s
5 324 M
(d to c-src/testlogs.) s
5 313 M
(*\) kern.log for this routing has been committed in VIRGO64 queueing directory) s
5 302 M
(*\) Similar to other drivers struct socket* reinterpret cast to int has been removed and has) s
5 291 M
( been made const in queuesvc kernel thread) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(-------------------) s
5 247 M
(\(FEATURE-DONE\) Commits - CVXPY implementation for Eisenberg-Gale Convex Program - 18 August) s
5 236 M
( 2017) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(-------------------) s
5 203 M
(\(*\) First commits for Convex Optimized Market Equilibrium Prices) s
5 192 M
(\(*\) Imports CVXPY Convex Program solver) s
5 181 M
(\(*\) Objective function is a logistic variant of Eisenberg-Gale Convex Program i.e uses mone) s
5 170 M
(y * log\(1+e^utility\) instead of) s
5 159 M
( money * log\(utility\) because of curvature error \(log is error flagged as concave and logis) s
5 148 M
(tic is convex per:) s
5 137 M
( http://www.cvxpy.org/en/latest/tutorial/functions/index.html#vector-matrix-functions\)) s
5 126 M
(\(*\) Formulates constraints and objective functions based on http://www.cs.cmu.edu/~sandholm) s
5 115 M
(/cs15-892F13/algorithmic-game-theory.pdf - Page 106 and Equation 5.1) s
5 104 M
(\(*\) But, For all installed solvers ECOS, ECOS_BB, SCS, LS solved convex program prints valu) s
5 93 M
(e as None despite all constraints and objective functions being convex. Also is_dcp\(\) print) s
5 82 M
(s "not a disciplined convex program". Logs in testlogs/.) s
5 71 M
(\(*\) Obviously it should have worked. Therefore this is only a partial implementation commit) s
5 60 M
(.) s
5 49 M
(\(*\) This implementation uses numpy randomly initialized arrays for Money each buyer has and) s
5 38 M
( per-good utility\(happiness\) each buyer has.) s
5 27 M
(\(*\) Replacing money with perceived merit values translates this Market Equilibrium - Intrin) s
5 16 M
(sic Value versus Market Price - to Merit) s
5 5 M
( Equilibrium - Intrinsic Merit versus Perceived Merit. This has been already described in N) s
_R
S
%%Page: (12) 12
%%BeginPageSetup
_S
18 36 translate
/pagenum 12 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(euronRain AsFer Design Documents:) s
5 731 M
(        - http://sourceforge.net/p/asfer/code/HEAD/tree/asfer-docs/AstroInferDesign.txt and) s
5 720 M
(        - https://github.com/shrinivaasanka/asfer-github-code/blob/master/asfer-docs/AstroI) s
5 709 M
(nferDesign.txt) s
5 687 M
(-------------------------------------------------------------------------------------------) s
5 676 M
(----------------------) s
5 665 M
(\(FEATURE-DONE\) Commits - Convex Optimization - DCCP - 21 August 2017) s
5 654 M
(-------------------------------------------------------------------------------------------) s
5 643 M
(----------------------) s
5 632 M
(\(*\) import dccp has been added) s
5 621 M
(\(*\) DCCP is the recent advancement and generalization of DCP for convex-concave programs) s
5 610 M
(\(*\) method='dccp' has been added as parameter to solve\(\)) s
5 599 M
(\(*\) Objective function has been changed to log\(\) from logistic\(\) - curvature is concave whi) s
5 588 M
(ch is in conflict with definition of) s
5 577 M
(eisenberg-gale convex program in textbooks. Reason for this contradiction is unknown.) s
5 566 M
(\(*\) But DCCP overcomes the DCP limitation and solve\(\) prints converged solutions for object) s
5 555 M
(ive functions) s
5 544 M
(\(*\) logs have been committed to testlogs/) s
5 533 M
(\(*\) CVXOPT solver has been installed but it does not solve the Eisenberg-Gale objective fun) s
5 522 M
(ction. Only SCS solver works - by default applies) s
5 511 M
(KKT conditions indirectly.) s
5 489 M
(-------------------------------------------------------------------------------------------) s
5 478 M
(----------------------) s
5 467 M
(\(FEATURE-DONE\) Commits - Convex Optimization - DCCP - 22 August 2017) s
5 456 M
(-------------------------------------------------------------------------------------------) s
5 445 M
(----------------------) s
5 434 M
(\(*\) Verbose set to True for printing Splitting Conic Solver progress information) s
5 423 M
(\(*\) logs committed to testlogs/) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(--------------------------------------------) s
5 379 M
(\(FEATURE-DONE\) Commits - Convex Optimization update - 29 August 2017) s
5 368 M
(-------------------------------------------------------------------------------------------) s
5 357 M
(--------------------------------------------) s
5 346 M
(\(*\) Removed hardcoded variable values in objective and constraints) s
5 335 M
(\(*\) In the context of pricing, ECOS Error Metrics print the matrices of market clearing pri) s
5 324 M
(ces for goods ) s
5 313 M
(\(Reference - pages 3072 and 3073 of https://web.stanford.edu/~boyd/papers/pdf/ecos_ecc.pdf ) s
5 302 M
(- KKT conditions in ECOS solver\)) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(---------------------------------------) s
5 258 M
(\(FEATURE-DONE\) Convex Optimization - Pricing Computation - 30 August 2017) s
5 247 M
(-------------------------------------------------------------------------------------------) s
5 236 M
(---------------------------------------) s
5 225 M
(\(*\) Prices of Goods/Services have been computed explicitly from Karush-Kuhn-Tucker Conditio) s
5 214 M
(ns \(1,2,3 and especially 4\)) s
5 203 M
(\(*\) References: ) s
5 192 M
(        - Pages 106-108 of http://www.cs.cmu.edu/~sandholm/cs15-892F13/algorithmic-game-the) s
5 181 M
(ory.pdf\)) s
5 170 M
(        - KKT conditions and Conic Optimization- https://arxiv.org/pdf/1312.3039.pdf) s
5 159 M
(\(*\) logs committed to testlogs/) s
5 137 M
(-------------------------------------------------------------------------------------------) s
5 126 M
(--------------------) s
5 115 M
(\(FEATURE-DONE\) KingCobra Kernelspace Messaging Driver for 4.13.3 64-bit kernel - 24 Septemb) s
5 104 M
(er 2017) s
5 93 M
(-------------------------------------------------------------------------------------------) s
5 82 M
(--------------------) s
5 71 M
(\(*\) KingCobra driver in GitHub and SourceForge at present are 32-bit based on mainline 4.1.) s
5 60 M
(5 kernel) s
5 49 M
(\(*\) Both USB-md and KingCobra kernel modules are subsidiaries of VIRGO kernel) s
5 38 M
(\(*\) There is a necessity for 64-bit version of KingCobra for interoperability to VIRGO64 64) s
5 27 M
(-bit kernel on mainline version 4.13.3) s
5 16 M
(\(*\) This requires separate repository for KingCobra because of significant kernel function ) s
5 5 M
(changes between 4.1.5 and 4.13.3 and) s
_R
S
%%Page: (13) 13
%%BeginPageSetup
_S
18 36 translate
/pagenum 13 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(idiosyncrasies of 64-bit) s
5 731 M
(\(*\) KingCobra driver has been rebuilt on 4.13.3 64-bit kernel after some changes to functio) s
5 720 M
(n prototypes and new kingcobra64 repository is) s
5 709 M
(initialized with these commits) s
5 698 M
(\(*\) KingCobra kernel sockets have been TLS-ed by kernel_setsockopt\(TX_TLS\) newly introduced) s
5 687 M
( in 4.13 kernel.) s
5 676 M
(\(*\) After this complete request-reply traffic from VIRGO64 system calls to VIRGO64 queueing) s
5 665 M
( and KingCobra is encrypted.) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(--------------------) s
5 621 M
(\(FEATURE-DONE\) Commits - telnet - VIRGO64Queue - KingCobra64 -  25 September 2017) s
5 610 M
(-------------------------------------------------------------------------------------------) s
5 599 M
(--------------------) s
5 588 M
(\(*\) Disk persisted KingCobra64 REQUEST-REPLY Queue written by VIRGO64 Queue to KingCobra64 ) s
5 577 M
(telnet invocation after 4.13.3 64-bit KTLS upgrade) s
5 566 M
(has been committed) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-----------------------------------------) s
5 522 M
(\(FEATURE-DONE\) VIRGO64 Queueing Kernel Module Listener - KingCobra64 - 4.13.3 - 6 October 2) s
5 511 M
(017) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-----------------------------------------) s
5 478 M
(\(*\) telnet client connection to VIRGO64 Queue and a subsequent workqueue routing \(pub/sub\) ) s
5 467 M
(to KingCobra64 has been tested on 4.13.3) s
5 456 M
(\(*\) TX_TLS socket option has not been disabled and is a no-op because it has no effect on t) s
5 445 M
(he socket.) s
5 434 M
(\(*\) REQUEST_REPLY.queue for this routing from VIRGO64 queue and persisted by KingCobra64 ha) s
5 423 M
(s been committed to KingCobra64 repositories in GitHub and SourceForge) s
5 401 M
(-------------------------------------------------------------------------------------------) s
5 390 M
(---------------------------------------------) s
5 379 M
(\(FEATURE-DONE\) KingCobra64 Neuro Electronic Currency transactional cloud move - Perfect For) s
5 368 M
(ward - 17 January 2018) s
5 357 M
(-------------------------------------------------------------------------------------------) s
5 346 M
(---------------------------------------------) s
5 335 M
(\(#\) Neuro Currency cloud perfect forward has been made transactional by wrapping it by Pyth) s
5 324 M
(on Transaction Manager \(widely used in Zope) s
5 313 M
(Python Application Server\)) s
5 302 M
(\(#\) imports transaction python package and invokes begin\(\) and commit\(\) on subprocess call ) s
5 291 M
(to neuro cloud move client and server) s
5 269 M
(-------------------------------------------------------------------------------------------) s
5 258 M
(--------------------------------------------------) s
5 247 M
(Concurrent Managed Workqueue\(CMWQ\), VIRGO64 Queueing and KingCobra64 messaging - 12 June 20) s
5 236 M
(19) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(--------------------------------------------------) s
5 203 M
(1. Existing workqueue underneath VIRGO64 queueing and requests routed by it to KingCobra64 ) s
5 192 M
(messaging are old legacy workqueues which) s
5 181 M
(have been revamped to Concurrent Managed Workqueue which supports concurrent messaging and ) s
5 170 M
(lot of other options in queue creation.) s
5 159 M
(2. create_workqueue\(\) in VIRGO64 Queueing has been changed to alloc_workqueue\(\) of Concurre) s
5 148 M
(nt Managed Workqueue.) s
5 137 M
(3. VIRGO64 Queueing request routing to KingCobra64 messaging has been tested with CMWQ and ) s
5 126 M
(queueing log and kingcobra64 Request-Reply) s
5 115 M
(Queue have been committed to respective testlogs of the drivers) s
5 104 M
(4. reading from stream has been disabled in virgo_kernel_analytics.h) s
5 93 M
(5. Reference - CMWQ documentation - https://www.kernel.org/doc/html/v4.11/core-api/workqueu) s
5 82 M
(e.html) s
5 71 M
(6. Byzantine Fault Tolerance in KingCobra64 persisted queue can be made available by perfor) s
5 60 M
(mant CMWQ and routing to the Replicas of) s
5 49 M
(REQUEST_REPLY.queue by any of the practical BFT protocols available.) s
5 38 M
(7. Most important application of CMWQ based VIRGO64-KingCobra64 is in the context of kernel) s
5 27 M
(space hardware messaging in IoT,Drones and other) s
5 16 M
(analytics driven embedded systems.) s
5 5 M
(8. An example usecase which is a mix of sync and async I/O in kernelspace:) s
_R
S
%%Page: (14) 14
%%BeginPageSetup
_S
18 36 translate
/pagenum 14 def
/fname (KingCobraDesignNotes64.txt) def
/fdir (.) def
/ftail (KingCobraDesignNotes64.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:48:20 2019) def
/pagenumstr (14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        \(*\) Analytics Variables computed by userspace machine learning are read over socket) s
5 731 M
( stream by kernel_analytics driver and) s
5 720 M
(exported kernelwide) s
5 709 M
(        \(*\) Some interested Drone driver in kernel \(example PXRC\) reads the analytics varia) s
5 698 M
(bles synchronously and sends reply messages asynchronously to VIRGO64 Queuing driver over k) s
5 687 M
(ernel sockets.  ) s
5 676 M
(        \(*\) VIRGO Queuing routes the queued messages to KingCobra64 driver) s
_R
S
%%Trailer
%%Pages: 14
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
