%!PS-Adobe-3.0
%%BoundingBox: 18 36 594 756
%%Title: Enscript Output
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Tue Feb 18 12:09:08 2020
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 90

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 576 def
/d_page_h 720 def
/d_header_x 0 def
/d_header_y 705 def
/d_header_w 576 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 576 def
/d_footer_h 0 def
/d_output_w 576 def
/d_output_h 705 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(#---------------------------------------------------------------------------------------------) s
5 681 M
(----------) s
5 670 M
(#NEURONRAIN ASFER - Software for Mining Large Datasets) s
5 659 M
(#This program is free software: you can redistribute it and/or modify) s
5 648 M
(#it under the terms of the GNU General Public License as published by) s
5 637 M
(#the Free Software Foundation, either version 3 of the License, or) s
5 626 M
(#\(at your option\) any later version.) s
5 615 M
(#This program is distributed in the hope that it will be useful,) s
5 604 M
(#but WITHOUT ANY WARRANTY; without even the implied warranty of) s
5 593 M
(#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) s
5 582 M
(#GNU General Public License for more details.) s
5 571 M
(#You should have received a copy of the GNU General Public License) s
5 560 M
(#along with this program.  If not, see <http://www.gnu.org/licenses/>.) s
5 549 M
(#---------------------------------------------------------------------------------------------) s
5 538 M
(-----------) s
5 527 M
(#K.Srinivasan) s
5 516 M
(#NeuronRain Documentation and Licensing: http://neuronrain-documentation.readthedocs.io/en/lat) s
5 505 M
(est/) s
5 494 M
(#Personal website\(research\): https://sites.google.com/site/kuja27/) s
5 483 M
(#---------------------------------------------------------------------------------------------) s
5 472 M
(-----------) s
5 450 M
(Document Licensed by:) s
5 439 M
(##############################################################################################) s
5 428 M
(################################################) s
5 417 M
(<a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/"><img alt="Creative C) s
5 406 M
(ommons Licence" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31) s
5 395 M
(.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.) s
5 384 M
(org/licenses/by-nc-nd/4.0/">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 Inter) s
5 373 M
(national License</a>.) s
5 362 M
(##############################################################################################) s
5 351 M
(################################################) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-------------) s
5 307 M
(NeuronRain - Design Objectives) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-------------) s
5 274 M
(NeuronRain OS is machine learning, cloud primitives enriched linux-kernel fork-off with applic) s
5 263 M
(ations in Internet-of-Things. AstroInfer is) s
5 252 M
(the machine learning side of it to learn analytics variables later read as config by linux ker) s
5 241 M
(nel and any device specific driver.) s
5 230 M
(NeuronRain has been partitioned into components so that effective decoupling is achieved e.g L) s
5 219 M
(inux kernel can be realtime OS for realtime less-latency applications, Message Queuing can be ) s
5 208 M
(KingCobra or any other standard MQ product. There are IOT operating systems like https://githu) s
5 197 M
(b.com/RIOT-OS/. Linux and IoT - linux on cameras,automobiles etc., - https://lwn.net/Articles/) s
5 186 M
(596754/. NeuronRain in itself is not just a product but a framework to build products. Applica) s
5 175 M
(tions can invoke VIRGO cloud memory,clone,filesystem primitives to create new products on Neur) s
5 164 M
(onRain Smart-IoT framework.) s
5 153 M
( ) s
5 131 M
(Copyright attributions for other open source products dependencies:) s
5 120 M
(------------------------------------------------------------------) s
5 109 M
(1.Maitreya's Dreams - http://www.saravali.de \(some bugs were fixed locally in degree computati) s
5 98 M
(on of textual display mode\)) s
5 87 M
(2.SVMLight -  http://svmlight.joachims.org/ ) s
5 76 M
(3.BioPython and ClustalOmega Multiple Sequence Alignment BioInformatics Tools \(www.biopython.o) s
5 65 M
(rg, www.ebi.ac.uk/Tools/msa/clustalo/ \)) s
5 43 M
(----------------------------) s
5 32 M
(Open Source Design and Academic Research Notes have been uploaded to http://sourceforge.net/pr) s
5 21 M
(ojects/acadpdrafts/files/MiscellaneousOpenSourceDesignAndAcademicResearchNotes_2013-08-11.pdf/) s
5 10 M
(download) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(Presently a complete string sequence mining subsystem and classification algorithms with index) s
5 670 M
(ing have been implemented for mining patterns in rules and encoded strings and executing those) s
5 659 M
( rules \(in special case,an encoded horoscope\). ) s
5 648 M
(**********************************************************************************************) s
5 637 M
(***********) s
5 626 M
(                        AstroInfer Classifiers - Documentation on the dataset files used) s
5 615 M
(**********************************************************************************************) s
5 604 M
(***********) s
5 582 M
(decisiontree-attrvalues.txt - Attributes based on which decision is done and the values they c) s
5 571 M
(an take \(comma separated list\)) s
5 560 M
(decisiontree-test.txt - Test dataset with set of values for attributes in each line) s
5 549 M
(decisiontree-training.txt - Training dataset with set of values for attributes and class it be) s
5 538 M
(longs in each line) s
5 527 M
(test-set.txt - List of article id\(s\) to be classified - NaiveBayes) s
5 516 M
(topics.txt - List of classes the article id\(s\) in training set belong to - NaiveBayes) s
5 505 M
(training-set.txt - List of articles id\(s\) already classified - training dataset for NaiveBayes) s
5 494 M
(word-frequency.txt - Words and their frequencies of occurrence in all articles - NaiveBayes) s
5 483 M
(words.txt - words, the article id\(s\) having those words and number of occurrences of those wor) s
5 472 M
(ds within specific article id \(~ separated\)) s
5 450 M
(Above XXX.txt files need to be populated after doing some preprocessing of the articles to be ) s
5 439 M
(classified. Preprocessing might include finding the word frequencies in the articles, finding ) s
5 428 M
(classes of the articles, finding attributes and possible values of those attributes. At presen) s
5 417 M
(t the asfer.enchoros file contains encoded horoscopes for single class of events. Thus classif) s
5 406 M
(ication is redundant. But if it has encoded horo strings for all events then to filter out str) s
5 395 M
(ings of a particular class of events, classification is needed. ) s
5 373 M
(Python script for autogenerating above txt files has been added under python-src/autogen_class) s
5 362 M
(ifier_dataset.This script needs to be changed forgenerating training and test set files.) s
5 340 M
(**********************************************************************************************) s
5 329 M
(************************************************) s
5 318 M
(DESIGN NOTES, THEORETICAL INTERLUDES\(might have errors\), TODO AND NICE TO HAVE FEATURES \(list ) s
5 307 M
(is quite dynamic and might be rewritten depending on feasibility - long-term design goals with) s
5 296 M
( no deadline\)) s
5 285 M
(**********************************************************************************************) s
5 274 M
(*************************************************) s
5 252 M
(\(FEATURE - DONE-MDL,Entropy,Edit Distance,Compressed Sensing\) 1. Test with Massive Data Sets o) s
5 241 M
(f encoded strings for pattern mining. Algorithms for Approximate Kolmogorov Complexity or Mini) s
5 230 M
(mum Description Length \(MDL\), Shannon Entropy, Levenshtein Edit Distance have been implemented) s
5 219 M
( in Python and C++. Compressed Sensing \(used in Image and Signal Processing\) which "sense" fro) s
5 208 M
(m "compressed" large data - This involves computing a matrix product AX=B where X is an image ) s
5 197 M
(or bitmap and A is a chosen matrix which together give a sketch B. Sketch of an image bitmap h) s
5 186 M
(as been implemented.) s
5 164 M
(\(FEATURE - THEORY-POC Implementation-DONE\) 2. An experimental text compression algorithm that ) s
5 153 M
(deletes vowels and stores only consonants as far as meaning is not altered. For example "follo) s
5 142 M
(w" could be stored as "fllw". Since on an average every third letter in an english word is a v) s
5 131 M
(owel, approximate compression is 33%. Message is reconstructed using most probable meaningful ) s
5 120 M
(word for "fllw" \(For example "follow" could be more probable than "fellow" or vice versa\). Thi) s
5 109 M
(s is similar to Texting in phones and to some extent encoding in Match Rating \(http://en.wikip) s
5 98 M
(edia.org/wiki/Match_rating_approach\). One more example could be "Decision" which can be compre) s
5 87 M
(ssed as "Dcsn". An interesting phonetic aspect of this is that "Decision" is spelt as "Dee-C-s) s
5 76 M
(han", or each vowel following a consonant is subsumed or coalesced into the preceding consonan) s
5 65 M
(t while spelling. Thus "Dcsn" gives 50% compression ratio. PyEnchant python package SpellCheck) s
5 54 M
(er has suggest\(\) function that returns a tuple of closely related words to a compressed \(or "m) s
5 43 M
(isspelt"\) word. Conventional WSD algorithms might have to be used on this tuple to get the max) s
5 32 M
(imum match. Initial testing reveals that the accuracy with spellcheckers is less and this prob) s
5 21 M
(lem requires a non-trivial algorithm which might require error-correcting codes like Reed-Solo) s
5 10 M
(mon and Berelekamp-Massey assuming the english text as a finite field of alphabets as elements) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(. Predominantly used dictionary-based Lesk's disambiguation Algorithm can find the intersectio) s
5 681 M
(n between "follow" and the rest of the context and "fellow" and rest of the context and choose) s
5 670 M
( the word with maximum intersection with context - this is quite commonsensical too. But the d) s
5 659 M
(rawback of this disambiguation is that keywords are disambiguated well while other connectives) s
5 648 M
( \(is, are, thus,  this, who, why etc.,\) in the sentences are not. Another limitation of applyi) s
5 637 M
(ng WSD while decompressing is lack of meaningful context words at runtime - only compressed wo) s
5 626 M
(rds are available and they cannot be used as disambiguating context creating a circular depend) s
5 615 M
(ency - disambiguation requires decompression and decompression needs disambiguation. For compu) s
5 604 M
(ting maximum likelihood, most probable vowel between 2 consonants can be zeroed in on by a 26*) s
5 593 M
(26 table of consonant ordered pairs and having vowels between them as probability distribution) s
5 582 M
( priors. This is feasible only if priors are available. For example th-t has \(h,t\) as consonan) s
5 571 M
(t pairs and a is most probable vowel than e,i,o and u and th-t is disambiguated as "that". The) s
5 560 M
( vowels missing in compressed text can be represented by a single extra bit. This is an altern) s
5 549 M
(ative to PyEnchant spellcheck suggest\(\) function. This can be Hidden Markov Model also - with ) s
5 538 M
(missing vowels as hidden states to measure and compressed letters as observations. This requir) s
5 527 M
(es forward-backward probabilities computation or Viterbi path which gives most likely word for) s
5 516 M
( a compressed word. For "th-t" the Markov Model looks like:) s
5 505 M
(                        x1--------x2--------x3------x4) s
5 494 M
(                        |         |         |       |) s
5 483 M
(                        t         h         -       t   ) s
5 472 M
(and Bayesian for the above is:) s
5 461 M
(        Pr\(x3/[t,h,-,t]\) is directly proportional to Pr\(x3/[t,h]\) * Pr\([t]/x3\) ) s
5 450 M
(and to be precise it is:) s
5 439 M
(        Pr\(x3/[t,h,-,t] = Pr\(x3/[t,h]\) * Pr\([t]/x3\) / Pr\(t\)/Pr\(t,h\) with denominator being a p) s
5 428 M
(re-computable constant from substring hashtable as below.) s
5 406 M
(Viterbi path would give the most likely path or most likely word for above. ) s
5 384 M
(\(2.1\) Pr\(x3/[t,h]\) is computed from dictionary - number of words having the sequence / total n) s
5 373 M
(umber of words) s
5 362 M
(which is the argmax\( Pr\(a/t,h\), Pr\(e/t,h\), Pr\(i/t,h\), Pr\(o/t,h\), Pr\(u/t,h\)\) and priors are com) s
5 351 M
(puted for the substrings tha, the, thi, tho, thu.) s
5 329 M
(\(2.2\) Pr\(t/x3\) is computed from dictionary similar to the previous for argmax of probabilities) s
5 318 M
( for substrings at, et, it, ot, ut.) s
5 296 M
(\(2.3\) If total number words in dictionary is E \(could be 200000 to 300000\) and yi is the numbe) s
5 285 M
(r of words of length i, then y1 + y2 + .... + yn = E .) s
5 263 M
(\(2.4\) Number of substrings of an n bit word is \(n-1\)n/2.) s
5 241 M
(\(2.5\) Thus number of substrings for all words in dictionary is y2 + 3*y3 + 6*y4 + 10*y5 + ... ) s
5 230 M
(+ \(n-1\)n*yn/2. Thus number of substrings \(could be significantly more than 500000\) is independ) s
5 219 M
(ent of the text to be decompressed and the substring prior probabilties can be precomputed and) s
5 208 M
( stored in a hash table \(size of the table is = number of substrings * 5 for each vowel\). This) s
5 197 M
( table has to be huge but does not depend on text to be decompressed. ) s
5 175 M
(\(2.6\) Above is theoretical basis only implementation of which needs precomputing the above has) s
5 164 M
(htable. ) s
5 142 M
(\(2.7\) Above experimental compression scheme that ignores vowels gives a string complexity meas) s
5 131 M
(ure \(a minimum description length\) similar to Kolmogorov complexity.) s
5 109 M
(\(2.8\) Algebraically, above can be imagined as a Group Action where group G is set of consonant) s
5 98 M
(s \(with the assumption that inverses exist for each consonant with a special "backspace" eleme) s
5 87 M
(nt added to alphabet set and identity is "space" element\) and set X to act on is the set of vo) s
5 76 M
(wels. Orbit is the set of X elements moved \(g.x\) and if concatenation \(with phonetic coalition) s
5 65 M
(\) is a group operator then consonants act on vowel sets. For example, the consonant "t" acts o) s
5 54 M
(n "o" from vowel set to give the word "to". The concatenation is non-abelian.  Interestingly t) s
5 43 M
(he above phonetic coalition of vowels to an adjoining consonant is the Stabilizer set or set o) s
5 32 M
(f Fixed points\(g.x=g\). For example, the consonant "d" acting on the vowel "e" gives a phonetic) s
5 21 M
(ally coalesced compression "d" \("d" ,"de" and "dee" are phonetically same as "d"\) as a fixedpo) s
5 10 M
(int. Thus Orbit-Stabilizer Theorem \( set of cosets of Fixed points - Quotient group G/G\(x\) -  ) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(isomorphic to Orbit\) should apply to the above.  There may be scenarios where a maximum likely) s
5 681 M
( vowel from above argmax\(\) computation does not equal the actual vowel expected and for arbitr) s
5 670 M
(ary non-dictionary strings prior computation is difficult. Thus this algorithm is quite experi) s
5 659 M
(mental.) s
5 637 M
(\(2.9\) Linguistic words can be construed as a polynomial graph plotted on an x-y axis: x-axis r) s
5 626 M
(epresents position of a letter in a text and y-axis represents an alphabet \(vowels and consona) s
5 615 M
(nts\). From the previous string complexity measure missing vowels are missing points on the pol) s
5 604 M
(ynomial. Disambiguating the word is then equivalent to Polynomial Reconstruction Problem/List ) s
5 593 M
(Decoding/Error correcting codes \(Reference: Point 345\) that reconstructs a list of polynomials) s
5 582 M
( \(i.e set of disambiguated words\) from a codeword\(i.e compressed vowelless string\) one of whic) s
5 571 M
(h disambiguates and decompresses the vowelless codeword - polynomial reconstructed should incl) s
5 560 M
(ude \(almost all\) missing vowels. Text can be represented as a polynomial function defined as f) s
5 549 M
(:N->Alphabets where N is set of natural numbers. Factoring over this polynomial ring enables t) s
5 538 M
(ext to be represented as products of texts. An implementation of polynomial encoding of texts ) s
5 527 M
(has been done in 364. Berlekamp-Welch algorithm creates a system of equations which themselves) s
5 516 M
( are evaluations of two polynomials over finite fields for all xi \(P\(xi\) = Q\(xi\)/E\(xi\)\) where ) s
5 505 M
(each xi is from input set of ordered pair of points \(xi,yi\). This system of equations is solve) s
5 494 M
(d by Gaussian Elimination to compute Q\(x\)/E\(x\) = P\(x\). Berlekamp-Welch encodes a text in a dif) s
5 483 M
(ferent way than plain polynomial curve fitting - each letter ordinal in text is a coefficient ) s
5 472 M
(of a polynomial of degree equal to size of text whereas polynomial encoding of text fits a cur) s
5 461 M
(ve passing through the ordinal values of letters in successive positions. This polynomial with) s
5 450 M
( ordinal coefficients over a finite field is then evaluated in n points and transmitted. Recip) s
5 439 M
(ient reconstructs the original polynomial from transmission errors in received points by Gauss) s
5 428 M
(ian Elimination. If transmission error is simulated as removing vowels in original message pol) s
5 417 M
(ynomials, reconstruction by solving system of equations should almost correctly identify missi) s
5 406 M
(ng vowels.) s
5 384 M
(\(2.10\) From point 345 and 346, high level language texts like English,French etc., can be thou) s
5 373 M
(ght of as 255-coloring of letter positions where 255 is the size of alphanumeric alphabet \(ASC) s
5 362 M
(II,Unicode\). Each letter in a text "colors" corresponding letter position in text with an alph) s
5 351 M
(abet. From Van Der Waerden and other coloring theorems, there are monochromatic arithmetic pro) s
5 340 M
(gressions in letter positions in high level language texts i.e alphabets in APj positions are ) s
5 329 M
(all same for some APj. This implies there is an order in high level context sensitive natural ) s
5 318 M
(language grammars and answers in affirmative the conjecture posited in 346.) s
5 296 M
(\(2.11\) Monochromatic arithmetic progressions in letter positions of natural language texts imp) s
5 285 M
(lies that finite state automata can be learnt to accept such arithmetic progressions in text. ) s
5 274 M
(For example , text "abaabaabaab..." over alphabets {a,b} has alphabet b in AP positions where ) s
5 263 M
(AP is 2+3n. Regular language Finite State Automata for this 2-colored infinite string is:) s
5 252 M
(                        a---b---a---a--->b) s
5 241 M
(                                |<-------|) s
5 219 M
(\(2.12\) In terms of vowelless string complexity measure previously, if a 255-colored string is ) s
5 208 M
(simplified to 2-colored string as "Consonant-Vowel-Consonant-Consonant-Vowel-Consonant-Consona) s
5 197 M
(nt-Vowel..." replacing consonant and vowels with "Consonant" and "Vowel" notations, english la) s
5 186 M
(nguage \(and most others\) on an average has an arithmetic progression k+3n of vowel positions f) s
5 175 M
(or some constant k.) s
5 153 M
(\(2.13\) Previous vowelless string compression can be linguistically explained in terms of seque) s
5 142 M
(nce of syllables. Related syllable based name clustering of proper nouns occurring in BigData ) s
5 131 M
(sets has been described in 708 - Strings of Names in english suffer from lack of compound alph) s
5 120 M
(abets which most other classical languages are bestowed with. Every syllable in an English nam) s
5 109 M
(e string \(when it is spelt out verbally\) could contain more than one alphabet which is concate) s
5 98 M
(nation of vowels and consonants while in most other natural languages every syllable is mostly) s
5 87 M
( associated with just one compound alphabet\(vowel + consonant\). This makes clustering similar ) s
5 76 M
(names easier in other languages by comparing syllables \(blocks of substrings\) instead of alpha) s
5 65 M
(bets. In previous example word "decision" has blocks of substrings or syllables - "de-ci-sion") s
5 54 M
(. Thus distance between two strings could be defined as distance between audio of the words \(b) s
5 43 M
(y recording the syllables of the two words by human speech and comparing the two audios by spe) s
5 32 M
(ech merit measures like MFCC\). Text Compression then amounts to succinctly storing the sequenc) s
5 21 M
(es of syllables - an example succinct storage is to transcribe the string from English to anot) s
5 10 M
(her language having compound alphabets and storing the concise syllables in another language. ) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Example string "de-ci-sion" is compressed syllable-wise as "d-c-sn" forfeiting vowels in Engli) s
5 681 M
(sh while a transcription could benefit from compound alphabets. From 2.8, algebraically each s) s
5 670 M
(yllable is an Orbit and could be a Stabilizer set too \(g.x=g\) - e.g d.e=d, c.i=c in previous e) s
5 659 M
(xample string "decision".) s
5 637 M
(3. \(FEATURE - THEORY - Pairwise LCS implementation DONE\) KMeans, KNN and other clustering and ) s
5 626 M
(classification algorithms implemented thus far, group similar encoded strings for astronomical) s
5 615 M
( \(or any other\) data. Clustered strings can further be mined for patterns with ordering by app) s
5 604 M
(lying a Longest Common Substring algorithm within each cluster. This gives a fine grained patt) s
5 593 M
(ern hidden in the encoded input strings. These longest common substrings can then be translate) s
5 582 M
(d to a rule similar to class association rule \(Frequent item set and GSP algorithms are quite ) s
5 571 M
(expensive and do not fit well for mining patterns in strings\).) s
5 549 M
(4. \(FEATURE - DONE\) Implementation of String Distance measure using different distance measure) s
5 538 M
(s \(python-src/StringMatch.py\) for comparing Encoded Strings in addition to pairwise and Multip) s
5 527 M
(le Sequence Alignment.) s
5 505 M
(5. \(FEATURE - DONE\) Construct a Hidden Markov Model with State transitions and Observations\(ev) s
5 494 M
(ents\). If the number of states are exponential then this will be infeasible. A HMM has been im) s
5 483 M
(plemented for text decompression with vowel-removed strings. Also a HMM has been implemented f) s
5 472 M
(or Part-of-Speech tagging, Named Entity Recognition and Conditional Random Fields.) s
5 450 M
(6. \(FEATURE - DONE - continuation of point 3\) Correlate with Rules from Classics \(BPHS, BJ etc) s
5 439 M
(.,\) with the mined datasets for particular class of events \(Special Case of Mundane Predictive) s
5 428 M
( Model is described in items 47 to 51 and basic framework is already implemented\). The Longest) s
5 417 M
( Common Substring implementation already mines for most common pattern with in a clustered or ) s
5 406 M
(classified dataset of encoded strings which suffices for astronomical datasets. Script for par) s
5 395 M
(sing the clustered data from classifiers and decoding the longest common pattern have been add) s
5 384 M
(ed.) s
5 362 M
(7. \(FEATURE - DONE\) Integrate Classifiers in above String Pattern mining \(classify strings and) s
5 351 M
( then mine\).) s
5 329 M
(8. \(FEATURE - DONE\) At present fundamental algorithms like - Perceptrons with Gradient Descent) s
5 318 M
(, Linear and Logistic Regression, Hidden Markov Model for Text Decompression, KMeans Clusterin) s
5 307 M
(g, Naive Bayesian, Decision Tree, SVM \(uses thirdparty OSS\) and kNN Classifiers, String Alignm) s
5 296 M
(ent and Distance based algorithms, Knuth-Morris-Pratt String Match Algorithm, Sequence Mining,) s
5 285 M
( Deep Learning\(Convolution and Backpropagation\), Social Network Analysis, Sentiment Analysis -) s
5 274 M
( have been implemented specialized for the encoded strings astronomical datasets.) s
5 252 M
(9. \(FEATURE - DONE\) InterviewAlgorithm code in https://sourceforge.net/p/asfer/code/146/tree/p) s
5 241 M
(ython-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit.py and Classification based) s
5 230 M
( on indegrees of wordnet subgraph node in action item 6 above \(as mentioned in http://arxiv.or) s
5 219 M
(g/abs/1006.4458 , https://sites.google.com/site/kuja27/TAC2010papersubmission.pdf?attredirects) s
5 208 M
(=0 and http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf\). ) s
5 197 M
(Related Publication Drafts are: https://sites.google.com/site/kuja27/LowerBoundsForMajorityVot) s
5 186 M
(ingPseudorandomChoice.pdf?attredirects=0, https://sites.google.com/site/kuja27/CircuitForCompu) s
5 175 M
(tingErrorProbabilityOfMajorityVoting.pdf?attredirects=0, https://sites.google.com/site/kuja27/) s
5 164 M
(IndepthAnalysisOfVariantOfMajorityVotingwithZFAOC.pdf?attredirects=0. Test C++ code written in) s
5 153 M
( 2006 for computing Majority voting error probability is at: http://sourceforge.net/p/asfer/co) s
5 142 M
(de/HEAD/tree/cpp-src/miscellaneous/pgood.cpp and python script written in 2010 is at: http://s) s
5 131 M
(ourceforge.net/p/asfer/code/HEAD/tree/python-src/pgood.py. ) s
5 109 M
([Disclaimer and Caveat: Due to radical conclusions that are derivable from the P\(good\) binomia) s
5 98 M
(l coefficients summation infinite series when applied to majority voting with SAT setting in p) s
5 87 M
(erfect zero-error case, all the related points elsewhere in this document on majority voting +) s
5 76 M
( SAT versus psuedorandom choice \(e.g 100% noise stability and circuit lowerbounds for it\) are ) s
5 65 M
(work-in-progress , unreviewed \(excluding those done during 2009-2011\) , not-quite rigorous dra) s
5 54 M
(fts only with possible theoretical errors, which might have commissions-omissions and more add) s
5 43 M
(itions to make as mentioned earlier and this analyzes a very special case of voting scenario. ) s
5 32 M
(It is not an attempt to prove or disprove P=NP,but rather an analysis of very generic unnatura) s
5 21 M
(l proof framework based on boolean social choice complexity for proving lowerbounds which migh) s
5 10 M
(t include the question of P=NP. Infact it shrouds entire complexity classes underneath it. It ) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(is non-conventional and questionable as to whether LHS pseudorandomness or dictator boolean fu) s
5 681 M
(nction can be equated to RHS Majority Voting. This just analyzes the special case when there i) s
5 670 M
(s zero-error or same-error on both sides and the outcomes of processeses related to pseudorand) s
5 659 M
(om/dictator choice and Majority Voting with Voter SAT oracles are "equally good" where "Goodne) s
5 648 M
(ss" is defined as for all scenarios which could be infinite, a PRG/Dictator choice or Majority) s
5 637 M
( Voted Choice "make zero-error decisions". It is not a statistical mean on both sides in which) s
5 626 M
( all probabilities are averaged. More specifically, \(in\)tractability of perfect voting is pivo) s
5 615 M
(tal to this - assuming perfection which does away with BP* complexity classes this poses itsel) s
5 604 M
(f as a strong non-trivial counterexample. In theoretical interludes in this document probabili) s
5 593 M
(ty of perfection is defined as a function of NoiseSensitivity or NoiseStability which is based) s
5 582 M
( on commonsense notion that if an entity \(human or software\) has "correct thinking in decision) s
5 571 M
( making" outcome "decision" is "correct". For example if noisy inputs do not perturb a voter's) s
5 560 M
( boolean function, voter is 100% stable. This is equivalent to real life scenarios where confl) s
5 549 M
(icting inputs from people make a person to decide incorrectly. A perfect voter is never swayed) s
5 538 M
(. Even without equating the 2 sides\(e.g whether there exists a P algorithm for RHS PH or EXP c) s
5 527 M
(ircuit\) above are non-trivial problems. Lot of assumptions have been made in arriving at concl) s
5 516 M
(usions in this document, most important being equal stability implies circuit lowerbounds whic) s
5 505 M
(h is based on a matrix of scenarios where error and noise intersect and 100% noise stability r) s
5 494 M
(egime in percolation crossing events. In general setting, distribution is Poisson binomial wit) s
5 483 M
(h unequal voter error and Error is not just limited to noise sensitivity but also includes fla) s
5 472 M
(wed decision tree evaluation which adds one more scenario to matrix. It is more apt to say the) s
5 461 M
(re are no conclusions arrived at from equating LHS and RHS of Pr\(Good\) circuits. Rather it rai) s
5 450 M
(ses lot of more open questions and contradictions. A major requirement for proving a separatio) s
5 439 M
(n or containment is that RHS majority voting circuit has to be a complete problem for class C ) s
5 428 M
(whether exact or probabilistic\(BP*\), implying whole L\(RHS\) is in L\(LHS\) because LHS is an algo) s
5 417 M
(rithm for a complete problem. For many probabilistic BP* and PH classes no complete problems a) s
5 406 M
(re known. Conclusions can be drawn subject to knowledge of complete problems for RHS majority ) s
5 395 M
(voting circuit.) s
5 373 M
(There are zero error voting systems:) s
5 362 M
(E.g Paxos protocol without byzantine failures - http://research.microsoft.com/en-us/um/people/) s
5 351 M
(lamport/pubs/paxos-simple.pdf) s
5 340 M
(]) s
5 329 M
(---------------------------------------------------------------------------) s
5 318 M
(Psuedorandom Choice and Majority Voting \(Majority circuit with SAT inputs\)) s
5 307 M
(---------------------------------------------------------------------------) s
5 296 M
(10. \(THEORY\) https://sites.google.com/site/kuja27/ImplicationRandomGraphConvexHullsAndPerfectV) s
5 285 M
(oterProblem_2014-01-11.pdf?attredirects=0&d=1 on decidability of existence of perfect voter an) s
5 274 M
(d the probability series for a good choice of https://sites.google.com/site/kuja27/CircuitForC) s
5 263 M
(omputingErrorProbabilityOfMajorityVoting_2014.pdf?attredirects=0&d=1 are related to already we) s
5 252 M
(ll studied problems in social choice theory but problem definition is completely different. Ar) s
5 241 M
(row's theorem of social choice for an irrational outcome in condorcet election of more than 2 ) s
5 230 M
(candidates and its complexity theory fourier analysis proof [GilKalai] are described in www.cs) s
5 219 M
(.cmu.edu/~odonnell/papers/analysis-survey.pdf. Irrational outcome is a paradox where the socie) s
5 208 M
(ty is "confused" or "ranks circularly" in choice of a candidate in multipartisan condorcet vot) s
5 197 M
(ing. Rational outcome converges to 91.2% \(Guilbaud number\) with a possibility of 8.8% irration) s
5 186 M
(al outcome. ) s
5 164 M
(Additional References:) s
5 153 M
(---------------------) s
5 142 M
(10.1. Social Choice Theory, Arrow's Theorem and Boolean functions - http://www.ma.huji.ac.il/~) s
5 131 M
(kalai/CHAOS.pdf) s
5 120 M
(10.2. http://www.project-syndicate.org/commentary/kenneth-arrow-impossibility-theorem-social-w) s
5 109 M
(elfare-by-amartya-sen-2014-11) s
5 98 M
(10.3. Real life illustration of Arrow's Theorem - http://www.nytimes.com/2016/05/09/upshot/unu) s
5 87 M
(sual-flavor-of-gop-primary-illustrates-a-famous-paradox.html - Condorcet Circular choice parad) s
5 76 M
(ox, Change in Voter decision when a new Candidate is added and Conflict between individual dec) s
5 65 M
(ision and group decision - Incompleteness of democratic process.) s
5 54 M
(10.4. How hard is it to control elections [BartholdiToveyTrick] - http://www.sciencedirect.com) s
5 43 M
(/science/article/pii/089571779290085Y - manipulating outcomes of variety of voting schemes is ) s
5 32 M
(NP-hard.) s
5 21 M
(10.5. How hard is it to control elections with tiebreaker [MatteiNarodytskaWalsh] - https://ar) s
5 10 M
(xiv.org/pdf/1304.6174.pdf ) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(11.\(THEORY\) What is perplexing is the fact that this seems to contravene guarantee of unique r) s
5 670 M
(estricted partitions described based on money changing problem and lattices in https://sites.g) s
5 659 M
(oogle.com/site/kuja27/SchurTheoremMCPAndDistinctPartitions_2014-04-17.pdf?attredirects=0 and h) s
5 648 M
(ttps://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.pdf?attredirects=0&d) s
5 637 M
(=1 which are also for elections in multipartisan setting \(if condorcet election is done\). Prob) s
5 626 M
(ably a "rational outcome" is different from "good choice" where rationality implies without an) s
5 615 M
(y paradoxes in ranking alone without giving too much weightage to the "goodness" of a choice b) s
5 604 M
(y the elector. Actual real-life elections are not condorcet elections where NAE tuples are gen) s
5 593 M
(erated. It is not a conflict between Arrow's theorem as finding atleast 1 denumerant in multip) s
5 582 M
(artisan voting partition is NP-complete \(as it looks\) - which can be proved by ILP as in point) s
5 571 M
( 20 of https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.pdf?attredir) s
5 560 M
(ects=0&d=1 - the assumption is that candidates are not ranked; they are voted independently in) s
5 549 M
( a secret ballot by electors and they can be more than 3. The elector just chooses a candidate) s
5 538 M
( and votes without giving any ordered ranking for the candidates which makes it non-condorcet.) s
5 527 M
( ) s
5 505 M
(12.\(THEORY\) Moreover Arrow's theorem for 3 candidate condorcet election implies a non-zero pro) s
5 494 M
(bability of error in voting which by itself prohibits a perfect voting system. If generalized ) s
5 483 M
(to any election and any number of candidates it could be an evidence in favour of P != NP by p) s
5 472 M
(roving that perfect voter does not exist and using democracy Maj+SAT circuits and P\(Good\) prob) s
5 461 M
(ability series convergence \(As described in handwritten notes and drafts http://sourceforge.ne) s
5 450 M
(t/projects/acadpdrafts/files/ImplicationGraphsPGoodEquationAndPNotEqualToNPQuestion_excerpts.p) s
5 439 M
(df/download, https://sites.google.com/site/kuja27/ImplicationRandomGraphConvexHullsAndPerfectV) s
5 428 M
(oterProblem_2014-01-11.pdf?attredirects=0&d=1, https://sites.google.com/site/kuja27/LowerBound) s
5 417 M
(sForMajorityVotingPseudorandomChoice.pdf?attredirects=0, https://sites.google.com/site/kuja27/) s
5 406 M
(CircuitForComputingErrorProbabilityOfMajorityVoting_2014.pdf?attredirects=0&d=1 and https://si) s
5 395 M
(tes.google.com/site/kuja27/PhilosophicalAnalysisOfDemocracyCircuitAndPRGChoice_2014-03-26.pdf?) s
5 384 M
(attredirects=0\). ) s
5 362 M
(13.\(THEORY\) But it is not known that if Arrow's theorem can be generalized for infinite number) s
5 351 M
( of candidates as above and whether such an electoral system is decidable. The possibility of ) s
5 340 M
(a circular ranking in 3-condorcet election implies that there are some scenarios where voter c) s
5 329 M
(an err though not exactly an error in making a "good choice" \(or Perfect Voter Problem is deci) s
5 318 M
(dable in case of 3 candidates condorcet election\).) s
5 296 M
(14.\(THEORY\) Each Voter has a k-SAT circuit which is input to Majority circuit. k-SAT can be re) s
5 285 M
(duced to 3-SAT \(not 2-SAT\) and thus is NP-complete. Error by a Voter SAT circuit implies that ) s
5 274 M
(voter votes 0 instead of 1 and 1 instead of 0. This is nothing but the sensitivity of the vote) s
5 263 M
(r boolean function i.e number of erroneous variable assignments by the voter that change the p) s
5 252 M
(er-voter decision input to the Majority circuit. Thus more the sensitivity or number of bits t) s
5 241 M
(o be flipped to change the voter decision, less the probability of error by the voter. If sens) s
5 230 M
(itivity is denoted by s, 1/q is probability that a single bit is flipped and probability of er) s
5 219 M
(ror by the voter is p then p = 1/q^s which is derived by the conditional probability that Pr[m) s
5 208 M
( bits are flipped] = Pr[m-th bit is flipped/\(m-1\) bits already flipped]*Pr[\(m-1\) bits are flip) s
5 197 M
(ped] = 1/q*1/q^\(m-1\) = 1/q^m \(and m=s\) . This expression for p  can be substituted in the Prob) s
5 186 M
(ability series defined in https://sites.google.com/site/kuja27/CircuitForComputingErrorProbabi) s
5 175 M
(lityOfMajorityVoting_2014.pdf?attredirects=0&d=1. Probability of single bit flip is 1/q if the) s
5 164 M
( number of variables across all clauses is q and each variable is flipped independent of the o) s
5 153 M
(ther. Error by voter can also be simulated with probabilisitc truth tables\(or\) probabilistic C) s
5 142 M
(NFs.) s
5 120 M
(For example, a term in the binomial summation becomes:) s
5 109 M
(mC\(n+1\) * \(1/q^s\)^\(n+1\) * \(1-1/q^s\)^\(m-n-1\) where m is total number of voter SATs and \(1/q\) is) s
5 98 M
( probability of single variable flip in Voter SAT and s is sensitivity of Voter SAT boolean fu) s
5 87 M
(nction - s can change for each voter SAT in which case it has to be s1,s2,s3,s4,s5,... and the) s
5 76 M
( summation requires hypergeometric algorithms.) s
5 54 M
(The Voter SAT circuit has an interesting application of Hastad's Switching Lemma - random prob) s
5 43 M
(abilistic setting of variables known as "restrictions" decreases the decision tree depth signi) s
5 32 M
(ficantly , or, number of variables that determine the Voter SAT outcome reduces significantly ) s
5 21 M
(- in other words, random "restricted convincing" of a voter SAT CNF has huge impact on number ) s
5 10 M
(of variables yet to be "convinced".) s
_R
S
%%Page: (8) 8
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(As done in the Switching Lemma proof, parity circuit can be an AND of ORs \(or OR of ANDs\) whic) s
5 670 M
(h is randomly restricted to switch the connectives in lowest 2 levels to arrive at super-polyn) s
5 659 M
(omial lowerbound for parity and hence for each voter SAT. Thus the Parity CNF can be the speci) s
5 648 M
(al case of Voter SAT also \(i.e voter wants odd number of variables to be satisfied - odd voter) s
5 637 M
( indeed\). This kind of extends switching lemma to an infinite majority with parity oracle case) s
5 626 M
(.) s
5 604 M
(Fourier expansion of the unbounded fan-in Majority+SAT circuit is obtained from indicator poly) s
5 593 M
(nomial \(http://www.contrib.andrew.cmu.edu/~ryanod/?p=207\) by substituting fourier polynomial f) s
5 582 M
(or each voter SAT in the majority circuit fourier polynomial. Conjecturally, this expansion mi) s
5 571 M
(ght give an infinite summation of multilinear monomials - has some similarities to permanent c) s
5 560 M
(omputation if represented as an infinite matrix i.e Permanent converges to 1 for this infinite) s
5 549 M
( matrix for perfect voting \(?\) and Permanent is #P complete. This is obvious corollary of Toda) s
5 538 M
('s theorem in a special case when RHS of P\(Good\) is a PH=DC circuit because Toda's theorem imp) s
5 527 M
(lies that any PH problem is contained in P^#P\(P with access to #P number_of_sats oracle\). Perm) s
5 516 M
(anent computes bipartite matchings - non-overlapping edges between two disjoint vertex sets - ) s
5 505 M
(probably pointing to the bipartisan majority voting. This makes sense if the entire electorate) s
5 494 M
( is viewed as a complete social network graph and voting is performed on this network electora) s
5 483 M
(te. Majority voting divides the social network into two disjoint sets \(for and against\) with e) s
5 472 M
(dges among them - division is by maximum matching - "for" voter vertex matched with "against" ) s
5 461 M
(voter vertex. When this matching is perfect, election is tied. Imperfect matchings result in a) s
5 450 M
( clear winner vertex set - which has atleast one unmatched vertex is the winner.) s
5 428 M
(Demarcation of linear and exponential sized ciruits: P\(good\) RHS has Circuit SAT for each vote) s
5 417 M
(r with unbounded fanin.) s
5 406 M
(1\) If the variables for each voter SAT are same, then the circuit size is exponential in numbe) s
5 395 M
(r of variables - DC-uniform) s
5 384 M
(2\) else if the variables are different for each SAT, then the circuit is linear in number of v) s
5 373 M
(ariables - polynomial size) s
5 351 M
(1\) is more likely than 2\) if lot of variables among voters are common.) s
5 329 M
(There are three possibilities) s
5 318 M
(Circuit lies between 1\) and 2\) - some variables are common across voters - kind of super-polyn) s
5 307 M
(omial and sub-exponential ) s
5 296 M
(Circuit is 1\) - all variables are common across voters - the worst case exponential \(or even a) s
5 285 M
(ckermann function?\)) s
5 274 M
(Circuit is 2\) - there are no common variables) s
5 252 M
(As an alternative formulation, LHS of the P\(Good\) series can be a dictator boolean function \(p) s
5 241 M
(roperty testing algorithms like BLR, NAE tuples - http://www.contrib.andrew.cmu.edu/~ryanod/?p) s
5 230 M
(=1153\) that always depends on only one variable and not on a Pseudorandom generator. Thus how ) s
5 219 M
(error-free is the assignment to LHS dictator boolean function determines P\(Good\) LHS\(sensitivi) s
5 208 M
(ty and probabilistic truth tables are the measures applicable as described previously\). Thus b) s
5 197 M
(oth LHS and RHS can be boolean functions with corresponding circuits constructible for them.) s
5 175 M
(Influence of a variable i in a boolean function is Probability[f\(x\) != f\(x with i-th bit flipp) s
5 164 M
(ed\)]. For Majority function influence is ~ 1/sqrt\(n\) from Berry-Esseen Central Limit Theorem -) s
5 153 M
( sum of probability distributions of values assigned to boolean random variables converge to G) s
5 142 M
(aussian. Thus in infinite majority a voter is insignificant.  Error in majority voting can be ) s
5 131 M
(better defined with Stability and Noise Sensitivity measures of a Boolean Function \(Influence,) s
5 120 M
( Stability, Noise, Majority is Stablest theorem etc., - www.cs.cmu.edu/~odonnell/papers/analys) s
5 109 M
(is-survey.pdf\) where correlated pairs of boolean variable tuples form an inner product to get ) s
5 98 M
(the expression : Noise\(f\) = 1/2 - 1/2*Stability\(f\) where Noise is the measure of corruption in) s
5 87 M
( votes polled while Stability is the resilience of votes polled to corruption so that outcome ) s
5 76 M
(is not altered. [But for infinite majority inner product could become infinite and the measure) s
5 65 M
(s may lose relevance]. Also related is the Kahn-Kalai-Linial Theorem for corrupted voting - ht) s
5 54 M
(tp://www.contrib.andrew.cmu.edu/~ryanod/?p=1484 - that derives a lower bound for the maximum i) s
5 43 M
(nfluence \(log\(n\)/n\). Applications of Noise Sensitivity in real-world elections is described in) s
5 32 M
( - https://gilkalai.wordpress.com/2009/03/06/noise-sensitivity-lecture-and-tales/ , http://www) s
5 21 M
(.cs.cmu.edu/~odonnell/slides/mist.pps and percolation in http://research.microsoft.com/en-us/u) s
5 10 M
(m/people/schramm/memorial/spectrumTalk.pdf?tduid=\(332400bcf8f14700b3a2167cd09a7aa9\)\(256380\)\(24) s
_R
S
%%Page: (9) 9
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(59594\)\(TnL5HPStwNw-SliT5K_PKao3NElOXgvFug\)\(\) ) s
5 659 M
(As done for sensitivity previously, a term in the P\(Good\) binomial summation becomes:) s
5 648 M
(mC\(n+1\) * product_of_n+1_\(NoiseSensitivityOfVoterSAT\(i\)\) * product_of_m-n-1_\(1-NoiseSensitivit) s
5 637 M
(yOfVoterSAT\(i\)\) where m is total number of voter SATs and the summation requires hypergeometri) s
5 626 M
(c algorithms. Infact it makes sense to have Stability as a zero-error measure i.e the binomial) s
5 615 M
( summation term can be written as mC\(n+1\) * product_of_n+1_\(NoiseSensitivityOfVoterSAT\(i\)\) * p) s
5 604 M
(roduct_of_m-n-1_\(1/2+1/2*StabilityOfVoterSAT\(i\)\) since 1-NoiseSensitivity = 1/2 + 1/2*Stabilit) s
5 593 M
(y. Difference between sensitivity and NoiseSensitivity here is that NoiseSensitivity and Stabi) s
5 582 M
(lity are probabilities and not number of bits and are directly substitutable in P\(Good\) series) s
5 571 M
(. ) s
5 549 M
(Summation of binomial coefficients in RHS is the collective stability or noise in the infinite) s
5 538 M
( majority circuit. It converges to 0.5 if NoiseStability is uniform 0.5 for all Voter SATs and) s
5 527 M
( in best case converges to 1. This summation connects analysis, non-uniform infinite majority ) s
5 516 M
(voting and complexity theory - Hypergeometric functions, Noise and Stability of Voter Boolean ) s
5 505 M
(functions, Majority Circuit.) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(------) s
5 461 M
(P\(Good\) summation is Complementary Cumulative Binomial Distribution Function \(or\) Survival Fun) s
5 450 M
(ction) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(------) s
5 417 M
(Goodness Probability of an elected choice is derived in https://sites.google.com/site/kuja27/C) s
5 406 M
(ircuitForComputingErrorProbabilityOfMajorityVoting_2014.pdf . For an above average good choice) s
5 395 M
( \(i.e a choice which is more than 50% good\) atleast majority populace must have made a good de) s
5 384 M
(cision \(this is axiomatically assumed without proof where all voters have equal weightages\). I) s
5 373 M
(n probability notation this is Pr\(X > n/2\) where X is the binomial random variable denoting th) s
5 362 M
(e number of electorate who have made a good choice which has to be atleast halfway mark. For e) s
5 351 M
(ach Pr\(X=k\) the binomial distribution mass function is nCk\(p\)^k\(1-p\)^k [Reference: https://en.) s
5 340 M
(wikipedia.org/wiki/Binomial_distribution]. Cumulative distributive function is defined as Pr\(X) s
5 329 M
( <= k\) = summation_0_k\(nCk\(p\)^k\(1-p\)^\(n-k\)\) and its complement is Pr\(X > k\) = 1 - Pr\(X <= k\) m) s
5 318 M
(entioned as Complementary Cumulative Distributive Function [Reference: https://en.wikipedia.or) s
5 307 M
(g/wiki/Cumulative_distribution_function] which is also known as Survival Function[Reference: h) s
5 296 M
(ttps://en.wikipedia.org/wiki/Survival_function].) s
5 274 M
(A plausible proof for the assumption that for an above average good choice atleast half of the) s
5 263 M
( popluation must have made a good decision:) s
5 252 M
(If there are n inputs to the Majority circuits, the voter inputs with good decision can be ter) s
5 241 M
(med as "Noiseless" and voter inputs with bad decisions can be termed as "Noisy" in Noise Sensi) s
5 230 M
(tivity parlance. For infinite majority it is known that\(from http://analysisofbooleanfunctions) s
5 219 M
(.org/\):) s
5 208 M
(        lim  NS\(delta, Majority\(n\)\)  = 1/pi * arccos\(1-2*delta\) \(due to Central Limit Theorem ) s
5 197 M
(and Sheppard's Formula\)) s
5 186 M
(        n->infinity) s
5 175 M
(        n odd) s
5 153 M
(where delta is probability of noise and hence bad decision. If delta is assumed to be 0.5 for ) s
5 142 M
(each voter \(each voter is likely to err with probability 0.5\) then above limit becomes:) s
5 131 M
(        1/pi * arccos\(1-1\) = 1/pi * pi/2 = 1/2 which is the Noise \(Goodness or Badness\) of the) s
5 120 M
( majority circuit as a whole.) s
5 109 M
(From this expected number of bad decision voters can be deduced as E\(x\) = x*p\(x\) = 0.5 * n = n) s
5 98 M
(/2 \(halfway mark\)) s
5 76 M
(Above is infact a simpler proof for P\(Good\) without any binomial summation series for delta=0.) s
5 65 M
(5. In other words the number of bad decisions are reverse engineered. But P\(Good\) binomial sum) s
5 54 M
(mation \(complementary cumulative distributive function\) is very much required in the hardest p) s
5 43 M
(roblem where each voter has a judging function to produce an input to Majority function and ea) s
5 32 M
(ch such judging function is of varied complexities and noise stabilities.) s
5 10 M
(For delta=0.5, NoiseSensitivity of infinite majority=0.5 and both are equal. For other values ) s
_R
S
%%Page: (10) 10
%%BeginPageSetup
_S
18 36 translate
/pagenum 10 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(of delta this is not the case. For example interesting anomalies below surface:) s
5 670 M
(delta=0.3333...:) s
5 659 M
(----------------) s
5 648 M
(NS = 1/pi * arccos\(1 - 2*0.333...\) = 0.3918) s
5 626 M
(delta=0.25:) s
5 615 M
(----------) s
5 604 M
(NS = 1/pi * arccos\(1-2*0.25\) = 0.333...) s
5 582 M
(--------------------------) s
5 571 M
(Chernoff upper tail bound) s
5 560 M
(--------------------------) s
5 549 M
(Upper bound for P\(Good\) binomial distribution can be derived from Chernoff bound \(assuming Cen) s
5 538 M
(tral Limit Theorem applies to sum of Binomial random variables\)- http://www.cs.berkeley.edu/~j) s
5 527 M
(fc/cs174/lecs/lec10/lec10.pdf - For P\(Good\) series the upper tail bound is needed i.e. Pr\(Numb) s
5 516 M
(er of voters making good decision > n/2\) which is derivable to 0.5 and 1 exactly wherein the u) s
5 505 M
(pper bound is not necessary. But for other cases , upper tail Chernoff bound is:) s
5 494 M
(        P[X > \(1+delta\)*mean] < {e^delta/\(1+delta\)^\(1+delta\)}^mean) s
5 483 M
(        Total population is n, mean=n*p and \(1+delta\)*mean = n/2) s
5 472 M
(        Thus delta = \(1 - 2*p\)/2*p) s
5 461 M
(        P[X > n/2] < {e^[\(1-2p\)/p]/\(1/2p\)^\(1/2p\)} = {e^\(1-2p\)n * \(2p\)^\(1/2p\)}) s
5 439 M
(When p=0.5 , P[ X > n/2] < 1 which is an upperbound for 0.5.) s
5 428 M
(But intriguingly for p=1 the upper tail bound is:) s
5 417 M
(                \(e^\(-1\)*sqrt\(2\)\)^n      ) s
5 406 M
(which is increasingly less than 1 for high values of n whereas P\(good\) converges to 1 in exact) s
5 395 M
( case \(why are these different?\). This contradiction arises since in exact derivation of P[X >) s
5 384 M
( n]:) s
5 373 M
(    mC\(n+1\)\(p\)^\(n+1\)\(1-p\)^\(m-n-1\) + mC\(n+2\)\(p\)^\(n+2\)\(1-p\)^\(m-n-2\) + ... + mCm \(p\)^m \(1-p\)^\(m-m) s
5 362 M
(\) ) s
5 351 M
(all the terms vanish by zero multiplication except mCm \(p\)^m \(1-p\)^m which becomes:) s
5 340 M
(        mCm*1*0^0 ) s
5 329 M
(and by convention, 0^0 = 1, thereby converging to 1 while the Chernoff upper tail bound decrea) s
5 318 M
(ses with n.) s
5 296 M
(--------------------------) s
5 285 M
(Hoeffding upper tail bound) s
5 274 M
(--------------------------) s
5 263 M
(For Bernoulli trials involving binomial distribution summation, Hoeffding Inequality can be ap) s
5 252 M
(plied for upper tail bound - https://en.wikipedia.org/wiki/Hoeffding%27s_inequality - defined ) s
5 241 M
(by:) s
5 230 M
(        P\(X > \(p+epsilon\)n\) <= exp\(-2*epsilon^2 * n\)) s
5 208 M
(If p+epsilon = 0.5 for halfway mark, epsilon = 1/2 -p.) s
5 197 M
(P\(X > n/2\) <= exp\(-2\(0.5-p\)^2*n\)) s
5 186 M
(For p=1, P\(X > n/2\) <= exp\(-n/2\) which for infinite n converges to 1.) s
5 164 M
(Thus tailbounds above are only less tight estimates and exact summation is better for p=0.5 an) s
5 153 M
(d 1. ) s
5 131 M
(--------------------------------------------------------------------------------) s
5 120 M
(There are two independent aspects to the P\(Good\) series - Goodness and Hardness:) s
5 109 M
(--------------------------------------------------------------------------------) s
5 98 M
(\(1\) Goodness of Voting:) s
5 87 M
(The convergence of the binomial coefficient summation series in RHS is the "goodness" side of ) s
5 76 M
(the voting expressed in terms of Noise sensitivity and Stability of each Voter's Boolean Funct) s
5 65 M
(ion - whether the voters have exercised their franchise prudently to elect a "good" choice. If) s
5 54 M
( the Voter Boolean Functions are all balanced then by Kahn-Kalai-Linial lowerbound there are n) s
5 43 M
(/log\(n\) influential variables that control the decision of each Voter.) s
5 32 M
(\(2\) Hardness of Voting:) s
5 21 M
(The circuit for RHS\(e.g Boolean Function Composition\) and its Fourier polynomial expansion.) s
_R
S
%%Page: (11) 11
%%BeginPageSetup
_S
18 36 translate
/pagenum 11 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (11) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Mix of Hardness and Goodness result in variety of BP* classes or P* classes \(if error is unbou) s
5 681 M
(nded\). Goodness is related to Noise Sensitivity and Stability. Probabilistic Hardness is due t) s
5 670 M
(o pseudorandomness. Are Goodness and Pseudorandomness related? Yes, because Noise Sensitivity ) s
5 659 M
(occurs when there is a correlation between two strings with flips. Correlation inturn occurs w) s
5 648 M
(hen flips are pseudorandom. Connection between Stability, Fourier coefficients and pseudorando) s
5 637 M
(m flip probability are expressed in \(16\) and \(20\) below \(Plancherel's theorem\).) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(-------------------) s
5 593 M
(\(*IMPORTANT*\) Noise Stability, Noise Sensitivity and Complexity Class BPP \(error in voting\)) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(-------------------) s
5 560 M
(In all points in this document, an assumption is made that Noise Stability and BPP are equival) s
5 549 M
(ent notions. Is this valid? A language L is in BPP if for x in L there exists a Turing Machine) s
5 538 M
( that accepts x and outputs 1 with bounded probability \(e.g 2/3\) and if x not in L, rejects x ) s
5 527 M
(and outputs 0 with bounded probability \(e.g 1/3\). Following table illustrates all possible sce) s
5 516 M
(narios and where BPP and Noise Stability fill-in \(x/e is correlated, flipped version of x\):) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(---) s
5 483 M
(        x                               |    f\(x\) = f\(x/e\)      |       f\(x\) != f\(x/e\) Noise  ) s
5 472 M
(  |) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(---) s
5 439 M
(x in L, x/e in L                        |       No error        |       Error                 ) s
5 428 M
(  |) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(---) s
5 395 M
(x in L, x/e not in L                    |       Error           |   No error if f\(x\)=1,f\(x/e\)=) s
5 384 M
(0 |) s
5 373 M
(                                        |                       |   else Error                ) s
5 362 M
(|) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(---) s
5 329 M
(x not in L, x/e in L                    |       Error           |   No error if f\(x\)=0,f\(x/e\)=) s
5 318 M
(1 |) s
5 307 M
(                                        |                       |   else Error                ) s
5 296 M
(|) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(---) s
5 263 M
(x not in L, x/e not in L                |       No error        |      Error                  ) s
5 252 M
(|) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(---) s
5 208 M
(Third column of the table relates Noise Sensitivity and BPP - it subdivides the Noise Sensitiv) s
5 197 M
(ity into 4 probable scenarios. Hence Noise Sensitivity overlaps BPP - explains one half of the) s
5 186 M
( error. Even after a circuit is denoisified i.e third column is removed, it can still be in BP) s
5 175 M
(P due to the second column possibilities above. Noise sensitivity handles only half the possib) s
5 164 M
(ilities in the above table for output noise. The second and third rows in second column repres) s
5 153 M
(ent noise in input where the circuit doesn't distinguish inputs correctly \(false positives and) s
5 142 M
( false negatives\). This requires derandomization. Thus error-free decision making depends on b) s
5 131 M
(oth denoisification and derandomization. A Turing machine that computes all 8 possibilities in) s
5 120 M
( the table above without error is 100% perfect decision maker. In terms of probability:) s
5 109 M
(        Probability of Good Decision = Input noise stability \(second column\) + Output noise st) s
5 98 M
(ability \(third column\)) s
5 87 M
(which can also be stated as:) s
5 76 M
(        Probability of Good Decision = 1-\(Probability of False positives + Probability of Fals) s
5 65 M
(e negatives\)) s
5 43 M
(Above is a better ,rather ideal, error probability measure that can be substituted in P\(Good\) ) s
5 32 M
(RHS binomial distribution summation because it accounts for all possible scenarios of errors. ) s
5 21 M
(Presently, P\(Good\) binomial summation depends only on output noise sensitivity. Complexity lit) s
5 10 M
(erature doesn't yet appear to have the theoretical notion of input noise counterpart of output) s
_R
S
%%Page: (12) 12
%%BeginPageSetup
_S
18 36 translate
/pagenum 12 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( noise sensitivity for boolean functions\(e.g what is the fourier theoretic estimation of false) s
5 681 M
( positivity similar to the Plancherel version of noise stability?\). Second column input noise ) s
5 670 M
(can be written as TotalError-[f\(x\) != f\(x/e\)] where TotalError<=1. Probability of Good Decisio) s
5 659 M
(n is sum of conditional probabilities of these 8 possibilities in the table:) s
5 648 M
(        Probability of Good Decision = Pr\(f\(x\)=f\(x/e\) / x in L, x/e in L\)*Pr\(x in L, x/e in L\)) s
5 637 M
( +) s
5 626 M
(                                       Pr\(f\(x\)!=f\(x/e\) / x in L, x/e in L\)*Pr\(x in L, x/e in L) s
5 615 M
(\) +) s
5 604 M
(                                        ...) s
5 593 M
(                                       Pr\(f\(x\)!=f\(x/e\) / x not in L, x/e not in L\)*Pr\(x not in) s
5 582 M
( L, x/e not in L\)) s
5 571 M
(Computation of the above conditional probability summation further confounds the estimation of) s
5 560 M
( voter decision error in Judge Boolean Functions.) s
5 538 M
(In other words, a precise estimate of voter or voting error from table above which related BP*) s
5 527 M
( complexity class and Boolean Noise Sensitivity:) s
5 516 M
(        Probability of Bad Decision =  NoiseSensitivity - {Pr\(f\(x\)=1, f\(x/e\)=0\)/x in L, x/e no) s
5 505 M
(t in L}) s
5 494 M
(                                                        - {Pr\(f\(x\)=0, f\(x/e\)=1\)/x not in L, x/) s
5 483 M
(e in L}) s
5 472 M
(                                                        + {Pr\(f\(x\)=f\(x/e\)\)/x in L, x/e not in ) s
5 461 M
(L}) s
5 450 M
(                                                        + {Pr\(f\(x\)=f\(x/e\)\)/x not in L, x/e in ) s
5 439 M
(L}) s
5 428 M
(which may be more or less than NoiseSensitivity depending on cancellation of other conditional) s
5 417 M
( probability terms. This is the error term that) s
5 406 M
(has to be substituted for each voter decision making error. Because of this delta, NoiseSensit) s
5 395 M
(ivity \(and NoiseStability\) mentioned everywhere in this document in P\(Good\) binomial summation) s
5 384 M
( and majority voting circuit is indeed NoiseSensitivity \(and NoiseStability\) \(+ or -\) delta. P) s
5 373 M
(revious probability coalesces Noise and Error into one expressible quantity - i.e denoisificat) s
5 362 M
(ion + derandomization.) s
5 340 M
(When Probability of Bad Decision is 0 across the board for all voters, the Pr\(Good\) series con) s
5 329 M
(verges to 100% and previous identity can be equated to zero and NoiseSensity is derived as:) s
5 318 M
(        NoiseSensitivity = {Pr\(f\(x\)=1, f\(x/e\)=0\)/x in L, x/e not in L}) s
5 307 M
(                           {Pr\(f\(x\)=0, f\(x/e\)=1\)/x not in L, x/e in L}) s
5 296 M
(                           - {Pr\(f\(x\)=f\(x/e\)\)/x in L, x/e not in L}) s
5 285 M
(                           - {Pr\(f\(x\)=f\(x/e\)\)/x not in L, x/e in L}) s
5 263 M
(Above matrix of 8 scenarios and identity above give somewhat a counterintuitive and startling ) s
5 252 M
(possibility that NoiseSensitivity of a voter's decision boolean function can be non-zero despi) s
5 241 M
(te the convergence of Pr\(Good\) Majority Voting binomial series when some error terms do not ca) s
5 230 M
(ncel out in previous expression. This implies that there are fringe, rarest of rare cases wher) s
5 219 M
(e voting can be perfect despite flawed decision boolean functions.) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(---) s
5 164 M
(Hastad Switching Lemma, P\(Good\) Majority Voting circuit and Election Approximation or Forecast) s
5 153 M
(ing) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(---) s
5 120 M
(Hastad Switching Lemma for circuit of width w and size s with probability of random restrictio) s
5 109 M
(n p for each variable states the inequality:) s
5 98 M
(   Pr[DecisionTree\(f/restricted\) > k ] <= \(constant*p*w\)^k ) s
5 87 M
(where p is a function of width w and p is proportional to 1/w. In forecasting, a sample of vot) s
5 76 M
(ers and their boolean functions are necessary. If the Majority circuit is PH=DC\(variables are ) s
5 65 M
(common across voters\) or AC\(variables are not so common across voters\), the sampling algorithm) s
5 54 M
( pseudorandomly chooses a subset from first layer of the circuit's fanin and applies random re) s
5 43 M
(striction to those Voters' Boolean Circuits which abides by above inequality. The rationale is) s
5 32 M
( that probability of obtaining required decision tree depth decreases exponentially \(RHS manti) s
5 21 M
(ssa < 1\). Thus the forecast is a 3-phase process:) s
5 10 M
(\(1\) Pseudorandomly choose subset of Voter Boolean Functions in the first layer of the circuit ) s
_R
S
%%Page: (13) 13
%%BeginPageSetup
_S
18 36 translate
/pagenum 13 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- This is also a random restriction) s
5 681 M
(\(2\) Randomly Restrict variables in each boolean circuit to get decision trees of required dept) s
5 670 M
(h if voters reveal their blackbox boolean functions) s
5 659 M
(\(3\) Simulated Voting \(and a property testing\) on the restricted boolean functions subset accur) s
5 648 M
(acy of which is a conditional probability function of \(1\) and \(2\). This could be repetitive ra) s
5 637 M
(ndom restrictions of \(2\) also.) s
5 615 M
(\(1\) and \(2\) are random restrictions happening in 2 different layers of the circuit - amongst v) s
5 604 M
(oters and amongst variables for each voter .) s
5 582 M
(Alternatively if subset of voters reveal their votes \(1 or 0\) in opinion polls then the above ) s
5 571 M
(becomes a Learning Theory problem \(e.g. PAC learning, Learning Juntas or oligarchy of variable) s
5 560 M
(s that dominate\) - how to learn the boolean function of the voters who reveal their votes in a) s
5 549 M
( secret ballot and extrapolate them to all voters. This is opposite of \(1\),\(2\),\(3\) and the mos) s
5 538 M
(t likely scenario as voters hold back their decision making algorithms usually.  From Linial-M) s
5 527 M
(ansour-Nisan theorem , class of boolean functions of n variables with depth-d can be learnt in) s
5 516 M
( O\(n^O\(logn^d\)\) with 1/poly\(n\) error. From Hastad Switching Lemma, Parseval spectrum theorem \() s
5 505 M
(sum of squares of fourier coefficients\) and LMN theorem , for a random restriction r, the four) s
5 494 M
(ier spectrum is e-concentrated upto degree 3k/r where k is the decision tree depth of the rest) s
5 483 M
(riction. For a function g that approximates the above majority+SAT voting circuit f, the dista) s
5 472 M
(nce function measures the accuracy of approximation. ) s
5 450 M
(An interesting parallel to election approximation is to sample fourier spectrum of boolean fun) s
5 439 M
(ctions of a complexity class C for each voter.\(This seems to be an open problem - http://csthe) s
5 428 M
(ory.stackexchange.com/questions/17431/the-complexity-of-sampling-approximately-the-fourier-tra) s
5 417 M
(nsform-of-a-boolean-fu\) . Essentially this implies complexity of approximating a voter's boole) s
5 406 M
(an function in complexity class C by sampling the fourier coefficients of its spectrum and hen) s
5 395 M
(ce election forecasting is C-Fourier-Sampling-Hard.) s
5 373 M
(Points \(53.1\) and \(53.2\) define a Judge Boolean Function with TQBF example that is PSPACE-comp) s
5 362 M
(lete. Each voter in RHS of P\(Good\) has such a TQBF that is input to Majority circuit. TQBF is ) s
5 351 M
(also AP-hard where AP is the set of all languages recognized by an alternating turing machine ) s
5 340 M
(\(ATM\) with alternating forall and thereexists states, and it is known that PSPACE=AP \(http://p) s
5 329 M
(eople.seas.harvard.edu/~salil/cs221/spring10/lec6.pdf\).) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(-------) s
5 285 M
(\(*IMPORTANT*\) Boolean Function Composition \(BFC\) and Majority+SAT voting circuit) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(-------) s
5 252 M
(Boolean Function Composition is described in detail at [AvishayTal] Section 2.3 - http://eccc.) s
5 241 M
(hpi-web.de/report/2012/163/ - which is defined as f*g = f\(g\(x\)\) and the sensitivity and comple) s
5 230 M
(xity measures of BFC are upperbounded by products of corresponding measures. Majority Voting c) s
5 219 M
(ircuit for P\(Good\) Binomial summation can be formulated as composition of two functions - Majo) s
5 208 M
(rity and SAT i.e Voters' SAT outputs are input to Majority \(or\) Majority*SAT = Majority\(SAT1, ) s
5 197 M
(SAT2,...,SATn\). Hence sensitivity of this composition is upperbounded by sensitivity\(MAJn\)*max) s
5 186 M
(\(sensitivity\(SATi\)\)  which becomes the "sensitivity of complete electorate" . This has a direc) s
5 175 M
(t bearing on the error probability of voter decision in P\(Good\) binomial summation - the psued) s
5 164 M
(orandom choice error probability or dictator boolean function sensitivity in LHS and electorat) s
5 153 M
(e sensitivity obtained from previous composition in RHS should be equal in which scenario LHS ) s
5 142 M
(achieves what RHS does \(or\) there is a PH or EXP collapse to P. Circumeventing this collapse i) s
5 131 M
(mplies that these two sensitivity measures cannot be equal and either Dictator/PRG choice or M) s
5 120 M
(ajority Voting is better over the other  - a crucial deduction. Dictator boolean function has ) s
5 109 M
(a sensitivity measure n \(all variables need to be flipped in worst case as function depends on) s
5 98 M
( only one variable\) while the Majority*SAT composition is a maximum of products of 2 sensitivi) s
5 87 M
(ties. Counterintuitively, RHS electorate sensitivity can be larger than LHS as there is no SAT) s
5 76 M
( composition in Dictator boolean function. But the convergence of P\(Good\) binomial coefficient) s
5 65 M
( series to 1 when p=1 does not rule out the possibility of these two sensitivity measures bein) s
5 54 M
(g equal and when it happens the Stability is 1 and NoiseSensitivity is 0 on both sides \(assump) s
5 43 M
(tion: NoiseSensitivity for LHS and most importantly RHS are computable and have same product c) s
5 32 M
(losure properties under composition like other sensitivity measures\).) s
_R
S
%%Page: (14) 14
%%BeginPageSetup
_S
18 36 translate
/pagenum 14 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
([) s
5 681 M
(Quoting Corollary 6.2 in http://eccc.hpi-web.de/report/2012/163/ for inclusions of complexity ) s
5 670 M
(measures:) s
5 659 M
(                "... C\(f\) \342\\211\244 D\(F\) \342\\211\244 bs\(f\) \302\267 deg\(f\) \342\\211\244 deg\(f\)^3 ..." ) s
5 648 M
(]) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(-) s
5 604 M
(Noise Sensitivity and Probability of Goodness in P\(Good\) LHS and RHS - Elaboration on previous) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-) s
5 571 M
(LHS of P\(Good\):) s
5 560 M
(--------------) s
5 549 M
(\(1\) Depends either on a natural \(psuedo\)random process or a Dictator Boolean Function that uni) s
5 538 M
(laterally decides outcome.) s
5 516 M
(\(2\) When error is zero, probability of good decision is 1 \(or\) Pr\(f\(x\) != f\(y\)\) is zero where ) s
5 505 M
(x and y are correlated bit strings obtained by) s
5 494 M
(a bit flip. In other words Noise in input does not alter outcome. If NS is Noise Sensitivity, ) s
5 483 M
(probability of good outcome is 1-NS which is 1/2 + 1/2*Stability. ) s
5 461 M
(RHS of P\(Good\):) s
5 450 M
(---------------) s
5 439 M
(\(1\) Depends on the Noise Sensitivity of Boolean Function Composition - Maj\(n\)*SAT - Majn\(SAT1,) s
5 428 M
( SAT2,....,SATn\).) s
5 406 M
(\(2\) When error is zero, probability of good decision is 1 because nCn*\(1\)^n*\(1-1\)^\(0\) becomes ) s
5 395 M
(1 in summation and all other terms vanish. If each individual voter has different probability ) s
5 384 M
(of good decision \(which is most likely in real world elections\) then it becomes Poisson Probab) s
5 373 M
(ility Distribution trial. Throughout this document, only Binomial Distribution is assumed and ) s
5 362 M
(therefore NoiseStability of voters are assumed to be equal though the individual voter boolean) s
5 351 M
( functions might differ. In a generic setting each voter can have arbitrary decision function ) s
5 340 M
(which need not be restricted to boolean functions. Throughout this document, only boolean vote) s
5 329 M
(r judging functions are assumed.) s
5 307 M
(\(3\) NoiseSensitivity is a fitting measure for voter error or voting error as it estimates the ) s
5 296 M
(probability of how a randomly changed input distorts outcome of an election. Randomly changed ) s
5 285 M
(input could be wrong assignment by voter, wrong recording by the voting process etc.,) s
5 263 M
(\(4\) Perfect Voter has a SAT or Boolean Function that is completely resilient to correlation i.) s
5 252 M
(e Pr\(f\(x\) != f\(y\)\) = 0. The open question is: is it possible to find or learn such a Voter Boo) s
5 241 M
(lean Function. ) s
5 219 M
(\(5\) Brute Force exponential algorithm to find perfect voter is by property testing:) s
5 208 M
(   - For 2^n bit strings find correlation pairs with random flips - 2^n * \(2^n - 1\) such pairs) s
5 197 M
( are possible.) s
5 186 M
(   - Test Pr\(f\(x\) != f\(y\)\)) s
5 175 M
(   - This is not a learning algorithm.) s
5 153 M
(\(6\) For perfect voter, probability p of good decision is 1-NS or 1/2+1/2*Stability and has to ) s
5 142 M
(be 1 which makes NS=0 and Stability=1.) s
5 120 M
(\(7\) Open Question: Is there a learning algorithm that outputs a Perfect Voter Decision Boolean) s
5 109 M
( Function f such that NS=Pr\(f\(x\) != f\(y\)\) = 0 for all correlated pairs x,y? \(Or\) Can LHS and R) s
5 98 M
(HS of P\(Good\) be learnt with NS=0 and Stability=1.Such a function is not influenced by any vot) s
5 87 M
(ing or voter errors. Majority is Stablest theorem implies that Majority function is the most s) s
5 76 M
(table of all boolean functions with least noise, but still it does not make it zero noise for ) s
5 65 M
(perfect stability.) s
5 43 M
(Is there some other function stabler than stablest - answer has to be no - But there is an ope) s
5 32 M
(n "Majority is the Least Stable" conjecture which asserts "yes" by [Benjamini-Kalai-Schramm]:) s
5 21 M
(For Linear Threshold Functions \(majority, weighted majority et al\) f, Stability\(f\) >= Stabilit) s
5 10 M
(y\(Majn\). ) s
_R
S
%%Page: (15) 15
%%BeginPageSetup
_S
18 36 translate
/pagenum 15 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (15) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Majority is Stablest theorem is for small-influence LTFs \(maximum influence of f < epsilon\). I) s
5 681 M
(f existence of perfect voter boolean function is proved it would be a generalization of this c) s
5 670 M
(onjecture. ) s
5 648 M
(An obvious corollary is that for stablest voting boolean function, majority is apt choice \(or\)) s
5 637 M
( in the Majority voting circuit each voter has a majority as voter boolean function i.e it is ) s
5 626 M
(a boolean function composition of Majority*Majority = Maj\(Maj1,Maj2,Maj3,...,Majn\). This compo) s
5 615 M
(sition of Maj*Maj is the stablest with least noise. This is also depth-2 recursive majority fu) s
5 604 M
(nction mentioned in [RyanODonnell] - definition 2.6 in http://analysisofbooleanfunctions.org/ ) s
5 593 M
( and Majority Voting with constituencies in https://sites.google.com/site/kuja27/IndepthAnalys) s
5 582 M
(isOfVariantOfMajorityVotingwithZFAOC_2014.pdf. Also the 2-phase document merit algorithm in ht) s
5 571 M
(tp://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf is a varian) s
5 560 M
(t of this. A voter with Majority as boolean function trivially decides i.e if more than half o) s
5 549 M
(f his/her variables are satisfied, outputs 1 without any fancy decision making or judging bool) s
5 538 M
(ean function circuit \(e.g an EXP-complete adversarial simulation\). By far this is the stablest) s
5 527 M
( possible voting scheme unless [Benjamini-Kalai-Schramm] conjecture is true or there exists a ) s
5 516 M
(100% noise stable percolation boolean function - derived in \(17\) and \(18\) below.) s
5 494 M
(\(8\) Theorem 2.45 in http://analysisofbooleanfunctions.org/ is important which proves Stability) s
5 483 M
( and NoiseSensitivity for infinite majority:) s
5 472 M
(    lt \(n->infinity, n odd\) Stability[Majn] = 2/pi*arcsin\(rho\) ) s
5 461 M
(    \(or\)) s
5 450 M
(    lt \(n->infinity, n odd\) NS[delta,Majn] = 2/pi*delta + O\(delta^1.5\) where delta is the prob) s
5 439 M
(ability of correlation - flipping x to y. ) s
5 417 M
(\(9\) There are two random variables f\(x\)=f\(y\) and f\(x\) != f\(y\) with respective probabilities.) s
5 395 M
(\(10\) This implies for infinite electorate, error probability is \(an error that causes x to bec) s
5 384 M
(ome y with probability delta\): ) s
5 373 M
(    lt \(n->infinity, n odd\) NS[delta,Majn] = 2/pi*delta + O\(delta^1.5\) where delta is the prob) s
5 362 M
(ability of correlation - flipping x to y. ) s
5 340 M
(\(11\) probability of good outcome = p = 1-NS:) s
5 329 M
(    p = 1 - lt \(n->infinity, n odd\) NS[delta,Majn] = 1 - 2/pi*delta - O\(delta^1.5\). ) s
5 307 M
(\(12\) If delta = 1:) s
5 296 M
(    lt \(n->infinity, n odd\) NS[delta,Majn] = 2/pi + O\(1\). ) s
5 285 M
(    \(and\)) s
5 274 M
(    probability of good outcome = 1-NS = 1/2+1/2*Stability = 1-2/pi-O\(1\).) s
5 252 M
(\(13\) In P\(Good\) RHS:) s
5 241 M
(--------------------) s
5 230 M
(If the error probability of voter is 0 and probability of good decision is 1 then binomial sum) s
5 219 M
(mation becomes nCn*\(p\)^n*\(1-p\)^n = 1 and all other terms are zero. From \(11\) p can be 1 only i) s
5 208 M
(f delta is 0 or no correlation flips exist. This proves the obvious because commonsensically v) s
5 197 M
(otes are perfect iff there is no wrongdoing.) s
5 175 M
(\(14\) In P\(Good\) LHS:) s
5 164 M
(-------------------) s
5 153 M
(If error probability of dictator boolean function is 0 and p=1 then:) s
5 142 M
( p = 1 - NS\(DictatorFunction\)) s
5 131 M
(   = 1 - delta^n) s
5 120 M
(Similar to RHS p=1 iff delta=0 ) s
5 109 M
(Thus if there is no Noise on either side LHS=RHS \(or\) LHS is a P algorithm to RHS EXP or PH=DC) s
5 98 M
(. This depends on existence of perfect voter function defined in \(7\). This just gives a counte) s
5 87 M
(rexample when LHS can be as efficient as RHS and viceversa.) s
5 65 M
(\(15\) [Benjamini-Kalai-Schramm] theorem states the condition for a boolean function to be noise) s
5 54 M
( sensitive:) s
5 43 M
(A boolean function is noise sensitive if and only if L2 norm \(sum of squares\) of influences of) s
5 32 M
( variables in f tends to zero.) s
5 21 M
(Therefore, for stability any voter boolean function in P\(Good\) RHS should not have the L2 norm) s
5 10 M
( of influences to tend to zero.) s
_R
S
%%Page: (16) 16
%%BeginPageSetup
_S
18 36 translate
/pagenum 16 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (16) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(\(16\) "How much increasing sets are positively correlated" by [Talagrand] - http://boolean-anal) s
5 670 M
(ysis.blogspot.in/2007/03/how-much-are-increasing-sets-positively.html - defines the inequality) s
5 659 M
( \(Chang's Level-1 inequality\):) s
5 648 M
(        Weight\(f\) = sum_1_to_n\(fouriercoeff\(i\)\) <= O\(mean^2*1/log\(mean\)\) ) s
5 637 M
(where Weight of boolean function f in n variables is the sum of squares of n fourier coefficie) s
5 626 M
(nts and mean is Pr\(f\(x\)=1\)-\(Pr\(f\(x\)=-1\). This is alternatively defined as derivative of stabil) s
5 615 M
(ity of f wrt rho at rho=0. This measure intuitively quantifies how Pr\(f\(x\)=f\(y\)\) changes as x ) s
5 604 M
(becomes increasingly correlated with y \(due to random flips\). Related to this, point \(20\) is d) s
5 593 M
(erived from Plancherel's theorem which equates E\(f\(x\)g\(x\)\) to summation\(f_fourier\(x\)g_fourier\() s
5 582 M
(y\)\). But stability is E\(f\(x\)f\(y/x-correlated\)\). The noise operator E\(f\(y\)\) is introduced for e) s
5 571 M
(ach monomial in fourier series by which E\(monomial\(S\)\) = \(rho^|S|*fourier_f\(S\)\). E\(f\(y\)\) is th) s
5 560 M
(us equivalent to a new boolean function g\(x\) for which Plancherel formula can be applied - E\(f) s
5 549 M
(\(x\)E\(f\(y\)\)\) = summation\(rho^|S|*fourier_f\(S\)^2\) = Noise stability. First derivative of Stabili) s
5 538 M
(ty wrt rho at rho=0 is Weight\(f\) - in other words this connects pseudorandomness with stabilit) s
5 527 M
(y of a boolean function in terms of fourier coefficients.) s
5 505 M
(\(17\) By Majority is Stablest Theorem if P\(Good\) RHS is a boolean function composition of Maj*M) s
5 494 M
(aj=Majn\(Maj1,Maj2,...,Majn\) then its stability is derived as:) s
5 483 M
(   \(1-2/pi * arccos\(rho\)\)*\(1-2/pi * arccos\(rho\)\) assuming that stability of the composition is) s
5 472 M
( the product like other measures) s
5 461 M
(If the LHS of P\(Good\) is the Dictator Boolean Function its stability is \(rho\)^n \(because all b) s
5 450 M
(its have to be flipped\). By equating the two stability measures both sides following expressio) s
5 439 M
(n results:) s
5 428 M
(   [cos\(pi/2*\(1-\(rho\)^n\)\)]^2 = rho) s
5 406 M
(For rho=0:) s
5 395 M
(---------) s
5 384 M
( [cos \(pi/2*\(1-0^n\)\)]^2 = 0 hence LHS=RHS) s
5 362 M
(For rho=1:) s
5 351 M
(---------) s
5 340 M
( [cos \(pi/2*\(1-1^n\)\)]^2 = 1 hence LHS=RHS) s
5 318 M
(But for rho=0.5:) s
5 307 M
(---------------) s
5 296 M
( arccos 1/sqrt\(2\) =  pi/2*\(1-0.5^n\)) s
5 285 M
( n = log\(1-2/pi*0.7071\)/log\(0.5\)) s
5 274 M
( n = 0.863499276 which is quite meaningless probably hinting that for uniform distribution the) s
5 263 M
( parity size n is < 1. ) s
5 241 M
(\(18\) In RHS the P\(Good\) binomial coefficient summation in terms of Noise Sensitivities of each) s
5 230 M
( Voter SAT:) s
5 219 M
(nC0\(1-NS\)^0\(NS\)^n + nC1\(1-NS\)^1\(NS\)^\(n-1\) + nC2\(1-NS\)^2\(NS\)^\(n-2\) + ...) s
5 208 M
(Above summation should ideally converge to holistic Noise Sensitivity of the Boolean Function ) s
5 197 M
(Composition of Maj*Maj described previously for stablest voting:) s
5 186 M
(       1/2 + 1/2*\(1-2/pi*arccos\(rho\)\)^2 = nC0\(1-NS\)^0\(NS\)^n + nC1\(1-NS\)^1\(NS\)^\(n-1\) + nC2\(1-NS) s
5 175 M
(\)^2\(NS\)^\(n-2\) + ...) s
5 153 M
(If each voter has boolean function with varied Noise Sensitivities, above becomes a Poisson Tr) s
5 142 M
(ial instead of Bernoulli. Above is a closed form for the goodness of voting expressed as the b) s
5 131 M
(inomial coefficient summation which otherwise requires hypergeometric algorithms because for N) s
5 120 M
(S=a/b \(!=0.5\) summation becomes \(nC0*\(b-a\)^0a^n + nC1\(b-a\)^1\(a\)^\(n-1\) + nC2\(b-a\)^2\(a\)^\(n-2\) + ) s
5 109 M
(...\)/b^n and closed form is non-trivial as summation is asymmetric whereas the case with NS=1/) s
5 98 M
(2 is symmetric with all coefficients being plain vanilla binomial coefficients. Previous ident) s
5 87 M
(ity equates Noise Sensitivity of Majority Voting Circuit in two versions: Boolean Function Com) s
5 76 M
(position and Majority with Oracle Voter SAT inputs.) s
5 54 M
(\(19\) There are classes of boolean functions based on percolation crossings \( http://arxiv.org/) s
5 43 M
(pdf/1102.5761.pdf - Noise Sensitivity of Boolean Functions and Percolation\) which decide if th) s
5 32 M
(e paths \(left-to-right\) in a percolation random graph in which edges are created with a probab) s
5 21 M
(ility p, have a left-right crossing. Perturbed paths are analogous to correlated bit strings. ) s
5 10 M
([Russo-Seymour-Welsh] theorem states that the percolation crossing boolean functions are non-d) s
_R
S
%%Page: (17) 17
%%BeginPageSetup
_S
18 36 translate
/pagenum 17 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (17) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(egenerate i.e function depends on all variables \(quite intuitive as to find out a left-right c) s
5 681 M
(rossing entire path has to be analyzed\). Noise Stability Regime of the crossing events [page 6) s
5 670 M
(8] answers the following question on noise stability of crossing events:) s
5 648 M
(For epsilon=o\(1/n^2*alpha4\), Pr[fn\(sequence\)=fn\(sequence with epsilon perturbation\)] tends to ) s
5 637 M
(zero at infinity where alpha4 is the four-arm crossing event probability \(paths cross at a poi) s
5 626 M
(nt on the percolation random graph creating four arms to the boundary from that point\). In ter) s
5 615 M
(ms of fourier expansion coefficients this is: summation\(fourier_coeff\(S\)^2\) tending to zero, |) s
5 604 M
(S| > n^2*alpha4. [Open question: Is such a percolation crossing the perfect voting boolean fun) s
5 593 M
(ction required in \(7\) and does it prove BKS Majority is least stable conjecture? But this happ) s
5 582 M
(ens only when there are infinite number of Z^2 grid cells - n * n is infinite]. If this is the) s
5 571 M
( only available perfect boolean function with 100% stability, [Benjamini-Kalai-Schramm] conjec) s
5 560 M
(ture is true and both LHS and RHS use only percolation as judge boolean functions\(in compositi) s
5 549 M
(ons for each voter - Majority * Percolation\), then LHS=RHS by P\(Good\) binomial summation conve) s
5 538 M
(rgence and LHS is class C algorithm for RHS PH-complete or EXP-complete algorithm where C is t) s
5 527 M
(he hardness of LHS pseudorandom choice judge boolean function. Also noise probability epsilon=) s
5 516 M
(o\(1/n^2*alpha4\) can have arbitrarily any value <= 1 depending on n and alpha4.) s
5 494 M
(Open question: If Percolation Boolean Functions are 100% noise stable \(as in infinite grid pre) s
5 483 M
(viously\), what is the lowerbound of such boolean functions \(or\) how hard and in what complexit) s
5 472 M
(y class C should they be. This infinite version of percolation is a non-uniform polynomial cir) s
5 461 M
(cuit class \(grid has n^2 coordinates\).) s
5 439 M
(\(*IMPORTANT* - this requires lot of reviewing - if correct places a theoretical limit on when ) s
5 428 M
(stability occurs\) From Plancherel's theorem and stability relation mentioned in \(16\), summatio) s
5 417 M
(n\(rho^|S|*fourier_f\(S\)^2\) = Noise stability. When stability is 1, this summation is equal to 1) s
5 406 M
(. In other words rho^|S1|*fourier_f\(S1\)^2 + rho^|S2|*fourier_f\(S2\)^2 + ...+ - 1 = 0 which is a) s
5 395 M
( univariate polynomial in rho as variable with n roots and degree n. Polynomial Identity Testi) s
5 384 M
(ng algorithms are required to ensure that this polynomial is non-zero \(coefficients are non ze) s
5 373 M
(ro\). The real, positive, roots of this polynomial are the probabilities where a boolean functi) s
5 362 M
(on is resilient to noise and 100% stable. It non-constructively shows existence of such stable) s
5 351 M
( boolean functions. [Talagrand] proved existence of a random CNF with noise sensitivity > Omeg) s
5 340 M
(a\(1\) - described in http://www.cs.cmu.edu/~odonnell/papers/thesis.pdf. Noise stability depends) s
5 329 M
( on huge [S] as evidenced by stability = summation\(rho^|S|*fourier_coeff\(f\(S\)\)^2\). What this i) s
5 318 M
(mplies is that for any boolean function, 100% stability is attainable at only n points in [0,1) s
5 307 M
(]. In other words there is no boolean function which is 100% noise stable for all points of rh) s
5 296 M
(o in [0,1]. It also implies that BKS majority is least stable conjecture is true at these poin) s
5 285 M
(ts of rho. Since coefficients of this polynomial are Fourier coefficients of the boolean funct) s
5 274 M
(ion, roots of this polynomial i.e stability points are functions of Fourier coefficients.) s
5 252 M
(\(20\) Noise stability in terms of Fourier coefficient weights is defined as:) s
5 241 M
(        summation\( rho^k * W^k \) for all degree-k weights where W = summation\(fourier_coeff\(S\)) s
5 230 M
(^2\) for all |S|, S in [n]) s
5 208 M
(\(21\) Variant 1 of Percolation as a Judge boolean function is defined in 53.4 below which is in) s
5 197 M
( non-uniform NC1. If this is 100% noise stable judge boolean function for LHS and RHS noise st) s
5 186 M
(ability also converges to 100%, then there is a non-uniform NC1 circuit for RHS PH-complete or) s
5 175 M
( EXP-complete DC uniform circuit. This gives a non-uniform algorithm for an RHS uniform circui) s
5 164 M
(t. Variant 2 of Percolation in 53.5 as Judge boolean function is also in non-uniform NC1 subje) s
5 153 M
(ct to 100% noise stability condition. In 53.6 a sorting network based circuit is described for) s
5 142 M
( Percolation boolean function.) s
5 120 M
(\(22\) Also from Theorem 5.17 - [RyanODonnell] - http://analysisofbooleanfunctions.org/ - for an) s
5 109 M
(y rho in [0,1], Stability of Infinite Majority is bounded as:) s
5 98 M
(        2/pi*arcsin \317\\201 \342\\211\244 Stab\317\\201[Majn] \342\\211\244 2/pi*arcsin \317\\201 + O\(1/\(sqrt\(1-rho^2\)) s
5 87 M
(*sqrt\(n\)\)\).) s
5 65 M
(\(23\) Peres' Theorem rephrases above bound for NoiseStability in terms of NoiseSensitivity for ) s
5 54 M
(class of uniform noise stable linear threshold functions f \(which includes Majority\):) s
5 43 M
(        NoiseSensitivity\316\264[f] \342\\211\244 O\(sqrt\(\316\264\)\)) s
5 21 M
(\(24\) From http://arxiv.org/pdf/1504.03398.pdf: [Boppana-Linial-Mansour-Nisan] theorem states t) s
5 10 M
(hat influence of a boolean function f of size S and depth d is:) s
_R
S
%%Page: (18) 18
%%BeginPageSetup
_S
18 36 translate
/pagenum 18 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (18) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        Inf\(f\) = O\(\(logS\)^d-1\)) s
5 670 M
(\(25\) [Benjamini-Kalai-Schramm] Conjecture \(different from Majority is least stable BKS conject) s
5 659 M
(ure which is still open\) is the converse of above that states:) s
5 648 M
(Every monotone boolean function f can be epsilon \(e\) approximated by a circuit of depth d and ) s
5 637 M
(of size exp\(\(K\(e\)*Inf\(f\)\)^1/\(d\342\\210\\2221\)\) for some constant K\(e\). This conjecture was disprov) s
5 626 M
(ed by [ODonnell-Wimmer] and strengthened in http://arxiv.org/pdf/1504.03398.pdf.) s
5 604 M
(\(26\) Class of uniform noise stable LTFs in \(23\) are quite apt for Voter Boolean Functions in t) s
5 593 M
(he absence of 100% noise stable functions, which place an upperlimit on decision error. Depth ) s
5 582 M
(hierarchy theorem in http://arxiv.org/pdf/1504.03398.pdf separates on what fraction, 2 circuit) s
5 571 M
(s of varying depths agree in outputs.) s
5 549 M
(----------------------) s
5 538 M
(Additional References:) s
5 527 M
(----------------------) s
5 516 M
(14.1 k-SAT and 3-SAT - http://cstheory.stackexchange.com/questions/7213/direct-sat-to-3-sat-re) s
5 505 M
(duction) s
5 494 M
(14.2 k-SAT and 3-SAT - http://www-verimag.imag.fr/~duclos/teaching/inf242/SAT-3SAT-and-other-r) s
5 483 M
(ed.pdf ) s
5 472 M
(14.3 Switching Lemma) s
5 461 M
(14.4 Donald Knuth - Satisfiability textbook chapter - http://www-cs-faculty.stanford.edu/~uno/) s
5 450 M
(fasc6a.ps.gz - Quoted excerpts:) s
5 439 M
(" ... Section 7.2.2.2 Satisfiability) s
5 428 M
(Satisfiability is a natural progenitor of every NP-complete problem\342\\200\\231) s
5 417 M
(Footnote:  At the present time very few people believe that P = NP. In other words, almost eve) s
5 406 M
(rybody who has studied the subject thinks that satisfiability cannot be decided in polynomial ) s
5 395 M
(time.  The author of this book, however, suspects that N^O\(1\)\342\\200\\223step algorithms do exist) s
5 384 M
(, yet that they\342\\200\\231re unknowable.  Almost all polynomial time algorithms are so complicat) s
5 373 M
(ed that they are beyond human comprehension, and could never be programmed for an actual compu) s
5 362 M
(ter in the real world.  Existence is different from embodiment. ...") s
5 351 M
(14.5 Majority and Parity not in AC0 - www.cs.tau.ac.il/~safra/ACT/CCandSpaceB.ppt, http://www.) s
5 340 M
(math.rutgers.edu/~sk1233/courses/topics-S13/lec3.pdf) s
5 329 M
(14.6 Sampling Fourier Polynomials - http://cstheory.stackexchange.com/questions/17431/the-comp) s
5 318 M
(lexity-of-sampling-approximately-the-fourier-transform-of-a-boolean-fu ) s
5 296 M
(14.7 Kummer's theorem on binomial coefficient summation - quoted from Wikipedia:) s
5 285 M
("In mathematics, Kummer's theorem on binomial coeffients gives the highest power of a prime nu) s
5 274 M
(mber p dividing a binomial coefficient. In particular, it asserts that givenintegers n \342\\211\245 ) s
5 263 M
(m \342\\211\245 0 and a prime number p, the maximum integer k such that p^k divides the binomial coef) s
5 252 M
(ficient \\tbinom n m  is equal to the number of carries when m is added to n \342\\210\\222 m in bas) s
5 241 M
(e p.  The theorem is named after Ernst Kummer, who proved it in the paper Kummer \(1852\). It ca) s
5 230 M
(n be proved by writing \\tbinom{n}{m} as \\tfrac{n!}{m! \(n-m\)!} and using Legendre's formula.") s
5 208 M
(14.8 Summation of first k binomial coefficients for fixed n:) s
5 197 M
( - http://mathoverflow.net/questions/17202/sum-of-the-first-k-binomial-coefficients-for-fixed-) s
5 186 M
(n) s
5 175 M
( - https://books.google.co.in/books?id=Tn0pBAAAQBAJ&pg=PA61&lpg=PA61&dq=summation+of+first+k+b) s
5 164 M
(inomial+coefficients&source=bl&ots=sqB_iQweyS&sig=ye5TxmCkjP-Ud5JnWilMzqOkDjM&hl=en&sa=X&ved=0) s
5 153 M
(CFgQ6AEwCWoVChMI6rDEo9nVxwIVR0yOCh2AXgpz#v=onepage&q=summation%20of%20first%20k%20binomial%20c) s
5 142 M
(oefficients&f=false) s
5 131 M
(which imply bounds for the summation:) s
5 120 M
( - sum_k_2n\(2nCi\) = 2^2n - sum_0_k-1\(2nCi\)) s
5 109 M
( - 2^2n - sum_0_k-1\(2nCi\) >  2^2n - \(2nCk\) * 2^\(2n\) / 2*\(2nCn\) ) s
5 87 M
(14.9 Probabilistic boolean formulae - truth table with probabilities - simulates the Voter Cir) s
5 76 M
(cuit SAT with errors) s
5 65 M
(http://www.cs.rice.edu/~kvp1/probabilisticboolean.pdf) s
5 43 M
(14.10 BPAC circuits \( = Probabilistic CNF?\)) s
5 32 M
(http://www.cs.jhu.edu/~lixints/class/nw.pdf) s
5 10 M
(14.11 Mark Fey's proof of infinite version of May's theorem for 2 candidate majority voting - ) s
_R
S
%%Page: (19) 19
%%BeginPageSetup
_S
18 36 translate
/pagenum 19 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (19) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Cantor set arguments for levels of infinities - ) s
5 681 M
(https://www.rochester.edu/college/faculty/markfey/papers/MayRevised2.pdf) s
5 659 M
(14.12 Upperbounds for Binomial Coefficients Summation - http://mathoverflow.net/questions/1720) s
5 648 M
(2/sum-of-the-first-k-binomial-coefficients-for-fixed-n - Gallier, Lovasz bounds - where Lovasz) s
5 637 M
( bound is:) s
5 626 M
(            f\(n,k\)\342\\211\244 2^\(n\342\\210\\2221\)*exp\(\(n\342\\210\\2222k\342\\210\\2222\)^2/4\(1+k\342\\210\\222n\)\)) s
5 615 M
(for f\(n,k\) = sum_i_0_to_k\(nCi\). Proof by Lovasz at: http://yaroslavvb.com/upload/lovasz-proof2) s
5 604 M
(.pdf) s
5 582 M
(-------------------------------------------------------------------------------------------) s
5 571 M
(14.13 \(*IMPORTANT*\) Connections between Hypergeometric series and Riemann Zeta Function :) s
5 560 M
(-------------------------------------------------------------------------------------------) s
5 549 M
(- http://matwbn.icm.edu.pl/ksiazki/aa/aa82/aa8221.pdf - This relation implies that:) s
5 538 M
(      - P\(good\) binomial coefficient infinite series summation \(and hence the Psuedorandom Vs ) s
5 527 M
(Majority Voting circuit\) which require Hypergeometric functions ) s
5 516 M
(      - and Complement Function circuit special case for RZF \(and hence the Euler-Fourier poly) s
5 505 M
(nomial for Riemann Zeta Function circuit\) ) s
5 494 M
(are deeply intertwined. Kummer theorem gives the p-adic number \(power of a prime that divides ) s
5 483 M
(an integer\) for dividing a binomial coefficient which relates prime powers in Euler product RZ) s
5 472 M
(F notation and Binomial coefficients in Majority voting summation. ) s
5 450 M
(Above implies that binomial coefficients can be written in terms of prime powers and vice-vers) s
5 439 M
(a: P\(good\) series can be written as function of sum of prime powers and Euler Product for RZF ) s
5 428 M
(can be written in terms of binomial coefficients. Also Euler-Fourier polynomial obtained for c) s
5 417 M
(omplement function circuit \(Expansion of http://arxiv.org/pdf/1106.4102v1.pdf described in 10\)) s
5 406 M
( can be equated to binomial coefficient summation. If these two apparently unrelated problems ) s
5 395 M
(of Complexity-Theoretic Majority voting and Analytic-Number-Theoretic Riemann Zeta Function ar) s
5 384 M
(e related then complexity lowerbound for some computational problems might hinge on Riemann Ze) s
5 373 M
(ta Function - for example PH=DC circuit problems .  ) s
5 351 M
(----------------------------------------------------------------------------) s
5 340 M
(14.15 ACC circuits and P\(Good\) RHS circuit) s
5 329 M
(----------------------------------------------------------------------------) s
5 318 M
(ACC circuits are AC circuits augmented with mod\(m\) gates. i.e output 1 iff sum\(xi\) is divisibl) s
5 307 M
(e by m. It is known that NEXP is not computable in ACC0 - http://www.cs.cmu.edu/~ryanw/acc-lbs) s
5 296 M
(.pdf [RyanWilliams]. From \(129\) above the P\(good\) RHS can be an EXP circuit if the boolean fun) s
5 285 M
(ctions of the voters are of unrestricted depth. Thus open question is: can RHS of P\(Good\) whic) s
5 274 M
(h is deterministic EXP, be computed in ACC0. [RyanWilliams] has two theorems. Second theorem l) s
5 263 M
(ooks applicable to P\(Good\) RHS circuit i.e "E^NP, the class of languages recognized in 2^O\(n\) ) s
5 252 M
(time with an NP oracle, doesn\342\\200\\231t have non-uniform ACC circuits of 2^n^o\(1\) size". Boole) s
5 241 M
(an functions are the NP oracles for this P\(Good\) Majority Voting EXP circuit if the variables ) s
5 230 M
(are common across voters. Applying this theorem places strong super-exponential lowerbound on ) s
5 219 M
(the size of the P\(Good\) majority voting circuit. ) s
5 197 M
(--------------------------------------------------------) s
5 186 M
(14.16. Infinite Majority as Erdos Discrepancy Problem) s
5 175 M
(--------------------------------------------------------) s
5 164 M
(Related to \(132\) - May's Theorem proves conditions for infinite majority with sign inversions ) s
5 153 M
({+1,-1} and abstention \(zero\). Erdos discrepancy problem which questions existence of integers) s
5 142 M
( k,d, and C in sequence of {+1,-1} such that sum_0_to_k\(x\(i*d\)\) > C and has been proved for C=) s
5 131 M
(infinite - [TerenceTao] - http://arxiv.org/abs/1509.05363. For spacing d=1, Erdos Discrepancy ) s
5 120 M
(Problem reduces to Infinite Majority and as C is proved to be infinite, it looks like an alter) s
5 109 M
(native proof of non-decrementality condition in Infinite version of May's Theorem.) s
5 87 M
(14.17 Noise Sensitivity of Boolean Functions and Percolation - http://arxiv.org/pdf/1102.5761.) s
5 76 M
(pdf, www.ma.huji.ac.il/~kalai/sens.ps) s
5 54 M
(14.18 Binomial distributions, Bernoulli trials \(which is the basis for modelling voter decisio) s
5 43 M
(n making - good or bad - in P\(Good\) series\) - http://www.stat.yale.edu/Courses/1997-98/101/bin) s
5 32 M
(om.htm) s
5 10 M
(14.19 Fourier Coefficients of Majority Function -  http://www.contrib.andrew.cmu.edu/~ryanod/?) s
_R
S
%%Page: (20) 20
%%BeginPageSetup
_S
18 36 translate
/pagenum 20 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (20) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(p=877,  Majority and Central Limit Theorem - http://www.contrib.andrew.cmu.edu/~ryanod/?p=866) s
5 670 M
(14.20 Hastad's Switching Lemma - http://windowsontheory.org/2012/07/10/the-switching-lemma/, h) s
5 659 M
(ttp://www.contrib.andrew.cmu.edu/~ryanod/?p=811#lemrand-restr-dt ) s
5 637 M
(14.21 Degree of Fourier Polynomial and Decision tree depth - http://www.contrib.andrew.cmu.edu) s
5 626 M
(/~ryanod/?p=547#propdt-spectrum \(degree of fourier polynomial < decision tree depth, intuitive) s
5 615 M
( to some extent as each multilinear monomial can be thought of as a path from root to leaf\)) s
5 593 M
(14.22 Judgement Aggregation \(a generalization of majority voting\) - Arriving at a consensus on) s
5 582 M
( divided judgements - http://arxiv.org/pdf/1008.3829.pdf.) s
5 560 M
(14.23 Noise and Influence - [Gil Kalai, ICS2011] - https://gilkalai.files.wordpress.com/2011/0) s
5 549 M
(1/ics11.ppt) s
5 527 M
(14.24 Doctrinal Paradox \(or\) Discursive dilemma - Paradoxes in Majority voting where both Yes ) s
5 516 M
(and No are possible in judgement aggregations - https://en.wikipedia.org/wiki/Discursive_dilem) s
5 505 M
(ma) s
5 483 M
(----------------------------------------------------------) s
5 461 M
(15. \(FEATURE - DONE-Minimum Implementation using NetworkX algorithms\) Add Graph Search \(for ex) s
5 450 M
(ample subgraph isomorphism, frequent subgraph mining etc.,\) for "inferring" a graph from datas) s
5 439 M
(et with edges as relations and nodes as entities\(astronomical or otherwise\).Reference survey o) s
5 428 M
(f FSM algorithms: http://cgi.csc.liv.ac.uk/~frans/PostScriptFiles/ker-jct-6-May-11.pdf. The co) s
5 417 M
(ntext of "Graph Search" includes deducing relationships hidden in a text data by use of WordNe) s
5 406 M
(t\(construction of wordnet subgraph by Definition Graph Recursive Gloss Overlap etc.,\), mining ) s
5 395 M
(graph patterns in Social Networks etc., At present a WordNet Graph Search and Visualizer pytho) s
5 384 M
(n script that renders the definition graph and computes core numbers for unsupervised classifi) s
5 373 M
(cation \(subgraph of WordNet projected to a text data\) has been added to repository.) s
5 351 M
(16. \(FEATURE - DONE\) Use of already implemented Bayesian and Decision Tree Classifiers on astr) s
5 340 M
(onomical data set for prediction \(this would complement the use of classifiers for string mini) s
5 329 M
(ng\) - autogen_classifier_dataset/ directory contains Automated Classified Dataset and Encoded ) s
5 318 M
(Horoscopes Generation code.) s
5 296 M
(17. \(FEATURE - DONE\) Added Support for datasets other than USGS EQ dataset\(parseUSGSdata.py\). ) s
5 285 M
(NOAA HURDAT2 dataset has been parsed and encoded pygen horoscope string dataset has been autog) s
5 274 M
(enerated by parseNOAA_HURDAT2_data.py) s
5 252 M
(18. \(FEATURE - Minimum Functionality DONE-TwitterFollowersGraphRendering, Centrality\) \(Astro\)P) s
5 241 M
(sychoSocialAnalysis  - Social Network Graph Analysis and Sentiment Analysis of Social Media an) s
5 230 M
(d drawing inferences on Psychology and Human Opinion Mining in broader sense - for example, ho) s
5 219 M
(w a social network forms, how opinions, edges and vertices appear over time , Rich-get-Richer ) s
5 208 M
(in Random Network Erdos-Renyi Model - which by majority opinion seems to be a bad model choice) s
5 197 M
( for Social Networking \(Do people flock to popular social groups?\), Bonacich Power Centrality ) s
5 186 M
(\(a social prestige measure predating PageRank\) etc.,. Related to point 15.) s
5 175 M
(------------) s
5 164 M
(References:) s
5 153 M
(-----------) s
5 142 M
(18.1 Networks,Crowds,Markets - http://www.cs.cornell.edu/home/kleinber/networks-book/networks-) s
5 131 M
(book.pdf) s
5 120 M
(18.2 Introduction to Social Network Methods - http://faculty.ucr.edu/~hanneman/nettext/) s
5 109 M
(18.3 Bonacich Power Centrality - http://www.leonidzhukov.net/hse/2014/socialnetworks/papers/Bo) s
5 98 M
(nacich-Centrality.pdf ) s
5 87 M
(18.4 Modelling Human Emotions - http://www.jmlr.org/proceedings/papers/v31/kim13a.pdf) s
5 76 M
(18.5 Depression Detection - http://www.ubiwot.cn/download/A%20Depression%20Detection%20Model%2) s
5 65 M
(0Based%20on%20Sentiment%20Analysis%20in%20Micro-blog%20Social%20Network.pdf) s
5 54 M
(18.6 Market Sentiments - http://www.forexfraternity.com/chapter-4-fundamentals/sentiment-analy) s
5 43 M
(sis/the-psychology-of-sentiment-analysis) s
5 32 M
(18.7 Sentiment Analysis - http://www.lct-master.org/files/MullenSentimentCourseSlides.pdf) s
5 21 M
(18.8 Dream Analysis - http://cogprints.org/5030/1/NRC-48725.pdf) s
5 10 M
(18.9 Opinion Mining - http://www.cs.uic.edu/~liub/FBS/SentimentAnalysis-and-OpinionMining.pdf) s
_R
S
%%Page: (21) 21
%%BeginPageSetup
_S
18 36 translate
/pagenum 21 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (21) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(18.10 Linked - [Albert Laszlo Barabazi] - [Ginestra Bianconi - http://www.maths.qmul.ac.uk/~gb) s
5 681 M
(ianconi/Condensation.html] Bose gas theory of networks - Bose-Einstein Condensate is equivalen) s
5 670 M
(t to evolution of complex networks - Page 101 on Einstein's Legacy - "Nodes in Network are ene) s
5 659 M
(rgy levels of subatomic paritcles and Links across nodes are subatomic particles" - "Winner ta) s
5 648 M
(kes it all" - particles occupying lowest energy correspond to people flocking to a central nod) s
5 637 M
(e in social networks - This finding is from behaviour of large scale networks viz., WWW, Socia) s
5 626 M
(l networks etc., This Condensate theory has striking applications to Recursive Gloss Overlap G) s
5 615 M
(raph construction and using it for unsupervised classification based on core numbers - each ne) s
5 604 M
(twork and for that matter a graph constructed from text document is a macrocosmic counterpart ) s
5 593 M
(of quantum mechanics.) s
5 582 M
(18.11 Small World Experiment and Six Degrees of Separation - [Stanley Milgram] - https://en.wi) s
5 571 M
(kipedia.org/wiki/Small-world_experiment) s
5 560 M
(18.12 LogLog estimation of Degrees in Facebook graph - 3.57 Degrees of Separation - https://re) s
5 549 M
(search.facebook.com/blog/three-and-a-half-degrees-of-separation/) s
5 527 M
(19. \(FEATURE - DONE-PAC Learnt Boolean Conjunction\) Implement prototypical PAC learning of Boo) s
5 516 M
(lean Functions from dataset. Complement Boolean Function construction described in http://arxi) s
5 505 M
(v.org/abs/1106.4102 is in a way an example of PAC learnt Boolean Function - it is rather C Lea) s
5 494 M
(rnt \(Correct Learning\) because there is no probability or approximation. Complement Boolean Fu) s
5 483 M
(nction can be PAC learnt \(with upperbounded error\) as follows:) s
5 472 M
(        19.1 There are two datasets - dataset1 of size 2^n of consecutive integers and dataset) s
5 461 M
(2 of first n-bit prime numbers of size 2^n) s
5 450 M
(        19.2 Each element of dataset1 is mapped to i-th bit of the corresponding prime number ) s
5 439 M
(element in the dataset2. Boolean Conjunction is learnt for each of the i mappings.) s
5 428 M
(        19.3 Above step gives i probabilistic, approximate, correct learnt boolean conjunction) s
5 417 M
(s for each bit of all the prime numbers. ) s
5 406 M
(        19.4 Reference: PAC Learning - http://www.cis.temple.edu/~giorgio/cis587/readings/pac.) s
5 395 M
(html ) s
5 384 M
(        19.5 PAC Learnt Boolean Conjunction is an approximated Decision Tree.) s
5 373 M
(        19.6 PAC learning is based on Occam's Razor \(no unnecessary variables\)) s
5 362 M
(PAC Learning implementation for learning patterns in Binary encoded first 10000 Prime Numbers ) s
5 351 M
(have been committed to AsFer repository \(Commit Notes 324\)) s
5 329 M
(20. \(FEATURE - DONE\) Integrate AstroInfer to VIRGO-KingCobra-USBmd Platform which makes it an ) s
5 318 M
(Approximately Intelligent Cloud Operating System Framework - a Cloud OS that "learns" ,"decide) s
5 307 M
(s" from datasets and "drives" using AstroInfer code. AsFer+USBmd+VIRGO+KingCobra integrated cl) s
5 296 M
(oud platform with machine learning features together have been christened as "Krishna iResearc) s
5 285 M
(h Intelligent Cloud Platform" or "NeuronRain". It has to be mentioned here that NeuronRain clo) s
5 274 M
(ud differs from traditional cloud in following ways:) s
5 263 M
(        20.1 Usual cloud platforms support only application-application layer RPCs over an exi) s
5 252 M
(sting operating system.) s
5 241 M
(        20.2 NeuronRain differs in that aspect by adding new cloud features \(with advanced fea) s
5 230 M
(tures in development\) like RPC, distributed kernel memory and network filesystem related syste) s
5 219 M
(m call clients and kernel modules kernelsocket-server-listeners into linux kernel \(a fork-off ) s
5 208 M
(in that respect\)) s
5 197 M
(        20.3 Cloud support within kernelspace has lot of advantages - low network latency beca) s
5 186 M
(use of kernelspace-kernelspace cloud communication by kernel sockets, userspace to kernelspace) s
5 175 M
( communication \(a userspace application like telnet can connect to a kernel socket listener of) s
5 164 M
( a VIRGO driver in kernelspace\), userspace-userspace communication by kernel upcalls to usersp) s
5 153 M
(ace from kernelspace.) s
5 142 M
(        20.4 Kernelspace-Kernelspace communication is a privileged mode privy to kernel alone ) s
5 131 M
(and userspace applications shouldn't be able to access kernelspace socket data.) s
5 120 M
(        20.5 At present the data sent over kernel sockets is not encrypted which requires Open) s
5 109 M
(SSL in kernel. Kernel doesn't have OpenSSL support presently and it is not straightforward to ) s
5 98 M
(implement SSL handshake in NeuronRain cloud. But there are MD5 and other hashing libraries \(e.) s
5 87 M
(g crypto\) available for encrypting data before before they are sent over cloud.) s
5 76 M
(        20.6 There are ongoing efforts to provide Transport Layer Security \(TLS\) in kernel soc) s
5 65 M
(kets which are not yet mainline. Hopefully kernel sockets in future kernel mainline versions w) s
5 54 M
(ould support AF_KTLS sockets and thus NeuronRain cloud implicitly is TLSed :) s
5 43 M
(                20.6.1 KTLS - [DaveWatson - Facebook] - https://lwn.net/Articles/666509/ and h) s
5 32 M
(ttps://github.com/ktls/af_ktls) s
5 21 M
(                20.6.2 IPSec for kernel sockets - [SowminiVaradhan - Oracle] - http://www.netd) s
5 10 M
(evconf.org/1.1/proceedings/slides/varadhan-securing-tunneled-kenel-tcp-udp-sockets.pdf) s
_R
S
%%Page: (22) 22
%%BeginPageSetup
_S
18 36 translate
/pagenum 22 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (22) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        20.7 Usual userspace-userspace network communication has following routing - user1----) s
5 681 M
(kernel1----kernel2----user2 for two cloud nodes node1 and node2. NeuronRain cloud communicatio) s
5 670 M
(n has following routings - user1----kernel1---kernel2, kernel1---kernel2, user1---kernel1--ker) s
5 659 M
(nel2--user2. With VFS filesystem API in kernel, both userspace and kernelspace mode communicat) s
5 648 M
(ion can be persisted in filesystem and better than an equivalent application layer persistence) s
5 637 M
( mechanisms which require lot of internal kernel calls for disk writes. Thus kernel-kernel com) s
5 626 M
(munication saves lot of user layer to kernel disk write invocations.) s
5 604 M
(21. \(FEATURE - DONE-Minimum Implementation\) Unsupervised Named Entity Recognition and Part-of-) s
5 593 M
(Speech tagging using Conditional Random Fields\(CRF\) and Viterbi path computation in CRF. Bayes) s
5 582 M
(ian Network and Belief propagation might be implemented if necessary - as they are graphical m) s
5 571 M
(odels where graph edges are labelled with conditional probabilities and belief potentials resp) s
5 560 M
(ectively and can be part of other larger modules. ) s
5 538 M
(############################################################################################) s
5 527 M
(A.      Design Notes on Mining Numerical Datasets) s
5 516 M
(############################################################################################) s
5 494 M
(22. \(FEATURE - DONE-Minimum Implementation\) Period Three theorem \(www.its.caltech.edu/~matilde) s
5 483 M
(/LiYorke.pdf\) which is one of the earliest results in Chaotic NonLinear Systems, implies any d) s
5 472 M
(ata that has a periodicity of 3 can have larger periods. Fractals, Mandelbrot-Julia Sets have ) s
5 461 M
(modelled natural phenomena. Thus finding if a data has periodicity or Chaos and if it has sens) s
5 450 M
(itive dependence on initial conditions \(for example logistic equations similar to x\(n+1\) = kx\() s
5 439 M
(n\)\(1-x\(n\)\)\) is a way to mine numerical data. Computation of Hausdorff-Besicovitch Dimension ca) s
5 428 M
(n be implemented to get Fractal Dimension of an uncountable set \(this has to be visualized as ) s
5 417 M
(a fractal curve than set of points\). In addition to these, an Implementation of Chaotic PRG al) s
5 406 M
(gorithms as described in https://sites.google.com/site/kuja27/ChaoticPRG.pdf?attredirects=0 an) s
5 395 M
(d https://sites.google.com/site/kuja27/Analysis%20of%20a%20Randomized%20Space%20Filling%20Algo) s
5 384 M
(rithm%20and%20its%20Linear%20Program%20Formulation.pdf?attredirects=0 can be done.) s
5 362 M
(23. \(FEATURE - DONE\) Entropy of numerical data - Sum of -Pr\(x\)LogPr\(x\) for all possible outcom) s
5 351 M
(e probabilities for a random variable. This is already computed in Decision Tree Classifier as) s
5 340 M
( impurity measure of a dataset. Also a python Entropy implementation for texts has been added ) s
5 329 M
(to repository - computes weighted average of number of bits required to minimum-describe the t) s
5 318 M
(ext.) s
5 285 M
(##############################################################################################) s
5 274 M
(###############################################) s
5 252 M
(==============================================================================================) s
5 241 M
(=============================================) s
5 230 M
(\(THEORY\) DECIDABILITY OF EXISTENCE AND CONSTRUCTION OF COMPLEMENT OF A FUNCTION \(important dra) s
5 219 M
(ft additions to http://arxiv.org/pdf/1106.4102v1.pdf - quite experimental, non-conventional an) s
5 208 M
(d not necessarily correct\)) s
5 197 M
(==============================================================================================) s
5 186 M
(=============================================) s
5 164 M
(\(*\)24. \(DONE\) COMPLEMENT OF A FUNCTION - Approximating or Interpolating with a Polynomial: Thi) s
5 153 M
(s is quite expensive and is undecidable for infinite sets. Better alternative is to approximat) s
5 142 M
(e with Spline interpolant polynomials, for example, cubic splines which have less approximatio) s
5 131 M
(n error. \(On a related note, algorithms described by the author \(that is, myself\) in http://ar) s
5 120 M
(xiv.org/pdf/1106.4102v1.pdf for construction of a complement of a function are also in a way e) s
5 109 M
(liciting pattern in numerical data. The polynomial interpolation algorithm for complement find) s
5 98 M
(ing can be improved with Spline interpolants which reduce the error and Discrete Fourier Trans) s
5 87 M
(form in addition to Fourier series for the boolean expression. Adding this as a note here sinc) s
5 76 M
(e TeX file for this arXiv submission got mysteriously deleted and the PDF in arXiv has to be u) s
5 65 M
(pdated somehow later.\). A test python script written in 2011 while at CMI for implementing the) s
5 54 M
( above is at: http://sourceforge.net/p/asfer/code/HEAD/tree/python-src/complement.py. Also Tri) s
5 43 M
(gonometric Polynomial Interpolation which is a special case of Polynomial interpolation, has f) s
5 32 M
(ollowing relation to DFT X\(i\)s:) s
5 21 M
(        p\(t\) = 1/N [X0 + X1*e^\(2*pi*i*t\) + ... upto XN] and ) s
5 10 M
(        p\(n/N\) = xn) s
_R
S
%%Page: (23) 23
%%BeginPageSetup
_S
18 36 translate
/pagenum 23 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (23) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Thus DFT amd interpolation coincide in the above.) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(-------------------------) s
5 648 M
(24a. Theorems on prime number generating polynomials - special case is to generate all primes ) s
5 637 M
(or integral complement of xy=z ) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(-------------------------) s
5 604 M
(Legendre - There is no rational algebraic function which always gives primes.) s
5 593 M
(Goldbach - No polynomial with integer coefficients can give primes for all integer values) s
5 582 M
(Jones-Sato-Wada-Wiens - Polynomial of degree 25 in 26 variables whose values are exactly prime) s
5 571 M
(s exists) s
5 549 M
(Polynomial interpolation and Fourier expansion of the boolean function in http://arxiv.org/pdf) s
5 538 M
(/1106.4102v1.pdf probably would have non-integral coefficients due to the above.) s
5 516 M
(--------------------------------------------------------------------------------------------) s
5 505 M
(24b. Circuit construction for the complement function boolean DNF constructed in http://arxiv.) s
5 494 M
(org/pdf/1106.4102v1.pdf) s
5 483 M
(--------------------------------------------------------------------------------------------) s
5 472 M
(The DNF constructed for complement function has to be minimized \(through some lowerbound techn) s
5 461 M
(iques\) before it is represented as a circuit because the number of clauses could be exponentia) s
5 450 M
(l. The circuit minimization problem has been shown to be NP-complete\(unpublished proof by Mase) s
5 439 M
(k, [GareyJohnson]\). The above complement function boolean DNF would yield a constant depth 2 c) s
5 428 M
(ircuit \(probably after minimization also\) with unbounded fanin. If the size of the circuit is ) s
5 417 M
(polynomial it is in AC \(=NC\). The size of the circuit depends on the boolean DNF constructed a) s
5 406 M
(bove which inturn depends on input complement set. Thus circuit depends on input making it a N) s
5 395 M
(on-Uniform AC circuit.  Though complement function is undecidable as described in http://arxiv) s
5 384 M
(.org/pdf/1106.4102v1.pdf, Non-uniform circuits "decide" undecidable languages by definition.) s
5 362 M
(Old draft of the complement function - https://sites.google.com/site/kuja27/ComplementOfAFunct) s
5 351 M
(ion_earlier_draft.pdf?attredirects=0 describes this and proposes a name of co-TC0 as integer m) s
5 340 M
(ultiplication is in TC0 \(threshold circuits\) which may not be true if the circuit size is supe) s
5 329 M
(r-polynomial. Super-polynomial size circuits are DC circuits allowing exponential size. Assumi) s
5 318 M
(ng polynomial size the above may be named as "Non-uniform co-TC" for lack of better naming.) s
5 296 M
(Due to equivalence of Riemann Zeta Function and Euler's theorem - inverse\(infiniteproduct\(1-1/) s
5 285 M
(p\(i\)^z\)\) for all primes p\(i\) - gives a pattern in distribution of primes which is the Riemann ) s
5 274 M
(Hypothesis of Re\(nontrivial zeroes of RZF\)=0.5. Complement function for xy=z obtained by http:) s
5 263 M
(//arxiv.org/pdf/1106.4102v1.pdf by polynomial interpolation or Fourier approximation polynomia) s
5 252 M
(l of the DNF boolean formula can thus be conjectured to have a strong relation to RZF or even ) s
5 241 M
(generalize RZF. In circuit parlance, the DNF boolean formula and its minimized Non-uniform AC\() s
5 230 M
(if polynomial sized\) circuit that outputs prime number bits, thus are related to non-trivial z) s
5 219 M
(eroes of Riemann Zeta Function. Another conjecture that can be made is that if the real part o) s
5 208 M
(f the non-trivial zeroes is 0.5 in RZF, then the Non-uniform circuit family constructed for th) s
5 197 M
(e above complement function DNF should also have a pattern in the circuit graph drawn - subgra) s
5 186 M
(phs of the circuit family of graphs have some common structure property.) s
5 164 M
(Fourier polynomial of a boolean formula is of the form:) s
5 153 M
(        f\(x\) = Sigma_S\(fouriercoeff\(S\)parityfn\(S\)\)) s
5 131 M
(and is multilinear with variables for each input. S is the restriction or powerset of the bit ) s
5 120 M
(positions.) s
5 98 M
(Thus if a prime number is b-bit, there are b fourier polynomials for each bit of the prime. Th) s
5 87 M
(us for x-th prime number fourier expression is,) s
5 76 M
(        P\(x\) = 1+2*fx1\(x\)+2^2*fx2\(x\).....+2^b*fxb\(x\)) s
5 65 M
(where each fxi\(\) is one of the b fourier expansion polynomials for prime bits.) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(-------------------------------------) s
5 21 M
(24c. Riemann Zeta Function written as Euler-Fourier Polynomial :) s
5 10 M
(------------------------------------------------------------) s
_R
S
%%Page: (24) 24
%%BeginPageSetup
_S
18 36 translate
/pagenum 24 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (24) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Fourier polynomials for each prime can be substituted in Euler formula and equated to Riemann ) s
5 681 M
(Zeta Function:) s
5 670 M
(RZF = Inverse\(\(1-1/P\(x1\)^s\)\(1-1/P\(x2\)^s\)\)...ad infinitum--------------------------------------) s
5 659 M
(-------------------------------\(1\).) s
5 637 M
(Non-trivial complex zero s is obtained by,) s
5 626 M
(        P\(xi\)^s = 1) s
5 615 M
(        P\(xi\)   = \(1\)^\(1/s\)) s
5 604 M
(        1+2*fx1\(xi\)+2^2*fx2\(xi\).....+2^b*fxb\(xi\) = \(1\)^\(e^\(-i*theta\)/r\) after rewriting in pha) s
5 593 M
(sor notation s=r*e^\(i*theta\).-----------\(2\)) s
5 571 M
(Above links Fourier polynomials for each prime to roots of unity involving non-trivial zeroes ) s
5 560 M
(of Riemann Zeta Function in RHS. LHS is the xi-th prime number. Since LHS is real without imag) s
5 549 M
(inary part, RHS should also be real though exponent involves imaginary part. There are as many) s
5 538 M
( roots of unity in RHS as there are prime numbers. The radian is taninverse which is semi-dete) s
5 527 M
(rmined assuming RH with Re\(s\) = 0.5.) s
5 505 M
(LHS is multilinear with at most b variables for b bits of the prime number. A striking aspect ) s
5 494 M
(of the above is that Fourier parity function is +1 or -1 and a lot of them might cancel out in) s
5 483 M
( the above summed up polynomial in LHS after substitution and rewriting.) s
5 461 M
(If s is written as a+ic, then \(1\)^\(1/s\) = \(1\)^\(1/a+ic\) = \(1\)^\(\(a-ic\)/\(a^2+c^2\)\)) s
5 439 M
(If RH is true a=0.5 and above becomes, \(1\)^\(\(0.5-ic\)/\(0.25+c^2\)\).) s
5 417 M
(        1+2*fx1\(xi\)+2^2*fx2\(xi\).....+2^b*fxb\(xi\) = \(1\)^\(\(0.5-ic\)/\(0.25+c^2\)\) -----------\(3\)) s
5 395 M
(Thus imaginary part c has one-to-one correspondence to each prime. Non-trivial zeroes are usua) s
5 384 M
(lly found using functional notation of RZF instead of the above - applying Analytic Continuati) s
5 373 M
(on that extends the domain in steps to be exact. ) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(----------------------------------------------) s
5 329 M
(24d. Delving deeper into \(1\) above which equates Riemann Zeta Function with Complement Functio) s
5 318 M
(n Fourier Polynomials substituted in Euler's infinite product \(Hereinafter referred to as Eule) s
5 307 M
(r-Fourier polynomial\) - Pattern in primes from above Euler-Fourier polynomial:) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(----------------------------------------------) s
5 274 M
(Finding pattern in distribution of primes is equivalent to finding pattern in above set of pri) s
5 263 M
(me bit circuits or fourier polynomials for each prime - The family of circuits for primes abov) s
5 252 M
(e has to be mined for circuit DAG subgraph patterns which is more of machine learning than com) s
5 241 M
(plexity \(there is almost no complexity theoretic reference to this aspect\). The set of fourier) s
5 230 M
( polynomials can be mined for linear independence for example. \(1\),\(2\) and \(3\) are multiple wa) s
5 219 M
(ys of expressing same relation between complement function boolean circuit and RZF.) s
5 197 M
(Similar to zeros of RZF, Fourier poynomial obtained from Euler's formula by substituting compl) s
5 186 M
(ement function prime bits fourier polynomials gives a very complex polynomial whose degree cou) s
5 175 M
(ld be d*s in b variables, where d is the maximum degree in prime bit fourier polynomials. In r) s
5 164 M
(andomized setting, Schwartz-Zippel Lemma can be applied for finding an upperbound for number o) s
5 153 M
(f roots of this Fourier-Euler polynomial which is the traditional tool in Polynomial Identity ) s
5 142 M
(Testing. Using the lemma, number of roots of the above polynomial is <= d*s/ |K| where K is th) s
5 131 M
(e random finite subset of b variables in the boolean complement function. If |K| = b, then num) s
5 120 M
(ber of roots is upperbounded by d*s/b.[This is assuming rewriting as \(2\) or \(3\)]. But degree i) s
5 109 M
(s a complex number d*s \(It is not known if there is a Schwartz-Zippel Lemma for complex degree) s
5 98 M
(\).  The roots of this Fourier-Euler polynomial should intuitively correspond to zeros of Riema) s
5 87 M
(nn Zeta Function which probably gives a complexity theoretic expression of Riemann Zeta Functi) s
5 76 M
(on \(than Analytic Number Theoretic\). This implies that there should be complex roots also to t) s
5 65 M
(he Euler-Fourier polynomial which itself is puzzling on what it means to have a complex number) s
5 54 M
( in boolean circuits. ) s
5 32 M
(Important thing to note is that what it means to be a zero of the Euler-Fourier polynomial [\(1) s
5 21 M
(\),\(2\) and \(3\)] which has complex degree variable and also boolean variables within each clause) s
5 10 M
(. RZF just has the s in exponent. Thus Euler-Fourier polynomial is more generic and fine-grain) s
_R
S
%%Page: (25) 25
%%BeginPageSetup
_S
18 36 translate
/pagenum 25 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (25) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ed. But zeroes of this polynomial are both within the multilinear components and the exponents) s
5 681 M
( instead of just in exponent in RZF. This might reveal more pattern than what RH predicts conj) s
5 670 M
(ecturally. Moreover due to non-uniformity each Fourier polynomial component substituted in Eul) s
5 659 M
(er formula for each prime, is different.) s
5 637 M
(Sensitivity and Block sensitity of the above complement function circuit should also have a st) s
5 626 M
(rong relation to prime distribution as sensitivity is the number of input bits or block of bit) s
5 615 M
(s that are to be flipped for change in value of the circuit\(prime bit is the value\) . For each) s
5 604 M
( Fourier polynomial of a prime bit above the sensitivity measure would differ and  the prime d) s
5 593 M
(istribution is proportional to collective sensitivity of all the prime bit circuit Fourier pol) s
5 582 M
(ynomials . Also the degree of approximating Fourier polynomial is lower bounded by sensitivity) s
5 571 M
( \(www.cs.cmu.edu/~odonnell/papers/analysis-survey.pdf\).) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(------) s
5 527 M
(24e. Arithmetic Circuit for Euler Product and RZF - Alternative formulation to Euler-Fourier p) s
5 516 M
(olynomials) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(------) s
5 472 M
(Instead of a boolean circuit above can be an arithmetic circuit \(with * and + gates with eleme) s
5 461 M
(nts of some field as inputs to these\) alternatively which is useful in representing polynomial) s
5 450 M
(s. The division in the above Euler product can be replaced by the transform f/g = f/\(1-\(1-g\)\) ) s
5 439 M
(= f*\(1+\(1-g\)+\(1-g\)^2+...\) by geometric series expansion. This is how division is implemented u) s
5 428 M
(sing powering and hence multiplication in NC circuits. Above Euler product can be represented ) s
5 417 M
(as a depth 3 Pi-Sigma-Pi ----  * for product of each prime clause, + for subtraction within ea) s
5 406 M
(ch clause, * for raising \(1/p\) to power s ---- circuit assuming 1/p. Powering with complex exp) s
5 395 M
(onent s requires representing s as a 2*2 matrix M\(s\) where a and b are real and imaginary part) s
5 384 M
(s of s:) s
5 373 M
(        ) s
5 362 M
(        M\(s\) =  | a  -b|) s
5 351 M
(                | b   a|) s
5 329 M
(Thus p^s can be written as p^M\(s\) with matrix exponent. Rewriting this as e^\(M\(s\) ln p\) and ex) s
5 318 M
(panding as series,) s
5 296 M
(        e^\(M\(s\) ln p\) = 1 + M ln p + M*M lnp^2/2! + ...) s
5 285 M
(and     1 - 1/p^s = 1 - e^\(-M\(s\) ln p\) = 1-\(1-M*ln p+ M*M ln p^2/2! - ...\) = M*ln p - M*M ln p) s
5 274 M
(^2/2! + ... \(alternating +,- terms ad infinitum\) ) s
5 252 M
(Thus each prime clause in the Euler product is written as an infinite summation of 2*2 matrix ) s
5 241 M
(products. Using the transform f/g above division 1/\(1-1/p^s\) for each prime clause in the Eule) s
5 230 M
(r product can be reduced to powering. Product gate at root multiplies all such prime clauses. ) s
5 219 M
(Obviously above circuit is exponential and probably is the lowerbound for this circuit. If the) s
5 208 M
( product is made finite then a non-uniform arithmetic circuit family is created depending on i) s
5 197 M
(nput advice and degree of the above polynomial varies. This is an alternative to Euler-Fourier) s
5 186 M
( polynomial obtained based on complement function boolean circuit. No Fourier polynomial for p) s
5 175 M
(rime bits is used here but prime power as such is input to arithmetic gates.) s
5 153 M
(Instead of Euler formula, circuit for Riemann Zeta Function can be constructed with + gate at ) s
5 142 M
(the root and circuits for n^s \(or e^\(s ln p\)\) computation at the leaves using the above series) s
5 131 M
( expansion.  For first n terms of RZF, the circuit represents the polynomial \(with s replaced ) s
5 120 M
(by the 2*2 matrix for the complex s\):) s
5 109 M
(        RZF\(n\) = n - M\(s\) * \(ln 2 + ln 3 + ...+ ln n\)/1! + M\(s\)^2 * \( ln 2^2 + ln3^2 +...+ lnn) s
5 98 M
(^2\)/2! + ... + M\(s\)^n * \(ln2^n + ...+lnn^n\)/n!) s
5 76 M
(The reason for drawing above arithmetic circuit is to represent the Riemann Zeta Function in c) s
5 65 M
(omplex plane as a circuit that depends on Matrix representation of complex number field\(determ) s
5 54 M
(inant of the matrix is the norm\) and relate the roots of it to non-trivial zeroes of Riemann Z) s
5 43 M
(eta Function. The geometric intuition of Schwartz Zippel lemma is to find the probability of a) s
5 32 M
( point being on this circuit represented polynomial's surface. In the above circuit the variab) s
5 21 M
(le is the Matrix M \(matrix representation for the zero s\). The imaginary part is hidden within) s
5 10 M
( the 2*2 matrices. The degree of above polynomial is n and is univariate in M. Non-uniform Sig) s
_R
S
%%Page: (26) 26
%%BeginPageSetup
_S
18 36 translate
/pagenum 26 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (26) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ma-Pi-Sigma Arithmetic circuit for above restricted version of Riemann Zeta Function can be co) s
5 681 M
(nstructed similar to the above for arbitrary n. ) s
5 659 M
(Using Taylor series expansion and Jordan Normal Form above can be written as a huge square mat) s
5 648 M
(rix.\(http://en.wikipedia.org/wiki/Matrix_function\). Taylor series for a real function f\(x\) = f) s
5 637 M
(\(0\) + f'\(0\)/1! + f''\(0\)/2! + ... and 2*2 matrix for complex zero can be written in Jordan Norm) s
5 626 M
(al Form as XYX^\(-1\) with Y being the Jordan block of diagonal fixed entries and superdiagonal ) s
5 615 M
(1s. Evaluating f\(Y\) with Taylor expansion gives a square matrix. Thus Riemann Zeta Function ha) s
5 604 M
(s a matrix in Jordan Normal Form. Finding zeros of RZF is equivalent to solving system of equa) s
5 593 M
(tions represented as Jordan Nomal Form using Gauss-Jordan Elimination. The matrix is already u) s
5 582 M
(pper triangular and can be equated to zero matrix. ) s
5 560 M
(Eigen values of Chaotic systems Wave modelling Random matrices \(matrix as random variable\) hav) s
5 549 M
(e been shown to have a striking relation to zeros of RZF - Spacing of Random matrix eigenphase) s
5 538 M
(s and RZF zeros have been conjectured to be identical \(Montgomery\). From complexity standpoint) s
5 527 M
(, the characteristic polynomial or the determinant of such Random Matrices can be computed by ) s
5 516 M
(determinant circuits which have polynomial size and polylog depth.) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-) s
5 472 M
(24f. Can be ignored - quite Experimental - Different way to reduce the complex exponent in \(1\)) s
5 461 M
( ) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(-) s
5 428 M
(From \(1\), P\(xi\)^s = 1.) s
5 417 M
(=> P\(xi\) ^ \(k+il\) = 1 where s=k+il) s
5 406 M
(=> P\(xi\)^k * P\(xi\)^\(il\) - 1 = 0) s
5 395 M
( P\(xi\)^k * [cos\(l*ln\(P\(xi\)\)\) + i*sin\(l*ln\(P\(xi\)\)\)] - 1 = 0      -----------------\(4\)) s
5 373 M
(Thus real and imaginary parts can be equated to zero independently as,) s
5 362 M
(        P\(xi\)^k * cos\(l*ln\(P\(xi\)\)\) = 1 ------------------------------------------\(5\)) s
5 340 M
(        P\(xi\)^k * sin\(l*ln\(P\(xi\)\)\) = 0 ------------------------------------------\(6\)) s
5 329 M
(        ) s
5 307 M
(From \(5\) and \(6\), it can be deduced that:) s
5 285 M
(        tan\(l*ln\(P\(xi\)\)\) = 0 ----------------------------------------------------\(7\)) s
5 263 M
(From \(7\), it can be inferred that Re\(s\)=k is not involved and PIT has to be done only on the b) s
5 252 M
(+1 variables \(b bits in primes and the Im\(s\)=l\). This probably points to the fact that for all) s
5 241 M
( primes, the prime distribution is independent of the Re\(s\). Series expansion of \(7\) gives,) s
5 219 M
(        tan\(T\) = T + T^3/3 + 2*T^5/15 + .... = 0  where T = l*ln\(P\(xi\)\) ---------\(8\)) s
5 186 M
(l*ln\(P\(xi\)\) = 0 =>) s
5 175 M
(        l = 0 or ln\(P\(xi\)\) = 0) s
5 164 M
(        P\(xi\) = 1       ) s
5 153 M
(both of which can not hold. ) s
5 131 M
(From \(5\),) s
5 120 M
(        P\(xi\)^k = sec\(l*ln\(P\(xi\)\)\) ----------------------------------------------\(9\)) s
5 98 M
(if T = l*lnP\(xi\), e^\(T/l\) = P\(xi\)) s
5 76 M
(        P\(xi\)^k = e^\(kT/l\) = 1+T^2/2 + 5T^4/24 + 61*T^6/720 + 277T^8/8064 + ... \(expansion of ) s
5 65 M
(sec\)    ---------- \(10\)) s
5 43 M
(        1+kT/l + \(kT/l\)^2/2! + \(kT/l\)^3/3! + .... =     1 + T^2/2 + 5T^4/24 + ....\(expansion o) s
5 32 M
(f e^\(KT/l\)\)  --------\(11\) ) s
_R
S
%%Page: (27) 27
%%BeginPageSetup
_S
18 36 translate
/pagenum 27 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (27) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\(5\) can also be written as,) s
5 670 M
(        ln P\(xi\)^k      =       ln\(sec\(l*ln\(P\(xi\)\)\)) s
5 648 M
(        k       =       ln[sec\(l*ln\(P\(xi\)\)\)] / lnP\(xi\)  --------------------------------------) s
5 637 M
(---------------------\(12\)) s
5 615 M
(By RH k has to be 0.5 irrespective of RHS.) s
5 593 M
(Approximation of l:) s
5 582 M
(-------------------) s
5 571 M
(By assuming k=0.5 and Using series expansion of cos\(x\) - choosing only first two terms, l is a) s
5 560 M
(pproximately,) s
5 538 M
(        P\(xi\) = 1/[cos\(l*lnP\(xi\)\)]^2                    --------------------------------------) s
5 527 M
(---------------------\(13\)) s
5 516 M
(        l = sqrt\(2\)*sqrt\(sqrt\(P\(xi\)\) - 1\) / ln \(P\(xi\)   --------------------------------------) s
5 505 M
(---------------------\(14\)) s
5 483 M
(More on \(7\):) s
5 472 M
(------------) s
5 461 M
(        tan\(l*ln\(P\(xi\)\)\) = 0 implies that l*ln\(P\(xi\)\) = n*pi for some integer n. ) s
5 450 M
(        ln\(P\(xi\)\) = n*pi/l) s
5 439 M
(        P\(xi\) = e^\(n*pi/l\) -------------------------------------------------------------------) s
5 428 M
(---------------------\(15\)) s
5 406 M
(Above equates the Fourier polynomial for xi-th prime in terms of exponent of e with Imaginary ) s
5 395 M
(part l of some RZF zero. It is not necessary that primes have one-one correspondence with zero) s
5 384 M
(s in the same order. All above just imply that it is true for some prime\(and its Fourier polyn) s
5 373 M
(omial\) and some RZF zero that satisfy these identities.) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(---------------) s
5 329 M
(24g. Ramanujan Graphs, Ihara Zeta Function and Riemann Zeta Function and Special case of Compl) s
5 318 M
(ement Function) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(---------------) s
5 285 M
(A graph is Ramanujan graph if it is d-regular and eigen values of its adjacency matrix are sqr) s
5 274 M
(t\(d-1\)*2 or d. Ihara zeta function similar to RZF is a Dirichlet series that is based on prime) s
5 263 M
( cycle lengths of a graph defined as ProductOf\(1/1-q^\(-s*p\)\) where s is a zero and p prime for) s
5 252 M
( a \(q+1\)-regular graph. Thus a reduction is already available from RZF to a graph. The Ihara Z) s
5 241 M
(eta Function satisfies Riemann Hypothesis iff graph is Ramanujan - this follows from Ihara ide) s
5 230 M
(ntity that relates Ihara Zeta Function and the adjacency matrix of a graph. Thus proving above) s
5 219 M
( conjecture for Euler-Fourier polynomial of complement function for primes boolean and arithme) s
5 208 M
(tic circuits family might need this gadget using prime cycles.) s
5 186 M
(If a set of p-regular graphs for all primes is considered,then Riemann Zeta Function can be de) s
5 175 M
(rived \(using Ihara Zeta Function identity\) as a function of product of Ihara Zeta Functions fo) s
5 164 M
(r these graphs and a function of the determinants of adjacency matrices for these graphs divid) s
5 153 M
(ed by an infinite product similar to Euler product with \(1+1/p^s\) clauses instead of \(1-1/p^s\)) s
5 142 M
(. This requires computing product of determinants of a function of adjancency matrices for the) s
5 131 M
(se graphs. A regular connected graph is Ramanujan if and only if it satisfies RH. Zeroes of th) s
5 120 M
(e individual Ihara zeta functions are also zeroes of this product for the set of graphs and he) s
5 109 M
(nce for the RZF. Intuitively the product might imply set of all paths of all possible lengths ) s
5 98 M
(across these graphs. Determinant of the product of adjacent matrices is product of determinant) s
5 87 M
(s of the matrices and equating it to zero yields eigenvalues. All these graphs have same numbe) s
5 76 M
(r of edges and vertices. The eigen values then are of the form sqrt\(q^\(2-2a\)+q^\(2a\)+2q\) were s) s
5 65 M
(=a+ib for each of the regular graphs. The RHS of Ihara Zeta Function can be written as [\(1+1/q) s
5 54 M
(^s\)\(1-1/q^s\)]^[V-E] and the product gives the RZF and the other series mentioned above. Eigen ) s
5 43 M
(values can be atmost q.) s
5 21 M
([If an eigen value is t \(<= q\), then it can be derived that) s
5 10 M
(        q^s = q + \(or\) - sqrt\(q^2 -4t\) / 2) s
_R
S
%%Page: (28) 28
%%BeginPageSetup
_S
18 36 translate
/pagenum 28 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (28) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(where s=a+ib. Setting a=0.5 is creating a contradiction apparently  which is above divided by ) s
5 681 M
(sqrt\(q\) \(while equating real and imaginary parts for q^\(ib\) or e^\(ib*logq\)- needs to be verifi) s
5 670 M
(ed if this kind of derivation is allowed in meromorphic functions\).]) s
5 637 M
(Above and the Informal notes in https://sites.google.com/site/kuja27/RamanujanGraphsRiemannZet) s
5 626 M
(aFunctionAndIharaZetaFunction.pdf?attredirects=0&d=1 can further be simplified as follows to g) s
5 615 M
(et RZF in terms of IZF identity.) s
5 593 M
(Disclaimer: It is not in anyway an attempted proof or disproof of RH as I am not an expert in ) s
5 582 M
(analytical number theory. Hence arguments might be elementary. Following was found serendipito) s
5 571 M
(usly as a surprise while working on special case of circuits for complement function for prime) s
5 560 M
(s and it does not have direct relation to complementation - Fourier polynomial for Complement ) s
5 549 M
(Function generalizes Riemann Hypothesis in a sense. Moreover, Notion of complementing a functi) s
5 538 M
(on is absent in mathematical literature I have searched so far except in mathematical logic. F) s
5 527 M
(ollowing are derived based on Ihara Identity of Ihara Zeta Function.[https://lucatrevisan.word) s
5 516 M
(press.com/2014/08/18/the-riemann-hypothesis-for-graphs/#more-2824] for a prime+1 regular graph) s
5 505 M
(.) s
5 483 M
(\(1\) For some i-th prime+1 regular graph \(i.e q+1 regular graph where qi is prime\),) s
5 472 M
(                        [1+qi^-s]                               1) s
5 461 M
(        -----------------------------------------       = -------------- ) s
5 450 M
(        [zi\(s\)det\(I-A*qi^-s + qi^\(1-2s\)*I]^\(1/|V|-|E|\)       [1-qi^-s]) s
5 417 M
(\(2\) Infinite product of the above terms for all prime+1 regular graphs gives the RZF in right ) s
5 406 M
(in terms of) s
5 395 M
(Ihara Zeta Function Identities product on the left -  The infinite set of prime+1 regular grap) s
5 384 M
(hs relate to) s
5 373 M
(RZF zeros.) s
5 351 M
(\(3\) For non-trivial zeros s=a+ib,RZF in RHS is zero and thus either numerator product is zero ) s
5 340 M
(or denominator product tends to infinity ) s
5 318 M
(\(4\) From Handshake Lemma, it can be derived that a q-regular graph with order n\(=|V| vertices\)) s
5 307 M
( has) s
5 296 M
(q*n/2 edges \(=|E| edges\)) s
5 274 M
(\(5\) If numerator is set to zero in LHS, ) s
5 263 M
(                q^\(a+ib\) = -1) s
5 252 M
(and) s
5 241 M
(                cos\(blogq\) + isin\(blogq\) = -1/q^a which seems to give further contradiction) s
5 219 M
(\(6\) If denominator is set to infinity in LHS,) s
5 208 M
(        [z1*z2*.....det\(\)det\(\)....]^1/|V|-|E| = Inf ) s
5 197 M
(                        \(or\)) s
5 186 M
(        [z1*z2*.....det\(\)det\(\)....]^1/|E|-|V| = 0 ) s
5 164 M
(for some term in the infinite product of LHS which implies that) s
5 153 M
(        [z1*z2*.....det\(\)det\(\)....] = 0 which is described earlier above in the notes. ) s
5 131 M
(\(7\) More derivations of the above are in the notes uploaded in  handwritten preliminary drafts) s
5 120 M
( at: ) s
5 109 M
(        \(7.1\) https://sites.google.com/site/kuja27/RZFAndIZF_25October2014.pdf?attredirects=0&) s
5 98 M
(d=1) s
5 87 M
(        \(7.2\) http://sourceforge.net/p/asfer/code/HEAD/tree/python-src/ComplFunction_DHF_PVsNP) s
5 76 M
(_Misc_Notes.pdf) s
5 65 M
(        ) s
5 54 M
(\(8\) By equating the determinant in \(6\) above to zero, written notes in \(7\) derive values of s=) s
5 43 M
(a+ib for non-Ramanujan prime+1 regular graphs for the expressions in points \(1\) to \(6\) above. ) s
5 32 M
(They seem to suggest that RH is true with elementary complex arithmetic without using any comp) s
5 21 M
(lex analysis, with or without any assumption on the eigenvalue surprisingly - assuming q^s + q) s
5 10 M
(^\(1-s\) = v \(v can be set to any eigenvalue - can be atmost q+1 for the q+1-regular non-ramanuj) s
_R
S
%%Page: (29) 29
%%BeginPageSetup
_S
18 36 translate
/pagenum 29 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (29) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(an graph\) and solving for s=a+ib - gives a=1/2 and thus for both ramanujan and non-ramanujan g) s
5 681 M
(raphs as eigen value becomes irrelevant - needs lot of reviewing - because it implies that gra) s
5 670 M
(ph formulation above of Riemann Hypothesis is true for all prime+1 regular graphs by applying ) s
5 659 M
(Ihara Identity of Ihara Zeta Function and thus Riemann Hypothesis is true. The choice of prime) s
5 648 M
(+1 regularity is just a contrived gadget to equate to Riemann Zeta Function through an infinit) s
5 637 M
(e product. Crucial fact is the independence of eigen value in the previous derivation whenever) s
5 626 M
( the graph regularity is prime+1, thus directly connecting prime numbers and real part of Riem) s
5 615 M
(ann Zeta Function non-trivial zero.) s
5 593 M
(\(9\) Above doesn't look circular also because infinite product of characteristic polynomials - ) s
5 582 M
(determinants - are independent of infinite product of Ihara Zeta Functions preceding them in d) s
5 571 M
(enominator - this happens only when the product z1*z2*... is not zero i.e when the graphs are ) s
5 560 M
(non-ramanujan. The infinite product of determinants of the form det\(I-A\(qi\)^\(-s\)+\(qi\)^\(1-2s\)I\)) s
5 549 M
( when solved for zero do not depend on eigenvalue and s is assumed nowhere. Independence of ei) s
5 538 M
(gen value implies all possible graphs. Further the last step is independent of regularity q to) s
5 527 M
(o. Had it been circular, the eigenvalue for Ramanujan graph should have occurred somewhere in ) s
5 516 M
(the derivation throwing back to square one.) s
5 494 M
(\(10\) Expression in \(1\) for a prime+1 regular graph can also be equated to Euler-Fourier polyno) s
5 483 M
(mial mentioned in \(24c\) per-prime term for each prime+1 regular graph - LHS is a graph while R) s
5 472 M
(HS is a fourier polynomial for boolean circuit for a prime - P\(xi\). Thus pattern in prime poly) s
5 461 M
(nomials in RHS are related to patterns in graphs on left:) s
5 450 M
(                        [1+qi^-s]                               1) s
5 439 M
(        -----------------------------------------       = -------------- ) s
5 428 M
(        [zi\(s\)det\(I-A*qi^-s + qi^\(1-2s\)*I]^\(1/|V|-|E|\)       [1-P\(xi\)^-s]) s
5 406 M
(\(11\) qi can be replaced with Fourier polynomial P\(xi\),and the above becomes:) s
5 395 M
(                [1-P\(xi\)^-2s] = [zi\(s\)det\(I-A*P\(xi\)^-s + P\(xi\)^\(1-2s\)*I]^\(1/|V|-|E|\)) s
5 384 M
(        \(or\)    [1-P\(xi\)^-2s]^\(|V|-|E|\) = [zi\(s\)det\(I-A*P\(xi\)^-s + P\(xi\)^\(1-2s\)*I]) s
5 362 M
(\(12\) LHS of \(11\) can be expanded with binomial series. Thus Euler-Fourier polynomial is coales) s
5 351 M
(ced into Ihara identity to give Euler-Fourier-Ihara polynomial for a prime\(and hence correspon) s
5 340 M
(ding prime+1 regular graph\). Partial Derivatives of the above polynomial look crucial in decip) s
5 329 M
(hering pattern in primes - for example doe\(s\)/doe\(P\(xi\)\). ) s
5 307 M
(\(13\) ACC circuits have support for mod\(m\) gates. Thus a trivial circuit for non-primality is s) s
5 296 M
(et of mod\(i\) circuits - 1,2,3,...,sqrt\(N\) - that output 1 to an OR gate up \(factor gates outpu) s
5 285 M
(t 1\). This non-primality circuit is equivalent to complement of complement function circuit fo) s
5 274 M
(r xy=z described previously \(and it can be stated in its dual form also\).) s
5 252 M
(\(14\) The Fourier polynomial of a prime P\(xi\) is holographic in the sense that it has informati) s
5 241 M
(on of all primes due to the multiplexor construction.) s
5 219 M
(\(15\) Without any assumption on Ihara and Riemann Zeta Functions, for any \(q+1\)-regular graph f) s
5 208 M
(or prime q, just solving for eigenvalue in det[-[A - I*\(q^s + q^\(1-s\)\)]] to get Real\(s\) = 0.5 ) s
5 197 M
(looks like an independent identity in itself where A is adj matrix of graph. It neither requir) s
5 186 M
(es Riemann Zeta Function nor Ihara Zeta Function to arrive at Real\(s\)=0.5.) s
5 164 M
(\(16\) In \(15\), even the fact that q has to be prime is redundant.  Just solving for q^s + q^\(1-) s
5 153 M
(s\) = some_eigen_value gives Real\(s\)=0.5. In such a scenario what the set {Imaginary\(s\)} contai) s
5 142 M
(ns is quite non-trivial. It need not be same as {Imaginary\(RZF_zero\)}.) s
5 120 M
(\(17\) Assuming Real\(s\)=0.5 from 7.1 and 7.2, it can be derived with a little more steps that ei) s
5 109 M
(gen_value = 2*sqrt\(q\)*cos\(b*log\(q\)\) - eigen value depends only on imaginary\(s\) and regularity.) s
5 87 M
(\(18\) It is not known if {Imaginary\(RZF_zero\)} = {Imaginary\(s\)}. If not equal this presents a t) s
5 76 M
(otally different problem than RZF and could be a disjoint_set/overlap/superset of RZF zeroes.) s
5 54 M
(\(19\) Maximum eigen value of \(q+1\)-regular graph is \(q+1\) and the infinite set {Imaginary\(s\)} c) s
5 43 M
(an be derived from eigen_value=2*sqrt\(q\)*cos\(b*log\(q\)\) in \(17\) for infinite set of \(q+1\)-regul) s
5 32 M
(ar graphs.) s
5 10 M
(\(20\) An experimental python function to iterate through all {Imaginary\(s\)} mentioned in \(19\) s) s
_R
S
%%Page: (30) 30
%%BeginPageSetup
_S
18 36 translate
/pagenum 30 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (30) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(upra has been included in complement.py. Because of the restriction that cos\(\) is in [-1,1], e) s
5 681 M
(igen_value <= 2*sqrt\(q\) which has a trivial value of q=1 when eigen_value=q+1.) s
5 659 M
(\(21\) \(SOME EXPERIMENTATION ON DISTRIBUTION OF PRIMES\) List of primes read by complement.py is ) s
5 648 M
(downloaded from https://primes.utm.edu/lists/. IharaIdentity\(\) function in complement.py evalu) s
5 637 M
(ates Imaginary\(s\)=b=arccos\(v/\(2*sqrt\(q\)\)\)/log\(q\) by incrementing v by small steps in a loop ti) s
5 626 M
(ll it equals 2*sqrt\(q\). This allows v to be in the range [0,2*sqrt\(q\)] whereas Ramanujan graph) s
5 615 M
(s require it to be 2*sqrt\(q-1\) or q. Hence non-ramanujan graphs are also allowed. Logs in test) s
5 604 M
(logs/ print all Imaginary\(s\) iterations of this eigenvalues for all 10000 primes. arccos\(\) fun) s
5 593 M
(ction returns radians which is a cyclic measure and hence can take x+2*y*pi where y=0,1,2,3,4,) s
5 582 M
(5,6,... which could be arbitrarily large infinite set. Logs print only x with y=0 and not all ) s
5 571 M
(cycles. Prima facie visual comparison shows this set to be different from Imaginary\(RZF\) for x) s
5 560 M
( alone which could be inaccurate. Sifting through all cycles and verifying if these are indeed) s
5 549 M
( Im\(\) parts of RZF might be an arduous task and could be undecidable too because two infinite ) s
5 538 M
(sets have to be compared for equality. But theoretically the Re\(\) part of \(2\) which is infinit) s
5 527 M
(e product of \(1\) equivalent to Riemann Zeta Function is 0.5 for all while Im\(\) part is computa) s
5 516 M
(tionally intensive. Crucial evidence that comes out of it is the possibility of cyclic values ) s
5 505 M
(of radians in b=arccos\(v/\(2*sqrt\(q\)\)/log\(q\) which implies a fixed \(prime, eigenvalue\) ordered ) s
5 494 M
(tuple correspond to infinitely many b\(s\) \(Im\(\) parts\). Thus 2*sqrt\(q\)*cos\(b*log\(q\)\) = eigen_va) s
5 483 M
(lue is a generating function mining pattern in distribution of primes. Rephrasing, b has gener) s
5 472 M
(ating function: b <= \(x + 2*y*pi\)/logq, where 0 <= x <= pi/2. SequenceMining.py also has been ) s
5 461 M
(applied to binary representation of first 10000 prime numbers \(Commit Notes 273 below\) which i) s
5 450 M
(s learning theory way of finding patterns in distribution in primes. Logs for the most frequen) s
5 439 M
(t sequences in prime strings in binary have been committed in testlogs/. These binary sequence) s
5 428 M
(s mined from first 10000 primes have been plotted in decimal with R+rpy2 function plotter. Fun) s
5 417 M
(ction plot in decimal shows sinusoidal patterns in mined sequences with periodic peaks and dip) s
5 406 M
(s as the length of sequence increases i.e the mined sequences in prime binary strings periodic) s
5 395 M
(ally have leftmost bits set to 1 and rightmost bits set to 1 and viceversa which causes decima) s
5 384 M
(ls to vacillate significantly. Primes are not regular and context-free languages which are kno) s
5 373 M
(wn from formal languages theory. The function doing complementation in complement.py can be tr) s
5 362 M
(anslated to Turing Machine by programming languages Brainfuck and Laconic which is equivalent ) s
5 351 M
(to a lambda function for complement.) s
5 329 M
(----------------------------------------------------) s
5 318 M
(24h. PAC Learning and Complement Function Construction) s
5 307 M
(----------------------------------------------------) s
5 296 M
(Complement Boolean Function construction described in http://arxiv.org/abs/1106.4102 is in a w) s
5 285 M
(ay an example of PAC learnt Boolean Function - it is rather C Learnt \(Correct Learning\) becaus) s
5 274 M
(e there is no probability or approximation. Complement Boolean Function can be PAC learnt \(wit) s
5 263 M
(h upperbounded error\) as follows:) s
5 252 M
(        - There are two datasets - dataset1 of size 2^n of consecutive integers and dataset2 o) s
5 241 M
(f first n-bit prime numbers of size 2^n ) s
5 230 M
(        - Each element of dataset1 is mapped to i-th bit of the corresponding prime number ele) s
5 219 M
(ment in the dataset2. Boolean Conjunction is learnt for each of the i mappings \(PAC Learning A) s
5 208 M
(lgorithm: http://www.cis.temple.edu/~giorgio/cis587/readings/pac.html\).) s
5 197 M
(        - Above step gives n probabilistic, approximate, correct learnt boolean conjunctions f) s
5 186 M
(or each bit of all the 2^n prime numbers.) s
5 175 M
(        - An example PAC Boolean Conjunction Learner is at: http://sourceforge.net/p/asfer/cod) s
5 164 M
(e/HEAD/tree/python-src/PACLearning.py) s
5 142 M
(---------------------------------------------------------------------------------) s
5 131 M
(24i. Star Complexity and Complement Function Circuit Lowerbound \(related to 198\)) s
5 120 M
(---------------------------------------------------------------------------------) s
5 109 M
(Star Complexity of a Boolean Circuit is the minimum number of AND and OR gates required in mon) s
5 98 M
(otone circuit graph. Size lowerbound for Complement Function circuit can thus be lowerbounded ) s
5 87 M
(by Strong Magnification Lemma \(Stasys Jukna - http://www.thi.informatik.uni-frankfurt.de/~jukn) s
5 76 M
(a/ftp/graph-compl.pdf\) - Size\(ComplementCircuit\) >= Star\(ComplementCircuitGraph\) - \(2 + o\(1\)\)*) s
5 65 M
(n . Mapping from Boolean Circuit to Graph is done through a bipartite graph gadget wherein a b) s
5 54 M
(oolean variable x\(v1,v2\) iff there is an edge from v1 to v2 in the bipartite graph and replaci) s
5 43 M
(ng each boolean literal by an OR of two new variables. Star Complexity views Boolean Circuits ) s
5 32 M
(as a graph and for most graphs it is Omega\(n^2/logn\). Obtaining Size Lowerbounds for arbitrary) s
5 21 M
( complement functions is non-trivial.) s
_R
S
%%Page: (31) 31
%%BeginPageSetup
_S
18 36 translate
/pagenum 31 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (31) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------) s
5 681 M
(24j. Additional references:) s
5 670 M
(----------------------------) s
5 659 M
(24.1 Google groups thread reference 2003 \(OP done by self\): https://groups.google.com/forum/#!) s
5 648 M
(search/ka_shrinivaasan%7Csort:relevance%7Cspell:false/sci.math/RqsDNc6SBdk/Lgc0wLiFhTMJ) s
5 637 M
(24.2 Math StackExchange thread 2013: http://math.stackexchange.com/questions/293383/complement) s
5 626 M
(-of-a-function-f-2n-n-in-mathbbn-0-n-rightarrow-n1) s
5 615 M
(24.3 Theory of Negation - http://mentalmodels.princeton.edu/skhemlani/portfolio/negation-theor) s
5 604 M
(y/ and a quoted excerpt from it :) s
5 593 M
("... The principle of negative meaning: negation is a function that takes a single argument, w) s
5 582 M
(hich is a set of fully explicit models of possibilities, and in its core meaning this function) s
5 571 M
( returns the complement of the set...") s
5 560 M
(24.4 Boolean Complementation [0 or 1 as range and domain] is a special case of Complement Func) s
5 549 M
(tion above \(DeMorgan theorem - http://www.ctp.bilkent.edu.tr/~yavuz/BOOLEEAN.html\)) s
5 538 M
(24.5 Interpolation - http://caig.cs.nctu.edu.tw/course/NM07S/slides/chap3_1.pdf ) s
5 527 M
(24.6 Formal Concept Analysis - http://en.wikipedia.org/wiki/Formal_concept_analysis, http://ij) s
5 516 M
(cai.org/papers11/Papers/IJCAI11-227.pdf) s
5 505 M
(24.7 Prime generating polynomials - http://en.wikipedia.org/wiki/Formula_for_primes) s
5 494 M
(24.8 Patterns in primes - every even number > 2 is sum of 2 primes - Goldbach conjecture : htt) s
5 483 M
(p://en.wikipedia.org/wiki/Goldbach%27s_conjecture) s
5 472 M
(24.9 Arbitrarily Long Arithmetic progressions - Green-Tao theorem: http://en.wikipedia.org/wik) s
5 461 M
(i/Green%E2%80%93Tao_theorem) s
5 450 M
(24.10 Prime generating functions - https://www.sonoma.edu/math/colloq/primes_sonoma_state_9_24) s
5 439 M
(_08.pdf) s
5 428 M
(24.11 Hardness of Minimizing and Learning DNF Expressions - https://cs.nyu.edu/~khot/papers/mi) s
5 417 M
(nDNF.pdf) s
5 406 M
(24.12 DNF Minimization - http://users.cms.caltech.edu/~umans/papers/BU07.pdf) s
5 395 M
(24.13 DNF Minimization - http://www.cs.toronto.edu/~toni/Papers/mindnf.pdf) s
5 384 M
(24.14 Riemann Zeta Function Hypothesis - all non-trivial\(complex\) zeroes of RZF have Re\(z\) = 0) s
5 373 M
(.5 - http://en.wikipedia.org/wiki/Riemann_hypothesis. ) s
5 362 M
(24.15 Frequent Subgraph Mining - http://research.microsoft.com/pubs/173864/icde08gsearch.pdf) s
5 351 M
(24.16 Frequent Subgraph Mining - http://glaros.dtc.umn.edu/gkhome/fetch/papers/sigramDMKD05.pd) s
5 340 M
(f) s
5 329 M
(24.17 Roots of polynomials - Beauty of Roots - http://www.math.ucr.edu/home/baez/roots/) s
5 318 M
(24.18 Circuit lowerbounds \(Gate Elimination, Nechiporuk, Krapchenko, etc\) - http://cs.brown.ed) s
5 307 M
(u/~jes/book/pdfs/ModelsOfComputation_Chapter9.pdf) s
5 296 M
(24.19 Schwartz-Zippel Lemma for Polynomial Identity Testing - http://en.wikipedia.org/wiki/Sch) s
5 285 M
(wartz%E2%80%93Zippel_lemma) s
5 274 M
(24.20 Schwartz-Zippel Lemma for PIT of multilinear polynomials - http://www.cs.huji.ac.il/~noa) s
5 263 M
(m/degree.ps) s
5 252 M
(24.21 Analysis of Boolean Functions - http://analysisofbooleanfunctions.org/) s
5 241 M
(24.22 Riemann-Siegel Formula for computation of zeros - http://numbers.computation.free.fr/Con) s
5 230 M
(stants/Miscellaneous/zetaevaluations.html) s
5 219 M
(24.23 RZF zeros computation - http://math.stackexchange.com/questions/134362/calculating-the-z) s
5 208 M
(eroes-of-the-riemann-zeta-function ) s
5 197 M
(24.24 Online Encyclopedia of Integer Sequences for Prime numbers - all theorems and articles r) s
5 186 M
(elated to primes - https://oeis.org/search?q=2%2C3%2C5%2C7%2C11%2C13%2C17%2C19%2C23%2C29%2C31%) s
5 175 M
(2C37%2C41%2C43%2C47%2C&language=english&go=Search) s
5 164 M
(24.25 Intuitive proof of Schwartz-Zippel lemma - http://rjlipton.wordpress.com/2009/11/30/the-) s
5 153 M
(curious-history-of-the-schwartz-zippel-lemma/) s
5 142 M
(24.26 Random Matrices and RZF zeros - http://www.maths.bris.ac.uk/~majpk/papers/67.pdf) s
5 131 M
(24.27 Circuit for determinant - S. J. Berkowitz. On computing the determinant in small paralle) s
5 120 M
(l time using a small number of processors. Inf. Prod. Letters 18, pp. 147\342\\200\\223150, 1984.) s
5 109 M
(24.28 Mangoldt Function, Ihara Zeta Function, Ramanujan Graphs - http://lucatrevisan.wordpress) s
5 98 M
(.com/2014/08/18/the-riemann-hypothesis-for-graphs/#more-2824) s
5 87 M
(24.29 Multiplicity of an eigen value in k-regular graph - http://math.stackexchange.com/questi) s
5 76 M
(ons/255334/the-number-of-connected-components-of-a-k-regular-graph-equals-the-multiplicit) s
5 65 M
(24.30 PAC Learning - http://www.cis.temple.edu/~giorgio/cis587/readings/pac.html) s
5 54 M
(24.31 Pattern in Prime Digits - [Oliver-Kannan Soundarrajan] - http://arxiv.org/abs/1603.03720) s
5 43 M
( - Prime numbers which are juxtaposed avoid ending in same digit. This has direct bearing on F) s
5 32 M
(ourier polynomial of prime complement function and Euler-Fourier polynomial derived above whic) s
5 21 M
(h is binary representation of a prime and a special case of function complementation. If decim) s
5 10 M
(al representation of adjacent primes is repulsive in last digit, then last binary bits \(LSB\) o) s
_R
S
%%Page: (32) 32
%%BeginPageSetup
_S
18 36 translate
/pagenum 32 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (32) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(utput by the complement circuit should be too.) s
5 681 M
(24.32 Pattern in Prime Digits - http://www.nature.com/news/peculiar-pattern-found-in-random-pr) s
5 670 M
(ime-numbers-1.19550 - above with assumption of Hardy-Littlewood k-tuple conjecture a generaliz) s
5 659 M
(ation of twin primes conjecture to all prime constellations.) s
5 648 M
(24.33 Pattern in Primes - Ulam's Spiral - [Stainslaw Ulam] - https://www.alpertron.com.ar/ULAM) s
5 637 M
(.HTM - Prime numbers are clustered along diagonals of anticlockwise spiral of integers 1,2,3,4) s
5 626 M
(,5,6,... ad infinitum.) s
5 615 M
(24.34 Theory of Negation \(Broken URL in 24.3 updated\) - http://mentalmodels.princeton.edu/pape) s
5 604 M
(rs/2012negation.pdf) s
5 593 M
(24.35 Prime Number Theorem - n-th prime is ~ O\(nlogn\)) s
5 582 M
(24.36 Riemann Hypothesis prediction of prime distribution - Integral_2_p\(n\)_[dt/logt] = n + O\() s
5 571 M
(sqrt\(n\(logn\)^3\)) s
5 560 M
(24.37 Brainfuck Turing Machine Compiler - https://esolangs.org/wiki/Brainfuck) s
5 549 M
(24.38 Laconic Turing Machine Compiler - https://esolangs.org/wiki/Laconic) s
5 538 M
(24.39 Circuit Complexity Lowerbound for Explicit Boolean Functions - http://logic.pdmi.ras.ru/) s
5 527 M
(~kulikov/papers/2011_3n_lower_bound_mfcs.pdf - 3n  - o\(n\)) s
5 516 M
(24.40 Star Complexity of Boolean Function Circuit - [Stasys Jukna] - http://www.thi.informatik) s
5 505 M
(.uni-frankfurt.de/~jukna/ftp/graph-compl.pdf) s
5 494 M
(24.41 Random Matrices, RZF zeroes and Quantum Mechanics - https://www.ias.edu/ideas/2013/prime) s
5 483 M
(s-random-matrices) s
5 472 M
(24.42 Jones-Sato-Wada-Wiens Theorem - Polynomial of 25 degree-26 variables for Prime Diophanti) s
5 461 M
(ne set - http://www.math.ualberta.ca/~wiens/home%20page/pubs/diophantine.pdf) s
5 450 M
(24.43 Energy levels of Erbium Nuclei and zeros of Riemann Zeta Function - http://seedmagazine.) s
5 439 M
(com/content/article/prime_numbers_get_hitched/) s
5 417 M
(##############################################################################################) s
5 406 M
(#################################################) s
5 373 M
(25. \(FEATURE - DONE\) Approximating with some probability distribution - Gaussian, Binomial etc) s
5 362 M
(., that model the probability of occurence of a datapoint in the set. Kullback-Leibler Diverge) s
5 351 M
(nce python implementation which computes distance in terms of amount of bits between two proba) s
5 340 M
(bility distribution has been added to python-src/. Minimum of the distance for different stand) s
5 329 M
(ard distributions with a dataset is the closest distribution approximation for the dataset.) s
5 307 M
(\(FEATURE - DONE\) 26. Streaming algorithms - Finding Frequency moments, Heavy Hitters\(most prom) s
5 296 M
(inent items\), Distinct Elements etc., in the numerical dataset. Usually numerical data occur i) s
5 285 M
(n streams making these best choice for mining numerical data. ) s
5 274 M
(\(FEATURE - DONE\) 26.1 Implementation of LogLog and HyperLogLog Counter\(cardinality - distinct ) s
5 263 M
(elements in streamed multiset\), CountMinSketch-CountMeanMinSketch \(Frequencies and heavy hitte) s
5 252 M
(rs\) and Bloom Filters\(membership\)) s
5 241 M
(\(FEATURE - DONE\) 26.2 Parser and non-text file Storage framework for Realtime Streaming Data -) s
5 230 M
( Hive, HBase, Cassandra, Spark and Pig Scripts and Clients for Storage Backends have been impl) s
5 219 M
(emented. The Storage is abstracted by a generator - architecture diagram at: http://sourceforg) s
5 208 M
(e.net/p/asfer/code/HEAD/tree/asfer-docs/BigDataStorageAbstractionInAsFer.jpg) s
5 197 M
(\(FEATURE - DONE\) 26.3 Python scripts for Stock Quotes Data and Twitter tweets stream search da) s
5 186 M
(ta for a query.) s
5 175 M
(-------------) s
5 164 M
(References:) s
5 153 M
(-------------) s
5 142 M
(26.4 https://gist.github.com/debasishg/8172796 ) s
5 120 M
(27. \(FEATURE - DONE\) Usual Probabilistic Measures of Mean, Median, Curve fitting on the numeri) s
5 109 M
(c data. Python+RPy2+R implementation wrapper has been added to repository \(python-src/Norms_an) s
5 98 M
(d_Basic_Statistics.py\)) s
5 76 M
(28. \(FEATURE - DONE - using python, R+rpy2\) Application of Discrete Fourier Transform\(using R\)) s
5 65 M
(, LOESS\(using R\), Linear Polynomial Approximate Interpolation\(using R\), Logistic Regression an) s
5 54 M
(d Gradient Descent) s
5 32 M
(29. \(FEATURE - DONE\) Least Squares Method on datapoints y\(i\)s for some x\(i\)s such that f\(x\)~y ) s
5 21 M
(needs to be found. Computation of L0, L1 and L2 norms. Python+RPy2+R implementation wrapper ha) s
5 10 M
(s been added to repository \(python-src/Norms_and_Basic_Statistics.py\)) s
_R
S
%%Page: (33) 33
%%BeginPageSetup
_S
18 36 translate
/pagenum 33 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (33) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(\(FEATURE - DONE\)30. K-Means and kNN Clustering\(if necessary and some training data is availabl) s
5 670 M
(e\) - unsupervised and supervised clustering based on coordinates of the numerical dataset) s
5 648 M
(31. \(FEATURE - DONE\) Discrete Hyperbolic Factorization - Author has been working on a factoriz) s
5 637 M
(ation algorithm with elementary proof based on discretization of a hyperbola since 2000 and th) s
5 626 M
(ere seems to be some headway recently in 2013. To confirm the polylog correctness, a minimal i) s
5 615 M
(mplementation of Discrete Hyperbolic Factorization \(and could be even less than polylog due to) s
5 604 M
( a weird upperbound obtained using stirling formula\) has been added to AstroInfer repository a) s
5 593 M
(t: http://sourceforge.net/p/asfer/code/HEAD/tree/cpp-src/miscellaneous/DiscreteHyperbolicFacto) s
5 582 M
(rizationUpperbound.cpp with factors output logs.) s
5 560 M
(32. \(FEATURE - DONE\) Multiple versions of Discrete Hyperbolic Factorization algorithms have be) s
5 549 M
(en uploaded as drafts in https://sites.google.com/site/kuja27:) s
5 538 M
(         32.1\) http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicFactorizati) s
5 527 M
(on_UpperboundDerivedWithStirlingFormula_2013-09-10.pdf/download and ) s
5 516 M
(         32.2\) http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarit) s
5 505 M
(hmicSieveForIntegerFactorization_updated_rectangular_interpolation_search_and_StirlingFormula_) s
5 494 M
(Upperbound.pdf/download\(and multiple versions due to various possible algorithms for search an) s
5 483 M
(d upperbound technique used\) ) s
5 450 M
(33. \(DONE\) NC PRAM version of Discrete Hyperbolic Factorization:) s
5 439 M
(        33.1\) An updated NC PRAM version of Discrete Hyperbolic Factorization has been uploade) s
5 428 M
(d at:) s
5 417 M
(http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveForInt) s
5 406 M
(egerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound.pdf/download that does PRAM ) s
5 395 M
(k-merge of discrete tiles in logarithmic time before binary search on merged tile.) s
5 373 M
(        33.2\) Preliminary Design notes for CRCW PRAM implementation of the above is added to r) s
5 362 M
(epository at: http://sourceforge.net/p/asfer/code/237/tree/ImplementationDesignNotesForDiscret) s
5 351 M
(eHyperbolicFactorizationInPRAM.jpg. This adds a tile_id to each tile so that during binary sea) s
5 340 M
(rch, the factors are correctly found since coordinate info gets shuffled after k-tile merge.) s
5 307 M
(34. \(FEATURE - DONE\) An updated draft version of PRAM NC algorithm for Discrete Hyperbolic Fac) s
5 296 M
(torization has been uploaded - with a new section for Parallel RAM to NC reduction, disambigua) s
5 285 M
(tion on input size \(N and not logN is the input size for ANSV algorithm and yet is in NC - in ) s
5 274 M
(NC2 to be exact - \(logN\)^2 time and polynomial in N PRAM processors - NC circuit depth transla) s
5 263 M
(tes to PRAM time and NC circuit size to number of PRAMs\):) s
5 252 M
(        34.1 LaTeX - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolyl) s
5 241 M
(ogarithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updated) s
5 230 M
(draft.tex/download) s
5 208 M
(        34.2 PDF - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylog) s
5 197 M
(arithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddr) s
5 186 M
(aft.pdf/download) s
5 164 M
(---------------------) s
5 153 M
(Additional references:) s
5 142 M
(---------------------) s
5 131 M
(        34.3 Above PRAM k-merge algorithm implies Factorization is in NC, a far more audacious) s
5 120 M
( claim than Factorization in P. It has been disputed if PRAM is indeed in NC because of input ) s
5 109 M
(size being N and not logN. But there have been insurmountable evidences so far which all point) s
5 98 M
( to PRAM model being equivalent to NC circuits in certain conditions and NC circuit nodes can ) s
5 87 M
(simulate PRAM with polylog upperbound on number of bits [HooverGreenlawRuzzo]- https://homes.c) s
5 76 M
(s.washington.edu/~ruzzo/papers/limits.pdf . References for this are in LaTex and PDF links pre) s
5 65 M
(viously and also mentioned below in "Additional References") s
5 43 M
(        34.4\) \(IMPORTANT OPTIMIZATION OVER 34.1, 34.2 ABOVE\) Instead of [BerkmanSchieberVishki) s
5 32 M
(n] an O\(logloglogN\) algorithm can be used described in \(since the numbers in tiles are within ) s
5 21 M
(a known range - 1 to N - for factorization of N in discretized tesselated hyperbolic arc\) - Tr) s
5 10 M
(iply-Logarithmic Parallel Upper and Lower Bounds for Minimum and Range Minima over Small Domai) s
_R
S
%%Page: (34) 34
%%BeginPageSetup
_S
18 36 translate
/pagenum 34 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (34) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ns \(Omer Berkman, Yossi Matias, Prabhakar Ragde\) - 1998 - http://www.sciencedirect.com/science) s
5 681 M
(/article/pii/S0196677497909056. This algorithm internally applies [BerkmanSchieberVishkin] but) s
5 670 M
( lemmas 2.3 and 3.1 mentioned in [BerkmanMatiasPrabhakar] preprocess the input within a known ) s
5 659 M
(domain [1..N]. This takes O\(logloglogN\) time using \(logN\)^3/logloglogN processors for each mer) s
5 648 M
(ging problem and O\(logloglogN\) time using N/logloglogN processors overall. This algorithm can ) s
5 637 M
(therefore supersede 34.1 and 34.2.) s
5 615 M
(        34.5\) Randomized Algorithms ,Rajeev Motwani and Prabhakar Raghavan, Chapter 12 on Dist) s
5 604 M
(ributed and Parallel Algorithms, also describes input size and randomized algorithms for Paral) s
5 593 M
(lel sort - Definition 12.1 of NC \(Page 336\) - "NC consists of languages that have PRAM algorit) s
5 582 M
(hms with O\(logN\) time and O\(N^k\) PRAM processors".) s
5 560 M
(        34.6\) Also an alternative merge algorithm in constant depth polysize circuit described) s
5 549 M
( in Chandra-Stockmeyer-Vishkin [http://cstheory.com/stockmeyer@sbcglobal.net/csv.pdf] can be a) s
5 538 M
(pplied \(but it is for merging two lists of m, m-bit numbers where as the above factorization n) s
5 527 M
(eeds merging two lists of O\(m\), log\(m\)-bit numbers\)) s
5 505 M
(        34.7\) [RichardKarp-VijayaRamachandran] define the inclusion of PRAM models in NC in pa) s
5 494 M
(ge 29 of http://digitalassets.lib.berkeley.edu/techreports/ucb/text/CSD-88-408.pdf - NCk in ER) s
5 483 M
(EWk in CREWk in CRCWk=ACk in NC\(k+1\). [KarpRamachandran] cite [HooverKlawePippenger] - Boundin) s
5 472 M
(g Fanout in Logical Networks - http://dl.acm.org/citation.cfm?id=322412 - for this inclusion. ) s
5 461 M
(Thus references for PRAM=NC imply All Nearest Smaller Values \(ANSV\) CRCW PRAM algorithm [Berkm) s
5 450 M
(anSchieberVishkin] is also in NC counterintuitively despite the input size being N=n \(and not ) s
5 439 M
(logN\).) s
5 417 M
(        34.8\) Parallel RAM survey - http://www.cs.utoronto.ca/~faith/PRAMsurvey.ps) s
5 395 M
(        34.9\) Related: Quantum Search using Grover Algorithm over unsorted lists can be done i) s
5 384 M
(n O\(sqrt\(N\)\) - https://en.wikipedia.org/wiki/Grover's_algorithm. This is another counterintuit) s
5 373 M
(ive fact that a quantum search on unsorted lists is slower than ANSV Parallel RAM algorithm.) s
5 351 M
(        34.10\) Recent Advances in All Nearest Smaller Values algorithms:) s
5 340 M
(                34.10.1\) ANSV in hypercube - Kravets and Plaxton - http://www.cs.utexas.edu/~p) s
5 329 M
(laxton/pubs/1996/ieee_tpds.ps) s
5 318 M
(                34.10.2\) ANSV lowerbound - Katajainen - http://www.diku.dk/~jyrki/Paper/CATS96) s
5 307 M
(.ps - omega\(n\) processors with omega\(logn\) time) s
5 296 M
(                34.10.3\) ANSV in BSP machines - Chun Hsi Huang - http://www.cse.buffalo.edu/te) s
5 285 M
(ch-reports/2001-06.ps) s
5 274 M
(        ) s
5 263 M
(        34.11\) The crucial fact in the above is not the practicality of having order of n para) s
5 252 M
(llel processors with RAM to get the logarithmic time lowerbound \(which looks costly in number ) s
5 241 M
(of PRAMs wise\), but the equivalence of PRAM to NC which is theoretically allowed despite input) s
5 230 M
( size being n instead of logn \(because each PRAM cell mapped to a circuit element can have pol) s
5 219 M
(ylogn bits and polyn such PRAMs are allowed\) which is sufficient for Discrete Hyperbolic Facto) s
5 208 M
(rization to be in NC.) s
5 186 M
(        34.12\) Rsync - PhD thesis - chapters on external and internal sorting - https://www.sa) s
5 175 M
(mba.org/~tridge/phd_thesis.pdf) s
5 153 M
(        34.13\) Handbook of Parallel Computing - [SanguthevarRajasekaran-JohnReif] - http://www) s
5 142 M
(.engr.uconn.edu/~rajasek/HandbookParallelComp.pdf,  https://books.google.co.in/books?id=OF9hk4) s
5 131 M
(oC6FIC&pg=PA179&lpg=PA179&dq=PRAM+NC+equivalence&source=bl&ots=LpYceSocLO&sig=GtslRh1I1AveOLo0) s
5 120 M
(kTylSzyDd48&hl=en&sa=X&ved=0ahUKEwi_1OfmuKbJAhUCHY4KHTpdAfoQ6AEISTAI#v=onepage&q=PRAM%20NC%20e) s
5 109 M
(quivalence&f=false) s
5 87 M
(        34.14\) [Eric Allender] - NC^1 and EREW PRAM - March 1990 - https://groups.google.com/f) s
5 76 M
(orum/#!topic/comp.theory/0a5Y_DSkOao - "... Since NC^1 is contained in DLOG, and many people s) s
5 65 M
(uspect that the containment is proper, it seems unlikely that NC^1 corresponds to log time on ) s
5 54 M
(an EREW PRAM ..." - contradicts 34.7.) s
5 32 M
(        34.15\) Efficient and Highly Parallel Computation - [JeffreyFinkelstein] - https://cs-p) s
5 21 M
(eople.bu.edu/jeffreyf/static/pdf/parallel.pdf - "... NC represents the class of languages deci) s
5 10 M
(dable by a CREW PRAM with a polynomial number of processors running in polylogarithmic paralle) s
_R
S
%%Page: (35) 35
%%BeginPageSetup
_S
18 36 translate
/pagenum 35 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (35) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(l time. Languages in NC are considered highly parallel ...".  [Berkman-Schieber-Vishkin] algor) s
5 681 M
(ithm - www.umiacs.umd.edu/users/vishkin/PUBLICATIONS/ansv.ps - for ANSV is for both CREW PRAM ) s
5 670 M
(of O\(logn, n/logn\) and CRCW PRAM of O\(loglogn, n/loglogn\) and thus former is in NC.) s
5 648 M
(        34.16\) There is a commercially available Parallel CRCW RAM chip implementation by NVID) s
5 637 M
(IA CUDA GPUs - http://developer.nvidia.com/cuda and XMT research project - www.umiacs.umd.edu/) s
5 626 M
(users/vishkin/XMT/ but not for CREW PRAM which is a limitation of implementing All Nearest Sma) s
5 615 M
(ller Values PRAM merge for discretized hyperbolic arc and doing a benchmark.) s
5 593 M
(        34.17\) StackExchange thread on Consequences of Factorization in P - http://cstheory.st) s
5 582 M
(ackexchange.com/questions/5096/consequences-of-factoring-being-in-p . Factorization in P is un) s
5 571 M
(likely to have any significant effect on existing class containments, though practical ecommer) s
5 560 M
(ce becomes less secure.) s
5 538 M
(        34.18\) What happened to PRAM - http://blog.computationalcomplexity.org/2005/04/what-ha) s
5 527 M
(ppened-to-pram.html - Quoted excerpts from comments - "... I don't understand why some CS theo) s
5 516 M
(ry people apologize for the PRAM. NC is robust and interesting as a complexity class, and an e) s
5 505 M
(asy way to show that a problem is in NC is to give a PRAM algorithm. That's all the argument I) s
5 494 M
( need for the PRAM's existence. And yes, I've heard all of the arguments about why the PRAM is) s
5 483 M
( completely unrealistic ...") s
5 461 M
(        34.19\) [Page 29 - HooverGreenlawRuzzo] - "... but there is no a priori upper bound on ) s
5 450 M
(the fanout of a gate. Hoover, Klawe, and Pippenger show that conversion to bounded fanout enta) s
5 439 M
(ils at most a constant factor increase in either size or depth [160]...") s
5 417 M
(        34.20\) \(DONE-BITONIC SORT IMPLEMENTATION\) In the absence of PRAM implementation, NC Bi) s
5 406 M
(tonic Sort has been invoked as a suitable alternative in parallel tile merge sort step of Para) s
5 395 M
(llel Discrete Hyperbolic Factorization Implementation. Commit Notes 261-264 and 265-271 below ) s
5 384 M
(have details on this. Bitonic Sort on SparkCloud requires O\(\(logn\)^2\) time with O\(n^2logn\) par) s
5 373 M
(allel comparators \(which simulate PRAM but comparators required are more than PRAMs\). With thi) s
5 362 M
(s NC factorization has been implemented on a Spark cloud.) s
5 340 M
(        34.21\) An important point to note in above is that an exhaustive search in parallel wo) s
5 329 M
(uld always find a factor, but in how many steps is the question answered by NC computational g) s
5 318 M
(eometric search. This is 1-dimensional geometric factorization counterpart of 2-dimensional Gr) s
5 307 M
(aham's Scan and Jarvis March for Convex Hull of n points. A parallel algorithm in O\(n\) steps w) s
5 296 M
(ouldn't have qualified to be in NC. Above NC algorithm scans just an one-dimensional tesselate) s
5 285 M
(d merged tiles of a hyperbolic arc in O\(\(logn\)^2\) for merge + O\(logn\) for search and doesn't s) s
5 274 M
(can more than 1-dimension. Parallel tesselation of O\(n\) long hyperbolic arc to create locally ) s
5 263 M
(sorted tile segments requires < O\(logn\) steps only if number of processors is > O\(n/logn\). Hen) s
5 252 M
(ce it adheres to all definitions of NC. Thus total parallel work time is O\(\(logn\)^2\) + O\(logn\)) s
5 241 M
( + O\(logn\) = O\(\(logn\)^2\). Here again N=n.) s
5 219 M
(        34.22\) NC Computational Geometric algorithms - [AggarwalChazelleGuibasDunlaingYap] - h) s
5 208 M
(ttps://www.cs.princeton.edu/~chazelle/pubs/ParallelCompGeom.pdf) s
5 186 M
(        34.23\) Parallel Computational Geometry Techniques - [MikhailAtallah] - http://docs.lib) s
5 175 M
(.purdue.edu/cgi/viewcontent.cgi?article=1021&context=cstech - Section 3.1 - Sorting and Mergin) s
5 164 M
(g - "...best hypercube bound for Parallel Sorting is O\(logn\(loglogn\)^2\) - [CypherPlaxton] - ht) s
5 153 M
(tp://dl.acm.org/citation.cfm?id=100240 ...") s
5 131 M
(        34.24\) [DexterKozen-CheeYap] - Cell Decomposition is in NC - http://anothersample.net/) s
5 120 M
(order/fe1d53539cff07d3e836ccc499d443b38b2848ba - This is a deep Algebraic Geometry/Topology re) s
5 109 M
(sult for Cell Decomposition by constructing NC circuit for it. Coincidentally, the connection ) s
5 98 M
(between NC factorization and geometry conjectured in 35 below is already present as evidenced ) s
5 87 M
(by this. This algorithm is for Cell decomposition of a manifold in arbitrary dimensions - a se) s
5 76 M
(t of disjoint union of cells created by intersecting polynomials. For NC factorization, the po) s
5 65 M
(lynomial of interest is hyperbola. Illustration in [Kozen-Yap] - page 517 - is for 0,1,2-dimen) s
5 54 M
(sion cells with 2 polynomials - parabola and circle. This corresponds to tesselation step of f) s
5 43 M
(actorization where a continuous hyperbola is discretized into disjoint union of cells.) s
5 21 M
(        34.25\) Cell decomposition for tesselation of hyperbola can be created in two ways. In ) s
5 10 M
(the first example, set of polynomials are {hyperbola, stepfunction1, stepfunction2, y=k forall) s
_R
S
%%Page: (36) 36
%%BeginPageSetup
_S
18 36 translate
/pagenum 36 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (36) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( integer k}. Geometrically the hyperbola is bounded above and below by 2 step functions i.e hy) s
5 681 M
(perbola intersects a grid of x-y axes lines. This creates 2-dimensional cells above and below ) s
5 670 M
(hyperbola ensconced between 2 step functions which are homeomorphic to R^2 \(there is a bijecti) s
5 659 M
(ve map between cells and R^2 - Topology - James Munkres}. Each cell has same sign for a polyno) s
5 648 M
(mial {above=+1, on=0, below=-1}. This cell decomposition is in NC. Cells above and below hyper) s
5 637 M
(bola have to be merged to get squared tesselation.) s
5 615 M
(        34.26\) In another example Cell decomposition is created by intersection of integer y-a) s
5 604 M
(xis lines and hyperbola which results in set of 0-cells \(discrete set of points on hyperbola\).) s
5 582 M
(        34.27\) NVIDIA CUDA Parallel Bitonic Sort Implementation Reference - http://developer.d) s
5 571 M
(ownload.nvidia.com/compute/cuda/1.1-Beta/x86_website/Data-Parallel_Algorithms.html, Linux code) s
5 560 M
( - http://developer.download.nvidia.com/compute/cuda/1.1-Beta/Projects/bitonic.tar.gz) s
5 538 M
(        34.28\) Tiling of Hyperbolic curve: The discretization step of a hyperbola to form set ) s
5 527 M
(of contiguous tiled segments has been mentioned as "Tesselation" throughout this document whic) s
5 516 M
(h could be a misnomer. Precise equivalent of this tiling is pixelation in Computer Graphics wh) s
5 505 M
(ere an image bitmap is downsampled to create a low-resolution approximation of image - in this) s
5 494 M
( example, an image of hyperbolic curve is pixelated to g et a tiled set of segments \(http://de) s
5 483 M
(monstrations.wolfram.com/PixelizationOfAFont/ shows how a letter A is pixelated to create styl) s
5 472 M
(ized pixelated A\).) s
5 450 M
(        34.29\) The tiling of hyperbolic curve is done by deltax = N/[y\342\\210\\227\(y+1\)] which is) s
5 439 M
( a process similar to low-pass filter or Box Blur in Graphics. In a parallel setting with PRAM) s
5 428 M
(s or Parallel Bitonic Sort, the preprocessing step required is the tiled hyperbolic arc alread) s
5 417 M
(y in place spread out across all nodes of total number O\(N/logN\). This naive tiling though not) s
5 406 M
( as sophisticated as Box Blur Gaussian Filter, needs time O\(logN\) for each node i.e delta comp) s
5 395 M
(utation per coordinate is O\(1\) and each node is allotted O\(logN\) long arc segment and thus O\(1) s
5 384 M
(*logN\) per node.) s
5 362 M
(        34.30\) Above algorithm ignores Communication Complexity across PRAMs or Comparator nod) s
5 351 M
(es on a Cloud.) s
5 329 M
(        34.31\) Comparison of Parallel Sorting Algorithms \(Bitonic, Parallel QuickSort on NVIDI) s
5 318 M
(A CUDA GPU etc.,\) - http://arxiv.org/pdf/1511.03404.pdf. Bitonic Sort has the best parallel pe) s
5 307 M
(rformance in most usecases.) s
5 285 M
(        34.32\) NC-PRAM Equivalence and Parallel Algorithms - [David Eppstein] - https://www.ic) s
5 274 M
(s.uci.edu/~eppstein/pubs/EppGal-ICALP-89.pdf) s
5 252 M
(        34.33\) Parallel Merge Sort - [Richard Cole - https://www.cs.nyu.edu/cole/] - best know) s
5 241 M
(n theoretical parallel sorting algorithm - requires O\(logn\) time with n processors and thus in) s
5 230 M
( NC - https://www.semanticscholar.org/paper/Parallel-Merge-Sort-Cole/6b67df5d908993eca7c03a564) s
5 219 M
(b5dcb1c4c8db999/pdf) s
5 197 M
(        34.34\) NC-PRAM equivalence - http://courses.csail.mit.edu/6.854/06/notes/n32-parallel.) s
5 186 M
(pdf) s
5 164 M
(        34.35\) Theorem 13 - PRAM\(polylog,log\) = uniform-NC - www.wisdom.weizmann.ac.il/~oded/P) s
5 153 M
(S/CC/l27.ps - This mentions that Communication Complexity in PRAM model is assumed to be O\(1\) ) s
5 142 M
(and thus negligible though practically PRAMs are unrealistic.) s
5 120 M
(        34.36\) PRAM Implementation Techniques - http://www.doc.ic.ac.uk/~nd/surprise_95/journa) s
5 109 M
(l/vol4/fcw/report.html - "... However to say that an algorithm is in NC does not mean that it ) s
5 98 M
(can be efficiently implemented on a massively parallel system...") s
5 76 M
(        34.37\) Logarithm Time Cost Parallel Sorting - [Lasse Natvig] - Survey on Batcher's Bit) s
5 65 M
(onic Sort, AKS Sorting Network, Richard Cole's Parallel Sort - www.idi.ntnu.no/~lasse/publics/) s
5 54 M
(SC90.ps - Bitonic Sort is faster in practice though Richard Cole Parallel Sorting is the faste) s
5 43 M
(st and most processor-efficient known.) s
5 21 M
(        34.38\) What is wrong with PRAM - "Too much importance is placed on NC . In particular,) s
5 10 M
( algorithms which have \342\\200\\234fast\342\\200\\235 runtimes but use, for example, O\(n^2\) processors) s
_R
S
%%Page: (37) 37
%%BeginPageSetup
_S
18 36 translate
/pagenum 37 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (37) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( are simply of no use" - Section 3.2 - https://people.eecs.berkeley.edu/~jrs/meshpapers/SuThes) s
5 681 M
(is.pdf) s
5 659 M
(        34.39\) NC-PRAM equivalence - https://www.ida.liu.se/~chrke55/courses/APP/ps/f2pram-2x2) s
5 648 M
(.pdf - "set of problems solvable on PRAM in polylogarithmic time O\(\(logn\)^k\) k>0, using only n) s
5 637 M
(^O\(1\) processors \(i. e. a polynomial number\) in the size n of the input instance") s
5 615 M
(        34.40\) Number of PRAMs in NC definition - http://cs.stackexchange.com/questions/39721/) s
5 604 M
(given-a-pram-may-use-arbitrarily-many-processors-why-is-hamiltonian-cycle-not-i) s
5 582 M
(        34.41\) EURO-PAR 1995 - Input size in Parallel RAM algorithms - https://books.google.co) s
5 571 M
(.in/books?id=pVpjOwUHEigC&pg=PA245&lpg=PA245&dq=size+of+input+in+PRAM&source=bl&ots=uZ9GeONqtg) s
5 560 M
(&sig=6YHl4CvNUdFERPe8p192hdB1Kc0&hl=en&sa=X&ved=0ahUKEwiZ3_z20qTOAhVJGJQKHX8bALIQ6AEIOTAG#v=on) s
5 549 M
(epage&q=size%20of%20input%20in%20PRAM&f=false - "... Third, inputs are usually measured by the) s
5 538 M
(ir size. We use overall number of array elements ...") s
5 516 M
(        34.42\) Batcher's Bitonic Sort is in NC - https://web.cs.dal.ca/~arc/teaching/CS4125/Le) s
5 505 M
(ctures/03b-ParallelAnalysis.pptx - also other) s
5 494 M
(PRAM algorithms are in NC.) s
5 472 M
(        34.43\) Brief Overview of Parallel Algorithms, Work-Time Efficiency and NC - [Blelloch]) s
5 461 M
( - http://www.cs.cmu.edu/~scandal/html-papers/short/short.html - "... Examples of problems in ) s
5 450 M
(NC include sorting, finding minimum-cost spanning trees, and finding convex hulls ...". Work-T) s
5 439 M
(ime Efficiency is more about optimizing number of processors required \(with polylog time\) and ) s
5 428 M
(two algorithms with differing work-time are both theoretically in NC.) s
5 406 M
(        34.44\) Sorting n integers is in NC - [BussCookGuptaRamachandran] - www.math.ucsd.edu/~) s
5 395 M
(sbuss/ResearchWeb/Boolean2/finalversion.ps) s
5 373 M
(        34.45\) PRAM and Circuit Equivalence - [Savage] - http://cs.brown.edu/~jes/book/pdfs/Mo) s
5 362 M
(delsOfComputation.pdf - Lemma 8.14.1) s
5 340 M
(        34.46\) Efficient Parallel Computation = NC - [AroraBarak] - http://theory.cs.princeton) s
5 329 M
(.edu/complexity/book.pdf - Theorem 6.24 - Simpler version of 34.3) s
5 307 M
(        34.47\) Parallel sorting and NC - http://courses.csail.mit.edu/6.854/06/notes/n32-paral) s
5 296 M
(lel.pdf) s
5 274 M
(        34.48\) Parallel sorting in PRAM model - http://www.math.ias.edu/~avi/PUBLICATIONS/MYPA) s
5 263 M
(PERS/MW87/MW87.pdf ) s
5 241 M
(        34.49\) Parallel Sorting is in NC - http://www.toves.org/books/distalg/distalg.pdf - Se) s
5 230 M
(ction 5 \(Page 17\)) s
5 208 M
(        34.50\) Parallel K-Merge Algorithm for merging k sorted tiles into a single sorted list) s
5 197 M
( - LazyMerge - www.cs.newpaltz.edu/~lik/publications/Ahmad-Salah-IEEE-TPDS-2016.pdf) s
5 175 M
(        34.51\) Timsort and its parallel implementation in Java, Python and Android for paralle) s
5 164 M
(l merge sort of arrays - https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#paral) s
5 153 M
(lelSort-int:A- . Timsort exploits order in unsorted lists. Java implementation is based on For) s
5 142 M
(kJoinPool work-stealing pattern \(similar to router-worker-dealer pattern in ZeroMQ\) and parall) s
5 131 M
(elism is equal to number of processors.Cloud Bitonicsort SparkPython implementation in NeuronR) s
5 120 M
(ain AsFer could be more time efficient than Arrays.parallelSort\(\) in Java 8 as it implements B) s
5 109 M
(atcher Sort on Cloud.) s
5 87 M
(        34.52\) Comparison of Parallel and Sequential Sorts - https://github.com/darkobozidar/s) s
5 76 M
(equential-vs-parallel-sort) s
5 54 M
(        34.53\) Trigonometric Functions over Finite Galois Fields \(of prime power order\) - http) s
5 43 M
(s://arxiv.org/pdf/1501.07502.pdf - Defines trigonometric functions \(hyperbola is also a trigon) s
5 32 M
(ometic function - class of hyperbolic functions\) on discrete objects like a finite field yield) s
5 21 M
(ing a function on a set of complex points\(Gaussian integers\). This abstracts and reduces to di) s
5 10 M
(scretization step of hyperbolic factorization but requires prime power sized finite field.) s
_R
S
%%Page: (38) 38
%%BeginPageSetup
_S
18 36 translate
/pagenum 38 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (38) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(        34.54\) Adaptive Bitonic Sorting - http://epubs.siam.org/doi/abs/10.1137/0218014 - very) s
5 670 M
( old paper \(1989\) on PRAM implementation of bitonic sort - NeuronRain AsFer implements bitonic) s
5 659 M
( sorting on Spark Cloud and parallelizes comparators on cloud \(34.20\) effectively treating clo) s
5 648 M
(ud as sorting network with cloud communication complexity assumed as constant in average case.) s
5 626 M
(        34.55\) Efficient Parallel Sorting - improvement of Cole's Parallel Sort and AKS sortin) s
5 615 M
(g networks: sorting networks can be implemented in EREW PRAM - [Goodrich] - https://arxiv.org/) s
5 604 M
(pdf/1306.3000v1.pdf - [Godel's Lost Letter and P=NP - Richard Lipton - Galactic Sorting Networ) s
5 593 M
(ks - https://rjlipton.wordpress.com/2014/04/24/galactic-sortning-networks/]) s
5 571 M
(        34.56\) Computational Pixelation Geometry Theorems - https://arxiv.org/pdf/1105.2831v1.) s
5 560 M
(pdf - defines planar pixelation of a continuous curve and proves Intermediate Value Theorem fo) s
5 549 M
(r Pixelation geometry. This is exactly the discretization step of this hyperbolic factorizatio) s
5 538 M
(n algorithm. This formalizes the discretization mentioned in 34.29 where each pixelated tile i) s
5 527 M
(s a set of intermediate values between f\(x\) and f\(x+1\) for interval [x,x+1] where f = N/x for ) s
5 516 M
(N to be factorized.) s
5 494 M
(        34.57\) Approximating a function graph by planar pixelation - http://www3.nd.edu/~lnico) s
5 483 M
(lae/Pixelations-beam.pdf - this applies advanced topology and geometry for pixelation of any f) s
5 472 M
(unction graph. Presently pixelation of hyperbola graph is done in very simple, primitive way a) s
5 461 M
(s mentioned in 34.29.) s
5 439 M
(        34.58\) Resource Oblivious Sorting on Multicores - [RichardCole-VijayaRamachandran] - h) s
5 428 M
(ttps://arxiv.org/pdf/1508.01504v1.pdf - New parallel merge sort algorithm for multicore machin) s
5 417 M
(es \(SPMS - SamplePartitionMergeSort\) with parallel execution time in O\(logN*loglogN\). Multicor) s
5 406 M
(es are equivalent to Asynchronous PRAMs \(each core executes asynchronously\) and thus it is an ) s
5 395 M
(NC sorting algorithm.) s
5 373 M
(        34.59\) NC and various categories of PRAMs - https://pdfs.semanticscholar.org/5354/99cf) s
5 362 M
(0c2faaaa6df69529605c87b511bd2226.pdf - CRCW PRAM can be simulated by EREW PRAM with polylogari) s
5 351 M
(thmic increase in time.) s
5 329 M
(        34.60\) PRAM-NC equivalence, definition of input size - ftp://ftp.cs.utexas.edu/pub/tec) s
5 318 M
(hreports/tr85-17.pdf - atom is an indivisible unit of bit string, input is sequence of atoms, ) s
5 307 M
(input size is length of this sequence.) s
5 285 M
(        34.61\) PRAM model and precise definition of input size in PRAM models - https://www.cs) s
5 274 M
(.fsu.edu/~engelen/courses/HPC-adv-2008/PRAM.pdf - input size is length of sequence n = 2^k ,no) s
5 263 M
(t number of bits k=logn, and each element in the sequence is a set of bits - input size to a P) s
5 252 M
(RAM algorithm is exponential in number of bits and differs from sequential algorithms which ha) s
5 241 M
(ve input size in just number of bits.) s
5 219 M
(        34.62\) Simulation of Parallel RAMs by Circuits - http://www.cstheory.com/stockmeyer@sb) s
5 208 M
(cglobal.net/sv.pdf) s
5 186 M
(        34.63\) PRAM Models and input size - [Joseph JaJa] - https://www.cs.utah.edu/~hari/teac) s
5 175 M
(hing/bigdata/book92-JaJa-parallel.algorithms.intro.pdf - "...ALGORITHM 1.3 \(Matrix Multiplicat) s
5 164 M
(ion on the PRAM\) Input: Two n x n matrices A and B stored in the shared memory, where n = 2^k ) s
5 153 M
(.  The initialized local variables are n, and the triple of indices \(i, j, I\) identifying the ) s
5 142 M
(processor. ...", https://people.ksp.sk/~ppershing/data/skola/JaJa.pdf - Chapter 4 - Searching,) s
5 131 M
( Merging, Sorting) s
5 109 M
(        34.64\) Input Size for PRAMs, NC-PRAM equivalence, Cook-Pippenger Thesis, Brent's Speed) s
5 98 M
(up Lemma - www.csl.mtu.edu/cs5311.ck/www/READING/pram.ps.gz - Section on Input/Output Conventi) s
5 87 M
(on in PRAMs and Parallel MergeSort in EREW PRAM - Input size to Parallel Merge Sort is the len) s
5 76 M
(gth of array of integers to be sorted and is not logarithmic in length of array. This requires) s
5 65 M
( parallel time O\(\(logN\)^2\) which is the depth of equivalent NC circuit. Computational Geometri) s
5 54 M
(c Discrete Hyperbolic Factorization described above discretizes hyperbola into segments of sor) s
5 43 M
(ted tiles of numbers on a 2 dimensional plane and merge-sorts them. This obviously requires O\() s
5 32 M
(\(logN\)^2\) time to find a factor with additional O\(logN\) binary search. Brent Speedup Lemma app) s
5 21 M
(lies because, the tile segments can be statically allocated to each specific processor in tili) s
5 10 M
(ng phase.) s
_R
S
%%Page: (39) 39
%%BeginPageSetup
_S
18 36 translate
/pagenum 39 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (39) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(        34.65\) Pixelation of Polygons - On Guarding Orthogonal Polygons with Bounded Treewidth) s
5 670 M
( - [Therese Biedl and Saeed Mehrabi] - Page 160 - http://2017.cccg.ca/proceedings/CCCG2017.pdf) s
5 659 M
( - CCCG 2017, Ottawa, Ontario, July 26\342\\200\\22328, 2017 - Computational Geometric definition o) s
5 648 M
(f standard pixelation divides a polygon into rectangles and adjoining rectangles are vertices ) s
5 637 M
(connected to form a planar pixelation graph. Similar notion of pixelation holds for pixelating) s
5 626 M
( hyperbola pq=N for finding factors p and q of integer N. Art Gallery problem in computational) s
5 615 M
( geometry finds minimum number of vantage points to guard the art gallery. If hyperbolic curve) s
5 604 M
( is considered as an art gallery, and guards have visibility only in vertical and horizontal d) s
5 593 M
(irections, pixelation creates set of rectangles bounded by vantage points ensconcing the hyper) s
5 582 M
(bola. This illuminates the hyperbola completely.) s
5 571 M
( ) s
5 560 M
(        34.66\) A Comparison of Parallel Sorting Algorithms on Different Architectures- [NANCY ) s
5 549 M
(M. AMATO, RAVISHANKAR IYER, SHARAD SUNDARESAN, YAN WU] - https://parasol.tamu.edu/publications) s
5 538 M
(/download.php?file_id=191) s
5 516 M
(        34.67\) Bitonic Sort Implementation - [Amrutha Mullapudi] - https://www.cse.buffalo.edu) s
5 505 M
(//faculty/miller/Courses/CSE633/Mullapudi-Spring-2014-CSE633.pdf - input size is n=2^k and par) s
5 494 M
(allel execution time O\(logn^2\) for Batcher Bitonic Sort - Hyperbolic Pixelated Factorization i) s
5 483 M
(s in NC because bitonic sort is in NC and is also optimal if O\(logn\) depth AKS sorting network) s
5 472 M
(s are used, because O\(n\) * O\(logn\) = O\(nlogn\) which is serial sorting time lowerbound.) s
5 450 M
(        34.68\) PRAMs and Multicore architectures - http://blog.computationalcomplexity.org/200) s
5 439 M
(8/04/revenge-of-parallelism.html ) s
5 428 M
( ) s
5 417 M
(        34.69\) NC and PRAMs - http://www.cse.iitd.ernet.in/~subodh/courses/CSL860/slides/3pram) s
5 406 M
(.pdf) s
5 384 M
(        34.70\) Geometric Searching, Ray Shooting Queries - [Michael T.Goodrich] - http://www.i) s
5 373 M
(cs.uci.edu/~goodrich/pubs/42.pdf - Section 42.5 - Ray Shooting is defined as searching a point) s
5 362 M
( location in set of line segments by shooting a ray from a point outside the set of line segme) s
5 351 M
(nts. It is an open problem to find an efficient data structure for parallel ray shooting which) s
5 340 M
( searches n points in parallel by shooting n light rays. Previous Hyperbolic Factorization can) s
5 329 M
( also be rephrased as parallel shooting problem which searches the factor points on the pixela) s
5 318 M
(ted hyperbolic tile segments in parallel from an external point outside the hyperbola and answ) s
5 307 M
(ers the open question in affirmative.) s
5 285 M
(        34.71\) Planar Point Location in Parallel - ftp://ftp.cs.brown.edu/pub/techreports/89/c) s
5 274 M
(s89-45a.pdf - Section 4 - Point Location problem is defined as searching a query point q in a ) s
5 263 M
(set of line segments. Discretized/Pixelated Hyperbola has number of line segments in O\(loglogN) s
5 252 M
(\). Finding factors \(p,q\) such that pq=N is planar point location problem which searches for th) s
5 241 M
(e factors in the tiled hyperbolic line segments.Point Location can be done in parallel by PRAM) s
5 230 M
(.) s
5 208 M
(        34.72\) One dimensional Point Location - https://www.csun.edu/~ctoth/Handbook/chap38.pd) s
5 197 M
(f - Section 38.1 - List searching - Tiled hyperbolic line segments are one dimensional interva) s
5 186 M
(ls and number of intervals are O\(loglogN\). Searching this list amounts to finding a factor of ) s
5 175 M
(N.) s
5 153 M
(        34.73\) Hoover-Klawe-Pippenger Algorithm for converting arbitrary circuit to bounded fa) s
5 142 M
(nout 2 - [Ogihara-Animesh] - http://www.cs.rochester.edu/u/ogihara/research/DNA/cec.ps.gz) s
5 120 M
(        34.74\) PRAM definition of NC - [Kristoffer Arnsfelt Hansen] - https://users-cs.au.dk/a) s
5 109 M
(rnsfelt/CT08/scribenotes/lecture7.pdf) s
5 87 M
(        34.75\) Factorization, Planar Point Location in parallel, Cascading, Polygon pixelation) s
5 76 M
( of hyperbola - [Mikhail Atallah] - https://pdfs.semanticscholar.org/1043/702e1d4cc71be46388cc) s
5 65 M
(12cd981ee5ad9cb4.pdf -Section 4.5 - Art Gallery) s
5 54 M
( Pixelation of Hyperbola pq=N \(described in 465\) creates a polygon covering it and Factors of ) s
5 43 M
(N are points located in the vertices of this polygon: Parallel Planar Point Location algorithm) s
5 32 M
(s involve Cascading technique to find the factor query points p and q on the faces of this pol) s
5 21 M
(ygon. Cascading algorithms execute in multiple levels of the processor tree per stage and ther) s
5 10 M
(e are logarithmic number of stages - O\(logN\) parallel time. Cascading derives its nomenclature) s
_R
S
%%Page: (40) 40
%%BeginPageSetup
_S
18 36 translate
/pagenum 40 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (40) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( from relay nature of computation. Node at height h is "woken-up" and computes its subtree onl) s
5 681 M
(y after certain number of stages e.g h. This reduces integer factorization to Parallel Planar ) s
5 670 M
(Point Location on Polygon.) s
5 648 M
(        34.76\) Multicores,PRAMs,BSP and NC - [Vijaya Ramachandran] - https://womenintheory.fil) s
5 637 M
(es.wordpress.com/2012/05/vijaya-wit12.pdf) s
5 615 M
(        34.77\) Word Size in a PRAM - https://hal.inria.fr/inria-00072448/document - Equation 5) s
5 604 M
( - logN <= w \(N is input size and w word size\)) s
5 582 M
(        34.78\) Prefix Sum Computation and Parallel Integer Sorting - [Sanguthevar Rajasekaran,) s
5 571 M
( Sandeep Sen] - http://www.cse.iitd.ernet.in/~ssen/journals/acta.pdf - "...Specifically, we sh) s
5 560 M
(ow that if the word length is sufficiently large, the problem of integer sorting reduces to th) s
5 549 M
(e problem of prefix sum computation. As a corollary we get an integer sorting algorithm that r) s
5 538 M
(uns in time O\(log n\) using n/log n processors with a word length of n^epsilon, for any constan) s
5 527 M
(t epsilon > 0....") s
5 505 M
(        34.79\) AMD Kaveri Heterogeneous System Architecture and hUMA - treats CPU and GPUs equ) s
5 494 M
(ally, best suited for algorithms involving binary searches, zero-copy \(GPU and CPU have access) s
5 483 M
( to memory by pointers\) - an example for Parallel RAM -  https://www.anandtech.com/show/7677/a) s
5 472 M
(md-kaveri-review-a8-7600-a10-7850k/6, https://pdfs.semanticscholar.org/90ec/1e63da44821d94c860) s
5 461 M
(47fa2f728504d89a4d.pdf) s
5 439 M
(        34.80\) Philosophical implications of Factorization in NC - NC in BPNC in RNC in QNC in) s
5 428 M
( BQP in DQP in EXP - https://www.math.ucdavis.edu/~greg/zoology/diagram.xml - Presently factor) s
5 417 M
(ization is known to be in BQP and NC-PRAM factorization implies factorization is in NC, implyi) s
5 406 M
(ng a decoherence from Quantum to Classical world - Rabi Oscillations - https://www.youtube.com) s
5 395 M
(/watch?v=OONFQgwbV9I - superposed quantum state |p> = Sigma\(|ai>si\) settles in one of the clas) s
5 384 M
(sical states si on interaction with classical world. No cloning theorem implies quantum state ) s
5 373 M
(cannot be replicated. Since NC-PRAM equivalence is in BQP, a natural question arises: Are Para) s
5 362 M
(llel RAMs replicated quantum states and thus violate No Cloning?) s
5 340 M
(        34.81\) An Oracle Result for relativized BQP and P - [Fortnow-Rogers] - https://arxiv.o) s
5 329 M
(rg/pdf/cs/9811023.pdf - There exists an oracle A for which P^A = BQP^A - Theorems 4.1,4.2,4.3 ) s
5 318 M
(- Pages 9-10 - This is significant because  with respect to some oracle, Quantum computation i) s
5 307 M
(s equivalent to and can be simulated by Deterministic Classical Computation in polynomial time) s
5 296 M
(. In the context of PRAM-NC factorization, this theorem applies because NC^A is in P^A \(Christ) s
5 285 M
(opher Wilson - https://link.springer.com/chapter/10.1007/3-540-16486-3_111\) for any oracle A. ) s
5 274 M
(Sequential Optimization for Computational Geometric Factorization mentioned in 506 implies a w) s
5 263 M
(eaker result - Factorization is in P. An example Oracle for Factorization is the set of beacon) s
5 252 M
(s \(approximate factors\) obtained by Ray-Shooting queries. Shor's Quantum Factorization \(mentio) s
5 241 M
(ned in 350\) involves period finding - finding period r such that f\(x\)=f\(x+r\). Ray shooting que) s
5 230 M
(ries are also period finding algorithms in the sense that gaps between prime factors are estim) s
5 219 M
(ated approximately - if f is a ray shooting query oracle A, querying f returns the next prime ) s
5 208 M
(factor pf\(n+1\) = pf\(n\) + gap \(exactly or approximately\) in classical deterministic polynomial ) s
5 197 M
(time which is in NC^A or P^A. Ray shooting can be performed in both P and BQP from the previou) s
5 186 M
(s equivalence of period finding and prime factor gap ray shooting i.e in P^A and BQP^A. ) s
5 164 M
(        34.82\) Factorization by Planar Point Location and Persistent Binary Search Trees - [Sa) s
5 153 M
(rnak-Tarjan] - https://pdfs.semanticscholar.org/731f/a2d06bd902b9fd7f3d5c3a17485edfe4133c.pdf ) s
5 142 M
(- Planar Point Location problem is defined as locating the polygon containing the query point ) s
5 131 M
(in a subdivision of 2D plane by the line segments creating the polygons. Persistent Binary Sea) s
5 120 M
(rch Trees are versioned Binary Trees which support insert/delete and preserve the past history) s
5 109 M
( of the Binary Search Tree for queries. Factorization is a Planar Point Location problem - Pix) s
5 98 M
(elated hyperbolic tile segments create set of polygons \(arrays of pixels forming a rectangle o) s
5 87 M
(f dimension 1 * length_of_tile_segment\) and these polygons divide 2D plane. Factor points \(pix) s
5 76 M
(els\) are located in some of these polygons. Planar Point Location retrieves the polygon contai) s
5 65 M
(ning the factor point in O\(logN\) time. This retrieved polygon tile segment can in turn be bina) s
5 54 M
(ry searched in O\(logN\) time because of implicit sortedness \(either x or y axis points are stri) s
5 43 M
(ctly ascending\). To be in NC, Parallel RAM Construction of Persistent Binary Search Tree is ne) s
5 32 M
(cessary.) s
5 10 M
(        34.83\) Factorization by Planar Point Location - [PARALLEL TRANSITIVE CLOSURE AND POINT) s
_R
S
%%Page: (41) 41
%%BeginPageSetup
_S
18 36 translate
/pagenum 41 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (41) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( LOCATION IN PLANAR STRUCTURES, ROBERTO TAMASSIA AND JEFFREY S. VITTER] - Parallel RAM constru) s
5 681 M
(ction of Bridge Separator Tree for Planar Point Location - http://citeseerx.ist.psu.edu/viewdo) s
5 670 M
(c/download?doi=10.1.1.72.4319&rep=rep1&type=pdf - Separators are st-paths in planar subdivisio) s
5 659 M
(n graph formed by the hyperbolic line segments of pixel-array polygons on 2D plane. "...The se) s
5 648 M
(parator tree uses O\(n\) space and supports point location queries in O\(\(logn\)^2\) time, where n ) s
5 637 M
(is the number of vertices of S [33]..." - Lemma 4.5 - "... Let S be a regular subdivision with) s
5 626 M
( n vertices. The bridged separator tree for point location in S can be constructed by an EREW ) s
5 615 M
(PRAM in O\(log n\) time using n/log n processors, which is optimal ...". Thus a factor point N=p) s
5 604 M
(q within some of the hyperbolic pixel-array polygons can be found in O\(\(logN\)^2 + logN\) = O\(\(l) s
5 593 M
(ogN\)^2\) PRAM time and O\(N/logN\) processors. Number of rectangle polygons in planar subdivision) s
5 582 M
( created by the hyperbolic pixel-array = N of vertices 4*N. This concurs with O\(\(logN\)^2\) to O) s
5 571 M
(\(\(logN\)^3\) PRAM time for Segment Trees. This factorization by parallel planar point location i) s
5 560 M
(s work-optimal and is in NC requiring N/logN processors.) s
5 538 M
(        34.84\) Criticism and defence of PRAM model - [Casanova-Legrand-Robert] - Parallel Algo) s
5 527 M
(rithms - http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.466.8142&rep=rep1&type=pdf -) s
5 516 M
( Section 1.5 - "...NC is the class of all problems which, with a polynomial number of PUs, can) s
5 505 M
( be solved in polylogarithmic time. An algorithm of size n is polylogarithmic if it can be sol) s
5 494 M
(ved in O\(log\(n\)^c \) time with O\(n^k\) PUs, where c and k are constants. Problems in NC can be s) s
5 483 M
(olved efficiently on a parallel computer ... common criticism of the PRAM model is the unreali) s
5 472 M
(stic assumption of an immediately addressable unbounded shared parallel memory. ... \342\\200\242 The) s
5 461 M
(ory is not everything: theoretical results are not to be taken as is and implemented by engine) s
5 450 M
(ers.  \342\\200\242 Theory is also not nothing: the fact that an algorithm cannot in general be imple) s
5 439 M
(mented as is does not mean it is meaningless. ...") s
5 417 M
(        34.85\) Parallel Point in Planar Subdivision - Design and Analysis of Parallel Algorith) s
5 406 M
(ms - [Selim Akl] - https://dl.acm.org/citation.cfm?id=63471 - Section 11.2.2 - Point in Planar) s
5 395 M
( Subdivision) s
5 373 M
(        34.86\) Alternatives to Parallel RAM - QSM - http://theory.stanford.edu/~matias/papers/) s
5 362 M
(qsm.pdf - [Philip b.Gibbons, Yossi Matias, Vijaya Ramachandran] -  Parallel RAM algorithms lay) s
5 351 M
( stress on sharing memory by processing elements while Bridging models like QSM, LogP and BSP ) s
5 340 M
(\(Bulk Synchronous Parallel\) rely on Message Passing between processors having local non-shared) s
5 329 M
( memory and communicating with peer elements within finite number of messages \(h-relation\). Ea) s
5 318 M
(ch computation is termed a superstep constrained by barrier synchronization amongst the proces) s
5 307 M
(sors performing local computation. ) s
5 285 M
(        34.87\) Communication Efficient Parallel Sorting - [Michael T.Goodrich] - https://www.i) s
5 274 M
(cs.uci.edu/~goodrich/pubs/parsort-pre.pdf - Parallel Sorting on BSP instead of PRAMs - footnot) s
5 263 M
(e 1 - page 247: PRAM is a BSP model having h-relation = 1 and therefore BSP is in NC by this P) s
5 252 M
(RAM simulation.) s
5 230 M
(        34.88\) PRAM and Bulk Synchronous Parallel - http://www.cse.iitd.ernet.in/~subodh/cours) s
5 219 M
(es/COL730/pdfslides/6pram.pdf - Schematic diagram for Barrier Synchronization Superstep) s
5 197 M
(        34.89\) Bridging model for Parallel Computation - http://web.mit.edu/6.976/www/handout/) s
5 186 M
(valiant2.pdf - [Leslie G.Valiant] - "... that even the most general model, the CRCW PRAM, can ) s
5 175 M
(be simulated optimally on the BSP model given sufficient slack if g is regarded as a constant.) s
5 164 M
(.." - slack is the ratio of number of virtual processors \(v=plogp\) to physical processors \(p\) ) s
5 153 M
(= plogp/p and g is the ratio of total computation performed by all local nodes per second to t) s
5 142 M
(otal number of data words delivered per second.) s
5 120 M
(        34.90\) Definition of NC - Computational Complexity - [Christos Papadimitriou] - Page 3) s
5 109 M
(75 - Problems solvable by polynomial number of PRAMs in polylogarithmic depth.) s
5 87 M
(        34.91\) NOW-Sort - https://people.eecs.berkeley.edu/~fox/summaries/database/nowsort.htm) s
5 76 M
(l - High-Performance Sorting on Networks of Workstations - MinuteSort) s
5 65 M
(        ) s
5 54 M
(        34.92\) NSort - Parallel Sorting - http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.) s
5 43 M
(1.1.23.1823 ) s
5 21 M
(        34.93\) Improved Sorting Networks - [R.L. \(Scot\) Drysdale, Frank H. Young] - https://se) s
5 10 M
(arch.proquest.com/openview/3d400dff715e308df20e8812113844d7/1?pq-origsite=gscholar&cbl=666313 ) s
_R
S
%%Page: (42) 42
%%BeginPageSetup
_S
18 36 translate
/pagenum 42 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (42) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- SIAM Journal of Computing Volume 4, Number 3, 1975) s
5 670 M
(        34.94\) Definition of Sorting Networks - Runtime of Sorting Networks is its depth and t) s
5 659 M
(here exists an O\(logN\) depth Sorting Network - https://courses.engr.illinois.edu/cs573/fa2012/) s
5 648 M
(lec/lec/19_sortnet.pdf - implies sorting networks is in NC.) s
5 626 M
(        34.95\) Ajtai-Komlos-Szemeredi \(AKS\) Sorting Network - Proof of existence of O\(logN\) de) s
5 615 M
(pth Sorting Network - https://www.cl.cam.ac.uk/teaching/1415/AdvAlgo/lec2_ann.pdf - Sorting Ne) s
5 604 M
(tworks are graphs consisting of input and comparator wires. Input wires are connected by compa) s
5 593 M
(rator at specific points. Inputs traversing this graph while finding a comparator are swapped ) s
5 582 M
(if top wire has greater value than bottom wire. This process propagates till the output is rea) s
5 571 M
(ched. Output gates contain sorted integers. Logdepth sorting networks are constructed by Bipar) s
5 560 M
(tite Expander Graphs - approximate halvers - which split the inputs into two sets of smallest ) s
5 549 M
(and largest in two halves of the wires \(bitonic\). This implies computational geometric sorting) s
5 538 M
( networks of O\(logN\) time for sorting the hyperbolic tile segments and finding the factors by ) s
5 527 M
(binary search but constant in O\(logN\) is notoriously huge.) s
5 505 M
(        34.96\) Complexity of Boolean Functions - [Ingo Wegener] - Blue Book - https://eccc.wei) s
5 494 M
(zmann.ac.il/resources/pdf/cobf.pdf - Circuit lowerbounds are difficult because efficiency has ) s
5 483 M
(to be proved over all possible circuits computing a function - Theorem 7.5 - Page 402 - Boolea) s
5 472 M
(n function on n variables can be computed by a PRAM time lowerbound of Omega\(loglogn\). This lo) s
5 461 M
(werbound is relevant to Computational geometric factorization by binary searching hyperbolic t) s
5 450 M
(ile pixelation on PRAMs\(number of variables = number of bits in integer to factorize\). Integer) s
5 439 M
( factorization circuits on PRAMs \(e.g PRAM circuits for parallel planar point location algorit) s
5 428 M
(hms to locate a factor point on hyperbolic arc bow\) have polylogarithmic depth \(parallel time\)) s
5 417 M
( and for each PRAM in the longest path from root to leaf of the circuit, this lowerbound appli) s
5 406 M
(es. Factorization lowerbound for all PRAMs along this longest path is Omega\(\(logN\)^k*logloglog) s
5 395 M
(N\) if n=logN.) s
5 373 M
(        34.97\) List of Parallel Planar Point Location Algorithms - Table 42.5.1 - Parallel Geo) s
5 362 M
(metric Searching Algorithms - https://www.ics.uci.edu/~goodrich/pubs/42.pdf) s
5 340 M
(        34.98\) Parallel Planar Point Location - [Atallah-Goodrich-Cole] - Purdue e-Pubs - http) s
5 329 M
(s://pdfs.semanticscholar.org/f80e/bfe40dfbfad40659ff82e80cb632a3feeeb8.pdf?_ga=2.211071314.671) s
5 318 M
(597020.1548674481-1949614478.1548674481 - Section 4.2 - Factorization is a planar point locati) s
5 307 M
(on problem - Hyperbolic arc pixelation creates juxtaposed rectangular polygons of tile segment) s
5 296 M
(s each of them internally sorted. Factorization N=pq amounts to finding the polygon \(segment\) ) s
5 285 M
(containing the point N which is O\(logN\) in CREW PRAM time. Binary Searching this implicitly so) s
5 274 M
(rted polygon yields the factor point \(p,q\) and additional O\(logN\) time.Tiles are computed by t) s
5 263 M
(he relation delta = N/[x\(x+1\)]) s
5 241 M
(        34.99\) Optimal Bounds for Decision Problems on the CRCW PRAM - [Beame-Hastad] - https:) s
5 230 M
(//homes.cs.washington.edu/~beame/papers/crcwparity.pdf - "...Optimal Q\(logn/log logn\) lower bo) s
5 219 M
(unds on the time for CRCW PRAMS with polynomially bounded numbers of processors or memory cell) s
5 208 M
(s to compute parity and a number of related problems are proven..." - Corollary 4.2 - these lo) s
5 197 M
(werbounds apply to all sorting problems on CRCW PRAMs and to k-mergesort/segment tree of hyper) s
5 186 M
(bolic segments in computational geometric factorization. ) s
5 164 M
(        34.100\) BSP versus PRAM - Survey - https://web.njit.edu/~alexg/courses/cis668/Fall2000) s
5 153 M
(/handsub5.pdf) s
5 131 M
(35. \(THEORY\) Above Discrete Hyperbolic Factorization can be used as a numerical dataset analys) s
5 120 M
(is technique. Discrete Hyperbolic Factorization uses only elementary geometric principles whic) s
5 109 M
(h can be fortified into an algebraic geometry result, because of strong connection between geo) s
5 98 M
(metry \(hyperbola\) and algebra \(unique factorization theorem\) for integer rings - excluding Kum) s
5 87 M
(mer's theorem for counterexamples when Unique Factorization is violated\(e.g \(sqrt\(5\)+1\)\(sqrt\(5) s
5 76 M
(\)-1\)/4 = 2*3 = 6\).) s
5 54 M
(##############################################################################################) s
5 43 M
(##########################) s
5 32 M
(B.      EXPERIMENTAL NON-STATISTICAL INFERENCE MODEL BASED ON ALREADY KNOWN THEORETICAL COMPUT) s
5 21 M
(ER SCIENCE RESULTS:) s
5 10 M
(##############################################################################################) s
_R
S
%%Page: (43) 43
%%BeginPageSetup
_S
18 36 translate
/pagenum 43 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (43) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(##########################) s
5 670 M
(36.1. \(FEATURE - DONE-WordNet Visualizer implementation for point 15\) The classification using) s
5 659 M
( Interview Algorithm Definition Graph \(obtained from Recursive Gloss Overlap algorithm describ) s
5 648 M
(ed in http://arxiv.org/abs/1006.4458 , https://sites.google.com/site/kuja27/TAC2010papersubmis) s
5 637 M
(sion.pdf?attredirects=0 and http://www.nist.gov/tac/publications/2010/participant.papers/CMI_I) s
5 626 M
(IT.proceedings.pdf \) wordnet node indegrees can classify a same document in multiple classes w) s
5 615 M
(ithout any training set \(unsupervised\). Thus same document will be in multiple classes. This c) s
5 604 M
(an be visualized as one stack per class and documents in same class are pushed into a stack co) s
5 593 M
(rresponding to each class. When a same document is across multiple classes, a document can be ) s
5 582 M
(visualized as a "hyperedge" of a hypergraph that transcends multiple class nodes. Here each cl) s
5 571 M
(ass node in this non-planar graph \(or multi-planar graph\) is a stack.) s
5 549 M
(36.2. \(THEORY\) Thus if number of classes and documents are infinite, an infinite hypergraph is) s
5 538 M
( obtained. This is also somewhat a variant of an inverted index or a hashtable where in additi) s
5 527 M
(on to hashing ,the chained buckets across the keys are interconnected \(Quite similar to https:) s
5 516 M
(//sites.google.com/site/kuja27/SurvivalIndexBasedTxnTimeoutManager.pdf?attredirects=0 and http) s
5 505 M
(s://sites.google.com/site/kuja27/PhDThesisProposal.pdf?attredirects=0\). This is also similar t) s
5 494 M
(o "Connectionism" in Computational Psychology which allows cycles or interconnections in Perce) s
5 483 M
(ptrons and Neural Networks. An old version of this was written in an old deleted blog few year) s
5 472 M
(s ago in 2006 at: http://shrinivaskannan.blogspot.com. If the relation between Hash Functions ) s
5 461 M
(and Integer Partitions is also applied as described using Generating Functions in https://site) s
5 450 M
(s.google.com/site/kuja27/IntegerPartitionAndHashFunctions.pdf?attredirects=0 then an upperboun) s
5 439 M
(d on number of possible Hypergraphs \(visualizing them as interconnected Hash tables\) can be de) s
5 428 M
(rived which is a stronger notion to prove.) s
5 406 M
(37.\(FEATURE - PoC WordNet Visualizer Closure DONE\) Above multiplanar hypergraph is quite relat) s
5 395 M
(ed as a theoretical construct to a Pushdown Automata for Context Free Grammar. Also the Defini) s
5 384 M
(tion Graph Construction using Recursive Gloss Overlap is a Context-Sensitive counterpart of Pa) s
5 373 M
(rse Trees obtained for Context Free Grammar, but ignoring Parts-Of-Speech Tagging and relying ) s
5 362 M
(only on the relation between words or concepts within each sentence of the document which is m) s
5 351 M
(apped to a multipartite or general graph. Infact this Definition Graph and Concept Hypergraph ) s
5 340 M
(constructed above from indegrees quite resemble a Functional Programming Paradigm where each r) s
5 329 M
(elationship edge is a Functional Program subroutine and the vertices are the parameters to it.) s
5 318 M
( Thus a hyperedge could be visualized as Composition Operator of Functional Programs including) s
5 307 M
( FP routines for Parts-of-Speech if necessary [WordNet or above Concept Hypergraph can be stre) s
5 296 M
(ngthened with FPs like LISP, Haskell etc.,]. RecursiveNeuralNetworks\(MV-RNN and RNTN\) have a n) s
5 285 M
(otion of compositionality quite similar to Functional Programming in FPs \(Reference: http://nl) s
5 274 M
(p.stanford.edu/~socherr/EMNLP2013_RNTN.pdf \) but for tree structures. Applying the composition) s
5 263 M
(ality for Concept Hypergraphs constructed above using FPs is a possible research direction.) s
5 241 M
(38.\(THEORY\) But above is not context free because context is easily obtainable from the hypere) s
5 230 M
(dge which connects multiple classes. As an experimental gadget above seems to represent an alt) s
5 219 M
(ernative computational model for context sensitivity and also process of human thought. This n) s
5 208 M
(eeds HyperEdge Search algorithms for hypergraph. A Related Neuropsychological notion of Hippoc) s
5 197 M
(ampus Memory Allocation in Human Brain can be found in http://people.seas.harvard.edu/~valiant) s
5 186 M
(/Hippocampus.pdf. Also a similar gadget is a special case of Artificial Neural Network - http:) s
5 175 M
(//en.wikipedia.org/wiki/Hopfield_network - Hopfield Network - used to model human associative ) s
5 164 M
(memory \(pattern based memory retrieval than address based retrieval\). Hyperedges of the above ) s
5 153 M
(hypergraph can be memory vectors retrieved in an associative memory.) s
5 131 M
(39.\(THEORY\) An interesting academic question to pose is - "Does the above hypergraph have a st) s
5 120 M
(rong connectivity and a diameter upperbounded by a constant?". Equivalently, is the collection) s
5 109 M
( of universal knowledge close-knit or does nature connect seemingly unrelated concepts beyond ) s
5 98 M
(what is "observable"? For example, path algorithms for Hypergraphs etc., can be applied to che) s
5 87 M
(ck s-t connectivity of two concepts. Some realworld linear programming and optimization proble) s
5 76 M
(ms which have strong natural applications are KnapSack problem,Tiling Problem or Packing probl) s
5 65 M
(em that occur in everyday life of humanbeings \(packing items for travel, arranging on a limite) s
5 54 M
(d space etc.,\). Thus the concept hypergraph might have a path connecting these.  ) s
5 32 M
(40.\(THEORY\) A recent result of Rubik's cube \(http://www.cube20.org/\) permutations to get solut) s
5 21 M
(ion having a constant upperbound \(of approximately 20-25 moves\) indicates this could be true \() s
5 10 M
(if all intermediary states of Rubik's transitions are considered as vertices of a convex polyt) s
_R
S
%%Page: (44) 44
%%BeginPageSetup
_S
18 36 translate
/pagenum 44 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (44) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ope of Concepts then isn't this just a Simplex algorithm with constant upperbound? Is every co) s
5 681 M
(ncept reachable from any other within 20-25 moves? Or if the above hypergraph is considered as) s
5 670 M
( a variant of Rubik's Cube in higher dimensions, say "Rubik's Hypercube" then is every concept) s
5 659 M
( node reachable from the other within 20 logical implication moves or is the diameter upperbou) s
5 648 M
(nded by 20?\).  Most problems for hypergraph are NP-Complete which are in P for graphs thus mak) s
5 637 M
(ing lot of path related questions computationally harder. Counting the number of paths in hype) s
5 626 M
(rgraph could be #P-Complete. There was also a recent study on constant upperbound for intercon) s
5 615 M
(nectedness of World Wide Web document link graph which further substantiates it \(http://www9.o) s
5 604 M
(rg/w9cdrom/160/160.html - paragraph on diameter of the Strongly Connected Component Core of WW) s
5 593 M
(W\). Probably this is a special case of Ramsey theory that shows order emerging in large graphs) s
5 582 M
( \(monochromatic subgraphs in an arbitrary coloring of large graph\).) s
5 560 M
(41.\(THEORY\) Mapping Rubik's Cube to Concept Wide Hypergraph above - Each configuration in Rubi) s
5 549 M
(k's Cube transition function can be mapped to a class stack node in the Concept Hypergraph. In) s
5 538 M
( other words a feature vector uniquely identifies each node in each class stack vertex of the ) s
5 527 M
(Hypergraph. Thus move in a Rubik's cube is nothing but the hyperedge or a part of the hyperedg) s
5 516 M
(e that contains those unique vectors. Thus hyperedges signify the Rubik's cube moves. For exam) s
5 505 M
(ple if each class stack vertex is denoted as c\(i\) for i-th class and each element of the stack) s
5 494 M
( is denoted by n\(i\) i.e. nth element of stack for class i, then the ordered pair [c\(i\),n\(i\)] u) s
5 483 M
(niquely identifies a node in class stack and correspondingly uniquely identifies an instantane) s
5 472 M
(ous face configuration of a Rubik's Hypercube\(colored subsquares represent the elements of the) s
5 461 M
( feature vector\). Thus any hyperedge is a set of these ordered pairs that transcend multiple c) s
5 450 M
(lass stacks.) s
5 428 M
(42.\(THEORY\) The Multiplanar Primordial Field Turing Machine model described by the author in ") s
5 417 M
(Theory of Shell Turing Machines" in [http://sites.google.com/site/kuja27/UndecidabilityOfFewNo) s
5 406 M
(nTrivialQuestions.pdf?attredirects=0] with multiple dimensions seems to be analogous to the ab) s
5 395 M
(ove. If dimension info is also added to each plane in above hypergraph then both above formula) s
5 384 M
(tions and Shell Turing Machines look strikingly similar. One more salient feature of this hype) s
5 373 M
(rgraph is that each class node stack indirectly encodes timing information for events from bot) s
5 362 M
(tom to top of the stack and height of each stack independently varies. Thus this is more than ) s
5 351 M
(just a hypergraph. There also exists a strong similarity with Evocation WordNet \(one word "rem) s
5 340 M
(inding" or "evocative" of the other\) - http://wordnet.cs.princeton.edu/downloads.html - differ) s
5 329 M
(ence being above is a hypergraph of facts or concepts rather than just words. The accuracy of ) s
5 318 M
(sense disambiguation is high or even 100% because context is the hyperedge and also depends on) s
5 307 M
( how well the hyperedges are constructed connecting the class stack vertices.) s
5 285 M
(43.\(THEORY\) Instead of a wordnet if a relationship amongst logical statements \(First Order Log) s
5 274 M
(ic etc.,\) by logical implication is considered then the above becomes even more important as t) s
5 263 M
(his creates a giant Concept Wide Web as mentioned in [http://sourceforge.net/projects/acadpdra) s
5 252 M
(fts/files/ImplicationGraphsPGoodEquationAndPNotEqualToNPQuestion_excerpts.pdf/download] and th) s
5 241 M
(us is an alternative knowledge representation algorithm.) s
5 219 M
(44.\(THEORY\)  Implication graphs of logical statements can be modelled as a Random Growth Netwo) s
5 208 M
(rk where a graph is randomly grown by adding new edges and vertices over a period of learning.) s
5 197 M
( ) s
5 175 M
(45.\(THEORY\)  If a statistical constraint on the degree of this graph is needed, power law dist) s
5 164 M
(ributions \(Zipf, Pareto etc.,\) can be applied to the degrees of the nodes along with Preferent) s
5 153 M
(ial Attachment of newborn nodes.) s
5 131 M
(46.\(THEORY\) Set cover or Hitting Set of Hypergraph is a Transversal of hypergraph which is a s) s
5 120 M
(ubset of set of vertices in the hypergraph that have non-empty intersection with every hypered) s
5 109 M
(ge. Transversal of the above Concept Wide Hypergraph is in a way essence of the knowledge in t) s
5 98 M
(he hypergraph as in real world what this does is to grasp some information from each document ) s
5 87 M
(\(which is a hyperedge of class vertices\) and produces a "summary nucleus subgraph" of the know) s
5 76 M
(ledge of the encompassing hypergraph.) s
5 54 M
(47.\(THEORY\)  Random walk on the above concept hypergraph, Cover time etc., which is a markov p) s
5 43 M
(rocess. Probably, Cover time of the hypergraph could be the measure of time needed for learnin) s
5 32 M
(g the concept hypergraph.) s
5 10 M
(48.\(THEORY - IMPLEMENTATION - DONE\)  Tree decomposition or Junction Trees of concept hypergrap) s
_R
S
%%Page: (45) 45
%%BeginPageSetup
_S
18 36 translate
/pagenum 45 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (45) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(h with bounded tree width constant.[If Junction tree is constructed from Hypergraph modelled a) s
5 681 M
(s Bayesian Network, then message passing between the treenodes can be implemented, but still n) s
5 670 M
(eeds to be seen as what this message passing would imply for a junction tree of concept hyperg) s
5 659 M
(raph above.]. A tree width measure computing script for Recursive Gloss Overlap graph for a te) s
5 648 M
(xt document has been added in python-src/InterviewAlgorithm which is a standard graph complexi) s
5 637 M
(ty measure.) s
5 615 M
(49.\(THEORY\)  2\(or more\)-dimensional random walk model for thinking process and reasoning \(Socc) s
5 604 M
(er model in 2-dimensions\):) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(--------------------------) s
5 571 M
(As an experimental extension of point 47 for human reasoning process,  random walk on non-plan) s
5 560 M
(ar Concept hypergraph \(collective wisdom gained over in the past\) or a planar version of it wh) s
5 549 M
(ich is 2-dimensional can be theorized. Conflicts in human mind could mimick the bipartite comp) s
5 538 M
(eting sets that make it a semi-random walk converging in a binary "decision". Semi randomness ) s
5 527 M
(is because of the two competing sets that drive the "reasoning" in opposite directions. If the) s
5 516 M
( planar graph is generalized as a complex plane grid with no direction restrictions \(more than) s
5 505 M
( 8\), and the direction is anything between 0 to 2*pi radians, then the distance d after N step) s
5 494 M
(s is sqrt\(N\) \(summation of complex numbers and the norm of the sum\) which gives an expression ) s
5 483 M
(for decision making time in soccer model.\(related: http://web.archive.org/web/20041210231937/h) s
5 472 M
(ttp://oz.ss.uci.edu/237/readings/EBRW_nosofsky_1997.pdf\). In other words, if mental conflict i) s
5 461 M
(s phrased as "sequence of 2 bipartite sets of thoughts related by causation" then "decision" i) s
5 450 M
(s dependent on which set is overpowering. That is the corresponding graph vertices are 2-color) s
5 439 M
(ed, one color for each set and yet not exactly a bipartite graph as edges can go between nodes) s
5 428 M
( of same set. Brownian Motion is also a related to this. Points \(53.1\) and \(53.2\)  describe a ) s
5 417 M
(Judge Boolean Function \(with TQBF example\) which is also a decision making circuit for each vo) s
5 406 M
(ter in P\(Good\) summation with interactive prover-verifier kind of adversarial notions based on) s
5 395 M
( which a voter makes a choice.  ) s
5 384 M
( ) s
5 362 M
(##################################################################################) s
5 351 M
(C.      Slightly Philosophical - Inferences from conflicting opinions:) s
5 340 M
(################################################################################## ) s
5 318 M
(50. \(DONE\) As an example, if there are "likes" and "dislikes" on an entity which could be anyt) s
5 307 M
(hing under universe - human being, machine, products, movies, food etc., then a fundamental an) s
5 296 M
(d hardest philosophical question that naturally has evaded an apt algorithm: Is there a way to) s
5 285 M
( judge an entity in the presence of conflicting witnesses - "likes" and "dislikes" - and how t) s
5 274 M
(o ascertain the genuineness of witnesses. In http://arxiv.org/abs/1006.4458 and http://www.nis) s
5 263 M
(t.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf this has been the motiv) s
5 252 M
(ation for Interview Algorithm and P\(Good\) error probability for majority voting which is the b) s
5 241 M
(asis for this. Moreover the opinions of living beings are far from correct due to inherent bia) s
5 230 M
(s and prejudices which a machine cannot have.) s
5 208 M
(51. \(DONE\) Another philosophical question is what happens to the majority voting when every vo) s
5 197 M
(ter or witness is wrong intentionally or makes an error by innocous mistake.[http://sourceforg) s
5 186 M
(e.net/projects/acadpdrafts/files/ImplicationGraphsPGoodEquationAndPNotEqualToNPQuestion_excerp) s
5 175 M
(ts.pdf/download]. This places a theoretical limitation on validity of "perceptional judgement") s
5 164 M
( vis-a-vis the "reality".) s
5 142 M
(52. \(THEORY\) There is a realword example of the above - An entity having critical acclaim does) s
5 131 M
( not have majority acclaim often. Similarly an entity having majority acclaim does not have cr) s
5 120 M
(itical acclaim. Do these coincide and if yes, how and when? This could be a Gaussian where tai) s
5 109 M
(ls are the entities getting imperfect judgements and the middle is where majority and critical) s
5 98 M
( acclaim coincide.) s
5 76 M
(53. \(THEORY\) Items 50,51,52 present the inherent difficulty of perfect judgement or perfect in) s
5 65 M
(ference. On a related note,Byzantine algorithms have similar issues of deciding on a course of) s
5 54 M
( action in the presence of faulty processors or human beings and faulty communications between) s
5 43 M
( them. Thus, probably above problem reduces to Byzantine i.e Faulty human beings or machines v) s
5 32 M
(ote "like" or "dislike" on an entity and a decision has to be taken. This is also in a way rel) s
5 21 M
(ated to Boolean Noise Sensitivity where collective intelligence of an entity can be represente) s
5 10 M
(d as a "judging" boolean function and its decision tree. This "judge" boolean function accepts) s
_R
S
%%Page: (46) 46
%%BeginPageSetup
_S
18 36 translate
/pagenum 46 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (46) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( arguments from two opposing parties and outputs 1 or 0 in favour of one of them. How perfect ) s
5 681 M
(is this "judge" depends on NoiseSensitivity of its boolean function. Thus a perfect judge bool) s
5 670 M
(ean function is 100% NoiseStable even though attempts are made to confuse it through noise inp) s
5 659 M
(uts.) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(---------------------------) s
5 615 M
(53.1 \(THEORY\) Judge Boolean Function \(there doesn't seem to be an equivalent to this in litera) s
5 604 M
(ture - hence it is defined as below\):) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(---------------------------) s
5 571 M
(A Judge Boolean function f:\(0,1\)^n->\(0,1\) has two classes of input sets of bit sets \(x1,x2,x3,) s
5 560 M
(...\) and \(y1,y2,y3,...\) corresponding to two adversarial parties x and y and outputs 0 \(in fav) s
5 549 M
(or of x\) or 1 \(in favor of y\) based on the decision tree algorithm internal to f. Each xi and ) s
5 538 M
(yi are sets of bits and hence input is set of sets \(Intuitively such classes of boolean functi) s
5 527 M
(ons should be part of interactive proof systems.\). This function is quite relevant to P\(Good\) ) s
5 516 M
(summation because:) s
5 505 M
(        - LHS PRG/Dictator boolean function choice can also be thought of as randomly chosen J) s
5 494 M
(udge boolean function \(from a set of judge boolean functions\) defined above. NoiseStability of) s
5 483 M
( this Judge boolean function is its efficacy.) s
5 472 M
(        - In RHS, each voter has a judge boolean function above and NoiseStability of Boolean ) s
5 461 M
(Function Composition of Maj*Judge is its efficacy.) s
5 450 M
(        - An example: From https://sites.google.com/site/kuja27/InterviewAlgorithmInPSPACE.pdf) s
5 439 M
(?attredirects=0, Judge Boolean Function can be a Quantified Boolean Formula \(QBF\) i.e \(There e) s
5 428 M
(xists f\(xi\) \(For all g\(yk\) ...\(\(\(...\)\)\). Intuitively this simulates a debate transcript \(prove) s
5 417 M
(r-verifier\) between x and y that is moderated by the QBF judge boolean function. Of interest i) s
5 406 M
(s the NoiseStability of this QBF.) s
5 395 M
(        - QBF is PSPACE-complete and hence Judge Boolean Function is PSPACE-complete. ) s
5 384 M
(        - Thus LHS of P\(good\) is in PSPACE \(a pseudorandomly chosen Judge Boolean Function\) wh) s
5 373 M
(ile RHS of P\(good\) is still in PH=DC where each voter's Judge Boolean Function is fed into Maj) s
5 362 M
(ority circuit inputs, because, if the QBF is of finite depth then RHS is depth-restricted and ) s
5 351 M
(due to this RHS is in PH=DC. Thus if P\(Good\) probability is 1 on either side then there exists) s
5 340 M
( a PSPACE algorithm for PH implying PSPACE=PH than an intimidatingly unacceptable P=PH. If the) s
5 329 M
(re is no quantifier depth restriction on either side both LHS and RHS can grow infinitely maki) s
5 318 M
(ng both of them EXP. This makes Judge Boolean Function somewhat a plausible Voter Oracle than ) s
5 307 M
(simple boolean functions - each voter is intrinisically allowed an intelligence to make a choi) s
5 296 M
(ce amongst 2 adversaries.) s
5 285 M
(        - Since Judgement or Choice among two adversaries is a non-trivial problem, it is bett) s
5 274 M
(er to have each Voter's SAT in RHS and that of pseudorandom choice in LHS to be in the hardest) s
5 263 M
( of complexity classes known. Thus interpretation of convergence of P\(Good\) series depends on ) s
5 252 M
(hardness of judgement boolean function \(it could be from simple 2-SAT,3-SAT,k-SAT upto PSPACE-) s
5 241 M
(QBFSAT and could be even more upto Arithmetic Hierarchy\) some of which might have circuit_comp) s
5 230 M
(lexity\(LHS\) == circuit_complexity\(RHS\) while some might not. ) s
5 219 M
(        - Reference: QBF-SAT solvers and connections to Circuit Lower Bounds - [RahulSanthanam) s
5 208 M
(-RyanWilliams] - http://web.stanford.edu/~rrwill/QBFSAT_SODA15.pdf) s
5 197 M
(        - A complex Judging scenario: Doctrinal Paradox \(or\) Discursive dilemma - Paradoxes in) s
5 186 M
( Majority voting where both Yes and No are possible in judgement aggregations - https://en.wik) s
5 175 M
(ipedia.org/wiki/Discursive_dilemma. [Open question: What is the majority circuit or boolean eq) s
5 164 M
(uivalent of such a paradox with both Yes and No votes]) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(---------------------------) s
5 120 M
(53.2 \(THEORY\) P\(Good\) Convergence, Voter TQBF function, PH-completeness and EXP-completeness -) s
5 109 M
( Adversarial reduction) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(---------------------------) s
5 76 M
(P\(Good\) RHS is in PH if depth restricted and in EXP if depth unrestricted. LHS is a pseudorand) s
5 65 M
(omly chosen Judge Boolean Function. PH-completeness or EXP-completeness of RHS remains to be p) s
5 54 M
(roven \(if not obvious\). PH is the set of all problems in polynomial hierarchy - PH=U sigma\(p,i) s
5 43 M
(\). For every i there exists a problem in sigma\(p,i\) that is sigma\(p,i\)-complete. If there exis) s
5 32 M
(ts a PH-complete problem then PH collapses to sigma\(p,i\) for some level i.[Arijit Bishnu - htt) s
5 21 M
(p://www.isical.ac.in/~arijit/courses/spring2010/slides/complexitylec12.pdf] . Hence it remains) s
5 10 M
( an open question if there exists a PH-complete problem. Thus instead of depth restriction, th) s
_R
S
%%Page: (47) 47
%%BeginPageSetup
_S
18 36 translate
/pagenum 47 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (47) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(e hardest depth unrestricted EXP circuit class\(EXP=DC\) is analyzed as a Judge Boolean Function) s
5 681 M
(. There are known EXP-complete problems e.g. Generalized Chess with n*n board and 2n pawns - [) s
5 670 M
(Fraenkel - http://www.ms.mff.cuni.cz/~truno7am/slozitostHer/chessExptime.pdf]. In RHS, each vo) s
5 659 M
(ter has a Judge Boolean Function, output of which is input to Majority circuit. This Judge Boo) s
5 648 M
(lean Function can be shown to be EXP-complete by reduction from Chess. Reduction function is a) s
5 637 M
(s below:) s
5 626 M
(Each Voter can be thought of as simulator of both adversaries in Chess i.e Voter TQBF has two ) s
5 615 M
(sets of inputs x1,x2,x3,... and y1,y2,y3,... Each xi is a move of adversary1-simulated-by-vote) s
5 604 M
(r while each yi is a move of adversary2-simulated-by-voter. Voter thus makes both sides of mov) s
5 593 M
(es and votes for x or y depending on whichever simulation wins. Thus there is a reduction from) s
5 582 M
( generalized Chess EXP-complete problem to Voter Judge Boolean Function \(special cases of Ches) s
5 571 M
(s with n constant are PSPACE-complete\). Hence RHS is a Majority\(n\) boolean function composed w) s
5 560 M
(ith EXP-complete Judge Boolean Function \(assumption: voters vote in parallel\). When P\(Good\) su) s
5 549 M
(mmation converges to 1\(i.e Judge Boolean Function has zero noise and 100% stability existence ) s
5 538 M
(of which is still an open problem\), LHS is an EXP-complete algorithm for RHS which is harder t) s
5 527 M
(han EXP-complete - it is still quite debatable as to how to affix notation to above RHS - prob) s
5 516 M
(ably it is P/EXP\(access to an oracle circuit\) or P*EXP\(composition\).RHS of P\(Good\) belongs to ) s
5 505 M
(a family of hardest of boolean functions. [Kabanets - http://www.cs.sfu.ca/~kabanets/papers/th) s
5 494 M
(es-double.pdf] describes various classes of hard boolean functions and Minimum Circuit Size Pr) s
5 483 M
(oblem [is there a circuit of size at most s for a boolean function f] and also constructs a re) s
5 472 M
(ad-once\(each variable occurs once in the branching\) branching program hard boolean function [R) s
5 461 M
(ead-Once Branching Programs - http://www.math.ias.edu/~avi/PUBLICATIONS/MYPAPERS/RWY97/proc.pd) s
5 450 M
(f, Bounded Width polysize Branching Programs and non-uniform NC1 - http://www.complexity.ethz.) s
5 439 M
(ch/education/Lectures/ComplexityHS10/ScriptChapterTwelve] . In a general setting, RHS of P\(Goo) s
5 428 M
(d\) summation is m-EXP-complete \(staircase exponents\). RHS always has a fixed complexity class ) s
5 417 M
(\(PH-complete or EXP-complete or NEXP-complete if RHS is non-deterministically evaluated\) while) s
5 406 M
( only complexity class of LHS changes due to pseudorandomly chosen Judge Boolean Function. Eve) s
5 395 M
(n Go is EXP-complete which has close to 10^170 possibilities which is greater than chess - sam) s
5 384 M
(e person simulates both sides of adversaries and captures territory by surrounding.) s
5 362 M
(A special case of Complexity of Quantified 3-CNF Boolean Forumlas is analyzed in http://eccc.h) s
5 351 M
(pi-web.de/report/2012/059/download/ - if 3CNF quantified boolean formulas of n variables and p) s
5 340 M
(oly\(n\) size can be decided in 2^\(n-n^\(0.5+e\)\) time deterministically, NEXP is not contained in) s
5 329 M
( NC1/poly. This has direct implications for P\(Good\) majority voting circuit - if LHS is 100% n) s
5 318 M
(oise stable NC1/poly percolation boolean function circuit and RHS is Quantified 3-CNF QBFs as ) s
5 307 M
(Judge Boolean Functions decidable in 2^\(n-n^\(0.5+e\)\) time then, since NEXP in RHS can not have) s
5 296 M
( NC1/poly circuits, RHS P\(Good\) summation shouldn't be equal to LHS which implies that RHS NEX) s
5 285 M
(PTIME Quantified 3-CNF decidable in 2^\(n-n^\(0.5+e\)\) time cannot be 100% noise stable. There ar) s
5 274 M
(e other NEXP-complete problems viz., Succinct 3-SAT. The 100% noise stability regime for perco) s
5 263 M
(lation boolean function is described in [http://arxiv.org/pdf/1102.5761.pdf - page 68]) s
5 241 M
(Depth Hierarchy Theorem ,a recent result in 2015 in http://arxiv.org/pdf/1504.03398.pdf proved) s
5 230 M
( PH to be infinite relative to some and random oracles i.e PH does not collapse with respect t) s
5 219 M
(o oracles, which mounts the evidence in favour of non-existence of PH-Complete problems, but d) s
5 208 M
(oes not rule them out.) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(-----------------) s
5 164 M
(53.3 \(THEORY- *IMPORTANT* \) Conditions for complexity classes of LHS and RHS of P\(Good\) summat) s
5 153 M
(ion being equated) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(-----------------) s
5 120 M
(RHS of P\(Good\) is either PH-complete or EXP-complete as mentioned in 53.2.) s
5 109 M
(LHS of P\(Good\) is a pseudorandomly chosen Judge Boolean Function while RHS is a huge mixture o) s
5 98 M
(f judge boolean functions of almost all conceivable complexity classes depending on voter whic) s
5 87 M
(h together make the DC-circuit. LHS thus can belong to any of the complexity classes depending) s
5 76 M
( on the pseudorandom choice.) s
5 54 M
(Probability of LHS Judge Boolean Function belonging to a complexity class C with NoiseStabilit) s
5 43 M
(y p is =) s
5 32 M
(Probability of LHS PRG choice Judge Boolean Function in complexity class C * Probability of Go) s
5 21 M
(odness in terms of NoiseStability of PRG choice =) s
5 10 M
( c/n * p where c is the number of judge boolean functions in complexity class C and n is the t) s
_R
S
%%Page: (48) 48
%%BeginPageSetup
_S
18 36 translate
/pagenum 48 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (48) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(otal number of judge boolean functions) s
5 670 M
(When p=1 and c=n LHS is 1 and is a complexity class C algorithm to RHS PH-complete or EXP-comp) s
5 659 M
(lete DC circuit when RHS P\(Good\) summation in terms of NoiseStabilities also converges to 1. T) s
5 648 M
(hus complexity_class\(LHS\) has a very high probability of being unequal to complexity_class\(RHS) s
5 637 M
(\). This is the perfect boolean function problem \(in point 14 above\) rephrased in probabilities) s
5 626 M
(. This is very tight condition as it requires:) s
5 615 M
(  - boolean function composition in RHS is in some fixed circuit complexity class \(PH-complete) s
5 604 M
( or EXP-complete\) and only LHS complexity class varies depending on pseudorandom choice) s
5 593 M
(  - LHS has to have 100% noise stability) s
5 582 M
(  - RHS has to have 100% noise stability) s
5 571 M
(Thus above conditions are to be satisified for equating complexity classes in LHS and RHS to g) s
5 560 M
(et a lowerbound result. Also convergence assumes binomial complementary cumulative mass distri) s
5 549 M
(bution function as mentioned in 14 above which requires equal probabilities of successes for a) s
5 538 M
(ll voters \(or equal noise stabilities for all voter boolean functions\). Hence voters may have ) s
5 527 M
(different decision boolean functions but their noise stabilities have to be similar. If this i) s
5 516 M
(s not the case, P\(Good\) series becomes a Poisson trial with unequal probabilities.) s
5 494 M
(If LHS and RHS of P\(Good\) are not equatable, probability of goodness of LHS and RHS can vary i) s
5 483 M
(ndependently and have any value. LHS and RHS are equatable only if the probability of goodness) s
5 472 M
( \(in terms of noise stabilities on both sides\) is equal on both sides. \(e.g 0.5 and 1\). Basica) s
5 461 M
(lly what this means is that LHS is an algorithm as efficient as that of RHS. If a pseudorandom) s
5 450 M
( choice judge boolean function has 100% noise stability then such a choice is from the huge se) s
5 439 M
(t of boolean functions on RHS .This is an assumption based on the fact that any random choice ) s
5 428 M
(process has to choose from existing set. Also when LHS pseudorandom judge boolean function cho) s
5 417 M
(ice is 100% noise stable, if RHS had LHS as one of its elements it would have forced RHS to be) s
5 406 M
( 100% and noise stabilities of all other judge boolean functions in RHS to 0%. Because of this) s
5 395 M
( RHS has to exclude LHS pseudorandom choice judge boolean function. That is:) s
5 384 M
(        cardinality\(RHS\) + cardinality\(LHS\) = cardinality\(Universal set of judge boolean funct) s
5 373 M
(ions\) \(or\)) s
5 362 M
(        cardinality\(RHS\) + 1 = cardinality\(Universal set\)) s
5 351 M
(which is the proverbial "one and all". ) s
5 329 M
(Assuming there exists a boolean percolation function with noise stability 100%, voter with suc) s
5 318 M
(h a boolean function could be a pseudorandom choice in LHS and RHS has to exclude this functio) s
5 307 M
(n.) s
5 285 M
(--------------------------------------------------------------------------------------------) s
5 274 M
(53.4 \(THEORY\) Variant 1 of Percolation as a Judge boolean function \(related to 14 above\)) s
5 263 M
(--------------------------------------------------------------------------------------------) s
5 252 M
(Percolation boolean function returns 1 if there is a left-right crossing event in a path withi) s
5 241 M
(n the Z^2 grid random graph else 0. The definition of percolation is modified slightly as belo) s
5 230 M
(w to obtain a ranking of 2 adversaries:) s
5 219 M
(There are n parameters on which the voter or a judge weighs two adversaries a and b \(each take) s
5 208 M
( the 2 coordinates in the grid\) and scores them as set of ordered pairs \(a1,b1\),\(a2,b2\),\(a3,b3) s
5 197 M
(\),...,\(an,bn\) where each ai is the score given by voter for adversary a on parameter i and eac) s
5 186 M
(h bi is the score given by voter for adversary n on parameter i. These coordinates are plotted) s
5 175 M
( on the grid and a left-right traversal of these coordinates is done via a path that covers al) s
5 164 M
(l of them. At each coordinate, total score summations of ai\(s\) and bi\(s\) so far traversed are ) s
5 153 M
(computed. The boolean function outputs 1 if sum\(ai\) > sum\(bi\) favouring adversary a and output) s
5 142 M
(s 0 if sum\(ai\) < sum\(bi\) favouring adversary b. This is just a 2 candidate ranking variant of ) s
5 131 M
(3-candidate condorcet elections. In terms of circuit complexity, this is an iterated integer a) s
5 120 M
(ddition circuit\(in non-uniform NC1\) which inputs to a comparator circuit\(in AC0 - [Chandra-Sto) s
5 109 M
(ckmeyer-Vishkin] - http://cstheory.com/stockmeyer@sbcglobal.net/csv.pdf\) which together make n) s
5 98 M
(on-uniform NC1 \(since AC0 is contained in NC1\). Thus this variant of percolation decides based) s
5 87 M
( on sum of integral scores than left-right crossing. It always has a left-right crossing and t) s
5 76 M
(here are no random graph edges.) s
5 54 M
(---------------------------------------------------------------------------------------------) s
5 43 M
(53.5 \(THEORY\) Variant 2 of Percolation as a Judge boolean function \(related to 14 above\)) s
5 32 M
(---------------------------------------------------------------------------------------------) s
5 21 M
(53.5.1 Both x and y axes have the criteria common to both adversaries a and b as coordinates.) s
5 10 M
(53.5.2 If adversary a is equal to b for a criterion c, then there is a horizontal left-right e) s
_R
S
%%Page: (49) 49
%%BeginPageSetup
_S
18 36 translate
/pagenum 49 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (49) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(dge with probability p.) s
5 681 M
(53.5.3 If adversary b is better than a for criterion c, then there is a vertical edge \(down-to) s
5 670 M
(p\) with probability p.) s
5 659 M
(53.5.4 If adversary a is better than b for criterion c, then there is a vertical edge \(top-dow) s
5 648 M
(n\) with probability p.) s
5 637 M
(-----------------) s
5 626 M
(53.5.5 Example 1:) s
5 615 M
(-----------------) s
5 604 M
(criterion    a    b) s
5 593 M
(c1           5    4 \(top-down\)) s
5 582 M
(c2           3    5 \(down-top\)) s
5 571 M
(c3           2    2 \(left-right\)) s
5 560 M
(c4           4    6 \(down-top\)) s
5 549 M
(c5           7    8 \(down-top\)) s
5 538 M
(        --------------------) s
5 527 M
(            21    25  \(a < b\)) s
5 516 M
(        --------------------) s
5 505 M
(----------------) s
5 494 M
(53.5.6 Example 2:) s
5 483 M
(----------------) s
5 472 M
(criterion    a    b) s
5 461 M
(c1           2    1 \(top-down\)) s
5 450 M
(c2           7    2 \(top-down\)) s
5 439 M
(c3           5    5 \(left-right\)) s
5 428 M
(c4           3    8 \(down-top\)) s
5 417 M
(c5           9    7 \(top-down\)) s
5 406 M
(        ---------------------) s
5 395 M
(            26    23  \(a > b\)) s
5 384 M
(        ---------------------) s
5 373 M
(53.5.7 Length of each edge is proportional to the difference between score\(a\) and score\(b\) at ) s
5 362 M
(criterion c.) s
5 351 M
(53.5.8 Lemma: a is better than b implies a top-down crossing event and b is better than a impl) s
5 340 M
(ies down-top crossing event.) s
5 329 M
(Proof: If a is better than b in majority of the criteria then the path is more "top-down"-ish ) s
5 318 M
(due to 53.5.4 \(top-left to bottom-right\) and if b is better than a then path is more "down-top) s
5 307 M
("-ish due to 53.5.3 \(bottom-left to top-right\). Thus this formulation of percolation subdivide) s
5 296 M
(s left-right paths into two classes top-down and down-top and all paths are left-right paths.) s
5 285 M
(53.5.9 Above variant of percolation boolean function returns 1 if path is top-down \(a > b\) els) s
5 274 M
(e 0 if path is down-top \(a < b\).) s
5 263 M
(53.5.10 Previous description is an equivalence reduction of percolation and judging two advers) s
5 252 M
(aries.) s
5 241 M
(53.5.11 To differentiate top-down and down-top left-right paths, comparator circuits \(constant) s
5 230 M
( depth, polysize\) and non-uniform NC1 circuit for integer addition of scores are required. Tog) s
5 219 M
(ether this is also a non-uniform NC1 circuit \(for infinite grid\) similar to Variant1 in 53.4.) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(-----------) s
5 175 M
(53.6 \(THEORY\) Circuit for Percolation as a Judge Boolean Function) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(-----------) s
5 142 M
(For an m * m grid with random edges, maximum length of the left-right path is m^2 \(traverses a) s
5 131 M
(ll grid cells\). Each boolean function is a path that is represented as set of coordinates on g) s
5 120 M
(rid. If these coordinates form a left-right crossing, then circuit has value 1. Each coordinat) s
5 109 M
(e on the grid requires 2logm bits. Hence maximum input bits required is m^2 * 2logm = O\(m^2*lo) s
5 98 M
(gm\). Coordinates are sorted on left coordinate left-right ascending by a Sorting Netwok \(e.g B) s
5 87 M
(atcher-sortingnetworks, Ajtai-Komlos-Szemeredi-AKS-sortingnetworks, Parallel Bitonic Sort - ht) s
5 76 M
(tp://web.mst.edu/~ercal/387/slides/Bitonic-Sort97.pdf\). This function outputs, with the sorted) s
5 65 M
( coordinates as inputs:) s
5 54 M
(  - 1 if both x-axis coordinate of the leftmost ordered pair is 0 and x-axis coordinate of the) s
5 43 M
( rightmost ordered pair is m) s
5 32 M
(  - else 0) s
5 21 M
(which requires comparators. Sorting networks of depth O\(\(logn\)^2*n\) and size O\(n\(logn\)^2\) exis) s
5 10 M
(t for algorithms like Bitonic sort, Merge sort, Shell sort et.,. AKS sorting network is of O\(l) s
_R
S
%%Page: (50) 50
%%BeginPageSetup
_S
18 36 translate
/pagenum 50 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (50) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ogn\) depth and O\(nlogn\) size. For n=m^2, AKS sorting network is of O\(log\(m^2\)\) depth and O\(m^2) s
5 681 M
(log\(m^2\)\) size. Thus percolation circuit consists of:) s
5 670 M
(  - Sorting network that sorts the coordinates left-right in NC1 or NC2) s
5 659 M
(  - Comparator circuits in constant depth and polynomial size) s
5 648 M
(which together are in NC. This is non-uniform NC with advice strings as the circuit depends on) s
5 637 M
( percolation grid - e.g BP.\(NC/log\) where advice strings are the grid coordinates and the circ) s
5 626 M
(uit has bounded error \(Noise+delta\). [If the left-right paths are classified as top-down and d) s
5 615 M
(own-top paths for ranking two adversaries \(in 53.5 above\) additional comparator circuits are r) s
5 604 M
(equired for finding if right coordinate is in top or down half-space. This is by comparing the) s
5 593 M
( y-axis of the leftmost and rightmost in sorted ordered pairs and output 1 if y-axis of leftmo) s
5 582 M
(st lies between m/2 and m and y-axis of rightmost lies between 0 and m/2 \(top-down\) and output) s
5 571 M
( 0 else \(down-top\).]) s
5 549 M
(Above percolation circuit based on Sorting networks is not optimal for arbitrarily large input) s
5 538 M
(s. As per Noise Stability Regime [page 68 - http://arxiv.org/pdf/1102.5761.pdf - Christophe Ga) s
5 527 M
(rban, Jeffrey E.Steif], for epsilon=o\(1/n^2*alpha4\), Pr[fn\(crossing event sequence\)=fn\(crossin) s
5 516 M
(g event sequence with epsilon perturbation\)] tends to zero at infinity where alpha4 is the fou) s
5 505 M
(r-arm crossing event probability \(paths cross at a point on the percolation random graph creat) s
5 494 M
(ing four arms to the boundary from that point\). In terms of fourier expansion coefficients thi) s
5 483 M
(s is: summation\(fourier_coeff\(S\)^2\) tending to zero, |S| > n^2*alpha4. Circuit for this arbitr) s
5 472 M
(arily large percolation grid would be infinitely huge though can be termed as non-uniform NC s) s
5 461 M
(orting-network+comparator and hence a non-uniform circuit for an undecidable problem. Noise st) s
5 450 M
(ability tending to zero depends not just on input, but on "infinite-input".) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(----------) s
5 406 M
(53.7 \(THEORY\) P/Poly and P\(Good\) LHS and RHS - Karp-Lipton and Meyer's Theorems) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(----------) s
5 373 M
(P/poly is the circuit class of polynomial size with polynomial advice strings and unrestricted) s
5 362 M
( depth. Thus P/poly is non-uniform circuit class.  Hence non-uniform NC is in P/poly. In 53.4,) s
5 351 M
( 53.5 and 53.6 example non-uniform NC1 circuits \(subject to 100% noise stablility\) Percolation) s
5 340 M
( boolean function were described. These are in P/poly as non-uniform NC is in P/poly and thus ) s
5 329 M
(LHS of P\(Good\) is in P/poly. Hence when LHS and RHS binomial coefficient summations converge t) s
5 318 M
(o 100% noise stability satisfying the conditions in 53.3, LHS is a P/poly algorithm to RHS EXP) s
5 307 M
(TIME DC uniform circuit \(because both sides are depth unrestricted\). To be precise LHS is an N) s
5 296 M
(C/poly circuit. If the advice string is logarithmic size, it is NC/log and there is a known re) s
5 285 M
(sult which states that NP in P/log implies P=NP. For percolation boolean functions with 100% n) s
5 274 M
(oise stability regime \(page 68 - http://arxiv.org/pdf/1102.5761.pdf\), if the grid boundaries a) s
5 263 M
(re the only advice strings, boundary coordinates can be specified in log\(N\) bits and hence LHS) s
5 252 M
( is in NC/log.) s
5 230 M
(If RHS is simply NP \(if depth restricted and unlikely for arbitrary number of electorate\) then) s
5 219 M
( LHS is a P/poly algorithm to RHS NP implying NP is contained in P/poly. By Karp-Lipton theore) s
5 208 M
(m NP in P/poly implies that PH collapses to second-level i.e sigma\(p,2\) and from [Arvind, Vikr) s
5 197 M
(aman; K\303\266bler, Johannes; Sch\303\266ning, Uwe; Schuler, Rainer \(1995\)] NP in P/poly implies AM=MA.) s
5 175 M
(EXPTIME version of this is Meyer's Theorem which states that if EXPTIME is in P/poly \(which is) s
5 164 M
( the hardest case for RHS of P\(good\) and can be m-EXPTIME\) then EXPTIME = sigma\(p,2\) \\intersec) s
5 153 M
(tion pi\(p,2\) and EXPTIME=MA. When RHS of P\(good\) is a DC uniform EXPTIME circuit, P\(good\) conv) s
5 142 M
(ergence subject to availability of 100% noise stable percolation boolean functions satisfying ) s
5 131 M
(conditions in 53.3, implies that EXPTIME=MA.) s
5 109 M
(References:) s
5 98 M
(----------) s
5 87 M
(53.7.1 Relation between NC and P/poly - http://cs.stackexchange.com/questions/41344/what-is-th) s
5 76 M
(e-relation-between-nc-and-p-poly) s
5 65 M
(53.7.2 P/poly - https://en.wikipedia.org/wiki/P/poly) s
5 54 M
(53.7.3 Karp-Lipton Theorem - https://en.wikipedia.org/wiki/Karp%E2%80%93Lipton_theorem) s
5 43 M
(53.7.4 NP in P/poly implies AM=MA - [Arvind, Vikraman; K\303\266bler, Johannes; Sch\303\266ning, Uwe; Schu) s
5 32 M
(ler, Rainer \(1995\),] - http://www.informatik.hu-berlin.de/forschung/gebiete/algorithmenII/Publ) s
5 21 M
(ikationen/Papers/ma-am.ps.gz) s
5 10 M
(53.7.5 BPP,PH,P/poly,Meyer's theorem etc., - http://www.cs.au.dk/~arnsfelt/CT10/scribenotes/le) s
_R
S
%%Page: (51) 51
%%BeginPageSetup
_S
18 36 translate
/pagenum 51 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (51) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(cture9.pdf) s
5 681 M
(53.7.6 Descriptive Complexity - https://books.google.co.in/books?id=kWSZ0OWnupkC&pg=PA177&lpg=) s
5 670 M
(PA177&dq=NC1/poly&source=bl&ots=6oGGZVk4fa&sig=Y_4syLFZ-nTj4L0qrBxxWve75EA&hl=en&sa=X&ved=0CBs) s
5 659 M
(Q6AEwAGoVChMI66v6tqqSyQIVyZCOCh2uMwyr) s
5 648 M
(53.7.7 Non-uniform computation - https://courses.engr.illinois.edu/cs579/sp2009/slides/cc-s09-) s
5 637 M
(lect10.pdf) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(-----------------------------) s
5 593 M
(53.8 \(THEORY\) An example Majority+SAT majority voting circuit, P\(Good\) convergence and some ob) s
5 582 M
(servations on Noise Stability) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(-----------------------------) s
5 549 M
(Let the number of voters be 8 \(=2^3\). Each voter has a boolean function of 3 variables - x1,x2) s
5 538 M
( and x3. From Boolean Function Composition, this is defined as Maj\(SAT1\(x1,x2,x3\),SAT2\(x1,x2,x) s
5 527 M
(3\),...,SAT8\(x1,x2,x3\)\). Each variable xi corresponds to a criterion i and xi=1 if and only if ) s
5 516 M
(the criterion i is satisfied in 2-candidate voting \(candidate0 and candidate1\). Thus all voter) s
5 505 M
(s should vote xi=1 if the candidate1 satisfies criterion xi. If some of the voters vote xi=0 e) s
5 494 M
(ven though the candidate1 satisifes criterion xi, then it becomes noise in the boolean functio) s
5 483 M
(n. This composition has exponential size in number of inputs \(32 = 2^3 + 3*2^3\) = O\(n*exp\(n\)\)\)) s
5 472 M
(. For negation NOT gates are allowed and it is not necessarily a monotone circuit. If the vari) s
5 461 M
(ables are different for each voter, there are 24 variables and circuit is polynomial in input ) s
5 450 M
(size - O\(n^k\).This illustrates the pivotality of noise when voters have a variable in common.) s
5 428 M
(If the RHS doesn't converge to 1 and thus is in BPP and Noise Stability of LHS is 100% \(e.g by) s
5 417 M
( PRG choice of a percolation function\) then LHS is a P/poly algorithm for RHS BPP. This implie) s
5 406 M
(s BPP is in P/poly , an already known amplification result. Infact this result implies somethi) s
5 395 M
(ng stronger: Since BPP is in P/poly, even if RHS doesn't converge, there is always a P/poly al) s
5 384 M
(gorithm in LHS by amplification.) s
5 362 M
(If the RHS has a perfect k-SAT boolean decision function for all voters, size of the circuit i) s
5 351 M
(s super-polynomial and sub-exponential\(if exponential, circuit is DC uniform\), P\(Good\) series ) s
5 340 M
(converges to 100% and LHS is 100% noise stable Percolation function, then LHS is a P/poly algo) s
5 329 M
(rithm for RHS NP-complete instance. Special case is when RHS has only one voter - LHS is P/pol) s
5 318 M
(y \(or NC/poly or NC/log\) and RHS is NP-complete\(assuming k-SAT of RHS voter is 100% noise stab) s
5 307 M
(le\) - and thus there is a P/poly circuit for NP in such a special case. From [Karp-Lipton] \(53) s
5 296 M
(.7\) if NP is in P/poly, PH collapses to second level and AM=MA. If LHS is P/log and RHS is NP,) s
5 285 M
( then P=NP. Thus 100% noise stable boolean function in LHS has huge ramifications and the P\(Go) s
5 274 M
(od\) summation, its circuit version devour complexity arena in toto and variety of results can ) s
5 263 M
(be concluded subject to noise stability.) s
5 241 M
(If LHS of P\(Good\) is in NC/log \(Percolation as Judge boolean function\) and RHS doesn't converg) s
5 230 M
(e to 100% \(i.e Majority*SAT boolean function composition has < 100% noise stability\), LHS is a) s
5 219 M
( more efficient NC/log algorithm for RHS BP* hard circuit\(e.g RHS is single voter with a SAT j) s
5 208 M
(udge boolean function without 100% noise stability and thus in BPP\). BPP is already known to h) s
5 197 M
(ave P/poly circuits and this implies a better bound that BPP is in NC/log. BPP is not known to) s
5 186 M
( have complete problems in which case , NC/log algorithm for RHS BPP-complete problem would im) s
5 175 M
(ply NC/log = BPP for the single voter RHS with 3-SAT judging function with < 100% noise stabil) s
5 164 M
(ity.) s
5 142 M
(Subtlety 1: For single voter in RHS with a 3-SAT voter judge boolean function, RHS is NP-compl) s
5 131 M
(ete from voting complexity standpoint irrespective of noise stability\(Goodness of voting\). But) s
5 120 M
( if noise stability is the criterion and 3-SAT is not noise stable 100%, RHS is a BPP problem.) s
5 109 M
( This is already mentioned in point 14 above\(2 facets of voting - judging hardness and goodnes) s
5 98 M
(s\).) s
5 76 M
(Subtlety 2: [Impagliazzo-Wigderson] theorem states that if there exists a decision problem wit) s
5 65 M
(h O\(exp\(n\)\) runtime and Omega\(exp\(n\)\) circuit size, then P=BPP. P\(Good\) RHS being a DC uniform) s
5 54 M
( circuit can have exponential size if variables are common across voter judge boolean function) s
5 43 M
(s, but is questionable if it is a decision problem of runtime O\(exp\(n\)\) - for m-EXPTIME circui) s
5 32 M
(ts this bound could be O\(staircase_exp\(n\)\).) s
5 10 M
(NC/log circuits can be made into a uniform circuits by hardwiring advice strings which are log) s
_R
S
%%Page: (52) 52
%%BeginPageSetup
_S
18 36 translate
/pagenum 52 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (52) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(arithmic size. There are 2^\(log\(n\)\) = n advice strings possible for NC/log circuit with O\(logn) s
5 681 M
(\) depth and O\(n^k\) size. The n advice strings are added as hardwired gates into NC/log circuit) s
5 670 M
( which doesnot alter the polynomial size of the circuit. Due to this NC/log is in NC and hence) s
5 659 M
( in P. For NC/log LHS with 100% noise stability, if RHS is BPP-complete with < 100% noise stab) s
5 648 M
(ility, LHS is NC/log algorithm for BPP-complete problem \(or\) BPP is in NC/log and hence in P. ) s
5 637 M
(But P is in BPP. Together this implies P=BPP if LHS is NC/log and RHS is a BPP-complete majori) s
5 626 M
(ty voting circuit\(special case: one voter with less than 100% noise stability and 3-SAT boolea) s
5 615 M
(n function\). This leads to the question: Is there a 3-SAT voter judge boolean function with 10) s
5 604 M
(0% noise stability? Is percolation with 100% noise stability regime reducible to 3-SAT? If yes) s
5 593 M
(, then LHS [P/log, NC/log or P/poly] percolation boolean function with 100% noise stability so) s
5 582 M
(lves RHS NP-complete problem and hence NP is in P/poly, PH collapses to second level and AM=MA) s
5 571 M
( \(or\) NP is in [P/log, NC/log] and P=NP.) s
5 549 M
(References:) s
5 538 M
(----------) s
5 527 M
(53.8.1 Pseudorandomness - [Impagliazzo-Wigderson] - http://people.seas.harvard.edu/~salil/pseu) s
5 516 M
(dorandomness/pseudorandomness-Aug12.pdf) s
5 505 M
(53.8.2 XOR Lemma [Yao] and [Impagliazzo-Wigderson] theorem - theory.stanford.edu/~trevisan/pub) s
5 494 M
(s/stv99stoc.ps) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(---------------------) s
5 450 M
(53.9 \(THEORY\) Possible Scenarios in P\(Good\) LHS and RHS summation) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(---------------------) s
5 417 M
(53.9.1 LHS = RHS is 100%                -   LHS and RHS are equally efficient \(and can be equa) s
5 406 M
(ted to get a lowerbound if equal error implies a lowerbound which is still doubtful. More abou) s
5 395 M
(t this in 53.16\).) s
5 384 M
(53.9.2 LHS is < 100% and RHS is < 100%  -   RHS is more efficient than LHS and both sides are ) s
5 373 M
(in BP* classes) s
5 362 M
(and LHS < RHS) s
5 351 M
(53.9.3 LHS is < 100% and RHS is < 100%  -   LHS and RHS are equally efficient \(and can be equa) s
5 340 M
(ted to get a lowerbound if equal error implies a lowerbound which is still doubtful. More abou) s
5 329 M
(t this in 53.16\). Both are in BP* classes) s
5 318 M
(and LHS = RHS) s
5 307 M
(53.9.4 LHS is < 100% and RHS is < 100%  -   LHS is more efficient than RHS and both sides are ) s
5 296 M
(in BP* classes) s
5 285 M
(and LHS > RHS) s
5 274 M
(53.9.5 LHS is 100% and RHS is < 100%    -   LHS is more efficient than RHS. LHS is non-BP algo) s
5 263 M
(rithm to RHS BP* algorithm. \(e.g P/poly algorithm for BPP\)) s
5 252 M
(53.9.6 LHS is < 100% and RHS is 100%    -   RHS is more efficient than LHS. RHS is non-BP algo) s
5 241 M
(rithm to LHS BP* algorithm.) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(----------------------) s
5 197 M
(53.10 \(THEORY\) Dictatorship, k-juntas testing and P\(Good\) circuit - simulation) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(----------------------) s
5 164 M
(LHS of P\(Good\) is a pseudorandom choice judge boolean function. It has to be tested for dictat) s
5 153 M
(orship and k-junta property. This step adds to) s
5 142 M
(the hardness of LHS. What is the probability of LHS pseudorandom choice being a dictator or k-) s
5 131 M
(junta boolean function? This probability is independent of Goodness probability of LHS which i) s
5 120 M
(s the noise stability. If the size of the population is n and k out of n are having dictators ) s
5 109 M
(or k-juntas as judge boolean functions, probability of LHS being dictator or k-juntas is k/n. ) s
5 98 M
(Following steps are required:) s
5 87 M
(        - PRG Choice outputs a Judge boolean function candidate for LHS.) s
5 76 M
(        - Dictatorship or k-juntas testing algorithm is executed for this candidate PRG choice) s
5 65 M
(.) s
5 54 M
(Expected number of steps required for choosing a dictator via PRG is arrived at by Bernoulli t) s
5 43 M
(rial. Repeated PRG choices are made and property tested for dictatorship and k-juntas. Probabi) s
5 32 M
(lity of PRG choice being a dictator is k/n. Probability p\(t\) that after t trials a dictator or) s
5 21 M
( k-juntas is found:) s
5 10 M
(p\(t\) = \(1-k/n\)^\(t-1\)\(k/n\) = \(n-k\)^\(t-1\) * k/n^t) s
_R
S
%%Page: (53) 53
%%BeginPageSetup
_S
18 36 translate
/pagenum 53 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (53) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(If t is the random variable, expectation of t is:) s
5 670 M
(E\(t\) = sigma\(t*p\(t\)\) = sigma\(\(n-k\)^\(t-1\)*tk/n^t\)) s
5 648 M
(For a property testing algorithm running in O\(q\), time required in finding a dictator or k-jun) s
5 637 M
(tas is O\(q*sigma\(\(n-k\)^\(t-1\)*tk/n^t\)\)) s
5 615 M
(For k=0:) s
5 604 M
(        E\(t\) = 0) s
5 593 M
(For k=1:) s
5 582 M
(        E\(t\) = sigma\(\(n-1\)^\(t-1\) * t/n^t\) = 1/n + \(n-1\)*2/n^2 + \(n-1\)^2*3/n^3 + ...) s
5 571 M
(             < 1/n + 2n/n^2 + 3n^2/n^3 + ...) s
5 560 M
(             = 1+2+3+...+n/n) s
5 549 M
(             = n\(n+1\)/2n) s
5 538 M
(             = \(n+1\)/2) s
5 527 M
(Thus to find one dictator approximately \(n+1\)/2 PRG expected choices are required. Above is no) s
5 516 M
(t necessarily an exact process by which LHS arises but just a simulation of one special scenar) s
5 505 M
(io.) s
5 483 M
([Axiomatically k shouldn't be greater than 1 i.e there shouldn't be more than one dictator or ) s
5 472 M
(juntas. Philosophical proof of this is by contradiction. Every element in a population set is ) s
5 461 M
(subservient to a dictator by definition. The meaning of "dictator" here is global uniqueness f) s
5 450 M
(or all voters and not locally unique to a voter boolean function. If there are 2 dictators pop) s
5 439 M
(ulation-wide, this definition is violated.]) s
5 417 M
(References:) s
5 406 M
(-----------) s
5 395 M
(53.10.1 Dictatorship,k-juntas testing - [Oded Goldreich] - http://www.wisdom.weizmann.ac.il/~o) s
5 384 M
(ded/PDF/pt-junta.pdf) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(------------------------------) s
5 340 M
(\(THEORY-*IMPORTANT*\) 53.11 Hastad-Linial-Mansour-Nisan \(HLMN\) Theorem and Noise Stable boolean) s
5 329 M
( functions - Denoisification 1) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(------------------------------) s
5 296 M
(Hastad-Linial-Mansour-Nisan Theorem states that for a boolean function f:{0,1}^n->{0,1} comput) s
5 285 M
(ed by circuit of size < s and depth < d, if the) s
5 274 M
(fourier coefficients for large S are epsilon-concentrated:) s
5 263 M
(        sigma\(fourier_coeff\(S\)^2\) < epsilon for |S| > t where t = O\(\(log s/epsilon\)^\(1/d-1\)\).) s
5 252 M
(Above implies that:) s
5 241 M
(        t = O\(log s/epsilon\)^\(d-1\) = k*\(log s/epsilon\)^\(d-1\) for some constant k.) s
5 230 M
(        \(t/k\)^\(1/d-1\) = log\(s/epsilon\)) s
5 219 M
(        s = epsilon*2^\(\(t/k\)^1/\(d-1\)\)) s
5 208 M
(For a noisy boolean function f with rho probability of flip, the noise operator T is applied t) s
5 197 M
(o the Fourier expansion of f:) s
5 186 M
(        T\(f\) = sigma\(rho^|S|*fourier_coeff\(S\)*parity\(S\)\) for S in [n] and each Fourier coeffic) s
5 175 M
(ient of T\(f\) = rho^|S|*fourier_coeff\(S\)) s
5 164 M
(From HLMN theorem, applying noise operator above \(this needs to be verified\) to noisy boolean ) s
5 153 M
(function circuit Fourier spectrum:) s
5 142 M
(        if sigma\([rho^|S|*fourier_coeff\(S\)]^2\) <= epsilon, |S| > t where t=O\(\(log s/epsilon\)^\() s
5 131 M
(d-1\)\),) s
5 120 M
(        size s = sigma\([rho^|S|*fourier_coeff\(S\)]^2\)*2^[\(t/k\)^1/\(d-1\)] substituting for epsilo) s
5 109 M
(n and |S| > t.) s
5 98 M
(        Thus size of the circuit exponentially depends on t - size of parity sets S in [n] - |) s
5 87 M
(S| - which can have maximum value of n\(number of inputs\).) s
5 65 M
(If f is 100% noise stable, from Plancherel theorem:) s
5 54 M
(        sigma\(rho^|S|*f\(S\)^2\) = 1, S in [n]) s
5 43 M
(Stability can be written as:) s
5 32 M
(        sigma_S_<_t\(rho^|S|*f\(S\)^2\) + sigma_S_>=_t\(rho^|S|*f\(S\)^2\) = 1) s
5 21 M
(        [1 - sigma_S_<=_t\(rho^|S|*f\(S\)^2\)] = sigma_S_>_t\(rho^|S|*f\(S\)^2\)) s
5 10 M
(Since rho < 1:) s
_R
S
%%Page: (54) 54
%%BeginPageSetup
_S
18 36 translate
/pagenum 54 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (54) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        epsilon = sigma_S_>_t_\(\(rho^|S|*f\(S\)\)^2\) < epsilon_stable = sigma_S_>_t_\(rho^|S|*f\(S\)^) s
5 681 M
(2\) , |S| > t) s
5 670 M
(        epsilon_stable can also be written as = sigma_S_<_t_\(1-rho^|S|*f\(S\)^2\), |S| < t) s
5 648 M
(        s = sigma[f\(S\)^2] * 2^\(t/k\)^1/\(d-1\)\) , t=O\(\(log s/epsilon\)^\(d-1\)\), |S| > t) s
5 637 M
(        s_stable = [1-sigma_S_<_t\(rho^|S|*f\(S\)^2\)]*2^\(\(t/k\)^1/\(d-1\)\)  , t=O\(\(log s_stable/epsi) s
5 626 M
(lon_stable\)^\(d-1\)\), |S| < t) s
5 615 M
(        \(or\)) s
5 604 M
(        s_stable = sigma\(rho^|S|*[fourier_coeff\(S\)]^2\)*2^[\(t/k\)^1/\(d-1\)] , t=O\(\(log s_stable/e) s
5 593 M
(psilon_stable\)^\(d-1\)\), |S| > t.) s
5 582 M
(s_stable is the size of the 100% noise stable circuit for f.) s
5 571 M
(From above, t with noise operator is:) s
5 560 M
(        t\(noise_operator\)=O\(log s/sigma\(rho^|S|*f\(S\)^2\)\), |S| > t \(or\)) s
5 549 M
(        t\(noise_operator\)=O\(log s/\(1-sigma_S_<_t\(rho^|S|*f\(S\)^2\)\)\), |S| < t) s
5 538 M
(which is substituted for t in s_stable above and t without noise operator is:) s
5 527 M
(        t=O\(log s/sigma\(f\(S\)^2\)\), |S| > t) s
5 516 M
(which implies that t\(noise_operator\) > t since denominator summation of fourier coefficients i) s
5 505 M
(s attenuated by rho^|S| i.e the lowerbound of t in exponent for size increases due to noise op) s
5 494 M
(erator. This should be the case for both expressions of s_stable above using Plancherel versio) s
5 483 M
(n of stability. This has strong relation to non-uniformity as rho is set of pseudorandom numbe) s
5 472 M
(r strings for flip corresponding to values of rho where stability=1 which are advice strings t) s
5 461 M
(o the circuit. The exponent t\(noise_separator\) increases as rho in denominator of log\(s/epsilo) s
5 450 M
(n_stable\) increases - correlation due to random flip increases - implying that circuit size de) s
5 439 M
(pends on increased lowerbound for log\(s/epsilon_stable\) which is a logarithmic increase in exp) s
5 428 M
(onent that becomes a polynomial increase in size \(because of 2^log\(\)\). Thus 100% stability req) s
5 417 M
(uires polynomial increase in circuit size which implies a P/poly circuit for 100% noise stabil) s
5 406 M
(ity. For example, if LHS of P\(Good\) has Percolation circuit in P/Poly, with polynomial increas) s
5 395 M
(e in size 100% noise stability can be obtained. If LHS of P\(Good\) has percolation circuit in N) s
5 384 M
(C/poly, polynomial increase in size for 100% noise stability would still be in NC/poly, with a) s
5 373 M
(dditional gates adding to depth with bounded fanin. Moreover, from \(53.8\), an LHS with 100% no) s
5 362 M
(ise-stable NC/poly circuit \(if percolation is in NC/poly and not P/poly\) for an RHS BPP-comple) s
5 351 M
(te \(i.e RHS binomial summation need not converge with 100% noise stability\) means BPP is in P ) s
5 340 M
(and P=BPP.) s
5 318 M
(*Implication 1 of above: If RHS is in BPP \(e.g a 3-SAT voter judge boolean function circuit wi) s
5 307 M
(th < 100% noise stability or bounded error\) with polynomial size additional gates, it becomes ) s
5 296 M
(100% noise stable i.e a BPP circuit becomes NP-complete instance. But BPP is already known to ) s
5 285 M
(be in P/poly and hence BPP has polynomial size circuits. Hence size\(BPP_circuit\) + polynomial ) s
5 274 M
(size addition for stability is still a polynomial = P/poly circuit which makes RHS to be 100% ) s
5 263 M
(noise stable NP-complete from <100% BPP problem. This implies NP has P/poly circuits surprisin) s
5 252 M
(gly and NP in P/poly implies PH collapses to second level sigma\(pi,2\), and also AM=MA.) s
5 230 M
(*Implication 2 of above: If LHS of P\(Good\) has BP.\(NC/log\) circuit due to <100% noise stabilit) s
5 219 M
(y, with polynomial size increase it can be derandomized or denoisified to 100% noise stable ci) s
5 208 M
(rcuit. NC/log is in P/log. With polynomial size increase P/log is still P/log. If RHS is BPP i) s
5 197 M
(t can be denoisified as mentioned in Implication 1 to NP-complete instance. Thus both LHS and ) s
5 186 M
(RHS converge in P\(Good\) binomial summation and RHS is NP-complete and LHS is P/log. Thus NP is) s
5 175 M
( in P/log implying P=NP.) s
5 153 M
(Points 53.4, 53.5, 53.6 and 53.7 describe P/poly, NC/poly and NC/log circuits for Percolation ) s
5 142 M
(Boolean Functions subject to 100% noise stability regime. Important disclaimer is that above c) s
5 131 M
(onsiders only denoisification and just denoisification may not be sufficient to remove errors ) s
5 120 M
(in BP* circuits. As described in 14 on "Noise Stability and Complexity Class BPP" table of err) s
5 109 M
(or scenarios, there might be cases where both denoisification\(removing errors in column three\)) s
5 98 M
( and derandomization\(removing errors in column two\) might be required that could add to the ci) s
5 87 M
(rcuit size. But since BPP is in P/poly \(Adleman's theorem\) this is just another polynomial ove) s
5 76 M
(rhead in size. Thus increase in size due to denoisification + derandomization = poly\(n\) + poly) s
5 65 M
(\(n\) = poly\(n\) in P/poly.) s
5 43 M
(Noise sensitive NC/log percolation circuit in LHS of P\(Good\) is in BP\(NC/log\) which requires d) s
5 32 M
(enoisification and derandomization. Is BP\(NC/log\) in P/log? If yes, this could imply P=NP when) s
5 21 M
( RHS is an error-free NP-complete k-SAT instance \(denoisified and derandomized BPP\). BP\(NC/log) s
5 10 M
(\) can be denoisified with poly\(n\) additional gates from derivation above from HMLN theorem whi) s
_R
S
%%Page: (55) 55
%%BeginPageSetup
_S
18 36 translate
/pagenum 55 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (55) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ch makes NC/log to be in P/log. Next step of derandomization is by naive enumeration of all po) s
5 681 M
(ssible pseudorandom advice strings. Assumption here is that length of pseudorandom strings req) s
5 670 M
(uired for derandomizing percolation is log\(n\) which is sufficient to specify any point on an a) s
5 659 M
(xis in the percolation grid. If log\(n\) bit pseudorandom advice is enumerated there are 2^\(logn) s
5 648 M
(\)=n possible pseudorandom strings which is poly\(n\) addition in circuit size again. P/log circu) s
5 637 M
(it is executed for all 2^\(logn\) psuedorandom strings which makes the total runtime n*poly\(n\)=p) s
5 626 M
(oly\(n\). Thus derandomization takes as input a denoisified P/log circuit , adds poly\(n\) gates t) s
5 615 M
(o it and outputs a circuit that has runtime poly\(n\) with logarithmic advice i.e P/log. This ha) s
5 604 M
(s a strange consequence that NP can have P/log circuits and P=NP \(Implication 2\) contrary to p) s
5 593 M
(opular belief if logarithmic advice is valid. Equivalently for error-free , denoisified and de) s
5 582 M
(randomized PH-Complete problems in RHS \(assuming PH-complete problems exist - from \(53.2\) abov) s
5 571 M
(e\), denoisified and derandomized P/log circuit in LHS implies P=PH - collapse of polynomial hi) s
5 560 M
(erarchy.) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(------------------------------) s
5 516 M
(\(THEORY-*IMPORTANT*\) 53.12 Hastad-Linial-Mansour-Nisan \(HLMN\) Theorem and Noise Stable boolean) s
5 505 M
( functions - Denoisification 2) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(------------------------------) s
5 472 M
(Above version derived by rewriting HLMN in terms of s\(size\) and t\(size of fourier basis\) is no) s
5 461 M
(t too appealing. Basically, rate of change of circuit size with respect to noise is required a) s
5 450 M
(nd may not be necessary if denoisification is a subproblem of larger derandomization. It then ) s
5 439 M
(reduces to the question of how size of circuit increases with derandomization, specifically fo) s
5 428 M
(r BPNC percolation circuits - Since BPP is in P/poly, is BPNC in NC/poly or NC/log.  From Lini) s
5 417 M
(al-Mansour-Nisan Theorem - Lemma 7 \(Main Lemma\) - http://www.ma.huji.ac.il/~ehudf/courses/anal) s
5 406 M
(09/LMN.pdf - Circuit size and Fourier coefficients are related as:) s
5 395 M
(        For |S| > t, Summation\(fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 384 M
(For Noise-operated Fourier Spectra, the summation is augmented with rho\(noise operator\):) s
5 373 M
(        For |S| > t, Summation\(rho^|S|*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 362 M
(Applying Plancherel theorem and stability=1:) s
5 351 M
(    ------------------------------------------------------------------------------------------) s
5 340 M
(-----------------------------) s
5 329 M
(    |   For |S| < t, 1-Summation\(rho*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)          ) s
5 318 M
(                          |) s
5 307 M
(    |   => [1-Summation\(rho^|S|*fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= Size             ) s
5 296 M
(                          |) s
5 285 M
(    ------------------------------------------------------------------------------------------) s
5 274 M
(-----------------------------) s
5 263 M
(which is the circuit size lowerbound in terms of noise probability and fourier coefficients. A) s
5 252 M
(s rho increases from 0 to 1, lowerbound for) s
5 241 M
(size decreases, that is, low noise requires high circuit size. Partial Derivative of size boun) s
5 230 M
(d wrt rho:) s
5 219 M
(    -Summation\(fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= doe\(Size\)/doe\(rho\)) s
5 208 M
(which points to exponential - in t and d - decrease in size \(because t=O\(n\) and d=O\(function\(n) s
5 197 M
(\)\) with linear increase in rho \(noise\) due to negative sign and vice versa. Consequences of th) s
5 186 M
(is are significant. Though derandomization could result in polysize circuits, denoisification ) s
5 175 M
(does not necessarily add poly\(n\) size and in worst case could be exponential too. For NC circu) s
5 164 M
(its, t=O\(n\) and d=O\(polylog\(n\)\) , denoisification results in 2^O\(n^\(1/polylog\(n\)\)\) increase in) s
5 153 M
( size which is superpolynomial. Stability=1 is the point when LHS and RHS of P\(Good\) binomial ) s
5 142 M
(summation converge i.e both sides are equally efficient and are perfect voter boolean function) s
5 131 M
(s not affected by input noise. Therefore BPNC can not be denoisified in polynomial circuit siz) s
5 120 M
(e even if it can be derandomized to be in NC with polynomial size \(i.e if BPNC is in NC/poly\).) s
5 109 M
( Thus percolation NC circuit in LHS cannot be made 100% stable with denoisification with mere ) s
5 98 M
(polynomial size and has superpolynomial size lowerbound. This implies when RHS is also 100% st) s
5 87 M
(able circuit size of RHS is atleast superpolynomial. Rephrasing:) s
5 76 M
(        --------------------------------------------------------------------------------------) s
5 65 M
(-------------------) s
5 54 M
(        | P\(Good\) binomial summation in its circuit version can not have polynomial size circu) s
5 43 M
(its             |) s
5 32 M
(        | when LHS and RHS converge with 100% noise stability.                                ) s
5 21 M
(                |) s
5 10 M
(        --------------------------------------------------------------------------------------) s
_R
S
%%Page: (56) 56
%%BeginPageSetup
_S
18 36 translate
/pagenum 56 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (56) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-------------------) s
5 670 M
(For example, if LHS is a percolation logdepth circuit and RHS is single voter with 3-SAT NP-co) s
5 659 M
(mplete circuit, when LHS and RHS are both 100% noise stable and derandomized \(rho=0\):) s
5 637 M
(        LHS circuit size >= O\(2^n^\(1/polylog\(n\)\)\) = superpolynomial, quasiexponential lowerbou) s
5 626 M
(nd, depth is polylog\(n\)) s
5 615 M
(implying LHS percolation circuit could become superpolynomial sized when noise stability is 1 ) s
5 604 M
(and not in NC despite being logdepth.) s
5 582 M
(        RHS circuit size >= O\(2^n^\(1/d\)\) = higher superpolynomial, quasiexponential lowerbound) s
5 571 M
(, depth is arbitrary ,could be constant for 3-CNF) s
5 560 M
(and thus LHS and RHS circuits are equally efficient algorithms with differing circuit sizes. A) s
5 549 M
(s RHS is NP-complete, LHS is size lowerbound for RHS - LHS has lesser superpolynomial size tha) s
5 538 M
(n RHS where d\(depth of RHS which could be a constant 3\) < polylog\(n\)\(depth of LHS\).) s
5 527 M
([Open question: Does this imply superpolynomial size lowerbounds for NP and thus P != NP]) s
5 494 M
(Reference:) s
5 483 M
(-----------) s
5 472 M
(53.12.1 Derandomizing BPNC - [Periklis Papakonstantinou] - http://iiis.tsinghua.edu.cn/~papako) s
5 461 M
(ns/pdfs/phd_thesis.pdf) s
5 450 M
(53.12.2 Derandomization basics - [Salil] - Enumeration - http://people.seas.harvard.edu/~salil) s
5 439 M
(/pseudorandomness/basic.pdf) s
5 428 M
(53.12.3 Simplified Hitting Sets Derandomization of BPP - [Goldreich-Vadhan-Wigderson] - http:/) s
5 417 M
(/www.wisdom.weizmann.ac.il/~oded/COL/gvw.pdf - where hitting sets are set of strings at least ) s
5 406 M
(one element of which is accepted by any circuit that accepts atleast half of its inputs \(i.e r) s
5 395 M
(andomized algorithms in RP and BPP\). Hitting Set generators H expand k\(n\) to n so that a funct) s
5 384 M
(ion f returns f\(H\(k\(n\)\)\)=1 always where f is in RP or BPP.) s
5 373 M
(53.12.4 Derandomizing BPNC - Existence of Hitting Set Generators for BPNC=NC - [Alexander E.An) s
5 362 M
(dreev, Andrea E.F.Clementi, Jose D.P.Rolim] - http://ac.els-cdn.com/S0304397599000249/1-s2.0-S) s
5 351 M
(0304397599000249-main.pdf?_tid=e56d3a1e-ad3d-11e5-a4ef-00000aacb35e&acdnat=1451291885_fbff7c6a) s
5 340 M
(e94326758cf8d6d7b7a84d7b) s
5 329 M
(53.12.5 Linial-Mansour-Nisan Theorem - Lemma 7 \(Main Lemma\) - http://www.ma.huji.ac.il/~ehudf/) s
5 318 M
(courses/anal09/LMN.pdf:) s
5 307 M
(        For |A| > t, Summation\(fourier_coeff\(A\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 296 M
(53.12.6 The Computational Complexity Column [Allender-Clementi-Rolim-Trevisan] - theory.stanfo) s
5 285 M
(rd.edu/~trevisan/pubs/eatcs.ps) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(-----------------------) s
5 241 M
(53.13. \(THEORY\) Partial Derivative of Circuit size wrt rho \(noise probability\) - increase in c) s
5 230 M
(ircuit size for Denoisification) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(-----------------------) s
5 197 M
(From 53.11 above, size of denoisified circuit from HMLN theorem, and Stability in terms of Fou) s
5 186 M
(rier coefficients with noise operator is:) s
5 175 M
(        s_stable = [1-sigma_S_<_t\(rho^|S|*f\(S\)^2\)]*2^\(\(t/k\)^1/\(d-1\)\)  , t=O\(\(log s_stable/epsi) s
5 164 M
(lon_stable\)^\(d-1\)\), |S| < t) s
5 153 M
(        \(or\)) s
5 142 M
(        s_stable = sigma\(rho^|S|*[fourier_coeff\(S\)]^2\)*2^[\(t/k\)^1/\(d-1\)] , t=O\(\(log s_stable/e) s
5 131 M
(psilon_stable\)^\(d-1\)\), |S| > t.) s
5 120 M
(Lower bound of exponent increases as sigma\(rho^|S|*f\(S\)^2\) decreases in denominator of exponen) s
5 109 M
(t subject to stability constraint:) s
5 98 M
(        [1 - sigma_S_<=_t\(rho^|S|*f\(S\)^2\)] = sigma_S_>_t\(rho^|S|*f\(S\)^2\)) s
5 87 M
(which implies that sigma_S>t_\(rho^|S|*f\(S\)^2\) decreases when sigma_S<t_\(rho^|S|*f\(S\)^2\) increa) s
5 76 M
(ses. This is Consequence of HMLN theorem that t acts as an inflexion point for Fourier spectru) s
5 65 M
(m with noise operator - area integral from 0 to t is concentrated greater than area integral f) s
5 54 M
(rom t to n.) s
5 32 M
(Partial derivative of Circuit size wrt to rho can be derived as:) s
5 21 M
(        delta_s/delta_rho = sigma_S>t_\(|s|*rho^\(|s|-1\) * f\(S\)^2\) / \(1 - sigma_S<t_\(rho^|S|*f\(S) s
5 10 M
(\)^2\)\) where delta_s is increase in size of circuit with delta_rho increase in noise probabilit) s
_R
S
%%Page: (57) 57
%%BeginPageSetup
_S
18 36 translate
/pagenum 57 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (57) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(y. When rho=0, increase in circuit size is 0 \(obvious base case\). When rho=1, which is the wor) s
5 681 M
(st case, increase in circuit size is = sigma_S>t_\(|S|*f\(S\)^2\) / f\(S\)^2 which is upperbounded b) s
5 670 M
(y n - poly\(n\) increase in size.) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(-------------------) s
5 626 M
(53.14. \(THEORY\) Hastad-Linial-Mansour-Nisan Theorem, Circuit size, Noise Stability and BP* cla) s
5 615 M
(sses) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(-------------------) s
5 582 M
(Percolation circuit defined previously has:) s
5 571 M
(- Sorting Network for creating path sequentially on grid \(NC logdepth and polysize\)) s
5 560 M
(- Comparators \(Constant depth and polysize\) are required for comparing the leftmost and rightm) s
5 549 M
(ost coordinates.) s
5 538 M
(Together Percolation is in non-uniform NC. This circuit depends on number of points on the lef) s
5 527 M
(t-right path which is poly\(n\).) s
5 516 M
(Therefore percolation is in NC/poly because size of list of advice strings could be O\(\(n^2\)log) s
5 505 M
(\(n^2\)\) and it may not have NC/log circuits.) s
5 494 M
(From Linial-Mansour-Nisan Theorem - Lemma 7 \(Main Lemma\) - http://www.ma.huji.ac.il/~ehudf/cou) s
5 483 M
(rses/anal09/LMN.pdf:) s
5 472 M
(        For |A| > t, Summation\(fourier_coeff\(A\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 461 M
(With noise operator, noise stability=1 from Plancherel's theorem:) s
5 450 M
(    ------------------------------------------------------------------------------------------) s
5 439 M
(-----------------------------) s
5 428 M
(    |   For |S| < t, 1-Summation\(rho^|S|*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)      ) s
5 417 M
(                          |) s
5 406 M
(    |   Corollary: For |S| > t, Summation\(rho^|S|*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/) s
5 395 M
(20\)                       |) s
5 384 M
(    |   => [1-Summation\(rho^|S|*fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= Size             ) s
5 373 M
(                          |) s
5 362 M
(    ------------------------------------------------------------------------------------------) s
5 351 M
(-----------------------------) s
5 340 M
(When denoisified, rho=0 and lowerbound for size:) s
5 329 M
(        [1-\(0^0*f\(phi\)^2+0+0+..\)]*2^\(\(t^\(1/d\)/20\)-1\) <= size) s
5 318 M
(        [1-f\(phi\)^2]*2^\(\(t^\(1/d\)/20\)-1\) <= size \(as all other coefficients vanish\)) s
5 307 M
(when t=n, the size is lowerbounded by :) s
5 296 M
(        [1-f\(phi\)^2]*2^\(\(n^\(1/d\)/20\)-1\)) s
5 285 M
(which is superpolynomial. This implies an NC/poly polysize circuit when denoisified becomes O\() s
5 274 M
(2^\(\(n^\(1/polylog\(n\)/20\)-1\) .) s
5 252 M
(From the table that describes relation between Noise and Error\(BP* and PP\) in 14 previously, i) s
5 241 M
(t is evident that Noise intersects Error) s
5 230 M
(if following is drawn as a Venn Diagram i.e. Noise stability solves just a fraction of total e) s
5 219 M
(rror, and remaining requires derandomization.) s
5 208 M
(In other words, Noisy circuit could be error-free and Noise-free circuit could have error.) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(---) s
5 175 M
(        x                               |    f\(x\) = f\(x/e\)      |       f\(x\) != f\(x/e\) Noise  ) s
5 164 M
(  |) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(---) s
5 131 M
(x in L, x/e in L                        |       No error        |       Error                 ) s
5 120 M
(  |) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(---) s
5 87 M
(x in L, x/e not in L                    |       Error           |   No error if f\(x\)=1,f\(x/e\)=) s
5 76 M
(0 |) s
5 65 M
(                                        |                       |   else Error                ) s
5 54 M
(|) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(---) s
5 21 M
(x not in L, x/e in L                    |       Error           |   No error if f\(x\)=0,f\(x/e\)=) s
5 10 M
(1 |) s
_R
S
%%Page: (58) 58
%%BeginPageSetup
_S
18 36 translate
/pagenum 58 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (58) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(                                        |                       |   else Error                ) s
5 681 M
(|) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(---) s
5 648 M
(x not in L, x/e not in L                |       No error        |      Error                  ) s
5 637 M
(|) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(---) s
5 593 M
(Noise percolation circuit in P\(Good\) summation converges in noise stability regime:) s
5 582 M
(        lt Pr[f\(w\(n\)\) != f\(w\(n\)/e\)] = 0, e=1/\(alpha4*n^2\)) s
5 571 M
(        n -> inf) s
5 560 M
(Infinite f\(n\) is representable as Non-uniform NC/poly circuit though undecidable because turin) s
5 549 M
(g machine computing the above limit is not in recursive but recursively enumerable languages.) s
5 527 M
(For a 3-CNFSAT boolean function with noise, size of circuit is lowerbounded as:) s
5 516 M
(     [1-Summation\(rho^|S|*fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= Size , for constant dep) s
5 505 M
(th d.) s
5 494 M
(For rho=1,) s
5 483 M
(     [1-Summation\(fourier_coeff\(S\)^2\)] * 2^\(\(t^\(1/d\)/20\)-1\) <= Size , for constant depth d, |S) s
5 472 M
(| < t.) s
5 450 M
(Gist of the above:) s
5 439 M
(53.14.1 Size of percolation logdepth circuit \(with noise\) rho=1:) s
5 428 M
(        \(f\([n]\)^2\) * 2^\(n^\(1/polylog\(n-1\)/20\)-1\) <= size) s
5 417 M
(53.14.2 Size of depth d circuit \(with noise\) rho=1:) s
5 406 M
(        \(f\([n]\)^2\) * 2^\(\(n-1\)^\(1/d/20\)-1\) <= size) s
5 395 M
(53.14.3 Size of percolation logdepth circuit \(with noise\) rho=0:) s
5 384 M
(        \(1-f\([phi]\)^2\) * 2^\(n^\(1/polylog\(n\)/20\)-1\) <= size, phi is empty set) s
5 373 M
(53.14.4 Size of depth d circuit \(with noise\) rho=0:) s
5 362 M
(        \(1-f\([phi]\)^2\) * 2^\(n^\(1/d/20\)-1\) <= size, phi is empty set) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(---------------) s
5 318 M
(53.15 \(THEORY\) Special Case of HLMN theorem for PARITY as 3-SAT and counterexample for polynom) s
5 307 M
(ial circuit size) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(---------------) s
5 274 M
(From HMLN theorem:) s
5 263 M
(     Summation\(fourier_coeff\(S\)^2\) * 2^\(\(t^\(1/d\)/20\)-1\) <= Size , for constant depth d, |S| > ) s
5 252 M
(t.) s
5 241 M
(When t=n-1, fourier series has only coefficient for the parity set that has all variables:) s
5 230 M
(        fourier_coeff\([n]\)^2 * 2^\(\(\(n-1\)^\(1/d\)/20\)-1\) <= size, for constant depth d.) s
5 219 M
(For a circuit of size polynomial \(n^k\) and depth 3:) s
5 208 M
(        summation\(fourier_coeff\([n]\)^2\) <= n^k / 2^\(\(t^\(1/3\)/20\)-1\).) s
5 197 M
(and for t=n-1:) s
5 186 M
(        fourier_coeff\([n]\)^2 <= n^k / 2^\(\(\(n-1\)^\(1/3\)/20\)-1\).) s
5 175 M
(From definition of fourier coefficients:) s
5 164 M
(        fourier_coeff\([n]\) = summation\(f\(x\)*\(-1\)^\(parity\(xi\)\)\)/2^n for all x in {0,1}^n) s
5 153 M
(Maximum of fourier_coeff\([n]\) occurs when f\(x\)=1 for \(-1\)^parity\(xi\) = 1 and when f\(x\)=-1 for ) s
5 142 M
(\(-1\)^parity\(xi\) = -1 together summing to 2^n.) s
5 131 M
(        Maximum\(fourier_coeff\([n]\)\) = 2^n/2^n = 1 \(this implies all other fourier coefficients) s
5 120 M
( are zero\)) s
5 109 M
(Which happens when f\(x\) is equivalent to Parity function.) s
5 98 M
(An example PARITY as 3-CNFSAT from DIMACS32 XORSAT [Jing Chao Chen - http://arxiv.org/abs/cs/0) s
5 87 M
(703006] that computes parity of n=3 variables x1,x2,x3 is:) s
5 76 M
(        \(x1 V not x2 V not x3\) /\\ \(not x1 V x2 V not x3\) /\\ \(not x1 V not x2 V x3\) /\\ \(x1 V x2) s
5 65 M
( V x3\)) s
5 54 M
(Previous PARITY SAT accepts odd parity strings. Complementing variables in each clause makes i) s
5 43 M
(t accept even parity:) s
5 32 M
(        \(not x1 V x2 V x3\) /\\ \(x1 V not x2 V x3\) /\\ \(x1 V x2 V not x3\) /\\ \(not x1 V not x2 V n) s
5 21 M
(ot x3\)) s
5 10 M
(Assumption: PARITY as 3-CNFSAT has polynomial size.) s
_R
S
%%Page: (59) 59
%%BeginPageSetup
_S
18 36 translate
/pagenum 59 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (59) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(PARITY 3-SAT is satisified by odd parity bit strings and is NP-complete because this is search) s
5 681 M
( version of parity - it searches for strings that have odd parity. Complementing each clause w) s
5 670 M
(ould make it satisfy even parity bit strings.  This example PARITY as 3-SAT with variables in ) s
5 659 M
(each clause complemented maximizes the fourier coefficient to 1 at S=[n].For |S| < n by pigeon) s
5 648 M
(hole principle if one coefficient at |S|=n is enough to make it 1 others have to be either all) s
5 637 M
( zero or cancel out each other. An extension of this 3-CNF for arbitrary n should be recursive) s
5 626 M
(ly obtainable from the above example by XOR-ing with additional variables and simplifying and ) s
5 615 M
(also by Tseitin Transformation \(https://en.wikipedia.org/wiki/Tseytin_transformation\) which co) s
5 604 M
(nverts arbitrary combinatorial logic to CNF.) s
5 593 M
(=>    1^2 <=  n^k / 2^\(\(\(n-1\)^\(1/3\)/20\)-1\) which is a contradiction to assumption \(denominator) s
5 582 M
( is exponential\) that PARITY 3-SAT has polynomial size \(n^k\) circuits.) s
5 560 M
(From above, for some circuit size of PARITY as 3-CNFSAT, there exists t\(=O\(n\)\) such that:) s
5 549 M
(      2^\(\(\(t\)^\(1/3\)/20\)-1\) <=  size / summation\(f\(S\)^2\) , |S| > t) s
5 538 M
(      2^\(\(\(t\)^\(1/3\)/20\)-1\) <=  size \(for all t < n-1, fourier coefficients of PARITY 3-SAT are) s
5 527 M
( 0, and this bound is meaningful only for t=n-1\).) s
5 516 M
(i.e for all values of t, circuit size is bounded from below by a quantity exponential in funct) s
5 505 M
(ion of n \(which could be O\(n\), W\(n\) or Theta\(n\).If this is O\(n\), might imply a lowerbound by u) s
5 494 M
(pperbound - reminiscent of Greatest Lower Bound in a Lattice if Complexity Classes form a Latt) s
5 483 M
(ice\). LHS of the inequality can have values of t from 1 to n-1 and only one value of this can ) s
5 472 M
(be chosen lowerbound. If LHS is not a function of n, it leads to a contradiction that 2 PARITY) s
5 461 M
( 3SAT circuits of varying sizes can have constant lowerbound. Also finding Minimum Circuit Siz) s
5 450 M
(e problem is believed to be in NP but not known to be NP-Complete\(http://web.cs.iastate.edu/~p) s
5 439 M
(avan/papers/mcsp.pdf\).) s
5 428 M
(\(How can a special case of NP-complete problem have superpolynomial size circuits? Is this a c) s
5 417 M
(ounterexample and thus implies superpolynomial size circuits for all problems in NP and P != N) s
5 406 M
(P. Because of this correctness of above counterexample has to be reviewed\)) s
5 384 M
(References:) s
5 373 M
(------------) s
5 362 M
(53.15.1  Circuit Complexity Lecture notes - [Uri Zwick] - http://cs.tau.ac.il/~zwick) s
5 351 M
(53.15.2  Lecture notes - [Nader Bshouty] - http://cs.technion.ac.il/~bshouty) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(----------------) s
5 307 M
(53.16 \(THEORY\) P/poly, Percolation and PARITY as 3-CNFSAT in 53.15) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(----------------) s
5 274 M
(53.16.1 NP in P/poly \(NP having polynomial size circuits\) implies AM=MA and PH collapses to si) s
5 263 M
(gma2 /\\ pi2.) s
5 252 M
(53.16.2 PARITYSAT in 53.15 which is a special case of NP-complete has superpolynomial size cir) s
5 241 M
(cuits.) s
5 230 M
(53.16.3 If Percolation is in NC/poly and both LHS and RHS of P\(Good\) converge to 100% noise st) s
5 219 M
(ability, does it imply an NC/poly lowerbound for) s
5 208 M
(arbitrary circuit size in RHS? In other words what does it imply when 2 circuits of varying si) s
5 197 M
(ze have equal stability - Do two boolean circuits of equal decision error \(NoiseStability + or) s
5 186 M
( - delta\) with different sizes imply a lowerbound? E.g NC/poly circuit for PH=DC \(if PH-comple) s
5 175 M
(te\) circuit implying PH in NC/poly.) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(---------) s
5 131 M
(53.16.3.1 If equal error \(NoiseStability +/- delta\) with different circuit sizes implies a low) s
5 120 M
(erbound:) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(---------) s
5 87 M
(There is an inherent conflict between 53.16.1, 53.16.3 which are conditions for polynomial siz) s
5 76 M
(e circuits for NP and 53.16.2 which implies superpolynomial circuit size for a special case of) s
5 65 M
( NP-complete 3-SAT problem. This contradiction is resolveable if following is true:) s
5 54 M
(        - LHS of P\(Good\) is percolation NC/poly circuit in 100% noise stability regime.) s
5 43 M
(        - RHS of P\(Good\) is non-percolation circuit of arbitrary size \(e.g. DC circuit of expo) s
5 32 M
(nential size , superpolynomial size NP circuit from 53.15 and 53.16.2 etc.,\).) s
5 21 M
(        - LHS NC/poly 100% noise stability implies a lowerbound when RHS \(e.g superpolynomial ) s
5 10 M
(size NP circuit from 53.15 and 53.16.2\) is also 100% noise stable contradicting superpolynomia) s
_R
S
%%Page: (60) 60
%%BeginPageSetup
_S
18 36 translate
/pagenum 60 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (60) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(l size lowerbound for NP from 53.16.2. Contradiction is removed only if RHS of P\(Good\) is neve) s
5 681 M
(r 100% noise stable and hence LHS is not equatable to RHS i.e P\(Good\) summation has to be dive) s
5 670 M
(rgent and never converges to 100% while LHS is 100%. Major implications of this divergence are) s
5 659 M
(:) s
5 648 M
(        - the individual voter error/stability cannot be uniform 0.5 or 1 across the board for) s
5 637 M
( all voters - voters have varied error probabilities.) s
5 626 M
(        - varied stability/sensitivity per voter implies RHS majority voting is Poisson Distri) s
5 615 M
(bution.) s
5 604 M
(        - for probabilities other than 0.5 and 1, RHS P\(good\) summation becomes hypergeometric) s
5 593 M
( series requiring non-trivial algorithms which might or might not converge.) s
5 582 M
(        - This assumes that RHS does not have a boolean function that is 100% noise stability ) s
5 571 M
(regime similar to LHS Percolation.) s
5 560 M
(        - Superpolynomial size for NP-complete PARITY3SAT \(kind of a promise problem\) implies ) s
5 549 M
(P != NP and P != NP implies either a Poisson distribution or a hypergeometric series that migh) s
5 538 M
(t or might not converge.) s
5 527 M
(In other words a democratic decision making which does not involve percolation is never perfec) s
5 516 M
(t and thus BKS conjecture has to be true berating majority i.e there exists atleast one functi) s
5 505 M
(on - percolation - stabler than stablest majority.) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(---------------) s
5 461 M
(53.16.3.2 If equal error \(NoiseStability +/- delta\) with different circuit sizes doesn't imply) s
5 450 M
( a lowerbound:) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(---------------) s
5 417 M
(        - LHS of P\(Good\) is percolation NC/poly circuit in 100% noise stability regime.) s
5 406 M
(        - RHS of P\(Good\) is of arbitrary size \(e.g. superpolynomial size NP circuit from 53.16) s
5 395 M
(.2\).) s
5 384 M
(        - LHS NC/poly 100% noise stability doesn't imply a lowerbound when RHS \(e.g superpolyn) s
5 373 M
(omial size NP circuit from 53.16.2\) is also 100% noise stable. It doesn't contradict convergen) s
5 362 M
(ce of P\(Good\) summation to 100%, superpolynomial size lowerbound for NP from 53.16.2 and BKS c) s
5 351 M
(onjecture has to be trivially true i.e Both LHS and RHS of P\(Good\) are equally stable.) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-----------) s
5 307 M
(53.17 \(THEORY\) Oracle results and P=NP and PH) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-----------) s
5 274 M
(From [Baker-Gill-Solovay] there are oracles A and B such that P^A = P^B and P^A != P^B implyin) s
5 263 M
(g natural proofs involving relativizing oracles cannot answer P=NP question. Also PH is shown ) s
5 252 M
(to be infinite with oracle access recently. Because of this all points in this document avoid ) s
5 241 M
(oracle arguments and only use fourier series of boolean functions and boolean function composi) s
5 230 M
(tions for circuit lowerbounds for P\(Good\) voting circuits.) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(-----------) s
5 186 M
(53.18 \(THEORY\) P\(Good\) circuit special case counterexample in PH collapse) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(-----------) s
5 153 M
(LHS of P\(Good\) - a sigma\(p,k\) hard \(could be dictatorial or PRG\) circuit with 100% \(noise stab) s
5 142 M
(ility +/- delta\) \(assuming such exists\)) s
5 131 M
(RHS of P\(Good\) - a sigma\(p,k+1\) hard majority voting circuit with 100% \(noise stability +/- de) s
5 120 M
(lta\) \(assuming such exists\)) s
5 98 M
(If above converging P\(good\) LHS and RHS imply a lowerbound , LHS sigma\(p,k\) lowerbounds RHS si) s
5 87 M
(gma\(p,k+1\) implying PH collapses to some level k.) s
5 76 M
(The matrix of noise versus BPP in 53.14 and 14 imply noise and BPP intersect, but if only clas) s
5 65 M
(ses in \(sigma\(p,k\) - BPP\) are chosen for voter boolean functions, derandomization is not requi) s
5 54 M
(red and noise stability is sufficient to account for total error. If there is a PH-complete pr) s
5 43 M
(oblem, PH collapses to some level,but implication in other direction is not known i.e collapse) s
5 32 M
( of PH implying PH-completeness - if both directions are true then this proves non-constructiv) s
5 21 M
(ely that there exists a PH-complete problem. Every level k in PH has a QBFSAT\(k\) problem that ) s
5 10 M
(is complete for sigma\(p,k\) class. To prove PH-completeness from PH-collapse, all problems in a) s
_R
S
%%Page: (61) 61
%%BeginPageSetup
_S
18 36 translate
/pagenum 61 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (61) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ll PH levels should be reducible to a PH-complete problem i.e all QBFSAT\(k\) complete problems ) s
5 681 M
(should be reducible to a QBFSAT\(n\)-complete problem for k < n. Intuitively this looks obvious ) s
5 670 M
(because QBFSAT\(n\) can generalize all other QBFSAT\(k\) by hardcoding some variables through a ra) s
5 659 M
(ndom restriction similar to Hastad Switching Lemma.) s
5 637 M
(Equating sigma\(p,k\) with sigma\(p,k+l\) is probably the most generic setting for P\(Good\) circuit) s
5 626 M
(s discounting arithmetic hierarchy.) s
5 604 M
(Example sigma\(p,k\)-complete QBFSAT\(k\) boolean function:) s
5 593 M
(        there exists x1 for all x2 there exists x3 ... QBF1\(x1,x2,x3,...,xk\)) s
5 571 M
(Example sigma\(p,k+1\)-complete QBFSAT\(k+1\) boolean function:) s
5 560 M
(        there exists x1 for all x2 there exists x3 ... QBF2\(x1,x2,x3,...,xk,x\(k+1\)\)) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(-----------) s
5 516 M
(53.19 \(THEORY\) Depth Hierarchy Theorem for P\(Good\) circuits) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(-----------) s
5 483 M
(Average case Depth Hierarchy Theorem for circuits by [Rossman-Servedio-Tan] - http://arxiv.org) s
5 472 M
(/abs/1504.03398 - states that any depth \(d-1\) circuit that agrees with a boolean function f co) s
5 461 M
(mputed by depth-d circuit on \(0.5+o\(1\)\) fraction of all inputs must have exp\(n^omega\(1/d\)\) siz) s
5 450 M
(e. This theorem is quite useful in election forecast and approximation where it is difficult t) s
5 439 M
(o learn a voter boolean function exactly.) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(-----------) s
5 395 M
(53.20 \(THEORY\) Ideal Voting Rule) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(-----------) s
5 362 M
([Rousseau] theorem states that an ideal voting rule is the one which maximizes number of votes) s
5 351 M
( agreeing with outcome [Theorem 2.33 in http://analysisofbooleanfunctions.org/]. The ideal-nes) s
5 340 M
(s in this theorem still doesn't imply goodness of voting which measures how "good" is the outc) s
5 329 M
(ome rather than how "consensual" it is - fact that majority concur on some decision is not suf) s
5 318 M
(ficient to prove that decision is correct which is measured by noise stability +/- delta. Beca) s
5 307 M
(use of this P\(good\) summation is quite crucial to measure hardness alongwith goodness.) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(-----------) s
5 263 M
(53.21 \(THEORY\) Plancherel's Theorem, Stability polynomial and Lowerbounds in 53.18) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(-----------) s
5 230 M
(Stability polynomial can be applied to QBFSAT\(k\) and QBFSAT\(k+1\) in 53.18.) s
5 208 M
(By Plancherel's Theorem, Stability of a boolean function with noise rho is written as polynomi) s
5 197 M
(al in rho:) s
5 186 M
(        Stability\(f\) = sigma\(rho^|S|*f\(S\)^2\) , S in [n]) s
5 175 M
(which can be equated to 1 to find roots of this polynomial - noise probabilities - where 100% ) s
5 164 M
(stability occurs.) s
5 142 M
(From HLMN theorem for sigma\(p,k\)-complete QBFSAT\(k\):) s
5 131 M
(        sigma\(f\(A1\)^2\) <= 2*\(M1\)*2^\(-t1^\(1/d1\)/20\)  , |A1| > t1) s
5 109 M
(From HLMN theorem for sigma\(p,k+1\)-complete QBFSAT\(k+1\):) s
5 98 M
(        sigma\(f\(A2\)^2\) <= 2*\(M2\)*2^\(-t2^\(1/d2\)/20\) , |A2| > t2) s
5 76 M
(When noise stability is 100%:) s
5 65 M
(        Stability\(QBFSAT\(k\)\) = sigma\(rho1^|S1|*f\(S1\)^2\) = 1, S1 in [n]) s
5 54 M
(        Stability\(QBFSAT\(k+1\)\) = sigma\(rho2^|S2|*f\(S2\)^2\) = 1, S2 in [n]) s
5 43 M
(where rho1 and rho2 are variables each in the polynomial for QBFSAT\(k\) and QBFSAT\(k+1\). Solvin) s
5 32 M
(g these polynomials gives the points where 100% stability occurs in both QBFSATs. By choosing ) s
5 21 M
(non-zero, real, positive roots of these polynomials as noise probabilities, 100% stability can) s
5 10 M
( be attained for QBFSAT\(k\) in LHS and QBFSAT\(k+1\) in RHS. Noise probabilities need not be equa) s
_R
S
%%Page: (62) 62
%%BeginPageSetup
_S
18 36 translate
/pagenum 62 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (62) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(l in LHS and RHS. This is not an average case bound but lies as special case somewhere between) s
5 681 M
( best case and worst case. If delta due to BPP is ignored, equal stability implies lowerbound ) s
5 670 M
(- LHS sigma\(p,k\) lowerbounds RHS sigma\(p,k+1\) and PH collapses to level k. If collapse implies) s
5 659 M
( completeness as mentioned in 53.18 , this suffices to prove existence of a PH-complete proble) s
5 648 M
(m non-constructively. Thus Stability implying Lowerbound has enormous implications for separat) s
5 637 M
(ion results.) s
5 615 M
(Above deduction on PH collapse and possible PH-completeness contradicts 53.15 counterexample f) s
5 604 M
(or NP having superpolynomial size circuits and hence P !=NP, because PH-completeness could imp) s
5 593 M
(ly P=PH \(when LHS of P\(Good\) is an [NC/log in P] percolation circuit - unlikely if percolation) s
5 582 M
( has only NC/poly circuits - which is 100% stable and RHS is PH-complete and 100% stable\) and ) s
5 571 M
(therefore P=NP. Resolution of this contradiction requires:) s
5 560 M
(        - Equal decision error \( stability +/- delta \) does not imply lowerbound.) s
5 549 M
(        - Roots of sigma\(rho^|S|*f\(S\)^2\) - 1 = 0 can only be complex with Re+Im parts and can') s
5 538 M
(t be real.) s
5 527 M
(        - sigma\(rho^|S|*f\(S\)^2\) - 1 = 0 is zero polynomial where all coefficients are zero.) s
5 516 M
(        - PH-collapse does not imply PH-completeness.) s
5 494 M
(Stability polynomial above with rho as variable can be applied to any circuit to find the nois) s
5 483 M
(e probabilities where 100% stability is attained without machinery like size and depth hierarc) s
5 472 M
(hies, if equal stability implies lowerbounds. Indirectly 100% stability implies size bound - w) s
5 461 M
(hen rho=1, Stability polynomial grows and concides with HLMN theorem for circuit size lowerbou) s
5 450 M
(nd as mentioned above.) s
5 406 M
(54\(THEORY\). Would the following experimental gadget work? It might, but impractical:) s
5 395 M
(A voter gadget spawns itself into liker, disliker and neutral parallel threads on an entity to) s
5 384 M
( be judged. The neutral thread gathers inputs from liker and disliker threads and gets a weigh) s
5 373 M
(ted sum on them to classify the entity as "like-able" or "dislike-able". Thus real-world class) s
5 362 M
(ification or judgement and perception seem mythical. \(And how is weightage decided? Can this b) s
5 351 M
(e using SentiWordNet score?\). Theoretically, this is similar to Judge Boolean Functions define) s
5 340 M
(d in 53.* above, specifically when a voter decides by interactive proof system adversarial sim) s
5 329 M
(ulation \(likes and dislikes are reducible to provers and verifiers\) which is EXPTIME-complete.) s
5 318 M
( Implementation of this gadget is thus EXPTIME-complete.) s
5 296 M
(55\(THEORY\). Evocation is a realworld everyday phenomenon - a word reminding of the other. Posi) s
5 285 M
(tive thought chooses the right evocation and a negative thought chooses the negative evocation) s
5 274 M
( in the absence of context to disambiguate. For example, for a pessimist "fall" means "falling) s
5 263 M
( down" while for an optimist "fall" could mean "windfall or sudden gain". For a pestimist\(\(opt) s
5 252 M
(imist+pessimist\)/2\), fall could mean one of the "seasons" or even nothing. Mind sees what it c) s
5 241 M
(hooses to see. Pessimism and Optimism are probably mathematically definable as accumulated wei) s
5 230 M
(ghted thoughts of past occurrences and any future thought or decision is driven by this "accum) s
5 219 M
(ulated past" which acts as an implicit "disambiguator". This accumulated past or a Karma is re) s
5 208 M
(miniscent of above hypergraph of class stacks. ) s
5 186 M
(56\(THEORY\). A crude way to automatically disambiguate is to lookup the corresponding class sta) s
5 175 M
(ck and analyze only bounded height of events from the top of the stack. Bounded height would i) s
5 164 M
(mply analyzing only a small window of the past events. For example, looking up the class stack) s
5 153 M
( from top to bottom for limited height of 2 for "fall" might have hyperedges "tree fall, heavy) s
5 142 M
( rain fall". Thus automatic disambiguation context could be the tuple of tuples [[tree], [heav) s
5 131 M
(y, rain]] gathered from each hyperedge analyzed from top. Then this tuple of tuples has to be ) s
5 120 M
(weighted to get majority. Alternatively, each tuple in this tuple set, as a random variable, c) s
5 109 M
(ould be assigned a belief potential or a conditional probability of occurrence based on occurr) s
5 98 M
(ence of other tuples in the set. Thus a Bayesian Belief Network can be constructed and by prop) s
5 87 M
(agating belief potential, probability of each tuple can be computed. Most disambiguating tuple) s
5 76 M
( is the one with high belief propagation output. Alternatively, elements of the set of tuples ) s
5 65 M
(above can be construed as Observations and the State - the most disambiguating tuple - is Hidd) s
5 54 M
(en and needs to be measured. Thus a Hidden Markov Model can be built. Emission probabilities f) s
5 43 M
(or an Observation at a State are to be given as priors - probability of a tuple being observed) s
5 32 M
( for a word or "class". Importantly each stack is grown over time and is a candidate for Marko) s
5 21 M
(v process with the restriction - node at height h is dependent only on node at height \(h-1\) - ) s
5 10 M
(height encodes timestamp. \(But this makes the inference semi-statistical\). Consequently, this ) s
_R
S
%%Page: (63) 63
%%BeginPageSetup
_S
18 36 translate
/pagenum 63 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (63) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(gives a Trellis from which a Viterbi path can be extracted. Forward-Backward probabilities can) s
5 681 M
( be computed \(Either generative or discriminative model can be applied, generative being costl) s
5 670 M
(ier\) using this Markov property and deeming the stack itself as a dynamically grown Hidden Mar) s
5 659 M
(kov Model where the Observations are the tuples\(hyperedges\) and the hidden state is the docume) s
5 648 M
(nt that disambiguates. Using the Forward-Backward algorithm, the State\(hyperedge\) which maximi) s
5 637 M
(zes the Probability of ending up in that State is the most disambiguating document hyperedge =) s
5 626 M
( argmax [Pr\(State\(t\)=Hyperedge\(e\) / ObservedTuples\(1..t\)] i.e The tuple or hyperedge that has ) s
5 615 M
(highest forward conditional probability in the Trellis transition. This assumes the Hypergraph) s
5 604 M
( node stack as a Markov Chain. Moreover, State need not be a hyperedge. State is rather a "mea) s
5 593 M
(ningful context". As in above example, uttering "fall" would kickoff a Forward-Backward comput) s
5 582 M
(ation on the Hypergraph node class stack for "fall" considering the stack as a Hidden Markov M) s
5 571 M
(odel and would output the argmax State \(which is not limited to hyperedge\) as above. \(Handwrit) s
5 560 M
(ten illustration at: https://sites.google.com/site/kuja27/NotesOnConceptHypergraphHMM_and_Impl) s
5 549 M
(icationGraphConvexHulls_2013-12-30.pdf?attredirects=0&d=1\). Above assumption that node at heig) s
5 538 M
(ht \(h-1\) implies node at height h is quite experimental and is just to model how the human neu) s
5 527 M
(ropsycological process of "evocation" works on uttering a word. There is no real-life applicat) s
5 516 M
(ion to this - an event at height \(h-1\) need not imply an event at height h.) s
5 494 M
(57\(THEORY\). Thus Sentiment Mining techniques can be used for the above hypergraph to get the o) s
5 483 M
(verall sentiment of the hypergraph past. Probably each hyperedge might have to be analyzed for) s
5 472 M
( positive or negative sentiment to get grand total. Citation graph maxflow in http://arxiv.org) s
5 461 M
(/abs/1006.4458 already gives a SentiWordnet based algorithm to weight each edge of a citation ) s
5 450 M
(graph. Citations can be generalized as "like" or "dislike" opinions on entities as mentioned a) s
5 439 M
(bove.) s
5 417 M
(58\(THEORY\). Thus not only documents but also events in human life can be modelled as above hyp) s
5 406 M
(ergraph to get a graphical model of the past and a PsychoProfiling of an individual could be a) s
5 395 M
(rrived at using Sentiment mining. Thus, item 18 about "AstroPschoAnalysis" is feasible by two ) s
5 384 M
(parallel paths which converge - Psychoprofiling by above concept or event hypergraph for a hum) s
5 373 M
(an being and equating it with results from Astronomical+Astrological analysis done through Str) s
5 362 M
(ing Multiple Sequence Alignment mining.) s
5 340 M
(##################################################################################) s
5 329 M
(59. Initial Design Notes for - Mundane Predictive Model:) s
5 318 M
(##################################################################################) s
5 296 M
(- \(FEATURE - DONE\) DecisionTree, NaiveBayes and SVM classifiers and horoscope encoders are alr) s
5 285 M
(eady in the AstroInfer codebase. ) s
5 274 M
(- \(FEATURE - DONE\) Encode the dataset which might be USGS or NOAA\(Science on a Sphere\) dataset) s
5 263 M
(s or anyother dataset available after getting text horos for these using Maitreya's Dreams tex) s
5 252 M
(tclient \(AstroInfer version\)) s
5 241 M
(- \(FEATURE - DONE\) Above gives encoded horoscope strings for all classes of mundane events in ) s
5 230 M
(both Zodiacal and AscendantRelative formats \(autogenerated by Python scripts in python-src/\)) s
5 219 M
(- \(FEATURE - DONE\) Above set is a mix of encoded strings for all events which can be classifie) s
5 208 M
(d using one of the classifiers above.) s
5 197 M
(- \(FEATURE - DONE\) For each class the set of encoded horo strings in that class can be pairwis) s
5 186 M
(e or multiple-sequence aligned to get the pattern for that class) s
5 175 M
(- \(FEATURE - DONE\) There are two sets for each class after running the classifiers - one set i) s
5 164 M
(s AscendantRelative and the other is Zodiacal) s
5 153 M
(- \(FEATURE - DONE\) The above steps give the mined astronomical patterns for all observed munda) s
5 142 M
(ne events - Pattern_Mundane_Observed_AscRelative and Pattern_Mundane_Observed_Zodiacal) s
5 120 M
(60. \(FEATURE - DONE\) Above has implemented a basic Class and Inference Model that was envisage) s
5 109 M
(d in 2003. Class is the set-theoretic notion of sets sharing common underlying theme. Using VC) s
5 98 M
( Dimension is a way to determine accuracy of how well the dataset is "shattered" by the classe) s
5 87 M
(s. ) s
5 65 M
(61. \(THEORY\) Now on to mining the classics for patterns: For all classes of events, running th) s
5 54 M
(e classifier partitions the rules in a classic into set of rules or patterns for that class. H) s
5 43 M
(ere again there are two sets for each class - Pattern_Mundane_Classic_AscRelative and Pattern_) s
5 32 M
(Mundane_Classic_Zodiacal) s
5 10 M
(62. \(THEORY\) Thus correlation of the two sets *_Observed_* and *_Classic_* \(each set has 2 sub) s
_R
S
%%Page: (64) 64
%%BeginPageSetup
_S
18 36 translate
/pagenum 64 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (64) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sets\) for percentage similarity using any known similarity coefficient would unravel any crypt) s
5 681 M
(ic pattern hidden astronomical datasets for that event and would be a circumstantial and scien) s
5 670 M
(tific proof of rules in astrological classics with strong theoretical footing and would also b) s
5 659 M
(ring to light new rules earlier unknown.) s
5 637 M
(63. \(THEORY and IMPLEMENTATION\) More  importantly, for example, if a non-statistical,astrologi) s
5 626 M
(cal model of rainfall is computed based on a classical rule which says that "Venus-Mercury in ) s
5 615 M
(single sign or Venus-Sun-Mercury in close proximity degrees with Sun in the middle causes copi) s
5 604 M
(ous rainfall" is used as a model, expected output of the model could be "Between 28October2013) s
5 593 M
( and 15December2013 there could be peak monsoon activity in ----- longitude ---- latitude with) s
5 582 M
( --- percentage probability". And thus this could be a Medium Range Weather Forecasting tool. ) s
5 571 M
(A python script that searches the Astronomical Data for mined rules from Sequence Mining of As) s
5 560 M
(tronomical Data has been added to python-src/. It uses Maitreya's Dreams Ephemeris text client) s
5 549 M
( for getting astronomical data for range of date, time and longitude and latitude. This script) s
5 538 M
( prints matching date, time and longitude and latitude when a rule for a weather phenomenon oc) s
5 527 M
(curs as mined by sequence mining.) s
5 505 M
(64. \(FEATURE - DONE-related to 65 and 139\) Integrate AstroInfer,USB-md,KingCobra and VIRGO int) s
5 494 M
(o an approximately intelligent cloud OS platform that not just executes code statically but al) s
5 483 M
(so dynamically learns from the processes \(say through log files, executables, execution times ) s
5 472 M
(etc., and builds predictive models\).) s
5 461 M
(USB-md Design Document: http://sourceforge.net/p/usb-md/code-0/HEAD/tree/USBmd_notes.txt) s
5 450 M
(VIRGO Design Document: http://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/trunk/virgo-docs/) s
5 439 M
(VirgoDesign.txt) s
5 428 M
(KingCobra Design Document: http://sourceforge.net/p/kcobra/code-svn/HEAD/tree/KingCobraDesignN) s
5 417 M
(otes.txt) s
5 406 M
(This AsFer+USBmd+VIRGO+KingCobra would henceforth be known as "Krishna iResearch Intelligent C) s
5 395 M
(loud OS - NeuronRain ") s
5 373 M
(65. \(THEORY and IMPLEMENTATION\) Related to point 64 - Software Analytics - source code and log) s
5 362 M
(s analytics - related to Program comprehension - point 139 on BigData Analytics has more on th) s
5 351 M
(is. Recently added VIRGO kernel_analytics module is in a way a software analytics module which) s
5 340 M
( reads config file set by the machine learning software after mining the kernel logs and objec) s
5 329 M
(ts. Kernel Analytics VIRGO driver module at present reads key-value pairs written to by the As) s
5 318 M
(Fer Machine Learning code from /etc/virgo_kernel_analytics.conf. Optionally, AsFer code can di) s
5 307 M
(rectly modify the kernel tunable parameters learnt by AsFer \(https://www.kernel.org/doc/Docume) s
5 296 M
(ntation/kernel-parameters.txt\) through modprobe or "echo -n ${value} > /sys/module/${modulenam) s
5 285 M
(e}/parameters/${parm}" for existing modules while virgo_kernel_analytics.conf is read for VIRG) s
5 274 M
(O specific modules. Graph Isomorphism of Program Slice Dependency Graphs for 2 codebases menti) s
5 263 M
(oned in https://sites.google.com/site/kuja27/PhDThesisProposal.pdf is also a Software Analytic) s
5 252 M
(s problem. There are Slicing and Graph Isomorphism tools already available. Recently there has) s
5 241 M
( been a SubExponential Time algorithm for GI - [Lazlo Babai]. Kernel Analytics config in files) s
5 230 M
(ystem requires reloading. New feature to set the kernel analytics key-value pairs directly fro) s
5 219 M
(m userspace to kernel memory locations dynamically has been added via boost::python C++ and CP) s
5 208 M
(ython extensions - described in 217.SATURN Program Analysis Framework has been integrated into) s
5 197 M
( VIRGO Linux - error logs of SATURN are AsFer analyzable - more on this in 232. SourceForge VI) s
5 186 M
(RGO repository does not contain SATURN .db files in saturn_program_analysis/saturn_program_ana) s
5 175 M
(lysis_trees/. They are committed only in GitHub saturn_program_analysis/saturn_program_analysi) s
5 164 M
(s_trees/ . Spark code computing Cyclomatic Complexity of codebase from SATURN generated .dot f) s
5 153 M
(iles has been committed in python-src/software_analytics/ . This requires VIRGO Linux saturn p) s
5 142 M
(rogram analysis driver generated .dot files.) s
5 120 M
(        AsFer Python -----> Boost::Python C++ Extension ------> VIRGO memory system calls ----) s
5 109 M
(----> VIRGO Linux Kernel Memory Drivers) s
5 98 M
(        /\\                                                                                    ) s
5 87 M
(          V) s
5 76 M
(         |                                                                                    ) s
5 65 M
(          |) s
5 54 M
(         ---------------------------------------------<---------------------------------------) s
5 43 M
(-----------) s
5 32 M
(        AsFer Python -----> CPython Extensions ------> VIRGO memory system calls --------> VIR) s
5 21 M
(GO Linux Kernel Memory Drivers) s
5 10 M
(         /\\                                                                                   ) s
_R
S
%%Page: (65) 65
%%BeginPageSetup
_S
18 36 translate
/pagenum 65 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (65) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(          V) s
5 681 M
(         |                                                                                    ) s
5 670 M
(          |) s
5 659 M
(         ---------------------------------------------<---------------------------------------) s
5 648 M
(-----------) s
5 626 M
(        AsFer Python -----> VIRGO SATURN program analyzer .dot files --------> Spark ----> Cyc) s
5 615 M
(lomatic Complexity) s
5 593 M
(----------) s
5 582 M
(References:) s
5 571 M
(----------) s
5 560 M
(65.1  Analytics of Device Driver code - http://research.microsoft.com/en-us/groups/sa/drivermi) s
5 549 M
(ne_asplos14.pdf) s
5 538 M
(65.2  Logging - http://research.microsoft.com/en-US/groups/sa/loggingpractice.pdf) s
5 527 M
(65.3  Law of leaky abstraction - http://www.joelonsoftware.com/Articles/LeakyAbstractions.html) s
5 516 M
( ) s
5 505 M
(65.4  Function Point Analysis - http://www.bfpug.com.br/Artigos/Albrecht/MeasuringApplicationD) s
5 494 M
(evelopmentProductivity.pdf) s
5 483 M
(65.5  Function Point Analysis and Halstead Complexity Measures - https://en.wikipedia.org/wiki) s
5 472 M
(/Halstead_complexity_measures) s
5 461 M
(65.6  Cyclomatic Complexity of a Program - Euler Characteristic of program flow graph \(E - V +) s
5 450 M
( 2\) - Approximate code complexity.) s
5 428 M
(66. \(THEORY\) Encoding a document with above Hypergraph of Class stack vertices and Hyperedges ) s
5 417 M
(- This hypergraph of concepts can also be used as a steganographic encoding tool for obfuscati) s
5 406 M
(ng a document \(somewhat an encryption of different kind\). For example, each document is a hype) s
5 395 M
(redge in this hypergraph of class stack vertices. By choosing a suitable encoding function eve) s
5 384 M
(ry concept or a word can be replaced with some element within each class stack vertex. This en) s
5 373 M
(coding function chooses some element in each class stack - f\(word or concept C1 in a document\)) s
5 362 M
( = a different word or concept C2 in the class stack vertex that contains C1. This function f ) s
5 351 M
(has to be one-one and onto so that it is invertible to get the original document. This functio) s
5 340 M
(n can be anything modulo the height of that stack. Thus a plain text meaningful document can e) s
5 329 M
(ncrypt another meaningful hidden document without any ciphertext generation.) s
5 307 M
(67. An automaton or Turing machine model for data or voice \(or musical\) samples - Voice sample) s
5 296 M
(s or musical notations are discrete in time and occur in stream. As an experimental research, ) s
5 285 M
( explore on possibility of automatically constructing an automaton or Turing machine that reco) s
5 274 M
(gnizes these languages \(RE or CFG\) where the notes are the alphabets. ) s
5 252 M
(\(FEATURE - DONE\) 68. Music Pattern Mining - Computational Music - Alternatively, a Discrete Fo) s
5 241 M
(urier Transform on a set of data or voice samples gives a set of frequencies - a traditional D) s
5 230 M
(SP paradigm.) s
5 219 M
(-----------) s
5 208 M
(References:) s
5 197 M
(-----------) s
5 186 M
(68.1 https://ccrma.stanford.edu/~jos/st/) s
5 164 M
(69. \(FEATURE - Audacity FFT - DONE\) Music Pattern Mining - Experimental Idea of previous two p) s
5 153 M
(oints is to mine patterns in discrete data and voice\(music for example\) samples. Music as an e) s
5 142 M
(xpression of mathematics is widely studied as Musical Set Theory - Transpositions and Inversio) s
5 131 M
(ns \(E.g http://en.wikipedia.org/wiki/Music_and_mathematics, http://www.ams.org/samplings/featu) s
5 120 M
(re-column/fcarc-canons, http://www-personal.umd.umich.edu/~tmfiore/1/musictotal.pdf\). Items 56) s
5 109 M
(,57 and 58 could help mining deep mathematical patterns in classical and other music and as a ) s
5 98 M
(measure of similarity and creativity. In continuation of 68, following experiment was done on ) s
5 87 M
(two eastern Indian Classical audio clips having similar raagas:) s
5 76 M
(        69.1 FFT of the two audio files were done by Audacity and frequency domain files were ) s
5 65 M
(obtained with sampling size of 65536, Hanning Window, Log frequency) s
5 54 M
(        69.2 FFTs of these two have been committed in music_pattern_mining/. Similarity is obs) s
5 43 M
(erved by peak decibel frequency of ~ 500Hz in both FFTs - Similarity criterion here is the str) s
5 32 M
(ongest frequency in the sample though there could be others like set of prominent frequencies,) s
5 21 M
( amplitudes etc.,. Frequencies with low peaks are neglected as noise.) s
_R
S
%%Page: (66) 66
%%BeginPageSetup
_S
18 36 translate
/pagenum 66 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (66) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(--) s
5 670 M
(70-79 \(THEORY - EventNet Implementation DONE\) EventNet and Theoretical analysis of Logical Tim) s
5 659 M
(e:) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(--) s
5 615 M
(70. In addition to Concept wide hypergraph above, an interesting research could be to create a) s
5 604 M
(n EventNet or events connected by causation as edge \(there is an edge \(x,y\) if event x causes ) s
5 593 M
(event y\). Each event node in this EventNet is a set of entities that take part in that event a) s
5 582 M
(nd interactions among them.This causation hypergraph if comprehensively constructed could yiel) s
5 571 M
(d insights into apparently unrelated events.This is hypergraph because an event can cause a fi) s
5 560 M
(nite sequence of events one after the other, thereby including all those event vertices. For s) s
5 549 M
(implicity,it can be assumed as just a graph. This has some similarities with Feynman Diagrams ) s
5 538 M
(and Sum-over-histories in theoretical physics.) s
5 516 M
(71. Each event node in the node which is a set as above, can have multiple outcomes and hence ) s
5 505 M
(cause multiple effects. Outcome of an interaction amongst the elements of an event node is inp) s
5 494 M
(ut to the adjacent event node which is also a set. Thus there could be multiple outgoing outco) s
5 483 M
(me edges each with a probability. Hence the EventNet is a random, directed, acyclic graph \(acy) s
5 472 M
(clic assuming future cannot affect past preventing retrocausality\). Thus EventNet is nothing b) s
5 461 M
(ut real history laid out as a graph. Hypothetically,  if every event from beginning of the uni) s
5 450 M
(verse is causally connected as above, an indefinite ever growing EventNet is created. ) s
5 428 M
(72. If the EventNet is formulated as a Dynamic Graph with cycles instead of Static Graph as ab) s
5 417 M
(ove where there causal edges can be deleted, updated or added, then the above EventNet allows ) s
5 406 M
(changing the past theoretically though impossible in reality. For example, in an EventNet grow) s
5 395 M
(n upto present, if a causal edge is added from a present node to past or some causal edge is d) s
5 384 M
(eleted or updated in the past, then "present" causes "past" with or without cycles in the grap) s
5 373 M
(h.) s
5 351 M
(73. EventNet can be partitioned into "Past","Present" and "Future" probably by using some MaxF) s
5 340 M
(low-MinCut Algorithms. The Cut of the graph as Flow Network is the "Present" and either side o) s
5 329 M
(f the Cut is "Past" and "Future".) s
5 307 M
(74. A recreational riddle on the EventNet: Future\(Past\) = Present. If the Future is modelled a) s
5 296 M
(s a mathematical function, and if Past is fixed and Present is determined by 100% freewill and) s
5 285 M
( can have any value based on whimsical human actions, then is the function Future\(\) well-defin) s
5 274 M
(ed?) s
5 252 M
(75. Conjecture: Undirected version of EventNet is Strongly Connected or there is no event in E) s
5 241 M
(ventNet without a cause \(outgoing edge\) or an effect\(incoming edge\).) s
5 219 M
(76. Events with maximum indegree and outdegree are crucial events that have deep impact in his) s
5 208 M
(tory.) s
5 186 M
(77. Events in each individual entity's existence are subgraphs of universal EventNet. These su) s
5 175 M
(bgraphs overlap with each other.) s
5 153 M
(78. There is an implicit time ordering in EventNet due to each causation edge. This is a "Logi) s
5 142 M
(cal Clock" similar to Lamport's Clock. In a cloud \(e.g VIRGO Linux nodes, KingCobra MAC curren) s
5 131 M
(cy transactions\) the EventNet is spread across the nodes and each node might have a subgraph o) s
5 120 M
(f the giant EventNet. ) s
5 98 M
(79. EventNet can also be viewed as a Bayesian Network.) s
5 76 M
(--------------------------------) s
5 65 M
(80. \(THEORY\) Mining EventNet for Patterns: ) s
5 54 M
(---------------------------------) s
5 43 M
(As an old saying goes "history repeats itself". Or does it really? Are there cycles of events?) s
5 32 M
( Such questions warrant checking the EventNet for cycles. But the above EventNet is acyclic by) s
5 21 M
( definition.This probably goes under the item 48 above that models the events as a hypergraph ) s
5 10 M
(based on classification of events which is different from EventNet altogether. Alternatively, ) s
_R
S
%%Page: (67) 67
%%BeginPageSetup
_S
18 36 translate
/pagenum 67 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (67) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(the EventNet nodes which are events with set of partakers and their interactions,can be mined ) s
5 681 M
(for commonalities amongst them. Thus checking any pair of event nodes separated by a path of f) s
5 670 M
(ew edges \(and thus separated in logical time\) for common pattern suffices and this recursively) s
5 659 M
( continues. ) s
5 637 M
(Frequent Subgraph Mining of above EventNet \(i.e whether a subgraph "repeats" with in the super) s
5 626 M
(graph\) as mentioned in Graph Search feature above could find patterns in events history.\(Refer) s
5 615 M
(ence: Graph growing algorithms in chapter "Graph Mining", Data Mining, Han and Kamber\)) s
5 593 M
(There is a striking resemblance of EventNet to sequence mining algorithm CAMLS - a refined Apr) s
5 582 M
(iori algorithm - \(http://www.cs.bgu.ac.il/~yarongon/papers/camls.dasfaa2010.pdf\) which is for ) s
5 571 M
(mining a sequence of events - each event has intraevent partakers  occurring at different poin) s
5 560 M
(ts in time with gaps. EventNet mining is infact a generalization of linear time in CAMLS to di) s
5 549 M
(stributed logical clock defined as EventNet causation infinite graph above. The topological or) s
5 538 M
(derings of EventNet can be mined using CAMLS. Sequence Mining python script that implements Ap) s
5 527 M
(riori GSP has been added to repository and it can be applied to topologically sorted EventNet ) s
5 516 M
(graphs as well.) s
5 494 M
(----------------------------) s
5 483 M
(81-86. \(THEORY\) Fractal nature of events:) s
5 472 M
(-----------------------------) s
5 461 M
(81. Are events self-similar or exhibit fractal nature? This as in item 71, needs mining the ev) s
5 450 M
(ent nodes which are sets of partakers for self-similarity. A fractal event is the one which ha) s
5 439 M
(s a cycle and any arbitrary point on the cycle has a cycle attached at that point and so on. A) s
5 428 M
(n example of fractal event is the Hindu Vedic Calendar that has Major cycles, subcycles, cycle) s
5 417 M
(s within cycles that occur recursively implying that calendar is self-similar. How to verify i) s
5 406 M
(f the EventNet graph has a fractal nature or how to prove that a graph is "Fractal" in general) s
5 395 M
(? Would it be Ramsey theory again?) s
5 373 M
(82. EventNet is a Partial Order where there may not be edges of causality between some element) s
5 362 M
(s. Thus a Topological Sort on this EventNet directed,acyclic graph gives many possible orderin) s
5 351 M
(gs of events. If history of the universe assuming absolute time is formulated as EventNet, the) s
5 340 M
(n the topological sort does not give a unique ordering of events which is counterintuitive to ) s
5 329 M
(absolute time.\(Is this sufficient to say there is no absolute time?\). ) s
5 307 M
(83. EventNet on history of events in the universe is quite similar to Directed Acyclic Graph b) s
5 296 M
(ased Scheduling of tasks with dependencies on parallel computers. Thus universe is akin to a I) s
5 285 M
(nfinitely Massive Parallel Computer where events are dynamically scheduled with partakers, out) s
5 274 M
(comes and with non-determinism. Even static scheduling is NP-Complete.) s
5 252 M
(84. In the above EventNet, each node which is a set can indeed be a graph also with freewill i) s
5 241 M
(nteractions amongst the set members as edges. This gives a graph G1 with each node being repla) s
5 230 M
(ced by a graph G2. This is a fractal graph constructed naturally and notions of Outer products) s
5 219 M
( or Tensor products or Kronecker products with each entry in adjacency matrix replaced by anot) s
5 208 M
(her adjacency matrix apply. By definition each node can be replaced by different graph.) s
5 186 M
(85. Similar to Implication graphs as Random Growth Graphs, EventNet also qualifies as a Random) s
5 175 M
( Growth Network as events happen randomly and new edges are added whenever events happen \(with) s
5 164 M
( previous Kronecker Tensor model\). Rich-Get-Richer paradigm can also hold where nodes with mor) s
5 153 M
(e adjacent nodes are more likely to have future adjacent nodes. \(A related notion of Freewill ) s
5 142 M
(Interactions in http://sites.google.com/site/kuja27/UndecidabilityOfFewNonTrivialQuestions.pdf) s
5 131 M
(?attredirects=0 is worth mentioning here\). ) s
5 109 M
(86. Regularity Lemma can be used as a tool to test Implication and EventNet Random Growth Grap) s
5 98 M
(hs - specifically seems to have an application in EventNet Kronecker Graph model above where e) s
5 87 M
(ach node is replaced by a graph and thus can be construed as epsilon-partition of the vertices) s
5 76 M
( that differ infinitesimally in density. Each element in the partition is the event.) s
5 54 M
(**********************************************************************************************) s
5 43 M
(**********) s
5 32 M
(87.                                     COMMIT RELATED NOTES) s
5 21 M
(**********************************************************************************************) s
5 10 M
(**********) s
_R
S
%%Page: (68) 68
%%BeginPageSetup
_S
18 36 translate
/pagenum 68 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (68) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(\(FEATURE- DONE\) commits as on 3 September 2013) s
5 670 M
(------------------------------) s
5 659 M
(DecisionTree, NaiveBayes and SVM classifier code has been integrated into AstroInfer toplevel ) s
5 648 M
(invocation with boolean flags) s
5 626 M
(\(FEATURE- DONE\) commits as on 6 September 2013) s
5 615 M
(------------------------------) s
5 604 M
(In addition to USGS data, NOAA Hurricane dataset HURDAT2 has been downloaded and added to repo) s
5 593 M
(sitory. Asfer Classifier Preprocessor script has been updated to classify set of articles list) s
5 582 M
(ed in articlesdataset.txt using NaiveBayesian or DecisionTree Classifiers and training and tes) s
5 571 M
(t set text files are also autogenerated. New parser for NOAA HURDAT2 datset has been added to ) s
5 560 M
(repository. With this datasets HTML files listed in articlesdataset.txt are classified by eith) s
5 549 M
(er classifiers and segregated into "Event Classes".Each dataset document is of proprietary for) s
5 538 M
(mat and requires parser for its own to parse and autogenerate the date-time-longlat text file.) s
5 527 M
(Date-time-longlat data for same "Event Class" will be appended and collated into single Date-t) s
5 516 M
(ime-longlat text file for that "Event Class".) s
5 494 M
(\(FEATURE- DONE\) commits as on 12 September 2013) s
5 483 M
(-------------------------------) s
5 472 M
(1.asfer_dataset_segregator.py and asfer_dataset_segregator.sh - Python and wrapper shell scrip) s
5 461 M
(t that partitions the parsed datasets which contain date-time-long-lat data based on classifie) s
5 450 M
(r output grepped by the invoker shell script - asfer_dataset_segregator.sh -  and writes the n) s
5 439 M
(ames of parsed dataset files which are classified into Event Class "<class>" into text files w) s
5 428 M
(ith names of regular expression "EventClassDataSet_<class>.txt") s
5 406 M
(2.DateTimeLongLat data for all datasets within an event class \(text file\) need to be collated ) s
5 395 M
(into a single asfer.enchoros.<classname>.zodiacal or asfer.enchoros.<classname>.ascrelative. F) s
5 384 M
(or this a Python script MaitreyaToEncHoroClassified.py has been added to repository that reads) s
5 373 M
( the segregated parsed dataset files generated by asfer_dataset_aggregator.sh and invokes mait) s
5 362 M
(reya_textclient for all date-time-long-lat data within all parsed datasets for a particular ev) s
5 351 M
(ent class - "EventClassDataset_<class>.txt" and also creates autogenerated asfer.enchoros.<cla) s
5 340 M
(ss>.zodiacal and asfer.enchoros.<class>.ascrelative encoded files) s
5 318 M
(\(FEATURE- DONE\) commits as on 2 November 2013) s
5 307 M
(-----------------------------) s
5 296 M
(Lot of commits for implementation of Discrete Hyperbolic Factorization with Stirling Formula U) s
5 285 M
(pperbound \(http://sourceforge.net/p/asfer/code/HEAD/tree/cpp-src/miscellaneous/DiscreteHyperbo) s
5 274 M
(licFactorizationUpperbound.cpp\) have gone in. Overflow errors prevent testing large numbers.\(U) s
5 263 M
(RLs:) s
5 252 M
(         1\) Multiple versions of Discrete Hyperbolic Factorization uploaded in http://sites.go) s
5 241 M
(ogle.com/site/kuja27/ ) s
5 230 M
(         2\) Handwritten by myself - http://sourceforge.net/projects/acadpdrafts/files/Discrete) s
5 219 M
(HyperbolicFactorization_UpperboundDerivedWithStirlingFormula_2013-09-10.pdf/download and) s
5 208 M
(         3\) Latex version - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbol) s
5 197 M
(icPolylogarithmicSieveForIntegerFactorization_updated_rectangular_interpolation_search_and_Sti) s
5 186 M
(rlingFormula_Upperbound.pdf/download) s
5 175 M
(\)) s
5 153 M
(\(FEATURE- DONE\) commits as on 20 November 2013 and 21 November 2013) s
5 142 M
(----------------------------------------------------) s
5 131 M
(1. Lots of testing done on Discrete Hyperbolic Factorization sequential implementation and log) s
5 120 M
(s have been added to repository.) s
5 98 M
(2. An updated draft of PRAM NC version of Discrete Hyperbolic Factorization has been uploaded ) s
5 87 M
(at: ) s
5 76 M
(http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveForInt) s
5 65 M
(egerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound.pdf/download that does PRAM ) s
5 54 M
(merge of discrete tiles in logarithmic time before binary search on merged tile.) s
5 32 M
(3. Preliminary Design notes for CRCW PRAM implementation of the above is added to repository a) s
5 21 M
(t: http://sourceforge.net/p/asfer/code/237/tree/ImplementationDesignNotesForDiscreteHyperbolic) s
5 10 M
(FactorizationInPRAM.jpg. This adds a tile_id to each tile so that during binary search, the fa) s
_R
S
%%Page: (69) 69
%%BeginPageSetup
_S
18 36 translate
/pagenum 69 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (69) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ctors are correctly found since coordinate info gets shuffled after k-tile merge.) s
5 659 M
(-------------------------------) s
5 648 M
(88.Tagging as on 16 December 2013) s
5 637 M
(-------------------------------) s
5 626 M
(AsFer version 12.0 and VIRGO version 12.0 have been tagged on 6 December 2013 \(updated the act) s
5 615 M
(ion items above\).) s
5 593 M
(\(THEORY\) 89. More reference URLs for Parallel RAM design of above NC algorithm for Discrete Hy) s
5 582 M
(perbolic Factorization for merging sorted lists:) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(---------------------------------------) s
5 549 M
(1.http://arxiv.org/pdf/1202.6575.pdf?origin=publication_detail) s
5 538 M
(2.https://electures.informatik.uni-freiburg.de/portal/download/3/6951/thm15%20-%20parallel%20m) s
5 527 M
(erging.ppt \(Ranks of elements\)) s
5 516 M
(3.http://cs.brown.edu/courses/csci2560/syllabus.html \(Lecture Notes on CREW PRAM and Circuit E) s
5 505 M
(quivalence used in the NC algorithm for Discrete) s
5 494 M
(Hyperbolic Factorization above - http://cs.brown.edu/courses/csci2560/lectures/lect.24.pdf\)) s
5 483 M
(4.http://cs.brown.edu/courses/csci2560/lectures/lect.22.ParallelComputationIV.pdf) s
5 472 M
(5.http://www.cs.toronto.edu/~bor/Papers/routing-merging-sorting.pdf) s
5 461 M
(6.http://www.compgeom.com/~piyush/teach/AA09/slides/lecture16.ppt) s
5 450 M
(7.Shift-and-subtract algorithm for approximate square root computation implemented in Linux ke) s
5 439 M
(rnel \(http://lxr.free-electrons.com/source/lib/int_sqrt.c\) which might be useful in finding th) s
5 428 M
(e approximate square root in discretization of hyperbola \(Sequential version of Discrete Hyper) s
5 417 M
(bolic Factorization\)) s
5 406 M
(8.http://research.sun.com/pls/apex/f?p=labs:bio:0:120 - Guy Steele - approximate square root a) s
5 395 M
(lgorithm ) s
5 384 M
(9.http://cstheory.stackexchange.com/questions/1558/parallel-algorithms-for-directed-st-connect) s
5 373 M
(ivity - related theoretical discussion thread on PRAM algorithms for st-connectivity) s
5 362 M
(10.PRAM and NC algorithms - http://www.cs.cmu.edu/afs/cs/academic/class/15750-s11/www/handouts) s
5 351 M
(/par-notes.pdf) s
5 340 M
(11. An Efficient Parallel Algorithm for Merging in the Postal Model - http://etrij.etri.re.kr/) s
5 329 M
(etrij/journal/getPublishedPaperFile.do?fileId=SPF-1043116303185) s
5 318 M
(12. Parallel Merge Sort - http://www.inf.fu-berlin.de/lehre/SS10/SP-Par/download/parmerge1.pdf) s
5 307 M
(13. NC and PRAM equivalence - www.cs.tau.ac.il/~safra/ACT/CCandSpaceB.ppt) s
5 296 M
(14. Extended version of BerkmanSchieberVishkin ANSV algorithm - http://www1.cs.columbia.edu/~d) s
5 285 M
(any/papers/highly.ps.Z \(has some references to NC, its limitations, higly parallelizable - log) s
5 274 M
(log algorithms\) - input to this ANSV algorithm is elements in array \(of size N\) and not number) s
5 263 M
( of bits \(logN\) which is crucial to applying this to merge tree of factorization and proving i) s
5 252 M
(n NC.) s
5 241 M
(15. Structural PRAM algorithms \(with references to NC\) - http://www.umiacs.umd.edu/users/vishk) s
5 230 M
(in/PUBLICATIONS/icalp91.ps) s
5 219 M
(16. Parallel Algorithms FAQ - NC, RAM and PRAM - Q24 - http://nptel.ac.in/courses/106102114/do) s
5 208 M
(wnloads/faq.pdf ) s
5 186 M
(17. Defintions related to PRAM model - http://pages.cs.wisc.edu/~tvrdik/2/html/Section2.html -) s
5 175 M
( Input to PRAM is N items stored in N memory locations - \(For factorization, this directly fit) s
5 164 M
(s in as the O\(N\) ~ Pi^2/6 * N coordinate product integers stored in as many locations - for di) s
5 153 M
(scretized tiles of hyperbola\)) s
5 131 M
(18. Reduction from PRAM to NC circuits - http://web.cse.ohio-state.edu/~gurari/theory-bk/theor) s
5 120 M
(y-bk-sevense6.html#Q1-80006-21 \(The SIMULATE_RAM layer in each step is a subcircuit that is ab) s
5 109 M
(stracted as a node in NC circuit. This subcircuit performs the internal computation of PRAM pr) s
5 98 M
(ocessor in that NC circuit node at some depth i. The NC circuit is simulated from PRAM model a) s
5 87 M
(s - depth is equal to PRAM time and size is equal to number of processors.\). Thus for Discrete) s
5 76 M
( Hyperbolic Factorization, the ANSV PRAM mergetree of polylogdepth is simulated as NC circuit ) s
5 65 M
(with this reduction. Thus though each array element in ANSV is a logN bit integer, the SIMULAT) s
5 54 M
(E_RAM abstraction reduces it to a node in NC circuit that processes the input and propagates t) s
5 43 M
(he output to next step towards root. ) s
5 21 M
(19. Length of input instance in PRAM \(n or N\) - http://web.cse.ohio-state.edu/~gurari/theory-b) s
5 10 M
(k/theory-bk-sevense2.html#Q1-80002-3 - "... When no confusion arises, because of the obvious r) s
_R
S
%%Page: (70) 70
%%BeginPageSetup
_S
18 36 translate
/pagenum 70 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (70) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(elationship between the number N of values in the input and the length n of the input, N and n) s
5 681 M
( are used interchangeably. ...". For ANSV algorithm, the number N of values in the input array) s
5 670 M
( and the length n of the input are the same \(N=n\) and due to this it runs in polyloglogtime in) s
5 659 M
( input size O\(loglogN\) and with polynomial processors N/loglogN. ) s
5 637 M
(20. Quoted abstract - "... The all nearest smaller values problem is defined as follows. Let A) s
5 626 M
( = \(a1 ; a2 ; : : : ; an \) be n elements drawn from a totally ordered domain. For each ai , 1 ) s
5 615 M
(<= i <= n, find the two nearest elements in A that are smaller than ai \(if such exists\): the l) s
5 604 M
(eft nearest smaller element aj \(with j <= i\) and the right nearest smaller element ak \(with k ) s
5 593 M
(>= i\). We give an O\(log log n\) time optimal parallel algorithm for the problem on a CRCW PRAM ) s
5 582 M
(...". Thus N=n.) s
5 560 M
(21. SIMULATE_RAM subcircuit in point 18 - Number of bits allowed per PRAM cell in PRAM to NC r) s
5 549 M
(eduction - http://hall.org.ua/halls/wizzard/books2/limits-to-parallel-computation-p-completene) s
5 538 M
(ss-theory.9780195085914.35897.pdf - pages 33-36 - quoted excerpts - "... Let M be a CREW-PRAM ) s
5 527 M
(that computes in parallel time t\(n\) = \(log n\)^O\(1\) and processors p\(n\) = n^O\(1\) . Then there e) s
5 516 M
(xists a constant c and a logarithmic space uniform Boolean circuit family, {\316\261n }, such that \316) s
5 505 M
(\261n on input x1 , . . . , xn computes output y1,1 , y1,2 , . . . , yi,j , . . . , where yi,j is) s
5 494 M
( the value of bit j of shared memory cell i at time t\(n\), for 1 \342\\211\244 i \342\\211\244 p\(n\) \342\\210\\227) s
5 483 M
( t\(n\) and 1 \342\\211\244 j \342\\211\244 c*t\(n\) ...". Thus number of bits allowed per PRAM memory location ) s
5 472 M
(is upperbounded by polylogn. For ANSV algorithm underlying the Discrete Hyperbolic Factorizati) s
5 461 M
(on, maximum number of bits per PRAM cell is thus logN where N is the integer to factorize \(and) s
5 450 M
( maximum number of PRAM cells is  ~ pi^2/6 *N\) thereby much below the above polylogN bound for) s
5 439 M
( number of bits per PRAM cell for creating a uniform NC circuit from PRAM model. ) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(-----------------) s
5 384 M
(\(THEORY\) 90.Some notes on extensions to Integer partitions and Hash Functions ) s
5 373 M
(\(https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions.pdf?attredirects=0\)) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(-----------------) s
5 340 M
(1. Riemann sums \(discrete approximation of Riemann integral\) of all the functions correspondin) s
5 329 M
(g to the hash functions are same. Thus all such functions form an equivalence class.\(Assuming ) s
5 318 M
(each partition created by the hash functions as a function plot\)) s
5 296 M
(2. Hardy-Ramanujan asymptotic bound for partition function p\(n\) is ~ O\(e^\(pi*sqrt\(0.66*n\)\)/\(4*) s
5 285 M
(1.732*n\) which places a bound on number of hash functions also.\(http://en.wikipedia.org/wiki/P) s
5 274 M
(artition_\(number_theory\)\)) s
5 252 M
(3. If m-sized subsets of the above O\(m!*e^\(sqrt\(n\)\)/n\) number of hash functions are considered) s
5 241 M
( as a \(k,u\)-universal or \(k,u\)-independent family of functions\(Pr\(f\(x1\)=y1...\) < u/m^k,then fo) s
5 230 M
(llwing the notation in the link mentioned above, this m-sized subset family of hash functions ) s
5 219 M
(follow the Pr\(f\(x1\)=y1 & ...\) < u/m^n where n is number of keys and m is the number of values.) s
5 208 M
( \(m! is for summation over \(m,lamda\(i\)\) for all partitions\)) s
5 186 M
(4. Thus deriving a bound for number of possible hash functions in terms of number of keys and ) s
5 175 M
(values could have bearing on almost all hashes including MD5 and SHA.) s
5 153 M
(5. Birthday problem and Balls and Bins problem - Since randomly populating m bins with n balls) s
5 142 M
( and probability of people in a congregation to have same birthday are a variant of Integer pa) s
5 131 M
(rtitioning and thus hash table bucket chaining, bounds for birthday problem and Chernoff bound) s
5 120 M
(s derived for balls and bins could be used for Hash tables also \(http://en.wikipedia.org/wiki/) s
5 109 M
(Birthday_problem, http://www.cs.ubc.ca/~nickhar/W12/Lecture3Notes.pdf\)) s
5 87 M
(6. Restricted partitions which is the special case of integer partitions has some problems whi) s
5 76 M
(ch are NP-complete. Money changing problem which is finding number of ways of partitioning a g) s
5 65 M
(iven amount of money with fixed denominations\(Frobenius number\) is NP-complete\(http://citeseer) s
5 54 M
(.uark.edu:8080/citeseerx/showciting;jsessionid=92CBF53F1D9823C47F64AAC119D30FC4?cid=3509754, N) s
5 43 M
(aoki Abe 1987\). Number of partitions with distinct and non-repeating parts follow Roger-Ramanu) s
5 32 M
(jan identities \(2 kinds of generating functions\).) s
5 10 M
(7. The special of case of majority voting which involves integer partitions described in https) s
_R
S
%%Page: (71) 71
%%BeginPageSetup
_S
18 36 translate
/pagenum 71 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (71) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(://sites.google.com/site/kuja27/IndepthAnalysisOfVariantOfMajorityVotingwithZFAOC_2014.pdf req) s
5 681 M
(uires a hash function that non-uniformly distributes the keys into hashes so that no two chain) s
5 670 M
(s are equal in size \(to simulate voting patterns without ties between candidates\). This is the) s
5 659 M
( special case of restricted partitions with distinct and non-repeating parts of which money ch) s
5 648 M
(anging is the special case and finding a single solution is itself NP-complete. ) s
5 626 M
(8. Thus Majority voting can be shown to be NP-complete in 2 ways:) s
5 615 M
(        8.1 by Democracy circuit \(Majority with SAT\) in http://sourceforge.net/projects/acadpd) s
5 604 M
(rafts/files/ImplicationGraphsPGoodEquationAndPNotEqualToNPQuestion_excerpts.pdf/download and h) s
5 593 M
(ttps://sites.google.com/site/kuja27/PhilosophicalAnalysisOfDemocracyCircuitAndPRGChoice_2014-0) s
5 582 M
(3-26.pdf) s
5 571 M
(        8.2 by reduction from an NP-hard instance of Restricted Partition problem like Money c) s
5 560 M
(hanging problem for Majority voting with constituencies described in https://sites.google.com/) s
5 549 M
(site/kuja27/IndepthAnalysisOfVariantOfMajorityVotingwithZFAOC_2014.pdf) s
5 527 M
(9. Infact the above two ways occur in two places in the process of democratic voting: The demo) s
5 516 M
(cracy circuit is needed when a single candidate is elected while the restricted partition in s) s
5 505 M
(econd point is needed in a multi-partisan voting where multiple candidates are voted for.) s
5 483 M
(10. Point 8.2 above requires a restricted partition with distinct non-repeating parts. There a) s
5 472 M
(re many results on this like Roger-Ramanujan identities, Glaisher theorem and its special case) s
5 461 M
( Euler's theorem which equate number of partitions with parts divisible by a constant and dist) s
5 450 M
(inctiveness of the parts \(odd, differing by some constant etc.,\). Such a restricted partition ) s
5 439 M
(is needed for a tiebreaker and hence correspond bijectively to  hash collision chaining.) s
5 417 M
(11. An interesting manifestation of point 10 is that nothing in real-life voting precludes a t) s
5 406 M
(ie and enforces a restricted partition, with no two candidates getting equal votes, where all ) s
5 395 M
(voters take decisions independent of one another\(voter independence is questionable to some ex) s
5 384 M
(tent if swayed by phenomena like "votebank","herd mentality" etc.,\) thereby theoretically inva) s
5 373 M
(lidating the whole electoral process. ) s
5 351 M
(12. Counting Number of such restricted partitions is a #P-complete problem - https://www.math.) s
5 340 M
(ucdavis.edu/~deloera/TALKS/denumerant.pdf. ) s
5 318 M
(13. If a Hash table is recursive i.e the chains themselves are hashtables and so on... then th) s
5 307 M
(is bijectively corresponds to a recurrence relation for partition function \(expressing a parti) s
5 296 M
(tion of a higher integer in terms of lower integer\).) s
5 274 M
(14. If the hash table chains are alternatively viewed as Compositions of an integer \(ordered p) s
5 263 M
(artitions\) then there are 2^\(n-1\) maximum possible compositions.\(http://en.wikipedia.org/wiki/) s
5 252 M
(Composition_\(number_theory\)\)) s
5 230 M
(15. In the summation over all parts of partitions derived in https://sites.google.com/site/kuj) s
5 219 M
(a27/IntegerPartitionAndHashFunctions.pdf if m==n then it is the composition in point 14 above ) s
5 208 M
(and thus summation over all parts of partitions is greater than or equal to 2^\(n-1\) since some) s
5 197 M
( permutations might get repeated across partitions. Thus the summation expresses generalized r) s
5 186 M
(estricted composition\(summation_over_all_partitions_of_n\(\(n,lamda\(i\)\)>=2^\(n-1\)\).) s
5 164 M
(16. Logarithm of above summation then is equal to \(n-1\) and thus can be equated to any partiti) s
5 153 M
(on of n. Thus any partition can be written as a series which is the combinatorial function of ) s
5 142 M
(parts in all individual partitions.) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(--------------) s
5 98 M
(91. Updated drafts on Integer partitions and hash function \(with points in 80 above\) , Circuit) s
5 87 M
(s for Error probability in Majority Voting) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(---------------) s
5 54 M
(1. https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.pdf?attredirects) s
5 43 M
(=0&d=1) s
5 32 M
(2. https://sites.google.com/site/kuja27/CircuitForComputingErrorProbabilityOfMajorityVoting_20) s
5 21 M
(14.pdf?attredirects=0&d=1) s
_R
S
%%Page: (72) 72
%%BeginPageSetup
_S
18 36 translate
/pagenum 72 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (72) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-----------------------------------------------------------------------------------) s
5 681 M
(92. Reference URLs for restricted integer partitions with distinct parts) s
5 670 M
(-----------------------------------------------------------------------------------) s
5 659 M
(\(for http://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.pdf?attredirect) s
5 648 M
(s=0&d=1\)) s
5 637 M
(1. Generating function - http://math.berkeley.edu/~mhaiman/math172-spring10/partitions.pdf) s
5 626 M
(2. Schur's theorem for asymptotic bound for number of denumerants - http://en.wikipedia.org/wi) s
5 615 M
(ki/Schur's_theorem) s
5 604 M
(3. Frobenius problem - http://www.math.univ-montp2.fr/~ramirez/Tenerif3.pdf) s
5 593 M
(4. Locality Sensitive Hashing \(that groups similar keys into a collision bucket chain using st) s
5 582 M
(andard metrics like Hamming Distance\) - http://hal.inria.fr/inria-00567191/en/,  http://web.mi) s
5 571 M
(t.edu/andoni/www/LSH/index.html, http://en.wikipedia.org/wiki/Locality-sensitive_hashing) s
5 560 M
(5. Locality Sensitive Hashing and Lattice sets \(of the diophantine form a1*x1+a2*x2+...+an*xn\)) s
5 549 M
( -  http://hal.inria.fr/docs/00/56/71/91/PDF/paper.pdf) s
5 538 M
(6. Minhash and Jaccard similarity coefficient - http://en.wikipedia.org/wiki/MinHash#Jaccard_s) s
5 527 M
(imilarity_and_minimum_hash_values \(similar to LSH that emphasizes on hash collisions for simil) s
5 516 M
(arity measures between sets e.g bag of words of URLs\)) s
5 494 M
(-------------------------------------------------------------------------------------) s
5 483 M
(\(THEORY\) 93. Reduction from Money Changing Problem or 0-1 Integer LP to Restricted Partitions ) s
5 472 M
(with distinct parts) s
5 461 M
(-------------------------------------------------------------------------------------) s
5 450 M
(If the denominations are fixed as 1,2,3,4,5,....,n then the denumerants to be found are from t) s
5 439 M
(he diaphantine equation:) s
5 428 M
(a1*1 + a2*2 + a3*3 + a4*4 + a5*5 + ...+ an*n) s
5 417 M
(\(with ai = 0 or 1\). GCD of all ai\(s\) is 1. Thus Schur's theorem for MCP or Coin Problem applie) s
5 406 M
(s.) s
5 395 M
(Integet 0-1 LP NP-complete problem can also be reduced to above diophantine format instead of ) s
5 384 M
(MCP. Finding one such denumerant with) s
5 373 M
(boolean values is then NP-complete and hence finding one partition with distinct non-repeating) s
5 362 M
( parts is NP-complete \(needed in multipartisan) s
5 351 M
(majority vote\).) s
5 329 M
(---------------------------------------------------) s
5 318 M
(\(FEATURE- DONE\) 94. Commits as on 23 April 2014) s
5 307 M
(---------------------------------------------------) s
5 296 M
(Updated pgood.cpp with some optimizations for factorial computations and batched summation to ) s
5 285 M
(circumvent overflow to some extent.) s
5 274 M
(For Big decimals IEEE 754 with 112+ bits precision is needed for which boost::multiprecision o) s
5 263 M
(r java.math.BigDecimal might have to be used.) s
5 241 M
(--------------------------------------------------) s
5 230 M
(\(FEATURE- DONE\) 95. Commits as on 7 July 2014) s
5 219 M
(--------------------------------------------------) s
5 208 M
(Initial implementation of a Chaos attractor sequence implementation committed to repository.) s
5 186 M
(--------------------------------------------------) s
5 175 M
(\(FEATURE- DONE\) 96. Commits as on 8 July 2014) s
5 164 M
(--------------------------------------------------) s
5 153 M
(Python-R \(rpy2\) code for correlation coefficient computation added to above Chaos attractor im) s
5 142 M
(plementation.) s
5 120 M
(--------------------------------------------------------------------) s
5 109 M
(\(FEATURE- DONE\) 97. Time Series Analysis - Commits as on 9 July 2014) s
5 98 M
(--------------------------------------------------------------------) s
5 87 M
(DJIA dataset, parser for it and updated ChaosAttractor.py for chaotic and linear correlation c) s
5 76 M
(oefficient computation of DJIA dataset) s
5 65 M
(have been committed.) s
5 43 M
(--------------------------------------------------) s
5 32 M
(\(FEATURE- DONE\) 98. Commits as on 10 July 2014) s
5 21 M
(--------------------------------------------------) s
5 10 M
(Python\(rpy2\) script for computing Discrete Fourier Transform for DJIA dataset has been added \() s
_R
S
%%Page: (73) 73
%%BeginPageSetup
_S
18 36 translate
/pagenum 73 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (73) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(internally uses R\). [python-src/DFT.py]) s
5 670 M
(--------------------------------------------------) s
5 659 M
(\(FEATURE- DONE\) 99. Commits as on 11 July 2014) s
5 648 M
(--------------------------------------------------) s
5 637 M
(Python\(rpy2\) script for spline interpolation of DJIA dataset and plotting a graph of that usin) s
5 626 M
(g R graphics has been added. [python-src/Spline.py]) s
5 604 M
(--------------------------------------------------) s
5 593 M
(\(FEATURE- DONE\) 100. Commits as on 15 July 2014 and 16 July 2014) s
5 582 M
(--------------------------------------------------) s
5 571 M
(Doxygen documentation for AsFer, USBmd, VIRGO, KingCobra and Acadpdrafts have been committed t) s
5 560 M
(o GitHub at https://github.com/shrinivaasanka/Krishna_iResearch_DoxygenDocs. LOESS local polyn) s
5 549 M
(omial regression fitting code using loess\(\) function in R has been added at python-src/LOESS.p) s
5 538 M
(y. Approximate linear interpolation code using approx\(\) and approxfun\(\) in R has been added at) s
5 527 M
( python-src/Approx.py) s
5 505 M
(-------------------------------------------------) s
5 494 M
(\(FEATURE- DONE\) 101.Commits as on 23 July 2014) s
5 483 M
(-------------------------------------------------) s
5 472 M
(Draft additions to http://arxiv.org/pdf/1106.4102v1.pdf are in the Complement Function item ab) s
5 461 M
(ove. An R graphics rpy2 script RiemannZetaFunctionZeros.py has been added to parse the first 1) s
5 450 M
(00000 zeros of RZF and plot them using R Graphics.) s
5 428 M
(--------------------------------------------------------------------) s
5 417 M
(\(FEATURE - THEORY - Visualizer Implementation DONE\) 102. Dense Subgraphs of the WordNet subgra) s
5 406 M
(phs from Recursive Gloss Overlap) s
5 395 M
(--------------------------------------------------------------------) s
5 384 M
(http://arxiv.org/abs/1006.4458 and http://www.nist.gov/tac/publications/2010/participant.paper) s
5 373 M
(s/CMI_IIT.proceedings.pdf have been extended for a summary creation algorithm from WordNet sub) s
5 362 M
(graphs of Recursive Gloss Overlap by filtering out low degree vertices\(https://sites.google.co) s
5 351 M
(m/site/kuja27/DocumentSummarization_using_SpectralGraphTheory_RGOGraph_2014.pdf?attredirects=0) s
5 340 M
(&d=1\). For undirected graphs there is a notion of k-core of a graph which is an induced subgra) s
5 329 M
(ph of degree k vertices. Since Wordnet is a directed graph, recently there are measures to mea) s
5 318 M
(sure degeneracy\(D-cores - http://www.graphdegeneracy.org/dcores_ICDM_2011.pdf\). Graph peeling ) s
5 307 M
(is a process of removing edges to create a dense subgraph. This can be better visualized using) s
5 296 M
( visual wordnet implementations: ) s
5 285 M
(        102.1 http://kylescholz.com/projects/wordnet/) s
5 274 M
(        102.2 http://www.visuwords.com) s
5 263 M
(        102.3 http://www.visualthesaurus.com/browse/en/Princeton%20WordNet) s
5 241 M
(------------------------------------------------------------------) s
5 230 M
(103. AsFer version 14.9.9 release tagged on 9 September 2014) s
5 219 M
(------------------------------------------------------------------) s
5 208 M
(-------------------------------------------------------------------) s
5 197 M
(\(FEATURE- DONE\) 104. Commits as on 9 October 2014) s
5 186 M
(-------------------------------------------------------------------) s
5 175 M
(Initial python script implementation for Text compression committed with logs and screenshot. ) s
5 164 M
(Decompression is still hazy and needs some more algorithmic work. ) s
5 142 M
(------------------------------------------------------------------) s
5 131 M
(\(FEATURE- DONE\) 105. Commits as on 21 October 2014) s
5 120 M
(------------------------------------------------------------------) s
5 109 M
(An experimental POC python implementation that uses Hidden Markov Model for decompression has ) s
5 98 M
(been committed. But it depends on one-time computing a huge number of priors and their accurac) s
5 87 M
(y.) s
5 65 M
(------------------------------------------------------------------) s
5 54 M
(\(THEORY\) 106. Creating a summary graph from EventNet) s
5 43 M
(------------------------------------------------------------------) s
5 32 M
(EventNet graph for historical cause and effect described above can be huge of the order of tri) s
5 21 M
(llion vertices and edges. To get a summary of the) s
5 10 M
(events might be necessary at times - similar to a document summarization. Summarizing a graph ) s
_R
S
%%Page: (74) 74
%%BeginPageSetup
_S
18 36 translate
/pagenum 74 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (74) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(of event cause-effects requires giving importance to most important events in the graph - vert) s
5 681 M
(ices with high number of degrees \(indegrees + outdegrees\) . This is nothing but finding k-core) s
5 670 M
( of a graph which is a maximal connected subgraph of EventNet where every vertex is of degree ) s
5 659 M
(atleast k.) s
5 637 M
(-----------------------------------------------------------------) s
5 626 M
(\(FEATURE- DONE\) 107. Commits as on 1 November 2014) s
5 615 M
(-----------------------------------------------------------------) s
5 604 M
(A minimal PAC learning implementation in python to learn a Boolean Conjunction from dataset ha) s
5 593 M
(s been added to repository.) s
5 571 M
(-----------------------------------------------------------------) s
5 560 M
(\(FEATURE- DONE\) 108. Commits as on 4 November 2014) s
5 549 M
(-----------------------------------------------------------------) s
5 538 M
(Initial implementation for Minimum Description Length has been added to repository.) s
5 516 M
(-----------------------------------------------------------------) s
5 505 M
(\(FEATURE- DONE\) 109. Commits as on 6 November 2014) s
5 494 M
(-----------------------------------------------------------------) s
5 483 M
(Python Shannon Entropy implementation for texts has been added to repository and is invoked in) s
5 472 M
( MinimumDescLength.py MDL computation.) s
5 450 M
(-----------------------------------------------------------------) s
5 439 M
(\(FEATURE- DONE\) 110. Commits as on 7 November 2014) s
5 428 M
(-----------------------------------------------------------------) s
5 417 M
(Python Kraft Inequality MDL implementation has been committed.) s
5 395 M
(-----------------------------------------------------------------) s
5 384 M
(\(FEATURE- DONE\) 111. Commits as on 11 November 2014) s
5 373 M
(-----------------------------------------------------------------) s
5 362 M
(C++ implementation for Wagner-Fischer Dynamic Programming algorithm that iteratively computes ) s
5 351 M
(Levenshtein Edit Distance than recursively has been added to repository.) s
5 329 M
(-----------------------------------------------------------------) s
5 318 M
(\(FEATURE - DONE\) 112. Expirable objects) s
5 307 M
(-----------------------------------------------------------------) s
5 296 M
(Setting expiry to an object is sometimes essential to control updates and access to an object.) s
5 285 M
( Example application of this - A JPEG image) s
5 274 M
(should be accessible or displayable for only a finite number of times and after that it has to) s
5 263 M
( self-destruct. Though doing this in C++ is ) s
5 252 M
(straightforward with operator overloading, in C it looks non-trivial. Presently only C++ imple) s
5 241 M
(mentation is added to repository.) s
5 219 M
(-----------------------------------------------------------------------------) s
5 208 M
(\(FEATURE- DONE\) 113. Commits as on 11 November 2014 - Expirable template class implementation ) s
5 197 M
(-----------------------------------------------------------------------------) s
5 186 M
(Similar to weak_ptr and shared_ptr, a generic datatype that wraps any datatype and sets an exp) s
5 175 M
(iry count to it has been added to repository ) s
5 164 M
(in cpp-src/expirable/ . For example, a bitmap or a JPEG image can be wrapped in expirable cont) s
5 153 M
(ainer and it can be access-controlled. ) s
5 142 M
(If expiry count is 1, the object \(an image for example\) can be written to or displayed only on) s
5 131 M
(ce and thus a singleton.  Presently this is ) s
5 120 M
(only for rvalues. Implementing for lvalues \(just a usage without assignment should be able to ) s
5 109 M
(expire an object\) seems to be a hurdle as ) s
5 98 M
(there is no operator overloading available for lvalues - i.e there is no "access" operator to ) s
5 87 M
(overload. This might be needed for KingCobra) s
5 76 M
(MAC electronic money also.\(std::move\(\) copy-by-move instead of a std::swap\(\) copy-by-swap idio) s
5 65 M
(m\)) s
5 43 M
(----------------------------------------------------------------------------) s
5 32 M
(\(FEATURE- DONE\) 114. Commits as on 12 November 2014 ) s
5 21 M
(----------------------------------------------------------------------------) s
5 10 M
(Expirable template in asferexpirable.h has been updated with 2 operator=\(\)) s
_R
S
%%Page: (75) 75
%%BeginPageSetup
_S
18 36 translate
/pagenum 75 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (75) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(functions for copy-assignment and move-assignment which interally invoke) s
5 681 M
(std::swap\(\) and std::move\(\). Explicit delete\(s\) are thus removed. Also example) s
5 670 M
(testcase has been updated to use a non-primitive datatype.) s
5 648 M
(----------------------------------------------------------------------------) s
5 637 M
(\(FEATURE- DONE\) 115. Commits as on 13 November 2014) s
5 626 M
(----------------------------------------------------------------------------) s
5 615 M
(Overloaded operator*\(\) function added for expiry of "access" to objects. With this problem men) s
5 604 M
(tioned in 113 in tracking access or just usage is) s
5 593 M
(circumvented indirectly. ) s
5 571 M
(---------------------------------------------------------------------------) s
5 560 M
(\(FEATURE- DONE\) 116. Commits as on 15 November 2014) s
5 549 M
(---------------------------------------------------------------------------) s
5 538 M
(Python implementation for Perceptron and Gradient has been added to repository.) s
5 516 M
(---------------------------------------------------------------------------) s
5 505 M
(\(FEATURE- DONE\) 117. Commits as on 17 November 2014) s
5 494 M
(---------------------------------------------------------------------------) s
5 483 M
(Python implementation for Linear and Logistic Regression in 2 variables.) s
5 461 M
(---------------------------------------------------------------------------) s
5 450 M
(\(FEATURE- DONE\) 118. Commits as on 20 November 2014) s
5 439 M
(---------------------------------------------------------------------------) s
5 428 M
(C++ implementation of K-Means clustering with edit distance as metric has been added to) s
5 417 M
(repository.) s
5 395 M
(---------------------------------------------------------------------------) s
5 384 M
(\(FEATURE- DONE\) 119. Commits as on 21 November 2014) s
5 373 M
(---------------------------------------------------------------------------) s
5 362 M
(C++ implementation of k-Nearest Neighbour clustering has been added to repository.) s
5 340 M
(---------------------------------------------------------------------------) s
5 329 M
(120. Commits as on 24 November 2014) s
5 318 M
(---------------------------------------------------------------------------) s
5 307 M
(Bugfixes to kNN implementation.) s
5 285 M
(---------------------------------------------------------------------------) s
5 274 M
(\(FEATURE- DONE\) 121. Commits as on 25 November 2014) s
5 263 M
(---------------------------------------------------------------------------) s
5 252 M
(Python script for decoding encoded horoscope strings \(from Maitreya's Dreams\) has been added t) s
5 241 M
(o) s
5 230 M
(repository.) s
5 208 M
(--------------------------------------------------------------------------) s
5 197 M
(122. \(FEATURE - DONE\) Commits as on 3 December 2014) s
5 186 M
(--------------------------------------------------------------------------) s
5 175 M
(Initial implementation for EventNet:) s
5 164 M
(-----------------------------------) s
5 153 M
(1. EventNet python script has inputs from two text files - EventNetEdges.txt and EventNetVerti) s
5 142 M
(ces.txt - which define the event vertices and the causations amongst them with partakers in ea) s
5 131 M
(ch event node) s
5 120 M
(2. This uses GraphViz \(that in turn writes a dot file\) and python-graph+gv packages) s
5 109 M
(3. GraphViz writes to EventNet.graphviz.pdf and EventNet.gv.png rendered and visualized graph ) s
5 98 M
(files.) s
5 87 M
(4. Above text files are disk-stored and can be grown infinitely.) s
5 76 M
(5. EventNetVertices.txt has the format:) s
5 65 M
(        <event vertex> - <csv of partakers in the event vertex>) s
5 54 M
(   EventNetEdges.txt has the format:) s
5 43 M
(        <ordered pairs of vertices for each causation edge>) s
5 32 M
(6. Topological Sorting of EventNet using python-graph algorithms package) s
5 10 M
(----------------------------------------------------------------------------------------) s
_R
S
%%Page: (76) 76
%%BeginPageSetup
_S
18 36 translate
/pagenum 76 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (76) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\(THEORY\) 123. EventNet - partakers of events and an application of EventNet to a related probl) s
5 681 M
(em) s
5 670 M
(----------------------------------------------------------------------------------------) s
5 659 M
(Event vertices have partakers of event as defined in 122. Point 84-86 previously defined Event) s
5 648 M
(Net as) s
5 637 M
(a fractal graph tensor where each vertex is a graph or partakers. Alternative formulation of t) s
5 626 M
(his is) s
5 615 M
(where the partakers are just key words or persons in that event. For example, a fictitious sto) s
5 604 M
(ry can be translated into a giant EventNet where each vertex is an event with corresponding pa) s
5 593 M
(rtakers in it. It could be difficult to find edges among the partakers \(Ideally the edges are ) s
5 582 M
(conversations among the partakers of an event specific to this example\). As an approximation, ) s
5 571 M
(the partakers could be simply the keywords parsed from that set of conversations. Complexity o) s
5 560 M
(r connectedness and number of topological orderings possible for this translated EventNet is a) s
5 549 M
( measure of elegance.) s
5 527 M
(---------------------------------------------------------------------------------------) s
5 516 M
(\(FEATURE- DONE\) 124. Commits as on 4 December 2014) s
5 505 M
(---------------------------------------------------------------------------------------) s
5 494 M
(EventNet - a cloudwide event ordering with unique id implementation) s
5 483 M
(--------------------------------------------------------------------) s
5 472 M
(EventNet has 2 input files for vertices and edges with partakers and ) s
5 461 M
(writes an output file with ordering of the events) s
5 439 M
(Input - EventNetVertices.txt has the format:) s
5 428 M
(       <event vertex> - <csv of partakers> - <tuples of conversations amongst the partakers # ) s
5 417 M
(separated>) s
5 406 M
(       partakers could be machine id\(s\) or IP addresses and thread id\(s\) and the conversations) s
5 395 M
( being the        messages to-and-fro across the partakers, which create an IntraEvent Graph o) s
5 384 M
(f Conversations) s
5 373 M
(       within each event vertex) s
5 351 M
(Input - EventNetEdges.txt has the format:) s
5 340 M
(       <event vertex1, event vertex2>) s
5 318 M
(Output - EventNetOrdering.txt has the format:) s
5 307 M
(       <index in chronologically ascending order> - <event id>) s
5 285 M
(EventNet script thus is run in a central node which has the input files above that is) s
5 274 M
(updated by all the nodes in cloud. Outgoing edge from an event vertex has partakers from multi) s
5 263 M
(ple) s
5 252 M
(events and thus is an outcome of the event. If the input files are split and stored in multipl) s
5 241 M
(e cloud) s
5 230 M
(nodes, the topological sorts for multiple input files have to be merged to create a single clo) s
5 219 M
(udwide) s
5 208 M
(ordering. ) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(----) s
5 164 M
(\(THEORY\) 125. Massive EventNet computation ) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(----) s
5 131 M
(Each conversation of the events needs to create a log message that is sent to the EventNet ser) s
5 120 M
(vice) s
5 109 M
(which updates the input vertices and edges files. The python EventNet script run optionally on) s
5 98 M
( a hadoop) s
5 87 M
(cluster mapreduce recomputes the topological ordering periodically. This is quite tedious a pr) s
5 76 M
(ocess that can flood the cloud with log messages enabled by config boolean flag or compile tim) s
5 65 M
(e #ifdef.  ) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(----) s
5 21 M
(\(FEATURE- DONE\) 126. Commits as on 5 December 2014) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (77) 77
%%BeginPageSetup
_S
18 36 translate
/pagenum 77 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (77) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----) s
5 681 M
(Initial C++ Boost::graph based implementation for EventNet has been added to repository.) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(----) s
5 637 M
(\(THEORY\) 127. 2-dimensional random walks for decision making \(experimental\)) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(----) s
5 604 M
(Continued from point 49 above, the psychological process of decision making \(in a mental confl) s
5 593 M
(ict with) s
5 582 M
(two opposing directions\) is akin to a game theoretical notion of Nash Equilibrium - where a hu) s
5 571 M
(ge payoff) s
5 560 M
(matrix is constructed for the random walk directions as strategies for the two conflicting dec) s
5 549 M
(isions. There could be Nash Equilibria where decision1 doesn't gain from changing the random w) s
5 538 M
(alk direction and decision2 doesn't gain from changing the direction \(max\(column\),max\(row\)\). T) s
5 527 M
(hese equilibria are like a win-win or a dilemma . For that matter this should apply to decisio) s
5 516 M
(n trees as well. Related application of equilibria for epidemic and malware are at: http://www) s
5 505 M
(.aaai.org/ocs/index.php/AAAI/AAAI14/paper/view/8478) s
5 483 M
(---------------------------------------------------------------------------------------------) s
5 472 M
(128. Commits as on 9 December 2014) s
5 461 M
(---------------------------------------------------------------------------------------------) s
5 450 M
(Bugfixes for DOT file generation and toposort in C++ EventNet implementation. ) s
5 428 M
(---------------------------------------------------------------------------------------------) s
5 417 M
(129. \(THEORY\) Draft Updates to https://sites.google.com/site/kuja27/CircuitForComputingErrorPr) s
5 406 M
(obabilityOfMajorityVoting_2014.pdf?attredirects=0&d=1 - P\(Good\) series computation) s
5 395 M
(---------------------------------------------------------------------------------------------) s
5 384 M
(For even number of finite population \(electorate\) the binomial coefficient summation in unifor) s
5 373 M
(m distribution has an extra coefficient which when summed up tends to zero at infinity. Thus P) s
5 362 M
(\(Good\) series converges to,) s
5 340 M
(        \(2^n - nC\(n/2\)\)/2^\(n+1\) = 0.5 - epsilon where epsilon=sqrt\(1/\(2*n*pi\)\) limit for which) s
5 329 M
( vanishes at infinity) s
5 307 M
(\(or\) probability of good choice is epsilon less than 50% for finite even number of electorate ) s
5 296 M
(for uniform distribution - a weird counterintuitive special case. Thus the counterexample for ) s
5 285 M
(P Vs NP is still valid at infinity if infinite majority is decidable\(related to decidability o) s
5 274 M
(f infinite-candidate condorcet election , May's theorem and Arrow's theorem\) . Written notes f) s
5 263 M
(or this are at: http://sourceforge.net/p/asfer/code/568/tree/python-src/ComplFunction_DHF_PVsN) s
5 252 M
(P_Misc_Notes.pdf. What this implies is the LHS is PRG circuit in NC or P while the RHS is a hu) s
5 241 M
(mongous infinite majority+SAT \(oracle\) circuit - unbounded fan-in constant depth circuit. This) s
5 230 M
( then becomes an NP-complete Circuit SAT problem - http://www.cs.berkeley.edu/~luca/cs170/note) s
5 219 M
(s/lecture22.pdf. ) s
5 197 M
(If this infinite-ness breaches the polynomiality then what is quite puzzling is that RHS becom) s
5 186 M
(es a Direct Connect DC circuit equivalent to PH\(Polynomial Hierarchy\). Quoted excerpts from Ar) s
5 175 M
(ora-Barak for DC uniform circuits:) s
5 153 M
("... ) s
5 142 M
(6.6) s
5 131 M
(Circuits of exponential size) s
5 120 M
(As noted, every language has circuits of size O\(n^2^n \). However, actually finding these circu) s
5 109 M
(its may) s
5 98 M
(be difficult\342\\200\\224 sometimes even undecidable. If we place a uniformity condition on the ci) s
5 87 M
(rcuits, that) s
5 76 M
(is, require them to be efficiently computable then the circuit complexity of some languages co) s
5 65 M
(uld) s
5 54 M
(exceed n^2^n . In fact it is possible to give alternative definitions of some familiar complex) s
5 43 M
(ity classes,) s
5 32 M
(analogous to the definition of P in Theorem 6.7.) s
5 21 M
(Definition 6.28 \(DC-Uniform\)) s
5 10 M
(Let {C n } n\342\\211\2451 be a circuit family. We say that it is a Direct Connect uniform \(DC unifor) s
_R
S
%%Page: (78) 78
%%BeginPageSetup
_S
18 36 translate
/pagenum 78 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (78) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(m\) family if,) s
5 681 M
(given hn, ii, we can compute in polynomial time the i th bit of \(the representation of\) the ci) s
5 670 M
(rcuit C n .) s
5 659 M
(More concretely, we use the adjacency matrix representation and hence a family {C n } n\342\\210) s
5 648 M
(\\210N is DC) s
5 637 M
(uniform iff the functions SIZE, TYPE and EDGE defined in Remark ?? are computable in polynomia) s
5 626 M
(l) s
5 615 M
(time.) s
5 604 M
(Note that the circuits may have exponential size, but they have a succinct representation in) s
5 593 M
(terms of a TM which can systematically generate any required node of the circuit in polynomial) s
5 582 M
(time.) s
5 571 M
(Now we give a \(yet another\) characterization of the class PH, this time as languages computabl) s
5 560 M
(e) s
5 549 M
(by uniform circuit families of bounded depth. We leave it as Exercise 13.) s
5 527 M
(Theorem 6.29) s
5 516 M
(L \342\\210\\210 P H iff L can be computed by a DC uniform circuit family {C n } that) s
5 505 M
(\342\\200\242 uses AND, OR, NOT gates.) s
5 494 M
(O\(1\)) s
5 483 M
(\342\\200\242 has size 2^n) s
5 472 M
(and constant depth \(i.e., depth O\(1\)\).) s
5 461 M
(\342\\200\242 gates can have unbounded \(exponential\) fanin.) s
5 450 M
(\342\\200\242 the NOT gates appear only at the input level.) s
5 439 M
(If we drop the restriction that the circuits have constant depth, then we obtain exactly EXP) s
5 428 M
(...") s
5 406 M
(The RHS Majority+SAT circuit has all characteristics satisfying the DC-uniformity in the theor) s
5 395 M
(em above - size can be exponential, unbounded fanin, depth is constant \(each Voter Circuit SAT) s
5 384 M
( CNF is AND of ORs - depth 3\) and NOT gates are required only in leaf nodes of the Voter Circu) s
5 373 M
(it SAT. Thus the counterexample could imply very,very importantly that P could be equal to PH ) s
5 362 M
(or EXP \(P=PH or P=EXP based on depth restricted or unrestricted\) in infinite or exponential ca) s
5 351 M
(se respectively - could have tumultuous ramifications for complexity theory as a whole as it g) s
5 340 M
(oes beyond P=NP question - for perfect voter scenario described in point 133 - all circumstant) s
5 329 M
(ial evidences above point to this. ) s
5 307 M
(It is not necessary that per voter SAT is same for all voters. Each voter can have unrestricte) s
5 296 M
(d depth SAT clauses \(in real world ,each voter decides on his-her own volition and depth of th) s
5 285 M
(eir SAT circuits can vary based on complexity of per-individual decision making algorithm\) - d) s
5 274 M
(ue to which RHS zero-error DC circuit need not be in PH but in EXP.) s
5 252 M
(even if a BQP algorithm is used in voting outside the purview of PH but in EXP, it doesn't cha) s
5 241 M
(nge the above unless:) s
5 230 M
( - perfection is impossible i.e there cannot be zero-error processes in the universe) s
5 219 M
( - DC-circuit is not drawable \(or undecidable if it can be constructed\)) s
5 208 M
( - infinite majority is undecidable \(so circuit is DC non-uniform and not DC-uniform\)) s
5 197 M
( - the voter CNF can only be 2-SAT \(which is highly unlikely\) and not k-SAT or 3-SAT) s
5 164 M
(129.1 Toda's theorem and P\(good\) circuit above:) s
5 153 M
(------------------------------------------------) s
5 142 M
(PH is contained in P^#P \(or\) P with #no-of-solutions-to-SAT oracle \(Toda's theorem\). ) s
5 131 M
(If zero-error Majority+SAT voting DC uniform circuit is in PH then due to LHS=RHS of the P\(goo) s
5 120 M
(d\) series convergence \(in cases of p=0,p=1 and p=0.5 as derived in http://sourceforge.net/p/as) s
5 109 M
(fer/code/916/tree/cpp-src/miscellaneous/MajorityVotingErrorProbabilityConvergence.JPG\), ) s
5 98 M
(PH collapses\(?\) to P \(quite unbelievably\):) s
5 87 M
(LHS Pseudorandom choice is in P while RHS Majority+SAT is in PH=DC circuit \(restricted depth\) ) s
5 76 M
(or EXP \(unrestricted depth\)) s
5 65 M
(\(i.e there is a P algorithm for PH\). ) s
5 54 M
(if P=PH:) s
5 43 M
(  P=PH is in P^#P by Toda's theorem ) s
5 21 M
(if P=EXP:) s
5 10 M
( P=PH=EXP in P^#P or P=PH=EXP=P^#P \(which is a complete collapse\)) s
_R
S
%%Page: (79) 79
%%BeginPageSetup
_S
18 36 translate
/pagenum 79 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (79) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
([p=0.5 is the uniform distribution which is a zero bias space while for other probabilities so) s
5 670 M
(me bit patterns are less likely - epsilon-bias spaces]) s
5 637 M
(---------------------------------------------------------------------------------------------) s
5 626 M
(130. \(THEORY\) Counterexample definition for P Vs NP) s
5 615 M
(---------------------------------------------------------------------------------------------) s
5 604 M
(Majority Circuit with SAT voter inputs with finite odd number of voters, in uniform distributi) s
5 593 M
(on) s
5 582 M
(converges to 1/2 same as LHS for pseudorandom choice. Even number of voters is a special case ) s
5 571 M
(described) s
5 560 M
(previously. Also both LHS and RHS converge to 1 if probability is 1 \(without any errors in pse) s
5 549 M
(udorandom choice and majority voting\) which is counterintuitive in the sense that LHS nonproba) s
5 538 M
(bilistically achieves in PTIME what RHS does in NPTIME.) s
5 516 M
(---------------------------------------------------------) s
5 505 M
(131. \(THEORY\) Infinite majority and SAT+Majority Circuit) s
5 494 M
(---------------------------------------------------------) s
5 483 M
(Infinite version of majority circuit is also a kind of heavy hitters problem for streaming alg) s
5 472 M
(orithms where majority has to be found in an infinite bitstream of output from majority circui) s
5 461 M
(ts for voters\(http://en.wikipedia.org/wiki/Streaming_algorithm#Heavy_hitters\). But nonuniform ) s
5 450 M
(distribution still requires hypergeometric series. Moreover the SAT circuit is NP-complete as ) s
5 439 M
(the inputs are unknown and is P-Complete only for non-variable gates\(Circuit Value Problem\). O) s
5 428 M
(dd number of electorate does not give rise to above extra coefficient in summation and is dire) s
5 417 M
(ctly deducible to 0.5.) s
5 395 M
(----------------------------------------------------------) s
5 384 M
(132. \(THEORY\) May's Theorem of social choice ) s
5 373 M
(----------------------------------------------------------) s
5 362 M
(May's Theorem: In a two-candidate election with an odd number of voters, majority rule is the ) s
5 351 M
(only voting system that is anonymous, neutral, and monotone, and that avoids the possibilites ) s
5 340 M
(of ties. ) s
5 318 M
(May's theorem is 2-candidate analog of Arrow's Theorem for 3-candidate condorcet voting. May's) s
5 307 M
( theorem for 2 candidate simple majority voting defines a Group Decision Function which is val) s
5 296 M
(ued at -1, 0 or 1 \(http://www.jmc-berlin.org/new/theorems/MaysTheorem.pdf\) for negative, abste) s
5 285 M
(ntion and positive vote for a candidate. For 2 candidates, positive vote for one candidate is ) s
5 274 M
(negative for the other \(entanglement\).In the democracy circuit \(SAT+Majority\) the SAT clauses ) s
5 263 M
(are kind of Group Decision Functions but with only binary values without any abstention. This ) s
5 252 M
(is kind of alternative formulation - corollary - for May's theorem. Arrow's theorem does not a) s
5 241 M
(pply for 2 candidate simple majority voting. May's theorem stipulates the conditions of anonym) s
5 230 M
(ity,neutrality,decisiveness,monotonicity which should apply to the Majority+SAT circuit decisi) s
5 219 M
(on function as well. Neutrality guarantees that all outcomes are equally probable without bias) s
5 208 M
( which might imply that only uniform distribution is allowed in 2 candidate Majority+SAT votin) s
5 197 M
(g. Thus there is a reduction from May's theorem to SAT+Majority democracy circuit. May's theor) s
5 186 M
(em does not apply to ties.This has been generalized to infinite electorate by Mark Fey. Anonym) s
5 175 M
(ity is secret balloting. Monotonicity is non-decremental \(e.g by losing votes a losing candida) s
5 164 M
(te is not winner and vice versa\).) s
5 142 M
(Additional References:) s
5 131 M
(----------------------) s
5 120 M
(132.1 May's theorem - http://www.math.cornell.edu/~mec/Summer2008/anema/maystheorem.html) s
5 98 M
(------------------------------------------------------------------------------------) s
5 87 M
(133. \(THEORY\) Pseudorandom number generator and Majority voting for choice on a set) s
5 76 M
(------------------------------------------------------------------------------------) s
5 65 M
(Let S be a set of elements with "goodness" attribute for each element. Choice using LHS and RH) s
5 54 M
(S on this set is by a PRG and a majority voting circuit with SAT inputs. LHS for pseudorandom ) s
5 43 M
(choice consists of two steps:) s
5 32 M
(133.1 Accuracy of the PRG - how random or k-wise independent the PRG is - this is usually by c) s
5 21 M
(onstruction of a PRG \(Blum-Micali, Nisan etc.,\) ) s
5 10 M
(133.2 Goodness of chosen element - PRG is used to choose an element from the set - this mimick) s
_R
S
%%Page: (80) 80
%%BeginPageSetup
_S
18 36 translate
/pagenum 80 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (80) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(s the realworld phenomenon of non-democractic social or non-social choices. Nature itself is t) s
5 681 M
(he PRG or RG in this case. After choice is made, how "good" is the chosen is independent of \(1) s
5 670 M
(33.1\). Proof is by contradiction - if it were dependent on PRG used then a distinguisher can d) s
5 659 M
(iscern the PRGs from True Randomness by significant fraction.) s
5 648 M
(133.3 Thus if the set S is 100% perfect - all elements in it are the best - LHS of P\(Good\) is ) s
5 637 M
(1. Similarly the RHS is the majority voting within these "best" elements which can never err \() s
5 626 M
(i.e their SAT clauses are all perfect\) that converges to 1 by binomial coefficient summation i) s
5 615 M
(n uniform distribution.) s
5 593 M
(From the aforementioned,it is evident that for a 100% perfect set,both PRG\(LHS\) and Majority+S) s
5 582 M
(AT\(RHS\) Voting are two choice algorithms of equal outcome but with differing lowerbounds\(with ) s
5 571 M
(p=0.5 both LHS and RHS are in BPP or BPNC,but when p=1 then RHS is NP and LHS is P or NC\). The) s
5 560 M
( set in toto is a black-box which is not known to the PRG or individual voters who are the con) s
5 549 M
(stituents of it.) s
5 527 M
(--------------------------------------------------------------------------------) s
5 516 M
(\(FEATURE- DONE\) 134.Commits as on 8 January 2015) s
5 505 M
(--------------------------------------------------------------------------------) s
5 494 M
(134.1 C++ implementation for Longest Common Substring has been added to repository with logs. ) s
5 483 M
(Datasets were the clustered encoded strings output by KMeans clustering C++ implementation.) s
5 472 M
(134.2 AsFer+USBmd+VIRGO+KingCobra+Acadpdrafts - version 15.1.8 release tagged.) s
5 439 M
(--------------------------------------------------------------------------------) s
5 428 M
(135. \(THEORY\) Updates, Corrigenda and References to Space Filling Algorithm in :) s
5 417 M
(https://sites.google.com/site/kuja27/Analysis%20of%20a%20Randomized%20Space%20Filling%20Algori) s
5 406 M
(thm%20and%20its%20Linear%20Program%20Formulation.pdf?attredirects=0) s
5 395 M
(--------------------------------------------------------------------------------) s
5 384 M
(135.1 The standard LP form can be obtained by slack variables \(with only equalities\) - mention) s
5 373 M
(ed as free variables in above - http://ocw.mit.edu/courses/sloan-school-of-management/15-053-o) s
5 362 M
(ptimization-methods-in-management-science-spring-2013/tutorials/MIT15_053S13_tut06.pdf ) s
5 340 M
(135.2 Pseudorandom generator with linear stretch in NC1 - http://homepages.inf.ed.ac.uk/mcryan) s
5 329 M
(/mfcs01.ps) s
5 318 M
(- ... " The notion of deterministically expanding a short seed into a long string that ... the) s
5 307 M
( question of whether strong pseudorandom generators actually exist is a huge ... hardness assu) s
5 296 M
(mption, that there is a secure pseudorandom generator in NC1 " ... [Kharitonov]) s
5 274 M
(135.3 This space filling algorithm is in NC \(using Tygar-Rief\) with an assumption that multipl) s
5 263 M
(icative inverse problem is almost always not in RNC. ) s
5 241 M
(135.4 Tygar-Rief algorithm outputs n^c bits in parallel \(through its PRAM processors\) for n=lo) s
5 230 M
(gN for some composite N and is internal to the algorithm. For the sake of disambiguation, the ) s
5 219 M
(number of bit positions in grid corresponding to the LP is set to Z.  ) s
5 197 M
(135.5 Above pseudorandom bits have to be translated into the coordinate positions in the grid ) s
5 186 M
(which is Z. In other words, pseudorandom bits are split into Z substrings \(n^c/logZ = Z\) becau) s
5 175 M
(se each coordinate in the grid of size 2^logZ/2 * 2^logZ/2 is notated by the tuple of size\(log) s
5 164 M
(Z/2, logZ/2\)) s
5 142 M
(135.6 Constant c can be suitably chosen as previously to be c = log\(Z*logZ\)/logn \(n need not b) s
5 131 M
(e equal to Z\)) s
5 109 M
(135.7 Either the n^c sized pseudorandom string can be split sequentially into \(logZ/2+logZ/2\) ) s
5 98 M
(sized substring coordinate tuples \(or\) an additional layer of pseudorandomness can be added to) s
5 87 M
( output the coordinate tuples by psuedorandomly choosing the start-end of substrings from n^c ) s
5 76 M
(size string, latter being a 2-phase pseudo-pseudo-random generator) s
5 54 M
(135.8 In both splits above, same coordinate tuple might get repeated - same bit position can b) s
5 43 M
(e set to 1 more than once. Circumventing this requires a Pseudorandom Permutation which is a b) s
5 32 M
(ijection where Z substrings do not repeat and map one-one and onto Z coordinates on grid. With) s
5 21 M
( this assumption of a PRP all Z coordinates are set to 1 \(or\) the P-Complete LP is maximized i) s
5 10 M
(n this special case, in NC.) s
_R
S
%%Page: (81) 81
%%BeginPageSetup
_S
18 36 translate
/pagenum 81 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (81) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(135.9 There are Z substrings created out of the 2^n^c pseudorandom strings generated by Tygar-) s
5 670 M
(Rief Parallel PRG. Hence non-repeating meaningful substrings can be obtained only from Z!/2^n^) s
5 659 M
(c fraction of all pseudorandom substrings.) s
5 637 M
(135.10 Maximizing the LP can be reduced to minimizing the collisions \(or\) repetitive coordinat) s
5 626 M
(e substrings above thus filling the grid to maximum possible. An NC algorithm to get non-repet) s
5 615 M
(itive sequence of coordinates is to add the index of the substring to the each split substring) s
5 604 M
( to get the hashed coordinates in the grid. For example in the 2*2 grid, if the parallel PRG o) s
5 593 M
(utputs 01011100 as the pseudorandom bit string, the substrings are 01, 01, 11 and 00 which has) s
5 582 M
( a collision. This is resolved by adding the index binary \(0,1,2,3\) to corresponding substring) s
5 571 M
( left-right or right-left. Thus 01+00, 01+01, 11+10, 00+11 - \(001,010,101,011\) - are the non-r) s
5 560 M
(epetitive hashed coordinates. The carryover can be avoided by choosing the PRG output string s) s
5 549 M
(ize. This is a trivial bijection permutation.) s
5 527 M
(135.11 The grid filling can be formulated as a Cellular Automaton of a different kind - by set) s
5 516 M
(ting or incrementing the 8 neighbour bit positions of a coordinate to 1 while setting or incre) s
5 505 M
(menting a coordinate to 1.) s
5 483 M
(135.12 Instead of requiring the non-repetitive coordinate substrings mentioned in \(10\) supra, ) s
5 472 M
(the grid filling can be a multi-step algorithm as below which uses the Cellular Automaton ment) s
5 461 M
(ioned in \(11\).) s
5 439 M
(------------------------------------) s
5 428 M
(135.13 Cellular Automaton Algorithm:) s
5 417 M
(------------------------------------) s
5 406 M
(\(Reference for reductions below: http://cstheory.com/stockmeyer@sbcglobal.net/csv.pdf [Chandra) s
5 395 M
(-Stockmeyer-Vishkin]\)) s
5 384 M
([http://sourceforge.net/p/asfer/code/HEAD/tree/asfer-docs/AstroInferDesign.txt and ) s
5 373 M
(https://github.com/shrinivaasanka/asfer-github-code/blob/master/asfer-docs/AstroInferDesign.tx) s
5 362 M
(t ]) s
5 340 M
(The circuits described in [ChandraStockmeyerVishkin] are constant depth circuits [AC0] and thu) s
5 329 M
(s in [NC1]  \(unbounded to bounded fanin logdepth reduction\)) s
5 307 M
(From wikipedia - Linear programs are problems that can be expressed in canonical form:) s
5 296 M
(c^T * X) s
5 285 M
(subject to AX <= b ) s
5 274 M
(and X >= 0 ) s
5 252 M
(maximize X) s
5 241 M
(subject to AX <= some maximum limit) s
5 230 M
(and X >= 0  ) s
5 208 M
(Below Cellular Automaton Monte Carlo NC algorithm for grid filling assumes that:) s
5 197 M
(C=[1,1,1,...1]) s
5 186 M
(A=[1,1,1....1] in the above and the vector of variables X is mapped to the grid - sequentially) s
5 175 M
( labelled in ascending from top-left to bottom-right, row-by-row and column-by-column. Though ) s
5 164 M
(this limits the number of variables to be a square, additional variables can be set to a const) s
5 153 M
(ant.) s
5 120 M
(Grid cells \(or variables in above grid\) are initialized to 0.) s
5 98 M
(loop_forever) s
5 87 M
({) s
5 76 M
(        \(135.13.1\) Parallel Pseudorandom Generator \(Tygar-Rief\) outputs bit string which are s) s
5 65 M
(plit into coordinates of grid and corresponding Grid cells are incremented instead of overwrit) s
5 54 M
(ing. This simulates parallel computation in many natural processes viz., rain. This is in NC. ) s
5 43 M
(This is related to Randomness Extractors - https://en.wikipedia.org/wiki/Randomness_extractor ) s
5 32 M
(- if rainfall from cloud can be used a natural weak entropy parallel randomness source \(or str) s
5 21 M
(ong?\) - predicting which steam particle of a cloud would become a droplet is heavily influence) s
5 10 M
(d by the huge number of natural variables - fluid mechanics comes into force and this happens ) s
_R
S
%%Page: (82) 82
%%BeginPageSetup
_S
18 36 translate
/pagenum 82 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (82) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(in parallel. Extractor is a stronger notion than Pseudorandom Generator. Extracting parallel r) s
5 681 M
(andom bits can also be done from a fluid mechanical natural processes like turbulent flows.) s
5 670 M
(        \(135.13.2\) Each grid cell has a constant depth Comparison Circuit that outputs 1 if th) s
5 659 M
(e grid cell value exceeds 1. This is in AC0\(constant-depth, polynomial size\).) s
5 648 M
(        \(135.13.3\) If above Comparison gate outputs 1, then another NC circuit can be construc) s
5 637 M
(ted that finds the minimum of grid neigbours of a cell \(maximum 8 neighbours for each cell in ) s
5 626 M
(2-dimensional grid\), decrements the central cell value and increments the minimum neighbour ce) s
5 615 M
(ll. This can be done by a sorting circuit defined in [ChandraStockMeyerVishkin]. This simulate) s
5 604 M
(s a percolation of a viscous fluid that flows from elevation to lowlying and makes even. Each ) s
5 593 M
(grid cell requires the above comparator and decrement NC circuit.) s
5 582 M
(}) s
5 560 M
(Above can be diagramatically represented as: \(for N=a*b cells in grid in parallel\)) s
5 549 M
(------------------------------------------------------------------------------) s
5 538 M
(        ) s
5 527 M
(                cell\(1,1\)       ..............     cell\(a,b\)) s
5 516 M
(                ----------------------------------------------  ) s
5 505 M
(                PRG in parallel         ....    PRG in parallel) s
5 494 M
(                      ||                                ||) s
5 483 M
(                Comparison              ....       Comparison) s
5 472 M
(                      ||                                ||      ) s
5 461 M
(        Minimum of 8 neighbours         ....      Minimum of 8 neighbours) s
5 450 M
(                      ||                                ||) s
5 439 M
(                Increment                           Increment  ) s
5 428 M
(                and                                 and) s
5 417 M
(                Decrement                           Decrement) s
5 395 M
(135.14 For example, a 3*3 grid is set by pseudorandom coordinate substrings obtained from Para) s
5 384 M
(llel PRG \(6,7,7,8,9,1,3,3,2\) as follows with collisions \(grid coordinates numbered from 1-9 fr) s
5 373 M
(om left-to-right and top-to-bottom\):) s
5 362 M
(                ) s
5 351 M
(                1  1  2) s
5 340 M
(                0  0  1) s
5 329 M
(                2  1  1) s
5 307 M
(Above can be likened to a scenario where a viscous fluid is unevenly spread at random from hea) s
5 296 M
(vens.) s
5 285 M
(By applying cellular automaton NC circuit algorithm above, grid becomes: \(minimizes collisions) s
5 274 M
(,maximizes variables and LP\)) s
5 252 M
(                1  1  1) s
5 241 M
(                1  1  1) s
5 230 M
(                1  1  1) s
5 208 M
(Above can be likened to a scenario where each 8-neighbour grid cell underneath computes the ev) s
5 197 M
(ened-out cellular automaton in parallel. Size of the NC circuit is polynomial in LP variables ) s
5 186 M
(n and is constant depth as the neighbours are constant \(ChandraStockmeyerVishkin\)) s
5 175 M
(Thus there are 2 NC + 1 AC circuits which together maximize the special case of P-Complete LP ) s
5 164 M
(instance without simplex where each grid coordinate is an LP variable. 135.13.1 \(randomly stre) s
5 153 M
(wn fluid\) is independent of 135.13.2 and 135.13.3 \(percolation of the fluid\). This is both a M) s
5 142 M
(onte-Carlo and Las Vegas algorithm. The Parallel coordinate generation with Tyger-Reif Paralle) s
5 131 M
(l PRG is Monte Carlo Simulation where as there is a guaranteed outcome with 100% possibility d) s
5 120 M
(ue to Comparison and Increment-Decrement circuits.) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(135.15 References on Cellular Automata, Parallel Computation of CA, Fluid Dynamics, Navier-Sto) s
5 76 M
(kes equation, Percolation Theory etc.,:) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(135.15.1 http://www.nt.ntnu.no/users/skoge/prost/proceedings/acc11/data/papers/1503.pdf) s
5 43 M
(135.15.2 http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.52.8377) s
5 32 M
(135.15.3 http://www.stephenwolfram.com/publications/academic/cellular-automaton-fluids-theory.) s
5 21 M
(pdf) s
5 10 M
(135.15.4 Constant Depth Circuits - http://www.cs.berkeley.edu/~vazirani/s99cs294/notes/lec5.ps) s
_R
S
%%Page: (83) 83
%%BeginPageSetup
_S
18 36 translate
/pagenum 83 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (83) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(135.15.5 Complexity Theory Companion - https://books.google.co.in/books?id=ysu-bt4UPPIC&pg=PA2) s
5 681 M
(81&lpg=PA281&dq=Chandra+Stockmeyer+Vishkin+AC0&source=bl&ots=fzmsGWrZXi&sig=jms3hmJoeiHsf5dq-v) s
5 670 M
(nMHUOU54c&hl=ta&sa=X&ei=jjcqVYrNFc25uATkvICoDA&ved=0CCAQ6AEwAQ#v=onepage&q=Chandra%20Stockmeye) s
5 659 M
(r%20Vishkin%20AC0&f=false) s
5 648 M
(135.15.6 Pseudorandom Permutation in Parallel - https://www.nada.kth.se/~johanh/onewaync0.ps) s
5 626 M
(--------------------------------------------------------------------------------------------) s
5 615 M
(135.16 A related algorithm - filling a square with infinitely many inscribed circles) s
5 604 M
(--------------------------------------------------------------------------------------------) s
5 593 M
(Let S be a square of unit area. This square is filled with infinitely many circles of varying ) s
5 582 M
(radii. This) s
5 571 M
(can be expressed in terms of geometric equations for circle - x\(i\)^2 +y\(i\)^2 = r\(i\)^2. Each \(x) s
5 560 M
(\(i\),y\(i\)\) is a coordinate on the circle of radius r\(i\). Since x\(i\) and y\(i\) are < 1, let x\(i\) ) s
5 549 M
(= 1/a\(i\) and y\(i\) = 1/b\(i\) for some integers a\(i\) and b\(i\). At infinity the square is filled w) s
5 538 M
(ith above infinite number of circles that cover the unit area \(has some analogies to set cover) s
5 527 M
( and VC-dimension-shattering\). This can be written as the infinite summation pi*\(1/a\(1\)^2 + 1/) s
5 516 M
(b\(1\)^2 + 1/a\(2\)^2 + 1/b\(2\)^2 + ....\) = 1 \(or sum of areas of all circles equals the unit area ) s
5 505 M
(of square\). Thus this equation is a quadratic program instead of a linear program. This is ext) s
5 494 M
(ensible to higher dimensions also \(filling a hypercube with infinite number of n-spheres\). For) s
5 483 M
( example, in 3 dimensions, set of spherical bubbles of varying radii covers the entire cube.) s
5 461 M
(135.17 Above grid can be alternatively formulated as a Voronoi Diagram where Parallel PRG rand) s
5 450 M
(omly sets multiple points on the plane and a tesselation of the plane covers these points. Ins) s
5 439 M
(tead of squares a Delaunay Triangulation is obtained from the dual of the Voronoi diagram.) s
5 417 M
(Reference:) s
5 406 M
(----------) s
5 395 M
(135.18. Circle Packing and Grid Filling - http://11011110.livejournal.com/332331.html - Fillin) s
5 384 M
(g a square with non-overlapping circles of maximum radii which is formulated as Dual of LP rel) s
5 373 M
(axation problem for matching where the constraints are that circles do not overlap i.e sum of ) s
5 362 M
(radii <= distance between centroids and objective function maximizes the radii variables.) s
5 351 M
(135.19. 135.16 is a slight variant of Kepler's Theorem [Proof - [Hales] - https://sites.google) s
5 340 M
(.com/site/thalespitt/] - filling a cube with small spheres has maximum density ~74%) s
5 329 M
(135.20 Maximizing Sum of Radii of Balls - [Eppstein] - http://www.ics.uci.edu/~eppstein/pubs/E) s
5 318 M
(pp-CCCG-16-slides.pdf) s
5 307 M
(135.21 Thue's Theorem For packing of discs on 2D - http://www.math.stonybrook.edu/~tony/whatsn) s
5 296 M
(ew/dec00/paper.html - Circle packing in 2-dimension has maximum density \(Pi/[2*sqrt\(3\)] ~ 90.6) s
5 285 M
(9%\) when circles are arranged in hexagonal lattice. The LP formulation in https://5d99cf42-a-6) s
5 274 M
(2cb3a1a-s-sites.googlegroups.com/site/kuja27/Analysis%20of%20a%20Randomized%20Space%20Filling%) s
5 263 M
(20Algorithm%20and%20its%20Linear%20Program%20Formulation.pdf and Cellular Automaton Algorithm ) s
5 252 M
(Version above for Optimum Space Filling of a 2D plane by Monte-Carlo Parallel Random process a) s
5 241 M
(re RNC algorithmic solutions to Thue'e theorem \(e.g natural process of Rain tiles earth in par) s
5 230 M
(allel by droplets of small radii and ultimately whole plane is covered, difference being allow) s
5 219 M
(ance of circle overlaps\) maximizing the variable points on plane having value 1.) s
5 208 M
(135.22 Circle Packing Theorem and Planarity - [Koebe-Andreev-Thurston] - Graph is planar if an) s
5 197 M
(d only if it is K5,K3,3 minor-free and is an intersection graph which has edges drawn between ) s
5 186 M
(centroids of every pair of tangential closely packed coins of varied radii as vertices \(https:) s
5 175 M
(//gitlab.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComputerScie) s
5 164 M
(nceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt\).Previous Linear Programmi) s
5 153 M
(ng and Cellular Automaton algorithms for space filling by circular solids and drops of fluids ) s
5 142 M
(are random circle packings of 2-D space which are not necessarily close. Random Close Packing ) s
5 131 M
(is described in 461.) s
5 109 M
(------------------------------------------------------------------------------) s
5 98 M
(\(FEATURE- DONE\) 136. Commits as on 28,29 January 2015) s
5 87 M
(------------------------------------------------------------------------------) s
5 76 M
(Python parser script to translate Longest Common Substring extracted from clustered or classif) s
5 65 M
(ied) s
5 54 M
(set of encoded strings has been added to repository.) s
5 32 M
(---------------------------------------------------------------------------------------------) s
5 21 M
(\(FEATURE - DONE\) 137. Mining the Astronomical Datasets using KMeans and kNN - sequence of algo) s
5 10 M
(rithms in AstroInfer) s
_R
S
%%Page: (84) 84
%%BeginPageSetup
_S
18 36 translate
/pagenum 84 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (84) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- Commits as on 4 February 2015) s
5 681 M
(---------------------------------------------------------------------------------------------) s
5 670 M
(1. MaitreyaToEnchoros.py - This scripts reads a text file with set of date,time and long/lat f) s
5 659 M
(or a specific class of events \(at present it has earthquakes of 8+ magnitude from 1900\). This ) s
5 648 M
(script creates two encoded files asfer.enchoros.zodiacal and asfer.enchoros.ascrelative using ) s
5 637 M
(Maitreya's Dreams opensource CLI.) s
5 626 M
(2. asfer.cpp is executed with doClustering=true by which kNN and KMeans clustered data are obt) s
5 615 M
(ained.) s
5 604 M
(3. asferkmeansclustering.cpp and asferkNNclustering.cpp implement the KMeans and kNN respectiv) s
5 593 M
(ely.) s
5 582 M
(4. Set of strings from any of the clusters has to be written manually in asfer.enchoros.cluste) s
5 571 M
(red  ) s
5 560 M
(5. asferlongestcommonsubstring.cpp - Within each cluster a pairwise longest common substring i) s
5 549 M
(s found out.) s
5 538 M
(6. TranslateClusterPairwiseLCS.py - Translates the longest common substring to textual rule de) s
5 527 M
(scription mined from above dataset. Mined rules are grep-ed in python-src/MinedRulesFromDatase) s
5 516 M
(ts.earthquakes. Thus the astronomy dataset cpp-src/earthquakesFrom1900with8plusmag.txt \(or cpp) s
5 505 M
(-src/magnitude8_1900_date.php.html\) ends up as the set of automatically mined rules.) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(-) s
5 461 M
(\(FEATURE - DONE\) 138. Commandline sequence for Mining Astronomical Datasets \(e.g Earthquakes a) s
5 450 M
(s above\) ) s
5 439 M
(using KMeans and kNN - Commits as on 4 February 2015) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(-) s
5 406 M
(138.1 In asfer.cpp, set doClustering=true and build asfer binary) s
5 395 M
(138.2 Set asfer.enchoros to asfer.enchoros.ascrelative or asfer.enchoros.zodiacal) s
5 384 M
(138.3 $./asfer 2>&1 > logfile1) s
5 373 M
(138.4 From logfile1 get maximum iteration clustered data for any cluster and update asfer.ench) s
5 362 M
(oros.clustered) s
5 351 M
(138.5 In asfer.cpp set doLCS=true and build asfer binary) s
5 340 M
(138.6 $./asfer 2>&1 > logfile2) s
5 329 M
(138.7 grep "Longest Common Substring for" logfile2 2>&1 > python-src/asfer.ClusterPairwiseLCS.) s
5 318 M
(txt) s
5 307 M
(138.8 sudo python TranslateClusterPairwiseLCS.py | grep "Textually" 2>&1 >> MinedRulesFromData) s
5 296 M
(sets.earthquakes) s
5 274 M
(----------------------------------------------------------------------------------------) s
5 263 M
(\(FEATURE - DONE\) 139. BigData Analytics subsystem \(related to point 64,65 on software analytic) s
5 252 M
(s\) ) s
5 241 M
(----------------------------------------------------------------------------------------) s
5 230 M
(139.1 \(DONE\) As mentioned in commit notes\(13February2015\) below, new multipurpose Java Hadoop ) s
5 219 M
(MapReduce ) s
5 208 M
(code has been added to a bigdata_analytics/ directory. At present it computes the frequencies ) s
5 197 M
(of astronomical entities in the MinedRulesFromDatasets textfile obtained from clustering+LCS. ) s
5 175 M
(139.2 VIRGO Linux Kernel has following design choices to interface with the machine learning c) s
5 164 M
(ode ) s
5 153 M
(in AsFer :) s
5 142 M
(        139.2.1 \(DONE\) the kernel module does an upcall to userspace asfer code - already this) s
5 131 M
( facility exists in VIRGO linux drivers) s
5 120 M
(        139.2.2 \(INITIAL VIRGO COMMITS - DONE\) the analytics subsystem creates a policy config) s
5 109 M
( file /etc/virgo_kernel_analytics.conf having key-value pairs for each config variable by mini) s
5 98 M
(ng the datasets with classification+clustering+any-hadoop-based-analytics. This is read by a V) s
5 87 M
(IRGO Linux kernel module - kernel_analytics - with VFS calls and sets\(and exports symbols\) the) s
5 76 M
( runtime config variables that indirectly determine the kernel behaviour. These exported analy) s
5 65 M
(tics variables can be read by other interested kernel modules in VIRGO Linux, USB-md and KingC) s
5 54 M
(obra \(and obviously mainline kernel itself\). An example Apache Spark python script which mines) s
5 43 M
( the most frequent IP address from Uncomplicated Fire Wall and some device driver info from lo) s
5 32 M
(gs in /var/log/kern.log and /var/log/udev which can be set as a config key-value in /etc/virgo) s
5 21 M
(_kernel_analytics.conf has been added to AsFer repository. Dynamic setting of kernel analytics) s
5 10 M
( key-value pairs has been implemented with Boost::Python C++ and CPython C Extensions which ob) s
_R
S
%%Page: (85) 85
%%BeginPageSetup
_S
18 36 translate
/pagenum 85 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (85) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(viates /etc/virgo_kernel_analytics.conf reload.) s
5 681 M
(        139.2.3 \(INITIAL ASFER COMMITS - DONE\) kernel module implements the machine learning a) s
5 670 M
(lgorithm in C \(C++ in kernel is not preferable - http://harmful.cat-v.org/software/c++/linus\) ) s
5 659 M
(which doesn't reuse existing code and hence less attractive. Despite this caveat, a PoC Boost:) s
5 648 M
(:Python C++ invocation of VIRGO memory system calls works - VIRGO linux has been made an exten) s
5 637 M
(sion Python C++ and C module which is invoked from Python userspace. Commits for this are desc) s
5 626 M
(ribed in 217. This is a tradeoff between pure C kernelspace and pure python/C/C++ userspace.) s
5 604 M
(Diagrams depicting the above options have been uploaded at: http://sourceforge.net/p/asfer/cod) s
5 593 M
(e/HEAD/tree/asfer-docs/AsFerVIRGOLinuxKernelInterfaceDesignChoices.jpg) s
5 560 M
(----------------------------------------------------------------------------------) s
5 549 M
(\(FEATURE - DONE\) Commits as on 4 February 2015) s
5 538 M
(----------------------------------------------------------------------------------) s
5 527 M
(C++ implementation of Knuth-Morris-Pratt String Match Algorithm added to repository.) s
5 505 M
(----------------------------------------------------------------------------------) s
5 494 M
(\(FEATURE - DONE\) Commits as on 9 February 2015) s
5 483 M
(----------------------------------------------------------------------------------) s
5 472 M
(Python+R script for DFT analysis of multimedia data has been added to repository.) s
5 450 M
(----------------------------------------------------------------------------------) s
5 439 M
(\(FEATURE - DONE\) Commits as on 13 February 2015) s
5 428 M
(----------------------------------------------------------------------------------) s
5 417 M
(Initial commits for BigData Analytics \(for mined astro datasets\) using Hadoop 2.6.0 MapReduce:) s
5 395 M
(- new folder bigdata_analytics has been added) s
5 384 M
(- hadoop_mapreduce is subfolder of above) s
5 373 M
(- A Hadoop Java MapReduce implementation to compute frequencies of astronomical entities in Mi) s
5 362 M
(nedRulesFromDatasets.earthquakes \(obtained from clustering+LCS earlier in python-src\) has been) s
5 351 M
( added with compiled bytecode and jar\(MinedRulesFromDatasets_MapReducer.java\)) s
5 340 M
(- This jar was executed on a Single Node Hadoop Cluster as per the documentation at:) s
5 329 M
(        - http://hadoop.apache.org/docs/stable/hadoop-mapreduce-client/hadoop-mapreduce-client) s
5 318 M
(-core/MapReduceTutorial.html) s
5 307 M
(        - http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster) s
5 296 M
(.html) s
5 285 M
(- The HDFS filesystem data is in hdfs_data - /user/root output with frequencies are in userroo) s
5 274 M
(t_output and namenode and datanode logs are in hadooproot_logs\(part_r_0000 has the frequencies) s
5 263 M
(\)) s
5 252 M
(- hdfs_data also has commandlines history and the console output logs for above.) s
5 230 M
(--------------------------------------------------------------------) s
5 219 M
(\(FEATURE - DONE\) Commits as on 17 February 2015) s
5 208 M
(--------------------------------------------------------------------) s
5 197 M
(Python implementations for LogLog and HyperLogLog cardinality estimation for streamed multiset) s
5 186 M
( data have been added to repository.) s
5 164 M
(--------------------------------------------------------------------) s
5 153 M
(\(FEATURE - DONE\) Commits as on 18 February 2015) s
5 142 M
(--------------------------------------------------------------------) s
5 131 M
(Python implementations for CountMinSketch\(frequencies and heavy-hitters\) and BloomFilter\(membe) s
5 120 M
(rship\) for Streaming Data have been added to repository.) s
5 98 M
(--------------------------------------------------------------------) s
5 87 M
(\(FEATURE - DONE\) Commits as on 19,20 February 2015) s
5 76 M
(--------------------------------------------------------------------) s
5 65 M
(Python clients for Apache Hive and HBase have been added to repository and invoked from) s
5 54 M
(Stream Abstract Generator script as 2-phase streamer for Streaming_<algorithm> scripts.) s
5 43 M
(Hive,Pig,HBase HDFS and script data added to repository in java-src/bigdata_analytics.) s
5 21 M
(---------------------------------------------------------------------------------) s
5 10 M
(\(FEATURE - DONE\) 140. Schematic for Apache Cassandra/Hive/HBase <=> AsFer Streaming_<algorithm) s
_R
S
%%Page: (86) 86
%%BeginPageSetup
_S
18 36 translate
/pagenum 86 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (86) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(> scripts interface ) s
5 681 M
(---------------------------------------------------------------------------------) s
5 659 M
(\($\) BigData Source\(e.g MovieLens\) => Populated in Apache Cassandra, Apache HiveQL CLI\(CREATE T) s
5 648 M
(ABLE..., LOAD DATA LOCAL INPATH...\),HBase shell/python client\(create 'stream_data','cf'...\) \(o) s
5 637 M
(r\) Apache PigLatin) s
5 615 M
(\($\) Apache Hive or HBase SQL/NoSQL or Cassandra table => Read by Apache Hive or HBase or Cassa) s
5 604 M
(ndra python client => StreamAbstractGenerator => Iterable,Generator => Streaming_<algorithm> s) s
5 593 M
(cripts) s
5 571 M
(--------------------------------------------------------------------) s
5 560 M
(\(FEATURE - DONE\) Commits as on 25 February 2015) s
5 549 M
(--------------------------------------------------------------------) s
5 538 M
(Added the Hive Storage client code for Streaming Abstract Generator __iter__ overridden functi) s
5 527 M
(on. With this Streaming_<algorithm> scripts can instantiate this class which mimicks the strea) s
5 516 M
(ming through iterable with three storages - HBase, File and Hive.) s
5 494 M
(--------------------------------------------------------------------) s
5 483 M
(\(DONE\) 141. Classpaths required for Pig-to-Hive interface - for pig grunt shell in -x local mo) s
5 472 M
(de) s
5 461 M
(--------------------------------------------------------------------) s
5 450 M
(1. SLF4J jars) s
5 439 M
(2. DataNucleus JDO, core and RDBMS jars \(has to be version compatible\) ) s
5 428 M
(in pig/lib and hive/lib directories:) s
5 417 M
(datanucleus-api-jdo-3.2.6.jar) s
5 406 M
(datanucleus-core-3.2.10.jar) s
5 395 M
(datanucleus-rdbms-3.2.9.jar) s
5 384 M
(3. Derby client and server jars) s
5 373 M
(4. Hive Shims jars) s
5 362 M
(hive-shims-0.11.0.jar) s
5 351 M
(5. All Hadoop core jars in /usr/local/hadoop/share/hadoop:) s
5 340 M
(common hdfs httpfs kms mapreduce tools yarn) s
5 329 M
(6. HADOOP_CONF_DIR\($HADOOP_HOME/etc/hadoop\) is also required in classpath.) s
5 307 M
(--------------------------------------------------------------------) s
5 296 M
(\(DONE\) 142. Classpaths required for Pig-to-HBase interface) s
5 285 M
(--------------------------------------------------------------------) s
5 274 M
(In addition to the jars above, following cloudera trace jars are required:) s
5 263 M
(htrace-core-2.01.jar and htrace-1.45.jar) s
5 241 M
(hadoop2_core_classpath.sh shell script in bigdata_analytics exports all the jars in \(141\) and ) s
5 230 M
(\(142\).) s
5 208 M
(--------------------------------------------------------------------) s
5 197 M
(\(FEATURE - DONE\) Commits as on 26 February 2015) s
5 186 M
(--------------------------------------------------------------------) s
5 175 M
(Pig-HBase stream_data table creation and population related Pig scripts, HDFS data and screens) s
5 164 M
(hots have been added to repository.) s
5 142 M
(--------------------------------------------------------------------) s
5 131 M
(\(FEATURE - DONE\) Commits as on 27 February 2015) s
5 120 M
(--------------------------------------------------------------------) s
5 109 M
(Cassandra Python Client has been added to repository and Streaming_AbstractGenerator.py has be) s
5 98 M
(en) s
5 87 M
(updated to invoke Cassandra in addition to Hive,HBase and File storage. Cassandra data have be) s
5 76 M
(en added) s
5 65 M
(in bigdata_analytics/) s
5 43 M
(--------------------------------------------------------------------) s
5 32 M
(143. \(FEATURE - DONE\) Storage Abstraction in AsFer - Architecture Diagram) s
5 21 M
(--------------------------------------------------------------------) s
5 10 M
(Architecture diagram for Hive/Cassandra/HBase/File NoSQL and other storage abstraction impleme) s
_R
S
%%Page: (87) 87
%%BeginPageSetup
_S
18 36 translate
/pagenum 87 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (87) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(nted in python has been uploaded at: http://sourceforge.net/p/asfer/code/HEAD/tree/asfer-docs/) s
5 681 M
(BigDataStorageAbstractionInAsFer.jpg) s
5 659 M
(--------------------------------------------------------------------) s
5 648 M
(144. \(FEATURE - DONE\) Apache Spark and VIRGO Linux Kernel Analytics and Commits as on 6 March ) s
5 637 M
(2015) s
5 626 M
(--------------------------------------------------------------------) s
5 615 M
(1. Prerequisite: Spark built with Hadoop 2.6.0 with maven commandline:) s
5 604 M
(mvn -Pyarn -Phadoop-2.4 -Dhadoop.version=2.6.0 -DskipTests package) s
5 582 M
(2. Spark Python RDD MapReduce Transformation script for parsing the most frequent source IP ad) s
5 571 M
(dress) s
5 560 M
(from Uncomplicated FireWall logs in /var/log/kern.log has been added to repository. This parse) s
5 549 M
(d) s
5 538 M
(IP address can be set as a config in VIRGO kernel_analytics module \(/etc/virgo_kernel_analytic) s
5 527 M
(s.conf\)) s
5 505 M
(--------------------------------------------------------------------) s
5 494 M
(\(FEATURE - DONE\) Commits as on 10 March 2015) s
5 483 M
(--------------------------------------------------------------------) s
5 472 M
(Spark python script updated for parsing /var/log/udev and logs in python-src/testlogs.) s
5 461 M
(\(spark-submit Commandline: bin/spark-submit /media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef7) s
5 450 M
(8d8c8ea22/home/kashrinivaasan/KrishnaiResearch_OpenSource/asfer-code/python-src/SparkKernelLog) s
5 439 M
(MapReduceParser.py  2> /media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea22/home/kashri) s
5 428 M
(nivaasan/KrishnaiResearch_OpenSource/asfer-code/python-src/testlogs/Spark_Logs.kernlogUFWandHU) s
5 417 M
(AWEIparser.10March2015\)) s
5 395 M
(--------------------------------------------------------------------) s
5 384 M
(145. \(FEATURE - DONE\) Commits as on 26 March 2015) s
5 373 M
(--------------------------------------------------------------------) s
5 362 M
(New python script to fetch stock quotes by ticker symbol that can be used for Streaming_<algor) s
5 351 M
(ithm> scripts has been added.) s
5 329 M
(--------------------------------------------------------------------) s
5 318 M
(146. \(FEATURE - DONE\) Commits as on 2 April 2015) s
5 307 M
(--------------------------------------------------------------------) s
5 296 M
(New Python script to get Twitter tweets stream data for a search query has been added.) s
5 274 M
(--------------------------------------------------------------------) s
5 263 M
(147. \(FEATURE - DONE\) Related to Item 3 - Sequence Mining Implementation - Commits as on 3 Apr) s
5 252 M
(il 2015) s
5 241 M
(--------------------------------------------------------------------) s
5 230 M
(Python class that implements Apriori GSP algorithm for mining frequent subsequences in ordered) s
5 219 M
( sequences) s
5 208 M
(dataset has been added to repository. Though exponential, together with Longest Common Subsequ) s
5 197 M
(ence, Apriori GSP gives a near accurate subsequences - befitting trend of the dataset. For exa) s
5 186 M
(mple the logs added to repository print the candidate support after 5 iterations \(which can be) s
5 175 M
( modified\) for asfer.enchoros dataset thereby eliciting a pattern in astronomical objects.) s
5 153 M
(148. An example Class Association Rule Learnt from Sequence Mining:) s
5 142 M
(--------------------------------------------------------------) s
5 131 M
(For length 6 most frequent subsequences in earthquake astronomical data from 1900 are: \('conjo) s
5 120 M
(inedplanets',frequency\)) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(-----------------------) s
5 87 M
([\('0', 313\), \('4', 313\), \('8', 313\), \('3', 313\), \('7', 313\), \('2', 313\), \('6', 313\), \('1', 313) s
5 76 M
(\), \('5', 313\), \('9', 313\), \('a', 313\), \('14', 121\), \('46', 66\), \('56', 51\), \('13', 51\), \('34',) s
5 65 M
( 42\), \('45', 36\), \('9a', 33\), \('79', 31\), \('24', 30\), \('16', 30\), \('69', 29\), \('7a', 29\), \('14) s
5 54 M
(6', 29\), \('36', 26\), \('12', 25\), \('57', 24\), \('68', 23\), \('6a', 22\), \('49', 22\), \('47', 22\), \() s
5 43 M
('28', 21\), \('58', 21\), \('8a', 21\), \('78', 21\), \('134', 20\), \('25', 20\), \('35', 20\), \('23', 18\)) s
5 32 M
(, \('29', 18\), \('48', 18\), \('27', 17\), \('3a', 17\), \('4a', 17\), \('59', 16\), \('37', 16\), \('67', 1) s
5 21 M
(5\), \('5a', 14\), \('17', 14\), \('38', 13\), \('346', 12\), \('26', 11\), \('124', 11\), \('39', 11\), \('15) s
5 10 M
(', 11\), \('145', 11\), \('14a', 10\), \('456', 9\), \('348', 8\), \('2a', 8\), \('247', 7\), \('345', 7\), \() s
_R
S
%%Page: (88) 88
%%BeginPageSetup
_S
18 36 translate
/pagenum 88 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (88) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
('1a', 7\), \('469', 7\), \('147', 7\), \('356', 7\), \('378', 6\), \('156', 6\), \('69a', 5\), \('249', 5\), ) s
5 681 M
(\('179', 5\), \('167', 5\), \('358', 5\), \('37a', 4\), \('347', 4\), \('279', 4\), \('46a', 4\), \('79a', 4\)) s
5 670 M
(, \('568', 4\), \('169', 4\), \('57a', 4\), \('18', 4\), \('1456', 4\), \('679', 4\), \('149', 4\), \('359', ) s
5 659 M
(4\), \('137', 3\), \('135', 3\), \('1469', 3\), \('13a', 3\), \('368', 3\), \('1345', 3\), \('123', 3\), \('12) s
5 648 M
(5', 3\), \('268', 3\), \('1346', 3\), \('24a', 3\), \('1347', 3\), \('56a', 3\), \('1256', 3\), \('1348', 3\)) s
5 637 M
(, \('59a', 3\), \('457', 3\), \('256', 3\), \('1468', 3\), \('468', 3\), \('467', 3\), \('1356', 3\), \('168') s
5 626 M
(, 3\), \('1378', 3\), \('19', 3\), \('234', 3\), \('68a', 3\), \('1247', 3\), \('148', 3\), \('136', 2\), \('6) s
5 615 M
(7a', 2\), \('29a', 2\), \('349', 2\), \('167a', 2\), \('38a', 2\), \('123a', 2\), \('78a', 2\), \('245', 2\),) s
5 604 M
( \('247a', 2\), \('248', 2\), \('4568', 2\), \('1248', 2\), \('258', 2\), \('1247a', 2\), \('359a', 2\), \('1) s
5 593 M
(58', 2\), \('36a', 2\), \('47a', 2\), \('23a', 2\), \('12a', 1\), \('26a', 1\), \('1349', 1\), \('2349', 1\),) s
5 582 M
( \('139', 1\), \('1467', 1\), \('349a', 1\), \('678', 1\), \('49a', 1\), \('126', 1\), \('127', 1\), \('34a',) s
5 571 M
( 1\), \('379', 1\), \('3568', 1\), \('23469', 1\), \('2349a', 1\), \('179a', 1\), \('124a', 1\), \('3479', 1) s
5 560 M
(\), \('369', 1\), \('27a', 1\), \('39a', 1\), \('458', 1\), \('459', 1\), \('578', 1\), \('16a', 1\), \('259',) s
5 549 M
( 1\), \('257', 1\), \('1678', 1\), \('368a', 1\), \('17a', 1\), \('134a', 1\), \('1458', 1\), \('159', 1\), \() s
5 538 M
('3469', 1\), \('2345', 1\), \('2346', 1\), \('13479', 1\), \('479', 1\), \('169a', 1\), \('469a', 1\)]) s
5 516 M
(-------------------) s
5 505 M
(indices for planets:) s
5 494 M
(-------------------) s
5 483 M
( * 0 - for unoccupied) s
5 472 M
( * 1 - Sun) s
5 461 M
( * 2 - Moon) s
5 450 M
( * 3 - Mars) s
5 439 M
( * 4 - Mercury) s
5 428 M
( * 5 - Jupiter) s
5 417 M
( * 6 - Venus) s
5 406 M
( * 7 - Saturn) s
5 395 M
( * 8 - Rahu) s
5 384 M
( * 9 - Ketu) s
5 362 M
(Some inferences can be made from above:) s
5 351 M
(-------------------------------------- ) s
5 340 M
(By choosing the creamy layer of items with support > 30 \(out of 313 historic events\) - ~10%:) s
5 329 M
([\('14', 121\), \('46', 66\), \('56', 51\), \('13', 51\), \('34', 42\), \('45', 36\), \('9a', 33\), \('79', 3) s
5 318 M
(1\), \('24', 30\), \('16', 30\)]) s
5 296 M
(Above implies that:) s
5 285 M
(-------------------) s
5 274 M
(Earthquakes occur most likely when, following happen - in descending order of frequencies:) s
5 263 M
(- Sun+Mercury \(very common\)) s
5 252 M
(- Mercury+Venus ) s
5 241 M
(- Jupiter+Venus) s
5 230 M
(- Sun+Mars) s
5 219 M
(- Mars+Mercury) s
5 208 M
(- Mercury+Jupiter) s
5 197 M
(- Ketu is in Ascendant) s
5 186 M
(- Saturn+Ketu) s
5 175 M
(- Moon+Mercury) s
5 164 M
(- Sun+Venus) s
5 142 M
(Machine Learnt pattern above strikingly coincides with some combinations in Brihat Samhita \(Ro) s
5 131 M
(le of Mars, Nodes, and 2 heavy planets, Mercury-Venus duo's role in weather vagaries\) and also) s
5 120 M
( shows some new astronomical patterns \(Sun+Mars and Jupiter+Venus as major contributors\). Abov) s
5 109 M
(e technique is purely astronomical and scientific with no assumptions on astrology.) s
5 87 M
(Some recent major intensity earthquakes having above sequence mined astronomical conjunctions ) s
5 76 M
(:) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(-) s
5 43 M
(Sendai Earthquake - 11 March 2011 14:46 - Sun+Mars in Aquarius, Mercury+Jupiter in Pisces) s
5 32 M
(Nepal Earthquake - 25 April 2015 11:56 - Sun+Mars+Mercury in Aries ) s
5 21 M
(Chile Earthquake - 16 September 2015 22:55 -  Sun+Mars+Jupiter in Leo ) s
5 10 M
(All three have Sun+Mars coincidentally.) s
_R
S
%%Page: (89) 89
%%BeginPageSetup
_S
18 36 translate
/pagenum 89 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (89) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( ) s
5 670 M
(---------------------------------------------------------------) s
5 659 M
(\(FEATURE - DONE\) Commits as on 5 April 2015 ) s
5 648 M
(---------------------------------------------------------------) s
5 637 M
(Textual translation of Class Association Rules added to SequenceMining.py with logs.) s
5 615 M
(---------------------------------------------------------------) s
5 604 M
(\(FEATURE - DONE\) Commits as on 13 April 2015) s
5 593 M
(---------------------------------------------------------------) s
5 582 M
(Python implementation of :) s
5 571 M
(   - Part-of-Speech tagging using Maximum Entropy Equation of Conditional Random Fields\(CRF\) a) s
5 560 M
(nd ) s
5 549 M
(   - Viterbi path computation in HMM-CRF for Named Entity Recognition has been added to reposi) s
5 538 M
(tory.) s
5 516 M
(--------------------------------------------------------------) s
5 505 M
(\(FEATURE - DONE\) Commits as on 15 April 2015) s
5 494 M
(--------------------------------------------------------------) s
5 483 M
(Named Entity Recognition Python script updated with:) s
5 472 M
(  - More PoS tags) s
5 461 M
(  - Expanded HMM Viterbi probabilities matrix) s
5 450 M
(  - Feature function with conditional probabilities on previously labelled word) s
5 428 M
(--------------------------------------------------------------) s
5 417 M
(\(FEATURE - DONE\) Commits as on 17 April 2015) s
5 406 M
(--------------------------------------------------------------) s
5 395 M
(Twitter Streaming python script updated with GetStreamFilter\(\) generator object for streaming ) s
5 384 M
(tweets data.) s
5 362 M
(-------------------------------------------------------------) s
5 351 M
(\(FEATURE - DONE\) 149. Commits as on 10 May 2015) s
5 340 M
(-------------------------------------------------------------) s
5 329 M
(A Graph Search NetworkX+MatPlotLib Visualizer for WordNet has been implemented in python and h) s
5 318 M
(as been added to repository. This is an initial code and more algorithms to mine relationships) s
5 307 M
( within a text data would be added using WordNet as ontology - with some similarities to WordN) s
5 296 M
(et definition subgraph obtained in http://sourceforge.net/p/asfer/code/HEAD/tree/python-src/In) s
5 285 M
(terviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit.py. But in this script visualization is) s
5 274 M
( more important.) s
5 252 M
(-------------------------------------------------------------) s
5 241 M
(\(FEATURE - DONE\) Commits as on 12 May 2015) s
5 230 M
(-------------------------------------------------------------) s
5 219 M
(WordNet Visualizer script has been updated to take and render the WordNet subgraph computed by) s
5 208 M
( Recursive Gloss Overlap algorithm in:) s
5 197 M
(- http://arxiv.org/abs/1006.4458) s
5 186 M
(- http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf) s
5 175 M
(- https://sites.google.com/site/kuja27/PresentationTAC2010.pdf?attredirects=0) s
5 153 M
(------------------------------------------------------------) s
5 142 M
(\(FEATURE - DONE\) 150. Commits as on 14 May 2015) s
5 131 M
(------------------------------------------------------------) s
5 120 M
(Updated WordNet Visualizer with:) s
5 109 M
(- bidirectional edges) s
5 98 M
(- graph datastructure changed to dictionary mapping a node to a list of nodes \(multigraph\)) s
5 87 M
(- With these the connectivity has increased manifold as shown by gloss overlap) s
5 76 M
(- the graph nodes are simply words or first element of lemma names of the synset) s
5 65 M
(- more networkx drawing layout options have been added) s
5 43 M
(Added code for:) s
5 32 M
(- removing self-loops in the WordNet subgraph) s
5 21 M
(- for computing core number of each node \(maximum k such that node is part of k-core decomposi) s
5 10 M
(tion\)) s
_R
S
%%Page: (90) 90
%%BeginPageSetup
_S
18 36 translate
/pagenum 90 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (90) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(In the input example, nodes "India" and "China" have core numbers 15 and 13 respectively which) s
5 670 M
( readily classify the document to belong to) s
5 659 M
(class "India and China". Thus a new unsupervised classifier is obtained based on node degrees.) s
5 637 M
(------------------------------------------------------------) s
5 626 M
(\(FEATURE - DONE\) Commits as on 16 May 2015) s
5 615 M
(------------------------------------------------------------) s
5 604 M
(- added sorting the core numbers descending and printing the top 10% core numbers which are pr) s
5 593 M
(ospective classes the document could belong to.) s
5 582 M
(This is a new unsupervised text classification algorithm and is based on recursive gloss overl) s
5 571 M
(ap algorithm in http://arxiv.org/abs/1006.4458 and) s
5 560 M
(http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf. A major ) s
5 549 M
(feature of this algorithm is that it is more precise in finding the class of a document as int) s
5 538 M
(rinsic merit is computed by mapping a text to subgraph of wordnet, than conventional text clas) s
5 527 M
(sification and clustering based on distance metrics and training data.) s
5 505 M
(------------------------------------------------------------) s
5 494 M
(\(FEATURE - DONE\) 151. Commits as on 18 May 2015) s
5 483 M
(------------------------------------------------------------) s
5 472 M
(An interesting research was done on the wordnet subgraph obtained by Recursive Gloss Overlap a) s
5 461 M
(lgorithm:) s
5 450 M
(- PageRank computation for the WordNet subgraph was added from NetworkX library. This is proba) s
5 439 M
(bly one of the first applications of PageRank to) s
5 428 M
(a graph other than web link graph.) s
5 417 M
(- The objective was to find the most popular word in the subgraph obtained by the Random Walk ) s
5 406 M
(Markov Model till it stabilized \(PageRank\)) s
5 395 M
(- The resultant word with maximum pagerank remarkably coincides with the most probable class o) s
5 384 M
(f the document and is almost similar in) s
5 373 M
(ranking to core numbers of nodes ranked descending.) s
5 362 M
(- Some random blog text was used.) s
5 351 M
(- Above was mentioned as a theoretical statement in 5.12 of http://www.nist.gov/tac/publicatio) s
5 340 M
(ns/2010/participant.papers/CMI_IIT.proceedings.pdf) s
5 318 M
(--------------------------------------------------------------) s
5 307 M
(\(FEATURE - DONE\) Commits as on 19 May 2015) s
5 296 M
(--------------------------------------------------------------) s
5 285 M
(A primitive text generation from the definition graph has been implemented by:) s
5 274 M
(- computing the k-core of the graph above certain degree k so that the core is dense) s
5 263 M
(- each edge is mapped to a relation - at present "has" , "is in" are the only 2 relations \(mor) s
5 252 M
(e could be added based on) s
5 241 M
(hypernyms\)) s
5 230 M
(- Each edge is output as "X <relation> Y") s
5 219 M
(- Above gives a nucleus text extracted from the original document) s
5 208 M
(- It implements the theory mentioned in: https://sites.google.com/site/kuja27/DocumentSummariz) s
5 197 M
(ation_using_SpectralGraphTheory_RGOGraph_2014.pdf?attredirects=0&d=1) s
5 175 M
(-------------------------------------------------------------) s
5 164 M
(\(FEATURE - DONE\) Commits as on 20 May 2015) s
5 153 M
(-------------------------------------------------------------) s
5 142 M
(Hypernyms/Hyponyms based sentence construction added to WordNet Visualizer. The core-number an) s
5 131 M
(d pagerank based classifier was tested with more inputs. The accuracy and relevance of the wor) s
5 120 M
(d node with topmost core number and pagerank for RGO graph looks to be better than the traditi) s
5 109 M
(onal supervised and unsupervised classifiers/clusterers. The name of the class is inferred aut) s
5 98 M
(omatically without any training inputs or distance metrics based only on density of k-core sub) s
5 87 M
(graphs.) s
5 65 M
(-------------------------------------------------------------) s
5 54 M
(\(FEATURE - DONE\) Commits as on 21 May 2015) s
5 43 M
(-------------------------------------------------------------) s
5 32 M
(Updated the Visualizer to print the WordNet closure of hypernyms and hyponyms to generate a bl) s
5 21 M
(own-up huge sentence. The closure\(\) operator) s
5 10 M
(uncovers new vertices and edges in the definition graph \(strict supergraph of RGO graph\) and i) s
_R
S
%%Page: (91) 91
%%BeginPageSetup
_S
18 36 translate
/pagenum 91 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (91) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(t is a mathematically generated sentence) s
5 681 M
(\(similar to first order logic and functional programming compositionality\) and mimicks an idea) s
5 670 M
(l human-thinking process \(psychological process of evocation which is complete closure in huma) s
5 659 M
(n brain on a word utterance\).) s
5 637 M
(-------------------------------------------------------------) s
5 626 M
(\(FEATURE - DONE\) 151. Commits as on 22,23,24 May 2015) s
5 615 M
(-------------------------------------------------------------) s
5 604 M
(Added code for computing recursive composition of lambda functions over the RGO graph relation) s
5 593 M
(s\(edges\):) s
5 582 M
(- For this the Depth First Search Tree of the graph is computed with NetworkX) s
5 571 M
(- The lambda function is created for each edge) s
5 560 M
(- Composition is done by concatenating a recursive parenthesisation string of lambda expressio) s
5 549 M
(ns:) s
5 538 M
(        for each DFS edge:) s
5 527 M
(                Composed_at_tplus1 = Composed_at_t\(lambda <edge>\) ) s
5 516 M
(- DFS is chosen as it mimicks a function invocation stack) s
5 505 M
(- Lambda composition closure on the Recursive Gloss Overlap graph has been rewritten to create) s
5 494 M
( a huge lambda composition string with parentheses. Also two new lambda function relations hav) s
5 483 M
(e been introduced - "subinstance of" and "superinstance of". These are at present most likely ) s
5 472 M
(do) s
5 461 M
(not exist in WordNet parlance, because the Recursive Gloss OVerlap algorithm grows a graph rec) s
5 450 M
(ursively from WordNet Synset definition tokenization.) s
5 439 M
(- Thus a tree is built which is made into a graph by pruning duplicate edges and word vertices) s
5 428 M
(. WordNet graph does not have a depth. RGO algorithm adds one more dimension to WordNet by def) s
5 417 M
(ining above relations. These are different from hyper/hypo-nymns. During recursive gloss overl) s
5 406 M
(ap, if Y is in Synset definition of X, Y is " subinstance of" X and X is "superinstance of" Y.) s
5 395 M
(- Thus RGO in a way adds new hierarchical recursive relationships to WordNet based on Synset d) s
5 384 M
(efinition.) s
5 373 M
(- The lambda composition obtained above is a mathematical or lambda calculus representation of) s
5 362 M
( a text document - Natural Language reduced to Lambda calculus compositionality operator.) s
5 340 M
(--------------------------------------------------------------) s
5 329 M
(\(FEATURE - DONE\) Commits as on 26 May 2015) s
5 318 M
(--------------------------------------------------------------) s
5 307 M
(Added initial code for Social Network Analyzer for Twitter following to create a NetworkX grap) s
5 296 M
(h and render it with MatPlotLib.) s
5 274 M
(---------------------------------------------------------------) s
5 263 M
(\(FEATURE - DONE\) Commits as on 3 June 2015) s
5 252 M
(---------------------------------------------------------------) s
5 241 M
(Bonacich Power Centrality computation added to Twitter Social Network Analyzer using PageRank ) s
5 230 M
(computation.) s
5 208 M
(---------------------------------------------------------------) s
5 197 M
(\(FEATURE - DONE\) Commits as on 4 June 2015) s
5 186 M
(---------------------------------------------------------------) s
5 175 M
(- Eigen Vector Centrality added to Twitter Social Network Analyzer.) s
5 164 M
(- File storage read replaced with Streaming_AbstractGenerator in Streaming_HyperLogLogCounter.) s
5 153 M
(py and Streaming_LogLogCounter.py) s
5 131 M
(--------------------------------------------------------------) s
5 120 M
(\(FEATURE - DONE\) 152. Commits as on 7 June 2015) s
5 109 M
(--------------------------------------------------------------) s
5 98 M
(New Sentiment Analyzer script has been added to repository:) s
5 87 M
(- This script adds to WordNet Visualizer with Sentiment analysis using SentiWordNet from NLTK ) s
5 76 M
(corpus) s
5 65 M
(- added a Simple Sentiment Analysis function that tokenizes the text and sums up positivity an) s
5 54 M
(d negativity score) s
5 43 M
(- A non-trivial Sentiment Analysis based on Recursive Gloss Overlap graph - selects top vertic) s
5 32 M
(es with high core numbers) s
5 21 M
(and elicits the positivity and negativity of those vertex words.) s
5 10 M
(- Above is intuitive as cores of the graph are nuclei centering the document and the sentiment) s
_R
S
%%Page: (92) 92
%%BeginPageSetup
_S
18 36 translate
/pagenum 92 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (92) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(s of the vertices of those cores) s
5 681 M
(are important which decide the sentiment of the whole document.) s
5 670 M
(- Analogy: Document is akin to an atom and the Recursive Gloss Overlap does a nuclear fission ) s
5 659 M
(to extricate the inner strucure of a document) s
5 648 M
(\(subatomic particles are the vertices and forces are edges\)) s
5 637 M
(- Instead of core numbers, page_rank can also be applied \(It is intriguing to see that classes) s
5 626 M
( obtained from core_numbers ) s
5 615 M
(and page_rank coincide to large extent\) and it is not unusual to classify a document in more t) s
5 604 M
(han one class \(as it is more realistic\).) s
5 582 M
(Above script can be used for any text including social media and can be invoked as a utility f) s
5 571 M
(rom SocialNetworkAnalysis_<brand> scripts.) s
5 560 M
(Microblogging tweets are more crisp and "emotionally precise" i.e. extempore - convey instanta) s
5 549 M
(neous sentiment \(without much of a preparation\) ) s
5 527 M
(------------------------------------------------------------------) s
5 516 M
(\(FEATURE - DONE\) Commits as on 8 June 2015) s
5 505 M
(------------------------------------------------------------------) s
5 494 M
(Commits for:) s
5 483 M
( - fixing errors due to NLTK API changes in lemma_names\(\), definition\(\) ... [ variables made i) s
5 472 M
(nto function calls ]) s
5 461 M
( - Unicode errors) s
5 450 M
( - Above were probably either due to Ubuntu upgrade to 15.04 which might have added some unico) s
5 439 M
(de dependencies and/or recent changes to NLTK 3.0) s
5 428 M
(   \(SentimentAnalyzer.py already has been updated to reflect above\)) s
5 406 M
(------------------------------------------------------------------) s
5 395 M
(\(FEATURE - DONE\) Commits as on 10 June 2015) s
5 384 M
(------------------------------------------------------------------) s
5 373 M
(Sentiment Analysis for twitter followers' tweets texts added to SocialNetworkAnalysis_Twitter.) s
5 362 M
(py which invokes SentimentAnalyzer.py) s
5 340 M
(------------------------------------------------------------------) s
5 329 M
(\(FEATURE - DONE\) Commits as on 13 June 2015) s
5 318 M
(------------------------------------------------------------------) s
5 307 M
(Sentiment Analysis for tweet stream texts added to SocialNetworksAnalysis_Twitter.py which inv) s
5 296 M
(okes SentimentAnalyzer.py) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(------------------) s
5 252 M
(153. \(FEATURE - THEORY - Minimum Implementation DONE\) Sentiment Analysis as lambda function co) s
5 241 M
(mposition of the Recursive Gloss Overlap WordNet subgraph) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(------------------) s
5 208 M
(SentiWordNet based scoring of the tweets and texts have some false positives and negatives. Bu) s
5 197 M
(t the lambda composition of the) s
5 186 M
(Recursive Gloss Overlap graph is done by depth-first-search - set of composition trees which o) s
5 175 M
(verlap. If each edge is replaced by) s
5 164 M
(a function of sentiment scores of two vertex words, then lambda composition performed over the) s
5 153 M
( graph is a better representation of sentiment) s
5 142 M
(of the document. This is at present a conjecture only. An implementation of this has been adde) s
5 131 M
(d to SentimentAnalyzer.py by doing a Belief) s
5 120 M
(Propagation of a sentiment potential in the Recursive Gloss Overlap graph considering it as a ) s
5 109 M
(Bayesian graphical model.) s
5 87 M
(--------------------------------------------------------------------------) s
5 76 M
(Commits as on 15 June 2015) s
5 65 M
(---------------------------) s
5 54 M
(NeuronRain - \(AsFer+USBmd+VIRGO+KingCobra\) - version 15.6.15 release tagged) s
5 43 M
(Most of features and bugfixes are in AsFer and VIRGO) s
5 32 M
(--------------------------------------------------------------------------) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (93) 93
%%BeginPageSetup
_S
18 36 translate
/pagenum 93 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (93) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(------------) s
5 681 M
(154. \(FEATURE - DONE\) Belief Propagation and RGO - Commits as on 20 June 2015) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(------------) s
5 648 M
(SentimentAnalyzer is updated with a belief propagation algorithm \(Pearl\) based Sentiment scori) s
5 637 M
(ng by) s
5 626 M
(considering Recursive Gloss Overlap Definition Graph as graphical model and sentiwordnet score) s
5 615 M
( for) s
5 604 M
(edge vertices as the belief potential propagated in the bayesian network \(RGO graph\). Since th) s
5 593 M
(e) s
5 582 M
(sentiment is a collective belief extracted from a text rather than on isolated words and the) s
5 571 M
(sentiwordnet scores are probabilities if normalized, Sentiment Analysis is reduced to Belief P) s
5 560 M
(ropagation problem.) s
5 549 M
(The previous Belief Propagation function is invoked from SocialNetworkAnalysis_<> code to Sent) s
5 538 M
(iment Analyze tweet stream.) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(--------------------------------------------) s
5 494 M
(155. Updates to https://sites.google.com/site/kuja27/DocumentSummarization_using_SpectralGraph) s
5 483 M
(Theory_RGOGraph_2014.pdf?attredirects=0&d=1) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(--------------------------------------------) s
5 450 M
(Algorithms and features based on Recursive Gloss Overlap graph:) s
5 439 M
(155.1 RGO visualizer) s
5 428 M
(155.2 RGO based Sentiment Analyzer - Belief Propagation in RGO as a graphical model) s
5 417 M
(155.3 Graph Search in text - map a text to wordnet relations by RGO graph growth - prints the ) s
5 406 M
(graph edges which are relations hidden in ) s
5 395 M
(a text) s
5 384 M
(155.4 New unsupervised text classifier based in RGO core numbers and PageRank) s
5 373 M
(155.5 Social Network Analyzer \(Tweets analysis by RGO graph growth\)) s
5 362 M
(155.5 Lambda expression construction from the RGO graph ) s
5 351 M
(155.6 Sentence construction by composition of edges) s
5 329 M
(----------------------------------------------------------------------------) s
5 318 M
(156. \(FEATURE - DONE\) Commits as on 4 July 2015 - RGO sentiment analyzer on cynical tweets) s
5 307 M
(----------------------------------------------------------------------------) s
5 296 M
(Added query for a "elections" to stream tweets related to it. Few sample cynical tweets were s) s
5 285 M
(entiment-analyzed with) s
5 274 M
(RGO Belief Propagation SentimentAnalyzer that gives negative sentiment scores as expected wher) s
5 263 M
(eas trivial SentiWordNet score summation  ) s
5 252 M
(gives a positive score wrongly.) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(----------------------) s
5 208 M
(157. \(THEORY\) Recursive Gloss Overlap graphical model as a Deep Learning algorithm that is an ) s
5 197 M
(alternative to Perceptrons - for text data) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(----------------------) s
5 164 M
(Point 155 mentions the diverse applications of Recursive Gloss Overlap algorithm each of which) s
5 153 M
( touch upon multiple facets of Machine Learning \(or\) Deep Learning. Instead of a multi-layered) s
5 142 M
( perceptron and a backpropagation on it which have the standard notation \(W . X + bias\) and ha) s
5 131 M
(ve to be built, the wordnet RGO subgraph presents itself readily as a deep learning model with) s
5 120 M
(out any additional need for perceptrons with additional advantage that complete graph theory r) s
5 109 M
(esults apply to it\(core numbers, pageranks, connectivity etc.,\), making it a Graph-theoretical) s
5 98 M
( learning instead of statistical \(for text data\). ) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(---------------------) s
5 54 M
(158. \(THEORY\) Graph Discovery \(or\) Graph Guessing and EventNet \(related to EventNet points 70-) s
5 43 M
(79\)) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(---------------------) s
5 10 M
(EventNet mentioned previously is an infinite cause-effect graph of event vertices with partake) s
_R
S
%%Page: (94) 94
%%BeginPageSetup
_S
18 36 translate
/pagenum 94 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (94) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(rs for each event ) s
5 681 M
(\(kind of a PetriNet yet different\). A special case of interest is when only few subgraphs of a) s
5 670 M
( giant EventNet is available and it is) s
5 659 M
(often necessary to discover or guess the complete graph of causality with partakers. A familia) s
5 648 M
(r example is a crime scene investigation) s
5 637 M
(where:) s
5 626 M
( - it is necessary to recreate the complete set of events and their causalities with partakers) s
5 615 M
( of a crime \(reverse-engineering\)) s
5 604 M
( - but only few clues or none are available - which are akin to very sparse subgraphs of the c) s
5 593 M
(rime scene EventNet) s
5 582 M
( - Guessing \(100-x\)% of the graph from x% clue subgraphs can be conjectured to be an NP proble) s
5 571 M
(m - because non-deterministic polynomially an) s
5 560 M
(EventNet path can be guessed. As a counting problem this is #P-complete \(set of all paths amon) s
5 549 M
(g known subgraphs of an unknown supergraph\). But there is only one accepting path \(could be in) s
5 538 M
( Unambigous Logspace if the number of states is in logspace\) ) s
5 516 M
(Another example: set of blind men try to make out an object by touch.) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(--------------------) s
5 472 M
(159. \(THEORY\) Pattern Grammar and Topological Homeomorphism of Writing Deformations) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(--------------------) s
5 439 M
(Grammar for patterns like texts, pictures similar to RE,CFG etc., for pattern recognition:) s
5 428 M
(   - example text grammar:  <a> := <o> <operator> <\)>) s
5 417 M
(   - example text grammar:  <d> := <o> <operator> <l>) s
5 406 M
(   - example text grammar:  <v> := <\\> <operator> </>) s
5 395 M
(Previous grammar is extensible to any topological shapes. For example, handwriting of 2 indivi) s
5 384 M
(duals are) s
5 373 M
(homeomorphic deformations.) s
5 351 M
(References:) s
5 340 M
(-----------) s
5 329 M
(159.1 Topology and Graphics - https://books.google.co.in/books?id=vCc8DQAAQBAJ&pg=PA263&lpg=PA) s
5 318 M
(263&dq=homeomorphism+and+handwriting&source=bl&ots=L_9kNgTcmF&sig=l-PfRL_jjcuF0L-2dJ5rukrC4CM&) s
5 307 M
(hl=en&sa=X&ved=0ahUKEwji8bDJ683QAhWBQY8KHQ3qAuEQ6AEIHzAA#v=onepage&q=homeomorphism%20and%20han) s
5 296 M
(dwriting&f=false) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(-------------------) s
5 252 M
(160. \(THEORY\) Cognitive Element) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(-------------------) s
5 219 M
(An element of a list or group is cognitive with respect to an operator if it "knows" about all) s
5 208 M
( or subset of other elements of list or group where "knowing" is subject to definition of oper) s
5 197 M
(ation as below:) s
5 186 M
(   - In list 2,3,5,7,17 - 17 knows about 2,3,5,7 in the sense that 17 = 2+3+5+7 with + operato) s
5 175 M
(r) s
5 164 M
(   - In list "addon","add","on" - "addon" knows about "add" and "on" with concatenation operat) s
5 153 M
(or ) s
5 142 M
(   - In list "2,3,6,8,9,10,..." - 6 knows about 2 and 3, 10 knows about 2 and 5 with factoriza) s
5 131 M
(tion as operator.) s
5 120 M
(This might have an equivalent notion in algebra. Motivation for this is to abstract cognition ) s
5 109 M
(as group operator. Essentially, this reduces) s
5 98 M
(to an equivalence relation graph where elements are related by a cognitive operator edge.) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(-------------------------) s
5 54 M
(161. \(THEORY\) Philosophical intuition for P\(Good\) summation - Continuation of \(129\) and other ) s
5 43 M
(previous related points.) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(-------------------------) s
5 10 M
(The apparent paradox in Perfect Voting can be reconciled as below to some extent:) s
_R
S
%%Page: (95) 95
%%BeginPageSetup
_S
18 36 translate
/pagenum 95 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (95) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- Voting is done in parallel in real-world elections and not serially) s
5 681 M
(- Votes are counted in parallel - iterated integer addition in NC1 \(http://www.ccs.neu.edu/hom) s
5 670 M
(e/viola/classes/gems-08/lectures/le8.pdf\)) s
5 659 M
(- Thus if RHS is just Circuit-Value Problem and not a Circuit-SAT then LHS getting equated to ) s
5 648 M
(RHS is not unusual - both can be NC or P-Complete) s
5 637 M
(- Separation of RHS from LHS happens only when the Circuit-SAT is required in RHS.) s
5 626 M
(- P\(Good\) convergence in perfect voting implies that Voter SAT is not necessary if there is pe) s
5 615 M
(rfection \(proving the obvious\). This is) s
5 604 M
(true even though the PRG is imperfect that operates to choose on a perfect set.) s
5 593 M
(- Parallelism implies NC circuits) s
5 582 M
(- Above applies to infinite majority also \(Mark Fey\)) s
5 571 M
(- RHS in worst-case can be EXP-Complete if the Majority+Voter SAT oracle circuit is of unrestr) s
5 560 M
(icted depth and lot of variables are common across all voters. Proving EXP-completeness is ign) s
5 549 M
(ored as it is evident from definition of DC circuits. Thus LHS has a P or NC algorithm to RHS ) s
5 538 M
(EXP-Complete problem \(something seemingly preposterous unless perfection is prohibited and vot) s
5 527 M
(ers do not have common variables in their boolean functions\)) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(-----------) s
5 483 M
(162. \(THEORY\) Majority Voting Circuit with Boolean Function Oracles) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(-----------) s
5 450 M
(If each voter has a boolean function to decide which has fanout > 1 gates instead of a formula) s
5 439 M
(, RHS Majority Voting becomes generic.) s
5 428 M
(Decision tree, Certificate,  and other complexity measures automatically come into reckoning. ) s
5 417 M
(Thus RHS circuit is an infinite \(non-uniform\) majority circuit with boolean function circuit D) s
5 406 M
(AGs or oracles.) s
5 384 M
(References:) s
5 373 M
(-----------) s
5 362 M
(162.1 http://www.cs.cmu.edu/~odonnell/papers/barbados-aobf-lecture-notes.pdf) s
5 351 M
(162.1 http://www.math.u-szeged.hu/~hajnal/research/papers/dec_surv.gz) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-----------) s
5 307 M
(163. \(THEORY\) Parity and Constant Depth - intuition \(not a formal proof, might have errors\)) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-----------) s
5 274 M
(Inductive Hypothesis:) s
5 263 M
(---------------------) s
5 252 M
(For depth d and n variables parity has n^k sized circuit.) s
5 230 M
(For n+1 variables:) s
5 219 M
(-----------------) s
5 208 M
(       XOR gate) s
5 197 M
(       /      \\) s
5 186 M
(n-variable   \(n+1\)th variable) s
5 175 M
(circuit     ) s
5 153 M
(Each XOR gate is of atleast depth 2 or 3 with formula - \(x /\\ not y\) V \(not x /\\ y\). Thus for ) s
5 142 M
(each additional variable added depth gets added by atleast 2 contradicting the constant depth ) s
5 131 M
(d in hypothesis above though size is polynomial.) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(-----------) s
5 87 M
(164. \(FEATURE - DONE\) Commits as on 16 September 2015) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(-----------) s
5 54 M
(cpp-src/cloud_move - Implementation of Move Semantics for Cloud objects:) s
5 43 M
(-------------------------------------------------------------------------) s
5 32 M
(This expands on the usual move semantics in C++ and implements a Perfect Forwarding of objects) s
5 21 M
( over cloud. A move client invokes the T&& rvalue reference move constructor to move\(instead o) s
5 10 M
(f copying\) a local memory content to a remote machine in userspace. Functionality similar to t) s
_R
S
%%Page: (96) 96
%%BeginPageSetup
_S
18 36 translate
/pagenum 96 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (96) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(his in kernelspace is required for transactional currency move in KingCobra - http://sourcefor) s
5 681 M
(ge.net/p/kcobra/code-svn/HEAD/tree/KingCobraDesignNotes.txt and https://github.com/shrinivaasa) s
5 670 M
(nka/kingcobra-github-code/blob/master/KingCobraDesignNotes.txt. Though kernel with C++ code is) s
5 659 M
( not advised ,kingcobra driver can make an upcall to userspace move client and server executab) s
5 648 M
(les and perfom currency move with .proto currency messages.) s
5 626 M
(VIRGO kernel sockets code has been carried over and changed for userspace that uses traditiona) s
5 615 M
(l sockaddr_in and htons.) s
5 593 M
(C++ sockets reference code adapted for std::move - for use_addrinfo clause:) s
5 582 M
(- getaddrinfo linux man pages) s
5 571 M
(- http://codebase.eu/tutorial/linux-socket-programming-c/ \(addrinfo instead of usual sockaddr_) s
5 560 M
(in and htons\)) s
5 538 M
(Move semantics schematic:) s
5 527 M
(-------------------------) s
5 516 M
(                                    &) s
5 505 M
( member fn temp arg lvalue <-------source data rvalue) s
5 494 M
(                  |                  /) s
5 483 M
(              &   |                 / && \(removes a temp copy\)) s
5 472 M
(                  |                /) s
5 461 M
(                  V               /) s
5 450 M
(client proxy destination lvalue<-/) s
5 439 M
(                  |) s
5 428 M
(                  |-------------------------> cloud server destination) s
5 406 M
(lvalue reference& does additional copy which is removed by rvalue reference&& to get the rvalu) s
5 395 M
(e directly. Move client proxies the remote object and connects to Move server and the object i) s
5 384 M
(s written over socket.) s
5 362 M
(--------------------------------------------------------------------------------------------) s
5 351 M
(165. \(FEATURE - DONE\) Commits as on 18 September 2015) s
5 340 M
(--------------------------------------------------------------------------------------------) s
5 329 M
(Cloud Perfect Forwarding - Google Protocol Buffer Currency :) s
5 318 M
(------------------------------------------------------------) s
5 307 M
(Currency object has been implemented with Google Protocol Buffers - in cloud_move/protocol_buf) s
5 296 M
(fers/ src_dir and out_dir directories. Currency has been defined in src_dir/currency.proto fil) s
5 285 M
(e. Choice of Protocol Buffer over other formats is due to:) s
5 274 M
(- lack of JSON format language specific compilers) s
5 263 M
(- XML is too complicated) s
5 252 M
(- Protocol Buffers also have object serialization-to-text member functions in generated C++ cl) s
5 241 M
(asses.) s
5 219 M
(Protocol Buffer compilation after change to currency object:) s
5 208 M
(protoc -I=src_dir/ --cpp_out=out_dir/ src_dir/currency.proto) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(------------) s
5 164 M
(166. \(THEORY\) Debug Analytics,Software Analytics,Automated Debugging - 24 November 2019 - rela) s
5 153 M
(ted to 65, 581) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(------------) s
5 120 M
(Debugging software is painful process with repetitive labour - For example kernel and device d) s
5 109 M
(river development has the following lifecycle:) s
5 98 M
(1. Writing the kernel patch code for some deep kernel panics.) s
5 87 M
(2. Kernel incremental or full build.) s
5 76 M
(3. Test the patch.) s
5 65 M
(\(1\),\(2\) and \(3\) are sometimes frustratingly repetitive. If the debugging is represented as a s) s
5 54 M
(tate machine automaton, the cycles in automaton are the time consuming phases. Thus Debug Anal) s
5 43 M
(ytics can be defined as the problem to find the most efficient debug state machine automaton w) s
5 32 M
(ithout cycles or with least number of cycles and cycles of least length. ) s
5 21 M
(Delta debugging algorithm bisects the code changes between two successive commits recursively ) s
5 10 M
(and isolates the code snippet causing the regression in unit testing. Example: If revision r+1) s
_R
S
%%Page: (97) 97
%%BeginPageSetup
_S
18 36 translate
/pagenum 97 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (97) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( has the patch set [p1,p2,p3,p4,p5] over revision r, delta debugging creates delta subsets [p1) s
5 681 M
(,p2],[p3],[p4,p5] and applies the deltas incrementally over r as paths in a binary search tree) s
5 670 M
( by union\(\) and minus\(\) primitives based on unit test pass or fail - for instance the path:) s
5 659 M
(         r+[p1,p2] - pass, r+[p1,p2] union [p3] - pass , r + [p1,p2,p3] union [p4,p5] - fail) s
5 648 M
(isolates [p4,p5] delta as point of failure. minus\(\) primitive is applied to [p1,p2,p3,p4,p5] a) s
5 637 M
(nd [p4,p5] are segregated to fail state in bisection. Program state reachability graphs are ob) s
5 626 M
(tained by a fixed point of variables as vertices and edges amongst them are deduced from point) s
5 615 M
(er analysis. These program states between two consecutive revision states create a stream of P) s
5 604 M
(rogram state graphs which is a Streaming Common Subgraph Mining problem. Correlating the commo) s
5 593 M
(n subgraphs in the program state graph stream and corresponding unit test pass-fail binary str) s
5 582 M
(eam for sequence of patch revisions yields insights into the regression causing state subgraph) s
5 571 M
(:) s
5 560 M
(        ... Graph\(r\)-Graph\(r+delta\) ...) s
5 549 M
(        ... Pass-Fail ...) s
5 538 M
(Debug Analytics goes further beyond isolating the buggy code and asks for minimum state debug ) s
5 527 M
(automaton if any which resolves the bug.) s
5 505 M
(References:) s
5 494 M
(166.1 Learning Finite State Machines - https://www.cs.upc.edu/~bballe/other/phdthesis.pdf) s
5 483 M
(166.2 Delta Debugging - Why Programs Fail - https://www.st.cs.uni-saarland.de/dd/ - Bisection ) s
5 472 M
(in Git/SVN/Hg) s
5 461 M
(166.3 Beautiful Code - [Oram-Wilson] - Chapter 28 - Beautiful Debugging by Andreas Zeller - DD) s
5 450 M
(D and Eclipse plugins for Delta Debugging algorithm - Code example 28.1 - computing common sub) s
5 439 M
(graphs between program state graphs - Fig 28.2 - Program State of GNU C Compiler - Example of ) s
5 428 M
(regression between gdb 4.16 and gdb 4.17 for DDD) s
5 406 M
(------------------------------------------------------------------------------------------) s
5 395 M
(167. \(THEORY\) Prestige based ranking and Condorcet Elections) s
5 384 M
(------------------------------------------------------------------------------------------) s
5 373 M
(Web Search Engine Rankings by prestige measures are n-tuples of rankings \(for n candidate web ) s
5 362 M
(pages where n could be few billions\) which are not condorcet rankings. Arrow's Theorem for 3-c) s
5 351 M
(andidate condorcet election allows a winner if and only if there is dictatorship. If there are) s
5 340 M
( m search engines each creating n-tuples of condorcet rankings \(NAE tuples\), then conjecturall) s
5 329 M
(y there shouldn't be a voting rule or a meta search engine that circumvents circular rankings ) s
5 318 M
(and produces a reconciled ranking of all NAE tuples from m search engines.) s
5 296 M
(--------------------------------------------------------------------------) s
5 285 M
(168. \(FEATURE - DONE\) Commits as on 20,21,22 October 2015) s
5 274 M
(--------------------------------------------------------------------------) s
5 263 M
(Initial code for LinkedIn crawl-scrape. Uses Python-linkedin from https://github.com/ozgur/pyt) s
5 252 M
(hon-linkedin with) s
5 241 M
(some additional parsing for url rewriting and wait for authurl input:) s
5 230 M
(- prints a linkedin url which is manually accessed through curl or browser) s
5 219 M
(- created redirect_url with code is supplied to raw_input "authurl:") s
5 208 M
(- parses the authcode and logs-in to linkedin to retrieve profile data; get_connections\(\) crea) s
5 197 M
(tes a forbidden error) s
5 175 M
(Logs for the above has been added to testlogs) s
5 153 M
(---------------------------------------------------------------------------) s
5 142 M
(169. \(FEATURE - DONE\) Commits as on 28 October 2015) s
5 131 M
(---------------------------------------------------------------------------) s
5 120 M
(Deep Learning Convolution Perceptron Python Implementation.) s
5 98 M
(---------------------------------------------------------------------------) s
5 87 M
(170. \(FEATURE - DONE\) Commits as on 29 October 2015, 1 November 2015) s
5 76 M
(---------------------------------------------------------------------------) s
5 65 M
(Deep Learning BackPropagation Multilayered Perceptron Python Implementation.) s
5 43 M
(---------------------------------------------------------------------------) s
5 32 M
(171. Commits as on 3 November 2015) s
5 21 M
(---------------------------------------------------------------------------) s
5 10 M
(DeepLearning BackPropagation implementation revamped with some hardcoded data removal.) s
_R
S
%%Page: (98) 98
%%BeginPageSetup
_S
18 36 translate
/pagenum 98 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (98) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------) s
5 670 M
(172. \(FEATURE - DONE\) Hurricane Datasets Sequence Mining - Commits as on 4 November 2015) s
5 659 M
(----------------------------------------------------------------------------------------) s
5 648 M
(Miscellaneous code changes:) s
5 637 M
(---------------------------) s
5 626 M
(- Weight updates in each iteration are printed in DeepLearning_BackPropagation.py) s
5 615 M
(- Changed maitreya_textclient path for Maitreya's Dreams 7.0 text client; Updated to read HURD) s
5 604 M
(AT2 NOAA Hurricane Dataset \(years 1851-2012\) in MaitreyaToEncHoro.py) s
5 593 M
(- Maximum sequence length set to 7 for mining HURDAT2 asfer.enchoros.seqmining) s
5 582 M
(- New files asfer.enchoros.ascrelative.hurricanes, asfer.enchoros.zodiacal.hurricanes have bee) s
5 571 M
(n added which are created by MaitreyaToEncHoro.py) s
5 560 M
(- an example chartsummary for Maitreya's Dreams 7.0 has been updated) s
5 549 M
(- 2 logs for SequenceMining for HURDAT2 encoded datasets and Text Class Association Rules lear) s
5 538 M
(nt by SequenceMining.py Apriori GSP have been added to testlogs/) s
5 527 M
(- Increased number of iterations in BackPropagation to 100000; logs for this with weights prin) s
5 516 M
(ted are added in testlogs/; shows a beautiful convergence and error tapering \(~10^-12\)) s
5 494 M
(===================================================) s
5 483 M
(Sorted Candidate support for all subsequence lengths - gives an approximate pattern in dataset) s
5 472 M
(:) s
5 461 M
([\('0', 1333\), \('4', 1333\), \('8', 1333\), \('3', 1333\), \('7', 1333\), \('2', 1333\), \('6', 1333\), \(') s
5 450 M
(1', 1333\), \('5', 1333\), \('9', 1333\), \('a', 1333\), \('14', 613\), \('46', 315\), \('67', 261\), \('78') s
5 439 M
(, 190\), \('59', 189\), \('49', 186\), \('34', 180\), \('57', 165\), \('45', 161\), \('13', 159\), \('56', 1) s
5 428 M
(58\), \('58', 147\), \('12', 134\), \('23', 128\), \('146', 116\), \('36', 115\), \('8a', 113\), \('25', 108) s
5 417 M
(\), \('9a', 106\), \('346', 103\), \('69', 99\), \('26', 98\), \('24', 95\), \('134', 90\), \('16', 83\), \('6) s
5 406 M
(a', 81\), \('35', 77\), \('38', 75\), \('149', 75\), \('68', 73\), \('467', 73\), \('28', 71\), \('2a', 71\),) s
5 395 M
( \('569', 70\), \('29', 66\), \('367', 66\), \('4a', 64\), \('37', 59\), \('567', 59\), \('3a', 57\), \('457') s
5 384 M
(, 56\), \('27', 55\), \('7a', 55\), \('47', 51\), \('145', 50\), \('3467', 49\), \('5a', 48\), \('124', 44\),) s
5 373 M
( \('79', 41\), \('14a', 38\), \('1346', 37\), \('459', 36\), \('17', 32\), \('126', 29\), \('246', 29\), \('1) s
5 362 M
(459', 28\), \('46a', 27\), \('59a', 25\), \('1a', 25\), \('15', 25\), \('156', 25\), \('39', 24\), \('345', ) s
5 351 M
(23\), \('13467', 22\), \('1345', 22\), \('3457', 22\), \('19', 22\), \('13457', 22\), \('1457', 21\), \('234) s
5 340 M
(', 21\), \('136', 20\), \('1367', 20\), \('2346', 18\), \('3567', 18\), \('356', 18\), \('78a', 17\), \('258) s
5 329 M
(', 16\), \('259', 16\), \('169', 16\), \('135', 14\), \('146a', 14\), \('278', 14\), \('67a', 13\), \('49a',) s
5 318 M
( 13\), \('469', 13\), \('13567', 12\), \('679', 12\), \('178', 12\), \('1356', 12\), \('237', 12\), \('3679') s
5 307 M
(, 12\), \('4569', 11\), \('678', 11\), \('268', 11\), \('456', 11\), \('57a', 11\), \('129', 10\), \('28a', ) s
5 296 M
(10\), \('238', 10\), \('68a', 10\), \('147', 10\), \('23a', 10\), \('459a', 10\), \('267', 10\), \('26a', 9\)) s
5 285 M
(, \('23467', 9\), \('247', 9\), \('16a', 9\), \('256', 9\), \('2569', 9\), \('137', 8\), \('249', 8\), \('124) s
5 274 M
(6', 8\), \('257', 8\), \('36a', 8\), \('168', 8\), \('1567', 8\), \('12a', 7\), \('346a', 7\), \('1459a', 7\)) s
5 263 M
(, \('245', 7\), \('2459', 7\), \('2367', 7\), \('236', 7\), \('1268', 6\), \('567a', 6\), \('25a', 6\), \('12) s
5 252 M
(47', 6\), \('79a', 5\), \('47a', 5\), \('149a', 4\), \('29a', 4\), \('1469', 4\), \('126a', 4\), \('19a', 4\)) s
5 241 M
(, \('2469', 4\), \('37a', 3\), \('679a', 3\), \('24a', 3\), \('367a', 3\), \('268a', 3\), \('1367a', 3\), \(') s
5 230 M
(58a', 3\), \('147a', 3\), \('3679a', 3\), \('357', 3\), \('123', 2\), \('69a', 2\), \('246a', 2\), \('56a', ) s
5 219 M
(2\), \('1268a', 2\), \('124a', 2\), \('1234', 2\), \('1249', 2\), \('4569a', 2\), \('1567a', 2\), \('2459a',) s
5 208 M
( 2\), \('1357', 2\), \('168a', 2\), \('35a', 2\), \('569a', 2\), \('1346a', 2\), \('1246a', 2\), \('349', 1\)) s
5 197 M
(, \('34a', 1\), \('137a', 1\), \('467a', 1\), \('38a', 1\), \('2345', 1\), \('237a', 1\), \('267a', 1\), \('2) s
5 186 M
(7a', 1\), \('39a', 1\), \('247a', 1\), \('123467', 1\), \('1247a', 1\), \('134a', 1\), \('13467a', 1\), \('1) s
5 175 M
(2345', 1\), \('12346', 1\), \('239', 1\), \('3467a', 1\)]) s
5 164 M
(size of dataset =  1333) s
5 142 M
(=========================================) s
5 131 M
(Sun , Mercury ,) s
5 120 M
(=========================================) s
5 109 M
(Class Association Rule  12  mined from dataset: with frequencies: 23.6309077269  percentage) s
5 98 M
(=========================================) s
5 87 M
(Mercury , Venus ,) s
5 76 M
(=========================================) s
5 65 M
(Class Association Rule  13  mined from dataset: with frequencies: 19.5798949737  percentage) s
5 54 M
(=========================================) s
5 43 M
(Venus , Saturn ,) s
5 32 M
(=========================================) s
5 21 M
(Class Association Rule  14  mined from dataset: with frequencies: 14.2535633908  percentage) s
5 10 M
(=========================================) s
_R
S
%%Page: (99) 99
%%BeginPageSetup
_S
18 36 translate
/pagenum 99 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (99) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Saturn , Rahu ,) s
5 681 M
(=========================================) s
5 670 M
(Class Association Rule  15  mined from dataset: with frequencies: 14.1785446362  percentage) s
5 659 M
(=========================================) s
5 648 M
(Jupiter , Ketu ,) s
5 637 M
(=========================================) s
5 626 M
(Class Association Rule  16  mined from dataset: with frequencies: 13.9534883721  percentage) s
5 615 M
(=========================================) s
5 604 M
(Mercury , Ketu ,) s
5 593 M
(=========================================) s
5 582 M
(Class Association Rule  17  mined from dataset: with frequencies: 13.503375844  percentage) s
5 571 M
(=========================================) s
5 560 M
(Mars , Mercury ,) s
5 549 M
(=========================================) s
5 538 M
(Class Association Rule  18  mined from dataset: with frequencies: 12.3780945236  percentage) s
5 527 M
(=========================================) s
5 516 M
(Jupiter , Saturn ,) s
5 505 M
(=========================================) s
5 494 M
(Class Association Rule  19  mined from dataset: with frequencies: 12.0780195049  percentage) s
5 483 M
(=========================================) s
5 472 M
(Mercury , Jupiter ,) s
5 461 M
(=========================================) s
5 450 M
(Class Association Rule  20  mined from dataset: with frequencies: 11.9279819955  percentage) s
5 439 M
(=========================================) s
5 428 M
(Sun , Mars ,) s
5 417 M
(=========================================) s
5 406 M
(Class Association Rule  21  mined from dataset: with frequencies: 11.8529632408  percentage) s
5 395 M
(=========================================) s
5 384 M
(Jupiter , Venus ,) s
5 373 M
(=========================================) s
5 362 M
(Class Association Rule  22  mined from dataset: with frequencies: 11.0277569392  percentage) s
5 351 M
(=========================================) s
5 340 M
(Jupiter , Rahu ,) s
5 329 M
(=========================================) s
5 318 M
(Class Association Rule  23  mined from dataset: with frequencies: 10.0525131283  percentage) s
5 307 M
(=========================================) s
5 296 M
(Sun , Moon ,) s
5 285 M
(=========================================) s
5 274 M
(Class Association Rule  24  mined from dataset: with frequencies: 9.60240060015  percentage) s
5 263 M
(=========================================) s
5 252 M
(Moon , Mars ,) s
5 241 M
(=========================================) s
5 230 M
(Class Association Rule  25  mined from dataset: with frequencies: 8.70217554389  percentage) s
5 219 M
(=========================================) s
5 208 M
(Sun , Mercury , Venus ,) s
5 197 M
(=========================================) s
5 186 M
(Class Association Rule  26  mined from dataset: with frequencies: 8.6271567892  percentage) s
5 175 M
(=========================================) s
5 164 M
(Mars , Venus ,) s
5 153 M
(=========================================) s
5 142 M
(Class Association Rule  27  mined from dataset: with frequencies: 8.47711927982  percentage) s
5 131 M
(=========================================) s
5 120 M
(Rahu , Ascendant ,) s
5 109 M
(=========================================) s
5 98 M
(Class Association Rule  28  mined from dataset: with frequencies: 8.10202550638  percentage) s
5 87 M
(=========================================) s
5 76 M
(Moon , Jupiter ,) s
5 65 M
(=========================================) s
5 54 M
(Class Association Rule  29  mined from dataset: with frequencies: 7.951987997  percentage) s
5 43 M
(=========================================) s
5 32 M
(Ketu , Ascendant ,) s
5 21 M
(=========================================) s
5 10 M
(Class Association Rule  30  mined from dataset: with frequencies: 7.72693173293  percentage) s
_R
S
%%Page: (100) 100
%%BeginPageSetup
_S
18 36 translate
/pagenum 100 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (100) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(=========================================) s
5 681 M
(Mars , Mercury , Venus ,) s
5 670 M
(=========================================) s
5 648 M
(Above are excerpts from the logs added to testlogs/ for Sequence mined from HURDAT2 dataset fo) s
5 637 M
(r hurricanes from 1851 to 2012. Similar to the sequence mining done for Earthquake datasets, s) s
5 626 M
(ome of the mined sequences above are strikingly similar to astronomical conjunctions already m) s
5 615 M
(entioned in few astrological classics \(E.g Sun-Mercury-Venus - the legendary Sun flanked by Me) s
5 604 M
(rcury and Venus, Mercury-Venus\) and many others look quite new \(e.g prominence of Venus-Saturn) s
5 593 M
(\). Though these correlations can be dismissed as coincidental, these patterns are output autom) s
5 582 M
(atically through a standard machine learning algorithm like Sequence Mining on astronomical da) s
5 571 M
(tasets without any non-scientific assumptions whatsoever. Scientific corroboration of the abov) s
5 560 M
(e might require knowhow beyond purview of computer science - e.g Oceanography, Gravitational E) s
5 549 M
(ffects on Tectonic Geology etc.,) s
5 527 M
(==============================================================================================) s
5 516 M
(===================) s
5 505 M
(173. \(FEATURE - DONE\) BigData Storage Backend Abstraction subsystem for AsFer - Commits as on ) s
5 494 M
(5 November 2015 :) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(-------------------) s
5 461 M
(- These are initial minimal commits for abstracting storage of ingested bigdata for AsFer Mach) s
5 450 M
(ine Learning code) s
5 439 M
(- A dependency injection implementation of database-provider-specific objects is added to repo) s
5 428 M
(sitory.) s
5 417 M
(- Presently MySQLdb based MySQL backend has been implemented with decoupled configuration whic) s
5 406 M
(h are injected into Abstract Backend class to build an object graph. Python injector library b) s
5 395 M
(ased on Google Guice Dependency Injection Framework \(https://pythonhosted.org/injector/\) is us) s
5 384 M
(ed for this.  Logs for a sample MySQL query has been added to testlogs/) s
5 362 M
(Schematic Dependency Injected Object Graph:) s
5 351 M
(-------------------------------------------) s
5 340 M
(                                        Injector =============================================) s
5 329 M
(==============) s
5 318 M
(                                                                                              ) s
5 307 M
(           |) s
5 296 M
(                                                                                              ) s
5 285 M
(           |) s
5 274 M
(                                                                                              ) s
5 263 M
(           V) s
5 252 M
(                MySQL_Configuration ---injects config ----> MySQL_DBBackend ---- injects conne) s
5 241 M
(ction ----> Abstract_DBBackend ---> exec_query\(\)) s
5 230 M
(                                                                                              ) s
5 219 M
(          /\\) s
5 208 M
(                                                                                              ) s
5 197 M
(           |) s
5 186 M
(                xxx_Configuration ---injects config ----> xxx_DBBackend ---- injects connectio) s
5 175 M
(n -----------|) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(--------------------------) s
5 131 M
(174. \(FEATURE - DONE\) AsFer C++ - Python Integration - Embedding Python in AsFer C++ - Commits) s
5 120 M
( as on 11 November 2015) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(--------------------------) s
5 87 M
(Python Embedding in C++ implementation has been added and invoked from asfer main entrypoint w) s
5 76 M
(ith a boolean flag. This at present is not based on boost::python and directly uses CPython AP) s
5 65 M
(I. Logs for this has been added in cpp-src/testlogs. With this all AsFer machine learning algo) s
5 54 M
(rithms can be invoked from asfer.cpp main\(\) through commandline as: $./asfer <python-script>.) s
5 32 M
(Schematic Diagram:) s
5 21 M
(-----------------) s
5 10 M
(        AsFer C++ -----> C Python Embedding ------> AsFer Python  --------> Machine Learning a) s
_R
S
%%Page: (101) 101
%%BeginPageSetup
_S
18 36 translate
/pagenum 101 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (101) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(lgorithms on Spark RDD datasets) s
5 681 M
(        /\\                                                                                    ) s
5 670 M
(          V) s
5 659 M
(         |                                                                                    ) s
5 648 M
(          |) s
5 637 M
(         --------------------<--------- userspace upcall ---------------VIRGO kernel analytics) s
5 626 M
( and other kernel modules) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(----------------------------------) s
5 582 M
(175. \(FEATURE - DONE\) Config File Support for AsFer C++ and Python Machine Learning Algorithms) s
5 571 M
( - Commits as on 12 November 2015) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(----------------------------------) s
5 538 M
(Config File support for asfer has been added. In asfer.cpp main\(\), read_asfer_config\(\) is invo) s
5 527 M
(ked which reads config in asfer.conf and executes the enabled AsFer algorithms in C++ and Embe) s
5 516 M
(dded Python. Config key-values are stored in a map.) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(--------------) s
5 472 M
(176. \(THEORY\) Isomorphism of two Document Definition Graphs) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(--------------) s
5 439 M
(http://arxiv.org/abs/1006.4458 and http://www.nist.gov/tac/publications/2010/participant.paper) s
5 428 M
(s/CMI_IIT.proceedings.pdf describe the Recursive Gloss Overlap Algorithm to construct a Defini) s
5 417 M
(tion Graph from a text document with WordNet or any other Ontology. If Definition Graphs extra) s
5 406 M
(cted from two documents are Isomorphic, then it can be deduced that there is an intrinsic stru) s
5 395 M
(ctural similarity between the two texts ignoring grammatical variations, though vertices diffe) s
5 384 M
(r in their labelling. [SubExponentialTIME algorithm for GI - Lazlo Babai - http://people.cs.uc) s
5 373 M
(hicago.edu/~laci/update.html]) s
5 351 M
(---------------------------------------------------------------------------------------------) s
5 340 M
(177. Commits as on 13 November 2015) s
5 329 M
(---------------------------------------------------------------------------------------------) s
5 318 M
(    - Corrections to Convolution Map Neuron computation with per-coordinate weight added) s
5 307 M
(    - Removed hardcoded convolution stride and pooling width in the class) s
5 296 M
(    - testlogs following input bitmap features have been added with the output of 5 neurons in) s
5 285 M
( final layer:) s
5 274 M
(        - Without Zero inscribed) s
5 263 M
(        - With Zero inscribed in bitmap as 1s) s
5 252 M
(        - With Bigger Zero inscribed in bitmap as 1s) s
5 241 M
(        - With Biggest Zero inscribed in bitmap as 1s) s
5 230 M
(      The variation of final neural outputs can be gleaned as the size of the pattern increase) s
5 219 M
(s from none to biggest. ) s
5 208 M
(      The threshold has to be set to neural output without patterns. Anything above it shows a) s
5 197 M
( pattern.) s
5 186 M
(    - Added a config variable for invoking cloud perfect forwarding binaries in KingCobra in a) s
5 175 M
(sfer.conf) s
5 164 M
(    - config_map updated in asfer.cpp for enableCloudPerfectForwarding config variable) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(178. \(THEORY\) Approximate Machine Translation with Recursive Gloss Overlap Definition Graph) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(For natural language X \(=English\) an RGO graph can be constructed \(based on algorithms in http) s
5 98 M
(://arxiv.org/abs/1006.4458 and http://www.nist.gov/tac/publications/2010/participant.papers/CM) s
5 87 M
(I_IIT.proceedings.pdf\). This definition graph is a subgraph of WordNet-English. Each vertex is) s
5 76 M
( a word from English dictionary. New RGO graph for language Y is constructed from RGO\(X\) by ma) s
5 65 M
(pping each vertex in RGO\(X\) to corresponding word in language Y. RGO\(X\) and RGO\(Y\) are isomorp) s
5 54 M
(hic graphs. Sentences in language Y can be constructed with lamda composition closure on the R) s
5 43 M
(GO\(Y\) graph implemented already. This is an approximation for machine translation between two ) s
5 32 M
(natural languages. I) s
5 21 M
(n the converse direction, text graphs of 2 texts in 2 different natural languages can be verif) s
5 10 M
(ied for Graph Isomo) s
_R
S
%%Page: (102) 102
%%BeginPageSetup
_S
18 36 translate
/pagenum 102 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (102) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(rphism. Isomorphic text graphs in two natural languages prima facie indicate the texts are sim) s
5 681 M
(ilarly organized an) s
5 670 M
(d have same meaning.) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(---------) s
5 626 M
(179. \(FEATURE - DONE\) Web Spider Implementation with Scrapy Framework - Commits as on 16 Novem) s
5 615 M
(ber 2015) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(---------) s
5 582 M
(Initial commits for a Web Spider - Crawl and Scrape - done with Scrapy framework. Presently it) s
5 571 M
( crawls Google News for a query and scrapes the search results to output a list of lines or a ) s
5 560 M
(digest of the news link texts. This output file can be used for Sentiment Analysis with Recurs) s
5 549 M
(ive Gloss Overlap already implemented.  Complete Scrapy project hierarchy is being added to th) s
5 538 M
(e repository with spider in WebSpider.py and) s
5 527 M
(crawled items in items.py) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(--------------) s
5 483 M
(180. \(FEATURE - DONE\) Sentiment Analyzer Implementation for Spidered Texts - Commits as on 16 ) s
5 472 M
(November 2015) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(--------------) s
5 439 M
(Sentiment Analyzer implementation for Crawled-Scraped Google News Search result texts with tes) s
5 428 M
(tlogs and screenshots of the RGO graph has) s
5 417 M
(been added. This has been made a specialized analyzer for spidered texts different from twitte) s
5 406 M
(r analyzer.) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(------------) s
5 362 M
(181. Commits as on 17 November 2015) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(------------) s
5 329 M
(Requirements.txt for package dependencies have been added to asfer-docs/.) s
5 318 M
(WebSpider Crawl-Scraped URLs descriptions are inserted into MySQL table \(asfer_webspider\) by i) s
5 307 M
(mporting backend/Abstract_DBBackend.py MySQL) s
5 296 M
(implementation. Logs for this Scrapy crawl has been added to webspider/testlogs. WebSpider.py ) s
5 285 M
(parse\(\) has been updated with MySQL_DBBackend execute_query\(\)s.  __init__.py have been added f) s
5 274 M
(or directory-as-package imports.) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(------------) s
5 230 M
(182. Commits as on 19 November 2015) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(------------) s
5 197 M
(- Added more stop words in spidered text and commented text generation in SocialNetworkAnalysi) s
5 186 M
(s_WebSpider.py) s
5 175 M
(- logs and screenshots for this has been added to testlogs/) s
5 164 M
(- crawl urls in WebSpider.py has been updated) s
5 153 M
(- Added more edges in definition graph by enumerating all the lemma names of a keyword in prev) s
5 142 M
(ious iteration. This makes the graph dense) s
5 131 M
(and probability of a node having more k-core number increases and classification is more accur) s
5 120 M
(ate.) s
5 109 M
(- logs and screenshots for updated web spidered news texts of two topics "Theoretical Computer) s
5 98 M
( Science" and "Chennai" have been added) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(------------) s
5 54 M
(183. Commits as on 20 November 2015) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(------------) s
5 21 M
(- Updated Spidered text for Sentiment Analysis) s
5 10 M
(- Changed the Sentiment Analysis scoring belief potential propagation algorithm:) s
_R
S
%%Page: (103) 103
%%BeginPageSetup
_S
18 36 translate
/pagenum 103 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (103) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(  - Two ways of scoring have been added - one is based on DFS tree of k-core subgraph of the l) s
5 681 M
(arger wordnet subgraph and the other is based on top core numbered vertices of the wordnet sub) s
5 670 M
(graph) s
5 659 M
(  - Sentiment thus is computed only for the core of the graph which is more relevant to the cr) s
5 648 M
(ux or class of the document and less pertinent) s
5 637 M
(vertices are ignored.) s
5 626 M
(  - the fraction score is multiplied by a heuristic factor to circumvent floating points) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(------------) s
5 582 M
(184. Commits as on 23 November 2015) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(------------) s
5 549 M
(- Updated SentimentAnalyzer.py and SocialNetworkAnalysis_Twitter.py scripts with core number a) s
5 538 M
(nd k-core DFS belief potential propagation) s
5 527 M
(similar to SocialNetworkAnalysis_WebSpider.py.) s
5 516 M
(- logs and screenshots for twitter followers graph and tweet RGO graph Sentiment Analysis have) s
5 505 M
( been added.) s
5 494 M
(- Example tweet is correctly automatically classified into "Education" class based on top core) s
5 483 M
( number of the vertices and top PageRank. Again this is an intriguing instance where Top core ) s
5 472 M
(numbered vertices coincide with Top PageRank vertices which is probably self-evident from the ) s
5 461 M
(fact that PageRank is a Markov Model Converging Random Walk and PageRank matrix multiplication) s
5 450 M
( is influenced by high weightage vertices \(with lot of incoming links\)) s
5 439 M
(Sentiment Analysis of the tweet:) s
5 428 M
(- K-Core DFS belief_propagated_posscore: 244.140625) s
5 417 M
(  K-Core DFS belief_propagated_negscore: 1.0) s
5 406 M
(- Core Number belief_propagated_posscore: 419095.158577) s
5 395 M
(  Core Number belief_propagated_negscore: 22888.1835938) s
5 384 M
(- Above Sentiment Analysis rates the tweet with positive tonality.) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(------------) s
5 340 M
(185. Commits as on 25 November 2015) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(------------) s
5 307 M
(- New WordNetPath.py file has been added to compute the path in a WordNet graph between two wo) s
5 296 M
(rds) s
5 285 M
(- WordNetSearchAndVisualizer.py text generation code has been updated for importing and invoki) s
5 274 M
(ng path_between\(\) function in WordNetPath.py) s
5 263 M
(by which set of sentences are created from the RGO WordNet subgraph. This path is obtained fro) s
5 252 M
(m common hypernyms for two word vertices for each of the edges in RGO WordNet subgraph. RGO gr) s
5 241 M
(aph is a WordNet+ graph as it adds a new relation "is in definition of" to the existing WordNe) s
5 230 M
(t) s
5 219 M
(that enhances WordNet relations. Each edge in RGO graph is made a hyperedge due to this hypern) s
5 208 M
(ym path finding.) s
5 197 M
(- logs and screenshots have been added for above) s
5 175 M
(The text generated for the hypernym paths in WordNet subgraph in testlogs/ is quite primitive ) s
5 164 M
(and sentences are connected with " is related to " phrase. More natural-looking sentences can ) s
5 153 M
(be created with randomly chosen phrase connectives and random sentence lengths.) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(------------) s
5 109 M
(186. Commits as on 4 December 2015) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(------------) s
5 76 M
(All the Streaming_<>.py Streaming Algorithm implementations have been updated with:) s
5 65 M
(- hashlib ripemd160 hash MD algorithm for hash functions and return hexdigest\(\)) s
5 54 M
(- USBWWAN byte stream data from USBmd print_buffer\(\) logs has been added as a Data Storage and) s
5 43 M
( Data Source) s
5 32 M
(- logs for the above have been added to testlogs/) s
5 21 M
(- Streaming Abstract Generator has been updated with USB stream data iterable and parametrized) s
5 10 M
( for data source and storage) s
_R
S
%%Page: (104) 104
%%BeginPageSetup
_S
18 36 translate
/pagenum 104 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (104) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- Some corrections to the scripts) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(------------) s
5 648 M
(187. Commits as on 7 December 2015) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(------------) s
5 615 M
(- USB stream file storage name updated in Streaming_AbstractGenerator) s
5 604 M
(- Corrections to CountMinSketch - hashing updated to include rows \(now the element frquencies ) s
5 593 M
(are estimated almost exactly\)) s
5 582 M
(- logs for above updated to CountMinSketch) s
5 571 M
(Added Cardinality estimation with LogLog and HyperLogLog counters for USB stream datasets) s
5 560 M
(- HyperLogLog estimation: ~110 elements) s
5 549 M
(- LogLog estimation: ~140 elements) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(------------) s
5 505 M
(188. Commits as on 8 December 2015) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(------------) s
5 472 M
(- Updated the Streaming LogLogCounter and HyperLogLogCounter scripts to accept StreamData.txt ) s
5 461 M
(dataset from Abstract Generator and added a) s
5 450 M
(Spark MapReducer script for Streaming Data sets for comparison of exact data with Streaming_<a) s
5 439 M
(lgorithm>.py estimations.) s
5 428 M
(- Added logs for the Counters and Spark MapReducer script on the StreamData.txt) s
5 417 M
(- LogLog estimation: ~133) s
5 406 M
(- HyperLogLog estimation: ~106) s
5 395 M
(- Exact cardinality: 104) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(------------) s
5 351 M
(189. \(FEATURE - DONE\) Commits as on 9 December 2015) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(------------) s
5 318 M
(- New python implementation for CountMeanMinSketch Streaming Data Frequency Estimation has bee) s
5 307 M
(n added which is an improved version of) s
5 296 M
(CountMinSketch that computes median of average of estimator rows in sketch) s
5 285 M
(- Corrections to CountMinSketch hashing algorithms and Sketch width-depth as per the error bou) s
5 274 M
(nds has been made) s
5 263 M
(- Spark MapReducer prints the number of elements in the stream data set) s
5 252 M
(- Logs for the above have been added to testlogs) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(-------------) s
5 208 M
(190. \(FEATURE - DONE\) Commits as on 11 December 2015) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(-------------) s
5 175 M
(Dependency Injection code commits for MongoDB backend - With this MongoDB is also a storage ba) s
5 164 M
(ckend for AsFer algorithms similar to MySQL:) s
5 153 M
(- Abstract_DBBackend.py has been updated for both MySQL and MongoDB injections) s
5 142 M
(- MongoDB configuration and backend connect/query code has been added. Backend is either popul) s
5 131 M
(ated by Robomongo or pymongo reading from the) s
5 120 M
(Streaming Abstract Generator iterable framework.) s
5 109 M
(- With this AsFer supports both SQL\(MySQL\) and NoSQL\(file,hive,hbase,cassandra backends in Str) s
5 98 M
(eaming Abstract Generator\).) s
5 87 M
(- log with a simple NoSQL table with StreamingData.txt and USBWWAN data has been added to test) s
5 76 M
(logs/.) s
5 65 M
(- MongoDB configuration has a database\(asfer-database\) and a collection\(asfer-collection\).) s
5 54 M
(- MongoDB_DBBackend @provides pymongo.collection.Collection which is @inject-ed to Abstract_DB) s
5 43 M
(Backend) s
5 32 M
(- Abstract_DBBackend changes have been reflected in Scrapy Web Spider - backend added as argum) s
5 21 M
(ent in execute_query\(\)) s
5 10 M
(- Abstract_DBBackend.py has a subtle problem:) s
_R
S
%%Page: (105) 105
%%BeginPageSetup
_S
18 36 translate
/pagenum 105 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (105) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        - Multiple @inject\(s\) are not supported in Python Injector) s
5 681 M
(        - only the innermost @inject works and outer @inject throws a __init__ argument errors) s
5 670 M
( in webspider/) s
5 659 M
(        - Conditional @inject depending on backend is required but at present switching the or) s
5 648 M
(der of @inject\(s\) circumvents this) s
5 637 M
(- most recent scrapy crawl logs for this have been added to webspider/testlogs) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(-------------) s
5 593 M
(191. \(THEORY\) An update and additions to runtime analysis of Recursive Gloss Overlap Algorithm) s
5 582 M
( in TAC 2010) s
5 571 M
(\(http://www.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf\)) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(-------------) s
5 538 M
(Analysis of runtime in the link above is too cryptic. An updated analysis of steps are given h) s
5 527 M
(ere:) s
5 516 M
(- Nodes at topmost level are keywords in document. For each subsequent recursion step followin) s
5 505 M
(g analysis is per keyword.) s
5 494 M
(- Nodes at level i-1 are computed \(base case\) : x^\(i-1\) where x is average size of gloss defin) s
5 483 M
(ition) s
5 472 M
(- Naive pairwise comparison of overlap is done at level i-1 which makes it x^2\(i-1\)) s
5 461 M
(- Tree isomorphism algorithms can be optionally applied to reduce number of nodes getting reco) s
5 450 M
(mputed. There are) s
5 439 M
(polytime algorithms for subtree isomorphisms \(www.cs.bgu.ac.il/~dekelts/publications/subtree.p) s
5 428 M
(df\)) s
5 417 M
(- Nodes at level i-1 are reduced by Overlap\(i-1\) : x^\(i-1\) - Overlap\(i-1\)) s
5 406 M
(- Maximum number Nodes at level i - are from gloss expansion of those at i-1 : \(x^\(i-1\) - Over) s
5 395 M
(lap\(i-1\)\)*x) s
5 384 M
(- Thus total time at level i is: Time_for_pairwise_comparison_to_find_gloss_verlap + Time_for_) s
5 373 M
(removing_isomorphic_nodes) s
5 362 M
(T\(i\) = sigma\([x^\(i-1\) - Overlap\(i-1\)]^2 + subtree_isomorphism\(i\)\)\)) s
5 351 M
(- Above is naively upperbounded to O\(x^\(2d\)\) [as subtree isomorphism is polynomial in supertre) s
5 340 M
(e and subtree vertices and is only an optimization step that can be ignored]. For W keywords i) s
5 329 M
(n the document time bound is O\(W*x^\(2d\)\).) s
5 318 M
(- If number of vertices in RGO multipartite graph \(ignoring isomorphism\) constructed above is ) s
5 307 M
(V=O\(x^\(d\)\), runtime is O\(W*V^2\)  which is) s
5 296 M
(far less than O\(E*V^2\) mentioned in TAC 2010 link because number of keywords in toplevel are l) s
5 285 M
(ess than number of edges created during recursion which depend on x and exponentially on d. Fo) s
5 274 M
(r example after first recursion completion, number of edges are W*x.) s
5 263 M
(- On a related note runtime for intrinsic merit ranking of the RGO wordnet subgraph can not be) s
5 252 M
( equated per-se to ranking from prestige-based search engines as RGO is objective graph-theore) s
5 241 M
(tic ranking \(does not require massive bot-crawling, indexing and link graph construction\) and ) s
5 230 M
(PageRank is subjective prestige based ranking\(depends on crawling, indexing and time needed fo) s
5 219 M
(r link graph construction\). Standard publicly available PageRank iteratively computes random w) s
5 208 M
(alk matrix multiplication for link graphs for billions of nodes on WWW and this runtime has to) s
5 197 M
( be apportioned per-node. Time and Space for crawling and indexing have also to be accounted f) s
5 186 M
(or per-node. Naive bound for PageRank per node is O\(time_for_iterative_matrix_multiplication_t) s
5 175 M
(ill_convergence/number_of_nodes\). Matrix multiplication is O\(n^omega\) where omega~2.3. Thus pa) s
5 164 M
(gerank bound per node is O\(\(\(n^omega\)*iterations\)/n\) assuming serial PageRank computation. Par) s
5 153 M
(allel Distributed Versions of PageRank depend on network size and scalable.) s
5 142 M
(- Parallel Recursive Gloss Overlap graph construction on a cloud could reduce the runtime to O) s
5 131 M
(\(W*V^2/c\) where c is size of the cloud.) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(-----------------) s
5 87 M
(192. \(FEATURE - DONE\) Commits as on 14 December 2015) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(-----------------) s
5 54 M
(- New Interview Algorithm script with NetworkX+Matplotlib rendering and takes as input a rando) s
5 43 M
(mly crawled HTML webpage\(uses beautiful soup to) s
5 32 M
(rip off script and style tags and write only text in the HTML page\) has been added) s
5 21 M
(- Above script also computes the graph theoretic connectivity of the RGO wordnet subgraph base) s
5 10 M
(d on Menger's theorem - prints number of nodes) s
_R
S
%%Page: (106) 106
%%BeginPageSetup
_S
18 36 translate
/pagenum 106 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (106) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(required to disconnect the graph or equivalently number of node indpendent paths) s
5 681 M
(- logs and screenshots for the above have been added) s
5 670 M
(- WebSpider.py has been updated to crawl based on a crawling target parameter - Either a strea) s
5 659 M
(ming website\(twitter, streamed news etc.,\) or a) s
5 648 M
(HTML webpage) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(-------------------------------) s
5 604 M
(193. \(FEATURE - DONE\) RGO graph complexity measures for intrinsic merit of a text document - C) s
5 593 M
(ommits as on 15 December 2015) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(-------------------------------) s
5 560 M
(- Interview Algorithm Crawl-Visual script has been updated with a DOT graph file writing which) s
5 549 M
( creates a .dot file for the RGO graph constructed) s
5 538 M
(- Also variety of connectivity and graph complexity measures have been added) s
5 527 M
(- Importantly a new Tree Width computing script has been added. NetworkX does not have API for) s
5 516 M
( tree width, hence a naive script that iterates) s
5 505 M
(through all subgraphs and finds intersecting subgraphs to connect them and form a junction tre) s
5 494 M
(e, has been written. This is a costly measure compared to intrinsic merit which depends only o) s
5 483 M
(n graph edges,vertices and depth of recursive gloss overlap. Tree decomposition of graph is NP) s
5 472 M
(-hard.) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(----------------) s
5 428 M
(194. Commits as on 16 December 2015) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(----------------) s
5 395 M
(- TreeWidth implementation has been corrected to take as input set of edges of the RGO graph) s
5 384 M
(- TreeWidth for set of subgraphs less than an input parameter size is computed as TreeWidth co) s
5 373 M
(mputation is exponential in graph size) s
5 362 M
(and there are MemoryErrors in python for huge set of all subgraphs. For example even a small g) s
5 351 M
(raph with 10 nodes gives rise to 1024) s
5 340 M
(possible subgraphs) s
5 329 M
(- Spidered text has been updated to create a small RGO graph) s
5 318 M
(- Logs and screenshots have been added) s
5 307 M
(- Each subgraph is hashed to create a unique string for each subgraph) s
5 296 M
(- TreeWidth is printed by finding maximum set in junction tree) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(---------------) s
5 252 M
(195. \(THEORY\) WordNet, Evocation, Neural networks, Recursive Gloss Overlap and Circuit Complex) s
5 241 M
(ity) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(---------------) s
5 208 M
(WordNet and Evocation WordNet are machine learning models based on findings from psychological) s
5 197 M
( experiments. Are WordNet and Neural networks) s
5 186 M
(related? Evocation WordNet which is network of words based on how evocative a word is of anoth) s
5 175 M
(er word readily translates to a neural network.) s
5 164 M
(This is because a machine learning abstraction of neuron - perceptron - takes weights, inputs ) s
5 153 M
(and biases and if the linear program of these breach a threshold, output is activated. Evocati) s
5 142 M
(ve WordNet can be formulated as a neuron with input word as one end of an edge and the output ) s
5 131 M
(word as the other end - a word evokes another word. Each edge of an Evocation WordNet or even ) s
5 120 M
(a WordNet is a single input neuron and WordNet is one giant multilayered perceptron neural net) s
5 109 M
(work. Since Threshold circuits or TC circuit complexity class are theoretical equivalents of a) s
5 98 M
( machine learning neuron model \(threshold gate outputs 1 if more than k of inputs are 1 and th) s
5 87 M
(us an activation function of a neuron\), WordNet is hence a gigantic non-uniform TC circuit of ) s
5 76 M
(Threshold gates. Further TCk is in NC\(k+1\). This implies that all problems depending on WordNe) s
5 65 M
(t are inherently parallelizable in theory and Recursive Gloss Overlap algorithm that depends o) s
5 54 M
(n WordNet subgraph construction in http://www.nist.gov/tac/publications/2010/participant.paper) s
5 43 M
(s/CMI_IIT.proceedings.pdf and updates to it in \(191\) above are non-uniformly parallelizable.) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(--------------) s
_R
S
%%Page: (107) 107
%%BeginPageSetup
_S
18 36 translate
/pagenum 107 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (107) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(196. \(FEATURE - DONE\) Mined Rule Search in Astronomical Data - Commits as on 17 December 2015) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(--------------) s
5 659 M
(- New Mined Class Association Rule Search script has been added. This script searches the astr) s
5 648 M
(onomical data with parsed Maitreya Text client) s
5 637 M
(data with date, time and longitude-latitude queries.) s
5 626 M
(- Where this is useful is after mining the astronomical data with SequenceMining, there is a n) s
5 615 M
(ecessity to search when a particular mined rule occurs. This is an experimental, non-conventio) s
5 604 M
(nal automated weather prediction \(but not necessarily unscientific as it requires expertise be) s
5 593 M
(yond computer science to establish veracity\).) s
5 582 M
(- Logs for this has been added in testlogs/ and chartsummary.rulesearch) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(---------) s
5 538 M
(197. Commits as on 18 December 2015) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(---------) s
5 505 M
(- Interview Algorithm crawl-visual script changed for treewidth invocation) s
5 494 M
(- Spidered text changed) s
5 483 M
(- Rule Search script corrected to use datetime objects) s
5 472 M
(- Rule Search script corrected to use timedelta for incrementing date and time) s
5 461 M
(- logs and screenshots for above) s
5 450 M
(- Junction Tree for RGO graph - logs and screenshots) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(---------) s
5 406 M
(198. \(THEORY\) Star Complexity of Graphs - Complement Function circuit and Unsupervised Classif) s
5 395 M
(ication with RGO graph) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(---------) s
5 362 M
(Star complexity of a graph defined in [Stasys Jukna] - http://www.thi.informatik.uni-frankfurt) s
5 351 M
(.de/~jukna/ftp/graph-compl.pdf) s
5 340 M
( is the minimum number of union and intersection operations of star subgraphs required to crea) s
5 329 M
(te the larger graph which is strikingly relevant to the necessity of quantitative intrinsic me) s
5 318 M
(rit computation in Recursive Gloss Overlap algorithm [http://www.nist.gov/tac/publications/201) s
5 307 M
(0/participant.papers/CMI_IIT.proceedings.pdf]. Each star subgraph of the definition graph is a) s
5 296 M
(n unsupervised automatically found class a text belongs to. Apart from this star complexity of) s
5 285 M
( a boolean circuit graph for Complement Function http://arxiv.org/pdf/1106.4102v1.pdf and in p) s
5 274 M
(articular for Prime complement special case should have direct relationship conjecturally to p) s
5 263 M
(attern in primes because boolean formula for the graph depends on prime bits.) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(-----------) s
5 219 M
(199. \(FEATURE - DONE\) Tornado Webserver, REST API and GUI for NeuronRain - Commits as on 22 De) s
5 208 M
(cember 2015) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(-----------) s
5 175 M
(Commits for NeuronRain WebServer-RESTfulAPI-GUI based on tornado in python-src/webserver_rest_) s
5 164 M
(ui/:) s
5 153 M
(- NeuronRain entrypoint based on tornado that reads a template and implements GET and POST met) s
5 142 M
(hods) s
5 131 M
(- templates/ contains renderable html templates) s
5 120 M
(- testlogs/ has neuronrain GUI logs) s
5 109 M
(- RESTful API entrypoint <host:33333>/neuronrain) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(-----------) s
5 65 M
(200. \(FEATURE - DONE\) NeuronRain as SaaS and PaaS - for commits above in \(199\)) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(-----------) s
5 32 M
(RESTful and python tornado based Graphical User Interface entrypoint that reads from various h) s
5 21 M
(tml templates and passes on) s
5 10 M
(incoming concurrent requests to NeuronRain subsystems - AsFer, VIRGO, KingCobra, USBmd and Aca) s
_R
S
%%Page: (108) 108
%%BeginPageSetup
_S
18 36 translate
/pagenum 108 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (108) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(dpdrafts - has bee added. Presently implements) s
5 681 M
(simplest possible POST form without too much rendering \(might require flask, twisted, jinja2 e) s
5 670 M
(tc.,\) for AsFer algorithms execution.) s
5 659 M
(This exposes a RESTful API for commandline clients like cURL. For example a cURL POST is done ) s
5 648 M
(to NeuronRain as:) s
5 637 M
(cURL POST: curl -H "Content-Type: text/plain" -X POST -d '{"component":"AsFer","script":"<scri) s
5 626 M
(pt_name>","arguments":"<args>"}' http://localhost:33333/neuronrain where REST url is <host:por) s
5 615 M
(t>/neuronrain.  Otherwise REST clients such as Advanced RESTful Client browser app can be used) s
5 604 M
(.) s
5 593 M
(With this NeuronRain is Software-As-A-Service \(SaaS\) Platform deployable on VIRGO linux kernel) s
5 582 M
( cloud, cloud OSes and containers like Docker.) s
5 571 M
(More so, it is Platform-As-A-Service \(PaaS\) when run on a VIRGO cloud.) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(--------------------------------------) s
5 527 M
(201. \(FEATURE - DONE\) Apache Spark MapReduce Parallel Computation of Interview Algorithm Recur) s
5 516 M
(sive Gloss Overlap Graph Construction) s
5 505 M
( - Commits as on 24 December 2015) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(--------------------------------------) s
5 472 M
(- 2 python files for Spark MapReduce of Recursive Gloss Overlap graph construction has been ad) s
5 461 M
(ded to repository) s
5 450 M
(- These two implement Interview Algorithm Recursive Gloss Overlap graph construction and Map-R) s
5 439 M
(educe functions that parallellize) s
5 428 M
(each recursion step computing the gloss tokens from previous recursion level. This is the most) s
5 417 M
( important part of the algorithm which) s
5 406 M
(consumes lot of time in serial version along with overlap computation. Apache Spark has been r) s
5 395 M
(ecently gaining importance over its plain Hadoop counterpart and is many times faster than Had) s
5 384 M
(oop in benchmarks.) s
5 373 M
(- In this implementation, Resilient Distributed Dataset is the set of tokens in each recursion) s
5 362 M
( level and is parallelly computable in a) s
5 351 M
(huge Spark cluster.) s
5 340 M
(- For example if Spark cluster has 10000 nodes, and each level of recursion produces X number ) s
5 329 M
(of gloss tokens for graph vertices, time) s
5 318 M
(complexity in Spark is O\(X/10000\) where as serial version is O\(X\) with negligible network over) s
5 307 M
(head. Spark has in-memory datasets which) s
5 296 M
(minimizes network latency because of disk access.) s
5 285 M
(- There were lot of implementation issues to make the parallellism. Map and Reduce functions u) s
5 274 M
(se namedtuples to return data. With more than one) s
5 263 M
(field in namedtuple, there are internal pickling issues in Py4J - Python4Java which PySpark in) s
5 252 M
(ternally invokes to get streamed socket bytes from) s
5 241 M
(Java side of the object wrapped as an iterable. This prevents returning multiple values - for ) s
5 230 M
(example Synsets - in Map-Reduce functions.) s
5 219 M
(- So only tokens at a level are map-reduced and returned while the prevlevelsynsets \(required ) s
5 208 M
(for adding edges across vertices\) are "pickled") s
5 197 M
(with a properietary asfer_pickle_load\(\) and asfer_pickle_dump\(\) functions that circumvents the) s
5 186 M
( python and java vagaries in pickling.) s
5 175 M
(- With proprietary pickling and Map-Reduce functions, Recursive Gloss Overlap graph has been c) s
5 164 M
(onstructed in parallel. Screenshots for this has been added in testlogs.) s
5 153 M
(- Proprietary pickling is done to a text file which is also added to repository. This file is ) s
5 142 M
(truncated at the end of each recursion.) s
5 131 M
(- Subtlety here is that maximum number of tokens at a recursion level t = number_of_tokens_at_) s
5 120 M
(level_\(t-1\) * maximum_size_of_gloss_per_word\(s\)) s
5 109 M
(which grows as series = number_of_words*\(1 + s + s^2 + s^3 + ... + s^t_max\). Size of a documen) s
5 98 M
(t - number of words - can be upperbounded by a constant \(d\) due to finiteness of average text ) s
5 87 M
(documents in realworld ignoring special cases of huge webpages with PDF/other.) s
5 76 M
(- If size of the Spark cluster is O\(f\(d\)*s^t_max\), each recursion step is of time O\(d*s^t_max/) s
5 65 M
(f\(d\)*s^t_max\)=O\(d/f\(d\)\) and total time for all levels is O\(d*t_max/f\(d\)\) which is ranking time) s
5 54 M
( per text document. This bound neglects optimization from overlaps and isomorphic nodes remova) s
5 43 M
(l and is worst case upperbound. For ranking n documents this time bound becomes O\(n*d*t_max/f\() s
5 32 M
(d\)\). For constant t_max this bound is O\(n*d/f\(d\)\) - and thus linearly scalable.) s
5 21 M
(- Maximum size of gloss per word \(s\) is also an upper-boundable constant. With constant d and ) s
5 10 M
(t_max , size of cluster O\(f\(d\)*s^t_max\) is constant too independent of number of documents.) s
_R
S
%%Page: (109) 109
%%BeginPageSetup
_S
18 36 translate
/pagenum 109 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (109) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- Example: For set of 1000 word documents with f\(d\)=log\(d\), max gloss size 5 and recursion dep) s
5 681 M
(th 2, size of cluster is O\(log\(1000\)*25\)~250 nodes with runtime for ranking n documents = O\(n*) s
5 670 M
(1000*t_max/log\(1000\)=O\(n*100*t_max\) which is O\(n\) for constant t_max.) s
5 659 M
(- Above is just an estimate of approximate speedup achievable in Spark cluster. Ideally runtim) s
5 648 M
(e in Spark cloud should be on the lines of analysis in \(191\) - O\(n*d*s^2\(t_max\)/f\(d\)*s^t_max\) ) s
5 637 M
(= O\(n*d*s^t_max/f\(d\)\).) s
5 626 M
(- Thus runtime upperbound in worst case is O\(n*d*s^t_max/f\(d\)\) for cluster size O\(f\(d\)*s^t_max) s
5 615 M
(\).) s
5 604 M
(- If cluster autoscales based on number of documents also, size is a function of n and hence p) s
5 593 M
(revious size bound is changed to O\(g\(n\)*f\(d\)*s^t_max\) and corresponding time bound = O\(n*d*s^2) s
5 582 M
(\(t_max\)/\(f\(d\)*s^t_max*g\(n\)\)\) = O\(n*d*s^t_max/\(f\(d\)*g\(n\)\)\)) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(------------------) s
5 538 M
(202. \(THEORY\) Recursive Gloss Overlap, Cognitive and PsychoLinguistics and Language Comprehens) s
5 527 M
(ion) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(------------------) s
5 494 M
(Recursive Gloss Overlap algorithm constructs a graph from text documents. Presently WordNet is) s
5 483 M
( probably the only solution available to) s
5 472 M
(get relations across words in a document. But the algorithm does not assume WordNet alone. Any) s
5 461 M
( future available algorithms to create relational graphs from texts should be able to take the) s
5 450 M
( place of WordNet. Evocation WordNet \(http://wordnet.cs.princeton.edu/downloads/evocation.zip\)) s
5 439 M
( is better than WordNet as it closely resembles a neural network model of a word evocative of ) s
5 428 M
(the other word and has stronger psychological motivation. There have been efforts to combine F) s
5 417 M
(rameNet, VerbNet and WordNet into one graph. Merit of a document is independent of grammar and) s
5 406 M
( language in which it is written. For example a text in English and French with grammatical er) s
5 395 M
(rors delving on the same subject are equivalently treated by this algorithm as language is jus) s
5 384 M
(t a pointer to latent information buried in a document. Process of Language Comprehension is a) s
5 373 M
( field of study in Cognitive and Psychological Linguistics. Problem with prestige based subjec) s
5 362 M
(tive rankings is that same document might get varied reviews from multiple sources and consens) s
5 351 M
(us with majority voting is required. This is somewhat contrary to commonsense because it assum) s
5 340 M
(es majority decision is correct 100% \(this is exactly the problem analyzed by P\(Good\) binomial) s
5 329 M
( summation and majority voting circuits elsewhere in this document\). In complexity parlance pr) s
5 318 M
(estige rankings are in BP* classes. Objective rankings are also in BP* classes because of depe) s
5 307 M
(ndency on the framework like WordNet to extract relationships without errors, but less costlie) s
5 296 M
(r than prestige rankings - major cost saving being lack of dependence on WWW link graph crawli) s
5 285 M
(ng to rank a document.) s
5 263 M
(Intuition for Recursive Gloss Overlap for weighing natural language texts is from computationa) s
5 252 M
(l linguistics, Eye-Movement tracking and Circuit of the Mind [Leslie Valiant]. Human process o) s
5 241 M
(f comprehending language, recursion as an inherent trait of human faculty and evolution of lan) s
5 230 M
(guage from primates to human is described in http://www.sciencemag.org/content/298/5598/1569, ) s
5 219 M
(www.ncbi.nlm.nih.gov/pubmed/12446899 and http://ling.umd.edu/~colin/courses/honr218l_2007/honr) s
5 208 M
(218l_presentation7.ppt by [Hauser, NoamChomsky and Fitch] with an example part-of-speech recur) s
5 197 M
(sive tree of a sentence. For example, a human reader's eye usually scans each sentence in a te) s
5 186 M
(xt document word by word left-to-right, concatenating the meanings of the words read so far. U) s
5 175 M
(sually such a reader assumes grammatical correctness \(any grammatical anamoly raises his eyebr) s
5 164 M
(ows\) and only accrues the keyword meanings and tries to connect them through a meaningful path) s
5 153 M
( between words by thinking deep into meaning of each word. This is exactly simulated in Recurs) s
5 142 M
(ive Gloss Overlap graph where gloss overlaps connect the words recursively. Fast readers have ) s
5 131 M
(reasonably high eye-movement, sometimes randomly. The varied degree of this ability to form an) s
5 120 M
( accurate connected visualization of a text probably differentiates people's intellectual wher) s
5 109 M
(ewithal to draw inferences. From theory of computation perspective, recursive gloss overlap co) s
5 98 M
(nstructs a disambiguated Context Sensitive graph from Natural language text a superset of cont) s
5 87 M
(ext free grammars. But natural languages are suspected to be subset of larger classes of conte) s
5 76 M
(xt sensitive languages accepted by Linear Bounded Automata. Thus reverse engineering a text fr) s
5 65 M
(om the recursive gloss overlap graph may yield a language larger than natural languages. Infor) s
5 54 M
(mation loss due to text-to-graph translation should only be grammatical ideally \(e.g Parts of ) s
5 43 M
(Speech, connectives etc.,\) because for comparing two documents for information quality, gramma) s
5 32 M
(r shouldn't be a factor unless there are fringe cases where missing grammar might change the m) s
5 21 M
(eaning of a document. Corrections for pre-existing grammatical errors are not responsibilities) s
5 10 M
( of this algorithm. This fringe case should be already taken care of by preprocessing ingestio) s
_R
S
%%Page: (110) 110
%%BeginPageSetup
_S
18 36 translate
/pagenum 110 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (110) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(n phase that proof-reads the document for primitive grammatical correctness though not extensi) s
5 681 M
(ve and part-of-speech. Recursive Gloss Overlap graph constructed with Semantic Net frameworks ) s
5 670 M
(like WordNet, Evocation WordNet, VerbNet, FrameNet, ConceptNet, SentiWordNet etc., can be fort) s
5 659 M
(ified by mingling Part-of-Speech trees for sentences in a document with already constructed gr) s
5 648 M
(aph. This adds grammar information to the text graph.) s
5 626 M
(Psycholinguistics have the notion of event related potentials - when brain reacts excessively ) s
5 615 M
(to anamolous words in neural impulses. Ideal intrinsic merit rankings should also account for ) s
5 604 M
(such ERP data to distinguish unusual sentences, but datasets for ERPs are not widely accessibl) s
5 593 M
(e except SentiWordNet. Hence Recursive Gloss Overlap is the closest possible for comparative s) s
5 582 M
(tudy of multiple documents that ignores parts-of-speech, subjective assessments and focuses on) s
5 571 M
(ly on intrinsic information content and relatedness.) s
5 549 M
(A thought experiment of intrinsic merit versus prestige ranking:) s
5 538 M
(Performance of an academic personality is measured first by accolades,awards,grades etc., whic) s
5 527 M
(h form the societal opinion - prestige \(citations\). That is prestige is created from intrinsic) s
5 516 M
( merit. But measuring merit from prestige is anachronistic because merit precedes prestige. Id) s
5 505 M
(eally prestige and intrinsic merit should coincide when the algorithms are equally error-free.) s
5 494 M
( In case of error, prestige and merit are two intersecting worlds where documents without meri) s
5 483 M
(t might have prestige and vice-versa. Size of the set-difference is measure of error.) s
5 450 M
(References:) s
5 439 M
(-----------) s
5 428 M
(202.1 Circuits of the Mind - [Leslie Valiant] - http://dl.acm.org/citation.cfm?id=199266) s
5 417 M
(202.2 Mind Grows Circuits - Lambda calculus and circuit modelling of mind - [Rina Panigrahy, L) s
5 406 M
(i Zhang] - http://arxiv.org/pdf/1203.0088v2.pdf) s
5 395 M
(202.3 Psycholinguistics Electrified - EEG and SQUID Event Related Electric Potentials \(ERP\) pe) s
5 384 M
(aking for anamolous words - N400 experiment - http://kutaslab.ucsd.edu/people/kutas/pdfs/1994.) s
5 373 M
(HP.83.pdf) s
5 362 M
(202.4 Word Associations and Evocations - http://hci.cse.ust.hk/projects/evocation/index.html) s
5 351 M
(202.5 Combining WordNet, VerbNet, FrameNet - http://web.eecs.umich.edu/~mihalcea/papers/shi.ci) s
5 340 M
(cling05.pdf) s
5 329 M
(202.6 Computational Psycholinguistics - PoS Parsers - http://www.coli.uni-saarland.de/~crocker) s
5 318 M
(/courses/comp_psych/comp_psych.html) s
5 307 M
(202.7 Brain Data for Psycholinguistics - http://personality.altervista.org/docs/14yg-al_brains) s
5 296 M
(ent@jlcl.pdf) s
5 285 M
(202.8 ConceptNet 5 - http://conceptnet5.media.mit.edu/) s
5 274 M
(202.9 Sanskrit WordNet - http://www.cfilt.iitb.ac.in/wordnet/webswn/) s
5 263 M
(202.10 IndoWordNet - http://www.cfilt.iitb.ac.in/indowordnet/index.jsp) s
5 252 M
(202.11 Brain Connectivity and Multiclass Hopfield Network - Associative memory - http://www.um) s
5 241 M
(iacs.umd.edu/~joseph/Wangetal_Neuroinformatics2015.pdf) s
5 230 M
(202.12 Text Readability Measures, Coherence, Cohesion - http://www.readability.biz/Coherence.h) s
5 219 M
(tml) s
5 208 M
(202.13 MultiWordNet for European Languages - http://multiwordnet.fbk.eu/english/home.php) s
5 197 M
(202.14 Coherence and Text readability indices \(Coh-Metrix, FleschKincaid, Brain Overload etc.,) s
5 186 M
(\) - http://lingured.info/clw2010/downloads/clw2010-talk_09.pdf - Coherence measures how connec) s
5 175 M
(ted the document is and thus closely related to Intrinsic Merit obtained by WordNet subgraph f) s
5 164 M
(or a text.) s
5 153 M
(202.15 Readability and WordNet - http://www.aclweb.org/anthology/O08-1) s
5 142 M
(202.16. Semantic Networks \(Frames, Slots and Facets\) and WordNet - http://onlinelibrary.wiley.) s
5 131 M
(com/doi/10.1207/s15516709cog2901_3/epdf - describes various graph connectivity measures viz., ) s
5 120 M
(Clustering coefficient for the probability that neighbours of a node are neighbours themselves) s
5 109 M
( , Power-Law distribution of degree of a random node. WordNet is modern knowledge representati) s
5 98 M
(on framework inspired by Semantic Networks which is a graph of Frames with Slots and Facets fo) s
5 87 M
(r edges amongst Frames.) s
5 76 M
(202.17 Text Network Analysis - Extracting a graph relation from natural language text - http:/) s
5 65 M
(/noduslabs.com/publications/Pathways-Meaning-Text-Network-Analysis.pdf \(2011\) - Parses keyword) s
5 54 M
(s from texts and connects the keyword nodes by relation edges with weights - an alternative to) s
5 43 M
( WordNet where connections are based on co-occurrence/proximities of words within a certain wi) s
5 32 M
(ndow. Two words are connected conceptually if they co-occur \(similar to Latent Semantic Indexi) s
5 21 M
(ng by SVD\).) s
5 10 M
(202.18 Text Network Analysis - Networks from Texts - http://vlado.fmf.uni-lj.si/pub/networks/d) s
_R
S
%%Page: (111) 111
%%BeginPageSetup
_S
18 36 translate
/pagenum 111 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (111) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(oc/seminar/lisbon01.pdf) s
5 681 M
(202.19 Six Degrees - Science in Connected Age - [Duncan J.Watts] - Pages 141-143 - Groundbreak) s
5 670 M
(ing result by [Jon Kleinberg] - https://www.kth.se/social/files/5533a99bf2765470d3d8227d/klein) s
5 659 M
(berg-smallworld.pdf which studies Milgram's Small World Phenomenon by probability of finding p) s
5 648 M
(aths between two nodes on a lattice of nodes: Probability of an edge between 2 nodes is invers) s
5 637 M
(ely proportional to the clustering coefficient \(r\). The delivery time \(or\) path between 2 node) s
5 626 M
(s is optimum when r=2 and has an inverted bell-curve approximately. When r is less than 2 and ) s
5 615 M
(greater than 2 delivery time is high i.e finding the path between two nodes is difficult. In t) s
5 604 M
(he context of judging merit by definition graph of a document, document is "meaningful" if it ) s
5 593 M
(is "relatively easier" to find a path between two nodes\(Resnik,Jiang-Conrath concept similarit) s
5 582 M
(y and distance measures\). This assumes the definition graph is modelled as a random graph. Pre) s
5 571 M
(sent RGO definition graph algorithm does not create a random, weighted graph - this requires p) s
5 560 M
(robabilistic weighted ontology. Statically, Kleinberg's result implies that document definitio) s
5 549 M
(n graphs with r=2 are more "meaningful, readable and visualizable" and can be easily understoo) s
5 538 M
(d where r is proportional to word-word edge distance measures \(Resnik,Jiang-Conrath\).) s
5 527 M
(202.20 Align,Disambiguate,Walk distance measures - http://wwwusers.di.uniroma1.it/~navigli/pub) s
5 516 M
(s/ACL_2013_Pilehvar_Jurgens_Navigli.pdf) s
5 505 M
(202.21 Coh Metrix - Analysis of Text on Cohesion and Language - https://www.ncbi.nlm.nih.gov/p) s
5 494 M
(ubmed/15354684 - quantifies text for meaningfulness, relatedness and readability) s
5 483 M
(202.22 Homophily in Networks - [Duncan J.watts] - Pages 152-153 - https://arxiv.org/pdf/cond-m) s
5 472 M
(at/0205383.pdf - This result implies in a social network where each vertex is a tuple of more ) s
5 461 M
(than one dimension, and similarity between any two tuples s and j is defined as distance to an) s
5 450 M
( adjacent node j of s which is close to t, and any message from sender s reaches receiver t in) s
5 439 M
( minimum length of intermediaries - optimal when number of dimensions are 2 or 3 - Kleinberg c) s
5 428 M
(ondition is special case of this.) s
5 417 M
(202.23 Six Degrees - [Duncan J.Watts] - Triadic closure of Anatole Rapoport - Clustering Coeff) s
5 406 M
(icient - Page 58) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(----------------------) s
5 362 M
(203. Apache Spark MapReduce Parallel Computation of Interview Algorithm Recursive Gloss Overla) s
5 351 M
(p Graph Construction) s
5 340 M
(- Commits as on 25 December 2015) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(----------------------) s
5 307 M
(- Added more parallelism to python-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMeri) s
5 296 M
(t_Crawl_Visual_Spark.py. New map-reduce functions) s
5 285 M
(for computing parents \(backedges in the recursion\) have been added - mapFunction_Parents\(\), re) s
5 274 M
(duceFunction_Parents\(\), SparkMapReduce_Parents\(\)) s
5 263 M
(in python-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py) s
5 252 M
(- These functions take the previous level tokens as inputs instead if synsets) s
5 230 M
(--------------------------------------------------------------------------------------------) s
5 219 M
(204. Commits as on 28 December 2015) s
5 208 M
(--------------------------------------------------------------------------------------------) s
5 197 M
(- Updated MapReduce functions in Spark Recursive Gloss Overlap implementation) s
5 175 M
(--------------------------------------------------------------------------------------------) s
5 164 M
(205. Commits as on 29 December 2015) s
5 153 M
(--------------------------------------------------------------------------------------------) s
5 142 M
(- Updated python-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spa) s
5 131 M
(rk.py for choosing parallel spark mapreduce or) s
5 120 M
(serial parents backedges computation based on a boolean function.) s
5 109 M
(- This is because Recursive tokens mapreduce computation \(Spark_MapReduce\) is faster than seri) s
5 98 M
(al version.) s
5 87 M
(But serial parents computation is faster than parallel parents computation ironically\(Spark_Ma) s
5 76 M
(pReduce_Parents\).) s
5 65 M
(This happens on single node Spark cluster.  So, parents computation has been made configurable) s
5 54 M
(\(serial or parallel\)) s
5 43 M
(- Logs and Screenshots for various texts experimented have been added to testlogs/) s
5 32 M
(- python-src/InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py mapre) s
5 21 M
(duce uses best_matching_synset\(\) for) s
5 10 M
(disambiguation now which was commented earlier.) s
_R
S
%%Page: (112) 112
%%BeginPageSetup
_S
18 36 translate
/pagenum 112 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (112) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- MapFunction_Parents\(\) has a pickling problem in taking a tuple of synset objects as input ar) s
5 681 M
(g due to which synsets have to be recomputed that) s
5 670 M
( causes the slowdown mentioned above compared to serial parents\(\) version. MapFunction_Parents) s
5 659 M
(\(\) has been rewritten to take previous level gloss tokens in lieu of synsets to circumvent pic) s
5 648 M
(kling issues.) s
5 637 M
(- Slowdown could be resolved on a huge cluster.) s
5 626 M
(- Thus this is a mix of serial+parallel implementation.) s
5 615 M
(- Logs,DOT file and Screenshots for mapreduced parents\(\) computation) s
5 593 M
(---------------------------------------------------------------------------------------------) s
5 582 M
(206. Commits as on 30 December 2015) s
5 571 M
(---------------------------------------------------------------------------------------------) s
5 560 M
(Some optimizations and redundant code elimination in python-src/InterviewAlgorithm/InterviewAl) s
5 549 M
(gorithmWithIntrinisicMerit_Crawl_Visual_Spark.py) s
5 527 M
(---------------------------------------------------------------------------------------------) s
5 516 M
(207. Commits as on 31 December 2015) s
5 505 M
(---------------------------------------------------------------------------------------------) s
5 494 M
(- Spark Recursive Gloss Overlap Intrinsic Merit code has been optimized and some minutiae bugs) s
5 483 M
( have been resolved.) s
5 472 M
(- Map function for parents computation in Spark cluster has been updated to act upon only the ) s
5 461 M
(previous recursion level glosses) s
5 450 M
(by proprietary pickling of the keyword into a file storage and loading it, and not as a functi) s
5 439 M
(on argument) s
5 428 M
(- Problems with previous level gloss tokens were almost similar to MapReduce functions of the ) s
5 417 M
(recursion) s
5 406 M
(- New pickling file for parents computation in Spark has been added) s
5 395 M
(- logs and screenshots have been added to testlogs) s
5 384 M
(- With this, Spark Intrinsic Merit computation is highly parallellized apt for large clouds) s
5 373 M
(- Also a parents_tokens\(\) function that uses gloss tokens instead of synsets has been added) s
5 362 M
(- New pickling dump\(\) and load\(\) functions have been added for keyword storage) s
5 351 M
(- pickling is synchronized with python threading lock acquire\(\) and release\(\). Shouldn't be ne) s
5 340 M
(cessary because of) s
5 329 M
(Concurrent Read Exclusive Write \(CREW\) of keyword, but for safer side to prevent Spark-interna) s
5 318 M
(l races.) s
5 296 M
(---------------------------------------------------------------------------------------------) s
5 285 M
(208. Commits as on 1,2,3,4,5,6,7 January 2016) s
5 274 M
(---------------------------------------------------------------------------------------------) s
5 263 M
(- Added sections 53.14, 53.15 for HLMN and PARITY 3-SAT in 53) s
5 252 M
(- updated spidered text) s
5 241 M
(- best_matching_synset\(\) enabled in mapreduce backedges computation which accurately disambigu) s
5 230 M
(ates the graph. Spark single node cluster is) s
5 219 M
(significantly slower than serial version of parents\(\) computation with only python calls proba) s
5 208 M
(bly due to costly Python4Java) s
5 197 M
(back-and-forth stream socket reads.) s
5 186 M
(- logs, DOT file and screenshots for single node Spark cluster have been added to testlogs/) s
5 164 M
(---------------------------------------------------------------------------------------------) s
5 153 M
(209. Commits as on 8 January 2016) s
5 142 M
(---------------------------------------------------------------------------------------------) s
5 131 M
(- In InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py increased loc) s
5 120 M
(al threads to 2 \(for dual core cpu\(s\)\) for) s
5 109 M
(all SparkContexts instantiated) s
5 98 M
(- Added screenshot and logs for 2 local threads SparkContext mapreduce) s
5 87 M
(- Reference: Berkeley EdX Spark OpenCourse - https://courses.edx.org/c4x/BerkeleyX/CS100.1x/as) s
5 76 M
(set/Week2Lec4.pdf) s
5 54 M
(--------------------------------------------------------------------------------------------) s
5 43 M
(210. Commits as on 10 January 2016) s
5 32 M
(--------------------------------------------------------------------------------------------) s
5 21 M
(NeuronRain Enterprise \(GitHub\) version 2016.1.10 released.) s
_R
S
%%Page: (113) 113
%%BeginPageSetup
_S
18 36 translate
/pagenum 113 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (113) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(--------------------------------------------------------------------------------------------) s
5 681 M
(211. Commits as on 11 January 2016) s
5 670 M
(--------------------------------------------------------------------------------------------) s
5 659 M
(Added section 53.16 for an apparent contradiction between polysize and superpolynomial size am) s
5 648 M
(ong P/poly, Percolation and) s
5 637 M
(special case of HLMN theorem.) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(----------------------------------) s
5 593 M
(212. \(FEATURE - DONE\) Principal Component Analysis \(PCA\) and Singular Value Decomposition \(SVD) s
5 582 M
(\) - Commits as on 12 January 2016) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(----------------------------------) s
5 549 M
(Python rpy2 wrapper implementation for :) s
5 538 M
(        - Principal Component Analysis\(PCA\)) s
5 527 M
(        - Singular Value Decomposition\(SVD\)) s
5 516 M
(which invoke R PCA and SVD functions and plot into 2 separate pdf files has been added to repo) s
5 505 M
(sitory.) s
5 494 M
(Logs for an example have been added to testlogs/) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(--------------------------) s
5 450 M
(213. \(FEATURE - DONE\) Kullback-Leibler Divergence - Commits as on 17 January 2016) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(--------------------------) s
5 417 M
(Kullback-Leibler Divergence implementation:) s
5 406 M
(-------------------------------------------) s
5 395 M
(Approximate distance between 2 probability distributions with logs) s
5 384 M
(in terms of weighted average distance represented as bits) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(--------------------------) s
5 340 M
(214. \(FEATURE - DONE\) Basic Statistics - Norms and Median - Commits as on 19 January 2016) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(--------------------------) s
5 307 M
(Implementation for basic statistics - L1, L2 norms, median etc.,) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(--------------------------) s
5 263 M
(215. Commits as on 20 January 2016) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(--------------------------) s
5 230 M
(- Updated AsFer Design Document for Psycholinguistics of Reading a Text document and Recursive) s
5 219 M
( Gloss Overlap) s
5 208 M
(- Added Standard Deviation and Chi-Squared Test R functions to python-src/Norms_and_Basic_Stat) s
5 197 M
(istics.py) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(-------------------------) s
5 153 M
(216. \(THEORY\) Recursive Lambda Function Growth Algorithm - Psycholinguistic Functional Program) s
5 142 M
(ming simulation of Human Reader Eye Movement Tracking and its special setting application in R) s
5 131 M
(ecursive Gloss Overlap) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(-------------------------) s
5 98 M
(Example sentence:) s
5 87 M
(California Gas Leak Exposes Growing Natural Gas Risks.) s
5 65 M
(A left-right scan of the human reading groups the sentence into set of phrases and connectives) s
5 54 M
( and grows top-down gloss overlap graphs:) s
5 43 M
(p1 - California Gas Leak) s
5 32 M
(p2 - Exposes) s
5 21 M
(p3 - Growing Natural Gas Risks) s
_R
S
%%Page: (114) 114
%%BeginPageSetup
_S
18 36 translate
/pagenum 114 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (114) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(For each phrase left-right, meaning is created by recursive gloss overlap disambiguated graph ) s
5 681 M
(construction top-down \(graph is constructed left-right, top-down\):) s
5 670 M
(p1 - graph g1) s
5 659 M
(p2 - graph g2) s
5 648 M
(p3 - graph g3) s
5 626 M
(Prefix graph construction and functional programming:) s
5 615 M
(Above sentence has three prefix phrases and graphs- p1, p1-p2, p1-p2-p3 in order \(and g1, g1-g) s
5 604 M
(2, g1-g2-g3\). As reader scans the sentence, meaning is built over time period by lambda functi) s
5 593 M
(on composition.  Function f1 is applied to g1,g2 - f1\(g1,g2\) - f1\(g1\(California Gas Leak\), g2\() s
5 582 M
(Exposes\)\) - which returns a new graph for prefix p1-p2.  Function f2 is applied to f1\(g1,g2\) a) s
5 571 M
(nd g3 - f2\(f1\(g1,g2\),g3\(Growing Natural Gas Risks\)\) - which returns a new graph for sentence p) s
5 560 M
(1-p2-p3. This is recursively continued and above example can be generalized to arbitrarily lon) s
5 549 M
(g sentences.) s
5 527 M
(This formulation does not depend on just semantic graphs - graphs g1,g2 and g3 could be functi) s
5 516 M
(onal programming subroutines too, which makes f2\(f1\(g1,g2\),g3\) as one complete function compos) s
5 505 M
(ition tree. In previous example, for each phrase a function is defined and finally they are co) s
5 494 M
(mposed:) s
5 483 M
(p1 - function g1  - california_gas_leak\(\)) s
5 472 M
(p2 - function g2  - exposes\(\)) s
5 461 M
(p3 - function g3  - growing_natural_gas_risks\(\)) s
5 450 M
(f3 = f2\(f1\(g1,g2\),g3\)) s
5 428 M
(How functions f1,f2,g1,g2,g3 are internally implemented is subjective. These functions are dyn) s
5 417 M
(amically created and evaluated on the fly. Grouping sentences into phrases and connectives has) s
5 406 M
( to be a preprocessing step that uses PoS NER tagger - even a naive parsing for language conne) s
5 395 M
(ctives should suffice. Return values of these functions are functions themselves - this is sta) s
5 384 M
(ndard "First Class Object" concept in higher order lambda calculus - https://en.wikipedia.org/) s
5 373 M
(wiki/First-class_citizen . These functions themselves might invoke smaller subroutines interna) s
5 362 M
(lly which build meaning and return to previous level. Recursive Gloss Overlap implements a spe) s
5 351 M
(cial case of this where f1,f2 are gloss overlap functions and g1,g2,g3 are wordnet subgraphs. ) s
5 340 M
(Its Spark implementation does a "Parallel-Read, Top-Down Graph construction" as against left-r) s
5 329 M
(ight read. In a more generic alternative, these functions could be deep learning neural networ) s
5 318 M
(ks, LISP subroutines etc., that compute "meaning" of the corresponding phrase. If the reading ) s
5 307 M
(is not restricted to left-right, the composition tree should ideally look like a balanced bina) s
5 296 M
(ry tree per sentence. This is a kind of "Mind-Grows-Functions" formalism similar to the Mind-G) s
5 285 M
(rows-Circuit paradigm in [Rina Panigrahy, Li Zhang] - http://arxiv.org/pdf/1203.0088v2.pdf. It) s
5 274 M
( is questionable as to what does "Meaning" mean - is it a graph, neural electric impulse in br) s
5 263 M
(ain etc., and the question itself is self-referencing godel sentence: What is meant by meaning) s
5 252 M
(? - which may not have answers in an axiomatic system because word "meaning" has to be defined) s
5 241 M
( by something more atomic than "meaning" itself.) s
5 219 M
(As an ideal human sense of "meaning" stored in brain is vague and requires a "Consciousness an) s
5 208 M
(d Freewill" theory, only a computation theoretic definition of meaning \(i.e a circuit graph\) i) s
5 197 M
(s axiomatically assumed. Thus above lambda function composition is theoretically equivalent to) s
5 186 M
( boolean function composition \(hence circuit composition\). With this the above recursive lambd) s
5 175 M
(a function growth algorithm bridges two apparently disconnected worlds - complexity theory and) s
5 164 M
( machine learning practice - and hence a computational learning theory algorithm only differen) s
5 153 M
(ce being it learns a generic higher-order lambda function \(special case is recursive gloss ove) s
5 142 M
(rlap\) from text alphabet strings rather than a boolean function from binary strings over {0,1}) s
5 131 M
( alphabet. Essentially every lambda function should have a circuit by Church-Turing thesis and) s
5 120 M
( its variants - Church-Turing thesis which states that any human computable function is turing) s
5 109 M
(-computable is still an axiom without proof on which computer science has been founded. Becaus) s
5 98 M
(e of this equivalence of lambda functions and Turing machines, the lambda function learning al) s
5 87 M
(gorithm essentially covers all possible complexity classes which include Recursively Enumerabl) s
5 76 M
(e languages. Theoretically, concepts of noise sensitivity, influence which measure the probabi) s
5 65 M
(lity of output change for flipped input should apply to this lambda function learning algorith) s
5 54 M
(m for text documents - For example typo or error in grammar that affects the meaning.) s
5 32 M
(Learning theory perspective of the previous - From Linial-Mansour-Nisan theorem , class of boo) s
5 21 M
(lean functions of n variables with depth-d can be learnt in O\(n^O\(logn^d\)\) with 1/poly\(n\) erro) s
5 10 M
(r. Consequentially, Above Lambda Function Growth for depth d can be encoded as a circuit \(a TC) s
_R
S
%%Page: (115) 115
%%BeginPageSetup
_S
18 36 translate
/pagenum 115 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (115) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( circuit in wordnet special case\) that has n inputs where n are number of keywords in text \(ea) s
5 681 M
(ch word is boolean encoded to a binary string of constant length\) and learnt in O\(n^O\(logn^d\)\)) s
5 670 M
( with 1/poly\(n\) error. This learning theory bound has striking resemblance to parallel Recursi) s
5 659 M
(ve Gloss Overlap bound of O\(n1*d1*s^t_max/\(g\(n1\)*f\(d1\)\)\) for n1 documents with d1 keywords eac) s
5 648 M
(h on a cluster. Equating to LMN bound gives rise to interesting implication that average numbe) s
5 637 M
(r of gloss per keyword = log\(number_of_keywords\) which is too high gloss size per word\(other v) s
5 626 M
(ariables equated as n=d1,t_max=d\). Therefore recursive gloss overlap could be faster than LMN ) s
5 615 M
(learning algorithm.) s
5 593 M
(References:) s
5 582 M
(-----------) s
5 571 M
(216.1 Eye Movement Tracking - https://en.wikipedia.org/wiki/Psycholinguistics#Eye-movements) s
5 560 M
(216.2 Eye Movements in Text Comprehension - Fixations, Saccades, Regressions - http://www.jove) s
5 549 M
(.com/video/50780/using-eye-movements-to-evaluate-cognitive-processes-involved-text) s
5 538 M
(216.3 Symbol Grounding Problem and learning from dictionary definitions - http://aclweb.org/an) s
5 527 M
(thology//W/W08/W08-2003.pdf - "...In the path from a word, to the definition of that word, to ) s
5 516 M
(the definition of the words in the definition of that word, and so on, through what sort of a ) s
5 505 M
(structure are we navigating \(Ravasz & Barabasi, 2003; Steyvers & Tenenbaum, 2005\)? Meaning is ) s
5 494 M
(compositional: ..." - Symbol grounding is the problems of infinite regress while affixing mean) s
5 483 M
(ing to words. As defined by Frege, word is a referent and meaning is its definition and the tw) s
5 472 M
(o are different. This paper lays theoretical foundations for Graphical Ontologies like WordNet) s
5 461 M
( etc., Process of meaning grasping is defined in terms of finding a Grounding set of vertices ) s
5 450 M
(of an ontology which is equal to a Feedback Vertex Set of the graph. Feedback Vertex Set is su) s
5 439 M
(bset of vertices of an ontology graph removal of which causes the directed graph to be cycle-l) s
5 428 M
(ess. This is an NP-complete problem. Definition graph construction in Recursive Gloss Overlap ) s
5 417 M
(creates a subgraph of an ontology projected onto the text document.) s
5 406 M
(216.4 TextGraphs - graph representation of texts - https://sites.google.com/site/textgraphs201) s
5 395 M
(7/) s
5 384 M
(216.5 Symbol Grounding Problem - http://users.ecs.soton.ac.uk/harnad/Papers/Harnad/harnad90.sg) s
5 373 M
(problem.html - " ... \(1\) Suppose the name "horse" is grounded by iconic and categorical repres) s
5 362 M
(entations, learned from experience, that reliably discriminate and identify horses on the basi) s
5 351 M
(s of their sensory projections.  \(2\) Suppose "stripes" is similarly grounded.  Now consider th) s
5 340 M
(at the following category can be constituted out of these elementary categories by a symbolic ) s
5 329 M
(description of category membership alone: \(3\) "Zebra" = "horse" & "stripes"[17] ... Once one h) s
5 318 M
(as the grounded set of elementary symbols provided by a taxonomy of names \(and the iconic and ) s
5 307 M
(categorical representations that give content to the names and allow them to pick out the obje) s
5 296 M
(cts they identify\), the rest of the symbol strings of a natural language can be generated by s) s
5 285 M
(ymbol composition alone,[18] ...") s
5 274 M
(216.6 Understanding Natural Language - [Terry Winograd] - https://dspace.mit.edu/handle/1721.1) s
5 263 M
(/7095#files-area - Chapter 3 - Inference - Meaning of sentences are represented as relations b) s
5 252 M
(etween objects. Recursive Lambda Function Growth described previously has a lambda function fo) s
5 241 M
(r each relation. Relations/Lambda Functions are mostly verbs/adverbs/adjectives and arguments ) s
5 230 M
(of lambda functions are objects/nouns.) s
5 219 M
(216.7 Grounded Cognition - [Barsalou] - http://matt.colorado.edu/teaching/highcog/readings/b8.) s
5 208 M
(pdf - How Language is Grounded - "...Phrasal structures embed recursively..." - Neuroimageing ) s
5 197 M
(evidences for Grounded cognition) s
5 175 M
(--------------------------------------------------------------------------------------) s
5 164 M
(217. Commits as on 21 January 2016) s
5 153 M
(--------------------------------------------------------------------------------------) s
5 142 M
(- Corrected Chi-squared test input args) s
5 131 M
(- logs added to testlogs/) s
5 109 M
(--------------------------------------------------------------------------------------) s
5 98 M
(218. Commits as on 27 January 2016) s
5 87 M
(--------------------------------------------------------------------------------------) s
5 76 M
(Updated Sections 14 and 216.) s
5 54 M
(--------------------------------------------------------------------------------------) s
5 43 M
(219. Commits as on 29 January 2016) s
5 32 M
(--------------------------------------------------------------------------------------) s
5 21 M
(-  Uncommented both commandlines in cpp-src/asferpythonembedding.sh) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (116) 116
%%BeginPageSetup
_S
18 36 translate
/pagenum 116 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (116) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(--------------) s
5 681 M
(220. \(FEATURE - DONE\)  Python-C++-VIRGOKernel and Python-C-VIRGOKernel boost::python and cpyth) s
5 670 M
(on implementations:) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(-------------) s
5 637 M
(- It is a known idiom that Linux Kernel and C++ are not compatible.) s
5 626 M
(- In this commit an important feature to invoke VIRGO Linux Kernel from userspace python libra) s
5 615 M
(ries via two alternatives have been added.) s
5 604 M
(- In one alternative, C++ boost::python extensions have been added to encapsulate access to VI) s
5 593 M
(RGO memory system calls - virgo_malloc\(\), virgo_set\(\), virgo_get\(\), virgo_free\(\). Initial test) s
5 582 M
(ing reveals that C++ and Kernel are not too incompatible and all the VIRGO memory system calls) s
5 571 M
( work well though initially there were some errors because of config issues.) s
5 560 M
(- In the other alternative, C Python extensions have been added that replicate boost::python e) s
5 549 M
(xtensions above in C - C Python with Linux kernel) s
5 538 M
(works exceedingly well compared to boost::python.) s
5 527 M
(- This functionality is required when there is a need to set kernel analytics configuration va) s
5 516 M
(riables learnt by AsFer Machine Learning Code) s
5 505 M
(dynamically without re-reading /etc/virgo_kernel_analytics.conf.) s
5 494 M
(- This completes a major integration step of NeuronRain suite - request travel roundtrip to-an) s
5 483 M
(d-fro top level machine-learning C++/python) s
5 472 M
(code and rock-bottom C linux kernel - bull tamed ;-\).) s
5 461 M
(- This kind of python access to device drivers is available for Graphics Drivers already on li) s
5 450 M
(nux \(GPIO - for accessing device states\)) s
5 439 M
(- logs for both C++ and C paths have been added in cpp_boost_python_extensions/ and cpython_ex) s
5 428 M
(tensions.) s
5 417 M
(- top level python scripts to access VIRGO kernel system calls have been added in both directo) s
5 406 M
(ries:) s
5 395 M
(        CPython - python cpython_extensions/asferpythonextensions.py) s
5 384 M
(        C++ Boost::Python - python cpp_boost_python_extensions/asferpythonextensions.py) s
5 373 M
(- .so, .o files with build commandlines\(asferpythonextensions.build.out\) for "python setup.py ) s
5 362 M
(build" have been added) s
5 351 M
(in build lib and temp directories.) s
5 340 M
(- main implementations for C++ and C are in cpp_boost_python_extensions/asferpythonextensions.) s
5 329 M
(cpp and cpython_extensions/asferpythonextensions.c) s
5 307 M
(- Schematic Diagram:) s
5 296 M
(--------------------) s
5 285 M
(        AsFer Python -----> Boost::Python C++ Extension ------> VIRGO memory system calls ----) s
5 274 M
(----> VIRGO Linux Kernel Memory Drivers) s
5 263 M
(        /\\                                                                                    ) s
5 252 M
(          V) s
5 241 M
(         |                                                                                    ) s
5 230 M
(          |) s
5 219 M
(         ---------------------------------------------<---------------------------------------) s
5 208 M
(-----------) s
5 197 M
(        AsFer Python -----> CPython Extensions ------> VIRGO memory system calls --------> VIR) s
5 186 M
(GO Linux Kernel Memory Drivers) s
5 175 M
(         /\\                                                                                   ) s
5 164 M
(          V) s
5 153 M
(         |                                                                                    ) s
5 142 M
(          |) s
5 131 M
(         ---------------------------------------------<---------------------------------------) s
5 120 M
(-----------) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(------------------) s
5 76 M
(221. Commits as on 2 February 2016) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(------------------) s
5 43 M
(- Uncommented PyArg_ParseTuple\(\) to read in the key-value passed from Python layer) s
5 32 M
(- Unified key-value in Python layer and within CPython code with : delimiter) s
5 21 M
(- added Py_BuildValue\(\) to return vuid - VIRGO Unique ID - to python and commented virgo_free\() s
5 10 M
(\) so that a parallel code) s
_R
S
%%Page: (117) 117
%%BeginPageSetup
_S
18 36 translate
/pagenum 117 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (117) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(can connect to kmem cache and do a virgo_get on this vuid - this is a precise scenario where R) s
5 681 M
(ead-Copy-Update fits in so that) s
5 670 M
(multiple versions can co-exist at a time) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(------------------) s
5 626 M
(222. \(THEORY\) Recursive Lambda Function Growth Algorithm - 216 elaborated with examples) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(------------------) s
5 593 M
(Boolean function learning and PAC learning are special cases of this Lambda function learning ) s
5 582 M
(algorithm because any) s
5 571 M
(intermediate lambda function can be a boolean function too.) s
5 549 M
(Algorithms steps for English Natural Language Procssing - Parallel read:) s
5 538 M
(------------------------------------------------------------------------) s
5 527 M
(- Approximate midpoint of the sentence is known apriori) s
5 516 M
(- Language specific connectives are known apriori \(e.g is, was, were, when, who etc.,\)) s
5 505 M
(- Sentence is recursively split into phrases and connectives and converted into lambda functio) s
5 494 M
(ns with balanced number of nodes in left and right subtrees) s
5 483 M
(- Root of each subtree is unique name of the function) s
5 461 M
(Example Sentence1:) s
5 450 M
(-----------------) s
5 439 M
(PH is infinite relative to random oracle.) s
5 417 M
(Above sentence is translated into a lambda function composition tree as:) s
5 406 M
(relative\(is\(PH, infinite\), to\(random,oracle\)\)\) which is a tree of depth 3) s
5 384 M
(In this example every word and grammatical connective is a lambda function that takes some arg) s
5 373 M
(uments and returns a partial "purport" or "meaning" of that segment of sentence. These partial) s
5 362 M
( computations are aggregated bottom-up and culminate in root.) s
5 340 M
(Example Sentence2:) s
5 329 M
(-----------------) s
5 318 M
(Farming and Farmers are critical to success of a country like India.) s
5 296 M
(Above sentence is translated into a lambda function composition tree as:) s
5 285 M
(Critical\(are\(and\(Farming,Farmers\)\), a\(success\(to,of\), like\(country, India\)\)\)) s
5 263 M
(This composition is slightly different from Part-of-Speech trees and inorder traversal of the ) s
5 252 M
(tree yields original sentence.) s
5 241 M
(As functions are evaluated over time period, at any time point there is a partially evaluated ) s
5 230 M
(composition prefix tree which operates on) s
5 219 M
(rest of the sentence to be translated yet - these partial trees have placeholder templates tha) s
5 208 M
(t can be filledup by a future lambda function) s
5 197 M
(from rest of the sentence.) s
5 175 M
(Each of these lambda functions can be any of the following but not limited to:) s
5 164 M
(- Boolean functions) s
5 153 M
(- Generic mathematical functions) s
5 142 M
(- Neural networks \(which include all Semantic graphs like WordNet etc.,\)) s
5 131 M
(- Belief propagated potentials assigned by a dictionary of English language and computed botto) s
5 120 M
(m-up) s
5 109 M
(- Experimental theory of Cognitive Psycholinguistics - Visuals of corresponding words - this i) s
5 98 M
(s the closest simulation of process of cognition and comprehension because when a sentence is ) s
5 87 M
(read by a human left-right, visuals corresponding to each word based on previous experience ar) s
5 76 M
(e evoked and collated in brain to create a "movie" meaning of the sentence. For example, follo) s
5 65 M
(wing sentence:) s
5 43 M
(        Mobile phones operate through towers in each cellular area that transmit signals.) s
5 21 M
(with its per-word lambda function composition tree :) s
_R
S
%%Page: (118) 118
%%BeginPageSetup
_S
18 36 translate
/pagenum 118 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (118) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        in\(operate\(mobile phones, through\(tower\)\), that\(each\(cellular area\), transmit\(signals\)) s
5 681 M
(\)\)) s
5 659 M
(evokes from left-to-right visuals of Mobile phones, towers, a bounded area in quick succession) s
5 648 M
( based on user's personal "experience" which are merged to form a visual motion-pictured meani) s
5 637 M
(ng of the sentence. Here "experience" is defined as the accumulated past stored in brain which) s
5 626 M
( differs from one person to the other. This evocation model based on an infinite hypergraph of) s
5 615 M
( stacked thoughts as vertices and edges has been described earlier in sections 35-49 and 54-59) s
5 604 M
(. This hypergraph of thoughts grows over time forming "experiences". For some words visual sto) s
5 593 M
(rage might be missing, blurred or may not exist at all. An example for this non-visualizable e) s
5 582 M
(ntity in above sentence is "transmit" and "signal" which is not a tangible. Thus the lambda fu) s
5 571 M
(nction composition of these visuals are superimposed collations of individual lambda functions) s
5 560 M
( that return visuals specific to a word, to create a sum total animated version. Important to ) s
5 549 M
(note is that these lambda functions are specific to each reader which depend on pre-built "exp) s
5 538 M
(erience" hypergraph of thoughts which differs for each reader. This explains the phenomenon wh) s
5 527 M
(ere the process of learning and grasping varies among people. Hypergraph model also explains w) s
5 516 M
(hy recent events belonging to a particular category are evoked more easily than those in dista) s
5 505 M
(nt past - because nodes in stack can have associated potential which fades from top to down an) s
5 494 M
(d evocation can be modelled as a hidden markov model process on a stack node in the thought hy) s
5 483 M
(pergraph top-down as the markov chain. Rephasing, thoughts stored as multiplanar hypergraphs w) s
5 472 M
(ith stack vertices act as a context to reader-specific lambda functions. If stack nodes of tho) s
5 461 M
(ught hypergraph are not markov models - node at depth t need not imply node at depth t-1 - top) s
5 450 M
(most node is the context disambiguating visual returned by the lambda function for that word. ) s
5 439 M
(This unifies storage and computation and hence a plausible cerebral computational model - stri) s
5 428 M
(king parallel in non-human turing computation is the virtual address space or tape for each pr) s
5 417 M
(ocess serving as context.) s
5 395 M
(The language of Sanskrit with Panini's Grammar fits the above lambda calculus framework well b) s
5 384 M
(ecause in Sanskrit case endings and sentence meaning are independent of word orderings. For ex) s
5 373 M
(ample following sentence in Sanskrit:) s
5 362 M
(        Sambhala Grama Mukhyasya VishnuYashas Mahatmana: ... \( Chieftain of Sambhala Village, ) s
5 351 M
(Vishnuyashas the great ...\)) s
5 329 M
(can be rearranged and shuffled without altering the meaning, a precise requisite for lambda fu) s
5 318 M
(nction composition tree representation of a sentence, which is tantamount to re-ordering of pa) s
5 307 M
(rameters of a lambda function.) s
5 285 M
(As an alternative to WordNet:) s
5 274 M
(----------------------------) s
5 263 M
(Each lambda function carries dictionary meaning of corresponding word with placeholders for ar) s
5 252 M
(guments.) s
5 241 M
(For example, for word "Critical" corresponding lambda function is defined as:) s
5 230 M
(        Critical\(x1,x2\)) s
5 219 M
(If dictionary meanings of critical are defined with placeholders:) s
5 208 M
(        1\) Disapproval of something -) s
5 197 M
(        2\)  - is Important to something -) s
5 186 M
(there is a need for disambiguation and 2\) has to be chosen based either on number of arguments) s
5 175 M
( or disambiguation using lesk algorithm or more sophisticated one. If Second meaning fits cont) s
5 164 M
(ext then, lambda function Critical\(x1,x2\) returns:) s
5 153 M
(        x1 is important to something x2) s
5 142 M
(Thus WordNet can be replaced by something more straightforward. These steps can be recursed to) s
5 131 M
(p-down to expand the meaning - in above example "important" might have to be lookedup in dicti) s
5 120 M
(onary. This simulates basic human process of language learning and comprehension.) s
5 98 M
(This algorithm accepts natural languages that are between Context Free Languages and Context S) s
5 87 M
(ensitive Languages.) s
5 65 M
(References:) s
5 54 M
(222.1 Charles Wikner - Introductory Sanskrit - http://sanskritdocuments.org/learning_tutorial_) s
5 43 M
(wikner/) s
5 32 M
(222.2 Michael Coulson - Teach yourself - Sanskrit - http://www.amazon.com/Complete-Sanskrit-Te) s
5 21 M
(ach-Yourself-Language/dp/0071752668\)) s
_R
S
%%Page: (119) 119
%%BeginPageSetup
_S
18 36 translate
/pagenum 119 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (119) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-------------------------------------------------------------------------------------) s
5 681 M
(223. Commits as on 4 February 2016) s
5 670 M
(-------------------------------------------------------------------------------------) s
5 659 M
( - Updated AsFer Design Document with more references for Discrete Hyperbolic Factorization in) s
5 648 M
( NC - PRAM-NC equivalence) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(---) s
5 615 M
(\(FEATURE - DONE\) C++ - Input Dataset Files nomenclature change for NeuronRain Enterprise) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(---) s
5 582 M
(- 3 new input files cpp-src/asfer.enterprise.encstr, cpp-src/asfer.enterprise.encstr.clustered) s
5 571 M
(, cpp-src/asfer.enterprise.encstr.kNN) s
5 560 M
(have been added which contain set of generic binary strings for KMeans, KNN clustering and Lon) s
5 549 M
(gest Common Subsequence of a clustered set .) s
5 538 M
(- Code changes for above new input files have been done in asfer.cpp and new class\(asferencode) s
5 527 M
(str.cpp and asferencodestr.h\) has been added) s
5 516 M
(for generic string dataset processing) s
5 505 M
(- Changes for generic string datasets have been done for kNN and KMeans clustering) s
5 494 M
(- logs for clustering and longest common subsequence have been added) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(---) s
5 461 M
(\(FEATURE - DONE\) Python - Input Dataset Files nomenclature change for NeuronRain Enterprise) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(---) s
5 428 M
(- 1 new input file  python-src/asfer.enterprise.encstr.seqmining has been added for Sequence M) s
5 417 M
(ining of generic string dataset -) s
5 406 M
(presently contains set of generic binary strings .) s
5 395 M
(- Code changes for above new input files have been done in SequenceMining.py) s
5 384 M
(- logs for SequenceMining of binary strings with maximum subsequence length of 15 have been ad) s
5 373 M
(ded) s
5 351 M
(---------------------------------------------------------------------------------------) s
5 340 M
(224. Commits as on 4 February 2016) s
5 329 M
(---------------------------------------------------------------------------------------) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(----------------------------) s
5 296 M
(\(FEATURE - DONE\) Crucial commits for Performance improvements and Cython build of Spark Interv) s
5 285 M
(iew algorithm implementation) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(----------------------------) s
5 252 M
(- New setup.py has been added to do a Cythonized build of PySpark Interview algorithm MapReduc) s
5 241 M
(e script) s
5 230 M
(- Commandline for cython build: python setup.py build_ext --inplace) s
5 219 M
(- This compiles python spark mapreduce script into a .c file that does CPython bindings and cr) s
5 208 M
(eates .o and .so files) s
5 197 M
(- FreqDist has been commented which was slowing down the bootstrap) s
5 186 M
(- MapReduce function has been updated for NULL object checks) s
5 175 M
(- Thanks to Cython, Performance of Spark MapReduce has performance shootup by factor of almost) s
5 164 M
( 100x - Spark GUI job execution time) s
5 153 M
(shown for this interview execution is ~10 seconds excluding GUI graph rendering which requires) s
5 142 M
( few minutes. This was earlier taking few hours.) s
5 131 M
(- With Cython ,essentially Spark-Python becomes as fast as C implementation.) s
5 120 M
(- DOT file, Output log, Spark logs and Screenshot has been added) s
5 109 M
(- This completes important benchmark and performance improvement for Recursive Gloss Overlap G) s
5 98 M
(raph construction on local Spark single node) s
5 87 M
(cluster.) s
5 76 M
(- Above Cythonizes just a small percentage of Python-Spark code. If complete python execution ) s
5 65 M
(path is Cythonized and JVM GC and Heap tunables for Spark are configured, this could increase ) s
5 54 M
(throughput significantly further. Also Spark's shuffling parameters tuning could reduce the co) s
5 43 M
(mmunication cost.) s
5 21 M
(-----------------------------------------------------------------------------------------) s
5 10 M
(225. Commits as on 5 February 2016) s
_R
S
%%Page: (120) 120
%%BeginPageSetup
_S
18 36 translate
/pagenum 120 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (120) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-----------------------------------------------------------------------------------------) s
5 681 M
(------------------------------------------------------------------------) s
5 670 M
(Further optimizations to Spark-Cython Interview algorithm implementation:) s
5 659 M
(-------------------------------------------------------------------------) s
5 648 M
(- webspidered text for RGO graph construction updated) s
5 637 M
(- PySpark-Cython build commandlines added as a text file log) s
5 626 M
(- Commented unused python functions - shingling and jaccard coefficient) s
5 615 M
(- threading.Lock\(\) Spark thread pickling synchronizer variable made global in MapReducer) s
5 604 M
(- renamed yesterday's logs and screenshot to correct datetime 4 February 2016) s
5 593 M
(- Added a new special graph node ["None"] for special cases when no parents are found in backe) s
5 582 M
(dges computation in MapReducer. This makes a) s
5 571 M
(default root in the RGO graph as shown in matplotlib networkx graph plot) s
5 560 M
(- Spark logs show time per RDD job - an example MapReduce job takes 335 milliseconds) s
5 549 M
(- Tried Cythonizing InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.py but there is a) s
5 538 M
( serious cython compiler error in) s
5 527 M
(Matplotlib-PyQt. Hence those changes have been backed out.) s
5 516 M
(- DOT file and Cython C file have been updated) s
5 494 M
(-----------------------------------------------------------------------------------------) s
5 483 M
(226. Commits as on 8 February 2016) s
5 472 M
(-----------------------------------------------------------------------------------------) s
5 461 M
(- PySpark-Cythonized Interview Algorithm implementation generated graph has been pruned to rem) s
5 450 M
(ove edges invoving "None" vertices which were) s
5 439 M
(added during Spark MapReduce based on a config variable.) s
5 428 M
(- Logs and Screenshots for the above have been added to testlogs/) s
5 417 M
(- Some benchmark results parsed from the Spark logs with commandline - "for i in `grep Finishe) s
5 406 M
(d InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.2localthreads.CythonOptimized.8Febr) s
5 395 M
(uary2016.out |grep TaskSetManager| awk '{print $14}'`; do sum=$\(expr $sum + $i\); done":) s
5 384 M
(        - Total time in milliseconds - 99201) s
5 373 M
(        - Number of jobs - 113) s
5 362 M
(        - Average time per mapreduce job in milliseconds - 877) s
5 351 M
(Thus a merit computation of sample document with few lines \(33 keywords\) requires ~100 seconds) s
5 340 M
( in local Spark cluster. This excludes NetworkX and other unoptimized code overhead.) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(-------------------------------------) s
5 296 M
(227. \(THEORY\) Graph Edit Distance in Interview Algorithm, PySpark-Cython Interview Algorithm b) s
5 285 M
(enchmarks and Merit in Recursive Lambda Function Growth Algorithm) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(-------------------------------------) s
5 252 M
(Interview Algorithm to assess merit, throughout this document, refers to 3 algorithms - Citati) s
5 241 M
(on graph maxflow\(which includes standard radius,eccentricity and diameter measures of the grap) s
5 230 M
(h\), Recursive Lambda Function growth and Graph edit distance \(or Q&A\) based interview between ) s
5 219 M
(a pair of documents.  Recent result about impossibility of better algorithms for edit distance) s
5 208 M
( \(Backurs-Indyk - http://arxiv.org/abs/1412.0348 - edit distance cannot be computed in subquad) s
5 197 M
(ratic time unless Strong Exponential Time Hypothesis is false\) finds its applications in Graph) s
5 186 M
( edit distance for Interview Algorithm Questions&Answering where one document's Recursive Glos) s
5 175 M
(s Overlap graph is compared for distance from another graph's RGO WordNet subgraph \(http://www) s
5 164 M
(.nist.gov/tac/publications/2010/participant.papers/CMI_IIT.proceedings.pdf\). Graph edit distan) s
5 153 M
(ce is a special case of edit distance when graph edges are encoded as strings. A better algori) s
5 142 M
(thm to find edit distance between 2 documents' wordnet subgraphs ,therefore implies SETH is fa) s
5 131 M
(lse.) s
5 109 M
(Previous benchmarks for PySpark-Cython parallel interview algorithm implementation could scale) s
5 98 M
( significantly on a cluster with ~100 Spark nodes with parallel runtime of ~800 milliseconds. ) s
5 87 M
(If all Java Spark code is JVM tuned and python modules are Cythonized fully, even this could b) s
5 76 M
(e bettered bringing it to order of few milliseconds.) s
5 54 M
(Computing Intrinsic Merit of a text with Recursive Lambda Function growth could involve multit) s
5 43 M
(ude of complexity notions:) s
5 32 M
(        - Depth of Composition tree for a text) s
5 21 M
(        - Size of resultant lambda function composition e.g size of WordNet subgraphs, neural ) s
5 10 M
(nets, complexity of context disambiguation with thought hypergraph psychological model enuncia) s
_R
S
%%Page: (121) 121
%%BeginPageSetup
_S
18 36 translate
/pagenum 121 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (121) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ted in 222.) s
5 681 M
(        - In essence, this reduces to a lowerbound of lambda function composition - boolean ci) s
5 670 M
(rcuit lowerbounds are special cases of lambda function composition lowerbounds. Since thought ) s
5 659 M
(hypergraph disambiguator is reader dependent, each reader might get different merit value for ) s
5 648 M
(same document which explains the real-life phenomenon of "subjectivity". To put it simply, Obj) s
5 637 M
(ectivity evolves into Subjectivity with "experience and thought" context. Evaluating merit bas) s
5 626 M
(ed on thought context is non-trivial because disambiguating a word visually as mentioned in 22) s
5 615 M
(2 requires traversal of complete depth of thought hypergraph - it is like billions of stacks i) s
5 604 M
(nterconnected across making it tremendously multiplanar - a thought versioning system. This ex) s
5 593 M
(plains another realword phenomenon of experiential learning: An experienced person "views" a t) s
5 582 M
(ext differently from a relatively less experienced person.) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(--------------------------) s
5 538 M
(228. \(THEORY\) Thought Versioning - ThoughtNet and EventNet - Psychophilosophical Digression - ) s
5 527 M
(Might have) s
5 516 M
(some parallels in Philosophical Logic - related to points \(70-79\)) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(--------------------------) s
5 483 M
(\(*\) This postulates an experimental model for a "Logical Brain". It makes no assumptions about) s
5 472 M
( neural synapses, firing etc., though a graph can be mapped to a neural network with some more) s
5 461 M
( reductions. The computation side is taken care of by Recursive Lambda Function Growth \(which ) s
5 450 M
(might invoke neural learning etc.,\) while the storage is simulated with a giant ThoughtNet - t) s
5 439 M
(ogether this is a turing-computable model for natural language processing which is subjective ) s
5 428 M
(to each individual. This model makes an assumption of pre-existing consciousness or an equival) s
5 417 M
(ent to account for emotions and sentiments.) s
5 395 M
(\(*\) ThoughtNet is built over time from inception of life - books a person reads, events in lif) s
5 384 M
(e, interactions etc., - are lambda-evaluated and stored. This is were the computation and stor) s
5 373 M
(age distinction seems to vanish - It is not a machine and tape but rather a machinetape \(analo) s
5 362 M
(gy: space and time coalescing to spacetime\). Evaluated lambda functions themselves are stored ) s
5 351 M
(in ThoughtNet not just thoughts data - storage contains computation and computation looksup st) s
5 340 M
(orage.) s
5 318 M
(\(*\) Thought Versioning System - tentatively named ThoughtNet - mentioned in 227 is a generaliz) s
5 307 M
(ation of Evocation WordNet as a multiplanar graph with stacked thoughts as vertices. Each stac) s
5 296 M
(k corresponds to a class an experience or thought is binned - visually or non-visually.) s
5 274 M
(\(*\) An approximate parallel to ThoughtNet versioning is the Overlay FileSystems in Unixen. Ove) s
5 263 M
(rlay filesystems store data one over the other in layers which play "obscurantist" and prevent) s
5 252 M
( the bottom truth from being out. This follows a Copy-up-on-write \(CUOW\) - a data in bottom la) s
5 241 M
(yer is copied up and modified and stays overlaid. File access systems calls "see" only "topmos) s
5 230 M
(t" layer. In ThoughtNet this roughly translates to Thought edges of particular class-stack nod) s
5 219 M
(e placed one over the other and grown over period of time. ThoughtNet thus presents an alterna) s
5 208 M
(tive to Overlay storage where a layer with maximum argmax\(\) potential can be chosen.) s
5 186 M
(\(*\) EventNet when unified with ThoughtNet makes a cosmic storage repository, all pervasive. Th) s
5 175 M
(oughts are stored with accompanied potentials - which could be electric potentials - some stro) s
5 164 M
(nger thoughts might have heavy potentials compared to insignificant thoughts. How this potenti) s
5 153 M
(als arise in first place is open to question. Rather than numeric and sign representation of s) s
5 142 M
(entiments, this ThoughtNet model proposes "coloring" of the emotions - akin to edge coloring o) s
5 131 M
(f graphs. ThoughtNet is a giant pulp of accrued knowledge in the form of observed events store) s
5 120 M
(d as hyperedges. Here a distinction has to be made between Wisdom and Knowledge - Knowledge me) s
5 109 M
(asures "To know" while Wisdom measures "To know how to know". Common knowledge in Logic \("We k) s
5 98 M
(now that you know that We know ... ad infinitum"\) thus still does not explain wisdom \(Does wis) s
5 87 M
(dom gain from knowledge and vicecersa?\). ThoughtNet is only a knowledge representation and Wis) s
5 76 M
(dom remains open to interpretation - probably recursive lambda function growth fills-in this g) s
5 65 M
(ap - it learns how to learn.) s
5 43 M
(\(*\) For example, an event with pleasant happening might be stored with high potential of posit) s
5 32 M
(ive polarity as against a sad event with a negative polarity potential. Repetitive events with) s
5 21 M
( high potentials reinforce - potentials get added up. This extends SentiWordNet's concept of p) s
5 10 M
(ostivity, negativity and objectivity scoring for words. It is not a necessity that Hidden Mark) s
_R
S
%%Page: (122) 122
%%BeginPageSetup
_S
18 36 translate
/pagenum 122 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (122) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ov Models are required for finding a right evocative \(mentioned in 56\). Trivial argmax\(all pot) s
5 681 M
(entials per stack class\) is sufficient to find the most relevant evocative hyperedge. This exp) s
5 670 M
(lains the phenomenon where an extremely happy or sad memory of a class lingers for long durati) s
5 659 M
(on despite being old whereas other memories of same class fade away though relatively recent. ) s
5 648 M
(Emotions affecting potentials of thought hyperedges is explained further below.) s
5 626 M
(\(*\) EventNet is a cosmic causality infinite graph with partaker nodes whereas ThoughtNet is pe) s
5 615 M
(r partaker node. This evocation model is experimental only because a void exists in this simul) s
5 604 M
(ation which can be filledup only by consciousness and egoself. Example: A sentence "Something ) s
5 593 M
(does not exist" implies it existed in past or might exist in future and thus self-refuting. Ot) s
5 582 M
(herwise mention of "something" should have never happened.) s
5 560 M
(\(*\) EventNet is a parallelly created Causality graph - event vertices occur in parallel across) s
5 549 M
( universe and causation edges are established in parallel. This is like a monte-carlo Randomiz) s
5 538 M
(ed NC circuit that grows a random graph in parallel.) s
5 516 M
(\(*\) Previous evocation model with HMM or maximum potential need not be error-free - it can be ) s
5 505 M
(derailed since human understanding at times can be derailed - because humans are inherently vu) s
5 494 M
(lnerable to misunderstand ambiguous texts. Hence above evocation might return a set of edges t) s
5 483 M
(han a unique edge which has to be further resolved by additional information for disambiguatio) s
5 472 M
(n. For example, rather than individual words a sentence as a block might require disambiguatio) s
5 461 M
(n: In the Cognitive Psycholinguistics model which stores thoughts as visuals mentioned in 222,) s
5 450 M
( there is a chance of derailment because of evocation returning multiple edges when human emot) s
5 439 M
(ions are involved \(Love, Anger, Sarcasm, Pathos etc.,\). ThoughNet based disambiguation simulat) s
5 428 M
(es subjective human reasoning more qualitatively specific to each individual and accurately th) s
5 417 M
(an usual statistical sentiment inferences which are mere numbers and do not consider individua) s
5 406 M
(l specific perception of a text. This also explains how an "image"/"perception" is engineered ) s
5 395 M
(over a time period which depends on thoughts stored.) s
5 384 M
(-----------------------------------------------------------------) s
5 373 M
(Thought experiment for this defective disambiguation is as below) s
5 362 M
(-----------------------------------------------------------------) s
5 351 M
(\(*\) Example Sentence 1: "Love at first sight is the best". Considering two persons reading thi) s
5 340 M
(s sentence with drastically different ThoughtNet contexts - one person has multiple good follo) s
5 329 M
(wed by bad experiences stored as ThoughtNet hypergraph edges with stronger postive and negativ) s
5 318 M
(e potentials and the argmax\(\) disambiguated evocative edges returned could be therefore both q) s
5 307 M
(uite positive and negative inducing him to either like or abhor this sentence based on whichev) s
5 296 M
(er wins the mind conflict \(i.e whichever potential positive or negative is overpowering\), whil) s
5 285 M
(e the other person has a pure romantic history with good experiences alone disambiguated evoca) s
5 274 M
(tion in which case is uniquely positive. This is real-world simulation of "confused" thought p) s
5 263 M
(rocess when emotions rule. In other words emotions determine the polarity and extent of potent) s
5 252 M
(ials tagged to each thought hyperedge and more the emotional conflict, larger the chance of di) s
5 241 M
(fficulty in unique disambiguation and derailment. It is not a problem with ThoughtNet model,bu) s
5 230 M
(t it is fundamental humane problem of emotions which spill over to ThoughtNet when accounted f) s
5 219 M
(or. If human reasoning is ambiguous so is this model. This danger is even more pronounced when) s
5 208 M
( lambda compositions of visuals are involved than just sentences. As an example, a test human ) s
5 197 M
(subject is repeatedly shown visuals related to love reinforcing the potentials of hyperedges b) s
5 186 M
(elonging to a class of "Love" and subject is bootstrapped for future realtime love. This artif) s
5 175 M
(icially creates an illusory backdrop of "trained data" ThoughtNet context - a kind of "Prison ) s
5 164 M
(Experiment for Behavioural Modification Under Duress" - the distinction between reality and im) s
5 153 M
(agination gets blurred - e.g Stanford Prison Experiment. Machine learning programs cannot quan) s
5 142 M
(tify emotions through statistics \(in the absence of data about how emotions are stored in brai) s
5 131 M
(n, does emotion originate from consciousness etc.,\) and hence creating a visualized meaning th) s
5 120 M
(rough recursive lambda composition of natural language texts have a void to fill. If emotions ) s
5 109 M
(are Turing-computable, the lambda function composition makes sense. ThoughtNet model with pote) s
5 98 M
(ntials, thus, simulates human grasp of a text with provisions for emotions. No existing machin) s
5 87 M
(e learning model at present is known to reckon emotions and thought contexts.) s
5 65 M
(\(*\) Example Sentence 2: "You are too good for any contest". This sentence has sarcastic tone f) s
5 54 M
(or a human reader. But can sarcasm be quantified and learned? Usual statistical machine learni) s
5 43 M
(ng algorithms doing sentiment analysis of this sentence might just determine positivity, negat) s
5 32 M
(ivity or objectivity ignoring other fine-grained polarities like "rave, ugly, pejorative, sarc) s
5 21 M
(astic etc.,". Trivial sentiment analysis rates this as positive while for a human it is humili) s
5 10 M
(ating. This is an example when lambda composition of visuals fares better compared to textual ) s
_R
S
%%Page: (123) 123
%%BeginPageSetup
_S
18 36 translate
/pagenum 123 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (123) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(words. Visually this lambda-composes to a collated thought-enacted movie of one person talking) s
5 681 M
( to another having a discourteous, ridiculing facial expression. Lambda functions for this vis) s
5 670 M
(ual compositions could invoke face-feature-vector-recognition algorithms which identify facial) s
5 659 M
( expressions. In social media texting smileys\(emoticons\) convey emotions \(e.g tongue-in-cheek\)) s
5 648 M
(. Thus disambiguating the above text sentence accurately depends on a pre-existing visually st) s
5 637 M
(ored ThoughtNet context of similar sarcastic nature - a person with prior visual ThoughtNet ex) s
5 626 M
(perience hyperedge similar to sarcastic sentence above is more capable of deciphering sarcasm ) s
5 615 M
(than person without it. This prior edge is "training data" for the model and is stored with an) s
5 604 M
( edge-coloring of configurable choosing. Marking sentiments of Thought edges with edge colorin) s
5 593 M
(g is more qualitative and coarse grained than numbering - each of the emotions Love, Hate, Sor) s
5 582 M
(row, Divinity etc can be assigned a color. As ThoughtNet is grown from beginning of life, stac) s
5 571 M
(ked up thoughts are colored where the sentiment coloring is learnt from environment. For examp) s
5 560 M
(le, first time a person encounters the above sentence he may not be familiar with sarcasm, but) s
5 549 M
( he might learn it is sarcastic from an acquaintance and this learning is stored with a "sarca) s
5 538 M
(stic" sentiment coloring in multiplanar thoughtnet hypergraph. Intensity of coloring determine) s
5 527 M
(s the strength of thought stored. Next instances of evocations ,for example "too good" and "co) s
5 516 M
(ntest" which is the crucial segment, return the above edge if intensely colored \(in a complex ) s
5 505 M
(setting, the lambda composition tree is returned ,not just the sentence\).) s
5 483 M
(\(*\) Example Poetry 3 - lambda evaluation with shuffled connectives, is shown below with nested) s
5 472 M
( parenthesization - Each parenthesis scope evaluates a lambda function and composed to a tree ) s
5 461 M
(- [Walrus-Carpenter - Alice in Wonderland]:) s
5 450 M
(\(\("The time has come,"\) \(the Walrus said\),) s
5 439 M
(\("To talk of many things:\)) s
5 428 M
(\(Of shoes--and ships--and sealing-wax--\)) s
5 417 M
(\(Of cabbages--and kings--\)) s
5 406 M
(And \(why \(the sea is boiling hot--\)\)) s
5 395 M
(And \(whether \(pigs have wings."\)\)\)) s
5 384 M
(This lambda composition itself can be classified in classes viz., "time", "poetry", "sea" etc.) s
5 373 M
(, \(in special case of gloss overlap this is easy to classify by computing high core numbers of) s
5 362 M
( the graph\). Above evaluation itself is stored in ThoughtNet as hyperedge in its entirety as t) s
5 351 M
(he "meta-learning", and not just "knowledge",and an edge coloring for sentiment can be assigne) s
5 340 M
(d. During future evocation, say utterance of word "time", the edge returned is the most intens) s
5 329 M
(ely colored edge.) s
5 307 M
(\(*\) Perfect design of Psycholinguistic text comprehension must involve ego-centric theory spec) s
5 296 M
(ific to each reader as mentioned previously. Combining EventNet and ThoughtNet throws another ) s
5 285 M
(challenge: When did ThoughtNet begin? Who was the primordial seed of thought? EventNet on the ) s
5 274 M
(other hand can be axiomatically assumed to have born during BigBang Hyperinflation and the res) s
5 263 M
(ultant "ultimate free lunch". Invoking Anthropic principle - "I think,therefore I am", "I exis) s
5 252 M
(t because I am supposed to exist" etc., - suggests the other way i.e EventNet began from Thoug) s
5 241 M
(htNet. Then, did consciousness create universe? Quoting an Indological text - Hymn of creation) s
5 230 M
( - Nasadiya Sukta - "Even non-existence did not exist in the beginning" which concurs with afo) s
5 219 M
(rementioned paradoxes. This theorizes duality arose from singularity throwing spanner into spo) s
5 208 M
(kes of linguistics which are based on duality of synonyms and antonyms. That is a glaringly di) s
5 197 M
(scordant note in achieving a perfect artificial intelligence. Thus conscious robot may never b) s
5 186 M
(e a reality.) s
5 164 M
(\(*\) Above exposition is required to get to the bottom of difficulties in formalising "what is ) s
5 153 M
(meant by meaning" and "intrinsic merit" in perfect sense. Graph theoretic intrinsic merit algo) s
5 142 M
(rithms might require quantum mechanical concepts like Bose-Einstein condensate mentioned in 18) s
5 131 M
(.10 i.e In recursive gloss overlap graph context, word vertices are energy levels and edges am) s
5 120 M
(ongst words are subatomic particles.) s
5 98 M
(\(*\) If ThoughtNet begot EventNet by anthropic principle, there is a possibility language was b) s
5 87 M
(orn before something existed in reality. For example, word "Earth" existed before Earth was cr) s
5 76 M
(eated. This presents another circular paradox - ThoughtNet implies EventNet implies ThoughtNet) s
5 65 M
( ... because events create thoughts and anthropic principle implies thought created events. Th) s
5 54 M
(is also implies thought created brain and its constituents which in turn think and "understand) s
5 43 M
( meaning" of a text - sort of Supreme consciousness splitting itself into individual conscious) s
5 32 M
(ness.) s
5 10 M
(\(*\) Another counterexample: A cretan paradox like sentence - "This sentence is a lie" - which ) s
_R
S
%%Page: (124) 124
%%BeginPageSetup
_S
18 36 translate
/pagenum 124 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (124) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(is true if it is false and false if true - Lambda function composition algorithm is beyond the) s
5 681 M
( scope of such sentences. This sentence exhibits 2 levels of truths and falsehoods - Truth/Fal) s
5 670 M
(sehood  within a sentence and Truth/Falsehood outside the sentence - in former observer and ob) s
5 659 M
(served are one and the same and in the latter observer stands aloof from observed) s
5 637 M
(\(*\) If there are two levels of Truth/Falsehoods similar to stratified realities defined in htt) s
5 626 M
(ps://sites.google.com/site/kuja27/UndecidabilityOfFewNonTrivialQuestions.pdf, above paradox "T) s
5 615 M
(his sentence is a lie" ican be analyzed \(kind of Godel sentence proving languages are incomple) s
5 604 M
(te\) as below with TRUE/FALSE and true/false being two levels of this nest:) s
5 593 M
(        - This sentence is a lie - true - self-refuting and circular) s
5 582 M
(        - This sentence is a lie - TRUE - not self-refuting because TRUE transcends "true") s
5 571 M
(        - This sentence is a lie - false - self-refuting and circular) s
5 560 M
(        - This sentence is a lie - FALSE - not self-refuting because FALSE transcends "false") s
5 538 M
(\(*\) \(QUITE PRESUMPTIVE, THIS MIGHT HAVE A PARALLEL IN LOGIC BUT COULDN'T FIND IT\) In other wor) s
5 527 M
(ds, the sentence "\(It is TRUE that \(this sentence is a lie\)\)" is different from "\(It is true t) s
5 516 M
(hat this sentence is a lie\)" - in the former the observer is independent of observed sentence ) s
5 505 M
(\(complete\) where as in the latter observer and observed coalesce \(incomplete\) - TRUE in former) s
5 494 M
( has scope beyond the inner sentence while true in latter is scope-restricted to the inner sen) s
5 483 M
(tence. If Truth and Falsehood are scoped with a universe of discourse, above paradox seems to ) s
5 472 M
(get reconciled and looks like an extension of Incompleteness theorems in logic. Natural langua) s
5 461 M
(ges and even Formal Logic have only one level of boolean truth/falsehood and thus previous is ) s
5 450 M
(mere a theoretical fancy.) s
5 428 M
(\(*\) Above philosophical dissection of meaning has striking similarities to quantum mechanics -) s
5 417 M
( If language has substructure abiding by quantum mechanics [e.g Bose-Einstein model for recurs) s
5 406 M
(ive gloss overlap wordnet subgraph], the links across words which correspond to subatomic part) s
5 395 M
(icles must obey Heisenberg uncertainty principle also i.e As a linguistic parallel, 100% accur) s
5 384 M
(ate meaning may never be found by any model of computation. This can not be ruled out if netwo) s
5 373 M
(rk is a random graph with probabilities for edges.) s
5 351 M
(\(*\) Levels of Truth are reminiscent of Tarski's Undefinability of Truth Theorem - https://plat) s
5 340 M
(o.stanford.edu/entries/goedel-incompleteness/#TarTheUndTru - There are two levels of languages) s
5 329 M
( - Inner Object Language and Outer Meta Language - Truth of statements in inner object languag) s
5 318 M
(es are determined in outer meta language. An example sentence in object language is the Cretan) s
5 307 M
( Paradox - "All cretans are liars". In previous example, "this sentence is a lie" is defined i) s
5 296 M
(n object language \(English\) and is a self-referential Goedel sentence. Truth of this sentence ) s
5 285 M
(has to be decided in metalanguage. Another example paradox sentence in object language is: "Th) s
5 274 M
(is is bigger than the biggest". Can truth of this be determined in object language? This can b) s
5 263 M
(e geometrically interpreted: If object language and metalanguage are vector spaces of dimensio) s
5 252 M
(ns k and k+l, any sentence in object language is a vector of dimension k \(e.g word2vec represe) s
5 241 M
(ntation extended to sentence2vec\) and truth of it has to be decided in metalanguage space of d) s
5 230 M
(imensions k+l. In object language space there can not be an entity bigger than biggest - e.g s) s
5 219 M
(et of concentric circles limited by outermost circle and truth of this sentence is "False". Bu) s
5 208 M
(t when this sentence is projected to a k+l metalanguage vector space, a circle "bigger" in k+l) s
5 197 M
( dimension vectorspace can exist, than the "biggest" circle in k dimension vectorspace and tru) s
5 186 M
(th is "True". Example of dimensions in a natural language are Parts-of-Speech.) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(----) s
5 142 M
(229. \(THEORY\) Bose-Einstein Condensate model for Recursive Gloss Overlap based Classification) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(----) s
5 109 M
(Bose-Einstein condensate fitness model by [Ginestra Bianconi] described in 18.10 for any compl) s
5 98 M
(ex network graph is:) s
5 87 M
(        Fitness of a vertex = 2^\(-b*Energy\) where b is a Bose-Einstein condensate function.) s
5 65 M
(Here fitness of a vertex is defined as ability to attract links to itself - Star complexity. I) s
5 54 M
(t is not known if ability of a word to attract links from other words is same as intrinsic mer) s
5 43 M
(it of a document in recursive gloss overlap context - prima facie both look equal. As energy o) s
5 32 M
(f a node decreases, it attracts increased number of node edges. In Recursive Gloss Overlap gra) s
5 21 M
(ph, node with maximum core number or PageRank must have lowest energy and hence the Fittest. P) s
5 10 M
(revious equation is by applying Einstein derivation of Satyendranath Bose's Planck's formula f) s
_R
S
%%Page: (125) 125
%%BeginPageSetup
_S
18 36 translate
/pagenum 125 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (125) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(or Quantum mechanics where in a critical temperature above zero kelvin most of the particles ") s
5 681 M
(condense" in lowest energy level. This was proved in 1995-2001 by NIST lab \(http://bec.nist.go) s
5 670 M
(v/\).) s
5 648 M
(Applying the above model to a relational graph obtained from text document implies graph theor) s
5 637 M
(etic representation of language has lurking quantum mechanical traits which should apply to al) s
5 626 M
(l semantic graphs and ontologies viz.,WordNet, ConceptNet etc.,. For example, when a winner wo) s
5 615 M
(rd vertex takes all links to other words, the winner word becomes a dictator and thus the only) s
5 604 M
( class a document can belong to. Thus Bose-Einstein condensate can be mapped to a Dictator boo) s
5 593 M
(lean function. This should ideally be extensible to structural complexity of circuit graphs i.) s
5 582 M
(e gate within a neural net TC circuit version of WordNet with maximum fanin and fanout has low) s
5 571 M
(est energy where neighbours flock. If energy implies information entropy in a document, low en) s
5 560 M
(ergy implies low entropy of a text i.e sigma\(p log p\) of a text as bag of words probability di) s
5 549 M
(stribution, decreases as text document increasingly becomes less chaotic and vice-versa holds ) s
5 538 M
(too. As a document becomes more chaotic with high entropy and energy, fitness per word vertex ) s
5 527 M
(decreases as there are multiple energy centres within it. Hence low entropy is equivalent to p) s
5 516 M
(resence of a high fitness word vertex in the graph.) s
5 494 M
(Analogy: Recursive Gloss Overlap graph can be construed as a 3 dimensional rubbersheet with lo) s
5 483 M
(w energy words as troughs. Deepest troughs are words \(lowest energy levels\) that classify a do) s
5 472 M
(cument.) s
5 450 M
(Reference:) s
5 439 M
(---------) s
5 428 M
(229.1 Linked [Albert Laszlo Barabasi] - Chapter 8 - Einstein's Legacy) s
5 417 M
(229.2 Bianconi-Barabasi Bose-Einstein Condensation in Networks, Simplicial Complexes, Intrinsi) s
5 406 M
(c Fitness - http://www.eng.ox.ac.uk/sen/files/symposium2017/bianconi.pdf) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(----------) s
5 362 M
(230. \(THEORY\) Expander Graphs, Bose-Einstein Condensate Fitness model and Intrinsic Merit) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(----------) s
5 329 M
(Edge expander graphs are defined with Cheeger's constant for minimum high edge boundary per ve) s
5 318 M
(rtex subset:) s
5 307 M
(        minimum\(|boundary\(S\)|/|S|\), 1 < |S| < n/2) s
5 296 M
(where boundary\(S\) of a subset S of vertices of G \(V\(G\)\) is:) s
5 285 M
(        boundary\(S\) = { \(u,v\) | u in S, v in V\(G\) \\ S}) s
5 274 M
(From Bose-Einstein condensate fitness model, ability of a vertex to attract links increases wi) s
5 263 M
(th decreasing energy of a vertex. This implies) s
5 252 M
(boundary\(S\) expands with presence of low energy vertices. Thus Bose-Einstein condensate model ) s
5 241 M
(translates into an edge expander construction. Also high expansion implies high star complexit) s
5 230 M
(y. Recursive Gloss Overlap graph with a low energy vertex is a high edge expander and easiliy ) s
5 219 M
(classifiable to a topic with core numbers.) s
5 197 M
(Measuring intrinsic merit \(and therefore fitness if both are equivalent concepts\) by edge expa) s
5 186 M
(nsion \(Cheeger's constant\) over and above usual connectivity measures formalises a stronger no) s
5 175 M
(tion of "meaningfulness" of a text document. For example High Cheeger's constant of RGO graph ) s
5 164 M
(implies high intrinsic merit of a text.) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(--------------------) s
5 120 M
(231. \(THEORY\) Sentiment analysis and ThoughtNet Continuum - Fine grained emotions and evocatio) s
5 109 M
(n - related to 228) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(--------------------) s
5 76 M
(\(*\) ThoughtNet need not be a discrete hypergraph but a continuum of edges and nodes. Analogy: ) s
5 65 M
(Set of countably infinite natural numbers and continuum of uncountably infinite reals. It is d) s
5 54 M
(ifficult to visualize a continuum as a graph - no graph theoretic gadget exists for a continuu) s
5 43 M
(m graph - Infinite graph is countable, Continuum graph is uncountable. By diagonalization, con) s
5 32 M
(tinuum could be as hard as halting problem.) s
5 21 M
(\(*\) Each feature of a visual thought is a class stack node in ThoughtNet. Number of features p) s
5 10 M
(er visual could be thousands. Visual is flattened) s
_R
S
%%Page: (126) 126
%%BeginPageSetup
_S
18 36 translate
/pagenum 126 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (126) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(into a hyperedge across class stack nodes corresponding to feature vector vertices.) s
5 681 M
(---------------------) s
5 670 M
(\(*\) Example schematic:) s
5 659 M
(----------------------) s
5 648 M
(                -------->Lambda computation---------) s
5 637 M
(returns         |                                  |  stores thought hyperedges) s
5 626 M
(evocatives      |                                  |) s
5 615 M
(                ---------ThoughtNet <---------------) s
5 604 M
(\(*\) Colors of Thought hyperedges are determined by sentimentality of class stack nodes. The cl) s
5 593 M
(ass stack nodes are colored too, not just edges. If an edge transcends various colored class s) s
5 582 M
(tack nodes, resultant color of thought hyperedge is a function of colors of constituent class ) s
5 571 M
(stack nodes:) s
5 560 M
(        Edge sentiment color of ThoughtNet Hyperedge = weight_function\(node colors in the hype) s
5 549 M
(redge\).) s
5 538 M
(\(*\) Node colors are priors. How these priors are decided for each class stack node is the main) s
5 527 M
(stay of emotional inference. This requires assumption of Desire/Prejudice/Bounded Rationality/) s
5 516 M
(Irrational Exuberance arising from Consciousness or equivalent. This irrationality creates a p) s
5 505 M
(re-conceived potential per class stack node, though no edges may be part of the class at all. ) s
5 494 M
(Irrationality has to be assumed to be an independent variable and atomic because if it is not,) s
5 483 M
( what it depends on is a question. Though previous inquisition on Sentiments, Meaning et al bo) s
5 472 M
(rder on Theology, it is inevitable to exclude the emotional root causes while working on a clo) s
5 461 M
(se-to-perfect mathematical simulation of human sentiments.) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(----------------) s
5 417 M
(232. VIRGO commits for AsFer Software Analytics with SATURN Program Analysis - 29 February 201) s
5 406 M
(6, 1 March 2016) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(----------------) s
5 373 M
(-------------------------------------------------------------------------------------) s
5 362 M
(Software Analytics - SATURN Program Analysis added to VIRGO Linux kernel drivers) s
5 351 M
(-------------------------------------------------------------------------------------) s
5 340 M
(- SATURN \(saturn.stanford.edu\) Program Analysis and Verification software has been) s
5 329 M
(integrated into VIRGO Kernel as a Verification+SoftwareAnalytics subsystem) s
5 318 M
(- A sample driver that can invoke an exported function has been added in drivers - saturn_prog) s
5 307 M
(ram_analysis) s
5 296 M
(- Detailed document for an example null pointer analysis usecase has been created in virgo-doc) s
5 285 M
(s/VIRGO_SATURN_Program_Analysis_Integration.txt) s
5 274 M
(- linux-kernel-extensions/drivers/virgo/saturn_program_analysis/saturn_program_analysis_trees/) s
5 263 M
(error.txt is the error report from SATURN) s
5 252 M
(- SATURN generated preproc and trees are in linux-kernel-extensions/drivers/virgo/saturn_progr) s
5 241 M
(am_analysis/preproc and) s
5 230 M
(linux-kernel-extensions/drivers/virgo/saturn_program_analysis/saturn_program_analysis_trees/) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(--------------) s
5 186 M
(233. \(FEATURE-DONE\) Commits as on 3 March 2016 - PERL WordNet::Similarity subroutine for pair ) s
5 175 M
(of words) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(--------------) s
5 142 M
(*\) New perl-src folder with perl code for computing WordNet Distance with Ted Pedersen et al W) s
5 131 M
(ordNet::Similarity CPAN module) s
5 120 M
(*\) Logs for some example word distances have been included in testlogs. Some weird behaviour f) s
5 109 M
(or similar word pairs - distance is 1 instead of 0. Probably a clockwise distance rather than ) s
5 98 M
(anticlockwise.) s
5 76 M
(This leverages PERLs powerful CPAN support for text data processing. Also python can invoke PE) s
5 65 M
(RL with PyPerl if necessary.) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(-------------) s
5 21 M
(234. \(FEATURE-DONE\) PERL WordNet::Similarity build and python issues notes) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (127) 127
%%BeginPageSetup
_S
18 36 translate
/pagenum 127 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (127) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-------------) s
5 681 M
(- NLTK WordNet corpora despite being 3.0 doesnot work with WNHOME setting \(errors in exception) s
5 670 M
( files and locations of lot of files are wrongly pointed to\)) s
5 659 M
(- Only Direct download from Princeton WordNet 3.0 works with WNHOME.) s
5 648 M
(- Tcl/Tk 8.6 is prerequisite and there is a build error "missing result field in Tk_Inter" in ) s
5 637 M
(/usr/include/tcl8.6/tcl.h. Remedy is to enable USE_INTERP_RESULT flag with macro: #define USE_) s
5 626 M
(INTERP_RESULT  1 in this header and then do:) s
5 615 M
(        make Makefile.PL) s
5 604 M
(        make) s
5 593 M
(        make install) s
5 582 M
(in WordNet::Similarity with WNHOME set to /usr/local/WordNet-3.0.) s
5 571 M
(- PyPerl is no longer in active development - so only subprocess.call\(\) is invoked to execute ) s
5 560 M
(perl with shell=False.) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(-------------) s
5 516 M
(235. \(THEORY\) Dream Sentiment Analysis with ThoughtNet - related to 18 and 228) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(-------------) s
5 483 M
(Dream Analysis in http://cogprints.org/5030/1/NRC-48725.pdf \(mentioned in 18.8\) scores dreams ) s
5 472 M
(based on polarity with bag of words representation- dreams are known to be related to Limbic a) s
5 461 M
(nd Paralimbic systems in brain. Insofar as theories pertaining to ThoughtNet described in 18 a) s
5 450 M
(nd 228 are concerned, only conscious evocatives arising from events are described. Going a ste) s
5 439 M
(p further, can ThoughtNet account for interpretation of dreams? Dreams, psychologically, are k) s
5 428 M
(nown to be vagaries of suppressed thoughts manifesting in subsconscious state. ThoughtNet stor) s
5 417 M
(es thoughts of experiences,visuals and events as hyperedges consciously. A dream model is prop) s
5 406 M
(osed where in subsconscious/RapidEyeMovement state, Thought hyperedges momentarily disintegrat) s
5 395 M
(e and re-arrange to form new edges manifesting as dream visuals. Once dream expires, these dre) s
5 384 M
(am edges are dissolved and original ThoughtNet is restored. Before dissolution, dream might be) s
5 373 M
( stored if potentially strong. This explains why some dreams linger after wakeup. Caveat: this) s
5 362 M
( is just a theory of dream analysis based on some thought experimentation and has no scientifi) s
5 351 M
(c backing. This model makes an assumption that dream hyperedges are functions of preexisting T) s
5 340 M
(houghtNet hyperedges which is not quite right because there are exceptional phenomena like ext) s
5 329 M
(ra-sensory perception where visions of future are observed by few individuals which could not ) s
5 318 M
(have arisen from past experience and thoughts. ESP implies brain has faculty to foresee inhere) s
5 307 M
(ntly in a superconsicous state which is subdued in normal conscious state. It is more accurate) s
5 296 M
( to say that dream hyperedges are functions of both past thought hyperedges and superconscious) s
5 285 M
( hidden variables which might explain ESP.) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(--------------) s
5 241 M
(236. \(THEORY\) Regularity Lemma and Ramsey Number of Recursive Gloss Overlap graph and ThoughtN) s
5 230 M
(et) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(--------------) s
5 197 M
(Throughout this document, ranking of documents which is so far a pure statistical and machine ) s
5 186 M
(learning problem is viewed from Graph Theory and Lambda Function growth perspective - theory i) s
5 175 M
(nvades what was till now engineering.  Both Regularity Lemma and Ramsey theory elucidate order) s
5 164 M
( in large graphs. Regularity Lemma has a notion of density which is defined as:) s
5 153 M
(        d\(V1, V2\) = |E\(V1, V2\)|/|V1||V2|) s
5 142 M
(where V1 and V2 are subsets of vertices V\(G\) for a graph G and E\(V1,V2\) are edges among subset) s
5 131 M
(s V1 and V2. Density is a quantitative measure of graph complexity and intrinsic connectedness) s
5 120 M
( merit of a text document. Ramsey Number R\(a,b\) of a graph is the least number such that there) s
5 109 M
( always exists a graph of vertex order R\(a,b\) with a clique of size a or an independent set of) s
5 98 M
( size b. Typically associated with "Party problem" where it is required to find minimum number) s
5 87 M
( of people to be invited so that a people know each other or b people do not know each other, ) s
5 76 M
(Ramsey number of ThoughtNet sentiment colorings - e.g bipartisan red-blue colorings for 2 thou) s
5 65 M
(ght hyperedge sentiment polarities - provides a theoretical bound on size of ThoughtNet as suc) s
5 54 M
(h so that order arises in a motley mix of emotionally tagged thoughts - a clique of similar se) s
5 43 M
(ntimental edges emerges. Similar application of Ramsey number holds good for Recursive Gloss O) s
5 32 M
(verlap graph also - a document's graph can have cliques and independent sets with vertex color) s
5 21 M
(ings for word sentiments.) s
_R
S
%%Page: (128) 128
%%BeginPageSetup
_S
18 36 translate
/pagenum 128 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (128) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(==============================================================================================) s
5 681 M
(============================) s
5 670 M
(237. \(FEATURE-DONE\) Commits as on 11 March 2016 - Deep Learning Convolution - Multi Feature Co) s
5 659 M
(nvolution Map Kernel Filters) s
5 648 M
(==============================================================================================) s
5 637 M
(============================) s
5 626 M
(- Convolution Network supports Multiple Feature Maps \(presently 3\)) s
5 615 M
(- New example bitmap for feature recognition of pattern "3" inscribed as 1s has been introduce) s
5 604 M
(d) s
5 593 M
(- Final neural network from Max pooling layer now is randomized with randint\(\) based weights f) s
5 582 M
(or) s
5 571 M
(each of the 10 neurons) s
5 560 M
(- Logs for this have been committed to testlogs) s
5 549 M
(- Logs show a marked swing in Maxpooling map where the segments of pattern "3" are pronounced.) s
5 538 M
(- Final neural layer shows a variegated decision from each neuron for corresponding 3 convolut) s
5 527 M
(ion maps) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(-----------------) s
5 483 M
(238. \(FEATURE-DONE\) Commits as on 14 March 2016) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(-----------------) s
5 450 M
(    - Some bugs resolved) s
5 439 M
(    - Added one more example with no pattern) s
5 428 M
(    - Convolution is computed for all 3 bitmap examples) s
5 417 M
(    - Final neuron layer now is a function of each point in all maxpooling layers) s
5 406 M
(    - The existence of pattern is identified by the final output of each of 10 neurons) s
5 395 M
(    - Patterns 0 and 3 have a greater neural value than no pattern. Gradation of neural value ) s
5 384 M
(indicates intensity of pattern.) s
5 373 M
(    - Above is a very fundamental pattern recognition for 2 dimensional data. Sophisticated de) s
5 362 M
(convolution is explained in http://arxiv.org/abs/1311.2901 which reverse engineers pooling lay) s
5 351 M
(ers with Unpooling.) s
5 340 M
(    - 3 logs for this commit have been included in testlogs/) s
5 329 M
(    - random weighting has been removed.) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(-----------------) s
5 285 M
(239. \(THEORY\) Deep Learning Convolution Network and a boolean function learning algorithm of d) s
5 274 M
(ifferent kind) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(-----------------) s
5 241 M
(Deep Learning Convolution Network for Image Pattern Recognition elicits features from the imag) s
5 230 M
(e considered as 2-dimensional array. In the) s
5 219 M
(Deep Learning implementation in python-src/ image is represented as {0,1}* bitmap blob. Each r) s
5 208 M
(ow of this bit map can be construed as satisfying assignment to some boolean function to be le) s
5 197 M
(arnt. Thus the 2-dimensional bitmap is set of assignments satisfying a boolean function - A bo) s
5 186 M
(olean function learnt from this data - by some standard algorithms viz., PAC learning, Hastad-) s
5 175 M
(Linial-Mansour-Nisan fourier coefficient concentration bounds and low-degree polynomial approx) s
5 164 M
(imation \(learning phase averages the coefficients from all sample points and prediction phase ) s
5 153 M
(uses this averaged fourier coefficient\) - accepts the image as input. Deep Learning Convolutio) s
5 142 M
(n Network is thus equivalent to a boolean function learnt from an image - quite similar to HML) s
5 131 M
(N low-degree learning, deep learning convolution also does weighted averaging in local recepti) s
5 120 M
(ve field feature kernel map layers, maxpooling layer and final neuron layers with binary outpu) s
5 109 M
(t. Essentially convolution learns a TC circuit. It presupposes existence of set of satisfying ) s
5 98 M
(assignments which by itself is a #P-complete problem. This connects two hitherto unrelated con) s
5 87 M
(cepts - Image Recognition and Satisifiability - into a learning theory algorithm for 2-dimensi) s
5 76 M
(onal binary data. Same learning theory approach may not work for BackPropagation which depend ) s
5 65 M
(on 4 standard Partial Differential Equations.) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(-----------------) s
5 21 M
(240. \(FEATURE-DONE\) Commits as on 15 March 2016) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (129) 129
%%BeginPageSetup
_S
18 36 translate
/pagenum 129 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (129) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-----------------) s
5 681 M
(- DeepLearning BackPropagation implementation:) s
5 670 M
(        - An example Software Analytics usecase for CPU and Memory usage has been included) s
5 659 M
(        - Number of Backpropagation weight update iterations has been increased 10 fold to 300) s
5 648 M
(0000.) s
5 637 M
(        - logs for some iterations have been included in testlogs/) s
5 626 M
(- DeepLearning Convolution Network implementation:) s
5 615 M
(        - Image patterns have been changed to 0, 8 and no-pattern.) s
5 604 M
(        - Final neuron layer weights have been changed by squaring to scale down the output - ) s
5 593 M
(this differentiates patterns better.) s
5 582 M
(        - logs for this have been included in testlogs/) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(----------------) s
5 538 M
(241. \(THEORY and IMPLEMENTATION\) ThoughtNet and Reinforcement Learning) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(----------------) s
5 505 M
(Reinforcement Learning is based on following schematic principle of interaction between enviro) s
5 494 M
(nment and agent learning from environment. ThoughtNet described in 228 and previous is an envi) s
5 483 M
(ronmental context that every human agent has access to in decision making. This makes human th) s
5 472 M
(ought process and thought-driven-actions to be a special case of Reinforcement Learning. Reinf) s
5 461 M
(orcement Learning is itself inspired by behavioural psychology.) s
5 439 M
(                                ---------> ThoughtNet context \(environment\) ------) s
5 428 M
(        action \(evocation\)      |                                                |  reward and) s
5 417 M
( state transition \(most potent evocative thought\)) s
5 406 M
(                                |<----------- Text Document \(agent\) ------<----- |) s
5 384 M
(Schematic above illustrates text document study as reinforcement learning. During left-right r) s
5 373 M
(eading of text, evocation action is taken per-word which accesses ThoughtNet storage and retur) s
5 362 M
(ns a reward which is the strongest thought edge. State transition after each evocation is the ) s
5 351 M
(partially evaluated lambda composition prefix mentioned in 222 - this prefix is updated after ) s
5 340 M
(reading each word left-right. Human practical reading is most of the time lopsided - it is not) s
5 329 M
( exactly left-right but eye observes catchy keywords and swivels/oscillates around those pivot) s
5 318 M
(s creating a balanced composition tree. Error in disambiguation can be simulated with a model ) s
5 307 M
(similar to what is known as "Huygen's Gambler's Ruin Theorem" which avers that in any Gambling) s
5 296 M
(/Betting game, player always has a non-zero probability of becoming insolvent - this is throug) s
5 285 M
(h a Bernoulli trial sequence as below with fair coin toss \(probability=0.5\):) s
5 274 M
(        - 1\) First coin flip - Pr\(doubling1\) = 0.5, Pr\(bankrupt1\) = 0.5) s
5 263 M
(        - 2\) Second coin flip - Pr\(bankrupt2\) = Pr\(bankrupt1\)*0.5 = 0.25) s
5 252 M
(        - 3\) Third coin flip - Pr\(bankrupt3\) = Pr\(bankrupt2\)*0.5 = 0.125) s
5 241 M
(        ....) s
5 230 M
(By union bound probability of gambler going bankrupt after infinite number of coin flips is 1.) s
5 219 M
( This convergence to 1 applies to unfair biased coin tosses also. This theorem has useful appl) s
5 208 M
(ication in ThoughtNet reinforcement learning disambiguation. Reward is defined as probability ) s
5 197 M
(of most potent evocative thought being retrieved from ThoughtNet \(this is when return value is) s
5 186 M
( set of hyperedges and not unique - probability of reward is 1/size_of_set_returned\) and state) s
5 175 M
( transition is akin to consecutive coin flips. This proves that probability of imperfect disam) s
5 164 M
(biguation is eventually 1 even though reward probability is quite close to 1.) s
5 142 M
(A ThoughtNet Reinforcement Learning implementation has been committed as part of python-src/De) s
5 131 M
(epLearning_ReinforcementLearningMonteCarlo.py) s
5 109 M
(References:) s
5 98 M
(-----------) s
5 87 M
(241.1 Reinforcement Learning - [Richard Sutton] - http://webdocs.cs.ualberta.ca/~sutton/book/t) s
5 76 M
(he-book.html, https://www.dropbox.com/s/b3psxv2r0ccmf80/book2015oct.pdf?dl=0.) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(--------------------------------) s
5 32 M
(242. \(FEATURE-BENCHMARK-DONE\) Interview Algorithm PySpark-Cython implementation benchmark with) s
5 21 M
( and without Spark configurables) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (130) 130
%%BeginPageSetup
_S
18 36 translate
/pagenum 130 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (130) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(--------------------------------) s
5 681 M
(This benchmark is done with both:) s
5 670 M
(InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.py) s
5 659 M
(InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py) s
5 648 M
(both precompiled with Cython to create .c source files and .so libraries.) s
5 626 M
(Number of keywords in newly crawled web page: 35) s
5 604 M
(---------------------------) s
5 593 M
(With spark-defaults.conf :) s
5 582 M
(---------------------------) s
5 571 M
(Execution 1:) s
5 560 M
(------------) s
5 549 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 538 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 527 M
(gorithm/testlogs# for i in `grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_S) s
5 516 M
(park.2localthreads.CythonOptimized.16March2016.out |grep TaskSetManager| awk '{print $14}'`) s
5 505 M
(> do) s
5 494 M
(> sum=$\(expr $sum + $i\)) s
5 483 M
(> done) s
5 461 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 450 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 439 M
(gorithm/testlogs# echo $sum) s
5 428 M
(243058) s
5 417 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 406 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 395 M
(gorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.2loca) s
5 384 M
(lthreads.CythonOptimized.16March2016.out |grep TaskSetManager| awk '{print $14}'|wc -l) s
5 373 M
(156) s
5 362 M
(Per task time in milliseconds: ~1558) s
5 340 M
(------------) s
5 329 M
(Execution 2:) s
5 318 M
(------------) s
5 307 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 296 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 285 M
(gorithm/testlogs# for i in `grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_S) s
5 274 M
(park.2localthreads.CythonOptimized2.16March2016.out |grep TaskSetManager| awk '{print $14}'`) s
5 263 M
(> do) s
5 252 M
(> sum=$\(expr $sum + $i\)) s
5 241 M
(> done) s
5 230 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 219 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 208 M
(gorithm/testlogs# echo $sum) s
5 197 M
(520074) s
5 186 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 175 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 164 M
(gorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.2loca) s
5 153 M
(lthreads.CythonOptimized2.16March2016.out |grep TaskSetManager| awk '{print $14}'|wc -l) s
5 142 M
(312) s
5 131 M
(Per task time in milliseconds: ~1666) s
5 109 M
(------------------------------) s
5 98 M
(Without spark-defaults.conf) s
5 87 M
(------------------------------) s
5 76 M
(Execution 3:) s
5 65 M
(------------) s
5 54 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 43 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 32 M
(gorithm/testlogs# echo $sum) s
5 21 M
(69691) s
5 10 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
_R
S
%%Page: (131) 131
%%BeginPageSetup
_S
18 36 translate
/pagenum 131 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (131) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 681 M
(gorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.2loca) s
5 670 M
(lthreads.CythonOptimized3.16March2016.out |grep TaskSetManager| awk '{print $14}'|wc -l) s
5 659 M
(156) s
5 648 M
(Per task time in milliseconds: ~446 which is twice faster than earlier benchmark done in Febru) s
5 637 M
(ary 2016 and almost 4 times faster than previous 2 executions with spark-defaults.conf enabled) s
5 626 M
(.) s
5 604 M
(A spark-defaults.conf file has been committed to repository \(Reference: http://spark.apache.or) s
5 593 M
(g/docs/latest/configuration.html\). With Spark configuration settings for memory and multicore,) s
5 582 M
( something happens with Spark performance which is counterintuitive despite document size bein) s
5 571 M
(g almost same.) s
5 549 M
(----------------------------------------------------------) s
5 538 M
(243. Commits \(1\) as on 16,17 March 2016) s
5 527 M
(----------------------------------------------------------) s
5 516 M
(PySpark-Cython Interview Algorithm for Merit - Benchmark) s
5 505 M
(----------------------------------------------------------) s
5 494 M
(- 3 executions with and without spark-defaults.conf config settings have been benchmarked) s
5 483 M
(- Cython setup.py has been updated to compile both InterviewAlgorithmWithIntrinisicMerit_Crawl) s
5 472 M
(_Visual_Spark.py and InterviewAlgorithmWithIntrinisicMerit_SparkMapReducer.py) s
5 461 M
(to create .c and .so files) s
5 450 M
(- Benchmark yields some intriguing results:) s
5 439 M
(        - Executions with spark-defaults.conf enabled are 4 times slower than executions witho) s
5 428 M
(ut spark-defaults.conf) s
5 417 M
(        - Execution without spark config is twice faster than earlier benchmark) s
5 406 M
(- Logs and screenshots for above have been committed to testlogs) s
5 395 M
(- Text document has been recrawled and updated \(number of keywords almost same as previous ben) s
5 384 M
(chmark\)) s
5 373 M
(- Spark config file has been committed) s
5 351 M
(---------------------------------------------------------------) s
5 340 M
(244. Commits \(2\) as on 16,17 March 2016) s
5 329 M
(---------------------------------------------------------------) s
5 318 M
(More benchmarking of PySpark-Cython Intrinsic Merit computation) s
5 307 M
(----------------------------------------------------------------) s
5 296 M
(- Enabled Spark RDD cacheing with cache\(\) - storage level MEMORY) s
5 285 M
(- Recompiled .c and .so with Cython) s
5 274 M
(- uncommented both lines in Cython setup.py) s
5 263 M
(- logs and screenshots for above have been committed in testlogs/) s
5 252 M
(- locking.acquire\(\) and locking.release\(\) have been commented) s
5 241 M
(- With this per task duration has been brought down to ~402 milliseconds on single node cluste) s
5 230 M
(r. Ideally on a multinode cluster) s
5 219 M
(when tasks are perfectly distributable, this should be the runtime.) s
5 197 M
(--------------------------------------------------------------------------------) s
5 186 M
(With spark-defaults.conf - multiple contexts disabled and reuse worker enabled) s
5 175 M
(--------------------------------------------------------------------------------) s
5 164 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 153 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 142 M
(gorithm/testlogs# echo $sum) s
5 131 M
(246796) s
5 120 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 109 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 98 M
(gorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.2loca) s
5 87 M
(lthreads.CythonOptimized.17March2016.out |grep TaskSetManager| awk '{print $14}'|wc -l) s
5 76 M
(156) s
5 65 M
(Per task time milliseconds: ~1582) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(-------) s
5 21 M
(Without spark-defaults.conf - locking.acquire\(\)/release\(\) disabled and Spark RDD cacheing enab) s
5 10 M
(led) s
_R
S
%%Page: (132) 132
%%BeginPageSetup
_S
18 36 translate
/pagenum 132 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (132) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(-------) s
5 670 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 659 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 648 M
(gorithm/testlogs# echo $sum) s
5 637 M
(248900) s
5 626 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 615 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 604 M
(gorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.2loca) s
5 593 M
(lthreads.CythonOptimized2.17March2016.out |grep TaskSetManager| awk '{print $14}'|wc -l) s
5 582 M
(618) s
5 571 M
(Per task time milliseconds: ~402 \(fastest observed thus far per task; Obviously something is w) s
5 560 M
(rong with spark-defaults.conf enabled\)) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(--------------------------------) s
5 516 M
(245. \(FEATURE-BENCHMARK-DONE\) Interview Algorithm PySpark-Cython implementation benchmark with) s
5 505 M
( Spark configurables) s
5 494 M
(- Commits as on 21 March 2016) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(--------------------------------) s
5 461 M
(Following benchmark was done with a new spark-defaults.conf \(committed as spark-defaults2.conf) s
5 450 M
(\):) s
5 428 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 417 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 406 M
(gorithm/testlogs# echo $sum) s
5 395 M
(965910) s
5 384 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 373 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/GitHub/asfer-github-code/python-src/InterviewAl) s
5 362 M
(gorithm/testlogs# grep Finished InterviewAlgorithmWithIntrinisicMerit_Crawl_Visual_Spark.2loca) s
5 351 M
(lthreads.CythonOptimized.21March2016.out |grep TaskSetManager| awk '{print $14}'|wc -l) s
5 340 M
(618) s
5 329 M
(Time per task in milliseconds: ~1562 \(Again, with spark-defaults.conf with some additional set) s
5 318 M
(tings, there is a blockade\)) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(----------------------------------) s
5 274 M
(246. \(THEORY\) Learning a variant of Differential Privacy in Social networks) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(----------------------------------) s
5 241 M
(Nicknames/UserIds in social media are assumed to be unique to an individual. Authentication an) s
5 230 M
(d authorization with Public-Key Infrastructure) s
5 219 M
(is assumed to guarantee unique identification. In an exceptional case, if more than one person) s
5 208 M
( shares a userid intentionally or because of cybercrime to portray a false picture of other en) s
5 197 M
(d, is it possible to distinguish and learn such spoof behaviour? This is a direct opposite of ) s
5 186 M
(differential privacy [Cynthia Dwork - http://research.microsoft.com/pubs/64346/dwork.pdf] wher) s
5 175 M
(e 2 databases differing in one element are indistinguishable to queries by a randomized algori) s
5 164 M
(thm with coin tosses. But in previous example of shared id\(s\) in social network, distinguisher) s
5 153 M
( should be able to discern the cases when a remote id is genuine and spoofed/shared - probably) s
5 142 M
( suitable name for it is Differential Identification. This can theoretically happen despite al) s
5 131 M
(l PKI security measures in place when id is intentionally shared i.e a coalition of people dec) s
5 120 M
(ide to hoodwink PKI by sharing credentials and the receiving end sees them as one. For example) s
5 109 M
(, if a chat id is compromised by a coalition, the chat transcript is no longer credible reflec) s
5 98 M
(tion of the other end, and receiving end may not be aware of this at all. Here chat transcript) s
5 87 M
( is a mix of both genuine and spoofed portrayal of other end. An example statistical Learning ) s
5 76 M
(algorithm for distinguishing when spoof happened analyzes the chat transcript conversations wi) s
5 65 M
(th genuine chat as priors if there is a prior available. Non-statistically, it is not known ho) s
5 54 M
(w a boolean function learner would look like for this example. A special case is when a coalit) s
5 43 M
(ion is unnecessary. The remote end can be a single individual garnering collective wisdom from) s
5 32 M
( multiple sources to present a deceptive portrayal of multitude.) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (133) 133
%%BeginPageSetup
_S
18 36 translate
/pagenum 133 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (133) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------) s
5 681 M
(247. \(FEATURE-DONE\) Commits as on 24 March 2016 - Code Optimizations - Cacheing and Loop invar) s
5 670 M
(iant - Interview Algorithm) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(----------------------------------) s
5 637 M
(- New Cacheing datastructures have been included for storing already found previous level back) s
5 626 M
(edge vertices for each level and) s
5 615 M
(already found gloss tokens. Presently these caches are python dictionaries only and in a distr) s
5 604 M
(ibuted setting this can be replaced with an) s
5 593 M
(object key-value stores like memcached.\(InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMer) s
5 582 M
(it_SparkMapReducer.py\)) s
5 571 M
(- There was an inefficient loop invariant computation for prevelevesynsets_tokens which has be) s
5 560 M
(en moved to outermost while.\(InterviewAlgorithm/InterviewAlgorithmWithIntrinisicMerit_Crawl_Vi) s
5 549 M
(sual_Spark.py\)) s
5 538 M
(- spark-default2.conf has been updated with few more Spark config settings) s
5 527 M
(- Spidered text has been recrawled) s
5 516 M
(- logs and screenshots for this commits have been included in testlogs/) s
5 505 M
(- Cython .c , .so files have been rebuilt) s
5 494 M
(- Cacheing above in someway accomplishes the isomorphic node removal by way of Cache lookup) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(----------------------------) s
5 450 M
(248. \(FEATURE-BENCHMARK-DONE\) Intrinsic Merit PySpark-Cython implementation - With and Without) s
5 439 M
( cacheing) s
5 428 M
(- Commits as on 25 March 2016) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(----------------------------) s
5 395 M
(1.Cache md5 hashkey has been changed to be the complete tuple \(tokensofprevlevel,keyword\) - th) s
5 384 M
(e rationale is to have perfect) s
5 373 M
(uniqueness to find backvertices for a keyword and gloss from previous recursion step.) s
5 362 M
(2.Following benchmark was done by disabling and enabling lookupCache and lookupCacheParents bo) s
5 351 M
(olean flags.) s
5 340 M
(3.Cache values are "Novalue" string literals by default initialized in lambda and the Cache up) s
5 329 M
(dates are not append\(\)s but) s
5 318 M
(simple key-value assignments.) s
5 307 M
(--) s
5 296 M
(Number of keywords: 7) s
5 285 M
(Without Cacheing: 9 minutes for all tasks \(including NetworkX and graphics rendering times whi) s
5 274 M
(ch is quite considerable\)) s
5 263 M
(With Cacheing: 9 minutes for all tasks \(including NetworkX and graphics rendering times which ) s
5 252 M
(is quite considerable\)) s
5 230 M
(Summation of individual task times in milliseconds and averaging sometimes gives misleadingly ) s
5 219 M
(high duration per task though) s
5 208 M
(total execution is faster. Because of this start-end time duration is measured. For above exam) s
5 197 M
(ple Cacheing has no effect because) s
5 186 M
(there are no repetitions cached to do lookup. Logs and screenshots with and without cacheing h) s
5 175 M
(ave been committed to testlogs/) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(----------------------------) s
5 131 M
(249. \(THEORY\) An alternative USTCONN LogSpace algorithm for constructing Recursive Gloss Overl) s
5 120 M
(ap Graph) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(----------------------------) s
5 87 M
(Benchmarks above are selected best from multiple executions. Sometimes a mysterious slowdown w) s
5 76 M
(as observed with both CPUs clocking 100%) s
5 65 M
(load which could be result of JVM Garbage Collection for Spark processes among others. These b) s
5 54 M
(enchmarks are thus just for assessing feasibility of Spark clustering only and a perfect bench) s
5 43 M
(mark might require a cloud of few thousand nodes for a crawled webpage. At present there is no) s
5 32 M
( known standard algorithm to convert a natural language text to a relational graph without Wor) s
5 21 M
(dNet and internally looking up some *Net ontology to get path relations between two words coul) s
5 10 M
(d be indispensable theoretically speaking. This is the reverse process of Graph Traversals - B) s
_R
S
%%Page: (134) 134
%%BeginPageSetup
_S
18 36 translate
/pagenum 134 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (134) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(readth First and Depth First - traversal is the input text and a graph has to be extracted fro) s
5 681 M
(m it. For n keywords, there are n^2 ordered pairs of word vertices possible for each of which ) s
5 670 M
(WordNet paths have to be found. This is Undirected ST Connectivity in graphs for which there a) s
5 659 M
(re quite a few algorithms known right from [Savitch] theorem upto [OmerReingold] ZigZag produc) s
5 648 M
(t based algorithm in logspace. This is more optimal compared to all pairs shortest paths on Wo) s
5 637 M
(rdNet. This algorithm does not do deep learning recursion top-down to learn a graph from text.) s
5 626 M
( For all pairs this is  better than O\(n^3\) which is upperbound for All Pairs Shortest Paths. T) s
5 615 M
(hese n^2 pairs of paths overlap and intersect to create a graph. Presently implemented Recursi) s
5 604 M
(ve Gloss Overlap learns deeper than all pairs USTCONN algorithm because it uses "superinstance) s
5 593 M
(" notion - whether x is in definition of y - something absent in WordNet jargon. This algorith) s
5 582 M
(m is quadratic in number of words where as Recursive Gloss Overlap is linear - O\(n*d*s^tmax/cp) s
5 571 M
(us\) - counterintuitively.) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(----------------------------) s
5 527 M
(250. Commits as on 29 March 2016) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(----------------------------) s
5 494 M
(- New subroutine for printing WordNet Synset Path between 2 words - this prints edges related ) s
5 483 M
(by hypernyms and hyponyms) s
5 472 M
(- an example log has been committed in testlogs/) s
5 450 M
(From the example path in logs, distance is more of a metapath than a thesaurus-like path imple) s
5 439 M
(mented in Recursive Gloss Overlap in NeuronRain. Due to this limitation of WordNet hyper-hypon) s
5 428 M
(yms the usual unsupervised classifier based on core numbers of the graph translated from text ) s
5 417 M
(would not work as accurately with straightforward WordNet paths. This necessitates the superin) s
5 406 M
(stance relation which relates two words k and l: k is in definition of l.) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(-------------------------) s
5 362 M
(251. \(FEATURE-DONE\) Commits \(1\) as on 30 March 2016 - MemCache Integration with Spark-Cython I) s
5 351 M
(ntrinsic Merit Computation) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(-------------------------) s
5 318 M
(- In this commit, native python dictionary based cache lookup for Spark_MapReduce\(\) and Spark_) s
5 307 M
(MapReduce_Parents\(\) is replaced with) s
5 296 M
(standard MemCache Distributed Object Cacheing get\(\)/set\(\) invocations.) s
5 285 M
(- Logs and Screenshots for above have been committed to testlogs/) s
5 274 M
(- Prerequisites are MemCached \(ubuntu apt package\) and Python-memcache \(pip install\) libraries) s
5 263 M
(- a recrawled webpage has been merit-computed) s
5 252 M
(- MemCached is better than native dict\(s\) because of standalone nature of Cache Listener which) s
5 241 M
( can be looked up from) s
5 230 M
(anywhere on cloud) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(----------------------------------) s
5 186 M
(252. \(FEATURE-DONE\) Commits \(2\) as on 30 March 2016 - Spark-Cython Intrinsic Merit computation) s
5 175 M
( with spark-defaults.conf enabled) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(----------------------------------) s
5 142 M
(- spark-defaults2.conf has been enabled with extra java options for performance \(reference: ht) s
5 131 M
(tp://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\)) s
5 120 M
(- lookupCache and lookupCacheParents boolean flags have been done away with because memcache h) s
5 109 M
(as been enabled by default for subgraph cacheing) s
5 98 M
(- With this spark logs show more concurrency and less latency. Dynamic allocation was in confl) s
5 87 M
(ict with number of executors and executors has been hence commented in spark-defaults2.conf) s
5 76 M
(- text document has been updated to have ~10 keywords. This took almost 7 minutes which looks ) s
5 65 M
(better than one with spark-defaults.conf disabled) s
5 54 M
(- Screenshot and logs have been committed in testlogs/) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(--------------------------------) s
5 10 M
(253. \(FEATURE-DONE\) Commits as on 1 April 2016) s
_R
S
%%Page: (135) 135
%%BeginPageSetup
_S
18 36 translate
/pagenum 135 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (135) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(--------------------------------) s
5 670 M
(Loopless Map function for Spark_MapReduce\(\)) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(--------------------------------) s
5 637 M
(- new Map function MapFunction2\(\) has been defined which doesn't loop through all keywords per) s
5 626 M
( level, but does the glossification per keyword) s
5 615 M
(which is aggregated by Reduce step. MapFunction\(\) does for loop for all keywords per level.) s
5 604 M
(- a dictionary cacheing with graphcachelocal has been done for lookup of already gloss-tokeniz) s
5 593 M
(ed keywords. This couldn't be memcached due to a weird error that resets the graphcachelocal t) s
5 582 M
(o a null which shouldn't have.) s
5 571 M
(- This has a execution time of 6 minutes overall for all tasks compared to for-loop Map functi) s
5 560 M
(on in Spark_MapReduce\(\).) s
5 549 M
(- logs and screenshots for Loopless Map with and without graphcachelocal have been committed) s
5 538 M
(- Rebuilt Cython .c, .o, .so, intrinsic merit log and DOT files) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(--------------------------------) s
5 494 M
(254. \(THEORY\) Hypercontractivity - Bonami-Beckner Theorem Inequality, Noise Operator and p-Nor) s
5 483 M
(m of Boolean functions) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(--------------------------------) s
5 450 M
(Hypercontractivity implies that noise operator attenuates a boolean function and makes it clos) s
5 439 M
(e to constant function. Hypercontractivity is) s
5 428 M
(defined as:) s
5 417 M
(        |Trhof|q <= |f|p where 0 <= rho <= sqrt\(\(p-1\)\(q-1\)\) for some p-norm and q-norm) s
5 406 M
(and in its expanded form as:) s
5 395 M
(        sigma\(rho^|S|*\(1/2^n*sigma\(|f\(x\)|^q*\(-1\)^\(parity\(xi\)\)\)\)^\(1/q\)*parity\(S\)\) <= \(1/2^n*sig) s
5 384 M
(ma\(|f\(x\)|^p\)^\(1/p\)) s
5 373 M
(Hypercontractivity upperbounds a noisy function's q-norm by same function's p-norm without noi) s
5 362 M
(se. For 2-norm, by Parseval's theorem which gives 2-norm as sigma\(f\(S\)^2\), hypercontractivity ) s
5 351 M
(can be directly applied to Denoisification in 53.11 and 53.12 as it connects noisy and noisele) s
5 340 M
(ss boolean function norms.) s
5 318 M
(Reference:) s
5 307 M
(----------) s
5 296 M
(254.1 Bonami-Beckner Hypercontractivity - http://theoryofcomputing.org/articles/gs001/gs001.pd) s
5 285 M
(f) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(-------------------------------------------) s
5 241 M
(255. \(THEORY\) Hypercontractivity, KKL inequality,Social choice boolean functions  - Denoisific) s
5 230 M
(ation 3) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(-------------------------------------------) s
5 197 M
(For 2-norm, Bonami-Beckner inequality becomes:) s
5 186 M
(        sigma[\(rho^|S|*fourier_coeff\(S\)^2\)^\(2/2\)] <= [1/2^n*\(sigma\(f\(x\)^p\)^2/p\)]) s
5 164 M
(For boolean functions f:{0,1}^n -> {-1,0,1}, [Kahn-Kalai-Linial] inequality is special case of) s
5 153 M
( previous:) s
5 142 M
(        For rho=p-1 and p=1+delta, sigma\(delta^|S|*fourier_coeff\(S\)^2\) <= \(Pr[f!=0]\)^2/\(1+delt) s
5 131 M
(a\)) s
5 120 M
(where p-norm is nothing but a norm on probability that f is non-zero \(because Pr[f!=0] is a me) s
5 109 M
(an of all possible f\(x\) at 2^n points\).) s
5 87 M
(From 53.12 size of a noisy boolean function circuit has been bounded as: Summation\(rho^|S|*fou) s
5 76 M
(rier_coeff\(S\)^2\) * 2^\(\(t^\(1/d\)/20\)-1\) <= Size) s
5 65 M
(for |S| > t. From KKL inequality, 2-norm in LHS can be set to maximum of \(Pr[f!=0]\)^2/\(1+delta) s
5 54 M
(\) in 53.12 and Size lowerbound is obtained for) s
5 43 M
(a denoisified circuit:) s
5 32 M
(        \(Pr[f!=0]\)^2/\(1+delta\) * 2^\(\(t^\(1/d\)/20\)-1\) <= Size) s
5 21 M
(which is exponential when delta=1 and Pr[f!=0] is quite close to 1 i.e f is 1 or -1 for most o) s
5 10 M
(f the inputs.) s
_R
S
%%Page: (136) 136
%%BeginPageSetup
_S
18 36 translate
/pagenum 136 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (136) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(If f is 100% noise stable, from Plancherel theorem:) s
5 670 M
(        sigma\(rho^|S|*f\(S\)^2\) = 1, S in [n]) s
5 659 M
(        For |S| < t=n, 1-Summation\(rho^|S|*fourier_coeff\(S\)^2\) <= 2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 648 M
(        But for rho=p-1 and p=1+delta, 1-Summation\(delta^|S|*fourier_coeff\(S\)^2\) >  1-\(Pr[f!=0) s
5 637 M
(]\)^2/\(1+delta\) from KKL inequality.) s
5 626 M
(        For |S| < t=n,  1-\(Pr[f!=0]\)^2/\(1+delta\) < 1-Summation\(rho^|S|*fourier_coeff\(S\)^2\) <= ) s
5 615 M
(2*\(Size\)*2^\(-t^\(1/d\)/20\)) s
5 604 M
(=>  0.5*\(1-\(Pr[f!=0]\)^2/\(1+delta\)\)*2^\(t^\(1/d\)/20\) < 0.5*\(1-Summation\(rho^|S|*fourier_coeff\(S\)^) s
5 593 M
(2\)\)*2^\(t^\(1/d\)/20\) <= Size) s
5 571 M
(Again denoisification by letting rho and delta tend to 0 in above, places an exponential lower) s
5 560 M
(bound, with constant upperbound on depth, on a noiseless circuit size. In above size bound Lt ) s
5 549 M
(n^\(1/n\) = 1 for n tending to infinity \(Real analysis result - http://www.jpetrie.net/2014/10/1) s
5 538 M
(2/proof-that-the-limit-as-n-approaches-infinity-of-n1n-1-lim_n-to-infty-n1n-1/\). Percolation i) s
5 527 M
(n 100% noise stable regime can have NC/poly circuits while above stipulates the lowerbound for) s
5 516 M
( noiseless circuits to be exponential when depth is constant. It implies NC/Poly formulation o) s
5 505 M
(f percolation has unrestricted depth which is obvious because 100% noise stability regime is a) s
5 494 M
(ttained when n tends to infinity. Randomized algorithm equivalent of Percolation implies Perco) s
5 483 M
(lation is in RP or RNC with pseudorandom advice which vindicates derandomized NC representatio) s
5 472 M
(n for percolation. This leads to an important result if 100% stability implies lowerbound: LHS) s
5 461 M
( is an NC/Poly Percolation circuit in 100% noise stability regime of polynomial size. RHS is e) s
5 450 M
(xponential, denoisified, 100% stable circuit of arbitrary hardness. From 53.9 and 53.16, RHS h) s
5 439 M
(as an NC/Poly lowerbound e.g if RHS is PH-complete then PH in P/poly. From Toda's theorem, PH ) s
5 428 M
(is in P^#P and there is a known result that P^#P in P/Poly implies P^#P = MA. Unifying:) s
5 417 M
(PH in P^#P in P/Poly => P^#P=MA. \(assumption: NC/Poly is in P/Poly because any logdepth, polys) s
5 406 M
(ize bounded fanin circuit has polysize gates\)) s
5 395 M
(NC/log percolation circuit would imply collapse of polynomial hierarchy - RHS PH-complete is l) s
5 384 M
(owerbounded by LHS NC/log in P and trivially P=NP.) s
5 362 M
(Percolation boolean functions have a notion of revealment - that is, there exists a randomized) s
5 351 M
( algorithm corresponding to each percolation boolean function which has coin toss advice to qu) s
5 340 M
(ery the next bit and revealment is the maximum probability that a bit index i in [n] is querie) s
5 329 M
(d in these sets of bits B in [n]- it reveals the secret in randomness. Thus LHS Percolation in) s
5 318 M
( Pr\(Good\) circuit can be simulated by a randomized algorithm with revealment. In such a case, ) s
5 307 M
(advice strings are random coin tosses. This revealment has close resemblance to random restric) s
5 296 M
(tions - each restriction brings down a variable by revealing it finally leading to a constant ) s
5 285 M
(function. Following theorem connects Fourier weights of percolation and Randomized revealments) s
5 274 M
(:) s
5 263 M
(        Sigma\(fourier_coeff\(S\)^2\) <= revealment*constant*2-norm\(f\)) s
5 241 M
(There is a special case in which size of advice list can be brought down to logn from n for Z\() s
5 230 M
(n\) grid. Set of logn points are pseudorandomly chosen from n points. This logn sized subset wh) s
5 219 M
(en sorted would still point to left-right trend unless leftmost and rightmost are not in sampl) s
5 208 M
(e. This places Percolation in NC/log which could imply a PH collapse mentioned previously. Thi) s
5 197 M
(s is an exponential decrease in size of advice.) s
5 175 M
(Reference:) s
5 164 M
(----------) s
5 153 M
(255.1 Randomized Algorithms and Percolation - http://math.univ-lyon1.fr/~garban/Slides/Newton.) s
5 142 M
(pdf) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(-----------------------------) s
5 98 M
(256. \(THEORY\) Majority Voting in Multipartisan Elections) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(-----------------------------) s
5 65 M
(Uptill now, P\(Good\) majority voting in this document describes only 2-candidate elections with) s
5 54 M
( a majority function voting circuit.) s
5 43 M
(Noise stability of a voter's decision boolean function is assumed as a suitable measure of vot) s
5 32 M
(er/voting error in RHS of P\(Good\) summation. Most) s
5 21 M
(generic RHS is when there is a multiway contest and error is bounded. P\(Good\) binomial summati) s
5 10 M
(on still applies for multipartisan democracy because voter decision vector \(set of binary deci) s
_R
S
%%Page: (137) 137
%%BeginPageSetup
_S
18 36 translate
/pagenum 137 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (137) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sion bits of all voters - in {Good,Bad}*\) remains same though number of candidates increase ma) s
5 681 M
(nifold. Differences are in:) s
5 670 M
(        - Individual Voter Judging Functions which are not boolean functions and) s
5 659 M
(        - Generic Majority Function that needs to find most prominent index from an assorted m) s
5 648 M
(ix of votes \(Heavy hitter\) - might require Sorting Networks on Hashvalues.) s
5 637 M
(        - There are three variables - number of variables per voter, number of voters and numb) s
5 626 M
(er of candidates \(which is 2 in boolean decision functions special case for fixed 2 candidate ) s
5 615 M
(elections\) and these numbers can be arbitrarily huge - in the order of Graham's number for exa) s
5 604 M
(mple.) s
5 582 M
(Voter judging functions have to choose an index within n candidates than simple 0-1. In a spec) s
5 571 M
(ial case non-boolean functions can be simulated by a functional aggregation of boolean functio) s
5 560 M
(ns e.g Voted Candidate index in binary representation is nothing but a logN sized binary strin) s
5 549 M
(g of 0-1 output gates from multiple boolean functions for maximum of N candidates. Measuring h) s
5 538 M
(ow good is the choice made by a multiway voter decision function has no equivalent notion of s) s
5 527 M
(tability and sensitivity in non-boolean functions. For 2 voters 0-1 boolean function is suffic) s
5 516 M
(ient. Multiparty Generic Majority Function without tie in which candidates are hashkeys and vo) s
5 505 M
(tes are hashvalues can be shown to be NP-complete from Money Changing Problem and 0-1 Integer ) s
5 494 M
(Linear Programming\(https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.) s
5 483 M
(pdf\). [Friedgut-Kalai-Nisan] theorem is quantitative extension of Arrow's Theorem and Gibbard-) s
5 472 M
(Satterthwaite Theorem which prove that there is a non-zero probability that elections with 3 c) s
5 461 M
(andidates and more can be manipulated. This appears sufficient to prove that Goodness probabil) s
5 450 M
(ity of a multiway contest in RHS of P\(good\) binomial summation can never converge to 100% impl) s
5 439 M
(ying that democracy is deficient. This non-constructively shows the impossibility without even) s
5 428 M
( knowing individual voter error and series summation. Interestingly, this divergence condition) s
5 417 M
( coincides with contradiction mentioned in 53.16.3.1 for PARITY3SAT superpolynomial size circu) s
5 406 M
(its. Assuming an NC/Poly or P/Poly LHS Percolation Boolean Function with 100% noise stability ) s
5 395 M
(in P\(Good\) LHS, Multiway Election in RHS can be placed in hardest known complexity classes - P) s
5 384 M
(olynomial Hierarchy PH, EXPSPACE - *\) for PH it is expoential DC-uniform circuit size required) s
5 373 M
( by RHS *\) for adversarial simulation by Chess,Go etc., it is EXPTIME-hard required by RHS etc) s
5 362 M
(.,. This fits into scenario 53.9.5 when LHS is 100% stable circuit and RHS is unstable PH=DC c) s
5 351 M
(ircuit.) s
5 329 M
(Reference:) s
5 318 M
(----------) s
5 307 M
(256.1. Elections can be manipulated often - [Friedgut-Kalai-Nisan] - http://www.cs.huji.ac.il/) s
5 296 M
(~noam/apx-gs.pdf) s
5 285 M
(256.2. Computational Hardness of Election Manipulation - https://www.illc.uva.nl/Research/Publ) s
5 274 M
(ications/Reports/MoL-2015-12.text.pdf) s
5 252 M
(-----------------------------------------------------------------------------------) s
5 241 M
(257. Commits as on 4 April 2016) s
5 230 M
(-----------------------------------------------------------------------------------) s
5 219 M
(- Updated AsFer Design Document - KKL inequality and Denoisification) s
5 208 M
(- Spark-Cython intrinsic merit computation has been md5hash enabled again since there were key) s
5 197 M
( errors with large strings) s
5 186 M
(- logs and screenshots have been committed to testlogs/) s
5 175 M
(- rebuilt Cython .c, .so files) s
5 164 M
(- Spidered text has been changed - This took 28 minutes for ~40+ keywords better than 6 minute) s
5 153 M
(s for ~10 keywords earlier. Again Spark in single node cluster dualcore has some bottleneck.) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(----------------) s
5 109 M
(258. \(FEATURE-BENCHMARK-DONE\) Analysis of PySpark-Cython Intrinsic Merit Computation Benchmark) s
5 98 M
(s done so far) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(----------------) s
5 65 M
(From 191 and 201 time complexity analysis of Recursive Gloss Overlap algorithm, for single nod) s
5 54 M
(e dualcore cluster following is the) s
5 43 M
(runtime bound:) s
5 32 M
(        O\(n*d*s^tmax/cpus\)) s
5 21 M
(where d is the number of keywords, n is the number of documents and s is the maximum gloss siz) s
5 10 M
(e per keyword. For last two benchmarks done with) s
_R
S
%%Page: (138) 138
%%BeginPageSetup
_S
18 36 translate
/pagenum 138 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (138) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(MD5 hashkeys, Local Cacheing and Global Cacheing\(MemCached\) enabled number of words are 10 and) s
5 681 M
( 40. Corresponding runtimes are:) s
5 670 M
(--------------) s
5 659 M
(10 words) s
5 648 M
(--------------) s
5 637 M
(n=1) s
5 626 M
(d=10) s
5 615 M
(s=constant) s
5 604 M
(tmax=2 \(depth 2 recursion\)) s
5 593 M
(cpus=2 \(dual core\)) s
5 582 M
(Runtime = 7 minutes = k*10*\(s\)^2/2) s
5 571 M
(--------------) s
5 560 M
(40 words) s
5 549 M
(--------------) s
5 538 M
(n=1) s
5 527 M
(d=40) s
5 516 M
(s=constant) s
5 505 M
(tmax=2 \(depth 2 recursion\)) s
5 494 M
(cpus=2 \(dual core\)) s
5 483 M
(Runtime = 28 minutes = k*40*\(s\)^2/2) s
5 472 M
(Ratio is 7/28 = k*10*\(s\)^2/2/k*40*\(s\)^2/2 = 0.25 a linear scaling in number of words which sub) s
5 461 M
(stantiates the theoretical bound. If cluster scales on number of words and documents \(e.g logd) s
5 450 M
( and logn\) this should have non-linear asymptotic scaling. Maximum number of words per documen) s
5 439 M
(t can be an assumption and set to a harcoded large number. If number of web documents versus n) s
5 428 M
(umber of keywords follow a Gaussian Normal distribution i.e a small fraction of documents have) s
5 417 M
( high number of words while the tails have less number of keywords, cluster prescales on a fun) s
5 406 M
(ction of mean which is apriori known by a heuristic. Above excludes the crawling time per webp) s
5 395 M
(age - crawling does not build linkgraph.) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(------------------------------) s
5 351 M
(259. \(THEORY\) Major update to Computational Geometric PRAM-NC algorithm for Discrete Hyperboli) s
5 340 M
(c Factorization) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(------------------------------) s
5 307 M
(PRAM-NC Algorithm for Discrete Hyperbolic Factorization in 34 above:) s
5 285 M
(        34.1 LaTeX - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolyl) s
5 274 M
(ogarithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updated) s
5 263 M
(draft.tex/download) s
5 252 M
(        34.2 PDF - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylog) s
5 241 M
(arithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddr) s
5 230 M
(aft.pdf/download) s
5 208 M
(internally relies on [BerkmanSchieberVishkin] and other All Nearest Smaller Values PRAM algori) s
5 197 M
(thms for merging sorted tesselated hyperbolic arc segments which is then binary searched to fi) s
5 186 M
(nd a factor. There are some older alternatives to merging sorted lists other than All Nearest ) s
5 175 M
(Smaller Values which require more processors. Section 2.4 in [RichardKarp-VijayaRamachandran] ) s
5 164 M
(on "Sorting, Merging and Selection" in PRAM where input is an array of O\(N=n\) elements, descri) s
5 153 M
(bes some standard PRAM algorithms, gist of which is mentioned below \(https://www.eecs.berkeley) s
5 142 M
(.edu/Pubs/TechRpts/1988/5865.html\):) s
5 120 M
(        259.1\) There are 3 parallel computing models - Parallel Comparisons, Comparator Sortin) s
5 109 M
(g Networks and PRAMs) s
5 98 M
(        259.2\) Section 2.4.1 on merging two increasing sequences of length n and m, n <= m in ) s
5 87 M
(Page 19 gives an algorithm of O\(loglogN\) steps on O\(n+m\) CREW PRAM processors. This constructs) s
5 76 M
( a merge tree bottom-up to merge two sorted lists. For merging more than 2 lists, requires log) s
5 65 M
(arithmic additional parallel steps.) s
5 54 M
(        259.3\) Section 2.4.2 describes Batcher's and [AjtaiKomlosSzmeredi] Bitonic Sort algori) s
5 43 M
(thm which sorts n elements in O\(\(logn\)^2\) time with n/2 processors.) s
5 32 M
(        259.4\) Section 2.4.3 describes Cole's PRAM sorting algorithm which requires O\(logn\) st) s
5 21 M
(eps and O\(n\) PRAM processors.) s
_R
S
%%Page: (139) 139
%%BeginPageSetup
_S
18 36 translate
/pagenum 139 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (139) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Advantage of these older algorithms is they are implementable e.g Bitonic sort - https://en.wi) s
5 681 M
(kipedia.org/wiki/Bitonic_sorter, http://www.nist.gov/dads/HTML/bitonicSort.html. Replacing [Be) s
5 670 M
(rkmanSchieberVishkin] in ANSV sorted tile merge for discrete hyperbolic factorization with old) s
5 659 M
(er algorithms like bitonic parallel sorting networks would require more processors but still b) s
5 648 M
(e in NC though not PRAM.) s
5 626 M
(References:) s
5 615 M
(----------) s
5 604 M
(259.1 Bitonic Sorting - https://cseweb.ucsd.edu/classes/wi13/cse160-a/Lectures/Lec14.pdf) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(--------) s
5 560 M
(260. Commits as on 10 April 2016) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(--------) s
5 527 M
(Complement Function script updated with a new function to print Ihara Identity zero imaginary ) s
5 516 M
(parts mentioned in) s
5 505 M
(Complement Function extended draft:) s
5 494 M
(        1. https://sourceforge.net/p/asfer/code/HEAD/tree/asfer-docs/AstroInferDesign.txt) s
5 483 M
(        2. https://github.com/shrinivaasanka/asfer-github-code/blob/master/asfer-docs/AstroInf) s
5 472 M
(erDesign.txt) s
5 450 M
(Logs for this included in python-src/testlogs/) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(---------) s
5 406 M
(261. Commits \(1\) as on 12 April 2016) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(---------) s
5 373 M
(\(FEATURE-DONE\) Implementation for NC Discrete Hyperbolic Factorization with Bitonic Sort alter) s
5 362 M
(native \(in lieu of unavailable PRAM implementations\):) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-------------------------------------) s
5 329 M
(Bitonic Merge Sort Implementation of:) s
5 318 M
(         - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmic) s
5 307 M
(SieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.tex/) s
5 296 M
(download) s
5 285 M
(         - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmic) s
5 274 M
(SieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.pdf/) s
5 263 M
(download) s
5 230 M
(- Bitonic Sort is O\(\(logn\)^2\) and theoretically in NC) s
5 219 M
(- Bitonic Sort requires O\(n^2logn\) parallel comparators. Presently this parallelism is limited) s
5 208 M
( to parallel) s
5 197 M
(exchange of variables in bitonic sequence for which python has builtin support \(bitonic_compar) s
5 186 M
(e\(\)\) - internally how it performs on) s
5 175 M
(multicore archs is not known.) s
5 164 M
(- a shell script has been added which does the following \(cpp-src/miscellaneous/DiscreteHyperb) s
5 153 M
(olicFactorizationUpperbound_Bitonic.sh\):) s
5 142 M
(        - NC Factorization implementation with Bitonic Sort is C+++Python \(C++ and Python\)) s
5 131 M
(        - C++ side creates an unsorted mergedtiles array for complete tesselated hyperbolic ar) s
5 120 M
(c) s
5 109 M
(\(cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.cpp\)) s
5 98 M
(        - This mergedtiles is captured via output redirection and awk in a text file) s
5 87 M
(cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.mergedtiles) s
5 76 M
(        - Python bitonic sort implementation which is a modified version of algorithm in https) s
5 65 M
(://en.wikipedia.org/wiki/Bitonic_sorter) s
5 54 M
(requires the size of the array to be sorted in exponents of 2. Presently it is hardcoded as ar) s
5 43 M
(ray of size 16384 - 2^16) s
5 32 M
(\(python-src/DiscreteHyperbolicFactorizationUpperbound_Bitonic.py\). It outputs the sorted array) s
5 21 M
(. Vacant elements in array are zero-filled) s
_R
S
%%Page: (140) 140
%%BeginPageSetup
_S
18 36 translate
/pagenum 140 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (140) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- Binary and logs for C++ and Python side have been committed) s
5 681 M
(- Parallel comparators on large scale require huge cloud of machines per above bound which mak) s
5 670 M
(es it NC.) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(---------) s
5 637 M
(Commits \(2\) as on 12 April 2016) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(---------) s
5 604 M
(- Compare step in Bitonic Sort for merged tiles has been Spark MapReduced with this separate s) s
5 593 M
(cript - ../python-src/DiscreteHyperbolicFactorizationUpperbound_Bitonic_Spark.py. Can be used ) s
5 582 M
(only in a large cluster.  With this comparators are highly parallelizable over a cloud and thu) s
5 571 M
(s in NC.) s
5 549 M
(References:) s
5 538 M
(-----------) s
5 527 M
(261.1 Parallel Bitonic Sort - http://www.cs.utexas.edu/users/plaxton/c/337/05s/slides/Parallel) s
5 516 M
(Recursion-1.pdf) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(---------) s
5 472 M
(262. Commits as on 13 April 2016) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(---------) s
5 439 M
(Spark Bitonic Sort - Imported BiDirectional Map - bidict - for reverse lookup \(for a value, lo) s
5 428 M
(okup a key in addition to for a key, ) s
5 417 M
(lookup a value\) which is required to avoid the looping through of all keys to match against a ) s
5 406 M
(tile element.) s
5 384 M
(-------------------------------------------------------------------------------------) s
5 373 M
(263. Commits as on 27 April 2016) s
5 362 M
(-------------------------------------------------------------------------------------) s
5 351 M
(  Interim Commits for ongoing investigation of a race condition in Spark MapReduce for NC Fact) s
5 340 M
(orization with Bitonic Sort :) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(---------------------------) s
5 307 M
(- The sequential version of bitonic sort has been updated to do away with usage of boolean fla) s
5 296 M
(g up by 2 compare functions for True and False) s
5 285 M
(- Spark NC implementation of Bitonic Sort for Factorization still has some strange behaviour i) s
5 274 M
(n sorting. In progress commits for this do) s
5 263 M
(following in Compare-And-Exchange phase:) s
5 252 M
(        - Comparator code has been rewritten to just do comparison of parallelized RDD set of ) s
5 241 M
(tuples where each tuple is of the form:) s
5 230 M
(                \(i, i+midpoint\)) s
5 219 M
(        - This comparison returns a set of boolean flags collect\(\)ed in compare\(\)) s
5 208 M
(        - The variable exchange is done sequentially at each local node.) s
5 197 M
(        - This is because Spark documentation advises against changing global state in worker ) s
5 186 M
(nodes \(though there are exceptions in accumulator\)) s
5 175 M
(        - There were some unusual JVM out of memory crashes, logs for which have been committe) s
5 164 M
(d) s
5 153 M
(        - some trivial null checks in complement.py) s
5 142 M
(        - Bitonic Sort presents one of the most non-trivial cases for parallelism - parallel v) s
5 131 M
(ariable compare-and-exchange to be specific) s
5 120 M
(and present commits are a result of few weeks of tweaks and trial-errors.) s
5 109 M
(        - Still the race condition is observed in merge which would require further commits.) s
5 87 M
(------------------------------------------------------------------------------------) s
5 76 M
(264. Commits as on 28 April 2016) s
5 65 M
(------------------------------------------------------------------------------------) s
5 54 M
(Interim commits 2 for ongoing investigation of race conditions in Spark Bitonic Sort:) s
5 43 M
(--------------------------------------------------------------------------------------) s
5 32 M
(        - bidict usage has been removed because it requires bidirectional uniqueness, there ar) s
5 21 M
(e better alternatives) s
5 10 M
(        - The variable exchange code has been rewritten in a less complicated way and just mim) s
_R
S
%%Page: (141) 141
%%BeginPageSetup
_S
18 36 translate
/pagenum 141 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (141) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(icks what sequential version does) s
5 681 M
(in CompareAndExchange phase.) s
5 670 M
(        - logs for Sequential version has been committed) s
5 659 M
(        - number to factor has been set to an example low value) s
5 648 M
(        - .coordinates and .mergedtiles files have been regenerated) s
5 637 M
(        - Still the race condition remains despite being behaviourally similar to sequential v) s
5 626 M
(ersion except the parallel comparator array returned by mapreduce) s
5 615 M
(        - Parallel comparator preserves immutability in local worker nodes) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(----------------) s
5 571 M
(265. \(THEORY\) UGC\(Unique Games Conjecture\) and Special Case of Percolation-Majority Voting Cir) s
5 560 M
(cuits) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(----------------) s
5 527 M
(265.1 Unique Games Conjecture by [SubhashKhot] is a conjecture about hardness of approximating) s
5 516 M
( certain constraint satisfaction problems. It states that complexity of obtaining polynomial t) s
5 505 M
(ime approximation schemes for specific class of constraint satisfaction NP-hard problems is NP) s
5 494 M
(-hard itself i.e polytime approximation is NP-hard. From section 255 above, if in a special ca) s
5 483 M
(se percolation with sampling of left-right points on percolation grids results in logarithmic ) s
5 472 M
(advice, then percolation is in NC/log. Thus if RHS has 100% stable NP-hard voting function the) s
5 461 M
(n NP is in NC/log implying NP is in P/log and P=NP. This disproves UGC trivially because all N) s
5 450 M
(P problems have P algorithms. But this disproof depends on strong assumptions that percolation) s
5 439 M
( has NC/log circuit and RHS of Majority voting is 100% noise stable. There are already counter) s
5 428 M
(examples showing divergence of RHS in sections 53.16.3.1 and 256.) s
5 417 M
(265.2 Voter Boolean Functions can be written as :) s
5 406 M
(        265.2.1 Integer Linear Programs : Voter Judging Boolean Functions are translated into ) s
5 395 M
(an Integer Linear Program, binary to be precise because value for variable and final vote is 0) s
5 384 M
(, 1 and -1\(abstention\). This readily makes any decision process by individual voter to be NP-h) s
5 373 M
(ard.) s
5 362 M
(        265.2.2 and Constraint Satisfaction Problems : Voter expects significant percentage of) s
5 351 M
( constraints involving variables to be satisfied while voting for a candidate which brings the) s
5 340 M
( majority voting problem into the UGC regime. Approximating the result of an Election mentione) s
5 329 M
(d in Section 14 is thus reducible to hardness of approximation of constraint satisfaction and ) s
5 318 M
(could be NP-hard if UGC is true.) s
5 307 M
(265.3 Thus RHS of Majority Voting Circuit becomes a functional composition behemoth of indefin) s
5 296 M
(ite number of individual voter constraint and integer linear programs. There is a generic conc) s
5 285 M
(ept of sensitivity of a non-boolean function mentioned in [Williamson-Schmoys] which can be ap) s
5 274 M
(plied to sensitivity and stability of a voter integer linear program and constraint program.) s
5 263 M
(265.4 Approximating outcome of a majority voting \(e.g. real life pre/post poll surveys\) depend) s
5 252 M
(s thus on following factors:) s
5 241 M
(        265.4.1 Correctness - Ratio preserving sample - How reflective the sample is to real v) s
5 230 M
(oting pattern e.g a 60%-40% vote division in reality should be reflected by the sample.) s
5 219 M
(        265.4.2 Hardness - Approximation of Constraint Satisfaction Problems and UGC.) s
5 197 M
(References:) s
5 186 M
(-----------) s
5 175 M
(265.4 Unique Games Conjecture and Label Cover - https://en.wikipedia.org/wiki/Unique_games_con) s
5 164 M
(jecture) s
5 153 M
(265.5 Design of Approximation Algorithms - Page 442 - http://www.designofapproxalgs.com/book.p) s
5 142 M
(df) s
5 120 M
(-------------------------------------------------------------------------) s
5 109 M
(266. Commits 1 as on 29 April 2016) s
5 98 M
(-------------------------------------------------------------------------) s
5 87 M
(Interim commits 3 for Bitonic Sort Spark NC Factorization Implementation) s
5 76 M
(-------------------------------------------------------------------------) s
5 65 M
(- AsFer Design Document updated for already implemented NVIDIA CUDA Parallel C reference code ) s
5 54 M
(for bitonic sort on hypercube) s
5 43 M
(- Bitonic Sort C++ code updated for max size of sort array - reduced from 16384 to 256) s
5 32 M
(- Bitonic Sort Python Spark implementation updated for returning a tuple containing index info) s
5 21 M
( also instead of plain boolean value ) s
5 10 M
(because Spark collect\(\) after a comparator map\(\) does not preserve order and index information) s
_R
S
%%Page: (142) 142
%%BeginPageSetup
_S
18 36 translate
/pagenum 142 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (142) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( was lost.) s
5 681 M
(- if clauses in exchange phase have been appropriately changed) s
5 670 M
(- Still there are random mysterious jumbled tuples which will be looked into in future commits) s
5 659 M
(- This implementation becomes redundant because of already existing better NVIDIA CUDA Paralle) s
5 648 M
(l C implementation and ) s
5 637 M
(is of academic interest only.) s
5 615 M
(----------------------------------------------------------------------------) s
5 604 M
(Final commits for Bitonic Sort Spark NC Factorization Implementation) s
5 593 M
(----------------------------------------------------------------------------) s
5 582 M
(- Indeed Bitonic Sort from previous commit itself works without any issues.) s
5 571 M
(- Nothing new in this except reduced sort array of size just 64 for circumventing frequent Py4) s
5 560 M
(Java Out of Memory errors and for quick runtime) s
5 549 M
(- Logs for this have been committed in testlogs/) s
5 538 M
(- the debug line "merged sorted halves" is the final sorted tiles array) s
5 527 M
(- .coordinates and .mergedtiles files have been updated) s
5 505 M
(----------------------------------------------------------------------------) s
5 494 M
(267. Commits as on 30 April 2016) s
5 483 M
(----------------------------------------------------------------------------) s
5 472 M
(- Printed return value of bitonic_sort\(\) in sorted. Earlier it was wrongly printing globalmerg) s
5 461 M
(edtiles a global state which is not changed) s
5 450 M
(anymore) s
5 439 M
(- logs for bitonic sort of tesselated hyperbolic arc) s
5 417 M
(----------------------------------------------------------------------------) s
5 406 M
(268. Commits as on 1 May 2016) s
5 395 M
(----------------------------------------------------------------------------) s
5 384 M
(- The Map step now does both Compare and Exchange within local worker nodes for each closure a) s
5 373 M
(nd result is returned in tuples) s
5 362 M
(- The driver collect\(\)s and just assigns the variables based on comparator boolean field in tu) s
5 351 M
(ple which are already exchanged within ) s
5 340 M
(local worker) s
5 318 M
(--------------------------------------------------------------------------------------) s
5 307 M
(269. Commits as on 2 May 2016) s
5 296 M
(-------------------------------------------------------------------------------------) s
5 285 M
(Accumulator support for Bitonic Sort mapreduce globalmergedtiles) s
5 274 M
(-------------------------------------------------------------------------------------) s
5 263 M
(- Spark context has been parametrized and is passed around in the recursion so that single spa) s
5 252 M
(rk context keeps track of the) s
5 241 M
(accumulator variables) s
5 230 M
(- globalmergedtiles_accum is the new accumulator variable which is created in driver and used ) s
5 219 M
(for storing distributed mutable globalmergedtiles) s
5 208 M
(- AccumulatorParam has been overridden for Vectors as globals) s
5 197 M
(- Spark does not permit however, at present, mutable global state within worker tasks and only) s
5 186 M
( driver creates the accumulator variables which can only be incrementally extended within clos) s
5 175 M
(ure workers.) s
5 164 M
(- muting or accessing accumulator.value within worker raises Exception: Can't access value of ) s
5 153 M
(accumulator in worker tasks) s
5 142 M
(- Logs for above have been committed to testlogs/) s
5 131 M
(- Because of above limitation of Spark in global mutability, accumulator globalmergedtiles is ) s
5 120 M
(updated only outside the Spark mapreduce closures.) s
5 109 M
(- Support for global mutables, if Spark has it, would make compare-and-exchange phase closer i) s
5 98 M
(n behaviour to an NVIDIA Parallel bitonic sort.) s
5 87 M
(- Documentation on this necessary feature is scarce and some suggest use of datastores like Ta) s
5 76 M
(chyon/Alluxio for distributed shared mutables) s
5 65 M
(which is non-trivial. This cloud parallel sort implementation achieves thus almost ~90% of NVI) s
5 54 M
(DIA CUDA parallel bitonic sort -) s
5 43 M
(CompareAndExchange is done in parallel but assigning CompareAndExchange results is done sequen) s
5 32 M
(tially.) s
5 10 M
(--------------------------------------------------------------------------------------) s
_R
S
%%Page: (143) 143
%%BeginPageSetup
_S
18 36 translate
/pagenum 143 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (143) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(270. Commits as on 3 May 2016) s
5 681 M
(--------------------------------------------------------------------------------------) s
5 670 M
(New threading function assign_compareexchange_multithreaded\(\) has been implemented which is) s
5 659 M
(invoked in lieu of sequential for loop assignment , by creating a thread for each pair of \(i,i) s
5 648 M
(+midpoint\) compare-exchange assignment) s
5 637 M
(of accumulator globalmergedtiles.This thread function assigns the Spark Mapreduce result of Co) s
5 626 M
(mpare and Exchange.) s
5 604 M
(Mulithreading is an alternative for global state mutability in the absence of Spark support) s
5 593 M
(and it does not require any third party in-memory cacheing products.) s
5 571 M
(Coordinates are also shuffled first few elements of which correspond to number to factor N - t) s
5 560 M
(hese are) s
5 549 M
(the factors found finally. Multithreaded assignment maps to a multicore parallelism. Logs for ) s
5 538 M
(this have been) s
5 527 M
(committed to testlogs with and without Coordinates Shuffling.) s
5 505 M
(--------------------------------------------------------------------------------------) s
5 494 M
(271. Commits 2 as on 3 May 2016) s
5 483 M
(--------------------------------------------------------------------------------------) s
5 472 M
(Number to factorize has been changed to 147. The mergedtiles array has been set to size 256. T) s
5 461 M
(he logs for this have been committed in testlogs/.  The factors are printed in last few lines ) s
5 450 M
(of the logs in shuffled globalcoordinates corresponding to 147 in sorted globalmergedtiles acc) s
5 439 M
(umulator:) s
5 417 M
(sorted= [147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 146, 146, 146, 146, ) s
5 406 M
(146, 146, 146, 145, 145, 145, 145, 145, 145, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,) s
5 395 M
( 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144) s
5 384 M
(, 143, 143, 143, 143, 143, 142, 142, 142, 142, 141, 141, 141, 141, 141, 140, 140, 140, 140, 14) s
5 373 M
(0, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 139, 138, 138, 138, 138, 138, 1) s
5 362 M
(38, 138, 138, 138, 137, 136, 136, 136, 136, 136, 136, 136, 136, 135, 135, 135, 135, 135, 135, ) s
5 351 M
(135, 135, 135, 134, 134, 133, 133, 133, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,) s
5 340 M
( 132, 131, 130, 130, 130, 130, 130, 130, 129, 129, 129, 129, 128, 128, 128, 128, 128, 128, 127) s
5 329 M
(, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 125, 125, 125, 124, 124, 124, 124, 123, 12) s
5 318 M
(3, 123, 122, 122, 121, 120, 120, 120, 120, 120, 120, 120, 120, 119, 118, 118, 117, 117, 117, 1) s
5 307 M
(16, 116, 116, 116, 115, 114, 114, 114, 114, 113, 112, 112, 111, 111, 111, 110, 110, 109, 108, ) s
5 296 M
(108, 108, 108, 107, 106, 106, 105, 104, 104, 103, 102, 102, 101, 100, 100, 99, 98, 98, 97, 96,) s
5 285 M
( 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 79, 78, 78, 77, 77, 76, 7) s
5 274 M
(6, 75, 75, 74, 74, 73, 0, None]) s
5 263 M
(globalcoordinates= [1, 21, 21, 49, 49, 7, 147, 147, 3, 3, 3, 3, 7, 73, 73, 147, 2, 2, 145, 2, ) s
5 252 M
(144, 5, 5, 29, 29, 5, 24, 16, 16, 9, 8, 24, 18, 18, 6, 6, 6, 143, 2, 2, 3, 4, 4, 4, 3, 3, 4, 8) s
5 241 M
(, 71, 12, 36, 47, 9, 36, 12, 142, 13, 13, 11, 11, 2, 70, 141, 2, 3, 3, 140, 3, 46, 34, 14, 7, ) s
5 230 M
(139, 2, 27, 14, 10, 10, 69, 19, 5, 7, 4, 4, 4, 5, 138, 45, 22, 68, 3, 137, 2, 6, 6, 3, 136, 2,) s
5 219 M
( 33, 16, 67, 135, 4, 4, 8, 3, 3, 5, 134, 5, 9, 14, 26, 44, 66, 133, 7, 132, 18, 65, 4, 3, 3, 4) s
5 208 M
(, 6, 43, 11, 131, 32, 21, 10, 130, 129, 5, 12, 25, 9, 64, 3, 3, 42, 128, 7, 127, 4, 31, 15, 63) s
5 197 M
(, 126, 8, 41, 13, 62, 6, 3, 5, 125, 17, 20, 24, 5, 124, 61, 30, 123, 4, 3, 122, 40, 60, 121, 1) s
5 186 M
(20, 3, 4, 59, 39, 23, 29, 119, 4, 118, 117, 58, 38, 3, 116, 115, 3, 28, 57, 114, 113, 37, 3, 5) s
5 175 M
(6, 112, 55, 111, 110, 3, 36, 109, 54, 108, 53, 107, 2, 35, 106, 52, 105, 104, 51, 103, 102, 10) s
5 164 M
(1, 50, 100, 49, 99, 98, 48, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81) s
5 153 M
(, 80, 79, 1, 78, 77, 1, 76, 1, 1, 75, 74, 1, 73, 1, 72, 146, None]) s
5 142 M
(sorted globalmergedtiles accumulator version:  =  [147, 147, 147, 147, 147, 147, 147, 147, 147) s
5 131 M
(, 147, 147, 147, 147, 146, 146, 146, 146, 146, 146, 146, 145, 145, 145, 145, 145, 145, 144, 14) s
5 120 M
(4, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 1) s
5 109 M
(44, 144, 144, 144, 144, 144, 144, 144, 144, 143, 143, 143, 143, 143, 142, 142, 142, 142, 141, ) s
5 98 M
(141, 141, 141, 141, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,) s
5 87 M
( 140, 140, 139, 138, 138, 138, 138, 138, 138, 138, 138, 138, 137, 136, 136, 136, 136, 136, 136) s
5 76 M
(, 136, 136, 135, 135, 135, 135, 135, 135, 135, 135, 135, 134, 134, 133, 133, 133, 132, 132, 13) s
5 65 M
(2, 132, 132, 132, 132, 132, 132, 132, 132, 132, 131, 130, 130, 130, 130, 130, 130, 129, 129, 1) s
5 54 M
(29, 129, 128, 128, 128, 128, 128, 128, 127, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, ) s
5 43 M
(125, 125, 125, 124, 124, 124, 124, 123, 123, 123, 122, 122, 121, 120, 120, 120, 120, 120, 120,) s
5 32 M
( 120, 120, 119, 118, 118, 117, 117, 117, 116, 116, 116, 116, 115, 114, 114, 114, 114, 113, 112) s
5 21 M
(, 112, 111, 111, 111, 110, 110, 109, 108, 108, 108, 108, 107, 106, 106, 105, 104, 104, 103, 10) s
5 10 M
(2, 102, 101, 100, 100, 99, 98, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83,) s
_R
S
%%Page: (144) 144
%%BeginPageSetup
_S
18 36 translate
/pagenum 144 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (144) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( 82, 81, 80, 79, 79, 78, 78, 77, 77, 76, 76, 75, 75, 74, 74, 73, 0, None]) s
5 681 M
(16/05/03 18:33:06 INFO SparkUI: Stopped Spark web UI at http://192.168.1.101:4040) s
5 670 M
(16/05/03 18:33:06 INFO DAGScheduler: Stopping DAGScheduler) s
5 659 M
(16/05/03 18:33:06 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!) s
5 637 M
(----) s
5 626 M
(Factors of 147 are [1,21,49,7,147,3] from globalcoordinates and globalmergedtiles\(correspondin) s
5 615 M
(g to 147 elements\) printed previously in logs.) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-) s
5 571 M
(272. \(THEORY\) Integer Partitions, Riemann Sums, Multipartisan Majority Voting - a special case) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(-) s
5 538 M
(From https://sites.google.com/site/kuja27/IntegerPartitionAndHashFunctions_2014.pdf, Integer P) s
5 527 M
(artitions when visualized as area under a curve) s
5 516 M
(in discrete sense, correspond to Riemann Sums Discrete Area Integral i.e Each part in the part) s
5 505 M
(ition slices the area under a curve formed) s
5 494 M
(by topmost points of each part in partition. This curve can be perturbed to arbitrary shape wi) s
5 483 M
(thout altering the area underneath it - in other) s
5 472 M
(words each perturbed curve corresponds to a partition of N where N is the area integral value ) s
5 461 M
(for the curve. A striking analogy: a vessel containing water is perturbed and the surface of t) s
5 450 M
(he liquid takes arbitrary curvature shapes but the volume of the liquid remains unchanged \(ass) s
5 439 M
(uming there is no spillover\) - has some similarities to perturbation of spacetime Riemannian M) s
5 428 M
(anifolds due to gravity in General Relativity. This analogy simulates a 3-dimensional partitio) s
5 417 M
(n number \(as against the usual 2-dimensional\) of liquid of volume V. Let p3\(V\) denote the 3-di) s
5 406 M
(mensional partition of a liquid of volume V. It makes sense to ask what is the bound for p3\(V\)) s
5 395 M
(. For example a snapshot of the curvature of liquid surface be the function f. A slight pertur) s
5 384 M
(bation changes this function to f' preserving the volume. Hence f and f' are 2 different parti) s
5 373 M
(tions of the V - the difference is these are continuous partitions and not the usual discrete ) s
5 362 M
(integer partitions with distinct parts. Number of such perturbations are infinite - there are ) s
5 351 M
(infinitely many f=f'=f''=f'''=f''''=f''''' .... = V and hence p3\(V\) is infinite \(proof is by d) s
5 340 M
(iagonalization: an arbitrary point of the curve on the continuum can be changed and this recur) s
5 329 M
(sively continues indefinitely\). As any perturbation can be linked to a \(pseudo\)random source, ) s
5 318 M
(p3\(V\) is equivalent to number of pseudorandom permutations \(randomness extracted from some ent) s
5 307 M
(ropy source\). p3\(V\) can be extended to arbitrary dimensions n as pn\(V\). This generalized hash ) s
5 296 M
(functions and also majority voting to continuous setting - though it is to be defined what it ) s
5 285 M
(implies by voting in continuous population visavis discrete. In essence, Multipartisan Majorit) s
5 274 M
(y Voting = Hash Functions = Partitions in both discrete and continuous scenarios.) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(-) s
5 230 M
(273. Commits as on 4 May 2016) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(-) s
5 197 M
(Sequence Mining of Prime Numbers as binary strings) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(-) s
5 164 M
(- First 10000 prime numbers have been written to a text file in binary notation in complement.) s
5 153 M
(py) s
5 142 M
(- SequenceMining.py mines for most prominent sequences within prime binary strings - a measure) s
5 131 M
( of patterns in prime distribution) s
5 120 M
(- Logs for this have been committed to testlogs/) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-) s
5 76 M
(274. Commits as on 11 May 2016) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(-) s
5 43 M
(Sequence Mining in Prime binary strings has been made sophisticated:) s
5 32 M
(        - Prints each binary string sequence pattern in decimals upto maximum of 15-bit sequen) s
5 21 M
(ces mined from first 10000 primes.) s
5 10 M
(        - This decimals are written to a file PatternInFirst10000Primes.txt) s
_R
S
%%Page: (145) 145
%%BeginPageSetup
_S
18 36 translate
/pagenum 145 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (145) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        - Approx.py R+rpy2 has been invoked to print an R function plotter of this decimal pat) s
5 681 M
(tern in prime binary string sequences) s
5 670 M
(        - The function plots the sequences in Y-axis and length of sequences in asscending ori) s
5 659 M
(der in X-axis\(with decreasing support\)) s
5 648 M
(        - As can be seen from pdf plot, the sequences show dips amongst peaks periodically.) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(--------------------------------------------------) s
5 604 M
(275. \(THEORY\) Non-boolean Social Choice Functions Satisfiability, Sensitivity, Stability and M) s
5 593 M
(ultipartisan Majority Voting - 256 continued) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(--------------------------------------------------) s
5 560 M
(Let f be a voter decision function which takes in x1,x2,...xm as decision variables and output) s
5 549 M
(s a vote for candidate 1 <= c <= n. This) s
5 538 M
(generalizes voter boolean judging functions for 2 candidates to arbitrarily large number of co) s
5 527 M
(ntestants. Assuming f to be continuous) s
5 516 M
(function and parameters to be continuous \(as opposed to discrete binary string SAT assignments) s
5 505 M
( to variables in boolean setting\), this) s
5 494 M
(generalizes Satisfiability problem to continuous, multivalued and non-boolean functions. This ) s
5 483 M
(allows the candidate index to be) s
5 472 M
(continuous too. The function plot of this \(candidate index versus decision string\) would resem) s
5 461 M
(ble any continuous mathematical function.) s
5 450 M
(Stability which is: Pr[f\(s\) == f\(t\)] - Pr[f\(s\) != f\(t\)] for randomly correlated s=\(x11,x12,...) s
5 439 M
(,x1m\) and t=\(x21,x22,x23,...,x2m\) where) s
5 428 M
(correlation \(measured by usual euclidean distance between s and t\) could be uncomputable value) s
5 417 M
( in terms of mean but can be approximated) s
5 406 M
(as difference in ratio of length integral of function arc segments with high curvature and low) s
5 395 M
( curvature \(where function has huge fluctuations) s
5 384 M
(and relatively flat\).  Sensitivity follows accordingly. This requires first derivative of the ) s
5 373 M
(function to find out local maxima and minima.) s
5 362 M
(From Gibbard-Satterthwaite theorem any social choice function for more than 3 candidates has a) s
5 351 M
( non-zero probability of being manipulated though) s
5 340 M
(negligible in practice. Probably this implies atleast indirectly that the stability of any non) s
5 329 M
(-boolean social choice function < 1 if number of) s
5 318 M
(candidates > 3 hinting at divergence of Pr\(Good\) Binomial series. This function plot should no) s
5 307 M
(t be confused with function plot mentioned in) s
5 296 M
(272 for votes partitioned across candidates which reduces to Riemann Sum. Unlike boolean sensi) s
5 285 M
(tivity/stability, non-boolean counterparts) s
5 274 M
(can only be approximated and exact computation might never halt being undecidable. Non-boolean) s
5 263 M
( Social Choice Function generalizes) s
5 252 M
(satisfiability because an appropriate assignment to \(x1,x2,x3,.....,xm\) has to be found so tha) s
5 241 M
(t f\(x1,x2,x3,.....,xm\)=c where 1 <= c <= n.) s
5 230 M
(This is precisely curve-line intersection problem - curve f\(x1,x2,x3,...,xn\) and line y=c - in) s
5 219 M
( computational geometry. Intersecting points) s
5 208 M
(\(a1,a2,a3,...,az\) are the satisfying assignments which choose candidate c. Contrasting this wi) s
5 197 M
(th boolean kSAT which is NP-complete,) s
5 186 M
(non-boolean kSAT has polynomial time computational geometric algorithms to find satisfying int) s
5 175 M
(ersection points. It is intriguing to observe) s
5 164 M
(a sharp threshold phenomenon in computational hardness of satisfiability - an easy polytime no) s
5 153 M
(n-boolean kSAT becomes NP-hard boolean kSAT.) s
5 142 M
(Assuming that real-life voters have non-boolean decision functions only, the RHS circuit of Pr) s
5 131 M
(\(Good\) majority voting is confined to polytime) s
5 120 M
(satisfiability realm alone. Non-boolean voting decision functions can be specialized for 2 can) s
5 109 M
(didates special case too - this allows fractional) s
5 98 M
(values to decision variables. This is plausible because Linear Programming \(non-boolean\) is po) s
5 87 M
(lytime while 0-1 Integer Linear Programming) s
5 76 M
(\(boolean\) is NP-complete. Because of Non-boolean Social Choice functions \(e.g Linear Programs ) s
5 65 M
(with Constraints which each voter solves\) being the most generic which allow fractional values) s
5 54 M
( to variables, any of the standard polytime Simplex algorithms - Dantzig Pivot Tableau and Kar) s
5 43 M
(markar Interior Point Method - can be applied to find a satisfying assignment. Voter decides t) s
5 32 M
(o vote for/againt when the solution to LP is above/below a threshold. This is a far from real,) s
5 21 M
(hypothetical,perfectly rational election setting. Real life elections have bounded rationality) s
5 10 M
(. It is an alternative to Computational Geometric intersection detection previously mentioned.) s
_R
S
%%Page: (146) 146
%%BeginPageSetup
_S
18 36 translate
/pagenum 146 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (146) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(References:) s
5 670 M
(----------) s
5 659 M
(275.1 Intersection detection - https://www.cs.umd.edu/~mount/Papers/crc04-intersect.pdf) s
5 648 M
(275.2 Transversal Intersection of two curves - Newton iteration and Cramer's rule - https://en) s
5 637 M
(.wikipedia.org/wiki/Intersection_\(Euclidean_geometry\)) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(----------------------------) s
5 593 M
(276. \(FEATURE-DONE\) Commits as on 30 May 2016 - Continued from 220) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(----------------------------) s
5 560 M
(VIRGO CloudFS system calls have been added \(invoked by unique number from syscall_32.tbl\) for ) s
5 549 M
(C++ Boost::Python interface to) s
5 538 M
(VIRGO Linux System Calls. Switch clause with a boolean flag has been introduced to select eith) s
5 527 M
(er VIRGO memory or filesystem calls.) s
5 516 M
(kern.log and CloudFS textfile Logs for VIRGO memory and filesystem invocations from AsFer pyth) s
5 505 M
(on have been committed to testlogs/) s
5 494 M
( ) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(----------------------------) s
5 461 M
(277. \(FEATURE-DONE\) Commits as on 31 May 2016 - Continued from 220 and 276) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(----------------------------) s
5 428 M
(Python CAPI interface to NEURONRAIN VIRGO Linux System Calls has been updated to include File ) s
5 417 M
(System open, read, write primitives also.) s
5 406 M
(Rebuilt extension binaries, kern.logs and example appended text file have been committed to te) s
5 395 M
(stlogs/. This is exactly similar to) s
5 384 M
(commits done for Boost::Python C++ interface. Switch clause has been added to select memory or) s
5 373 M
( filesystem VIRGO syscalls.) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(---------------------------) s
5 329 M
(278. \(FEATURE-DONE\) Commits as on 7 June 2016) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(---------------------------) s
5 296 M
(- getopts implementation for commandline args parsing has been introduced in Maitreya textclie) s
5 285 M
(nt rule search python script.) s
5 274 M
(- an example logs for possible high precipitation longitude/latitudes in future dates - July 2) s
5 263 M
(016 - predicted by sequence mining learnt) s
5 252 M
(rules from past data has been added to testlogs/) s
5 241 M
( ) s
5 230 M
(root@shrinivaasanka-Inspiron-1545:/home/shrinivaasanka/Maitreya7_GitHub/martin-pe/maitreya7/re) s
5 219 M
(leases/download/v7.1.1/maitreya-7.1.1/src/jyotish# python MaitreyaEncHoro_RuleSearch.py  --min) s
5 208 M
(_year=2016 --min_month=7 --min_days=1 --min_hours=10 --min_minutes=10 --min_seconds=10 --min_l) s
5 197 M
(ong=77 --min_lat=07 --max_year=2016 --max_month=7 --max_days=15 --max_hours=10 --max_minutes=1) s
5 186 M
(0 --max_seconds=10 --max_long=78 --max_lat=10 |grep " a Class Association") s
5 175 M
({  --date="2016-7-2 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a Cl) s
5 164 M
(ass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 153 M
({  --date="2016-7-3 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a Cl) s
5 142 M
(ass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 131 M
({  --date="2016-7-4 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a Cl) s
5 120 M
(ass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 109 M
({  --date="2016-7-5 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a Cl) s
5 98 M
(ass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 87 M
({  --date="2016-7-6 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a Cl) s
5 76 M
(ass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Gemini) s
5 65 M
({  --date="2016-7-11 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a C) s
5 54 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Cancer) s
5 43 M
({  --date="2016-7-13 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is a C) s
5 32 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Cancer) s
5 21 M
({  --date="2016-7-14 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is a C) s
5 10 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Cancer) s
_R
S
%%Page: (147) 147
%%BeginPageSetup
_S
18 36 translate
/pagenum 147 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (147) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(------------------------------------) s
5 659 M
(279. \(FEATURE-DONE\) Commits - 23 June 2016 - Recurrent Neural Network Long Term Short Term Mem) s
5 648 M
(ory - Deep Learning - Implementation) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(------------------------------------) s
5 615 M
(A very minimal python implementation of LSTM RNN based on Schmidhuber-Hochreiter LSTM has been) s
5 604 M
( added to) s
5 593 M
(already existing AsFer algorithms repertoire. LSTM RNN has gained traction in recent years in ) s
5 582 M
(its variety of) s
5 571 M
(applications in NLP, Speech Recognition, Image Pattern Recognition etc., The logs for this imp) s
5 560 M
(lementation show) s
5 549 M
(a convergence of final output layer in 25th iteration itself \(out of 10000\). Learning the weig) s
5 538 M
(hts requires) s
5 527 M
(other algorithms like Gradient Descent, Backpropagation \(and there are already known limitatio) s
5 516 M
(ns in weight learning with these\)) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(--------------------------------) s
5 472 M
(280. \(FEATURE-DONE\) Commits - 23 June 2016 - Minimal Reinforcement Learning \(Monte Carlo Actio) s
5 461 M
(n Policy Search\) implementation) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(--------------------------------) s
5 428 M
(Reinforcement Learning has been implemented which changes state based on environmental observa) s
5 417 M
(tion and an appropriate policy is) s
5 406 M
(chosen for observation by Monte Carlo Random Policy Search based on which rewards for each tra) s
5 395 M
(nsitions are accumulated and output in the end.) s
5 384 M
(Logs for 3 consecutive executions of Reinforcement Learning have been committed with differing) s
5 373 M
( total rewards gained.) s
5 362 M
(Input observations are read from text file ReinforcementLearning.input.txt.) s
5 340 M
(Reference: Richard Sutton - http://webdocs.cs.ualberta.ca/~sutton/papers/Sutton-PhD-thesis.pdf) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(--------------------------------) s
5 296 M
(281. \(FEATURE-DONE\) Commits - 24 June 2016 - ThoughtNet Reinforcement Learning implementation) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(--------------------------------) s
5 263 M
(ThoughtNet based Reinforcement Learning Evocation has been experimentally added as a clause in) s
5 252 M
( python-src/DeepLearning_ReinforcementLearningMonteCarlo.py.  This is just to demonstrate how ) s
5 241 M
(ThoughtNet hypergraph based evocation is supposed to work. python-src/ReinforcementLearning.in) s
5 230 M
(put.txt has been updated to have a meaningful textual excerpt. Logs for this evocative model h) s
5 219 M
(as been committed to python-src/testlogs/DeepLearning_ReinforcementLearningMonteCarlo.ThoughtN) s
5 208 M
(et.out.24June2016) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(-----------------------) s
5 164 M
(282. \(FEATURE-DONE\) Commits - 26 June 2016 - ThoughtNet File System Storage) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(-----------------------) s
5 131 M
(ThoughtNet text files have been stored into a filesystem backend. It is read and eval\(\)-ed int) s
5 120 M
(o list of edges and hypergraphs.) s
5 109 M
(Separate ThoughtNet directory has been created for these text files.) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(-----------------------------------------) s
5 65 M
(283. \(THEORY\) ThoughtNet growth and Evocation Reinforcement Learning algorithm \(not feasible t) s
5 54 M
(o implement exactly\):) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(-----------------------------------------) s
5 21 M
(loop_forever) s
5 10 M
({) s
_R
S
%%Page: (148) 148
%%BeginPageSetup
_S
18 36 translate
/pagenum 148 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (148) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(When an observation stimulus from environment arrives:) s
5 681 M
(        \(*\) Sensory instruments that simulate eye, ear, nose, etc., receive stimuli from envir) s
5 670 M
(onment \(thoughts, music, noise, sound etc.,\)) s
5 659 M
(and convert to sentential form - this is of the order of billions - and appended to list in Th) s
5 648 M
(oughtNet_Edges.txt) s
5 637 M
(        \(*\) Sentences are classified into categories \(for example, by maximum core numbers in ) s
5 626 M
(definition wordnet subgraph\) which is also order of billions and added as hypergraph edges in ) s
5 615 M
(dict with in ThoughtNet_Hypergraph.txt - hyperedge because same document can be in more than 2) s
5 604 M
( classes. This creates a list for each key in dict and the list has to be sorted based on evoc) s
5 593 M
(ation potential - reward for reinforcement learning. There is no need for monte carlo and dyna) s
5 582 M
(mic programming if pre-sorted because sum of rewards is always maximum - only topmost evocativ) s
5 571 M
(e edge is chosen in each list of a key.) s
5 560 M
(        \(*\) observation is split to atomic units - tokenized - or classified and each unit is ) s
5 549 M
(lookedup in ThoughtNet_Hypergraph.txt to get a list and hyperedge with maximum potential is re) s
5 538 M
(turned as evocative with optional lambda evaluation which is the action side of reinforcement ) s
5 527 M
(learning.) s
5 516 M
(}) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(----------------) s
5 472 M
(284. \(FEATURE-DONE\) Auto Regression Moving Average - ARMA - Time Series Analysis for Stock Tic) s
5 461 M
(ker Stream) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(----------------) s
5 428 M
(Commits - 27 June 2016) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(----------------) s
5 395 M
(1. Time Series Analysis with AutoRegressionMovingAverage of Stock Quote streamed data has been) s
5 384 M
( implemented \(R function not invoked\). Logs which) s
5 373 M
(show the actual data and projected quotes by ARMA for few iterations have been committed to te) s
5 362 M
(stlogs. This ARMA projection has been plotted in R to a pdf file which is also committed.) s
5 351 M
(2. ARMA code implements a very basic regression+moving averages. Equation used is same though ) s
5 340 M
(not in usual ARMA format) s
5 329 M
(\(1-sigma\(\)\)X\(t\) = \(1+sigma\(\)\)) s
5 318 M
(3. Also committed is the R plot for SequenceMined Pattern in first 10000 prime numbers in bina) s
5 307 M
(ry format \(DJIA approx and approxfun plots have been regenerated\)) s
5 285 M
(--------------------------------------------------------------------------------------------) s
5 274 M
(285. \(FEATURE-DONE\) Commits 1 - 28 June 2016 - Neo4j ThoughtNet Hypergraph Database Creation) s
5 263 M
(--------------------------------------------------------------------------------------------) s
5 252 M
(1.New file ThoughtNet_Neo4j.py has been added to repository which reads the ThoughtNet edges a) s
5 241 M
(nd hypergraph text files and uploads them into) s
5 230 M
(Neo4j Graph Database through py2neo client for Neo4j.) s
5 219 M
(2.Neo4j being a NoSQL graph database assists in querying the thoughtnet and scalable.) s
5 208 M
(3.ThoughtNet text files have been updated with few more edges and logs for how Neo4j graph dat) s
5 197 M
(abase for ThoughtNet looks like have been) s
5 186 M
(committed to testlogs/) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(-----) s
5 142 M
(286. \(FEATURE-DONE\) Commits 2 - 28 June 2016 -  ThoughtNet Neo4j Transactional graph creation) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(-----) s
5 109 M
(1.transactional begin\(\) and commit\(\) for graph node and edges creation has been) s
5 98 M
(included.) s
5 87 M
(2.This requires disabling bolt and neokit disable-auth due to an auth failure config issue.) s
5 76 M
(3.Logs and a screenshot for the ThoughtNet Hypergraph created in GUI \(http://localhost:7474\) h) s
5 65 M
(ave been committed to testlogs/) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(------------------------------------) s
5 21 M
(287. \(FEATURE-DONE\) Commits - 29 June 2016 - ThoughtNet and Reinforcement Deep Learning) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (149) 149
%%BeginPageSetup
_S
18 36 translate
/pagenum 149 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (149) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(------------------------------------) s
5 681 M
(Major commits for ThoughtNet Hypergraph Construction and Reinforcement Learning from it) s
5 670 M
(---------------------------------------------------------------------------------------------) s
5 659 M
(1. python-src/DeepLearning_ReinforcementLearningMonteCarlo.py reads from automatically generat) s
5 648 M
(ed ThoughtNet Hypergraph text backend created) s
5 637 M
(by python-src/ThoughtNet/Create_ThoughtNet_Hypergraph.py in python-src/ThoughtNet/ThoughtNet_H) s
5 626 M
(ypergraph_Generated.txt) s
5 615 M
(2. Separate Recursive Gloss Overlap CoreNumber and PageRank based Unsupervised Classifier has ) s
5 604 M
(been implemented in python-src/RecursiveGlossOverlap_Classifier.py which takes any text as inp) s
5 593 M
(ut arg and returns the classes it belongs to without any training data. This script is importe) s
5 582 M
(d in python-src/ThoughtNet/Create_ThoughtNet_Hypergraph.py to automatically classify observati) s
5 571 M
(ons from environment and to build ThoughtNet based on them for evocations later.) s
5 560 M
(3. python-src/ThoughtNet/ThoughtNet_Neo4j.py reads from automatically generated ThoughtNet in ) s
5 549 M
(python-src/ThoughtNet/ThoughtNet_Hypergraph_Generated.txt) s
5 538 M
(4. Logs for above have been committed to respective testlogs/ directories) s
5 527 M
(5. Compared to human evaluated ThoughtNet Hypergraphs in python-src/ThoughtNet/ThoughtNet_Hype) s
5 516 M
(rgraph.txt, generated python-src/ThoughtNet/ThoughtNet_Hypergraph_Generated.txt does quite a d) s
5 505 M
(eep learning from WordNet mining and evocations based on this automated ThoughtNet are reasona) s
5 494 M
(bly accurate.) s
5 483 M
(6. python-src/ReinforcementLearning.input.txt and python-src/ThoughtNet/ThoughtNet_Edges.txt h) s
5 472 M
(ave been updated manually.) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(-----------------------------------) s
5 428 M
(288. \(FEATURE-DONE\) Schematic Diagram for ThoughtNet Reinforcement Evocation - approximate imp) s
5 417 M
(lementation of 283) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(-----------------------------------) s
5 373 M
(        Environment -------\(stimuli\)------> Sensors -----> Create_ThoughtNet_Hypergraph.py ---) s
5 362 M
(-> RecursiveGlossOverlap_Classifier.py ----|) s
5 351 M
(                                                                            |                 ) s
5 340 M
(                                         V) s
5 329 M
(                                                                            V                 ) s
5 318 M
(                                         |) s
5 307 M
(                        Neo4j Graph DB<-------ThoughtNet_Neo4j.py <-----ThoughtNet_HyperGraph_) s
5 296 M
(Generated.txt <----------------------------<) s
5 285 M
(                                                                            |) s
5 274 M
(                                                                            V) s
5 263 M
(                        Observations----------------> DeepLearning_ReinforcementLearningMonteC) s
5 252 M
(arlo.py ---------> Evocations) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(---------) s
5 208 M
(289. \(FEATURE-DONE\) Commits - 30 June 2016 - Sentiment Scoring of ThoughtNet edges and Sorting) s
5 197 M
( per Class) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(---------) s
5 164 M
(1. Create_ThoughtNet_Hypergraph.py has been changed to do sentiment scoring which is a nett of) s
5 153 M
( positivity, negativity and objectivity per) s
5 142 M
(thought hyperedge and to sort the per-class key list of hyperedges descending based on sentime) s
5 131 M
(nt scores computed.) s
5 120 M
(2. python-src/ReinforcementLearning.input.txt which is the input observation stimulus and pyth) s
5 109 M
(on-src/ThoughtNet/ThoughtNet_Edges.txt, the training data for construction of Hypergraph have ) s
5 98 M
(been updated with additional text sentences.) s
5 87 M
(3. Hypergraph created for this is committed at python-src/ThoughtNet/ThoughtNet_Hypergraph_Gen) s
5 76 M
(erated.txt with logs in python-src/ThoughtNet/testlogs/Create_ThoughtNet_Hypergraph.sentiment_) s
5 65 M
(sorted.out.30June2016.  Example evocatives for python-src/ReinforcementLearning.input.txt inpu) s
5 54 M
(t to python-src/DeepLearning_ReinforcementLearningMonteCarlo.py are logged in python-src/testl) s
5 43 M
(ogs/DeepLearning_ReinforcementLearningMonteCarlo.ThoughtNet_sentiment_sorted.out.30June2016) s
5 21 M
(This completes ThoughtNet Classifications based Evocative Inference implementation minimally.) s
_R
S
%%Page: (150) 150
%%BeginPageSetup
_S
18 36 translate
/pagenum 150 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (150) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(--------------) s
5 670 M
(290. \(FEATURE-DONE\) Commits - 1 July 2016 - Reinforcement Learning Bifurcation) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(--------------) s
5 637 M
(Reinforcement Learning code has been bifurcated into two files than having in if-else clause, ) s
5 626 M
(for facilitating future imports :-) s
5 615 M
(one for MonteCarlo and the other for ThoughtNet Evocation.  Logs for these two have been commi) s
5 604 M
(tted to testlogs.) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(---------------) s
5 560 M
(291. \(THEORY\) Logical Time and ThoughNet \(related to EventNet 70-79\)) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(---------------) s
5 527 M
(ThoughtNet Hypergraph is multiplanar and when seen from elevation it resembles billions of sky) s
5 516 M
(scraper category towers interconnected by Thought) s
5 505 M
(HyperEdges which are classified onto these categories. This gives an alternative route to defi) s
5 494 M
(ne Time. Each tower represents chronologically stacked up events/occurrences/thoughts when uns) s
5 483 M
(orted i.e most recent thought is on top always and evocation based on chronology returns topmo) s
5 472 M
(st thought. ThoughtNet evocation is an associative memory process returning most relevant thou) s
5 461 M
(ght in past for an observation in present. Two stack node towers with differing depths define ) s
5 450 M
(two views of time i.e time is subjective to the category than objective across ThoughtNet. In ) s
5 439 M
(a timeless universe, measuring duration between two events reduces to height of these unequal ) s
5 428 M
(stacks which is not absolute - there are many logical "Time"\(s\). Each stack node has its own i) s
5 417 M
(ndependent logical "Clock". This makes no assumption about relativistic theory of time and is ) s
5 406 M
(independent of any physical law. From theory of computation standpoint, this is similar to a m) s
5 395 M
(ulti-tape turing machine but with added feature in which tapes are interconnected. When the st) s
5 384 M
(acks are sorted for evocation potential based on some criterion \(e.g sentiwordnet, EEG electri) s
5 373 M
(c pulse etc.,\) chronology information is lost to some extent but still the edge id retains it ) s
5 362 M
(- most recent edge has largest edge numeric id. Yet, this assumes a distributed global unique ) s
5 351 M
(id is achievable. When events occur in parallel, two edges geographically separate can have sa) s
5 340 M
(me edge id in the absence of special mechanisms for uniqueness. Vis-a-vis EventNet, ThoughtNet) s
5 329 M
( is not a causation graph. Relationship between EventNet and ThoughtNet is: Every partaker nod) s
5 318 M
(e in EventNet has a ThoughtNet. EventNet when topologically sorted has no absolute time - can ) s
5 307 M
(have many orderings of events - similar to ThoughtNet - each thought edge can have varied logi) s
5 296 M
(cal timestamps when viewed from different category spectacles - in the absence of time. Follow) s
5 285 M
(ing is the hierarchy: Each node in an EventNet is an event, and each event has partaker nodes ) s
5 274 M
(which create graph by interaction among themselves, and each partaker node has an internal Tho) s
5 263 M
(ughtNet. Thus there are 3 levels - EventNet is the biggest, Event is bigger and Partaker is bi) s
5 252 M
(g - EventNet is a graph of graph nodes of graph nodes. The tensor product of these nested grap) s
5 241 M
(hs has 3 tiers - EventNet\(Event\(PartakerThoughtNet\)\)\) - denoted as EventNet \(*\) Event \(*\) Part) s
5 230 M
(akerThoughtNet. This tensor product captures both individual's view of event ordering and cosm) s
5 219 M
(ic event ordering. ThoughtNet per node in an event is more of a projection of its observable u) s
5 208 M
(niverse - imaginary - while interaction among nodes in an event and causality between events a) s
5 197 M
(re real. Measurement of duration between events in this tensor product can be done in various ) s
5 186 M
(ways: 1\) Distance between two event nodes causally connected 2\) Global topological sorting of ) s
5 175 M
(EventNet 3\) From the ThoughtNet projection observed by each node in an event. This gives rise ) s
5 164 M
(to multiple interpretations of time.) s
5 142 M
(As a working example, following edges were evoked when word "economic" was uttered:) s
5 131 M
(===========================================================================================) s
5 120 M
(Observation: economic) s
5 109 M
(evocative thought \(reward\) returned\(in descending order of evocation potential\): The HDI was c) s
5 98 M
(reated to emphasize that people and their capabilities should be the ultimate criteria for ass) s
5 87 M
(essing the development of a country, not economic growth alone. The HDI can also be used to qu) s
5 76 M
(estion national policy choices, asking how two countries with the same level of GNI per capita) s
5 65 M
( can end up with different human development outcomes. These contrasts can stimulate debate ab) s
5 54 M
(out government policy priorities.) s
5 43 M
(evocative thought \(reward\) returned\(in descending order of evocation potential\): We need an SP) s
5 32 M
(I and we need to understand its value in our society because we need to understand how we\342\\200) s
5 21 M
(\\231re doing in terms of health and education and the quality of our water) s
5 10 M
(evocative thought \(reward\) returned\(in descending order of evocation potential\): Social progre) s
_R
S
%%Page: (151) 151
%%BeginPageSetup
_S
18 36 translate
/pagenum 151 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (151) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ss depends on the policy choices, investments, and implementation capabilities of multiple sta) s
5 681 M
(keholders\342\\200\\224government, civil society, and business.) s
5 670 M
(===========================================================================================) s
5 659 M
(Only the top most evocative edge \(sorted based on sentiment scores\) has the word "economics" i) s
5 648 M
(n it while the other two don't. But still the classification by definition graph core numbers ) s
5 637 M
(inferred that these belong to "economic" class and pigeonholed them to stack "economic" - in o) s
5 626 M
(ther words the concept "economics" was deep-learnt by inner graph structure of the sentence wi) s
5 615 M
(thout training data. But bottom two edges were most recent compared to the topmost and yet sco) s
5 604 M
(red less on sentiment.) s
5 582 M
(A practical ThoughtNet storage could be of billions of edges based on experiential learning of) s
5 571 M
( an individual over a period of lifetime and has to be suitably stored in a medium that mimick) s
5 560 M
(s brain.  Ideally ThoughtNet has to be in some persistence bigdata storage though it still is ) s
5 549 M
(just an approximation. Neo4j backend for ThoughtNet has been implemented in ThoughtNet/. Thoug) s
5 538 M
(htNet is kind of Evocation WordNet expanded for thoughts represented as sentences \(because the) s
5 527 M
(re is no better way to encode thoughts than in a natural language\) and classified. Hypergraph ) s
5 516 M
(encodes the edges as numbers - for example, "transactions":[1] and "security":[1] implies that) s
5 505 M
( a sentence numbered 1 has been pre-classified under transactions and security categories.  Al) s
5 494 M
(so "services":[0,1] implies that there are two sentences encoded as 0 and 1 classified in serv) s
5 483 M
(ices category with descending order of evocative potentials - 0 is more evocative than 1.  In ) s
5 472 M
(an advanced setting the ThoughtNet stores the lambda function composition parenthesized equiva) s
5 461 M
(lent to the sentence and action taken upon evocation is to evaluate the most potent evocative ) s
5 450 M
(lambda expression.  On an evocative thought, state of "ThoughtNet" mind changes with correspon) s
5 439 M
(ding action associated with that state \(the usual mind-word-action triad\). Philosophically, th) s
5 428 M
(is simulates the following thought experiment:) s
5 417 M
(        - Word: Sensory receptors perceive stimuli - events) s
5 406 M
(        - Mind: stimuli evoke thoughts in past) s
5 395 M
(        - Action: Evocative thought is processed by intellect and inspires action - action is ) s
5 384 M
(a lambda evaluation of a sentence.) s
5 373 M
(##############################################################################) s
5 351 M
(        Senses\(Word\) <---------> Mind\(Evocation\) <---------> Action\(Intellect\)) s
5 340 M
(         ^                                                        ^) s
5 329 M
(         |<------------------------------------------------------>|) s
5 307 M
(and above is an infinite cycle. Previous schematic maps interestingly to Reinforcement Learnin) s
5 296 M
(g\(Agent-Environment-Action-Reward\).) s
5 285 M
(##############################################################################) s
5 274 M
(In this aspect, ThoughtNet is a qualitative experimental inference model compared to quantitat) s
5 263 M
(ive Neural Networks.) s
5 241 M
(It is assumed in present implementation that every thought edge is a state implicitly, and the) s
5 230 M
( action) s
5 219 M
(for the state is the "meaning" inferred by recursive lambda evaluation \(lambda composition tre) s
5 208 M
(e evaluation for a natural) s
5 197 M
(language sentence is not implemented separately because its reverse is already done through cl) s
5 186 M
(osure of a RGO graph in other) s
5 175 M
(code in NeuronRain AsFer. Approximately every edge in Recursive Gloss Overlap wordnet subgraph) s
5 164 M
( is a lambda function with its) s
5 153 M
(two vertices as operands which gives a more generic lambda graph composition of a text\)) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(------------------------------) s
5 109 M
(292. \(THEORY\) Recursive Lambda Function Growth Algorithm and Recursive Gloss Overlap Graph - 2) s
5 98 M
(16 Continued) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(------------------------------) s
5 65 M
(Lambda Function Recursive Growth algorithm for inferring meaning of natual language text appro) s
5 54 M
(ximately, mentioned in 216 relies) s
5 43 M
(on creation of lambda function composition tree top-down by parsing the connectives and keywor) s
5 32 M
(ds of the text. Alternative to this top-down) s
5 21 M
(parsing is to construct the lambda function composition graph instead from the Recursive Gloss) s
5 10 M
( Overlap WordNet subgraph itself where) s
_R
S
%%Page: (152) 152
%%BeginPageSetup
_S
18 36 translate
/pagenum 152 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (152) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(each edge is a lambda function with two vertex endpoints as operands \(mentioned in 291\). Depth) s
5 681 M
( First Traversal of this graph iteratively) s
5 670 M
(evaluates a lambda function f1 of an edge, f1 is applied to next edge vertices in traversal to) s
5 659 M
( return f2\(f1\), and so on upto function) s
5 648 M
(fn\(fn-1\(fn-2\(.....\(f2\(f1\)\)...\) which completes the recursive composition. Which one is better ) s
5 637 M
(- tree or graph lambda function growth - depends) s
5 626 M
(on the depth of learning necessary. Rationale in both is that the "meaning" is accumulated lef) s
5 615 M
(t-right and top-down on reading a text.) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(------------------------------------) s
5 571 M
(293.\(FEATURE-DONE\) Commits - 7 July 2016 - Experimental implementation of Recursive Lambda Fun) s
5 560 M
(ction Growth Algorithm \(216 and 292\)) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(------------------------------------) s
5 527 M
(1.Each Sentence Text is converted to an AVL Balanced Tree \(inorder traversal of this tree crea) s
5 516 M
(tes the original text\)) s
5 505 M
(2.Postorder traversal of this tree computes a postfix expression) s
5 494 M
(3.Postfix expression is evaluated and a lambda function composition is generated by parenthesi) s
5 483 M
(zation denoting a function with two arguments.Logs) s
5 472 M
(for this have been committed to testlogs/ which show the inorder and postorder traversal and t) s
5 461 M
(he final lambda function grown from a text.) s
5 450 M
(4.This is different from Part of Speech tree or a Context Free Grammar parse tree.) s
5 439 M
(5.On an average every english sentence has a connective on every third word which is exactly w) s
5 428 M
(hat inorder traversal of AVL binary tree does.If not a general B+-Tree can be an ideal choice ) s
5 417 M
(to translate a sentence to tree. Every subtree root in AVL tree is a lambda function with leav) s
5 406 M
(es as operands.) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(-------------) s
5 362 M
(294. \(FEATURE-DONE\) Commits - 8 July 2016) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-------------) s
5 329 M
(Changed Postfix Evaluation to Infix evaluation in Lambda Function Growth with logs in testlogs) s
5 318 M
(/) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(--------------------------------) s
5 274 M
(295. \(THEORY\) Contextual Multi-Armed Bandits, Reinforcement Learning and ThoughtNet - related ) s
5 263 M
(to 241, 291, 292 - 18 July 2016) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(--------------------------------) s
5 230 M
(Contextual Multi-Armed Bandits are the class of problems where a choice has to be made amongst) s
5 219 M
( k arms and each iteration fetches a reward. Choice of an arm in next iteration depends on rew) s
5 208 M
(ards for previous iteration. Ideal examples are Recommender Systems, Contextual website advert) s
5 197 M
(isements etc., Thus an agent learns from past and policy action depends on rewards for previou) s
5 186 M
(s actions. Translating this into ThoughtNet realm is fairly straightforward - Each class stack) s
5 175 M
( node in ThoughtNet is a multi-armed bandit and an evocative has to choose a hyperedge that 1\)) s
5 164 M
( maximizes reward by fitting the context meaningfully and 2\) learns from rewards for previous ) s
5 153 M
(actions by virtue of ThoughtNet storage itself because ThoughtNet per partaker is built gradua) s
5 142 M
(lly by storing thought hyperedges colored with a sentiment mentioned in Ramsey coloring of Tho) s
5 131 M
(ughtNet in 236 \(or SentiWordNet score\). In terms of a Markov Model, Reward for an evocative wo) s
5 120 M
(rd w at time t is denoted as Reward\(w,t\) and returns a corresponding thought hyperedge which d) s
5 109 M
(epends on Reward\(w, t-1\), Reward\(w, t-2\) and so on i.e Reward\(w,t\) = function_of\(Reward\(w,t-1\)) s
5 98 M
(, Reward\(w,t-2\), ..., Reward\(w,0\)\). Recommender Systems in e-commerce websites which display s) s
5 87 M
(imilar items to a selected item in shopping cart have a striking resemblance to ThoughtNet evo) s
5 76 M
(cation. This makes ThoughtNet a suitable candidate for Recommender System - Sales history is b) s
5 65 M
(uilt as a ThoughtNet similar to the algorithm mentioned in 283 and 288. Every item added to sh) s
5 54 M
(opping cart returns evocatives based on some scoring \(sentiment ranked etc.,\) which is a Recom) s
5 43 M
(mender System.) s
5 21 M
(Reference:) s
5 10 M
(---------) s
_R
S
%%Page: (153) 153
%%BeginPageSetup
_S
18 36 translate
/pagenum 153 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (153) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(295.1 Multiword Testing Decision Service - http://arxiv.org/pdf/1606.03966v1.pdf) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(--------------------------------------) s
5 648 M
(296. \(FEATURE-DONE\) Music Pattern Mining - Jensen-Shannon Divergence Distance between two FFT ) s
5 637 M
(Frequency Distributions for similarity) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(--------------------------------------) s
5 604 M
(Commits - 20 July 2016 - related to 68, 69) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(--------------------------------------) s
5 571 M
(\(NOTE: Because of some weird SourceForge/GitHub error, FFT txt files added to repos on 19 July) s
5 560 M
( 2016 are still flagged as new\(?\). They have been) s
5 549 M
(added to repos again along with new files\)) s
5 527 M
(FFTs of 2 audio files are parsed and written to *_trimmed.txt by awk to contain only the frequ) s
5 516 M
(encies for each sample.) s
5 505 M
(These files are read by JensenShannonDivergence.py to compute the JS Distance between these tw) s
5 494 M
(o FFT frequency distributions.) s
5 483 M
(Preprocessing is done so as to normalize the frequency to map to a probability \(frequency/sum_) s
5 472 M
(of_frequencies\) which gives) s
5 461 M
(probability distribution from frequency distribution. Jensen-Shannon Distance which is the wei) s
5 450 M
(ghted average of bidirectional) s
5 439 M
(Kullback-Leibler Divergence measures of the two distributions, indicates similarity or distanc) s
5 428 M
(e between two music samples) s
5 417 M
(quantitatively.) s
5 395 M
(There are 4 music samples: music_pattern_mining/FFT_classical_1_20July2016.txt and music_patte) s
5 384 M
(rn_mining/FFT_classical_2_20July2016.txt) s
5 373 M
(are similar \(similar notes sung by different musicians\). music_pattern_mining/FFT_classical_1_) s
5 362 M
(19July2016.txt and) s
5 351 M
(music_pattern_mining/FFT_classical_2_19July2016.txt are also similar \(different set of notes s) s
5 340 M
(ung by different musicians\). Jensen-Shannon) s
5 329 M
(distance across these 4 ordered pairs is captured and committed in testlogs/) s
5 307 M
(Jensen-Shannon Distance across 2 FFT Frquency-Probability distributions of music samples is a ) s
5 296 M
(simple, basic measure for distance and can be) s
5 285 M
(basis for clustering and classification of music. There could be some inaccuracies because Aud) s
5 274 M
(acity does not generate FFT for complete) s
5 263 M
(music file but only for first ~5 minutes. Two similar notes with different musicians could be ) s
5 252 M
(distant and two dissimilar notes might be) s
5 241 M
(close because of this Audacity limitation. Presently noise filtering and cherrypick peak frequ) s
5 230 M
(encies is not done and ) s
5 219 M
(entire frequency range is compared.) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(---------) s
5 175 M
(297. \(FEATURE-DONE\) Software Analytics - Cyclomatic Complexity from SATURN .dot graphs - relat) s
5 164 M
(ed to 65) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(---------) s
5 131 M
(Commits - 22 July 2016) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(---------) s
5 98 M
(New Python-Spark implementation that reads the SATURN program analyzer generated .dot graph fi) s
5 87 M
(les processes them with Spark) s
5 76 M
(MapReduce to find the number of edges and vertices in the graph represented by .dot file for e) s
5 65 M
(ach snippet. From this) s
5 54 M
(Cyclomatic Complexity is calculated \(which is Edges - Vertices + 2\) -  a standard Function Poi) s
5 43 M
(nt Estimator for code complexity.) s
5 32 M
(There were some JVM crashes frequently while starting up spark-submit logs for which are also ) s
5 21 M
(committed in testlogs along with) s
5 10 M
(the two successful Spark computed Cyclomatic Complexity measures for two .dot files. These .do) s
_R
S
%%Page: (154) 154
%%BeginPageSetup
_S
18 36 translate
/pagenum 154 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (154) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(t files are sourced from) s
5 681 M
(VIRGO Linux saturn program analysis kernel driver.) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(--------------) s
5 637 M
(298. \(FEATURE-DONE\) String Search - Longest Common Substring - Suffix Trees\(Suffix Arrays+LCP\)) s
5 626 M
( Implementation) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(--------------) s
5 593 M
(Commits - 26 July 2016) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(--------------) s
5 560 M
(This implementation finds the most repeated substrings within a larger string by constructing ) s
5 549 M
(Suffix Trees) s
5 538 M
(indirectly with Suffix Array and Longest Common Prefix \(LCP\) datastructures. An ideal applicat) s
5 527 M
(ion for String Search is) s
5 516 M
(in Bioinformatics, Streamed Data analysis etc., For example, a Time Series data with fluctuati) s
5 505 M
(ng curve can be ) s
5 494 M
(encoded as a huge binary string by mapping ebb and tide to 0 and 1. Thus a function graph time) s
5 483 M
( series is projected on to) s
5 472 M
({0,1} alphabet to create blob. Usual Time Series analysis mines for Trends, Cycles, Seasons an) s
5 461 M
(d Irregularities over time.) s
5 450 M
(This binary encoding of time series gives an alternative spectacle to look at the trends \(high) s
5 439 M
(s and lows\). Longest repeating) s
5 428 M
(pattern in this binary encoding is a cycle. Suffix Array by [UdiManber] has been implemented o) s
5 417 M
(ver Suffix Trees implementations) s
5 406 M
(of [Weiner] and [Ukkonen] because of simplicity of Suffix Arrays and Suffix Trees=Suffix Array) s
5 395 M
(s + LCPs.) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(--------) s
5 351 M
(299. \(FEATURE-DONE\) Binary String Encoding of Time Series - Commits - 27 July 2016) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(--------) s
5 318 M
(1. New python script to encode a time series datastream as binary string has been added to rep) s
5 307 M
(ository.) s
5 296 M
(2. This writes to StringSearch_Pattern.txt which is read by StringSearch_LongestRepeatedSubstr) s
5 285 M
(ing.py) s
5 274 M
(3. Encoding scheme: If next data point is smaller, write 0 else if greater write 1. This captu) s
5 263 M
(res the) s
5 252 M
(fluctuations in dataset irrespective of the amplitudes at each point.) s
5 241 M
(4. For example a bitonic sequence would have been encoded as ....111111110000000.... \(ascends ) s
5 230 M
(and descends\)) s
5 219 M
(5. Suffix Array + LCP algorithm on this sequence finds the Longest Repeated Substring. For a s) s
5 208 M
(pecific example of) s
5 197 M
(Stock ticker time series data this amounts to frequently recurring fluctuation pattern.) s
5 186 M
(6. Logs for the above have been committed to testlogs/) s
5 175 M
(7. Every time series dataset is a union of bitonic sequences with varying lengths correspondin) s
5 164 M
(g to peaks and troughs) s
5 153 M
(and has self-similar fractal structure \(zooming out the series has similarities to original se) s
5 142 M
(ries\) . This implies the ) s
5 131 M
(binary string encoded as previously is fractal too.) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(--------) s
5 87 M
(300. \(FEATURE-DONE\) Tornado GUI Authentication Template - Commits - 27 July 2016) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(--------) s
5 54 M
(Rewritten Tornado GUI with Login Template and redirect to Algorithms Execution Template. Prese) s
5 43 M
(ntly implemented for only a ) s
5 32 M
(root user by cookie setting. Entry point has been changed to http://host:33333/neuronrain_auth) s
5 21 M
( \(Login\).) s
_R
S
%%Page: (155) 155
%%BeginPageSetup
_S
18 36 translate
/pagenum 155 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (155) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(--------------------) s
5 670 M
(301. \(FEATURE-DONE\) OAuth2 authentication and credentials storage in MongoDB/Redis with passli) s
5 659 M
(b sha256 encryption) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(--------------------) s
5 626 M
(1.Login Handler has been augmented with OAuth2 authentication by python-oauth2 library.) s
5 615 M
(2.MongoDB is used as OAuth2 credentials storage backend and Redis for token storage backend) s
5 604 M
(3.Passlib is used to encrypt the password with SHA256 hash digest and stored once in MongoDB \() s
5 593 M
(code is commented\)) s
5 582 M
(4.Login page password is verified with passlib generated hash in MongoDB queried for a usernam) s
5 571 M
(e argument) s
5 560 M
(5.With this minimal standard authentication has been implemented for NeuronRain cloud deployme) s
5 549 M
(nt.) s
5 538 M
(6.Prerequisite is to populate MongoDB neuronrain_oauth database and neuronrain_users collectio) s
5 527 M
(ns with) s
5 516 M
(passlib encypted JSON by uncommenting the collections.insert_one\(\) code.) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-------------------) s
5 472 M
(302. Commits - 29 July 2016 - boost::python extensions for VIRGO Linux Kernel system calls) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(-------------------) s
5 439 M
(virgo_clone\(\) system call has been included in switch-case and invokes an exported kernel modu) s
5 428 M
(le function in kernelspace.) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(----------------------------) s
5 384 M
(303. \(THEORY\) Update on Bitonic Sort Merge Tree for Discrete Hyperbolic Factorization Spark Cl) s
5 373 M
(oud Implementation in 34.20) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(----------------------------) s
5 340 M
(Bitonic Sort Merge Tree for Discrete Hyperbolic Factorization described in http://sourceforge.) s
5 329 M
(net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveForIntegerFactorization_P) s
5 318 M
(RAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.pdf/download has following bound w) s
5 307 M
(hich can be derived as:) s
5 285 M
(303.1 Bitonic Sort requires O\(\(logN\)^2\) time with O\(N*\(logN\)^2\) processors.) s
5 274 M
(303.2 Discretized Hyperbolic arc of length N can be split into N/logN segments of length logN ) s
5 263 M
(each.) s
5 252 M
(303.3 Above N/logN segments can be grouped in leaf level of merge tree into N/2logN pairs of \() s
5 241 M
(logN,logN\) = 2logN length segments to be sorted together.) s
5 230 M
(303.4 Each such pair can be sorted in log\(2logN\) time in parallel with N/\(2logN\) * N\(logN\)^2 =) s
5 219 M
( N^2/2logN comparator processors in leaf level which is the maximum number of processors requi) s
5 208 M
(red. Next level requires log\(4logN\), log\(8logN\) and so on till root.) s
5 197 M
(303.5 Height of the merge tree is O\(log\(N/logN\)\). Total sort time is sum over sorts at each le) s
5 186 M
(vel of merge tree = log\(2logN\) + log\(4logN\) + ... + log\(\(2^log\(N/logN\)\)*logN\)) s
5 175 M
(303.6 Total sort time of merge tree is upperbounded as \(not tight one\) height * maximum_sort_t) s
5 164 M
(ime_per_level:) s
5 153 M
(        <= O\(log\(N/logN\) * log\(N/logN*logN\)\) = O\(log\(N/logN\) * log\(N\)\)) s
5 142 M
(      with maximum of N^2/2logN processor comparators at leaf which tapers down up the tree.) s
5 131 M
(303.7 Binary Search on final sorted merged tile requires additional O\(logN\) which effectively ) s
5 120 M
(reduces to:) s
5 109 M
(        O\(log\(N/logN\)*logN + logN\) = O\(log\(N/logN\)*logN\) <= O\(\(logN\)^2\) time) s
5 98 M
(      with N^2/2logN processor comparators for finding a factor.) s
5 87 M
(303.8 This is comparably better bound than the Parallel RAM ANSV algorithm based merge sort al) s
5 76 M
(ternatives and easy to implement on a cloud as done in 34.20 and also is in NC because of poly) s
5 65 M
(log time and polynomial comparator processors required.) s
5 54 M
(303.9 Again the input size is N and not logN, but yet definition of NC is abided by. It remain) s
5 43 M
(s an open question whether Bitonic Sort Comparators are equivalent conceptually to PRAMs \(Are ) s
5 32 M
(cloud nodes same as PRAMs assuming the nodes have access to a shared memory?\).) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (156) 156
%%BeginPageSetup
_S
18 36 translate
/pagenum 156 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (156) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------) s
5 681 M
(304. Commits - 31 July 2016 - boost::python C++ and cpython virgo_clone\(\) system call invocati) s
5 670 M
(ons) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(----------------------------) s
5 637 M
(1. Boost C++ Python extensions - virgo_clone\(\) system call has been included in switch-case fo) s
5 626 M
(r cpython invocation of VIRGO linux kernel with test logs for it with use_as_kingcobra_service) s
5 615 M
(=1 \(Routing: C++Boost::Python ---> virgo_clone\(\) ----> virgo_queue driver ----> KingCobra mess) s
5 604 M
(age queue pub/sub service\). Test logs for it have been committed in testlogs/) s
5 593 M
(2. CPython extensions - test log for boost::python virgo_clone\(\) invocation with use_as_kingco) s
5 582 M
(bra_service=0 which directly invokes a kernelspace function without forwarding to virgo_queue/) s
5 571 M
(kingcobra, has been committed to testlogs/.) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(-------------------------------) s
5 527 M
(305. NEURONRAIN VIRGO Commits for ASFER Boost::Python C++ virgo memory system calls invocation) s
5 516 M
(s) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(-------------------------------) s
5 483 M
(\(BUG - STABILITY ISSUES\) Commits - 1 August 2016 - VIRGO Linux Stability Issues - Ongoing Rand) s
5 472 M
(om oops and panics investigation) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(-------------------------------) s
5 439 M
(1. GFP_KERNEL has been replaced with GFP_ATOMIC flags in kmem allocations.) s
5 428 M
(2. NULL checks have been introduced in lot of places involving strcpy, strcat, strcmp etc., to) s
5 417 M
( circumvent) s
5 406 M
(buffer overflows.) s
5 395 M
(3. Though this has stabilized the driver to some extent, still there are OOPS in unrelated pla) s
5 384 M
(ces deep) s
5 373 M
(with in kernel where paging datastructures are accessed - kmalloc somehow corrupts paging) s
5 362 M
(4. OOPS are debugged via gdb as:) s
5 351 M
(        4.1 gdb ./vmlinux /proc/kcore) s
5 340 M
(        or) s
5 329 M
(        4.2 gdb <loadable_kernel_module>.o) s
5 318 M
(   followed by) s
5 307 M
(        4.3 l *\(address+offset in OOPS dump\)) s
5 296 M
(5. kern.log\(s\) for the above have been committed in tar.gz format and have numerous OOPS occur) s
5 285 M
(red during repetitive telnet and syscall) s
5 274 M
(invocation\(boost::python C++\) invocations of virgo memory system calls.) s
5 263 M
(6. Paging related OOPS look like an offshoot of set_fs\(\) encompassing the filp_open VFS calls.) s
5 252 M
(7. In C++ Boost::Python extensions, flag changed for VIRGO memory system calls invocation from) s
5 241 M
( python.) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(----------------------------) s
5 197 M
(306. Commits - 3 August 2016) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(----------------------------) s
5 164 M
(Social Network Analysis with Twitter - Changes to Belief Propagation Potential Computation) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(----------------------------) s
5 131 M
(1. Exception handling for UnicodeError has been added in SentimentAnalyzer) s
5 120 M
(2. Belief Propagation Potential computation for the RGO graph constructed has been changed to ) s
5 109 M
(do plain) s
5 98 M
(summation of positivity and negativity scores for DFS of K-Core rather than multiplication whi) s
5 87 M
(ch heuristically) s
5 76 M
(appears to predict sentiments better) s
5 65 M
(3. An example for tweets sentiments analysis for 2 search keywords has been logged and committ) s
5 54 M
(ed in testlogs/) s
5 43 M
(-------------------------------------------------------------------------------------------) s
5 32 M
(4. Excerpts for sentiment scores - positive and negative - from RGO graph of few tweets ) s
5 21 M
(-------------------------------------------------------------------------------------------) s
5 10 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
_R
S
%%Page: (157) 157
%%BeginPageSetup
_S
18 36 translate
/pagenum 157 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (157) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/SourceForge/asfer-code/python-src/testlogs# gre) s
5 681 M
(p "score:" SocialNetworkAnalysis_Twitter.out1.Republicans.3August2016 ) s
5 670 M
(K-Core DFS belief_propagated_posscore: 6.078125) s
5 659 M
(K-Core DFS belief_propagated_negscore: 8.140625) s
5 648 M
(Core Number belief_propagated_posscore: 25.125) s
5 637 M
(Core Number belief_propagated_negscore: 26.125) s
5 626 M
(K-Core DFS belief_propagated_posscore: 6.078125) s
5 615 M
(K-Core DFS belief_propagated_negscore: 8.140625) s
5 604 M
(Core Number belief_propagated_posscore: 25.125) s
5 593 M
(Core Number belief_propagated_negscore: 26.125) s
5 582 M
(K-Core DFS belief_propagated_posscore: 55.09375) s
5 571 M
(K-Core DFS belief_propagated_negscore: 54.3125) s
5 560 M
(Core Number belief_propagated_posscore: 92.625) s
5 549 M
(Core Number belief_propagated_negscore: 93.875) s
5 538 M
(K-Core DFS belief_propagated_posscore: 60.09375) s
5 527 M
(K-Core DFS belief_propagated_negscore: 59.3125) s
5 516 M
(Core Number belief_propagated_posscore: 118.625) s
5 505 M
(Core Number belief_propagated_negscore: 117.75) s
5 494 M
(root@shrinivaasanka-Inspiron-1545:/media/shrinivaasanka/0fc4d8a2-1c74-42b8-8099-9ef78d8c8ea2/h) s
5 483 M
(ome/kashrinivaasan/KrishnaiResearch_OpenSource/SourceForge/asfer-code/python-src/testlogs# gre) s
5 472 M
(p "score:" SocialNetworkAnalysis_Twitter.out2.Democrats.3August2016 ) s
5 461 M
(K-Core DFS belief_propagated_posscore: 34.0) s
5 450 M
(K-Core DFS belief_propagated_negscore: 30.359375) s
5 439 M
(Core Number belief_propagated_posscore: 90.25) s
5 428 M
(Core Number belief_propagated_negscore: 85.125) s
5 417 M
(K-Core DFS belief_propagated_posscore: 54.0) s
5 406 M
(K-Core DFS belief_propagated_negscore: 46.734375) s
5 395 M
(Core Number belief_propagated_posscore: 111.125) s
5 384 M
(Core Number belief_propagated_negscore: 108.125) s
5 373 M
(K-Core DFS belief_propagated_posscore: 97.203125) s
5 362 M
(K-Core DFS belief_propagated_negscore: 91.015625) s
5 351 M
(Core Number belief_propagated_posscore: 172.125) s
5 340 M
(Core Number belief_propagated_negscore: 172.125) s
5 329 M
(K-Core DFS belief_propagated_posscore: 97.203125) s
5 318 M
(K-Core DFS belief_propagated_negscore: 91.015625) s
5 307 M
(Core Number belief_propagated_posscore: 178.125) s
5 296 M
(Core Number belief_propagated_negscore: 178.125) s
5 274 M
(5. Majority Predominant Sentiment indicated by above scores for randomly sampled tweets can be) s
5 263 M
( used as one of the Election Approximation and Forecast Technique described in 14.) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(------------------------) s
5 219 M
(307. \(THEORY\) Sentiment Analysis from Recursive Gloss Overlap as a Voting Function in Majority) s
5 208 M
( Voting - related to 14) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(------------------------) s
5 175 M
(As mentioned in 306, Sentiment Analysis scores derived from Recursive Gloss Overlap graph of a) s
5 164 M
( text is an indirect voting function - when the) s
5 153 M
(overall sentiment is negative it is an "against" vote and when positive it is a "for" vote. In) s
5 142 M
( this sense, Sentiment Analysis shrouds a Satisfiability problem underneath it. In other words) s
5 131 M
( every polarised text is a boolean SAT circuit translated into natural language text which ope) s
5 120 M
(ns whole new vista to look at Sentiment Analysis per se. Infact it is a generalization of a bo) s
5 109 M
(olean SAT circuit - it is bipolar and whichever polarity wins decides the vote.) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(-----------------------------) s
5 65 M
(308. \(FEATURE-DONE\) Markov Random Fields \(MRF\) Belief Propagation - Commits - 8 August 2016) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(-----------------------------) s
5 32 M
(Existing Sentiment Analyzer does belief propagation by computing product of potentials in DFS ) s
5 21 M
(traversal only.) s
5 10 M
(New function for Markov Random Fields Belief Propagation has been included which handles the g) s
_R
S
%%Page: (158) 158
%%BeginPageSetup
_S
18 36 translate
/pagenum 158 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (158) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(eneralized case of belief propagation in a) s
5 681 M
(graph by factoring it into maximal cliques and finding potentials per clique. These per clique) s
5 670 M
( potentials are multiplied and normalized) s
5 659 M
(with number of cliques to get polarized sentiments scores - positive, negative and objective. ) s
5 648 M
(Logs for Sentiment Analysis of tweets stream) s
5 637 M
(with MRF have been committed to testlogs/) s
5 626 M
( ) s
5 615 M
(Reference:) s
5 604 M
(---------) s
5 593 M
(308.1 Introduction to Machine Learning - [Ethem Alpaydin] - Graphical Models) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(-----------------------------) s
5 549 M
(309. \(FEATURE-DONE\) Commits - 12 August 2016 - Boost 1.58.0 upgrade from 1.55.0 - Boost::Pytho) s
5 538 M
(n C++ extensions for VIRGO) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(-----------------------------) s
5 505 M
(1.Rebuilt Boost::Python extensions for VIRGO Linux kernel system calls with boost 1.58 upgrade) s
5 494 M
(d from boost 1.55.) s
5 483 M
(2.kern.log for miscellaneous VIRGO system calls from both telnet and system call request route) s
5 472 M
(s has been compressed and committed to) s
5 461 M
(testlogs \(~300MB\).) s
5 450 M
(Following multiple debug options were tried out for heisencrash resolution \(Note to self\):) s
5 439 M
(3./etc/sysctl.conf has been updated with kernel panic tunables with which the mean time betwee) s
5 428 M
(n crashes has increased and crash location is) s
5 417 M
(deep within kernel \(VMA paging\) - commits for this are in VIRGO linux tree. With these setting) s
5 406 M
(s following usecase works:) s
5 395 M
(        virgo_cloud_malloc\(\)) s
5 384 M
(        virgo_cloud_set\(\)) s
5 373 M
(        virgo_cloud_get\(\)) s
5 362 M
(        virgo_cloud_set\(\) overwrite) s
5 351 M
(        virgo_cloud_get\(\)) s
5 340 M
(through telnet route.) s
5 329 M
(4.Debugging VIRGO linux kernel with an Oracle VirtualBox virtual machine installation and debu) s
5 318 M
(gging the VM with a netconsole port via KGDB was explored, but there are serious issues with V) s
5 307 M
(irtualBox initialization in Qt5.) s
5 296 M
(5.Debugging VIRGO linux kernel with QEMU-KVM installation and debugging the VM with a netconso) s
5 285 M
(le port via KGDB is being explored. Reference documentation at: https://www.kernel.org/doc/Doc) s
5 274 M
(umentation/gdb-kernel-debugging.txt) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(-----------------------------) s
5 230 M
(310. \(THEORY\) DFT of a Sliding Window Fragment of Time Series, Integer Partitions and Hashing) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(-----------------------------) s
5 197 M
(Time Series Data Stream can be viewed through a sliding window of some fixed width moving acro) s
5 186 M
(ss the data. Captured data points in such) s
5 175 M
(window are analyzed in frequency domain with a Discrete Fourier Transform. If there are n freq) s
5 164 M
(uencies in the window of data,there are n) s
5 153 M
(sinusoids which superimpose to form the original data. In discrete sense, sinusoids partition ) s
5 142 M
(the data at any time point. Following the) s
5 131 M
(relation between hash functions and integer partitions in https://sites.google.com/site/kuja27) s
5 120 M
(/IntegerPartitionAndHashFunctions_2014.pdf ,) s
5 109 M
(each of n discrete sinusoid in DFT corresponds to a hash function and the time-series sliding ) s
5 98 M
(window is an amalgamation of n hash functions.) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(------------------------------------------) s
5 54 M
(311. \(THEORY\) Pr\(Good\) Majority Voting Circuit, Percolation, PRG choice and Boolean Circuit Co) s
5 43 M
(mposition  - related to 14, 53.12 and 129) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(------------------------------------------) s
5 10 M
(Even though Percolation circuit is in Noise Stability Regime with zero sensitivity and 100% st) s
_R
S
%%Page: (159) 159
%%BeginPageSetup
_S
18 36 translate
/pagenum 159 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (159) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ability, delta term mentioned in matrix) s
5 681 M
(of 14 and 53 \(second column\) need not be zero which could force percolation circuit to be in B) s
5 670 M
(PNC. Problem is then derandomizing BPNC. \(Open question: Is BPNC in NC/poly?\). Thus LHS of Pr\() s
5 659 M
(Good\) could be in BPNC which coincides with [Applebaum] NC1 PRG based pseudorandom choice desc) s
5 648 M
(ribed in - https://5d99cf42-a-62cb3a1a-s-sites.googlegroups.com/site/kuja27/LowerBoundsForMajo) s
5 637 M
(rityVotingPseudorandomChoice.pdf and https://5d99cf42-a-62cb3a1a-s-sites.googlegroups.com/site) s
5 626 M
(/kuja27/IndepthAnalysisOfVariantOfMajorityVotingwithZFAOC_2014.pdf. Boolean Function Compositi) s
5 615 M
(on is preferred over Oracle results for Majority Voting circuit which is an NC1 circuit with C) s
5 604 M
(ircuitSAT as inputs for each voter. This is infact "Boolean Circuit Composition" corresponding) s
5 593 M
( to Boolean Function Composition.) s
5 571 M
(References:) s
5 560 M
(-----------) s
5 549 M
(311.1 Mathematical Techniques for Analysis of Boolean Functions - [AnnaBernasconi] - 2.8.2 Boo) s
5 538 M
(lean Function Composition - www.di.unipi.it/~annab/tesi.ps.gz) s
5 527 M
(311.2 Properties and Applications of Boolean Function Composition - [AvishayTal] - eccc.hpi-we) s
5 516 M
(b.de/report/2012/163/download/) s
5 505 M
(311.3 Boolean Circuit Composition - www.cs.tau.ac.il/~safra/ACT/CCandSpaceB.ppt) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(------------------------------------) s
5 461 M
(312. \(THEORY\) Circuit SAT lowerbounds for Pr\(Good\) Majority Voting - related 14 and 129) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(------------------------------------) s
5 428 M
(312.1 RHS of Pr\(Good\) Majority Voting circuit is an NC circuit in composition with CircuitSAT ) s
5 417 M
(for each voter. This parallel voting by electorate) s
5 406 M
(requires some kind of barrier synchronization so that input from all voters is available to NC) s
5 395 M
( Majority Circuit. This is a non-trivial overhead) s
5 384 M
(to be ignored because the barrier delay depends on the voter whose decision time is the most. ) s
5 373 M
(If in worst case the bottleneck voter function is) s
5 362 M
(in EXP then barrier synchronization is also in EXP. It is also assumed that voters decide inde) s
5 351 M
(pendent of each other.) s
5 340 M
(312.2 CircuitSAT is the circuit version of CNF SAT concerned with the bounds for finding satis) s
5 329 M
(fying assignments to a circuit to get the output true at root of Circuit DAG.) s
5 318 M
(312.3 An arbitrary Circuit's Satisfiability requires O\(2^0.4058m\) where m is the number of gat) s
5 307 M
(es in Circuit\(i.e. size of circuit\).This bound was proved in [SergeyNurk] - ftp://ftp.pdmi.ras) s
5 296 M
(.ru/pub/publicat/preprint/2009/10-09.pdf.gz. This is very generic bound without concerning the) s
5 285 M
( complexity classes of voter decisioning function.) s
5 274 M
(312.4 Because of the fact that Pr\(good\) majority voting is a circuit composition with voter ci) s
5 263 M
(rcuit SATs as inputs to NC majority circuit, previous bound applies and estimates the time for) s
5 252 M
( each voter's decision to be input to Majority circuit. In other words, a satisfying assignmen) s
5 241 M
(t to atleast half of the electorate CircuitSATs has to be found to pronounce a winner. Time re) s
5 230 M
(quired to convince a voter is therefore exponential in size of the voter circuit. For a voter ) s
5 219 M
(k size of the CircuitSAT is m\(k\) and the time required to satisfy it is O\(2^0.4058*m\(k\)\).) s
5 208 M
(312.5 Let number of voters be n and number of gates on the average per voter be m. NC1 majorit) s
5 197 M
(y requires O\(logn\) time because n voters input to it at leaf.There are mn gates for all voters) s
5 186 M
(. Per voter decision requires O\(2^0.4058m\) time in parallel to find a satisfying assignment to) s
5 175 M
( atleast n/2 voters for majority to output 1.) s
5 164 M
(312.6 If number of voters is exponential in number of gates per voter then n=2^m which is the ) s
5 153 M
(worst case scenario and is the most realistic, then size of the Majority voting circuit in RHS) s
5 142 M
( of Pr\(Good\) is m*2^m - exponential in size of per voter circuit. LHS of Pr\(Good\) is NC/poly o) s
5 131 M
(r BPNC percolation circuit while RHS is an exponential circuit \(DC uniform - PH if depth restr) s
5 120 M
(icted or EXP if depth unrestricted\)) s
5 109 M
(312.7 In a very generic case, as mentioned in 275, each voter can have a non-boolean voting fu) s
5 98 M
(nction viz., a linear program or constraint satisfaction which is NP if integer-LP and is in P) s
5 87 M
( if real-LP \(simplex, interior point\). In terms of Oracles circuit for RHS Pr\(Good\) can be wri) s
5 76 M
(tten as:) s
5 65 M
(        312.7.1 NC^P \(if voting functions are real LP\) and LHS NC/poly or BPNC percolation low) s
5 54 M
(erbounds NC^P when both LHS and RHS are of same error) s
5 43 M
(        312.7.2 NC^NP \(if voting functions are integer LP\) and LHS NC/poly or BPNC percolation) s
5 32 M
( lowerbounds NC^NP when both LHS and RHS are of same error) s
5 21 M
(312.8 Circuit Size of Pr\(Good\) RHS is non-trivial to determine. All that is known so far is th) s
5 10 M
(e bound for CircuitSAT which is O\(2^0.4058m\) where m is number of gates. But number of gates i) s
_R
S
%%Page: (160) 160
%%BeginPageSetup
_S
18 36 translate
/pagenum 160 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (160) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(tself is an open problem for SAT - it is not known if NP has polynomial size circuits.) s
5 681 M
(312.9 Assumption 1: Each voter has different variables - set of variables of voters are all pa) s
5 670 M
(irwise disjoint.) s
5 659 M
(312.10 If number of voters is arbitrarily huge and if number of voters is exponential in numbe) s
5 648 M
(r of gates per voter SAT, size of RHS is m2^m with unbounded fan-in, unrestricted depth most p) s
5 637 M
(robably and thus in EXP, with AND-OR-NOT gates. Assumption 2: When voters have common variable) s
5 626 M
(s it implies that they decide in unison. For example if variable x is common to voters v1 and ) s
5 615 M
(v2, both v1 and v2 assign x=0 or x=1. This is negation of Assumption 1 in 312.9 and Assumption) s
5 604 M
( 1 is more realistic than Assumption 2.) s
5 593 M
(312.11 Even if m \(number of gates per voter SAT\) is assumed to be polynomial in number of inpu) s
5 582 M
(t variables i.e m=f\(v\) where v is average number of inputs per voter, size of RHS is f\(v\)*2^f\() s
5 571 M
(v\) - exponential in number of variables. Thus in all probability RHS majority voting circuit i) s
5 560 M
(s exponential DC-uniform circuit in PH or EXP even if NP has polynomial size circuits. This is) s
5 549 M
( a special case with lot of assumptions made in 312.6,312.9 and 312.10.) s
5 538 M
(312.12 If both LHS and RHS of Pr\(Good\) are of zero or equal error, LHS lowerbounds RHS \(an ass) s
5 527 M
(umption made throughout this document - equal error with differing circuit sizes implies lower) s
5 516 M
(bound\). Here error is the usual \(NoiseSensitivity +/- delta\) on both LHS and RHS. For percolat) s
5 505 M
(ion circuit in LHS, NoiseSensitivity is zero . But for RHS NoiseSensitivity is unknown. With a) s
5 494 M
(n assumption that RHS has non-zero error, it is a BP.EXP circuit assuming unrestricted depth o) s
5 483 M
(f RHS. LHS is NC/poly with zero error, while RHS is BPEXP and thus implies BPEXP is in NC/poly) s
5 472 M
( which resembles BPP in P/poly. If LHS has an error with a PRG choice function in NC \(e.g Appl) s
5 461 M
(ebaum NC PRG with linear stretch\), LHS would have been a BPNC circuit implying BPEXP is in BPN) s
5 450 M
(C which is absurd and conflicts with assumption that equal error implies lowerbound \(refer 53.) s
5 439 M
(9, 53.14 and 53.16\) - this conflict is resolved only if LHS and RHS do not have equal error wi) s
5 428 M
(th differing circuit sizes \(and also implies that error depends on circuit size?\).) s
5 417 M
(312.13 Important notion in representing a voter boolean function by a circuit is Hardness whic) s
5 406 M
(h is defined as:) s
5 395 M
(A boolean function f:{0,1}^n->{0,1} is h-hard if there exists a circuit C of size s such that ) s
5 384 M
(for all x in {0,1}^n, Pr\(C\(x\)=f\(x\)\) < h. Narrative above on CircuitSAT for voter boolean funct) s
5 373 M
(ions is incomplete without knowing how hard is it to compute or approximate the voter decision) s
5 362 M
( function with a circuit of size s. Harder a function, lower the value of h \(0 < h < 1\). This ) s
5 351 M
(definition of hardness is far better generalization of computational complexity of a voter boo) s
5 340 M
(lean function than identifying with complexity class names. [Yao] XOR Lemma is applied to ampl) s
5 329 M
(ify hardness of boolean function by XOR-ing values of f on many randomly distributed inputs.) s
5 318 M
(312.14 There are two classes of errors: Voter error + Voting error. Voter error is the Noise S) s
5 307 M
(ensitivity of a voter boolean function while Voting error is the intrinsic error in voting sys) s
5 296 M
(tem itself though user has done nothing wrong. E.g Malfunctioning Electronic Voting Machines. ) s
5 285 M
(Voter error is captured by second and third column of matrix in 53.14 while Voting error is ca) s
5 274 M
(ptured by probabilistic truth table of the function - inputs have no effect on this error. Thi) s
5 263 M
(s implies delta in Pr\(Good\) series error \(NoiseSensitivity +/- delta\) might have to account fo) s
5 252 M
(r voting error term also, over and above voter error.) s
5 230 M
(References:) s
5 219 M
(-----------) s
5 208 M
(312.15 Complexity Hardness of Noisy Boolean Functions - http://cstheory.stackexchange.com/ques) s
5 197 M
(tions/18822/hardness-of-noisy-boolean-functions - hardness of a noise-operated boolean functio) s
5 186 M
(n. Has applications to voting error where a voter's decision boolean function is perturbed by ) s
5 175 M
(noise to output a wrong vote. Also, comparability and p-selectivity of a set - [D.Sivakumar] -) s
5 164 M
( http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.648&rep=rep1&type=pdf and [Agrawa) s
5 153 M
(lArvind94] on "Polynomial time truth-table reductions to P-selective sets". Every voting funct) s
5 142 M
(ion \(and ranking function in general\) over n candidates is a p-selector with candidate set bei) s
5 131 M
(ng p-selective set because for any two candidates x,y voting function makes a choice.) s
5 120 M
(312.16 Hardness of Boolean Functions and Amplification - [RyanODonnell] - https://www.cs.cmu.e) s
5 109 M
(du/~odonnell/boolean-analysis/lecture17.pdf) s
5 98 M
(312.17 Probabilistic Boolean Logic - [LakshmiNBChakrapani-KrishnaPalem] - http://www.ece.rice.) s
5 87 M
(edu/~al4/visen/2008ricetr.pdf - Truth table of a boolean function has 1s and 0s with probabili) s
5 76 M
(ties. This captures the notion of error in voting function truth table itself, not just limite) s
5 65 M
(d to noise correleations of inputs.) s
5 54 M
(312.18 How much a Linear Programming Oracle speedup Polytime algorithms - http://cstheory.stac) s
5 43 M
(kexchange.com/questions/32646/how-much-would-a-sat-oracle-help-speeding-up-polynomial-time-alg) s
5 32 M
(orithms - Pr\(Good\) majority voting circuit is NC with SAT/LP oracle for each voter.) s
5 21 M
(312.19 Algorithms for Circuits and Circuits for Algorithms - [RyanWilliams] - http://web.stanf) s
5 10 M
(ord.edu/~rrwill/ICM-survey.pdf - Kolmogorov conjecture based on [ArnoldKolmogorov] answer to H) s
_R
S
%%Page: (161) 161
%%BeginPageSetup
_S
18 36 translate
/pagenum 161 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (161) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ilbert's 13th problem - every continuous function in 3 variables can be expressed as finite co) s
5 681 M
(mposition of functions of 2 variables - discrete analog : Is 3SAT expressible as a finite comp) s
5 670 M
(osition of 2SAT \(which implies composition of P instances yielding NP as counterexample\)? A sp) s
5 659 M
(ecial case majority voting with 3 variables common to all voter functions and Non-boolean cont) s
5 648 M
(inuous voting functions in 3 variables precisely has application of Hilbert's 13th problem.) s
5 637 M
(312.20 Depth 3 multilinear circuits - [OdedGoldreich] - http://www.wisdom.weizmann.ac.il/~oded) s
5 626 M
(/R3/kk.pdf - D-canonical depth-3 circuit is constructed by composition of 2 depth-2 circuits i) s
5 615 M
(.e F=H\(F1,F2,...,Fn\) in Section 1.2. Has strong applications to a Majority voting circuit comp) s
5 604 M
(osition where Fi\(s\) are voting functions and H is Majority function.) s
5 593 M
(312.21 Size hierarchy theorem for circuits - http://cstheory.stackexchange.com/questions/5110/) s
5 582 M
(hierarchy-theorem-for-circuit-size. And also theorems 5.8 and 5.9 in http://www.complexity.eth) s
5 571 M
(z.ch/education/Lectures/ComplexityFS12/skript_ch5.pdf - there are functions computable by \(1+o) s
5 560 M
(\(1\)\)2^n/n and not computable by circuits of size 2^n/n.) s
5 549 M
(312.22 Size Hierarchy [Lupanov] - Number of functions computable by circuit of size s - Lemma ) s
5 538 M
(2.1 counting argument - http://eccc.hpi-web.de/resources/pdf/cobf.pdf \(Wegener - pages 88-92\)) s
5 527 M
(312.23 Efficient Parallel Computation = NC - [AroraBarak] - http://theory.cs.princeton.edu/com) s
5 516 M
(plexity/book.pdf - Theorem 6.24 - Parallel Voting Simulation can be done by massive parallel p) s
5 505 M
(rocessing assuming the input votes are precomputed.) s
5 494 M
(312.24 Size hierarchy of 312.22 in Pr\(Good\) majority voting circuit context implies that numbe) s
5 483 M
(r of functions computable by LHS has to be different from number of functions computable by RH) s
5 472 M
(S when LHS is NC/poly and RHS is PH or EXP i.e if EXP does not have polysize circuits. The cen) s
5 461 M
(tral motivation for equating LHS and RHS of Pr\(Good\) is both sides are 2 algorithms to decide ) s
5 450 M
(same question: Non-majority choice and Majority choice - which is more efficient where efficie) s
5 439 M
(ncy implies less error? This motivation therefore leads to assumption stated in disclaimer ear) s
5 428 M
(lier: less circuit size implies a lowerbound \(i.e least circuit size of LHS and RHS is chosen ) s
5 417 M
(as separating class containing the other\) when errors are equal or less.) s
5 406 M
(312.25 If circuit sizes differ in zero-error case on both sides i.e when 100% convergence occu) s
5 395 M
(rs \(or\) equal error on both sides of series, then by size hierarchy, size\(LHS\) < size\(RHS\) imp) s
5 384 M
(lies RHS computes functions not possible by LHS and viceversa \(Open question: Does this contra) s
5 373 M
(dict lowerbound assumption? Or is this just a special case because both LHS and RHS compute sa) s
5 362 M
(me function i.e they answer same question in which case size hierarchy does not apply which co) s
5 351 M
(unts all possible functions for specific circuit size?\).) s
5 340 M
(312.26 There is an alternative definition of Boolean function hardness in http://www.math.ias.) s
5 329 M
(edu/~avi/PUBLICATIONS/MYPAPERS/NOAM/HARDNESS/final.pdf \(Section 2.2\) which states hardness = c) s
5 318 M
(ircuit size complexity hardness + approximation hardness.) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(---------------------------------------) s
5 274 M
(313. \(FEATURE-DONE\) Astronomical Sequence Mining based Precipitation Forecast \(from 100 year h) s
5 263 M
(istoric dataset\) - related to 172, 278) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(---------------------------------------) s
5 230 M
(Following the earlier experimental pattern mining done on astronomical datasets and their stri) s
5 219 M
(king correlational coincidence with weather vagaries, below rule search explores highly probab) s
5 208 M
(le heavy precipitation - shows peaks after 29 November 2016 :) s
5 186 M
(python MaitreyaEncHoro_RuleSearch.py  --min_year=2016 --min_month=11 --min_days=15 --min_hours) s
5 175 M
(=10 --min_minutes=10 --min_seconds=10 --min_long=77 --min_lat=7 --max_year=2016 --max_month=12) s
5 164 M
( --max_days=30 --max_hours=10 --max_minutes=10 --max_seconds=10 --max_long=78 --max_lat=10 |gr) s
5 153 M
(ep "a Class Association") s
5 131 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a ) s
5 120 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 109 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a ) s
5 98 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 87 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a C) s
5 76 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 65 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:0:0 " --planet-list } - There is a C) s
5 54 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 43 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:1:0 " --planet-list } - There is a ) s
5 32 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 21 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:1:0 " --planet-list } - There is a ) s
5 10 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (162) 162
%%BeginPageSetup
_S
18 36 translate
/pagenum 162 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (162) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:1:0 " --planet-list } - There is a C) s
5 681 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 670 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:1:0 " --planet-list } - There is a C) s
5 659 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 648 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:2:0 " --planet-list } - There is a ) s
5 637 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 626 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:2:0 " --planet-list } - There is a ) s
5 615 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 604 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:2:0 " --planet-list } - There is a C) s
5 593 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 582 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:2:0 " --planet-list } - There is a C) s
5 571 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 560 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:3:0 " --planet-list } - There is a ) s
5 549 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 538 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:3:0 " --planet-list } - There is a ) s
5 527 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 516 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:3:0 " --planet-list } - There is a C) s
5 505 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 494 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:3:0 " --planet-list } - There is a C) s
5 483 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 472 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is a ) s
5 461 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 450 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is a ) s
5 439 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 428 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is a C) s
5 417 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 406 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:4:0 " --planet-list } - There is a C) s
5 395 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 384 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:5:0 " --planet-list } - There is a ) s
5 373 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 362 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:5:0 " --planet-list } - There is a ) s
5 351 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 340 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:5:0 " --planet-list } - There is a C) s
5 329 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 318 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:5:0 " --planet-list } - There is a C) s
5 307 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 296 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:6:0 " --planet-list } - There is a ) s
5 285 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 274 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:6:0 " --planet-list } - There is a ) s
5 263 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 252 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:6:0 " --planet-list } - There is a C) s
5 241 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 230 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:6:0 " --planet-list } - There is a C) s
5 219 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 208 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:7:0 " --planet-list } - There is a ) s
5 197 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 186 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:7:0 " --planet-list } - There is a ) s
5 175 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 164 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:7:0 " --planet-list } - There is a C) s
5 153 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 142 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:7:0 " --planet-list } - There is a C) s
5 131 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 120 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 7:8:0 " --planet-list } - There is a ) s
5 109 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 98 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 7:8:0 " --planet-list } - There is a ) s
5 87 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 76 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 7:8:0 " --planet-list } - There is a C) s
5 65 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 54 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 7:8:0 " --planet-list } - There is a C) s
5 43 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 32 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 8:0:0 " --planet-list } - There is a ) s
5 21 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 10 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 8:0:0 " --planet-list } - There is a ) s
_R
S
%%Page: (163) 163
%%BeginPageSetup
_S
18 36 translate
/pagenum 163 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (163) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 681 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 8:0:0 " --planet-list } - There is a C) s
5 670 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 659 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 8:0:0 " --planet-list } - There is a C) s
5 648 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 637 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:0:0 8:1:0 " --planet-list } - There is a ) s
5 626 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 615 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:0:0 8:1:0 " --planet-list } - There is a ) s
5 604 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 593 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:0:0 8:1:0 " --planet-list } - There is a C) s
5 582 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 571 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:0:0 8:1:0 " --planet-list } - There is a C) s
5 560 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 549 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:2:0 " --planet-list } - There is ) s
5 538 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 527 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:2:0 " --planet-list } - There is ) s
5 516 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 505 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:2:0 " --planet-list } - There is a) s
5 494 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 483 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:2:0 " --planet-list } - There is a) s
5 472 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 461 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:3:0 " --planet-list } - There is ) s
5 450 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 439 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:3:0 " --planet-list } - There is ) s
5 428 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 417 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:3:0 " --planet-list } - There is a) s
5 406 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 395 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:3:0 " --planet-list } - There is a) s
5 384 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 373 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:4:0 " --planet-list } - There is ) s
5 362 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 351 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:4:0 " --planet-list } - There is ) s
5 340 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 329 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:4:0 " --planet-list } - There is a) s
5 318 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 307 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:4:0 " --planet-list } - There is a) s
5 296 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 285 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:5:0 " --planet-list } - There is ) s
5 274 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 263 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:5:0 " --planet-list } - There is ) s
5 252 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 241 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:5:0 " --planet-list } - There is a) s
5 230 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 219 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:5:0 " --planet-list } - There is a) s
5 208 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 197 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:6:0 " --planet-list } - There is ) s
5 186 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 175 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:6:0 " --planet-list } - There is ) s
5 164 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 153 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:6:0 " --planet-list } - There is a) s
5 142 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 131 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:6:0 " --planet-list } - There is a) s
5 120 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 109 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:7:0 " --planet-list } - There is ) s
5 98 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 87 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:7:0 " --planet-list } - There is ) s
5 76 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 65 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:7:0 " --planet-list } - There is a) s
5 54 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 43 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:7:0 " --planet-list } - There is a) s
5 32 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 21 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 8:8:0 " --planet-list } - There is ) s
5 10 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (164) 164
%%BeginPageSetup
_S
18 36 translate
/pagenum 164 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (164) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 8:8:0 " --planet-list } - There is ) s
5 681 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 670 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 8:8:0 " --planet-list } - There is a) s
5 659 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 648 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 8:8:0 " --planet-list } - There is a) s
5 637 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 626 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:0:0 " --planet-list } - There is ) s
5 615 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 604 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:0:0 " --planet-list } - There is ) s
5 593 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 582 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:0:0 " --planet-list } - There is a) s
5 571 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 560 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:0:0 " --planet-list } - There is a) s
5 549 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 538 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:1:0 " --planet-list } - There is ) s
5 527 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 516 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:1:0 " --planet-list } - There is ) s
5 505 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 494 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:1:0 " --planet-list } - There is a) s
5 483 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 472 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:1:0 " --planet-list } - There is a) s
5 461 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 450 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:2:0 " --planet-list } - There is ) s
5 439 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 428 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:2:0 " --planet-list } - There is ) s
5 417 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 406 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:2:0 " --planet-list } - There is a) s
5 395 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 384 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:2:0 " --planet-list } - There is a) s
5 373 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 362 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:3:0 " --planet-list } - There is ) s
5 351 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 340 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:3:0 " --planet-list } - There is ) s
5 329 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 318 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:3:0 " --planet-list } - There is a) s
5 307 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 296 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:3:0 " --planet-list } - There is a) s
5 285 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 274 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:4:0 " --planet-list } - There is ) s
5 263 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 252 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:4:0 " --planet-list } - There is ) s
5 241 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 230 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:4:0 " --planet-list } - There is a) s
5 219 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 208 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:4:0 " --planet-list } - There is a) s
5 197 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 186 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:5:0 " --planet-list } - There is ) s
5 175 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 164 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:5:0 " --planet-list } - There is ) s
5 153 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 142 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:5:0 " --planet-list } - There is a) s
5 131 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 120 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:5:0 " --planet-list } - There is a) s
5 109 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 98 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:6:0 " --planet-list } - There is ) s
5 87 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 76 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:6:0 " --planet-list } - There is ) s
5 65 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 54 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:6:0 " --planet-list } - There is a) s
5 43 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 32 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:6:0 " --planet-list } - There is a) s
5 21 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 10 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:7:0 " --planet-list } - There is ) s
_R
S
%%Page: (165) 165
%%BeginPageSetup
_S
18 36 translate
/pagenum 165 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (165) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 681 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:7:0 " --planet-list } - There is ) s
5 670 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 659 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:7:0 " --planet-list } - There is a) s
5 648 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 637 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:7:0 " --planet-list } - There is a) s
5 626 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 615 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:0:0 9:8:0 " --planet-list } - There is ) s
5 604 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 593 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:0:0 9:8:0 " --planet-list } - There is ) s
5 582 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 571 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:0:0 9:8:0 " --planet-list } - There is a) s
5 560 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 549 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:0:0 9:8:0 " --planet-list } - There is a) s
5 538 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 527 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:0:0 " --planet-list } - There is a ) s
5 516 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 505 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:0:0 " --planet-list } - There is a ) s
5 494 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 483 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:0:0 " --planet-list } - There is a C) s
5 472 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 461 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:0:0 " --planet-list } - There is a C) s
5 450 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 439 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:1:0 " --planet-list } - There is a ) s
5 428 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 417 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:1:0 " --planet-list } - There is a ) s
5 406 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 395 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:1:0 " --planet-list } - There is a C) s
5 384 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 373 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:1:0 " --planet-list } - There is a C) s
5 362 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 351 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:2:0 " --planet-list } - There is a ) s
5 340 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 329 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:2:0 " --planet-list } - There is a ) s
5 318 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 307 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:2:0 " --planet-list } - There is a C) s
5 296 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 285 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:2:0 " --planet-list } - There is a C) s
5 274 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 263 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:3:0 " --planet-list } - There is a ) s
5 252 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 241 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:3:0 " --planet-list } - There is a ) s
5 230 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 219 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:3:0 " --planet-list } - There is a C) s
5 208 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 197 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:3:0 " --planet-list } - There is a C) s
5 186 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 175 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:4:0 " --planet-list } - There is a ) s
5 164 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 153 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:4:0 " --planet-list } - There is a ) s
5 142 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 131 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:4:0 " --planet-list } - There is a C) s
5 120 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 109 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:4:0 " --planet-list } - There is a C) s
5 98 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 87 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:5:0 " --planet-list } - There is a ) s
5 76 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 65 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:5:0 " --planet-list } - There is a ) s
5 54 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 43 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:5:0 " --planet-list } - There is a C) s
5 32 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 21 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:5:0 " --planet-list } - There is a C) s
5 10 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (166) 166
%%BeginPageSetup
_S
18 36 translate
/pagenum 166 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (166) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:6:0 " --planet-list } - There is a ) s
5 681 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 670 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:6:0 " --planet-list } - There is a ) s
5 659 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 648 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:6:0 " --planet-list } - There is a C) s
5 637 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 626 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:6:0 " --planet-list } - There is a C) s
5 615 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 604 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:7:0 " --planet-list } - There is a ) s
5 593 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 582 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:7:0 " --planet-list } - There is a ) s
5 571 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 560 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:7:0 " --planet-list } - There is a C) s
5 549 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 538 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:7:0 " --planet-list } - There is a C) s
5 527 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 516 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 7:8:0 " --planet-list } - There is a ) s
5 505 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 494 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 7:8:0 " --planet-list } - There is a ) s
5 483 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 472 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 7:8:0 " --planet-list } - There is a C) s
5 461 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 450 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 7:8:0 " --planet-list } - There is a C) s
5 439 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 428 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:1:0 8:0:0 " --planet-list } - There is a ) s
5 417 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 406 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:1:0 8:0:0 " --planet-list } - There is a ) s
5 395 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 384 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:1:0 8:0:0 " --planet-list } - There is a C) s
5 373 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 362 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:1:0 8:0:0 " --planet-list } - There is a C) s
5 351 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 340 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:1:0 " --planet-list } - There is ) s
5 329 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 318 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:1:0 " --planet-list } - There is ) s
5 307 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 296 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:1:0 " --planet-list } - There is a) s
5 285 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 274 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:1:0 " --planet-list } - There is a) s
5 263 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 252 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:2:0 " --planet-list } - There is ) s
5 241 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 230 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:2:0 " --planet-list } - There is ) s
5 219 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 208 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:2:0 " --planet-list } - There is a) s
5 197 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 186 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:2:0 " --planet-list } - There is a) s
5 175 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 164 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:3:0 " --planet-list } - There is ) s
5 153 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 142 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:3:0 " --planet-list } - There is ) s
5 131 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 120 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:3:0 " --planet-list } - There is a) s
5 109 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 98 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:3:0 " --planet-list } - There is a) s
5 87 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 76 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:4:0 " --planet-list } - There is ) s
5 65 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 54 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:4:0 " --planet-list } - There is ) s
5 43 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 32 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:4:0 " --planet-list } - There is a) s
5 21 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 10 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:4:0 " --planet-list } - There is a) s
_R
S
%%Page: (167) 167
%%BeginPageSetup
_S
18 36 translate
/pagenum 167 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (167) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 681 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:5:0 " --planet-list } - There is ) s
5 670 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 659 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:5:0 " --planet-list } - There is ) s
5 648 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 637 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:5:0 " --planet-list } - There is a) s
5 626 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 615 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:5:0 " --planet-list } - There is a) s
5 604 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 593 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:6:0 " --planet-list } - There is ) s
5 582 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 571 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:6:0 " --planet-list } - There is ) s
5 560 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 549 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:6:0 " --planet-list } - There is a) s
5 538 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 527 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:6:0 " --planet-list } - There is a) s
5 516 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 505 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:7:0 " --planet-list } - There is ) s
5 494 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 483 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:7:0 " --planet-list } - There is ) s
5 472 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 461 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:7:0 " --planet-list } - There is a) s
5 450 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 439 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:7:0 " --planet-list } - There is a) s
5 428 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 417 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 8:8:0 " --planet-list } - There is ) s
5 406 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 395 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 8:8:0 " --planet-list } - There is ) s
5 384 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 373 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 8:8:0 " --planet-list } - There is a) s
5 362 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 351 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 8:8:0 " --planet-list } - There is a) s
5 340 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 329 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:0:0 " --planet-list } - There is ) s
5 318 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 307 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:0:0 " --planet-list } - There is ) s
5 296 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 285 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:0:0 " --planet-list } - There is a) s
5 274 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 263 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:0:0 " --planet-list } - There is a) s
5 252 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 241 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:1:0 " --planet-list } - There is ) s
5 230 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 219 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:1:0 " --planet-list } - There is ) s
5 208 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 197 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:1:0 " --planet-list } - There is a) s
5 186 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 175 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:1:0 " --planet-list } - There is a) s
5 164 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 153 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:2:0 " --planet-list } - There is ) s
5 142 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 131 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:2:0 " --planet-list } - There is ) s
5 120 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 109 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:2:0 " --planet-list } - There is a) s
5 98 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 87 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:2:0 " --planet-list } - There is a) s
5 76 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 65 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:3:0 " --planet-list } - There is ) s
5 54 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 43 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:3:0 " --planet-list } - There is ) s
5 32 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 21 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:3:0 " --planet-list } - There is a) s
5 10 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (168) 168
%%BeginPageSetup
_S
18 36 translate
/pagenum 168 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (168) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:3:0 " --planet-list } - There is a) s
5 681 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 670 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:4:0 " --planet-list } - There is ) s
5 659 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 648 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:4:0 " --planet-list } - There is ) s
5 637 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 626 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:4:0 " --planet-list } - There is a) s
5 615 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 604 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:4:0 " --planet-list } - There is a) s
5 593 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 582 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:5:0 " --planet-list } - There is ) s
5 571 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 560 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:5:0 " --planet-list } - There is ) s
5 549 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 538 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:5:0 " --planet-list } - There is a) s
5 527 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 516 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:5:0 " --planet-list } - There is a) s
5 505 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 494 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:6:0 " --planet-list } - There is ) s
5 483 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 472 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:6:0 " --planet-list } - There is ) s
5 461 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 450 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:6:0 " --planet-list } - There is a) s
5 439 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 428 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:6:0 " --planet-list } - There is a) s
5 417 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 406 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:7:0 " --planet-list } - There is ) s
5 395 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 384 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:7:0 " --planet-list } - There is ) s
5 373 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 362 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:7:0 " --planet-list } - There is a) s
5 351 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 340 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:7:0 " --planet-list } - There is a) s
5 329 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 318 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:1:0 9:8:0 " --planet-list } - There is ) s
5 307 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 296 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:1:0 9:8:0 " --planet-list } - There is ) s
5 285 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 274 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:1:0 9:8:0 " --planet-list } - There is a) s
5 263 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 252 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:1:0 9:8:0 " --planet-list } - There is a) s
5 241 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 230 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:0:0 " --planet-list } - There is a ) s
5 219 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 208 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:0:0 " --planet-list } - There is a ) s
5 197 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 186 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:0:0 " --planet-list } - There is a C) s
5 175 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 164 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:0:0 " --planet-list } - There is a C) s
5 153 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 142 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:1:0 " --planet-list } - There is a ) s
5 131 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 120 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:1:0 " --planet-list } - There is a ) s
5 109 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 98 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:1:0 " --planet-list } - There is a C) s
5 87 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 76 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:1:0 " --planet-list } - There is a C) s
5 65 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 54 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:2:0 " --planet-list } - There is a ) s
5 43 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 32 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:2:0 " --planet-list } - There is a ) s
5 21 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 10 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:2:0 " --planet-list } - There is a C) s
_R
S
%%Page: (169) 169
%%BeginPageSetup
_S
18 36 translate
/pagenum 169 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (169) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 681 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:2:0 " --planet-list } - There is a C) s
5 670 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 659 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:3:0 " --planet-list } - There is a ) s
5 648 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 637 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:3:0 " --planet-list } - There is a ) s
5 626 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 615 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:3:0 " --planet-list } - There is a C) s
5 604 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 593 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:3:0 " --planet-list } - There is a C) s
5 582 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 571 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:4:0 " --planet-list } - There is a ) s
5 560 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 549 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:4:0 " --planet-list } - There is a ) s
5 538 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 527 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:4:0 " --planet-list } - There is a C) s
5 516 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 505 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:4:0 " --planet-list } - There is a C) s
5 494 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 483 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:5:0 " --planet-list } - There is a ) s
5 472 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 461 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:5:0 " --planet-list } - There is a ) s
5 450 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 439 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:5:0 " --planet-list } - There is a C) s
5 428 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 417 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:5:0 " --planet-list } - There is a C) s
5 406 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 395 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:6:0 " --planet-list } - There is a ) s
5 384 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 373 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:6:0 " --planet-list } - There is a ) s
5 362 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 351 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:6:0 " --planet-list } - There is a C) s
5 340 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 329 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:6:0 " --planet-list } - There is a C) s
5 318 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 307 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:7:0 " --planet-list } - There is a ) s
5 296 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 285 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:7:0 " --planet-list } - There is a ) s
5 274 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 263 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:7:0 " --planet-list } - There is a C) s
5 252 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 241 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:7:0 " --planet-list } - There is a C) s
5 230 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 219 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:2:0 7:8:0 " --planet-list } - There is a ) s
5 208 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 197 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:2:0 7:8:0 " --planet-list } - There is a ) s
5 186 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 175 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:2:0 7:8:0 " --planet-list } - There is a C) s
5 164 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 153 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:2:0 7:8:0 " --planet-list } - There is a C) s
5 142 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 131 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:0:0 " --planet-list } - There is ) s
5 120 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 109 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:0:0 " --planet-list } - There is ) s
5 98 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 87 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:0:0 " --planet-list } - There is a) s
5 76 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 65 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:0:0 " --planet-list } - There is a) s
5 54 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 43 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:1:0 " --planet-list } - There is ) s
5 32 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 21 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:1:0 " --planet-list } - There is ) s
5 10 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (170) 170
%%BeginPageSetup
_S
18 36 translate
/pagenum 170 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (170) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:1:0 " --planet-list } - There is a) s
5 681 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 670 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:1:0 " --planet-list } - There is a) s
5 659 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 648 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:2:0 " --planet-list } - There is ) s
5 637 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 626 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:2:0 " --planet-list } - There is ) s
5 615 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 604 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:2:0 " --planet-list } - There is a) s
5 593 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 582 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:2:0 " --planet-list } - There is a) s
5 571 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 560 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:3:0 " --planet-list } - There is ) s
5 549 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 538 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:3:0 " --planet-list } - There is ) s
5 527 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 516 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:3:0 " --planet-list } - There is a) s
5 505 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 494 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:3:0 " --planet-list } - There is a) s
5 483 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 472 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:4:0 " --planet-list } - There is ) s
5 461 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 450 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:4:0 " --planet-list } - There is ) s
5 439 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 428 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:4:0 " --planet-list } - There is a) s
5 417 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 406 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:4:0 " --planet-list } - There is a) s
5 395 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 384 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:5:0 " --planet-list } - There is ) s
5 373 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 362 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:5:0 " --planet-list } - There is ) s
5 351 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 340 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:5:0 " --planet-list } - There is a) s
5 329 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 318 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:5:0 " --planet-list } - There is a) s
5 307 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 296 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:6:0 " --planet-list } - There is ) s
5 285 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 274 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:6:0 " --planet-list } - There is ) s
5 263 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 252 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:6:0 " --planet-list } - There is a) s
5 241 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 230 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:6:0 " --planet-list } - There is a) s
5 219 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 208 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:7:0 " --planet-list } - There is ) s
5 197 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 186 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:7:0 " --planet-list } - There is ) s
5 175 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 164 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:7:0 " --planet-list } - There is a) s
5 153 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 142 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:7:0 " --planet-list } - There is a) s
5 131 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 120 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 8:8:0 " --planet-list } - There is ) s
5 109 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 98 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 8:8:0 " --planet-list } - There is ) s
5 87 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 76 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 8:8:0 " --planet-list } - There is a) s
5 65 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 54 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 8:8:0 " --planet-list } - There is a) s
5 43 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 32 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:0:0 " --planet-list } - There is ) s
5 21 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 10 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:0:0 " --planet-list } - There is ) s
_R
S
%%Page: (171) 171
%%BeginPageSetup
_S
18 36 translate
/pagenum 171 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (171) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 681 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:0:0 " --planet-list } - There is a) s
5 670 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 659 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:0:0 " --planet-list } - There is a) s
5 648 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 637 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:1:0 " --planet-list } - There is ) s
5 626 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 615 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:1:0 " --planet-list } - There is ) s
5 604 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 593 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:1:0 " --planet-list } - There is a) s
5 582 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 571 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:1:0 " --planet-list } - There is a) s
5 560 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 549 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:2:0 " --planet-list } - There is ) s
5 538 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 527 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:2:0 " --planet-list } - There is ) s
5 516 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 505 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:2:0 " --planet-list } - There is a) s
5 494 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 483 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:2:0 " --planet-list } - There is a) s
5 472 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 461 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:3:0 " --planet-list } - There is ) s
5 450 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 439 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:3:0 " --planet-list } - There is ) s
5 428 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 417 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:3:0 " --planet-list } - There is a) s
5 406 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 395 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:3:0 " --planet-list } - There is a) s
5 384 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 373 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:4:0 " --planet-list } - There is ) s
5 362 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 351 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:4:0 " --planet-list } - There is ) s
5 340 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 329 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:4:0 " --planet-list } - There is a) s
5 318 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 307 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:4:0 " --planet-list } - There is a) s
5 296 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 285 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:5:0 " --planet-list } - There is ) s
5 274 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 263 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:5:0 " --planet-list } - There is ) s
5 252 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 241 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:5:0 " --planet-list } - There is a) s
5 230 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 219 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:5:0 " --planet-list } - There is a) s
5 208 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 197 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:6:0 " --planet-list } - There is ) s
5 186 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 175 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:6:0 " --planet-list } - There is ) s
5 164 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 153 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:6:0 " --planet-list } - There is a) s
5 142 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 131 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:6:0 " --planet-list } - There is a) s
5 120 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 109 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:7:0 " --planet-list } - There is ) s
5 98 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 87 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:7:0 " --planet-list } - There is ) s
5 76 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 65 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:7:0 " --planet-list } - There is a) s
5 54 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 43 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:7:0 " --planet-list } - There is a) s
5 32 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 21 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:2:0 9:8:0 " --planet-list } - There is ) s
5 10 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (172) 172
%%BeginPageSetup
_S
18 36 translate
/pagenum 172 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (172) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:2:0 9:8:0 " --planet-list } - There is ) s
5 681 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 670 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:2:0 9:8:0 " --planet-list } - There is a) s
5 659 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 648 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:2:0 9:8:0 " --planet-list } - There is a) s
5 637 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 626 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:0:0 " --planet-list } - There is a ) s
5 615 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 604 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:0:0 " --planet-list } - There is a ) s
5 593 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 582 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:0:0 " --planet-list } - There is a C) s
5 571 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 560 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:0:0 " --planet-list } - There is a C) s
5 549 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 538 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:1:0 " --planet-list } - There is a ) s
5 527 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 516 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:1:0 " --planet-list } - There is a ) s
5 505 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 494 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:1:0 " --planet-list } - There is a C) s
5 483 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 472 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:1:0 " --planet-list } - There is a C) s
5 461 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 450 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:2:0 " --planet-list } - There is a ) s
5 439 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 428 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:2:0 " --planet-list } - There is a ) s
5 417 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 406 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:2:0 " --planet-list } - There is a C) s
5 395 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 384 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:2:0 " --planet-list } - There is a C) s
5 373 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 362 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:3:0 " --planet-list } - There is a ) s
5 351 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 340 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:3:0 " --planet-list } - There is a ) s
5 329 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 318 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:3:0 " --planet-list } - There is a C) s
5 307 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 296 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:3:0 " --planet-list } - There is a C) s
5 285 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 274 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:4:0 " --planet-list } - There is a ) s
5 263 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 252 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:4:0 " --planet-list } - There is a ) s
5 241 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 230 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:4:0 " --planet-list } - There is a C) s
5 219 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 208 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:4:0 " --planet-list } - There is a C) s
5 197 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 186 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:5:0 " --planet-list } - There is a ) s
5 175 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 164 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:5:0 " --planet-list } - There is a ) s
5 153 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 142 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:5:0 " --planet-list } - There is a C) s
5 131 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 120 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:5:0 " --planet-list } - There is a C) s
5 109 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 98 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:6:0 " --planet-list } - There is a ) s
5 87 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 76 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:6:0 " --planet-list } - There is a ) s
5 65 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 54 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:6:0 " --planet-list } - There is a C) s
5 43 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 32 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:6:0 " --planet-list } - There is a C) s
5 21 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 10 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:7:0 " --planet-list } - There is a ) s
_R
S
%%Page: (173) 173
%%BeginPageSetup
_S
18 36 translate
/pagenum 173 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (173) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 681 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:7:0 " --planet-list } - There is a ) s
5 670 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 659 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:7:0 " --planet-list } - There is a C) s
5 648 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 637 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:7:0 " --planet-list } - There is a C) s
5 626 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 615 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:3:0 7:8:0 " --planet-list } - There is a ) s
5 604 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 593 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:3:0 7:8:0 " --planet-list } - There is a ) s
5 582 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 571 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:3:0 7:8:0 " --planet-list } - There is a C) s
5 560 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 549 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:3:0 7:8:0 " --planet-list } - There is a C) s
5 538 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 527 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:0:0 " --planet-list } - There is ) s
5 516 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 505 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:0:0 " --planet-list } - There is ) s
5 494 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 483 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:0:0 " --planet-list } - There is a) s
5 472 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 461 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:0:0 " --planet-list } - There is a) s
5 450 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 439 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:1:0 " --planet-list } - There is ) s
5 428 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 417 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:1:0 " --planet-list } - There is ) s
5 406 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 395 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:1:0 " --planet-list } - There is a) s
5 384 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 373 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:1:0 " --planet-list } - There is a) s
5 362 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 351 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:2:0 " --planet-list } - There is ) s
5 340 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 329 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:2:0 " --planet-list } - There is ) s
5 318 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 307 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:2:0 " --planet-list } - There is a) s
5 296 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 285 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:2:0 " --planet-list } - There is a) s
5 274 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 263 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:3:0 " --planet-list } - There is ) s
5 252 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 241 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:3:0 " --planet-list } - There is ) s
5 230 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 219 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:3:0 " --planet-list } - There is a) s
5 208 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 197 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:3:0 " --planet-list } - There is a) s
5 186 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 175 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:4:0 " --planet-list } - There is ) s
5 164 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 153 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:4:0 " --planet-list } - There is ) s
5 142 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 131 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:4:0 " --planet-list } - There is a) s
5 120 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 109 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:4:0 " --planet-list } - There is a) s
5 98 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 87 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:5:0 " --planet-list } - There is ) s
5 76 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 65 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:5:0 " --planet-list } - There is ) s
5 54 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 43 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:5:0 " --planet-list } - There is a) s
5 32 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 21 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:5:0 " --planet-list } - There is a) s
5 10 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
_R
S
%%Page: (174) 174
%%BeginPageSetup
_S
18 36 translate
/pagenum 174 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (174) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:6:0 " --planet-list } - There is ) s
5 681 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 670 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:6:0 " --planet-list } - There is ) s
5 659 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 648 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:6:0 " --planet-list } - There is a) s
5 637 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 626 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:6:0 " --planet-list } - There is a) s
5 615 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 604 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:7:0 " --planet-list } - There is ) s
5 593 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 582 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:7:0 " --planet-list } - There is ) s
5 571 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 560 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:7:0 " --planet-list } - There is a) s
5 549 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 538 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:7:0 " --planet-list } - There is a) s
5 527 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 516 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 8:8:0 " --planet-list } - There is ) s
5 505 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 494 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 8:8:0 " --planet-list } - There is ) s
5 483 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 472 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 8:8:0 " --planet-list } - There is a) s
5 461 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 450 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 8:8:0 " --planet-list } - There is a) s
5 439 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 428 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:0:0 " --planet-list } - There is ) s
5 417 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 406 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:0:0 " --planet-list } - There is ) s
5 395 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 384 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:0:0 " --planet-list } - There is a) s
5 373 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 362 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:0:0 " --planet-list } - There is a) s
5 351 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 340 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:1:0 " --planet-list } - There is ) s
5 329 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 318 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:1:0 " --planet-list } - There is ) s
5 307 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 296 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:1:0 " --planet-list } - There is a) s
5 285 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 274 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:1:0 " --planet-list } - There is a) s
5 263 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 252 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:2:0 " --planet-list } - There is ) s
5 241 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 230 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:2:0 " --planet-list } - There is ) s
5 219 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 208 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:2:0 " --planet-list } - There is a) s
5 197 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 186 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:2:0 " --planet-list } - There is a) s
5 175 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 164 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:3:0 " --planet-list } - There is ) s
5 153 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 142 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:3:0 " --planet-list } - There is ) s
5 131 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 120 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:3:0 " --planet-list } - There is a) s
5 109 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 98 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:3:0 " --planet-list } - There is a) s
5 87 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 76 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:4:0 " --planet-list } - There is ) s
5 65 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 54 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:4:0 " --planet-list } - There is ) s
5 43 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 32 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:4:0 " --planet-list } - There is a) s
5 21 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 10 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:4:0 " --planet-list } - There is a) s
_R
S
%%Page: (175) 175
%%BeginPageSetup
_S
18 36 translate
/pagenum 175 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (175) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 681 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:5:0 " --planet-list } - There is ) s
5 670 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 659 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:5:0 " --planet-list } - There is ) s
5 648 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 637 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:5:0 " --planet-list } - There is a) s
5 626 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 615 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:5:0 " --planet-list } - There is a) s
5 604 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 593 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:6:0 " --planet-list } - There is ) s
5 582 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 571 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:6:0 " --planet-list } - There is ) s
5 560 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 549 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:6:0 " --planet-list } - There is a) s
5 538 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 527 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:6:0 " --planet-list } - There is a) s
5 516 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 505 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:7:0 " --planet-list } - There is ) s
5 494 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 483 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:7:0 " --planet-list } - There is ) s
5 472 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 461 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:7:0 " --planet-list } - There is a) s
5 450 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 439 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:7:0 " --planet-list } - There is a) s
5 428 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 417 M
({  --date="2016-11-29 10:10:10 5.5"  --location=" x 77:3:0 9:8:0 " --planet-list } - There is ) s
5 406 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 395 M
({  --date="2016-11-30 10:10:10 5.5"  --location=" x 77:3:0 9:8:0 " --planet-list } - There is ) s
5 384 M
(a Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 373 M
({  --date="2016-12-1 10:10:10 5.5"  --location=" x 77:3:0 9:8:0 " --planet-list } - There is a) s
5 362 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 351 M
({  --date="2016-12-2 10:10:10 5.5"  --location=" x 77:3:0 9:8:0 " --planet-list } - There is a) s
5 340 M
( Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 329 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:4:0 7:0:0 " --planet-list } - There is a ) s
5 318 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 307 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:4:0 7:0:0 " --planet-list } - There is a ) s
5 296 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 285 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:4:0 7:0:0 " --planet-list } - There is a C) s
5 274 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 263 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:4:0 7:0:0 " --planet-list } - There is a C) s
5 252 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 241 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:4:0 7:1:0 " --planet-list } - There is a ) s
5 230 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 219 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:4:0 7:1:0 " --planet-list } - There is a ) s
5 208 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 197 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:4:0 7:1:0 " --planet-list } - There is a C) s
5 186 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 175 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:4:0 7:1:0 " --planet-list } - There is a C) s
5 164 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 153 M
({  --date="2016-11-29 10:10:10 5"  --location=" x 77:4:0 7:2:0 " --planet-list } - There is a ) s
5 142 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 131 M
({  --date="2016-11-30 10:10:10 5"  --location=" x 77:4:0 7:2:0 " --planet-list } - There is a ) s
5 120 M
(Class Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 109 M
({  --date="2016-12-1 10:10:10 5"  --location=" x 77:4:0 7:2:0 " --planet-list } - There is a C) s
5 98 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 87 M
({  --date="2016-12-2 10:10:10 5"  --location=" x 77:4:0 7:2:0 " --planet-list } - There is a C) s
5 76 M
(lass Association Rule match [ ['Mercury', 'Venus'] ] in sign  Sagittarius) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(----------------------------------------------) s
5 32 M
(314. \(THEORY\) Pseudorandomness, Voter Decision Error and lambda-tolerant Randomized Decision T) s
5 21 M
(rees of Voter Boolean Functions) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (176) 176
%%BeginPageSetup
_S
18 36 translate
/pagenum 176 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (176) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------) s
5 681 M
(Pseudorandom generators are those which stretch a seed l\(n\) to n : f:{0,1}^l\(n\)->{0,1}^n indis) s
5 670 M
(tinguishable from perfect random source) s
5 659 M
(with bounded error. References 314.1 and 314.2 describe a counting argument to show that there) s
5 648 M
( are PRGs. For a seed length d there are 2^d possible strings stretched to length n. For a sin) s
5 637 M
(gle random string the probability that a circuit or an algorithm distinguishes it from perfect) s
5 626 M
( random source is e. By iterating over all 2^d strings generated by a PRG the expected fractio) s
5 615 M
(n of strings distinguished is e*2^d where each iteration is a random variable with probability) s
5 604 M
( e and follows from union of expectations - E\(sigma\(Xi\)\) = E\(X1\) + E\(X2\) + ... + E\(X\(2^d\)\) = s) s
5 593 M
(igma\(Xi*e\). Probability that there are tails where deviation from this expected value is less ) s
5 582 M
(than e so that indistinguishability is preserved is by Chernoff bounds: Pr\(sigma\(Xi\)-mean > de) s
5 571 M
(lta*mean\) <= 2*exp\(-delta^2*mean/3\) where 0 < delta < 1 and e=delta*mean. Substituting for mea) s
5 560 M
(n, this Probability <= 2*exp\(-2^d*e*delta^2/3\). For all possible algorithms or circuits of siz) s
5 549 M
(e s which could be 2^s, by union bound cumulative probability is 2^s*2*exp\(-2^d*e*delta^2/3\) <) s
5 538 M
( 1. It implies probability of distinguishability is < 1 and there should be a lurking PRG whic) s
5 527 M
(h achieves indistinguishability. This previous description is mooted to connect PRGs with Vote) s
5 516 M
(r Decision Error. Voters have a boolean decision function in Pr\(Good\) majority voting circuit.) s
5 505 M
( Alternatively each voter decides by evaluating the leaves of the boolean decision tree of the) s
5 494 M
( corresponding function. Randomized decision trees allow randomness by allowing coin tosses to) s
5 483 M
( choose the next edge in decision tree. Reference 314.3 describes a decision tree evaluation b) s
5 472 M
(y voter which allows error by including decision tree choices not necessarily belonging to the) s
5 461 M
( voter. That is, voter errs in judgement during decision process wherein \(pseudo\)random error ) s
5 450 M
(pollutes his/her discretion. This formalizes the notion of Voting error \(analogous somewhat to) s
5 439 M
( Probabilistic CNFs\). The level of error probability to what decision tree deviates is upperbo) s
5 428 M
(unded by lambda and called as lambda-tolerance. There are known results which bound the error-) s
5 417 M
(free decision tree complexity and erring decision tree complexity. Quoting 314.3, "...The poss) s
5 406 M
(ible algorithms can output anything. The mistake can be either way...". 1-way error occurs in ) s
5 395 M
(one direction - 1 is output instead of 0 while 2-way error occurs in both directions - 1 for 0) s
5 384 M
( and 0 for 1. This error is intrinsic to the decision process itself not just limited to sensi) s
5 373 M
(tivity measures which depend on flipped inputs affecting outputs. Thus if error is modelled as) s
5 362 M
( a function of PRGs, error in voting process as a whole implies existence of PRGs. For example) s
5 351 M
( above distinguisher can be mapped to a voter who fails to distinguish two candidates with dif) s
5 340 M
(fering goodness - voter is fooled - a less merited candidate if had access to the intrinsic PR) s
5 329 M
(G that vitiates the decision tree evaluation can exploit the voter's flawed decision tree.) s
5 307 M
(References:) s
5 296 M
(-----------) s
5 285 M
(314.1 Definition of Pseudorandomness - Simpler Distinguisher - http://people.seas.harvard.edu/) s
5 274 M
(~salil/pseudorandomness/prgs.pdf - Page 217 and Proposition 7.8 in Page 218) s
5 263 M
(314.2 Definition of Pseudorandomness - Counting argument - http://www.cse.iitk.ac.in/users/man) s
5 252 M
(indra/survey/complexity25.pdf - Page 3 - Definition 21) s
5 241 M
(314.3 Lambda-tolerant Randomized Boolean Decision Trees - https://www.math.u-szeged.hu/~hajnal) s
5 230 M
(/research/papers/dec_surv.gz - Page 5) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(------------------) s
5 186 M
(315. \(FEATURE-DONE and BUG-STABILITY ISSUES\) NeuronRain AsFer Commits for Virgo Linux - Commit) s
5 175 M
(s - 25 August 2016) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(------------------) s
5 142 M
(Kernel Panic investigation for boost::python c++ invocations of Virgo System Calls) s
5 131 M
(------------------------------------------------------------------------------------------) s
5 120 M
(1.Python code in AsFer that invokes Virgo Linux system calls by boost::python C++ bindings is ) s
5 109 M
(being investigated further for mystery and random crashes that occur after system call code an) s
5 98 M
(d driver end code is finished.) s
5 87 M
(2.kern.log with 3 iterations of virgo_malloc\(\)+virgo_set\(\)+virgo_get\(\) invocations succeeded b) s
5 76 M
(y panics in random points at kernel has been committed.) s
5 65 M
(3.Logs also contain the gdb vmlinux debugging showing line numbers within kernel source where ) s
5 54 M
(panics occur. Prima facie look unrelated directly to virgo system calls and driver code. Debug) s
5 43 M
(ging through KVM+QEMU is ruled out because of lack of VT-x.) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(------------------) s
_R
S
%%Page: (177) 177
%%BeginPageSetup
_S
18 36 translate
/pagenum 177 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (177) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(316. \(FEATURE-DONE and BUG-STABILITY ISSUES\) NeuronRain AsFer Commits for Virgo Linux - Commit) s
5 681 M
(s - 26 August 2016) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(------------------) s
5 648 M
(Kernel Panic investigation for boost::python c++ invocations of Virgo System Calls) s
5 637 M
(------------------------------------------------------------------------------------------) s
5 626 M
(kern.log with panic in FS code after boost::python C++ AsFer-VIRGO Linux system calls invocati) s
5 615 M
(ons) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-----------------------------------) s
5 571 M
(317. \(THEORY\) Generic Definitions of Majority and Non-majority Choice Errors and some contradi) s
5 560 M
(ctions - related to 14 and 53.14) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(-----------------------------------) s
5 527 M
(Majority Voting Social Choice has usual meaning of aggregation of for and against votes. Non-m) s
5 516 M
(ajority Social Choice can be in two) s
5 505 M
(flavours:) s
5 494 M
(        317.1 Pseudorandom Choice - a Pseudorandom Generator chooses a voting function from a ) s
5 483 M
(set of Voting functions of electorate) s
5 472 M
(        317.2 Social choice by ranking - set of boolean functions are ranked ascending in thei) s
5 461 M
(r error probabilities and least error boolean function is chosen.) s
5 439 M
(--------------------) s
5 428 M
(Algorithm for 317.1:) s
5 417 M
(--------------------) s
5 406 M
(There are pseudorandom generators in NC\(Applebaum PRG, Parallel PRGs etc.,\) which choose a boo) s
5 395 M
(lean function at random. This chosen boolean function can be Percolation boolean function too ) s
5 384 M
(which is again in non-uniform NC. Thus Non-majority social choice can be done in BPNC as below) s
5 373 M
(:) s
5 362 M
(        - Invoke a PRG in NC or P to obtain pseudorandom bits X.) s
5 351 M
(        - Choose an element in electorate indexed by X.) s
5 340 M
(        - Goodness of LHS is equal to the goodness of chosen element.) s
5 318 M
(LHS is BPNC algorithm to RHS BPEXP Condorcet Jury Theorem \(CJT\) unbounded circuit and if CJT c) s
5 307 M
(onverges to 1 in RHS and Goodness of PRG choice is 1, LHS is a BPNC algorithm to EXP RHS.) s
5 285 M
(--------------------) s
5 274 M
(Algorithm for 317.2:) s
5 263 M
(--------------------) s
5 252 M
(        - foreach\(voter\)) s
5 241 M
(        - {) s
5 230 M
(        -       Interview the voter boolean function : Rank the voters by merit \(error probabi) s
5 219 M
(lities e.g noise stability\)) s
5 208 M
(        - }) s
5 197 M
(        - choose the topmost as non-majority social choice) s
5 175 M
(LHS is a PSPACE-complete algorithm and RHS is either BPEXP or EXP algorithm depending on conve) s
5 164 M
(rgence or divergence of Goodness of CJT circuit in RHS. Goodness of LHS is the error probabili) s
5 153 M
(ty of topranked boolean voter function.) s
5 131 M
(Above loop can be parallelized and yet it is in PSPACE. Proof of CJT circuit in RHS to be EXP-) s
5 120 M
(complete would immediately yield a lowerbound and either EXP is in BPNC or EXP is in PSPACE un) s
5 109 M
(der equal goodness assumption in LHS and RHS. EXP in PSPACE implies EXP=PSPACE because PSPACE ) s
5 98 M
(is in EXP. An EXPTIME problem is EXP-Complete if it can solve Exponential Time Bounded Halting) s
5 87 M
( Problem \(i.e output 1 if a Turing Machine halts after exponential number of steps\). Unbounded) s
5 76 M
( depth RHS CJT Majority voting composition circuit \(Majority+SAT\) is in EXPTIME. Following red) s
5 65 M
(uction from Majority voting to Bounded Halting Problem is a proof outline for EXP-completeness) s
5 54 M
( of CJT circuit:) s
5 43 M
(        \(*\) Let there be exponential number of voters \(i.e exponential in number of variables\)) s
5 32 M
(        \(*\) Number of voters = Number of steps in Bounded Halting Problem input Turing Machine) s
5 21 M
( = exponential) s
5 10 M
(        \(*\) Voting halts when all exponential voters have exercised franchise applying their S) s
_R
S
%%Page: (178) 178
%%BeginPageSetup
_S
18 36 translate
/pagenum 178 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (178) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(AT = EXPTIME Turing Machine Halts after exponential number of steps.) s
5 670 M
(If there are n boolean functions in total and probability that a boolean function i with goodn) s
5 659 M
(ess e\(i\) is chosen is:) s
5 648 M
(        = x\(e\(i\)\)/n, where x\(e\(i\)\) is the number of boolean functions with goodness e\(i\)) s
5 637 M
(When voter boolean functions have unequal error probabilities, the distribution is Poisson Bin) s
5 626 M
(omial \(which is for bernoulli trials with unequal probabilities for each event\) and not Binomi) s
5 615 M
(al or Poisson\(which is the limit of Binomial distribution\). This fraction is the LHS and in sp) s
5 604 M
(ecial case can be 1 when all boolean functions are of same goodness \(1-error\) probability. Thu) s
5 593 M
(s LHS goodness is conditional probability x\(e\(i\)\)/n * e\(i\) and can be 1 when all boolean funct) s
5 582 M
(ions are perfect.) s
5 560 M
(Thus most generic Majority voting case is when:) s
5 549 M
(        317.3 Voters have unequal decision errors) s
5 538 M
(        317.4 Set of voter boolean functions is an assorted mix of varied error probabilities ) s
5 527 M
(ranging from 0 to 1.) s
5 516 M
(        317.5 Modelled by Poisson Binomial Distribution) s
5 494 M
(In both Majority and Non-majority Choice, error of a boolean function comprises:) s
5 483 M
(        317.6 Voting Error - Misrecorded votes, Probabilistic CNFs) s
5 472 M
(        317.7 Voter Error - Noise Sensitivity of boolean function which has extraneous reasons) s
5 461 M
( like correlated flipped bit strings and Error intrinsic to boolean function in Decision tree ) s
5 450 M
(evaluation \(lambda-tolerant randomized decision trees\) mentioned in 314.) s
5 439 M
(Randomized decision tree evaluation in 317.7 adds one additional scenario to error matrix of 8) s
5 428 M
( possibilities in 14 and 53.14 which is beyond just correlation error.) s
5 406 M
(As mentioned elsewhere in this document and disclaimer earlier, LHS circuit is a lowerbound to) s
5 395 M
( RHS circuit for a C-complete class of problems when errors are equal, assuming complete probl) s
5 384 M
(ems exist for class C. When both LHS and RHS have errors, which is the most realistic case, LH) s
5 373 M
(S is a BPNC circuit and RHS is a BPEXP circuit with unrestricted depth of exponential sized ci) s
5 362 M
(rcuit. This raises a contradiction to already known result as follows: BPP is not known to hav) s
5 351 M
(e complete problems. [Marek Karpinski and Rutger Verbeek - KV87] show that BPEXP is not in BPP) s
5 340 M
( and EXP is in BPEXP. If there are BPEXP-complete problems then contradiction is LHS is a BPNC) s
5 329 M
( algorithm to RHS BPEXP-complete problem. But BPNC is in BPP \(logdepth, polysize circuit with ) s
5 318 M
(error can be simulated in polytime with error\) and BPEXP is not in BPP. This contradiction is ) s
5 307 M
(resolved only if there are no BPEXP-complete problems or there are no BPNC/BPEXP voting functi) s
5 296 M
(ons.) s
5 274 M
(From https://www.math.ucdavis.edu/~greg/zoology/diagram.xml, following chain of inclusions are) s
5 263 M
( known:) s
5 252 M
(        NC in BPNC in RNC in QNC in BQP in DQP in EXP) s
5 241 M
(        RP in BPP in BQP in DQP in EXP) s
5 219 M
(If LHS is a BPNC or RNC or BPP or RP pseudorandom algorithm to unbounded CJT RHS EXP-complete ) s
5 208 M
(problem under equal goodness assumption, previous class containments imply a drastic collapse ) s
5 197 M
(of EXP below:) s
5 186 M
(        EXP=BPNC \(or\) EXP=RNC \(or\) EXP=RP \(or\) EXP=BPP) s
5 175 M
(This is rather a serious collapse because the containments include Quantum classes BQP and QNC) s
5 164 M
(, implying classical parallelism is equivalent to quantum parallelism . One of the interpretat) s
5 153 M
(ions to Quantum parallelism is "Many Worlds" - computations happen in parallel \(states of the ) s
5 142 M
(wave function\) and interfere construnctively or destructively \(superposition of wave functions) s
5 131 M
( when some state amplitudes cancel out while others reinforce\) to curtail some of the worlds. ) s
5 120 M
(This special case occurs only if all voters have decision correctness probability p=1. For 1 >) s
5 109 M
( p > 0.5, RHS CJT circuit goodness converges to 1 for infinite electorate but LHS expected goo) s
5 98 M
(dness of Pseudorandom social choice is always less than 1, infact tends to 0 as N is infinite ) s
5 87 M
(as below. Referring to 359:) s
5 76 M
(        Let number of voter decision functions with goodness xi = m\(xi\). Thus N = m\(x1\)+m\(x2\)+) s
5 65 M
(m\(x3\)+...+m\(xn\)) s
5 54 M
(        Expected goodness of a PRG choice is:) s
5 43 M
(                1/N * summation\(xi*m\(xi\)\) = \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\) + ... + xn*m\(xn\)\) ) s
5 32 M
(/ N) s
5 21 M
(        When all voter functions have goodness 1 then PRG choice in LHS of P\(good\) has goodnes) s
5 10 M
(s 1.) s
_R
S
%%Page: (179) 179
%%BeginPageSetup
_S
18 36 translate
/pagenum 179 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (179) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(For p=0.5, RHS goodness is 0.5 and LHS goodness is 0.5 => LHS is in BPNC or RNC or RP or BPP a) s
5 681 M
(nd RHS is BPEXP. If RHS is BPEXP-complete, as mentioned previously, contradicts result of [KV8) s
5 670 M
(7], implying BPEXP=BPP. For p < 0.5, RHS CJT series goodness tends to 0 while LHS pseudorandom) s
5 659 M
( chouce expected goodness is always > 0. Thus only feasible lowerbound looks to be:) s
5 648 M
(        EXP=BPNC \(or\) EXP=RNC \(or\) EXP=RP \(or\) EXP=BPP) s
5 637 M
(when goodness p=1 uniformly for all infinite homogeneous electorate.) s
5 615 M
(References:) s
5 604 M
(----------) s
5 593 M
(317.8 Derandomization Overview - [Kabanets] - http://www.cs.sfu.ca/~kabanets/papers/derand_sur) s
5 582 M
(vey.pdf) s
5 571 M
(317.9 Unconditional Lowerbounds against advice - [BuhrmanFortnowSanthanam] - http://homepages.) s
5 560 M
(inf.ed.ac.uk/rsanthan/Papers/AdviceLowerBoundICALP.pdf) s
5 549 M
(317.10 EXPTIME-Completeness - [DingZhuDu-KerIKo] - Theory of Computational Complexity - https:) s
5 538 M
(//books.google.co.in/books?id=KMwOBAAAQBAJ&pg=PT203&redir_esc=y#v=onepage&q&f=false) s
5 527 M
(317.11 BPP with advice - http://people.cs.uchicago.edu/~fortnow/papers/advice.pdf - "...It can) s
5 516 M
( be shown using a translation argument that BPEXP is not in BPP [KV87], but this translation a) s
5 505 M
(rgument does not extend to showing a lower bound against advice. Since BPP and BPEXP are seman) s
5 494 M
(tic classes, it is unknown whether for instance BPEXP \342\\212\\206 BPP/1 implies BPEXP/1 \342\\212) s
5 483 M
(\\206 BPP/2.". LHS pseudorandom social choice algorithm is non-uniform because randomly choosin) s
5 472 M
(g an element from a varying number of electorate requires maximum size of electorate as advice) s
5 461 M
(. ) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(---------------------------------) s
5 417 M
(318. \(THEORY\) Yao's XOR Lemma, Hardness of Pr\(Good\) Majority Voting Function Circuit and Major) s
5 406 M
(ity Version of XOR Lemma) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(---------------------------------) s
5 373 M
(Caution: Majority Hardness Lemma derivation is still experimental with possible errors.) s
5 351 M
(Hardness of a boolean function is defined as how hard computationally it is to compute the fun) s
5 340 M
(ction with a circuit of size s:) s
5 329 M
(        if Pr\(C\(x\) != f\(x\)\) = delta where C\(x\) computes boolean function f\(x\), then f\(x\) delta) s
5 318 M
(-hard.) s
5 307 M
(Majority function is known to have formula of size O\(n^5.3\) - from Sorting networks of [AjtaiK) s
5 296 M
(omlosSzemeredi] and non-constructive proof by[Valiant]. Majority is computable in log-depth an) s
5 285 M
(d hence in non-uniform NC1.) s
5 263 M
(Hardness Amplification result by [AndrewYao] states that a strongly-hard boolean function can ) s
5 252 M
(be constructed from mildly-hard boolean function by amplification of hardness using XOR of mul) s
5 241 M
(tiple instances of function on some distribution of inputs. Following derivation develops intu) s
5 230 M
(ition for amplification in XOR lemma:) s
5 219 M
(        318.1 Let f be a boolean function with delta-hardness. Therefore there is a circuit C\() s
5 208 M
(x\) with size s,such that Pr\(C\(x\)!=f\(x\)\)=delta. XOR lemma states that there is a circuit C1\(x\) ) s
5 197 M
(with size s1, such that Pr\(C1\(x\)!=f1\(x\)\) tends to 0.5 > delta where f1\(x\) = f\(x1\) XOR f\(x2\) XO) s
5 186 M
(R ... XOR f\(xk\) for some distribution of inputs x1,x2,x3,...xk.) s
5 175 M
(        318.2 Each f\(xi\) in XOR function f1 in 318.1, is either flipped or not flipped. Let Zi) s
5 164 M
( be the random variable for flip of f\(xi\) - Zi=0 if there is no flip and Zi=1 if there is a fl) s
5 153 M
(ip using coin toss. Now the probability of correctly computing XOR of f\(xi\)s is equal to the s) s
5 142 M
(um = Probability that none of f\(xi\)s are flipped + Probability that even number of f\(xi\) is fl) s
5 131 M
(ipped. Even flips do not alter XOR outcome while odd flips do. This is nothing but Pr[Z1 XOR Z) s
5 120 M
(2 XOR Z3 XOR ... Zk = 0] because even flips cause XOR of Zi=1 to zero. If \(1-2*delta\) is proba) s
5 109 M
(bility of no flip and 2*delta is probability of a flip, for all Zi\(s\) Pr\(XOR is correctly comp) s
5 98 M
(uted\) = \(1-2*delta\)^k + 0.5*\(1-\(1-2*delta\)^k\). The second term is halved because probability o) s
5 87 M
(f even number of flips is required whereas atleast 1 flip implies both \(odd+even\).) s
5 76 M
(        318.3 Pr\(Good\) majority voting boolean function computes composition of Majority funct) s
5 65 M
(ion with Voting functions of individual voters. This can be expressed as: Majn\(f1,f2,f3,...fn\)) s
5 54 M
( for n voters. Till now hardness of this composition is not known in literature. Experimentall) s
5 43 M
(y, following derivation computes hardness of this composition as below.) s
5 32 M
(        318.4 For simplicity, it is assumed that all voters have same boolean function with ha) s
5 21 M
(rdness delta computable by circuit size s.) s
5 10 M
(        318.5 Majority function makes error when the inputs are flipped by some correlation. T) s
_R
S
%%Page: (180) 180
%%BeginPageSetup
_S
18 36 translate
/pagenum 180 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (180) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(his Probability that Pr\(Maj\(x\) != Maj\(y\)\) for two correlated strings x and y is termed as Nois) s
5 681 M
(e Sensitivity. This together with the probability that a circuit with access to pseudorandom b) s
5 670 M
(its incorrectly computes majority function is an estimate of how flawed majority voting is\(den) s
5 659 M
(oted as randomerror\). Then probability that Majority function is correctly computed is 1-Noise) s
5 648 M
(Sensitivity\(Majn\) - randomerror . This implies majority function is in BPNC if there is a para) s
5 637 M
(llel voting.) s
5 626 M
(        318.6 Noise Sensitivity of Majority function is O\(1/sqrt\(n*epsilon\)\) where epsilon is ) s
5 615 M
(probability of flip per bit. Therefore epsilon is nothing but probability that a voter boolean) s
5 604 M
( function is incorrectly computed and sent as input to Majority function. This implies Pr\(f\(x\)) s
5 593 M
( != C\(x\)\) = delta = epsilon = hardness of all voter functions.) s
5 582 M
(        318.7 Probability that Majority function is computed incorrectly = NoiseSensitivity +/) s
5 571 M
(- randomerror = [c/sqrt\(n*epsilon\)] +/- randomerror = [c/sqrt\(n*delta\) +/- randomerror ] which) s
5 560 M
( is the hardness of Majority+VoterFunctions composition. \(Related: points 14, 53.14 and 355 fo) s
5 549 M
(r BP* error scenarios matrix which picturises overlap of Noise Sensitivity and Error\)) s
5 538 M
(        318.8 Above derivation,if error-free,is the most important conclusion derivable for ha) s
5 527 M
(rdness of Pr\(Good\) majority voting boolean function circuit composition. Hardness of RHS of Pr) s
5 516 M
(\(Good\) Majority Voting circuit is expressed in terms of hardness of individual voter boolean f) s
5 505 M
(unctions.) s
5 494 M
(        318.9 Therefore from 318.7, Pr\(C\(Majn\(f\(x1\),f\(x2\),...,f\(n\)\) != Majn\(f\(x1\),f\(x2\),...,f\() s
5 483 M
(n\)\)] = [c/sqrt\(n*delta\) +/- randomerror] is the probability that how incorrectly a circuit of ) s
5 472 M
(size s1 computes Majn+VoterFunction composition = hardness of majority+voter composition.) s
5 461 M
(        318.10 Hardness is amplified if [c/sqrt\(n*delta\) +/- randomerror] >= delta as follows:) s
5 439 M
(                Hardness of Maj+voter composition       [c/sqrt\(n*delta\)] +/- randomerror) s
5 428 M
(                -----------------------------------  =  ------------------------------  >>  1) s
5 417 M
(                Hardness of voter function                  delta) s
5 395 M
(        318.11 Let randomerror=r. From above, [c/sqrt\(n*delta\) +/- r] / delta must be >> 1 for) s
5 384 M
( hardness amplification.        For large n, this limit tends to r/delta >> 1 implying error i) s
5 373 M
(n majority circuit has to be huge for large electorate compared to error in voter boolean func) s
5 362 M
(tion SATs for hardness amplification. Caveat: There are scenarios where numerator is comparabl) s
5 351 M
(y equal to denominator and hardness amplification may not occur. From error scenarios matrix i) s
5 340 M
(n 355,relation between error and noise can be precisely defined as: Error = Noise + \(column2 e) s
5 329 M
(rror entries\) - \(column3 no error entries\) where randomerror = r = \(column2 error entries\) - \() s
5 318 M
(column3 no error entries\) which substituted in amplification becomes:) s
5 296 M
(     Hardness of Maj+voter composition       [c/sqrt\(n*delta\)] + [sum\(column2 error entries\)] ) s
5 285 M
(- [sum\(column3 no error entries\)] ) s
5 274 M
(    -----------------------------------  =  --------------------------------------------------) s
5 263 M
(--------------------------------   >>  1) s
5 252 M
(         Hardness of voter function                                             delta) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(---------------------------------------------) s
5 208 M
(For large n, c/sqrt\(n*delta\) tends to 0 and If [sum\(column2 error entries\) -  sum\(column3 no e) s
5 197 M
(rror entries\)] >> delta then following applies: ) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(---------------------------------------------) s
5 164 M
(        318.12 318.11 implies that for weakly hard functions \(low delta\), if quantity in numer) s
5 153 M
(ator \(hardness of majority+voter composition\) is considerably huge compared to hardness of ind) s
5 142 M
(ividual voter functions, hardness is amplified .) s
5 131 M
(        318.13 318.11 also implies that Majority+Voter composition is extremely hard to comput) s
5 120 M
(e concurring with exponential circuit size \(PH=DC or EXP-completeness\) of Pr\(Good\) RHS.) s
5 109 M
(        318.14 Being extremely hard implies that RHS of Pr\(Good\) could be one-way function. On) s
5 98 M
(e-way functions are hard to invert defined formally as:) s
5 87 M
(                Pr\(f\(f_inverse\(y\)\)=f\(x\)\) is almost 0.) s
5 76 M
(For example inverse for Pr\(Good\) majority voting function is the one that returns set of all v) s
5 65 M
(oters who voted for a candidate to win. This implies that any electoral process has to be one-) s
5 54 M
(way function hard so that secret balloting is not in jeopardy and finding such inverse for maj) s
5 43 M
(ority has to be hardest. Similarity of definition of one-way function and hardness of boolean ) s
5 32 M
(functions is obvious. Hardness for majority derived previously is for forward composition dire) s
5 21 M
(ction which itself is high.) s
5 10 M
(        318.15 Conjecture: Circuit for reverse direction \(i.e decomposition of majority to vot) s
_R
S
%%Page: (181) 181
%%BeginPageSetup
_S
18 36 translate
/pagenum 181 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (181) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ers who voted in favour\) is considerably harder than composition and thus Majority\(n\)+Voter co) s
5 681 M
(mposition is an one-way function. An intuitive proof of this conjecture: Search for all permut) s
5 670 M
(ations of voters who voted in favour which is of size O\(2^n\) - equivalent to solving SAT of Ma) s
5 659 M
(jority function boolean formula to find assignments which is counting problem and is #P-Comple) s
5 648 M
(te. Indices of 1s in the assignment strings are the voter permutations. Next step is to find s) s
5 637 M
(atisfying assignments to individual voter SATs which is also #P-Complete. This completely inve) s
5 626 M
(rts the Majority+Voter composition and cumulatively is atleast #P-Complete. While the forward ) s
5 615 M
(direction is composition of NC instance to voter SATs bottom-up, inverse is harder because it ) s
5 604 M
(is completely #P-Complete top-down.) s
5 593 M
(        318.16 Huge hardness of Pr\(Good\) RHS also implies that very strong pseudorandom number) s
5 582 M
( generators can be constructed from it.) s
5 571 M
(        318.17 The counting problem in 318.15 finds all possible permutations of voters who co) s
5 560 M
(uld have voted in favour while what is required is the exact permutation which caused this maj) s
5 549 M
(ority outcome. From this, probability of finding exact permutation of voting pattern = 1/#SAT ) s
5 538 M
(= 1/number_of_sat_assignments_to_MajoritySAT. This counting and search problem is defined as f) s
5 527 M
(unction Majorityinverse\(1\)=\(v1,v2,v3,...vn\) and returns the exact permutation of voters who vo) s
5 516 M
(ted for Majority outcome to be 1.) s
5 505 M
(        318.18 318.17 implies Pr\(Majority\(Majorityinverse\(1\)\)==Majority\(v1,v2,...,vn\)\) = 1/#SA) s
5 494 M
(T <= 1/2^n in worst case.) s
5 483 M
(        318.19 In average case, expected number of SAT assignments to MajoritySAT = 1*1/2^n + ) s
5 472 M
(2*1/2^n + ...+ 2^n*1/2^n = 2^n*\(2^n+1\)/2 *1/2^n = \(2^n+1\)/2, assuming all permutations are equ) s
5 461 M
(ally probable. Average case Pr\(Majority\(Majorityinverse\(1\)\)==Majority\(v1,v2,...,vn\)\) = 1/#SAT ) s
5 450 M
(= 2/\(2^n+1\) ~= 1/2^\(n-1\) which is same as definition of a one-way function and thus Majority i) s
5 439 M
(s hard to invert in average case.) s
5 428 M
(        318.20 318.19 implies Majority is one-way. Therefore FP != FNP and thus P != NP if har) s
5 417 M
(dness is amplified in 318.11.) s
5 395 M
(References:) s
5 384 M
(-----------) s
5 373 M
(318.20 [Impagliazzo-Wigderson] - P=BPP if EXP has 2^Omega\(n\) size circuits - http://www.math.i) s
5 362 M
(as.edu/~avi/PUBLICATIONS/MYPAPERS/IW97/proc.pdf - Pr\(Good\) has exponential sized circuits \(by ) s
5 351 M
(theorem 6.29 of [AroraBarak] mentioned in 129 previously\) because of unbounded nature of RHS.) s
5 340 M
(318.21 [Trevisan] - XOR Lemma Course Notes - http://theory.stanford.edu/~trevisan/cs278-02/not) s
5 329 M
(es/lecture12.ps) s
5 318 M
(318.22 [Goldreich-RaniIzsak] - One-way functions and PRGs - http://www.wisdom.weizmann.ac.il/~) s
5 307 M
(oded/PDF/mono-cry.pdf) s
5 296 M
(318.23 Noise Sensitivity of Majority Function - http://pages.cs.wisc.edu/~dieter/Courses/2008s) s
5 285 M
(-CS880/Scribes/lecture16.pdf) s
5 274 M
(318.24 Definition of One-way functions - https://en.wikipedia.org/wiki/One-way_function) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(------------------------------) s
5 230 M
(319. \(THEORY\) Integer Partitions, Multiway Contests, Hash Table Functions and Ordered Bell Num) s
5 219 M
(bers - related to 256 and 272) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(------------------------------) s
5 186 M
(Number of hash table functions derived in https://sites.google.com/site/kuja27/IntegerPartitio) s
5 175 M
(nAndHashFunctions_2014.pdf, which sums) s
5 164 M
(all possible permutations of hash buckets per partition does not consider order of elements wi) s
5 153 M
(th in each bucket. Bell number \(named after) s
5 142 M
(Eric Temple Bell\) is the number of all possible partitions of a set \(induced by all possible e) s
5 131 M
(quivalence relations\). Each hash) s
5 120 M
(table is a set of equivalence classes \(i.e each bucket is an equivalence class and hash functi) s
5 109 M
(on is the relation\), partitioning the set.) s
5 98 M
(Ordered Bell Number takes into account order of keys in each bucket and gives all possible Ord) s
5 87 M
(ered Hash Table Functions. This is a stronger) s
5 76 M
(estimate of number of hash table functions than plain counting from integer partitions which i) s
5 65 M
(s unordered. Unordered n-th Bell Number is) s
5 54 M
(given by: sigma_k=0_to_n\({n,k}\) where {n,k} is the Stirling Number of Second kind computing nu) s
5 43 M
(mber of ways of partitioning set of size n) s
5 32 M
(into subsets of size exactly k.) s
5 10 M
(Let there be n keys and size of hash table be m. Let hi\(x\) mod m be a hash function.) s
_R
S
%%Page: (182) 182
%%BeginPageSetup
_S
18 36 translate
/pagenum 182 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (182) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(For each hi) s
5 681 M
({) s
5 670 M
(        For each x < n) s
5 659 M
(        {) s
5 648 M
(                Compute hi\(x\) mod m and append to corresponding chain of buckets in hash table) s
5 637 M
(        }) s
5 626 M
(}) s
5 604 M
(Above loops create all possible partitions of set of size n. If just the integer partition is ) s
5 593 M
(reduced to above hash table chains, sum\(mP\(lambda\(i\)\) is only an approximation. Also Ordered B) s
5 582 M
(ell Number is an approximation as it does not permute each partition within a larger set of sl) s
5 571 M
(ots. Stirling Number of second kind {n,k} is equal to number of partitions of an n-element set) s
5 560 M
( into k nonempty subsets.Each partition is permuted within m slots in a separate chained hash ) s
5 549 M
(table and each such permutation is a configuration of a hash function after all keys are popul) s
5 538 M
(ated. Total number of such functions = sum_k=1_to_m\(mP\({n,k}\) which can be called as Augmented) s
5 527 M
( Stirling Number and is greater than Ordered Bell Number:) s
5 516 M
(        sum_k=1_to_m\(mP\({n,k}\)\) >= Ordered Bell Number = sum_k=1_to_m\({n,k}\)) s
5 494 M
(In multipartisan voting with more than 2 candidates, above augmented stirling number is also t) s
5 483 M
(he number of all possible voting patterns with an electorate of size n voting on m candidates ) s
5 472 M
(- each chain is the set of votes for corresponding candidate. Hash function for each voter cho) s
5 461 M
(oses a candidate index. Thus Chained Hashing with optional sorting of chains on number of vote) s
5 450 M
(s is Majority Function generalized. From Arrow, Friedgut-Kalai-Nisan and Gibbard-Satterthwaite) s
5 439 M
( theorems elections with more than 3 candidates can be manipulated implying multiway majority ) s
5 428 M
(function has non-zero noise sensitivity.) s
5 406 M
(Probability that above multiway majority function has an error \(i.e chooses wrong outcome\) =) s
5 395 M
(Probability of changing one voting pattern to the other that changes ranking of candidates) s
5 373 M
(Each voting pattern can be deemed to be a point vertex on an m-dimensional metric space and ed) s
5 362 M
(ges between these vertices are distances to other) s
5 351 M
(patterns. If each edge has a probability of occurrence, Probability of flip in voting pattern ) s
5 340 M
(due to a malpractice is the probability of a path existing between these two voting patterns i) s
5 329 M
(n this random graph. If each each edge has equal probability, path probabilities vary between ) s
5 318 M
(p and p^\(augmented_stirling_number\). This assumes that any voting error is a converging random) s
5 307 M
( walk on the random graph of point vertices of voting pattern in a metric space. It could be a) s
5 296 M
( complete graph too which does not require a random walk.) s
5 274 M
(In a sense the multiway majority hashing previously is a locality sensitive hashing wherein si) s
5 263 M
(milarity between items is defined as voters voting for same candidate who are chained together) s
5 252 M
( in a bucket i.e Probability\(two voters x and y voting for same candidate are colocated in a b) s
5 241 M
(ucket\) = 1 and Probability\(two voters x and y voting for different candidates are colocated in) s
5 230 M
( a bucket\) = 0 with strict equalities while the distance function is defined as d\(x,y\) <= r if) s
5 219 M
( x and y vote for same candidate and d\(x,y\) > r else. From m-balls and n-bins problem bounds, ) s
5 208 M
(for m >> n, maximum number of balls per bin with high probability could be m/n + theta\(sqrt\(ml) s
5 197 M
(ogn/n\)\) - in terms of votes, this is a rough estimate of maximum votes a candidate can get wit) s
5 186 M
(h high probability in random voting. For example, a locality sensitive hash function f\(x\) mod ) s
5 175 M
(m returning k for f\(x\) mod m with f\(x\) defined over [-l, +l] maps a ball of radius l comprisin) s
5 164 M
(g similar voters to a candidate k - ball is the chained bucket for k.) s
5 142 M
(As mentioned in previous paragraphs, each voting pattern is a point vertex on a metric space a) s
5 131 M
(nd it is necessary to define distance d between any two voting patterns. Let v1 and v2 be two ) s
5 120 M
(voting patterns in the chained hashing previously described for m candidates and n voters. The) s
5 109 M
(se two patterns differ in votes per candidate. Hence it makes sense to define the distance bet) s
5 98 M
(ween the patterns as number of votes gained/lost by candidates across these two patterns. Let ) s
5 87 M
(p be the probability that single vote is transferred by rigged voting from candidate k to cand) s
5 76 M
(idate l. Also let c1, c2, c3,..ck be the candidates who either all gained \(or\) all lost across) s
5 65 M
( voting patterns v1 and v2. Then the probability that voting pattern changes from v1 to v2 = p) s
5 54 M
(^d where d is the metric distance between two voting patterns defined as d = v2\(c1\) - v1\(c1\) +) s
5 43 M
( v2\(c2\) - v1\(c1\) + ...+ v2\(ck\) - v1\(ck\) where va\(cb\) is the votes for candidate cb in voting p) s
5 32 M
(attern va. L2 norm is not preferred because probability for voting pattern change requires gai) s
5 21 M
(ned/lost votes in one direction only. For example voting pattern {5,3,4} becoming {6,4,2} impl) s
5 10 M
(ies first 2 candidates gained 1 vote each while third candidate lost 2 votes. L2 norm is sqrt\() s
_R
S
%%Page: (183) 183
%%BeginPageSetup
_S
18 36 translate
/pagenum 183 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (183) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(6\) while metric distance as per previous definition is 2. Greater the distance between pattern) s
5 681 M
(s, exponentially rarer is the probability p^d of voting pattern flip. It is assumed that all v) s
5 670 M
(oters vote independently and each vote flip in pattern change occurs independently. Thus the r) s
5 659 M
(andom graph edges between voting pattern vertices are weighted by these probabilities\(p^d1, p^) s
5 648 M
(d2, etc., for distances d1,d2,...\).This is an alternative definition of edge probability diffe) s
5 637 M
(rent from one described previously. Number of vertices in this random graph = augmented_stirli) s
5 626 M
(ng_number = sum_k=1_to_m\(mP\({n,k}\)\) >= Ordered Bell Number) s
5 604 M
(Probability of multiway majority choosing a wrong outcome = Probability that voting pattern no) s
5 593 M
(ise flip changes sorted ranking of candidates. For example, {12,10,5} becomes {7,12,8} which c) s
5 582 M
(hanges winner from first to second candidate with total votes remaining same. Not all edges of) s
5 571 M
( random graph of patterns change the ranking despite noise. If majority in multiway contest is) s
5 560 M
( defined as candidate index getting more than half of total votes, winning voting patterns are) s
5 549 M
( number of integer partitions of n voters with largest part > n/2. These partitions with large) s
5 538 M
(st part greater than n/2 correspond to subset of voting patterns which are not affected by noi) s
5 527 M
(se flip because only parts other than largest are shuffled. Therefore probability that outcome) s
5 516 M
( is not changed by noise flip of voting pattern = number_of_partitions_of_n_voters_greater_tha) s
5 505 M
(n_n/2 / partition_number\(n\). From this probability of wrong outcome because of noise flip in v) s
5 494 M
(oting pattern = 1 - { \(number_of_partitions_of_n_voters_greater_than_n/2\) / partition_number\(n) s
5 483 M
(\) } = Noise sensitivity of Multiway Majority Function.) s
5 461 M
(319.8 is an NVIDIA CUDA parallel implementation of hash table chaining. 319.9 is a recent para) s
5 450 M
(llel locality sensitive hashing algorithm for multicore machines, and segregates twitter strea) s
5 439 M
(m of tweets into similar buckets. Availability of parallel algorithms for hash table chains im) s
5 428 M
(plies that hash chaining and LSH especially could be in NC \(logarithmic table construction tim) s
5 417 M
(e\) though there is no known result thus far. Parallelism in multiway majority function LSH is ) s
5 406 M
(obvious because people vote in parallel and hash chain buckets are populated in parallel acros) s
5 395 M
(s multiple voting machines in compartmentalized voting. Each such voting machine can correspon) s
5 384 M
(d to a node in Multiway Majority circuit. The rho parameter of LSH is log\(1/p1\)/log\(1/p2\) wher) s
5 373 M
(e p1=Pr\(h\(x\)=h\(y\)\) if x and y had voted for same candidate and p2=Pr\(h\(x\)=h\(y\)\) if x and y had) s
5 362 M
( voted for different candidates. In multiway majority LSH mentioned previously, p1=1 and p2=0 ) s
5 351 M
(and rho=0 where as in usual approximate neighbours problem rho is only required to be < 1. Int) s
5 340 M
(uitively, each hash table slot is lock-free and each bucket for a slot is lock-synchronized. T) s
5 329 M
(hus votes across candidates is parallelizable and votes for a candidate are serially increment) s
5 318 M
(ed\(linked-list bucket is appended\). Addition of votes per candidate slot should be doable in N) s
5 307 M
(C \(because integer addition is in NC\). Thus there are as many NC circuits as there are candida) s
5 296 M
(tes. Set of votes from all candidates has to be then sorted to find the winner which is also i) s
5 285 M
(n NC \(e.g Sorting networks\). Optional comparator circuits for half-way mark comparison is also) s
5 274 M
( in NC. Thus Multiway majority function could be computable in Non-uniform NC which places it ) s
5 263 M
(in same league as boolean 0-1 majority function.) s
5 241 M
(References:) s
5 230 M
(-----------) s
5 219 M
(319.1 Unordered Bell Number - https://en.wikipedia.org/wiki/Bell_number) s
5 208 M
(319.2 Ordered Bell Number - https://en.wikipedia.org/wiki/Ordered_Bell_number) s
5 197 M
(319.3 Mining Massive Data Sets - [UllmanRajaramanLeskovec] - http://infolab.stanford.edu/~ullm) s
5 186 M
(an/mmds/book.pdf) s
5 175 M
(319.4 Lowerbounds for Locality Sensitive Hashing - [RyanODonnell] - https://www.cs.cmu.edu/~od) s
5 164 M
(onnell/papers/lsh.pdf) s
5 153 M
(319.5 Theory of Partitions - Bell numbers - [GeorgeEAndrews] - http://plouffe.fr/simon/math/An) s
5 142 M
(drews%20G.E.%20The%20Theory%20of%20Partitions%20\(Enc.Math.Appl.%202,%20AW,%201976\)\(266s\).pdf) s
5 131 M
(319.6 Power of Simple Tabulation Hashing - [PatrascuThorup] - http://arxiv.org/pdf/1011.5200v2) s
5 120 M
(.pdf - Lemma 4 - Balls and Bins hashing) s
5 109 M
(319.7 Balls and Bins, Chained Hashing, Randomized Load balancing - http://pages.cs.wisc.edu/~s) s
5 98 M
(huchi/courses/787-F09/scribe-notes/lec7.pdf) s
5 87 M
(319.8 Parallel Hash tables - Chaining buckets with arrays - http://idav.ucdavis.edu/~dfalcant/) s
5 76 M
(/downloads/dissertation.pdf) s
5 65 M
(319.9 Parallel Locality Sensitive Hashing - [Narayanan Sundaram\342\\200\240,Aizana Turmukhametova,Na) s
5 54 M
(dathur Satish\342\\200\240,Todd Mostak,Piotr Indyk,Samuel Madden and Pradeep Dubey\342\\200\240] -  http://i) s
5 43 M
(stc-bigdata.org/plsh/docs/plsh_paper.pdf) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(----------------------) s
_R
S
%%Page: (184) 184
%%BeginPageSetup
_S
18 36 translate
/pagenum 184 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (184) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(320. \(BUG-STABILITY ISSUES\) Commits - 6 September 2016) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(----------------------) s
5 659 M
(VIRGO Linux Kernel Stability Analysis - 2 September 2016 and 6 September 2016) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(----------------------) s
5 626 M
(kern.log\(s\) for Boost::Python invocation of VIRGO system calls with and without crash on two d) s
5 615 M
(ates have been committed:) s
5 604 M
(Logs on 2/9/2016 have a crash as usual in VM paging scatterlist.c.Today's invocation logs show) s
5 593 M
( perfect execution of whole end-to-end user/kernel space without any kernel panic much later. ) s
5 582 M
(Such randomness in behaviour is quite unexplainable unless something lurking beyond the code p) s
5 571 M
(ath intercepts this. Could be a mainline kernel bug in 4.1.5 tree.) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(----------------------) s
5 527 M
(321. \(BUG-STABILITY ISSUES\) Commits - 8 September 2016) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(----------------------) s
5 494 M
(Continued kernel panic analysis of boost::python-VIRGO system calls invocations. Similar patte) s
5 483 M
(rn of crashes in vma paging is observed with a) s
5 472 M
(successful panic-free invocation in the end.) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(----------------------) s
5 428 M
(322. \(BUG-STABILITY ISSUES\) Commits - 9 September 2016) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(----------------------) s
5 395 M
(Boost::python-VIRGO system calls invocation kernel panic analysis showing some problem with i9) s
5 384 M
(15 graphics driver interfering with) s
5 373 M
(VIRGO system calls.) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-----------------------------------------------) s
5 329 M
(323. \(THEORY\) Complement Functions for Hash Chains, PAC Learning, Chinese Remaindering and Pos) s
5 318 M
(t Correspondence Problem - related to 19,24,319) s
5 307 M
(- important draft additions to http://arxiv.org/pdf/1106.4102v1.pdf) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-----------------------------------------------) s
5 274 M
(A hash table chain can be viewed as a subset segment of a larger rectangular region. Complemen) s
5 263 M
(t of this subset is another hash table chain.) s
5 252 M
(For example following schematic ilustrates hash table complements with respect to chained buck) s
5 241 M
(ets:) s
5 219 M
(        ------------------------- ####################) s
5 208 M
(        ---------- ###################################) s
5 197 M
(        ---------------- #############################) s
5 186 M
(        ------------------ ###########################) s
5 175 M
(        ------ #######################################) s
5 153 M
(Above diagram has two hash table chains shown in different constituent colors. Together these ) s
5 142 M
(two cover a rectangular region. Thus left\(f1\) and right\(f2\) are complements of each other. In ) s
5 131 M
(partition parlance, both f1 and f2 have same number of parts. Let f1 partition a set of n1 and) s
5 120 M
( f2 partition a set of n2 elements into chains. Let m be the number of parts in both \(breadth ) s
5 109 M
(of rectangle\). Then length is \(n1 + n2\) / m. If Pi\(f1\) and Pi\(f2\) denote the i-th chain partit) s
5 98 M
(ion on both f1 and f2, then Pi\(f1\) + Pi\(f2\) = \(n1 + n2\)/m. Hash function which created f1 is k) s
5 87 M
(nown while that of f2 is unknown. This is a special case of Decidability of Complement Functio) s
5 76 M
(n mentioned in 24 where "complementation" is defined with reference to a larger universal rect) s
5 65 M
(angular set. From the chain pattern on right the hash function for f2 can be reverse engineere) s
5 54 M
(d. When the left is viewed as a multiway majority voting pattern or a Locality Sensitive Hash ) s
5 43 M
(function, right is a complementary voting pattern or a Complementary Locality Sensitive Hash F) s
5 32 M
(unction which "inverts" the ranking. A tabulation for hash function of f2 can be constructed l) s
5 21 M
(ike an example below:) s
5 10 M
(        f\(x01\) mod m = 0) s
_R
S
%%Page: (185) 185
%%BeginPageSetup
_S
18 36 translate
/pagenum 185 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (185) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        f\(x11\) mod m = 1) s
5 681 M
(        f\(x12\) mod m = 1) s
5 670 M
(        ...) s
5 659 M
(        f\(x21\) mod m = 2) s
5 648 M
(        f\(x22\) mod m = 2) s
5 637 M
(        ...) s
5 626 M
(where xij is the j-th element in i-th chain part in f2 on right. Above tabulation can be solve) s
5 615 M
(d by Euclid's algorithm. For example, f\(x11\) mod m = 1 can be solved as:) s
5 604 M
(        [-m*y + f\(x11\)] = 1 => f\(x11\) mod m = 1) s
5 593 M
(Therefore above table can be written as system of congruences:) s
5 582 M
(        f\(x01\) = a01*m + 0) s
5 571 M
(        f\(x11\) = a11*m + 1) s
5 560 M
(        f\(x12\) = a12*m + 1) s
5 549 M
(        ...) s
5 538 M
(        f\(x21\) = a21*m + 2) s
5 527 M
(        f\(x22\) = a22*m + 2) s
5 516 M
(        ...) s
5 505 M
(Since m is known and all aij can take arbitrary values, complement function for f2 can be cons) s
5 494 M
(tructed by fixing aij and applying either PAC learning\(approximation only\) or CNF multiplexor ) s
5 483 M
(construction/Interpolation/Fourier Series \(described in 19 and 24\). There are indefinite numbe) s
5 472 M
(r of Complement Functions  constructible by varying aij. But Number of hash functions is upper) s
5 461 M
(bounded by Augmented Stirling Number. This is because hash functions which internally apply co) s
5 450 M
(mplement functions, create finite chained bucket configurations or voting patterns bounded by ) s
5 439 M
(augmented stirling number modulo size of the table whereas complement functions don't have suc) s
5 428 M
(h restrictions in construction. This implies two complement functions could give rise to simil) s
5 417 M
(ar hash table chain configurations.  Thus set of complement functions is partitioned by hash c) s
5 406 M
(hained configurations i.e. there are augmented stirling number of sets of complement functions) s
5 395 M
(. Main advantage of PAC learnt complement construction over exact multiplexed CNF construction) s
5 384 M
( is there are no bloating of variables and boolean conjunctions are minimal, but the disadvant) s
5 373 M
(age is approximation and not exact. For first n prime numbers there are log\(n\) conjunctions ea) s
5 362 M
(ch of log\(n\) literals.) s
5 340 M
(Boolean 0-1 majority function is a special case of multiway majority function \(or\) LSH, where ) s
5 329 M
(hashtable is of size 2 with 2 chained buckets i.e.) s
5 318 M
(        Augmented Stirling Number of Boolean Majority = 2P\(n,1} + 2P{n,2}) s
5 296 M
(Chinese Remaindering Theorem states that there is a ring isomorphism for N=n1*n2*n3*....*nk \(f) s
5 285 M
(or all coprime ni\) such that:) s
5 274 M
(        X mod N <=> \(X mod n1, X mod n2, X mod n3, ...., X mod nk\)) s
5 263 M
(        \(or\)) s
5 252 M
(        Z/NZ <=> Z/n1Z * Z/n2Z * .... * Z/nkZ) s
5 241 M
(Chinese Remaindering has direct application in hash table chains as they are created in modula) s
5 230 M
(r arithmetic. K hash functions on the right of isomorpshism correspond to K hash table chains ) s
5 219 M
(\(or\) LSH \(or\) Voting patterns for hash tables of sizes n1,n2,....,nk. Left of isomorphism is a) s
5 208 M
( hash table of size N \(LSH or a Voting Pattern\).) s
5 186 M
(From Post Correspondence Problem, if f1 and f2 in schematic diagram are two voting patterns, f) s
5 175 M
(inding a sequence such that:) s
5 164 M
(        p1p2p3...pm = q1q2q3....qm) s
5 153 M
(is undecidable where pi and qi are parts in voting patterns f1 and f2 as concatenated strings.) s
5 142 M
( What this means is that finding a sequence) s
5 131 M
(which makes serialized voters in both patterns equal is undecidable.) s
5 109 M
(Alternative proof of undecidability of Complement Function Construction with PCP :) s
5 98 M
(----------------------------------------------------------------------------------------) s
5 87 M
(Complement Functions are reducible to Post Correspondence Problem. PCP states that finding seq) s
5 76 M
(uence of numbers i1,i2,i3,...,ik such that:) s
5 65 M
(        s\(i1\)s\(i2\)s\(i3\)....s\(ik\) = t\(i1\)t\(i2\)t\(i3\)...t\(ik\)) s
5 54 M
(where s\(ik\) and t\(ik\) are strings is undecidable.) s
5 32 M
(Example inductive base case:) s
5 21 M
(-----------------------------) s
5 10 M
(Let f\(x\) = 2,4,6,8,....) s
_R
S
%%Page: (186) 186
%%BeginPageSetup
_S
18 36 translate
/pagenum 186 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (186) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(and g\(x\) = 1,3,5,7,....) s
5 681 M
(f\(x\) and g\(x\) are complements of each other.) s
5 659 M
(Define a\(i\) and b\(i\) as concatenated ordered pairs of f\(xi\) and g\(xi\):) s
5 648 M
(        a1 = 2          b1 = 2,3) s
5 637 M
(        a2 = 3,4        b2 = 4,5) s
5 626 M
(        a3 = 5,6        b3 = 6,7) s
5 615 M
(        a4 = 7,8        b4 = 8,9) s
5 604 M
(        a5 = 9,10       b5 = 10) s
5 593 M
([e.g a2 = 3, 4 where g\(a2\) = 3 and f\(a2\) = 4; b3= 6,7 where f\(b3\) = 6 and g\(b3\) = 7 and so on.) s
5 582 M
( Here complement of an element is the succeeding element in universal set Z=1,2,3,4,5,... ]) s
5 560 M
(Then, 1,2,3,4,5 is a sequence such that:) s
5 549 M
(        a1a2a3a4a5 = b1b2b3b4b5 = 2,3,4,5,6,7,8,9,10) s
5 538 M
(which can be parenthesised in two ways as:) s
5 527 M
(        2\(3,4\)\(5,6\)\(7,8\)\(9,10\) = \(2,3\)\(4,5\)\(6,7\)\(8,9\)10 = 2,3,4,5,6,7,8,9,10) s
5 516 M
(Each parenthesization is a string representation of a possible way to construct a complement f) s
5 505 M
(unction. Ideally, process of complementation has two symmetric directions created by the gaps ) s
5 494 M
(in the range a function maps a domain to - predecessors and successors - which is captured by ) s
5 483 M
(the two parenthesizations\(i.e f is complement of g and g is complement of f\). Each substring w) s
5 472 M
(ithin the parentheses is indexed by sequence numbers ai and bi. Thus an order of sequence numb) s
5 461 M
(ers have to be found for both symmetric directions to get matching concatenated union of compl) s
5 450 M
(ements \(universal set\).  Both directions have to converge because complementation is symmetric) s
5 439 M
( relation. But finding such an order of sequence numbers is a Post Correspondence Problem and ) s
5 428 M
(undecidable\(question of if turing machine halts on input\). Since each a\(i\) and b\(i\) are concat) s
5 417 M
(enated ordered pair of value of f\(x\) and its complement g\(x\), complement function is construct) s
5 406 M
(ible if such ordered pairs exist for indefinite length. In essence: Finding an order of sequen) s
5 395 M
(ce numbers = Construction of complement functions which converge in opposing directions => Und) s
5 384 M
(ecidable by Post Correspondence Problem. Above example can be generalized for any function, an) s
5 373 M
(d its complement ordered pair and thus is an alternative proof \(with a tighter definition of c) s
5 362 M
(omplementation that complements are bidirectional\) of undecidability of Complement Function Ex) s
5 351 M
(istence and Construction. Another example is 2 parenthesizations for prime complementation bel) s
5 340 M
(ow - elements succeeding a prime in left and elements preceding a prime in right:) s
5 329 M
(        f\(x\) = 2,3,5,7,11,...) s
5 318 M
(        g\(x\) = 4,6,8,9,10,12,...) s
5 296 M
(        \([2,3],4\)\(5,6\)\(7,[8,9,10]\)\(11\) = \([2,3]\)\(4,5\)\(6,7\)\([8,9,10],11\) = 2,3,4,5,6,7,8,9,10,1) s
5 285 M
(1) s
5 263 M
(Generic inductive case:) s
5 252 M
(-----------------------) s
5 241 M
(        \(f\(x1\),succ\(f\(x1\)\)\(f\(x2\),succ\(f\(x2\)\).... = \(predec\(g\(x1\),g\(x1\)\)\(predec\(g\(x2\),g\(x2\)\)...) s
5 230 M
(. = Z) s
5 219 M
(        \(or\)) s
5 208 M
(        concatenation_of\(f\(xi\),g\(xi\)\) = concatenation_of\(g\(xi\),f\(xi\)\) = Z) s
5 197 M
(where succ\(\) and predec\(\) are successor and predecessor functions respectively in lambda calcu) s
5 186 M
(lus jargon and xi take some integer values. This assumes nothing about the sorted order of f\(x) s
5 175 M
(i\) and g\(xi\) and each ordered pair is arbitrarily sampled and aggregated. f\(x\) is known and fr) s
5 164 M
(om this complement g\(x\) has to be constructed\(though g\(xi\) sampled data points are known, g\(x\)) s
5 153 M
( is not\). To construct g\(x\), ordered pairs for g\(xi\) have to be sequenced as g\(0\), g\(1\), ... w) s
5 142 M
(hich amounts to assigning values to xi which is Post Correspondence Problem and undecidable.) s
5 120 M
(Two complementation parenthesizations can be drawn as step function where indentation denotes ) s
5 109 M
(complementary g points to f in example below:) s
5 87 M
(                        |) s
5 76 M
(                        | f\(1\)) s
5 65 M
(                        |) s
5 54 M
(                        ---------) s
5 43 M
(                                |) s
5 32 M
(                                | g\(1\)) s
5 21 M
(                                |) s
5 10 M
(                        ---------) s
_R
S
%%Page: (187) 187
%%BeginPageSetup
_S
18 36 translate
/pagenum 187 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (187) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(                        |) s
5 681 M
(                        | f\(0\)) s
5 670 M
(                        |) s
5 659 M
(                        ---------) s
5 648 M
(                                |) s
5 637 M
(                                | g\(0\)) s
5 626 M
(                                |) s
5 615 M
(                                |) s
5 604 M
(                        ---------) s
5 593 M
(                        |) s
5 582 M
(                        | f\(2\)) s
5 571 M
(                        ---------) s
5 560 M
(                                |) s
5 549 M
(                                | g\(2\)) s
5 538 M
(                                |) s
5 516 M
(which represent two parenthesization correspondences \(sequence on right is staggered by one se) s
5 505 M
(gment\):) s
5 494 M
(        \(f\(1\),g\(1\)\)\(f\(0\),g\(0\)\)\(f\(2\),g\(2\)\) = \(f\(1\)\)\(g\(1\),f\(0\)\)\(g\(0\),f\(2\)\)\(g\(2\)\) = f\(1\)g\(1\)f\(0\)g) s
5 483 M
(\(0\)f\(2\)g\(2\)) s
5 472 M
(Hence x1,x2,x3 take values 1,0,2 for string on left. String on the right despite staggering al) s
5 461 M
(so takes values 1,0,2 for x1,x2,x3 with only slight change - 1,0,2 is represented as 1-0, 0-2,) s
5 450 M
( 2 by coalescence of any two juxtaposed xi. This correspondence is undecidable by PCP. This co) s
5 439 M
(mplementation scheme relaxes the definition of complements in http://arxiv.org/pdf/1106.4102v1) s
5 428 M
(.pdf by allowing the pre-image of complementary function segments to be in unsorted order - e.) s
5 417 M
(g 1,0,2 is not sorted.) s
5 395 M
(Two Generic parenthesizations for f and its complement g are:) s
5 384 M
(        [f\(x1\)][g\(y1\)f\(x2\)][g\(y2\)f\(x3\)][g\(y3\)]... = [f\(x1\)g\(y1\)][f\(x2\)g\(y2\)][f\(x3\)g\(y3\)]... = ) s
5 373 M
(f\(x1\)g\(y1\)f\(x2\)g\(y2\)f\(x3\)g\(y3\)...) s
5 362 M
(where each f\(xi\) and g\(yi\) are contiguous streak of set of values of f and g. xi is not necess) s
5 351 M
(arily equal to yi. Required sequence numbers are) s
5 340 M
(x1-y1, x2-y2, x3-y3, ... in right and x1, y1-x2, y2-x3, ... in left to make the strings corres) s
5 329 M
(pond to each other. Here sequence numbers are identifiers which are concatenation of 2 numbers) s
5 318 M
( xi and yi as xi-yi or yi-x\(i-1\). Thus original undecidability of finding x1-y1,x2-y2,x3-y3,..) s
5 307 M
(. still remains. This is the most relaxed version of complementation.) s
5 285 M
(Another alternative definition of complement function is: function f and its complement g are ) s
5 274 M
(generating functions for the exact disjoint set cover of size 2 of a universal set formed by v) s
5 263 M
(alues of f and g. Disjoint Set Cover is the set of subsets of a universal set where each eleme) s
5 252 M
(nt of universal set is contained in exactly one set and their union is the universal set. Noti) s
5 241 M
(on of complementation can be extended to arbitray dimensional spaces. Each half-space is gener) s
5 230 M
(ated by a function complement to the other. Complementation is also related to concepts of VC-) s
5 219 M
(Dimension and Shattering where each half-space is a class classified by complement functions \() s
5 208 M
(set A is shattered by a set C of classes of sets if for all subsets s of A, s = c intersection) s
5 197 M
( A for c in C\)) s
5 175 M
(Complementation Disjoint Set Cover can be represented as bipartite graph where edges are betwe) s
5 164 M
(en two sets A and B. Set A has sequence numbers xi\(or yi\) and set B is the universal set \(Z fo) s
5 153 M
(r example\). For each f\(xi\) and g\(yi\) there is an edge from xi----f\(xi\) and yi-----g\(yi\).) s
5 131 M
(Boolean 0-1 majority special case of Hash chains and Complement Functions:) s
5 120 M
(--------------------------------------------------------------------------) s
5 109 M
(A hash table of size 2 with 2 chains partitions the set of keys into 2 disjoint sets. Each cha) s
5 98 M
(in in this hash table is created by 2 functions complement to each other \(examples previously ) s
5 87 M
(described: set of odd and even integers, set of primes and composites\). Thus if there exists a) s
5 76 M
( hash function h that accepts another function f as input and partitions a universal set into ) s
5 65 M
(two chained buckets with mutually complementary elements belonging to f and g\(complement of f\)) s
5 54 M
(, then it is an indirect way to construct a complement. But undecidability of complement const) s
5 43 M
(ruction by post correspondence precludes this.) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(--------------------------------------) s
_R
S
%%Page: (188) 188
%%BeginPageSetup
_S
18 36 translate
/pagenum 188 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (188) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(324. \(FEATURE-DONE\) PAC Learning for Prime Numbers encoded as binary strings - Commits - 12 Se) s
5 681 M
(ptember 2016) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(--------------------------------------) s
5 648 M
(PAC Learning implementation has been augmented to learn patterns in Prime Numbers encoded as b) s
5 637 M
(inary strings. For each prime bit a boolean conjunction is learnt.  Separate Mapping code has ) s
5 626 M
(been written in python-src/PACLearning_PrimeBitsMapping.py which json dumps the mapping of fir) s
5 615 M
(st 10000 prime numbers to corresponding i-th prime bit.  Logs for this have been committed to ) s
5 604 M
(python-src/testlogs/PACLearning.PrimeBitsMappingConjunctions.out.12September2016) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(--------------------------------------) s
5 560 M
(325. \(FEATURE-DONE\) PAC Learning for Prime Numbers - Commits - 14 September 2016) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(--------------------------------------) s
5 527 M
(Some errors corrected in bit positions computation in JSON mappings for PAC learning of Prime ) s
5 516 M
(Numbers. Logs committed to testlogs/) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(------------------------------------) s
5 472 M
(326. \(BUG-STABILITY ISSUES\) Boost::Python-VIRGO System calls invocations random kernel panics ) s
5 461 M
(- Commits - 15 September 2016) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(------------------------------------) s
5 428 M
(Further Kernel Panic analysis in i915 driver for Boost::python-VIRGO system calls invocations.) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(--------------------------------------) s
5 384 M
(327. \(THEORY\) Algorithmic Fairness, Pr\(Good\) Majority Voting Circuit and Algorithmic Decision ) s
5 373 M
(Making - Related to 14,53,275,317) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(--------------------------------------) s
5 340 M
(In Majority Voting hardness analyzed thus far, voting functions of Individual Human Voters are) s
5 329 M
( assumed. Recent advances in algorithmic) s
5 318 M
(decision making \(High Frequency Algorithmic Trading, Predictive Policing etc.,\) involve decisi) s
5 307 M
(on making by algorithms than humans. It was) s
5 296 M
(implicit so far that algorithms cannot have bias. But there is a new emerging field of algorit) s
5 285 M
(hmic fairness which highlights growing) s
5 274 M
(bias by machine learning algorithms in decision making \(bias could be in training dataset, alg) s
5 263 M
(orithm's false assumptions leading to) s
5 252 M
(wrong conclusions based on correlations etc.,\) that could subvert stock trading buy-sell decis) s
5 241 M
(ions, criminal justice system and so on. Similar) s
5 230 M
( unfairness could happen in Majority voting also if the voters are algorithms \(algorithm inter) s
5 219 M
(nally using a boolean function, non-boolean) s
5 208 M
(function, past training data to make future decisions among others\). Unfair voting algorithms ) s
5 197 M
(imply that Pr\(Good\) summation would never) s
5 186 M
(converge to 100% and therefore error is non-zero. Unfair voting is detrimental to distributed ) s
5 175 M
(cloud computing involving majority voting) s
5 164 M
(choice - e.g loadbalancing of requests get skewed to a node unfairly by bad voting.  Most impo) s
5 153 M
(rtantly a proof of existence of 100% fair) s
5 142 M
(voting algorithm implies that LHS of Pr\(Good\) summation is 1 \(From 317.2 least error algorithm) s
5 131 M
( is chosen as Non-majority social choice\).) s
5 109 M
(References:) s
5 98 M
(-----------) s
5 87 M
(327.1 Algorithmic Fairness - https://algorithmicfairness.wordpress.com) s
5 76 M
(327.2 Leader Election Algorithms in Cloud - HBase ZooKeeper - [Mahadev Konar - Yahoo] - http:/) s
5 65 M
(/wiki.apache.org/hadoop/ZooKeeper/ZooKeeperPresentations?action=AttachFile&do=view&target=zook) s
5 54 M
(eeper_hbase.pptx) s
5 43 M
(327.3 Leader Election and Quorum in ElasticSearch - https://www.elastic.co/blog/found-leader-e) s
5 32 M
(lection-in-general - Each node votes for a leader and minimum number of votes required for a l) s
5 21 M
(eader is Quorum - This is realworld application of Multiway Majority function.) s
_R
S
%%Page: (189) 189
%%BeginPageSetup
_S
18 36 translate
/pagenum 189 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (189) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(--------------------------------------) s
5 670 M
(328. \(FEATURE-DONE\) Locality Sensitive Hashing Implementation - Nearest Neighbours Search - Co) s
5 659 M
(mmits - 16 September 2016) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(--------------------------------------) s
5 626 M
(1.This commit implements locality sensitive hashing in python by wrapping defaultdict with has) s
5 615 M
(hing and distance measures.) s
5 604 M
(2.Locality Sensitive Hashing is useful for clustering similar strings or text documents into s) s
5 593 M
(ame bucket and is thus an unsupervised) s
5 582 M
(classifier and an inverted index too.) s
5 571 M
(3.In this implementation, very basic LSH is done by having replicated hashtables and hashing a) s
5 560 M
( document to each of these hashtables with) s
5 549 M
(a random polynomial hash function which itself is aggregation of random monomials.) s
5 538 M
(4.For a query string, random hash function is again computed and buckets from all hashtables c) s
5 527 M
(orresponding to this hash value is returned as) s
5 516 M
(nearest neighbour set.) s
5 505 M
(5.Each of these buckets are sieved to find the closest neighbour for that hashtable.) s
5 494 M
(6.Sorting the nearest neighbours for all hash tables yields a ranking of documents which are i) s
5 483 M
(n the vicinity of the query string.) s
5 472 M
(7.The input strings are read from a text file LocalitySensitiveHashing.txt) s
5 461 M
(8.Logs with hashtable dumps and nearest neighbour rankings are in testlogs/LocalitySensitiveHa) s
5 450 M
(shing.out.16September2016) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(--------------------------------------) s
5 406 M
(329. \(FEATURE-DONE\) LSH WebCrawler Support - Commits - 19 September 2016) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(--------------------------------------) s
5 373 M
(Locality Sensitive Hashing now accepts scrapy crawled webpages as datasources.) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-------------------------) s
5 329 M
(330. \(BUG - STABILITY ISSUES\) Boost::Python AsFer-VIRGO system calls kernel panics - Commits -) s
5 318 M
( 19 September 2016) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(-------------------------) s
5 285 M
(Boost::python AsFer - VIRGO system call ongoing kernel panic analysis - i915 DRM race conditio) s
5 274 M
(n kernel panic in VM pages freeing) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(-----------------------------------------------) s
5 230 M
(331. \(FEATURE-DONE\) ZeroMQ based Concurrent Request Servicing CLI - Client and Multithreaded S) s
5 219 M
(erver Implementation) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(-----------------------------------------------) s
5 186 M
(Commits - 21 September 2016) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(-----------------------------------------------) s
5 153 M
(1.NeuronRain already has support for RESTful GUI implemented in Python Tornado and NeuronRain ) s
5 142 M
(code can be executed by) s
5 131 M
(filling up HTML form pages.) s
5 120 M
(2.ZeroMQ has a lowlevel highly performant low latency concurrency framework for servicing heav) s
5 109 M
(ily concurrent requests.) s
5 98 M
(3.ZeroMQ is a wrapper socket implementation with special support for Request-Reply, Router-Wor) s
5 87 M
(ker, Pub-Sub design patterns.) s
5 76 M
(4.Important advantage of ZeroMQ is lack of necessity of lock synchronization \(i.e ZeroMQ is lo) s
5 65 M
(ck-free per its documentation\)) s
5 54 M
(for consistency of concurrent transactions) s
5 43 M
(5.Hence as a CLI alternative to HTTP/REST GUI interface,a C++ client and server have been impl) s
5 32 M
(emented based on ZeroMQ Request-Reply) s
5 21 M
(Router-Dealer-Worker sockets pattern to serve concurrent requests.) s
5 10 M
(6.ZeroMQ client: ./zeromq_client "<neuronrain executable command>") s
_R
S
%%Page: (190) 190
%%BeginPageSetup
_S
18 36 translate
/pagenum 190 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (190) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(7.ZeroMQ server: invokes system\(\) on the executable arg from zeromq client) s
5 681 M
(8.With this NeuronRain has following interfaces:) s
5 670 M
(        8.1 telnet client ----------------------------------------------------> NeuronRain VIR) s
5 659 M
(GO ports) s
5 648 M
(        8.2 VIRGO system call clients ----------------------------------------> NeuronRain VIR) s
5 637 M
(GO ports) s
5 626 M
(        8.3 AsFer boost::python VIRGO system call invocations ----------------> NeuronRain VIR) s
5 615 M
(GO ports) s
5 604 M
(        8.4 Tornado GUI RESTful ----------------------------------------------> NeuronRain VIR) s
5 593 M
(GO ports) s
5 582 M
(        8.5 ZeroMQ CLI client/server -----------------------------------------> NeuronRain VIR) s
5 571 M
(GO ports) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(-------------------------------------------) s
5 527 M
(332. \(FEATURE-DONE\) KingCobra VIRGO Linux workqueue and Kafka Publish-Subscribe Backend Messag) s
5 516 M
(e Queue support in Streaming Generator) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(-------------------------------------------) s
5 483 M
(Commits - 22 September 2016) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(-------------------------------------------) s
5 450 M
(1.Streaming_AbstractGenerator has been updated to include KingCobra request-reply queue disk p) s
5 439 M
(ersisted store, as) s
5 428 M
(a data storage option \(reads /var/log/kingcobra/REQUEST_REPLY.queue\). Initial design option wa) s
5 417 M
(s to integrate a Kafka client into) s
5 406 M
(KingCobra kernelspace servicerequest\(\) function which upon receipt of a message from linux ker) s
5 395 M
(nel workqueue,also publishes it in turn) s
5 384 M
(to a Kafka Topic. But tight coupling of Kafka C Client into KingCobra is infeasible because of) s
5 373 M
( conflicts between userspace include header) s
5 362 M
(files of Kafka and kernelspace include header files of Linux. This results in compilation erro) s
5 351 M
(rs. Hence it looks sufficient to read the) s
5 340 M
(persisted KingCobra REQUEST_REPLY.queue by a standalone Kafka python client and publish to Kaf) s
5 329 M
(ka subscribers. This leverages analytics) s
5 318 M
(by python code on KingCobra queue.) s
5 307 M
(2.NeuronRain backend now has a support for Kafka Pub-Sub Messaging.) s
5 296 M
(3.New publisher and subscriber for Kafka \(with Python Confluent Kafka\) have been written to re) s
5 285 M
(ad data from) s
5 274 M
(Streaming_AbstractGenerator and to publish/subscribe to/from a Kafka Message Broker-Topic. Thu) s
5 263 M
(s any datasource that) s
5 252 M
(AsFer may have\(file,HBase,Cassandra,Hive etc.,\) is abstracted and published to Kafka. This als) s
5 241 M
(o unites AsFer backend) s
5 230 M
(and KingCobra disk persistence into a single Kafka storage.) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(---------------------------------------) s
5 186 M
(333. \(BUG-STABILITY ISSUES\) Boost::Python AsFer-VIRGO system call invocations kernel panic ong) s
5 175 M
(oing investigation) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(---------------------------------------) s
5 142 M
(Commits - 23 September 2016) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(---------------------------------------) s
5 109 M
(Ongoing Boost::Python AsFer-VIRGO system call invocation kernel panic analysis:) s
5 98 M
(Random crashes remain, but this time no crash logs are printed in kern.log and finally a succe) s
5 87 M
(ssful invocation happens. It could be) s
5 76 M
(same as i915 GEM DRM crash similar to earlier analyses.) s
5 54 M
(Pattern observed is as follows:) s
5 43 M
(        1. First few invocations fail with virgo_get\(\) though virgo_malloc\(\) and virgo_set\(\) s) s
5 32 M
(ucceed.) s
5 21 M
(        2. After few failures all virgo calls succeed - virgo_malloc\(\), virgo_set\(\) and virgo_) s
5 10 M
(get\(\) work without any problems.) s
_R
S
%%Page: (191) 191
%%BeginPageSetup
_S
18 36 translate
/pagenum 191 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (191) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        3. Sometimes virgo_parse_integer\(\) logs and few other logs are missing. When all logs ) s
5 681 M
(are printed, success rate is very high.) s
5 670 M
(        4. Some failing invocations have NULL parsed addresses. When there are no NULL address) s
5 659 M
( parsings, success rate is very high.) s
5 648 M
(        5. a rare coincidence was observed: Without internet connectivity crashes are very les) s
5 637 M
(s frequent. \(Intel Microcode) s
5 626 M
(updates playing spoilsport again?\).) s
5 615 M
(        6. There have been panic bugs reported on i915 GEM DRM and recent patches for busy VMA) s
5 604 M
( handling to it:) s
5 593 M
(                6.1 https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1492632) s
5 582 M
(                6.2 https://lists.freedesktop.org/archives/intel-gfx/2016-August/102160.html) s
5 571 M
(        7. Intel GPU i915 GEM DRM docs - https://01.org/linuxgraphics/gfx-docs/drm/gpu/drm-mm.) s
5 560 M
(html) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(-------------------------------------) s
5 516 M
(334. \(BUG-STABILITY ISSUES\) Boost::Python AsFer-VIRGO systemcall/drivers invocations kernel pa) s
5 505 M
(nics - new findings) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-------------------------------------) s
5 472 M
(Commits - 28 September 2016) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(-------------------------------------) s
5 439 M
(Continued analysis of kernel panics after VIRGO systemcalls/drivers code in i915 GPU driver. H) s
5 428 M
(as hithertoo unseen strange OOM panic stack dumps in GPU memory after kmalloc\(\) of 100 bytes i) s
5 417 M
(n virgo_cloud_malloc\(\) and set/get of it. Logs with panic stack dumps and High and Low Waterma) s
5 406 M
(rk) s
5 395 M
(memory details have been committed to cpp_boost_python_extensions/testlogs/.) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(-------------------------------------) s
5 351 M
(335. \(BUG-STABILITY ISSUES\) Boost::Python AsFer-VIRGO systemcall invocations panics - more fin) s
5 340 M
(dings) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-------------------------------------) s
5 307 M
(Commits - 29 September 2016) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-------------------------------------) s
5 274 M
(Kernel Panic Analysis for Boost::Python AsFer - VIRGO system calls invocations:) s
5 263 M
(This log contains hitherto unseen crash in python itself deep within kernel \(insufficient logs) s
5 252 M
(\) followed by random -32 and -107) s
5 241 M
(errors. Finally successful invocations happened. Connections between -32,-107 errors and rando) s
5 230 M
(m panics/freezes were analyzed few years) s
5 219 M
(ago \(Blocking and Non-blocking socket modes\). i915 DRM related stacks were not found in kern.l) s
5 208 M
(og. Random disappearance of) s
5 197 M
(logs is quite a big travail. Crash within python could be i915 related - cannot be confirmed w) s
5 186 M
(ithout logs. Pattern emerging is that) s
5 175 M
(of: Something wrong going on between CPU and GPU while allocating kernel memory in CPU domain ) s
5 164 M
(- kmalloc\(\) is likely allocating from) s
5 153 M
(GPU and not CPU - quite a weird bug and unheard of.) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(-------------------------------------) s
5 109 M
(336. \(BUG-STABILITY ISSUES\) VIRGO kernel panics - final findings - 30 September 2016) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-------------------------------------) s
5 76 M
(Further kernel panic investigation in VIRGO - probably the last. Logs with analysis have been ) s
5 65 M
(committed to cpp_boost_python_extensions/) s
5 54 M
(testlogs/.) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(-------------------------------------------) s
5 10 M
(337. \(THEORY\) Ramsey Theorem, Edge Labelling of Voting Graph and Multiway Majority Function - ) s
_R
S
%%Page: (192) 192
%%BeginPageSetup
_S
18 36 translate
/pagenum 192 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (192) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(5 October 2016 - related to 256,272,319) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(-------------------------------------------) s
5 659 M
(Multiway majority voting can be drawn as a directed graph. There is an edge between vertices v) s
5 648 M
(1 and v2 if v1 votes for v2 forming a) s
5 637 M
(Voting Graph with a weight >= 0.  Realworld example of this is web link graph where incoming l) s
5 626 M
(inks to a webpage are votes to it and) s
5 615 M
(outgoing links from a webpage are votes for adjacent pages. PageRank is a special case of Mult) s
5 604 M
(iway Majority Function which ranks the) s
5 593 M
(candidate webpages by a converging random walk markov chain of transition probabilities, with ) s
5 582 M
(a rider that all webpages are both voters) s
5 571 M
(and candidates making it a peer-to-peer majority voting. PageRank is thus a Non-boolean voting) s
5 560 M
( function. If web link graph is a tree) s
5 549 M
(of depth d, it is equivalent to depth-d recursive majority function.  Edge labelling of a grap) s
5 538 M
(h assigns colors to edges of a graph) s
5 527 M
(\(Edge coloring is a special case of labelling with restriction no two adjacent edges are of sa) s
5 516 M
(me color\). Voting graphs can be edge) s
5 505 M
(labelled where each color of an edge denotes a voter affiliation. Ramsey Number in combinatori) s
5 494 M
(cs states that there exists a number) s
5 483 M
(v=RN\(r,s\) for every graph of order v, there exists a clique of size r or independent set of si) s
5 472 M
(ze s. For any Voting graph Ramsey Theorem) s
5 461 M
(implies emergence of a clique or an independent set i.e voters who vote among themselves or wh) s
5 450 M
(o do not vote for each other. If the Voting) s
5 439 M
(graph is complete then Ramsey Theorem implies emergence of monochromatic cliques r \(red clique) s
5 428 M
(s\) or s \(blue cliques\).) s
5 406 M
(References:) s
5 395 M
(------------) s
5 384 M
(337.1 Ramsey Theorem Lecture Notes - http://math.mit.edu/~fox/MAT307-lecture05.pdf) s
5 373 M
(337.2 Ramsey Theorem - https://en.wikipedia.org/wiki/Ramsey%27s_theorem) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(------------------------------------------) s
5 329 M
(338. \(THEORY\) Van Der Waerden Number, Schur, Szemeredi and Ramsey Theorems, Coloring of Intege) s
5 318 M
(rs and Complement Function - Related to 323 - important draft updates to http://arxiv.org/pdf/) s
5 307 M
(1106.4102.pdf) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(------------------------------------------) s
5 274 M
(Complement Function over Integer sequences can be defined in terms of 2-colorings of the integ) s
5 263 M
(ers. Described previously in \(323\) PCP) s
5 252 M
(undecidability proof of complementation, a function f and its complement g can be construed as) s
5 241 M
( 2-colorings of the Disjoint Set Cover Union i.e) s
5 230 M
(the set of natural numbers - each color is a function - for example f is red and g is blue.) s
5 208 M
(Schur's Theorem for Ramsey coloring of integer sequences states \(quoted from http://math.mit.e) s
5 197 M
(du/~fox/MAT307-lecture05.pdf\):) s
5 175 M
(" ...  Schur's theorem) s
5 164 M
(Ramsey theory for integers is about finding monochromatic subsets with a certain arithmetic st) s
5 153 M
(ructure. It starts with the following theorem of Schur \(1916\), which turns out to be an easy a) s
5 142 M
(pplication of Ramsey's theorem for graphs.) s
5 120 M
(Theorem 3.) s
5 109 M
(For any k >= 2 , there is n > 3 such that for any k-coloring of 1,2,3,...,n, there are three i) s
5 98 M
(ntegers x, y, z of the same color such that) s
5 87 M
(x + y = z ...  ") s
5 65 M
(For complement function special case \(i.e 2-coloring of the sequences\), Schur Theorem implies ) s
5 54 M
(that there are always integers x,y and z in the image of a function or its complement obeying ) s
5 43 M
(x+y=z. Van Der Waerden Therem for coloring integers is the variant of Ramsey Theorem for graph) s
5 32 M
(s \(quoting https://en.wikipedia.org/wiki/Van_der_Waerden%27s_theorem\):) s
5 10 M
(" ...  for any given positive integers r and k, there is some number N such that if the intege) s
_R
S
%%Page: (193) 193
%%BeginPageSetup
_S
18 36 translate
/pagenum 193 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (193) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(rs {1, 2, ..., N} are colored, each with one of r different colors, then there are at least k ) s
5 681 M
(integers in arithmetic progression all of the same color.  ...  ") s
5 659 M
(Van Der Waerden Theorem for 2-colorings of natural numbers is equivalent to complementation di) s
5 648 M
(sjoint set cover of natural numbers. When this is a prime complementation special case, prime ) s
5 637 M
(integers are colored in red and composites in blue. Thus Van Der Waerden theorem for prime-com) s
5 626 M
(posite complementation implies that either set of primes or composites have arithmetic progres) s
5 615 M
(sions \(because of same coloring\) of size atleast k \(Related: Green-Tao theorem states that pri) s
5 604 M
(mes have arbitrarily long arithmetic progressions\). Upperbound for N in this 2-coloring prime ) s
5 593 M
(complementation is deriveable from [TimothyGowers] bound as: N <= 2^2^2^2^\(k+9\) for a family o) s
5 582 M
(f k sized arithmetic progressions \(also called as k-regularity\). This implies arbitrarily long) s
5 571 M
( monochromatic arithmetic progressions can be found in prime-composite complementation by choo) s
5 560 M
(sing N and k.) s
5 538 M
(Finding the arithmetic progressions for Van Der Waerden numbers have been formulated as SAT in) s
5 527 M
(stances which involves a SAT solver to search for a satisfying monochromatic arithmetic progre) s
5 516 M
(ssion. Similar SAT solving approach applies also to prime-composite bichromatic complementatio) s
5 505 M
(n for finding arithmetic progressions. This takes the notion of complementation a fine grained) s
5 494 M
( step further in the sense:  prime-composite complementation is a pattern miner in primes and ) s
5 483 M
(arithmetic progressions in prime-composite complementation are patterns within pattern.) s
5 461 M
(Concept of complement graphs have been studied in Perfect Graph Theorem and has strong resembl) s
5 450 M
(ance to function complementation. Complement graph H is obtained from a graph G by adding edge) s
5 439 M
(s to make it complete graph and removing edges in G i.e H has edges which are not in G and vic) s
5 428 M
(e versa. Function complementation is precisely a sequence corollary of Graph complementation. ) s
5 417 M
(Perfect Graph Theorem \(PGT\) states that a graph is perfect if its complement is perfect where ) s
5 406 M
(perfect graph is one in which all its induced subgraphs have chromatic number \(number of color) s
5 395 M
(s required to k-color a graph\) equal to size of maximum clique. Function complementation can b) s
5 384 M
(e translated to Graph complementation by defining a relation: There is an edge in F, f\(x1\)----) s
5 373 M
(f\(x2\) for every f\(x1\) and f\(x2\) and there is an edge in G, g\(x1\)----g\(x2\) for every g\(x1\) and ) s
5 362 M
(g\(x2\) where f and g are mutual complements. Obviously F and G have a single maximum clique wit) s
5 351 M
(h an independent set without any edge amongst them. Then it follows that order of F and G are ) s
5 340 M
(their respective Ramsey Numbers.) s
5 318 M
(A contrived independent set can be created by adding edges from constituent vertices of the ma) s
5 307 M
(ximum clique which is also maximal such that there are no edge overlaps with its complement gr) s
5 296 M
(aph - thus every graph for a function and its complement has a single maximum and maximal cliq) s
5 285 M
(ue and an independent set connected only to the clique with no edges among them i.e. Vertices ) s
5 274 M
(of the clique form vertex cover of the graph) s
5 252 M
(Any 2 graphs corresponding to 2 functions defined on same set obtained from previous construct) s
5 241 M
(ion are isomorphic. For example if a complete graph of 3 vertices \(K3\) is constructed from ele) s
5 230 M
(ments 2,3,5 for function f1 where f1 is defined as f1\(0\)=2, f1\(1\)=3 and f2\(2\)=5, the vertices ) s
5 219 M
(can be numbered by the inverse\(f1\) as 0,1,2. Similarly for a different function f2 over 2,3,5 ) s
5 208 M
(K3 obtained can be vertex numbered by the inverse\(f2\) where f2\(0\)=5, f2\(1\)=2 and f3\(2\)=3 where) s
5 197 M
( numbering is 1,2,0. This also implies two graphs for function f and its complement g are not ) s
5 186 M
(isomorphic.) s
5 164 M
(In the context of complement function graphs constructed previously, functions are mapped to m) s
5 153 M
(aximum clique subgraph and only this subgraph is vertex-renumbered which is the problem of sub) s
5 142 M
(graph isomprphism to find out if clique subgraph is isomorphic to another function clique subg) s
5 131 M
(raph.) s
5 109 M
(Szemeredi's Theorem which is the generalization of Van Der Waerden's Theorem states: For any s) s
5 98 M
(ubset A of N of natural density > 0, there are infinitely many arithmetic progressions of size) s
5 87 M
( atleast k where natural density is defined as lim {n->infinity} sup |A intersection {1,2,3,..) s
5 76 M
(.,n}|/n > 0. Green-Tao theorem applies a relative Szemeredi theorem because prime numbers have) s
5 65 M
( 0 natural density. Szemeredi's Theorem has been generalized to polynomial progressions where ) s
5 54 M
(the polynomial progression is defined as [t\(i\) = t\(i-1\) + p\(i\)] in A for some integer valued p) s
5 43 M
(olynomials p\(i\). Thus Generalized Szemeredi Theorem for Finding polynomial arithmetic progress) s
5 32 M
(ions in a subset of natural numbers is closest to finding the complement of a function when se) s
5 21 M
(t of natural numbers is 2-colored - only a subset of complement set is expressed as polynomial) s
5 10 M
(s whereas complement function requires, by definition, the complete set to be expressed as pol) s
_R
S
%%Page: (194) 194
%%BeginPageSetup
_S
18 36 translate
/pagenum 194 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (194) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ynomials \(e.g interpolation polynomials, fourier polynomials\).) s
5 670 M
(Roth Estimate for 2-coloring of integer sequences \(in references 338.4 and 338.5\) is a measure) s
5 659 M
( of order or randomness in a colored sequence and hence in a complementation by functions f an) s
5 648 M
(d g \(where each function is a color - e.g f is blue and g is red\) over a universal set. If ari) s
5 637 M
(thmetic progressions are thought of as all possible "sampled points" on 2-colored integers \(fu) s
5 626 M
(nctions f and g\) i.e an approximation of f and g,then Roth estimate is a measure of difference) s
5 615 M
( in size of f\(x\) and g\(x\) with probability equal to natural density of arithmetic progression ) s
5 604 M
(chosen in minimax\(\) step. This is because natural density is a fraction of size of set of elem) s
5 593 M
(ents of an arithmetic progression on natural numbers - in other words, natural density is the ) s
5 582 M
(size of a sample of f and g. From Roth estimate bounds, |{f\(x\)}| - |{g\(x\)}| is approximately N) s
5 571 M
(^\(1/4+epsilon\) with probability equal to natural density of arithmetic progression in minimax\() s
5 560 M
(\) step and |{f\(x\)}| + |{g\(x\)}| is N with probability 1. This implies:) s
5 549 M
(        |{f\(x\)}| = {N+N^\(1/4+epsilon\)} / 2) s
5 538 M
(        |{g\(x\)}| = {N-N^\(1/4+epsilon\)} / 2) s
5 527 M
(        with probability equal to natural density of arithmetic progression in minimax\(\)) s
5 516 M
(Previous approximation with sampling relates size of complement functions,coloring and arithme) s
5 505 M
(tic progressions by Roth estimate.) s
5 483 M
(Complement Graphs F and G constructed previously for function f and its complement g have set ) s
5 472 M
(of all values of inverse\(f\) and inverse\(g\) as the respective vertex labels in their maximum mo) s
5 461 M
(nochromatic cliques. This maps a 2-colored integer sequence with each color representing a fun) s
5 450 M
(ction to 2 graphs, mutually complement, each with a maximal monochromatic clique for respectiv) s
5 439 M
(e function \(f or g\) and an independent set of other color. This construction adds one more dim) s
5 428 M
(ension to the coloring problem: numbering of vertices for either color and subgraph isomorphis) s
5 417 M
(m. From Van Der Waerden and later newer theorems, this implies numbered vertices in F and G ha) s
5 406 M
(ve atleast one monochromatic arithmetic progression.) s
5 384 M
(Another important question is: Can a complement function polynomial be constructed from consti) s
5 373 M
(tuent monochromatic arithmetic progressions \(or\) Is the complement function polynomial interpo) s
5 362 M
(lated by Lagrange Theorem or Fourier Analysis a composition of constituent arithmetic progress) s
5 351 M
(ions? This is answered in reference 338.11 - Interpolation Polynomial for n points can be appr) s
5 340 M
(oximated from low discrepancy arithmetic progressions. References 338.12 and 338.13 are relate) s
5 329 M
(d to Polynomial Sequences of length n \(P\(n\) - Polynomial Points\) represented by rings of polyn) s
5 318 M
(omials F\(x\) with integer coefficients in Zn and for each sequence S\(k\)=\(a1,a2,...,an\) there ex) s
5 307 M
(ists a polynomial f\(x\) in F\(x\) such that f\(i\)=ai,i=1,2,3,...,n \(f\(x\) is a Lagrange Interpolati) s
5 296 M
(on Polynomial\). For example, monochromatic arithmetic progressions from Van Der Waerden and ot) s
5 285 M
(her theorems are polynomial sequences represented by arithmetic progression polynomial points.) s
5 274 M
( Thus Complement Function Polynomial interpolated \(Fourier or Lagrange\) from maximal monochrom) s
5 263 M
(atic subset of 2-colored integer sequence is a Polynomial point and corresponding maximum mono) s
5 252 M
(chromatic sequence subset is Polynomial Sequence.) s
5 230 M
(Let f1,f2,f3,... be functions and g1,g2,g3,... be their respective complements. They are repre) s
5 219 M
(sented as graphs constructed previously as F1,F2,F3,....\(each with a monochromatic red clique ) s
5 208 M
(and independent set of blue color\) and G1,G2,G3,... \(each with a monochromatic blue clique and) s
5 197 M
( independent set of red color\). All fi\(s\) have isomorphic red clique subgraphs and gi\(s\) have ) s
5 186 M
(isomorphic blue subgraphs. Vertices are numbered with fiinverse\(\) and giinverse\(\) labels. Vert) s
5 175 M
(ices of cliques in fi\(s\) and gi\(s\) have monochromatic arithmetic progressions in fi\(vertexlabe) s
5 164 M
(l\) and gi\(vertexlabel\).For each arithmetic progression APj in monochromatic clique in Fk corre) s
5 153 M
(sponding to fk\(\),fkinverse\(APj\) is the preimage of APj. Define AP1,AP2,AP3,AP4,AP5,... as the ) s
5 142 M
(monochromatic arithmetic progressions in a monochromatic clique \(vertices corresponding to som) s
5 131 M
(e function fk\(\)\). Union of APj is a subset of fk\(\). Define C\(x\) as the interpolation polynomia) s
5 120 M
(l of the Union of APj. C\(x\) is an approximation of fk\(\). Accuracy of approximation is determin) s
5 109 M
(ed by the density ratio |C\(x\)|/|fk\(\)|.When Union of APj covers all points in sequence for gene) s
5 98 M
(rating function fk\(\), then density is 1 because C\(x\) is 100% correct approximation of fk\(\) - C) s
5 87 M
(\(x\) = fk\(\). A naive construction of C\(x\) from APj is done by parallel mergesort of: AP1,AP2,AP) s
5 76 M
(3,AP4,AP5,...,APn to get a total ordering. Interpolation on the merged splintered arithmetic p) s
5 65 M
(rogressions scattered over the sequence gives an approximation C\(x\) of fk\(\). This construction) s
5 54 M
( is in NC. Let Interpolation polynomial for the sequence be P\(x\)=fk\(\).) s
5 43 M
(There are 2 possibilities of arithmetic progressions - APs have both colors \(elements from bot) s
5 32 M
(h function and its complement\) or APs are all monochromatic \(elements from a function or its c) s
5 21 M
(omplement\).For example the sequence 1,2,3,4,5,.... of natural numbers have two arithmetic prog) s
5 10 M
(ressions:) s
_R
S
%%Page: (195) 195
%%BeginPageSetup
_S
18 36 translate
/pagenum 195 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (195) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        AP1 = 2x+1 => 1,3,5,7,9,.....) s
5 681 M
(        AP2 = 3x+1 => 1,4,7,11,14,....) s
5 670 M
(Merging them gives 1,3,4,5,7,9,10,11,13.... which is a subset of 1,2,3,4,5,....) s
5 659 M
(----------------------------) s
5 648 M
(Scenario1: Monochromatic APs) s
5 637 M
(----------------------------) s
5 626 M
(Approximation polynomial for sequence interpolated from constituent monochromatic APs mergesor) s
5 615 M
(ted = C\(x\). Let AP1\(x\),AP2\(x\),AP3\(x\),...,APn\(x\) be the arithmetic progression polynomials. Let) s
5 604 M
( C\(x\) = E\(x\)AP1\(x\)AP2\(x\)AP3\(x\)...APn\(x\) i.e arithmetic progressions are factors of C\(x\) with E) s
5 593 M
(\(x\) as quotient over some polynomial ring F[x]. C\(x\) approximates a function fk\(\) or its compl) s
5 582 M
(ement gk\(\). This is described previously.) s
5 571 M
(-----------------------------) s
5 560 M
(Scenario2: Multichromatic APs) s
5 549 M
(-----------------------------) s
5 538 M
(When APs have elements of both colors \(from both functions fk\(\) and gk\(\)\), parallel mergesort ) s
5 527 M
(of APs and interpolation by polynomial C\(x\) cannot approximate either fk\(\) or gk\(\) because APs) s
5 516 M
( consist of both colors. This is where minimum discrepancy plays its part - when discrepancy i) s
5 505 M
(s low AP has elements from both colors or functions in almost equal number. Therefore arithmet) s
5 494 M
(ic progression samples both functions with least error and interpolation succeeds with high ac) s
5 483 M
(curacy - this is an intuitive explanation for 338.11.) s
5 461 M
(References:) s
5 450 M
(----------) s
5 439 M
(338.1 Bound for Van Der Waerden Numbers - https://www.emis.de/journals/INTEGERS/papers/a20int2) s
5 428 M
(005/a20int2005.pdf) s
5 417 M
(338.2 Exact Ramsey Theory and Van Der Waerden Numbers by SAT-solvers - [OliverKullmann] - http) s
5 406 M
(s://arxiv.org/pdf/1004.0653v2.pdf) s
5 395 M
(338.3 Erdos-Turan Conjecture - https://en.wikipedia.org/wiki/Erd%C5%91s_conjecture_on_arithmet) s
5 384 M
(ic_progressions - If sum of reciprocals of) s
5 373 M
(elements of a set of positive integers diverges, then the set contains arbitrarily long arithm) s
5 362 M
(etic progressions) s
5 351 M
(338.4 Roth Estimate - http://matwbn.icm.edu.pl/ksiazki/aa/aa9/aa9125.pdf - Consider a two colo) s
5 340 M
(ring of set of natural numbers N in red and blue. For all arithmetic progressions in the set N) s
5 329 M
( let Discrepancy be the difference between number of red and blue colored integers. Maximum of) s
5 318 M
( Discrepancy for all arithmetic progressions be Maximum\(Discrepancy\). Minimum\(Maximum\(Discrepa) s
5 307 M
(ncy\)\) for all 2-colorings is the Roth Estimate lowerbounded by N^1/4.) s
5 296 M
(338.5 Roth Estimate is nearly sharp - Beck, J. Combinatorica \(1981\) 1: 319. doi:10.1007/BF0257) s
5 285 M
(9452 - http://link.springer.com/article/10.1007/BF02579452 - Previous Roth Estimate is upperbo) s
5 274 M
(unded by N^\(1/4+epsilon\).) s
5 263 M
(338.6 Discrepancy in Arithmetic Progressions - [MatousekSpencer] - Roth estimate is best possi) s
5 252 M
(ble - ROTH\(N\) <= N^1/4 - http://www.ams.org/journals/jams/1996-9-01/S0894-0347-96-00175-0/S089) s
5 241 M
(4-0347-96-00175-0.pdf - This paper has some interesting remarks - "...In words, we show the ex) s
5 230 M
(istence of a two-coloring \317\\207 of the first n integers so that all arithmetic progressions A ) s
5 219 M
(have imbalance |\317\\207\(A\)| \342\\211\244 Cn1/4. We remark that the proof does not give a construction ) s
5 208 M
(of \317\\207 in the usual sense and is indeed not satisfactory from an algorithmic point of view. ) s
5 197 M
(The methods of \302\2472 \(see comments in [5]\) are such that we have not been able to obtain an algo) s
5 186 M
(rithm that would output this coloring \317\\207 in time polynomial in n. Our proof involves varian) s
5 175 M
(ts of the probabilistic method; we give [1] as a general reference ..." which is about algorit) s
5 164 M
(hm for constructing a coloring for a given discrepancy - coloring algorithm is nothing but con) s
5 153 M
(struction of a function and its complement for a finite set of integers. Thus notions of integ) s
5 142 M
(er sequence coloring and complement function are two sides of a coin with respect to integer v) s
5 131 M
(alued functions and complements. Undecidability of Infinite complementation from 19,24,319 and) s
5 120 M
( 323 PCP based proof also implies "Infinite Integer Sequence Coloring is Undecidable" i.e ther) s
5 109 M
(e is no coloring algorithm for 2-coloring of infinite integer sequences.) s
5 98 M
(338.7 Discrepancy Minimization by Walking on Edges - [BansalLovettMeka] - https://arxiv.org/pd) s
5 87 M
(f/1203.5747v2.pdf - This proves Spencer's Theorem which states that for any system of subsets ) s
5 76 M
(S of universal set V of size both N there always exists a 2-coloring with minimax\(discrepancy\)) s
5 65 M
( < 6*sqrt\(N\) also known as Six Standard Deviation and gives a randomized polytime algorithm fo) s
5 54 M
(r constructing such a 2-coloring mentioned non-constructively in 338.6. System of subsets can ) s
5 43 M
(be set of arithmetic progressions. This is a special case of function-complement \(2-coloring\) ) s
5 32 M
(construction subject to minimax discrepancy criterion.) s
5 21 M
(338.8 Fourier Interpolation of n data points with polynomial of degree m - http://www.muskingu) s
5 10 M
(m.edu/~rdaquila/m350/fourier-interdn10-1.ppt) s
_R
S
%%Page: (196) 196
%%BeginPageSetup
_S
18 36 translate
/pagenum 196 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (196) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(338.9 Fourier Analysis and Szemeredi's Theorem - Roth's Argument - Documenta Mathematica ICM E) s
5 681 M
(xtra Volume 1998 - http://www.mathunion.org/ICM/ICM1998.1/Main/Fields/Gowers.MAN.ocr.pdf - Fou) s
5 670 M
(rier Transform of set of integers mod N \(for prime N\) and deriving the arithmetic progressions) s
5 659 M
( of length 3 from inverse Fourier Transform.) s
5 648 M
(338.10 Hales-Jewett Theorem - [MichelleLee] - http://www.math.uchicago.edu/~may/VIGRE/VIGRE200) s
5 637 M
(9/REUPapers/Lee.pdf - generalization of Van Der Waerden Theorem to higher dimensions \(n-cubes ) s
5 626 M
(and n-lines\) - any k-coloring of n-dimensional cube \(or a matrix of points\) has monochromatic ) s
5 615 M
(line\(with fixed coordinates for some dimensions and varying for others\)) s
5 604 M
(338.11 Polynomial Interpolation from Low Discrepancy Arithmetic Progressions - [The Discrepanc) s
5 593 M
(y Method: Randomness and Complexity - BernardChazelle] - https://books.google.co.in/books?id=d) s
5 582 M
(mOPmEh6LdYC&pg=PA338&lpg=PA338&dq=polynomial+interpolation+arithmetic+progression&source=bl&ot) s
5 571 M
(s=CDNgOUBnua&sig=pxKMQx9ciY7_d4GcOkFwnCrOUEU&hl=en&sa=X&ved=0ahUKEwiSqOv0ovPPAhVMpo8KHZsbA3wQ6) s
5 560 M
(AEIPzAE#v=onepage&q=polynomial%20interpolation%20arithmetic%20progression&f=false - Page 338 a) s
5 549 M
(nd Figure 9.4 in Page 342 illustrating the distribution of Fourier Coefficients over a circle ) s
5 538 M
(in Discrete Fourier Transform of a subset of Z16 \(also explained in 338.8\).) s
5 527 M
(338.12 Sequences Generated By Polynomials - [CorneliusSchultz] - https://www.researchgate.net/) s
5 516 M
(profile/E_Cornelius_Jr/publication/258155515_Sequences_Generated_by_Polynomials/links/0deec527) s
5 505 M
(2541943938000000.pdf) s
5 494 M
(338.13 Polynomial Points, Green-Tao Theorem and Arithmetic Progressions - [CorneliusSchultz] -) s
5 483 M
( https://cs.uwaterloo.ca/journals/JIS/VOL10/Schultz/schultz14.pdf) s
5 472 M
(338.14 Recent Advanced Theorems in k-coloring of integer sequences - http://people.math.sc.edu) s
5 461 M
(/lu/talks/ap4.pdf - the set [n] is randomly r-colored and bounds for number of monochromatic k) s
5 450 M
(-APs and K-APs in [n] are mentioned where k is common difference and K is Van Der Waerden numb) s
5 439 M
(er.) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(--------------------------------) s
5 395 M
(339. \(FEATURE-DONE\) Boyer-Moore Streaming Majority Algorithm - Commits - 7 October 2016) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(--------------------------------) s
5 362 M
(This commit implements Boyer-Moore algorithm for finding Majority element in Streaming Sequenc) s
5 351 M
(es. It uses the Streaming Generator) s
5 340 M
(Abstraction for input streaming datasource. Logs have been committed to python-src/testlogs/) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(--------------------------------) s
5 296 M
(340. \(FEATURE-DONE\) GSpan Graph Substructure Mining Algorithm Implementation - Commits - 13 Oc) s
5 285 M
(tober 2016 and 14 October 2016) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(--------------------------------) s
5 252 M
(1.Graph Substructure Mining GSpan algorithm implementation with logs in testlogs/) s
5 241 M
(2.This code requires the Graph vertices to be labelled by unique integers) s
5 230 M
(3.Integer labelling of vertices makes it easier for DFSCode hashes to be generated uniquely.) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(-------------------------------) s
5 186 M
(341. \(THEORY\) Graph Mining Algorithms and Recursive Gloss Overlap Graph for text documents - D) s
5 175 M
(ocument Similarity) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(-------------------------------) s
5 142 M
(Recursive Gloss Overlap Algorithm implementations in python-src/InterviewAlgorithm and its Spa) s
5 131 M
(rk Cloud Variants generate graphs) s
5 120 M
(with word labels from Text Documents. GSpan algorithm implemented in \(340\) mines subgraphs and) s
5 109 M
( edges common across graph dataset.) s
5 98 M
(This allows extraction of common patterns amongst text document graphs and thus is an unsuperv) s
5 87 M
(ised similarity clustering for) s
5 76 M
(text analytics. GSpan has provisions for assigning minimum support for filtering patterns whic) s
5 65 M
(h amounts to finding prominent) s
5 54 M
(keywords in recursive gloss overlap graphs.) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(-------------------------------) s
5 10 M
(342. \(FEATURE-DONE\) Graph Mining Recursive Gloss Overlap Graph for text documents - Document S) s
_R
S
%%Page: (197) 197
%%BeginPageSetup
_S
18 36 translate
/pagenum 197 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (197) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(imilarity) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(-------------------------------) s
5 659 M
(Commits - 17 October 2016) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(-------------------------------) s
5 626 M
(1.Code changes have been done to choose between numeric and word labelling of Graph vertices i) s
5 615 M
(n GSpan GraphMining implementation.) s
5 604 M
(2.New file GraphMining_RecursiveGlossOverlap.py has been added to JSON dump the Recursive Glos) s
5 593 M
(s Overlap graph of a text document) s
5 582 M
(3.New directory InterviewAlgorithm/graphmining has been created which contains the numeric and) s
5 571 M
( word labelled Recusive Gloss Overlap) s
5 560 M
(graphs of 5 example text documents in topic class "Chennai Metropolitan Area Expansion") s
5 549 M
(4.logs for commong edges mined between two Recursive Gloss Overlap document graphs has been co) s
5 538 M
(mmitted in testlogs/) s
5 527 M
(5.Spidered web text has been updated) s
5 516 M
(6.GraphMining_RecursiveGlossOverlap.py JSON dumps the RGO edges into a text file and GraphMini) s
5 505 M
(ng_GSpan.py JSON loads them from) s
5 494 M
(InterviewAlgorithm/graphmining/) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(--------------------------------) s
5 450 M
(343. \(THEORY\) Streaming Majority and 2-Coloring\(Complement Functions\) - related to 14.16 and 1) s
5 439 M
(9,24,323,338,339 - important draft) s
5 428 M
(updates to http://arxiv.org/pdf/1106.4102.pdf - 1 November 2016) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(--------------------------------) s
5 395 M
(In simple 2 candidate majority voting done on stream of votes, a 2-colored sequence of votes b) s
5 384 M
(y voters is generated. This is) s
5 373 M
(already mentioned in infinite majority \(Erdos Discrepancy Theorem\) - 14.16.Each color symboliz) s
5 362 M
(es a candidate voted. This partitions) s
5 351 M
(the sequence of votes into 2 monochromatic sets. Obviously, if the voters are uniquely identif) s
5 340 M
(ied by a sequence number, all sequence coloring) s
5 329 M
(theorems imply there are monochromatic and multichromatic arithmetic progressions in voter uni) s
5 318 M
(que identities. Boyer-Moore algorithm) s
5 307 M
(computes streaming majority \(implemented in 339\),) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(--------------------------------) s
5 263 M
(344. \(BUG-STABILITY ISSUES\) AsFer-VIRGO Boost::Python system calls invocations analysis - comm) s
5 252 M
(its - 4 November 2016) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(--------------------------------) s
5 219 M
(Some resumed analysis of AsFer-VIRGO boost::python invocations of VIRGO memory system calls wh) s
5 208 M
(ich were stopped few months ago.) s
5 197 M
(The i915 DRM GEM error is highly reproducible pointing something unruly about it. No logical r) s
5 186 M
(eason can be attributed to this except) s
5 175 M
(some kernel sync issues.  This further confirms that there is nothing wrong with VIRGO layer o) s
5 164 M
(f Linux kernel and Linux kernel deep) s
5 153 M
(within inherently has a chronic problem.) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(--------------------------------) s
5 109 M
(345. \(THEORY\) Polynomial Reconstruction \(PR\) Problem, Error Correcting Codes and 2-Coloring/Co) s
5 98 M
(mplement Functions - important) s
5 87 M
(draft updates to http://arxiv.org/pdf/1106.4102.pdf - 10 November 2016 and 17 November 2016) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(--------------------------------) s
5 54 M
(Polynomial Reconstruction Problem states that:) s
5 43 M
(Given a set of n points \(x1,y1\),\(x2,y2\),...,\(xn,yn\) recover all polynomials p of degree less t) s
5 32 M
(han k such that pi\(xi\) != yi) s
5 21 M
(for maximum of i points in {1,2,3,...,n}. In other words PRP is a curve-fitting interpolation ) s
5 10 M
(problem and is related to) s
_R
S
%%Page: (198) 198
%%BeginPageSetup
_S
18 36 translate
/pagenum 198 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (198) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Error correcting problems like List Decoding \(list of polynomials approximating a message one ) s
5 681 M
(of which is correct\),Reed-Solomon Codes.) s
5 659 M
(2-Coloring scheme algorithms and Complement Function constructions are alternative spectacles ) s
5 648 M
(to view the Polynomial Reconstruction) s
5 637 M
(Problem i.e Complement Function and 2-Coloring are special settings of Polynomial Reconstructi) s
5 626 M
(on with exact curve fitting.) s
5 604 M
(References:) s
5 593 M
(----------) s
5 582 M
(345.1 Polynomial Reconstruction and Cryptanalysis - Berlekamp-Welch, Guruswami-Sudan algorithm) s
5 571 M
(s - https://eprint.iacr.org/2004/217.pdf) s
5 560 M
(345.2 Hardness of Constructing Multivariate Polynomials over Finite Fields - [ParikshitGopalan) s
5 549 M
(,SubhashKhot,RishiSaket] - https://www.cs.nyu.edu/~khot/papers/polynomial.pdf - If there is a ) s
5 538 M
(polynomial P\(X1,X2,...,Xn\) such that P\(xi\) = f\(xi\) for all points \(xi,f\(xi\)\), it can be found ) s
5 527 M
(by interpolation. This is exact agreement. Can we find a polynomial that agrees on most points) s
5 516 M
(? This approximation is proved to be NP-hard.) s
5 505 M
(345.3 Lagrange Interpolation and Berlekamp-Welch PRP algorithm - [SadhkanRuma] - https://www.a) s
5 494 M
(cademia.edu/2756695/Evaluation_of_Polynomial_Reconstruction_Problem_using_Lagrange_Interpolati) s
5 483 M
(on_Method?auto=download) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(-------------------------------) s
5 439 M
(346. \(THEORY\) Data written in electronic storage devices \(e.g CD/DVD\) and 2-Coloring/Complemen) s
5 428 M
(t Functions - important) s
5 417 M
(draft updates to http://arxiv.org/pdf/1106.4102.pdf - 24 November 2016 and 28 November 2016) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(-------------------------------) s
5 384 M
(CD/DVD storage devices contain binary data burnt on concentric cylindrical tracks. A radial li) s
5 373 M
(ne from central bull's eye of the circular storage to outer rim crosscuts the data to form a b) s
5 362 M
(inary string of length n where n is the radius of circular storage. This radial line sweeping ) s
5 351 M
(the) s
5 340 M
(complete circle in a scan covers 2^n possible binary strings. In the best case all 2^n words a) s
5 329 M
(re distinct. Total Number of 1s or 0s in these) s
5 318 M
(2^n words are in fibonacci sequence:) s
5 307 M
(        f\(n\) = 2f\(n-1\) + 2^\(n-1\)) s
5 296 M
(with f\(0\)=0 and f\(1\)=1. In 2-coloring parlance, DVD is 2-colored with 1\(red\) and 0\(blue\) where) s
5 285 M
( number of monochromatic bits is lower) s
5 274 M
(bounded by:) s
5 263 M
(        f\(n\) = 2f\(n-1\) + 2^\(n-1\) out of minimum n*2^n possible bits on the storage. Thus any d) s
5 252 M
(ata written to storage ultimately gets translated into a 2-coloring complement function scheme) s
5 241 M
(.For example, device with 3 concentric tracks has 3*2^3=24 minimum possible bit positions and:) s
5 230 M
(        f\(3\) = 2f\(2\) + 2^2 = 2\(2f\(1\) + 2\) + 2^2 = 8 + 4 = 12 minimum possible monochromatic bi) s
5 219 M
(t positions) s
5 208 M
(This has some applications of Hales-Jewitt Theorem for multidimensional 2-coloring - storage d) s
5 197 M
(evice always has a monochromatic k-line.\(where k is dimension and k-line is a hyperline. 2-lin) s
5 186 M
(e is a square and 3-line is a cube\). As a simple example for n=2:) s
5 175 M
(        00) s
5 164 M
(        01) s
5 153 M
(        10) s
5 142 M
(        11) s
5 131 M
(are minimum possible distinct binary words swept by a radial scan of the circle and there are ) s
5 120 M
(f\(2\)=2f\(1\) + 2 = 4 monochromatic bits spread across out of 2*2^2=8 possible bits in 4 binary s) s
5 109 M
(trings. A crucial insight is that any high level data stored has an order in low level 2-color) s
5 98 M
(ing or Complement Function scheme \(Monochromatic APs etc.,\) though high level data is usually ) s
5 87 M
(alphanumeric and appears random. A conjectural question is: Does the low level 2-coloring bina) s
5 76 M
(ry order imply high level non-binary order and are they functionally related?) s
5 54 M
(The previous question has been answered in 2.10.  There could be \\/ shaped gaps in circular ar) s
5 43 M
(rangement of 2^n binary word radial lines. These gaps could be resolved by recursive applicati) s
5 32 M
(on of f\(n\) for all lengths < n. Let this new function be g\(n\) defined as:) s
5 21 M
(        g\(n\) = f\(n\) + f\(n-1\) + f\(n-2\) + ... + f\(1\) + f\(0\)) s
5 10 M
(Thus g\(n\) is the tightest bound for number of 1s and 0s. Prefix "minimum" has been added in th) s
_R
S
%%Page: (199) 199
%%BeginPageSetup
_S
18 36 translate
/pagenum 199 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (199) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(is bound because repetitions of some binary words in radial line during circular scan have bee) s
5 681 M
(n ignored and hence a lowerbound. Total number of bit positions is k*2*pi*\(1+2+3+...+n\) = k*2*) s
5 670 M
(pi*n\(n+1\)/2 summing up all concentric tracks for some constant k. Lowerbound g\(n\) for 1s and 0) s
5 659 M
(s implies a unique distribution of all binary word patterns and any number above this lowerbou) s
5 648 M
(nd implies predominance and emergence of a binary pattern.) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(-------) s
5 604 M
(347. \(FEATURE-DONE\) NeuronRain C++-Python System calls invocation - Commits - 29 November 2016) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-------) s
5 571 M
(1. Further analysis of NeuronRain AsFer-VIRGO boost::python system calls invocation - there ha) s
5 560 M
(s been) s
5 549 M
(an erratic -32 and -107 errors) s
5 538 M
(2. But VIRGO system calls work without problems - malloc,set and get work as expected) s
5 527 M
(3. There is a later panic outside VIRGO code but logs have not been found.) s
5 516 M
(4. Logs for this have been added in testlogs/) s
5 505 M
(5. boost C++ code has been rebuilt.) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(-------------------------------------------------) s
5 461 M
(348. \(THEORY\) Kleinberg Lattice , Random Graph Ontologies, Bose-Einstein model and Recursive G) s
5 450 M
(loss Overlap algorithm for ranking documents by intrinsic merit - 3 December 2016 and 20 Decem) s
5 439 M
(ber 2016 - related to 202, 229 and 230) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(-------------------------------------------------) s
5 406 M
(Result of r=2 in [Kleinberg - 202.19] is an equilibrium state. Random shortcut edges are creat) s
5 395 M
(ed with some probabilities between any two nodes n1 and n2 on a lattice of all possible nodes.) s
5 384 M
( Thus there are 2 distance measures between any two nodes on a lattice - 1\) lattice distance w) s
5 373 M
(hich is the usual manhattan distance step function - this is circuitous. 2\) random edge distan) s
5 362 M
(ce between pair of vertices n1 and n2 on the lattice which is shortcut. The random edge has th) s
5 351 M
(e probability as a function of lattice distance:) s
5 340 M
(        random edge probability\(d\(n1,n2\)\) = |l\(n1,n2\)|^\(-r\) where l is the lattice distance) s
5 329 M
(When r is less than 2 or close to zero, random edges are as numerous as lattice edges \(random ) s
5 318 M
(edges exist in abundance but they are no better than lattice paths\) and when r is more than 2,) s
5 307 M
( random edges are rarer \(random edges fade, only lattice paths are possible and no shortcut ra) s
5 296 M
(ndom paths\) and it is difficult to find a path for message to be delivered from one extreme to) s
5 285 M
( the other. Steady state converges and these two conflicts are resolved when r=2 and it is opt) s
5 274 M
(imum to find a path between two nodes.) s
5 252 M
(Above small world phenomenon can be mapped to ontology of linguistic concepts/words. Let set o) s
5 241 M
(f all concepts/words form a lattice. Set of random edges with probability embeds a random grap) s
5 230 M
(h on some or all of these lattice points and thus is a probabilistic ontology - probability de) s
5 219 M
(pends on distance measure of 2 concepts. Document definition graph obtained from this ontology) s
5 208 M
( with recursive gloss overlap is optimal \(easy to find path between concepts in a document and) s
5 197 M
( grasp meaning\) when it has r=2 by previous lattice-randomedge relation. Usual distance measur) s
5 186 M
(es are based on least common ancestor principle - node which is conceptually common to two oth) s
5 175 M
(er nodes creates a path. Lower the distance, greater the meaningfulness. Reference 202.20 adds) s
5 164 M
( disambiguation to finding distance by aligning and intersecting all possible senses of two co) s
5 153 M
(ncepts with a random walk and doing argmax\(\) to find distance. Probabilistic random edge ontol) s
5 142 M
(ogy created on a lattice of concepts provides dynamism in text analytics.) s
5 120 M
(Kleinberg criterion of r=2 is an alternative way to assess the meaningfulness of a document. D) s
5 109 M
(ocument definition graph with r=2 should theoretically have easy paths between concepts and av) s
5 98 M
(erage short distance measures across nodes and hence has high intrinsic merit. From the above ) s
5 87 M
(relation:) s
5 76 M
(        r * log\(l\(n1,n2\)\) = log\(1/d\(n1,n2\)\)) s
5 65 M
(When r=2:) s
5 54 M
(        2log\(l\(n1,n2\)\) = log\(1/d\(n1,n2\)\)) s
5 43 M
(which stipulates conditions for high intrinsic merit for a document in terms of lattice distan) s
5 32 M
(ce and random edge probability between two concepts n1 and n2.) s
5 10 M
(Bose-Einstein model for networks relates fitness of a vertex \(ability to attract edges\) in a g) s
_R
S
%%Page: (200) 200
%%BeginPageSetup
_S
18 36 translate
/pagenum 200 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (200) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(raph and Bose-Einstein condensation. Kleinberg's small-world graph has average clustering coef) s
5 681 M
(ficient significantly higher than a random graph and mean shortest distance approximately same) s
5 670 M
( as random graph \(on same vertices\). Here clustering coefficient is the ratio of number of edg) s
5 659 M
(es to neighbours and number of all possible edges to neighbours. Kleinberg's small-world graph) s
5 648 M
(, Bose-Einstein condensation in network graphs and Intrinsic meaningfulness merit in graph rep) s
5 637 M
(resentation of documents are closely related because all three are multiple views of "meaningf) s
5 626 M
(ulness" or "connectedness" in a document.) s
5 604 M
(References:) s
5 593 M
(----------) s
5 582 M
(348.1 Bose-Einstein Model and Complex Networks - https://en.wikipedia.org/wiki/Bose%E2%80%93Ei) s
5 571 M
(nstein_condensation_\(network_theory\)) s
5 560 M
(348.2 Golden mean as a clock cycle of brain waves - http://www.v-weiss.de/chaos.html - "...In ) s
5 549 M
(2001 Bianconi and Barab\303\241si [15] discovered that not only neural networks but all evolving net) s
5 538 M
(works, including the World Wide Web and business networks, can be mapped into an equilibrium B) s
5 527 M
(ose gas, where nodes correspond to energy levels and links represent particles. Still unaware ) s
5 516 M
(of the research by Pascual-Leone, for these network researchers this correspondence between ne) s
5 505 M
(twork dynamics and a Bose gas was highly unexpected [16]...") s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(---------------------------------------------) s
5 461 M
(349. \(THEORY\) Randomness, Quantum Machine Learning and a Schroedinger Cat simulation of learni) s
5 450 M
(ng patterns in BigData - 23 December 2016) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(---------------------------------------------) s
5 417 M
(Caution: This section postulates a drastically new theory mapping quantum mechanics to learnin) s
5 406 M
(g patterns in bigdata which is subject to errors.) s
5 384 M
(State of a subatomic particle is defined by a wave function on Hilbert Space \(Complex State Ve) s
5 373 M
(ctor Space\). In Dirac notation wave function for particle p is, |p> = a1|s1> + a2|s2> + ... + ) s
5 362 M
(an|sn> is state of a particle where each ai is a complex number named amplitude of particle at) s
5 351 M
( state si - particle's state is a linear superposition of all states si with amplitude ai. Dir) s
5 340 M
(ac delta function is fourier transform of Schroedinger wave equation of a particle. State vect) s
5 329 M
(or |p> is a linear superposition of all possible alternatives \(or\) Hilbert space dimensions th) s
5 318 M
(at a particle can exist with respective amplitude for each dimension. Set of states form ortho) s
5 307 M
(normal basis for this Hilbert space. Wave function state vector collapses to one of the states) s
5 296 M
( to give a classical probability for the state estimated by square of amplitude for the state ) s
5 285 M
(dimension. For example, in Young's Double Slit experiment a single photon acts as a wave by du) s
5 274 M
(ality and interferes with itself by travelling through both slits to establish an interference) s
5 263 M
( pattern with state vector wavefunction amplitudes which collapses to a classical probability ) s
5 252 M
(when one of the slits is closed. Schroedinger's  cat paradox is an imaginary thought experimen) s
5 241 M
(t \(not possible in reality\) where a black box with cat and a radioactive material triggered by) s
5 230 M
( a particle's spin exists in both states dead and alive simultaneously when viewed from outsid) s
5 219 M
(e with amplitude 1/sqrt\(2\): |state of cat> =  1/sqrt\(2\) \( |dead> + |alive> \). Squaring amplitu) s
5 208 M
(de 1/sqrt\(2\) gives classical probability 1/2 for each state. There are two observers - one wit) s
5 197 M
(hin the black box and one outside of it. For observer within black box, particle spin is measu) s
5 186 M
(rable and wavefunction collapses to one of the states "dead or alive" while for observer outsi) s
5 175 M
(de black box there is no way for such collapse to occur and state is a superposition "dead and) s
5 164 M
( alive".) s
5 142 M
(In terms of BigData analytics, learning a variable in a blackbox is reducible to Schroedinger') s
5 131 M
(s Cat paradox. Assuming there exists a Pseudorandom Generator with Quantum Mechanical source, ) s
5 120 M
(Cat is an algorithm with access to randomness - e.g Double Slit experiment, radioactive decay ) s
5 109 M
(etc., and chooses one of the alternative outputs - output1, output2, ..., outputn - based on q) s
5 98 M
(uantum mechanical measurement \(e.g spin\) with "if...else" branches. This randomized algorithm ) s
5 87 M
(can be thought of as a subroutine F. Observer1 which measures output of F is another subroutin) s
5 76 M
(e G. Thus both F and G together constitute the blackbox. Observer2 outside the blackbox is ano) s
5 65 M
(ther subroutine H. Only G measures output of F and state vector collapses to one of the altern) s
5 54 M
(ative outputs. But for H, F+G is impervious and state vector remains as: a1|output1> + a2|outp) s
5 43 M
(ut2> +...+ an|outputn> with complex amplitudes ai. This extends the notion of Pseudorandomness) s
5 32 M
( in traditional complexity literature to a more generic state vector with complex amplitudes o) s
5 21 M
(ver a Hilbert space of dimensions\(alternatives\) - here algorithm is itself a "particle" with a) s
5 10 M
( superposed state of outputs.) s
_R
S
%%Page: (201) 201
%%BeginPageSetup
_S
18 36 translate
/pagenum 201 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (201) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(Any BigData set with apparent randomness can be construed as a series of outputs over time gen) s
5 670 M
(erated by a randomized algorithm \(or\) an algorithm with access to randomness including quantum) s
5 659 M
( mechanical randomness \(For example, streamed datasets like stock market tickers\) i.e the algo) s
5 648 M
(rithm F. Subroutines F+G together create a BigData set from randomness. When viewed from H, th) s
5 637 M
(e blackbox F+G has a state vector wavefunction evolving over time: W\(t\) = a1|output1> + a2|out) s
5 626 M
(put2> + ... + an|outputn>. Any machine learning algorithm which tries to learn patterns from s) s
5 615 M
(uch a dataset is equivalent to what H does above. If H learns the pattern in the dataset with ) s
5 604 M
(x% accuracy, it implies algorithms F+G are reverse engineered with x% correctness. This presen) s
5 593 M
(ts a contradiction if the source of randomness is quantum mechanical - state vector collapses ) s
5 582 M
(for both observers G and H, not only for G. If Schroedingers cat paradox is axiomatically true) s
5 571 M
(, it raises questions: Does this limit the scope of machine learning to only classical randomn) s
5 560 M
(ess? Is quantum randomness not learnable?) s
5 538 M
(An alternative formulation of F+G is:) s
5 527 M
(F is the quantum randomness source \(e.g Double slit\) and G invokes \(or measures\) F to produce ) s
5 516 M
(a datastream over time. Here G as observer within blackbox is an inseparable entity from F i.e) s
5 505 M
( F is an internal routine of G.) s
5 483 M
(There are two levels of learning possible:) s
5 472 M
(*\) Learning within blackbox - Learning patterns from observations of F+G. F+G are pre-equipped) s
5 461 M
( with ability to learn patterns in collapsed wavefunction generated dataset. Such a pattern le) s
5 450 M
(arnt exists only within the blackbox. External observer H has no way to learn the dataset and ) s
5 439 M
(the pattern. Even within F+G there are problems with learning patterns from quantum randomness) s
5 428 M
(. Logical independence implies any two observations \(boolean propositions\) are independent and) s
5 417 M
( learning pattern from such independent observations contradicts it - pattern in independent o) s
5 406 M
(bservations imply observations are dependent on each other. For example, two propositions "Tod) s
5 395 M
(ay is holiday" and "There are 100 cars" are logically independent while propositions "There ar) s
5 384 M
(e 100 flights" and "There are 100 cars" are logically dependent. Former 2 propositions have no) s
5 373 M
( common patterns while latter 2 propositions have a common pattern \(100, vehicles\) - new infor) s
5 362 M
(mation "100 and vehicles" is deducible from 2 propositions. Quantum randomness stems from logi) s
5 351 M
(cal independence and thus there should not be a common pattern to learn from independent strea) s
5 340 M
(ming set of observations.) s
5 318 M
(*\) Learning outside blackbox - This is obvious contradiction mentioned previously because data) s
5 307 M
(set generated by F+G is never visible to H because wavefunction of H never collapses.) s
5 285 M
(Thus above seems to imply learning is impossible with quantum randomness.) s
5 263 M
(References:) s
5 252 M
(----------) s
5 241 M
(349.1 Feynman Lectures on Physics - [RichardFeynman] - Volume 3 - Chapter 1 and 2) s
5 230 M
(349.2 Emperor's New Mind - [RogerPenrose] - Chapter 6 - Quantum Magic and Quantum Mystery) s
5 219 M
(349.3 Quantum Randomness and Logical Independence - https://arxiv.org/pdf/0811.4542v2.pdf - Mu) s
5 208 M
(tually independent logical propositions cause quantum randomness) s
5 197 M
(349.4 Elitzur-Vaidman Bomb tester - https://en.wikipedia.org/wiki/Elitzur%E2%80%93Vaidman_bomb) s
5 186 M
(_tester - Detecting if bomb inside a box has detonated or not by quantum superposition - Const) s
5 175 M
(ructive and Destructive self-interference - Previous thought experiment replaces the bomb in t) s
5 164 M
(he box by a bigdata source which has to be predicted. Difference is one of the observers \(dete) s
5 153 M
(ctors\) is within the box and other is outside.) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(-----------------------------------------) s
5 109 M
(350. \(THEORY\) Quantum Parallelism, Quantum Interference, Integer Factoring, Periodicity Findin) s
5 98 M
(g, Polynomial Reconstruction and) s
5 87 M
(Complement Function/2-Coloring - related to 24,34,323,338,345 and 347 - 29 December 2016 - imp) s
5 76 M
(ortant draft updates to :) s
5 65 M
(        - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicS) s
5 54 M
(ieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.tex/d) s
5 43 M
(ownload and) s
5 32 M
(        - http://arxiv.org/pdf/1106.4102.pdf) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(-----------------------------------------) s
_R
S
%%Page: (202) 202
%%BeginPageSetup
_S
18 36 translate
/pagenum 202 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (202) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Discrete Hyperbolic Factorization draft in 34 claims \(disputed because of input size though re) s
5 681 M
(ferences exist to prove PRAM=NC equivalence and Bitonic Batcher Sort is in NC\) that integers c) s
5 670 M
(an be factored by NC parallel computation circuit of logdepth and polynomial size \(by PRAM or ) s
5 659 M
(Cloud Bitonic sorting\). Similar parallelism is the basis for Quantum Factorization Algorithm o) s
5 648 M
(f [Shor] - factorization is in BQP and NC is in BQP. Quantum Computation relies on two phenome) s
5 637 M
(na:) s
5 626 M
(        *\) Quantum Parallelism in which a function f\(x\) is computed to get many values of f\(x\)) s
5 615 M
( in parallel) s
5 604 M
(        *\) Quantum Interference by Hadamard transform where cancellation occurs \( |0> = 1/sqrt) s
5 593 M
(\(2\)*\(|0>+|1>\) and |1> = 1/sqrt\(2\)*\(|0>-|1>\) \) by interference) s
5 571 M
(Period Finding in Quantum Computation finds smallest r such that f\(x\)=f\(x+r\) and Shor's factor) s
5 560 M
(ization internally applies period finding by quantum fourier transform. Ramsey theory of integ) s
5 549 M
(ers and related theorems viz., Van Der Waerden, Szemeredi etc., imply existence of monochromat) s
5 538 M
(ic arithmetic progressions in 2-coloring of integer sequences where each color is equivalent t) s
5 527 M
(o a function and its complement. Period finding problem reduces to finding arithmetic progress) s
5 516 M
(ions in integer sequences by defining a function f\(x+iy\)=f\(x+\(i+1\)y\) for any x in the sequence) s
5 505 M
( and some integers y and i. More generically, factoring and period finding are special cases o) s
5 494 M
(f Hidden Subgroup Problem i.e f\(g\)=f\(hg\) for g in G and h in subgroup H of G and hG is a coset) s
5 483 M
( of H. In terms of polynomial reconstruction, period finding computes the function f passing t) s
5 472 M
(hrough the arithmetic progression points. In Discrete Hyperbolic Factorization of 34, instead ) s
5 461 M
(of quantum parallelism , classical NC parallelism is applied to k-merge sort and binary search) s
5 450 M
( the pixelated hyperbola tiles.) s
5 428 M
(References:) s
5 417 M
(-----------) s
5 406 M
(350.1 Quantum Computation Course notes - Order Finding, Fermat's Little Theorem and Simon, Sho) s
5 395 M
(r Factorization algorithms - [AndrisAmbainis] - http://www.cs.ioc.ee/yik/schools/win2003/ambai) s
5 384 M
(nis2002-2.ppt) s
5 373 M
(350.2 Progress on Quantum Algorithms - [PeterShor] - http://www-math.mit.edu/~shor/papers/Prog) s
5 362 M
(ress.pdf) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(--------) s
5 318 M
(351. \(FEATURE-DONE\) Recommender Systems Implementation based on ThoughtNet Hypergraph - 1 Janu) s
5 307 M
(ary 2017) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(--------) s
5 274 M
(*\) Input to python-src/DeepLearning_ReinforcementLearningRecommenderSystems.py is a set of obs) s
5 263 M
(ervations which are user activities) s
5 252 M
(\(shopping cart items, academic articles read by user etc.,\) and already built thoughtnet hyper) s
5 241 M
(graph history is searched by usual) s
5 230 M
(evocatives from the input) s
5 219 M
(*\) Evocatives returned from ThoughtNet hypergraph are items recommended relevant to user's act) s
5 208 M
(ivities.) s
5 197 M
(*\) This technique of recommendation is more qualitative than usual methods of Collaborative Fi) s
5 186 M
(ltering and mimicks the human) s
5 175 M
(thought process of "relevance based evocation" based on past experience \(i.e ThoughtNet histor) s
5 164 M
(y\)) s
5 153 M
(*\) New input text file and folder RecommenderSystems has been added to python-src with Neo4j G) s
5 142 M
(raph Database support) s
5 131 M
(*\) Logs have been committed in testlogs/) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(--------) s
5 87 M
(352. \(FEATURE-DONE\) Kafka data storage for Streaming Abstract Generator - 2 January 2017) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(--------) s
5 54 M
(Kafka Streaming Platform has been added as a data storage in Streaming Generator Abstraction S) s
5 43 M
(ingle-Window entrypoint. Kafka subscriber) s
5 32 M
(code for a neuronraindata topic polls for incoming messages in iterator. As an example Streami) s
5 21 M
(ng CountMeanMinSketch implementation has) s
5 10 M
(been updated to source streamed data published in Kafka.) s
_R
S
%%Page: (203) 203
%%BeginPageSetup
_S
18 36 translate
/pagenum 203 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (203) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(---------------------------------------) s
5 659 M
(353. \(FEATURE-DONE\) An example usecase of Recommender Systems for online shopping cart - 2 Jan) s
5 648 M
(uary 2017) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(---------------------------------------) s
5 615 M
(*\) RecommenderSystems folder has been updated with new text file from an example past shopping) s
5 604 M
( cart history items \(e.g books from miscellaneous) s
5 593 M
(topics in Amazon online bookstore\)) s
5 582 M
(*\) From the above edges a Hypergraph is created by classifying the shopping cart items into cl) s
5 571 M
(asses and constructing hyperedges across the) s
5 560 M
(classes \(by Recursive Gloss Overlap Graph maximum core number classifier\)) s
5 549 M
(*\) Text files for above usecase have .shoppingcart suffixes) s
5 538 M
(*\) Above shopping cart hypergraph has a past history of items chosen by a user from variety of) s
5 527 M
( topics.) s
5 516 M
(*\) New input file RecommenderSystems.shoppingcart.input.txt has present items in user's shoppi) s
5 505 M
(ng cart and new items have to be recommended to) s
5 494 M
(user based on present choice and past history.) s
5 483 M
(*\) For this, items in present shopping cart are lookedup in past sales history Hypergraph crea) s
5 472 M
(ted previously and recommendations are returned) s
5 461 M
(*\) Items in present shopping cart are looked up in two ways: 1\) By classifying with Recursive ) s
5 450 M
(Gloss Overlap graph and looking up rare classes) s
5 439 M
(less than a threshold \(presently core number 5\) and 2\) Raw token lookup) s
5 428 M
(*\) Logs for these two lookups based Recommendations generated are committed to testlogs/) s
5 406 M
(An important note: Rationale for Hypergraph based past history is that a meaningful text can b) s
5 395 M
(e classified on multiple classes vis-a-vis usual) s
5 384 M
(supervised classifiers which classify text on exactly one class. This is more realistic becaus) s
5 373 M
(e text can delve into multiple topics simultaneusly e.g an article on medical imaging \(MRI sca) s
5 362 M
(ns\) could contain details also on nuclear physics and pattern recognition and can exist in 3 c) s
5 351 M
(lasses simultaneously. There are still impurities in recommendations generated from lookups as) s
5 340 M
( gleaned from logs. These are inaccuracies in the way WordNet infers because of small size of ) s
5 329 M
(the text description about book. Larger the description per shopping cart item, greater is the) s
5 318 M
( information connectedness of the WordNet subgraph generated and accuracy of core number based) s
5 307 M
( classification.) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(------------------------------------------) s
5 263 M
(354. \(FEATURE-DONE\) More detailed shopping cart example 2 for RGO+ThoughtNet based Recommender) s
5 252 M
( System - 3 January 2017) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(------------------------------------------) s
5 219 M
(*\) python-src/DeepLearning_ReinforcementLearningRecommenderSystems.py has been updated to choo) s
5 208 M
(se top percentile classes of text input) s
5 197 M
(so that vertices with large core numbers get more weightage.) s
5 186 M
(*\) New shoppingcart2 product reviews text has been added and corresponding Hypergraph history ) s
5 175 M
(has been created. This example has detailed) s
5 164 M
(product description with an assorted mix \(TV reviews, Washing Machine reviews, Home Theatre re) s
5 153 M
(views etc.,\) - python-src/RecommenderSystems/RecommenderSystems_Edges.shoppingcart2.txt,) s
5 142 M
(python-src/RecommenderSystems/RecommenderSystems_Hypergraph_Generated.shoppingcart2.txt) s
5 131 M
(*\) New input file python-src/RecommenderSystems.shoppingcart2.input.txt has been added with an) s
5 120 M
( example product \(TV\).) s
5 109 M
(*\) Recommender System chooses relevant TV products from Hypergraph history and displays to use) s
5 98 M
(r.) s
5 87 M
(*\) Logs have been committed to testlogs/) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(-----------------------------------------) s
5 43 M
(355. \(THEORY\) NEXP not in non-uniform ACC, P\(Good\) majority voting circuit and some contradict) s
5 32 M
(ions - 4 January 2017 and 5 January 2017) s
5 21 M
(- related to all P\(Good\) majority voting circuit related points in this document \(e.g 14,53 et) s
5 10 M
(c.,\)) s
_R
S
%%Page: (204) 204
%%BeginPageSetup
_S
18 36 translate
/pagenum 204 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (204) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(-----------------------------------------) s
5 670 M
(RHS of P\(Good\) majority voting circuit has exponential size with unrestricted depth in worst c) s
5 659 M
(ase and is in EXP \(if depth restricted , RHS is in PH direct-connect uniform circuit\). RHS is ) s
5 648 M
(a boolean function composition of non-uniform NC and individual voter decision functions. Know) s
5 637 M
(n) s
5 626 M
(result by [RyanWilliams] limits that NEXP is not in ACC \(AC circuits with counter mod[m] gates) s
5 615 M
( which output 1 if sum of inputs is a multiple) s
5 604 M
(of m\). Non uniform ACC is contained in TC and AC is contained in ACC \(AC in ACC in TC\). This m) s
5 593 M
(akes a contradiction if LHS is 100% efficient) s
5 582 M
(percolation circuit in non-uniform NC \(NC/poly\). If P\(Good\) binomial coefficient series summat) s
5 571 M
(ion converges to 100%, then RHS majority voting circuit is also 100% efficient and LHS=RHS. Th) s
5 560 M
(is implies if RHS has NEXP-complete algorithm/circuit, because of convergence, NEXP is in NC/p) s
5 549 M
(oly. But NC is in ACC and this implies NEXP has non-uniform ACC circuits - contradicts NEXP do) s
5 538 M
(es not have non-uniform ACC circuits. This is one) s
5 527 M
(more counterexample implying some or all of the following:) s
5 516 M
(       *\) There is no 100% efficient RHS majority voting boolean function composition) s
5 505 M
(       *\) There is no 100% efficient LHS boolean function \(pseudorandomly chosen boolean funct) s
5 494 M
(ion, ranked by social choice function etc.,\)) s
5 483 M
(       *\) RHS Majority voting is not in NEXP.) s
5 472 M
(       *\) LHS pseudorandom choice boolean cannot have a non-uniform NC circuit) s
5 461 M
(Above, "efficiency" implies "No error" cases in scenarios matrix of 53.14 and a ninth error sc) s
5 450 M
(enario of Randomized Decision Tree Evaluation Error\(zero-error decision tree evaluation\) menti) s
5 439 M
(oned in 314, 317. This adds one more possibility where P\(Good\) binomial summation for majority) s
5 428 M
( voting diverges already mentioned in 53.16.3.1, 256, 265, 275. Ranking by social choice funct) s
5 417 M
(ion includes Interview algorithm implemented in Asfer and any other ranking function. Thus the) s
5 406 M
(re exists a setting where both LHS and RHS fail to converge. It has to be noted that above cou) s
5 395 M
(nterexamples do not rule out the possibility of convergence of LHS and RHS of P\(Good\) circuit.) s
5 384 M
( There could be decision functions which adhere to "no error" cases in 10 possibilities as bel) s
5 373 M
(ow:) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(---) s
5 340 M
(        x                               |    f\(x\) = f\(x/e\)      |       f\(x\) != f\(x/e\) Noise  ) s
5 329 M
(  |) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(---) s
5 296 M
(x in L, x/e in L                        |       No error        |       Error                 ) s
5 285 M
(  |) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(---) s
5 252 M
(x in L, x/e not in L                    |       Error           |   No error if f\(x\)=1,f\(x/e\)=) s
5 241 M
(0 |) s
5 230 M
(                                        |                       |   else Error                ) s
5 219 M
(  |) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(---) s
5 186 M
(x not in L, x/e in L                    |       Error           |   No error if f\(x\)=0,f\(x/e\)=) s
5 175 M
(1 |) s
5 164 M
(                                        |                       |   else Error                ) s
5 153 M
(  |) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(---) s
5 120 M
(x not in L, x/e not in L                |       No error        |      Error                  ) s
5 109 M
(  |) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(---) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(--) s
5 54 M
(       x                                |                       f\(x\)                          ) s
5 43 M
( |) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(--) s
5 10 M
(Randomized Decision tree evaluation     |       No error       |       Error                  ) s
_R
S
%%Page: (205) 205
%%BeginPageSetup
_S
18 36 translate
/pagenum 205 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (205) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( |) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(--) s
5 659 M
(If LHS social choice ranking function is Interview algorithm which is a PSPACE=IP algorithm \(b) s
5 648 M
(y straightforward reduction from polynomial round prover-verifier protocol\) or a PSPACE functi) s
5 637 M
(on fitting within "No error" scenarios in matrix above, then an unrestricted depth 100% errorf) s
5 626 M
(ree RHS EXP circuit could imply, EXP=PSPACE. Hence whether such perfect resilient errorfree de) s
5 615 M
(cision functions in previous "No error" cases can be learnt is an open question.) s
5 593 M
(There are natural processes like Soap Bubble formation known to solve Steiner Tree NP-hard pro) s
5 582 M
(blem efficiently. Soap Bubbles between two) s
5 571 M
(glass plates are formed and bubbles are connected by line segments of optimum total length whi) s
5 560 M
(ch converge at Steiner vertices. Voting is a) s
5 549 M
(also a natural process with human element involved. Does human judgement overwhelm algorithmic) s
5 538 M
( judgement in decision correctness is also an) s
5 527 M
(open question. If neural networks are algorithmic equivalents of human reasoning, then each vo) s
5 516 M
(ter decision function could be a TC \(threshold\) circuit and majority voting could be a composi) s
5 505 M
(tion of NC majority function with TC voter circuit inputs. Thus entire RHS of P\(Good\) is a hug) s
5 494 M
(e) s
5 483 M
(non-uniform TC neural network. Error of majority voting is then equal to error of this majorit) s
5 472 M
(y function + neural network composition i.e majority voting involving humans is BPTC algorithm) s
5 461 M
(.) s
5 439 M
(Previous matrix of 10 scenarios basically subdivides the traditional BP* definition which says) s
5 428 M
(: For x in L, a BP* turing machine accepts with probability > 2/3 and for x not in L rejects w) s
5 417 M
(ith probability > 2/3. In other words, a BP* algorithm allows false positives and false negati) s
5 406 M
(ves and thus errs in "judgement" with probability 1/3. All "Error" entries in the previous mat) s
5 395 M
(rix are :) s
5 384 M
(        *\) \(f\(x\)=f\(x/e\)\) in which case two correlated strings one in L and other not in L are ) s
5 373 M
(both accepted \(false positive\) and rejected by f \(false negative\)) s
5 362 M
(        *\) \(f\(x\) != f\(x/e\) - Noise sensitivity\) in which case two correlated strings in L or n) s
5 351 M
(ot in L are erroneously accepted and rejected by f \(false positives and false negatives\)) s
5 340 M
(        *\) Previous two are input related while the last scenario with error in decision tree ) s
5 329 M
(evaluation is internal to the boolean function itself with false positive and negative decisio) s
5 318 M
(n tree evaluation based on pseudorandom advice bits.) s
5 296 M
(This false positive + false negative voter judgement error applies to BPTC NC+neural network c) s
5 285 M
(ircuit composition also described previously. Derandomizing BPTC should give a non-uniform TC ) s
5 274 M
(circuit for RHS of P\(Good\) majority voting implying zero-error voting by neural network voters) s
5 263 M
(. This non-uniform TC circuit is an alternative way to specify the enormity of RHS earlier des) s
5 252 M
(cribed by PH=DC \(depth restricted\) and EXP \(depth unrestricted\) classes. Thus these two unboun) s
5 241 M
(ded circuit models for RHS of P\(Good\) majority voting are equivalent: non-uniform TC and EXP. ) s
5 230 M
(But ACC is contained in TC and NEXP is not in non-uniform ACC. This does not rule out the poss) s
5 219 M
(ibility that EXP has non-uniform TC circuits which is a superset of ACC.) s
5 197 M
(References:) s
5 186 M
(-----------) s
5 175 M
(355.1 NEXP not in non-uniform ACC - [RyanWilliams] - http://www.cs.cmu.edu/~ryanw/acc-lbs.pdf) s
5 164 M
(355.2 Soap Bubble Steiner Tree and P=NP - [ScottAaronson] - https://arxiv.org/pdf/quant-ph/050) s
5 153 M
(2072v2.pdf) s
5 142 M
(355.3 Constant depth Threshold circuits - http://people.cs.uchicago.edu/~razborov/files/helsin) s
5 131 M
(ki.pdf) s
5 120 M
(355.4 Circuit Complexity of Neural networks - https://papers.nips.cc/paper/354-on-the-circuit-) s
5 109 M
(complexity-of-neural-networks.pdf) s
5 98 M
(355.5 Exact Threshold circuits - http://www.cs.au.dk/~arnsfelt/Papers/exactcircuits.pdf) s
5 87 M
(355.6 Universal Approximation Theorem - [Cybenko] - https://en.wikipedia.org/wiki/Universal_ap) s
5 76 M
(proximation_theorem - Multilayered Perceptrons with single hidden layer and finite inputs can ) s
5 65 M
(approximate continuous functions [It has to be noted that single layer perceptron cannot compu) s
5 54 M
(te XOR function and spatial connectedness - from Perceptrons:an introduction to computational ) s
5 43 M
(geometry by MarvinMinsky-SeymourPapert]. Thus BPTC threshold networks with multiple layers as ) s
5 32 M
(voter decision functions are good approximators of voting decisions.) s
5 21 M
(355.7 L* algorithm for exact learning of DFAs - [Dana Angluin] - https://people.eecs.berkeley.) s
5 10 M
(edu/~dawnsong/teaching/s10/papers/angluin87.pdf - membership and counterexample queries to lea) s
_R
S
%%Page: (206) 206
%%BeginPageSetup
_S
18 36 translate
/pagenum 206 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (206) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(rn DFA) s
5 681 M
(355.8 Efficient Learning Algorithms Yield Circuit Lower Bounds - [Lance Fortnow] - http://lanc) s
5 670 M
(e.fortnow.com/papers/files/fksub.pdf - Theorem 1 and Corollary 1 for depth-2 threshold circuit) s
5 659 M
(s \(neural networks\) - " ... If there exists an algorithm for exactly learning class C \(e.g dep) s
5 648 M
(th-two neural networks\) in time 2^s^o\(1\) with membership and equivalence queries then EXP^NP i) s
5 637 M
(s not in P/Poly\(C\) \(e.g TC0[2]\) ... ". This theorem has direct implications for learning voter) s
5 626 M
( decision functions belonging to TC and BPTC classes in majority voting. Intuitively, this imp) s
5 615 M
(lies if an exact voter neural network without error is learnt in time exponential in size of n) s
5 604 M
(eural network \(e.g error minimization by gradient descent, backpropagation etc.,\), then EXP^NP) s
5 593 M
( is not computable by neural networks - EXP^NP is not in TC/poly.) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(------------------------------------------) s
5 549 M
(356. \(FEATURE-DONE\) PythonSpark+Cython Interview Algorithm cloud implementation update - 4 Jan) s
5 538 M
(uary 2017 - related to 348) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(------------------------------------------) s
5 505 M
(PythonSpark+Cython Cloud Implementation of Interview Algorithm has been updated to print avera) s
5 494 M
(ge clustering coefficient of the definition) s
5 483 M
(graph for text. Average clustering coefficient is average\(per node clustering coefficient\) for) s
5 472 M
( all nodes where clustering coefficient of) s
5 461 M
(a vertex is a ratio of edges to neighbours to all possible edges to neighbours \(or\) amount of ) s
5 450 M
("cliqueness" of each neighbourhood of all) s
5 439 M
(vertices in a graph. This adds an alternative way for computing intrinsic merit of a document ) s
5 428 M
(recursive gloss overlap graph mentioned in) s
5 417 M
(348 \(Kleinberg's small world graph and clustering coeffient = 2\). Average clustering coefficie) s
5 406 M
(nt supplements the intrinsic merit quantitative) s
5 395 M
(score in deciding semantic relatedness of a graph. Closer the clustering coefficient is to 2, ) s
5 384 M
(it is easier to find paths in graph of a text) s
5 373 M
(and greater the linguistic meaningfulness.) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-----------------------------------------) s
5 329 M
(357. \(THEORY\) P\(Good\) non-majority versus majority social choices, BPTC and PSPACE classes - r) s
5 318 M
(elated to 317,355 - 6 January 2017) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(-----------------------------------------) s
5 285 M
(Caution: Following tries to prove a major lowerbound result with some assumptions and is subje) s
5 274 M
(ct to errors.) s
5 252 M
(Main motivation for so much emphasis on P\(Good\) binomial summation convergence is: LHS is non-) s
5 241 M
(majority social choice and RHS is majority) s
5 230 M
(social choice and convergence to 100% on both sides implies LHS and RHS are of equal merit wit) s
5 219 M
(h varying complexity classes giving a lowerbound. In non-majority social choice one of the ele) s
5 208 M
(ments in the population set has to be chosen without voting. If there are n voters and out of ) s
5 197 M
(them m are of x% goodness, probability of pseudorandom choice to have x% efficiency = m/n. If ) s
5 186 M
(LHS is an Interview algorithm based social choice,) s
5 175 M
(choice process is as follows:) s
5 153 M
(foreach\(voter\)) s
5 142 M
({) s
5 131 M
(       Interview the voter \(a PSPACE-complete problem where polynomial number of question-answ) s
5 120 M
(ering reduces to prover-verifier protocol\)) s
5 109 M
(}) s
5 98 M
(Rank the voters by merit and choose the topmost as non-majority social choice - voting is obvi) s
5 87 M
(ated.) s
5 65 M
(It is interesting to note that web search engines use both non-majority \(Ranking by merit\) and) s
5 54 M
( majority choice \(e.g PageRank,Hub-Authority\) to rank websites. Above algorithm is polynomial ) s
5 43 M
(time in number of voters. Previous loop is parallelizable per voter and could be an NC circuit) s
5 32 M
( with PSPACE algorithms as inputs. Thus effectively LHS is a PSPACE algorithm. RHS majority vo) s
5 21 M
(ting is better approximated by BPTC circuit with threshold neural network circuits for each vo) s
5 10 M
(ter, mentioned previously. It is known that BPP is in PSPACE. Thus LHS interview social choice) s
_R
S
%%Page: (207) 207
%%BeginPageSetup
_S
18 36 translate
/pagenum 207 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (207) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( with error is already accounted for in PSPACE. This equates an error-prone LHS PSPACE-complet) s
5 681 M
(e problem to an error-prone RHS BPTC problem. BPTC is in BPP \(couldn't find reference for this) s
5 670 M
(, but looks obvious because every TC circuit with error can be simulated by a polynomial time ) s
5 659 M
(Turing Machine with error\). This implies BPTC is in PSPACE because BPP is in PSPACE. If equal ) s
5 648 M
(error on both LHS and RHS implies a lowerbound, LHS PSPACE-complete interview non-majority soc) s
5 637 M
(ial choice has a BPTC majority social choice circuit and therefore all PSPACE problems are in ) s
5 626 M
(BPTC. These two directions together imply PSPACE=BPTC. But BPTC is in BPP and BPP is in PSPACE) s
5 615 M
( implying PSPACE=BPP. From https://www.cse.buffalo.edu/~regan/papers/ComplexityPoster.jpg, thi) s
5 604 M
(s might imply a collapse of entire Polynomial Hierarchy upto second level and some consequence) s
5 593 M
(s for NP and coNP.) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(-----------------------------------------) s
5 549 M
(358. \(THEORY\) KRW Conjecture on Boolean Function Composition, Non-majority \(PSPACE\) and Majori) s
5 538 M
(ty \(harder than PSPACE\) cicuits -) s
5 527 M
(related to 14,53,311,357 - 7 January 2017) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(-----------------------------------------) s
5 494 M
(Previous point mooted the idea of the parallel interview of voters and ranking them as a non-m) s
5 483 M
(ajority social choice. This requires sorting) s
5 472 M
(the interview algorithm scores of individual voters and finding topmost. Sorting of numbers is) s
5 461 M
( in AC=NC=TC \(Sorting networks, parallel sorting,) s
5 450 M
( [ChandraStockMeyerVishkin] Constant Depth Reducibility for Sorting - http://www.cstheory.com/) s
5 439 M
(stockmeyer@sbcglobal.net/csv.pdf etc.,) s
5 428 M
(Threshold circuits for sorting\) and each voter's PSPACE-complete interview circuit is input to) s
5 417 M
( NC sorting circuit to find non-majority social choice. Thus LHS is a circuit composition of N) s
5 406 M
(C and PSPACE voter interview circuits denoted as NC+PSPACE. RHS of P\(Good\) is, as already ment) s
5 395 M
(ioned by neural network approximation, a bounded probabilistic non-uniform BPTC circuit which ) s
5 384 M
(is a circuit composition of BPNC and voter BPTC circuits denoted as BPNC+BPTC.  If circuit com) s
5 373 M
(positions NC+PSPACE = PSPACE and BPNC+BPTC = BPTC then LHS is a PSPACE algorithm to RHS BPTC a) s
5 362 M
(lgorithm assuming equal error.) s
5 340 M
(This creates a following intriguing possibility: If RHS majority voting has voter functions ha) s
5 329 M
(rder than PSPACE \(i.e EXP, EXPSPACE, NEXP, coNEXP etc., and not in BPTC\) , under equal error a) s
5 318 M
(ssumption, LHS PSPACE-complete non-majority interview algorithm lowerbounds the RHS. PSPACE is) s
5 307 M
( in EXP and EXP is in PSPACE. Thus equal error assumption for lowerbound raises possibilities ) s
5 296 M
(of PSPACE=EXP, PSPACE=NEXP, PSPACE=coNEXP, PSPACE=EXPSPACE etc., It has to be observed that bo) s
5 285 M
(th PSPACE and other harder-than-PSPACE classes contain PP\(Probabilistic Polynomial\) and thus d) s
5 274 M
(erandomization \(error removal\) is implicit. KRW Conjecture for Boolean Function Composition of) s
5 263 M
( two boolean functions f and g says: DepthComplexity\(f + g\) ~ DepthComplexity\(f\) + DepthComple) s
5 252 M
(xity\(g\). PSPACE-complete interview is equivalent to a TrueQBF phi\(q1,a1,q2,a2,...,qn,an\) compu) s
5 241 M
(ted by an Alternating Turing Machine \(AP=PSPACE\) where "forall" quantifier is equivalent to a ) s
5 230 M
(question qi and "exists" quantifier is equivalent to its answer ai. It is not known if there i) s
5 219 M
(s a Circuit Composition equivalent of KRW conjecture for depth-size lowerbound of composition ) s
5 208 M
(of two circuits and it is assumed that NC+\(PSPACE=AP\) = PSPACE because PSPACE is harder than N) s
5 197 M
(C and composition of NC with PSPACE should increase circuit depth proportional to number of qu) s
5 186 M
(antifiers in interview TQBF. RHS BPNC+BPTC=BPTC is somewhat obvious because NC=TC=AC and only ) s
5 175 M
(circuit depth-size increases when composed.) s
5 153 M
(References:) s
5 142 M
(-----------) s
5 131 M
(358.1 Karchmer-Raz-Wigderson \(KRW\) Conjecture of Boolean Function Composition and Information ) s
5 120 M
(Complexity - http://cs.haifa.ac.il/~ormeir/papers/krw_info.pdf) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(----------------------------------------) s
5 76 M
(359. \(THEORY\) Non-majority social choices - Interview Ranking Function and Pseudorandom Choice) s
5 65 M
( Function - 11 January 2017 - related to) s
5 54 M
(317, 358 and all other non-majority versus majority voting points) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(----------------------------------------) s
5 21 M
(Previous sections mentioned about two possible ways of non-majority social choice:) s
5 10 M
(        *\) Parallel interview of voters and ranking based on sorted interview scores) s
_R
S
%%Page: (208) 208
%%BeginPageSetup
_S
18 36 translate
/pagenum 208 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (208) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        *\) Psuedorandom choice) s
5 670 M
(------------------) s
5 659 M
(Interview circuit:) s
5 648 M
(------------------) s
5 637 M
(Error in interview circuit which is an NC sorting network with PSPACE-complete voter interview) s
5 626 M
(s as inputs is defined in usual sense as:) s
5 615 M
(False positives + False negatives + False questions = Percentage of wrong answers marked as ri) s
5 604 M
(ght + Percentage of right answers marked as wrong + Percentage of wrong questions) s
5 582 M
(For sorting purposes output of TQBF is not a binary 0 or 1 but a binary string with value equa) s
5 571 M
(l to number of correct answers. Like all) s
5 560 M
(other boolean functions sensitivity of TQBF phi\(q1,a1,q2,a2,q3,a3,...,qn,an\) is defined as how) s
5 549 M
( flipping of qi and ai affects the output.) s
5 538 M
(Formally,) s
5 527 M
(        Sensitivity\(TQBF\) = Pr\(TQBF\(X\) != TQBF\(Xcorrelated\)\) where Xcorrelated is an interview) s
5 516 M
( with erroneous questions and answers.) s
5 494 M
(Thus sensitivity captures the error in interview. It has to be noted that wrong questions also) s
5 483 M
( measure the flaw in interview process while wrong answer to a right question is already accou) s
5 472 M
(nted for by a binary 0. When sensitivity of TQBF is 0, interview is flawless and LHS if P\(good) s
5 461 M
(\) is 1. BKS Majority is least stable conjecture by [Benjamini-Kalai-Schramm] predicts existenc) s
5 450 M
(e of a linear threshold function with stability greater than Majority function of n variables,) s
5 439 M
( n odd. Interview Circuit which is a composition of an NC sorting network with PSPACE TQBF int) s
5 428 M
(erviews of voters, is also a linear threshold function which outputs candidate above a thresho) s
5 417 M
(ld \(i.e sum of correct answers > threshold\). If Stability\(Interview\) > Stability\(Majority\) the) s
5 406 M
(n it is a proof of BKS conjecture. For large n, Stability\(Majority\) = 1-2/pi*\(delta\). When del) s
5 395 M
(ta is close to 1, Stability\(Majority\) tends to 0.35.) s
5 373 M
(--------------------) s
5 362 M
(Pseudorandom Choice:) s
5 351 M
(--------------------) s
5 340 M
(Set of all voter decision functions is partitioned into n sets where each set has goodness xi.) s
5 329 M
( Here goodness of a voter decision function f) s
5 318 M
(is defined as: 1-error\(f\).) s
5 296 M
(Let number of voter decision functions with goodness xi = m\(xi\). Thus N = m\(x1\)+m\(x2\)+m\(x3\)+..) s
5 285 M
(.+m\(xn\)) s
5 274 M
(Expected goodness of a PRG choice is:) s
5 263 M
(        1/N * summation\(xi*m\(xi\)\) = \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\) + ... + xn*m\(xn\)\) / N) s
5 252 M
(When all voter functions have goodness 1 then PRG choice in LHS of P\(good\) has goodness 1.) s
5 230 M
(These two non-majority choices are just hypothetical examples of how a social choice can be ma) s
5 219 M
(de without voting. In reality how non-majority) s
5 208 M
(social choice occurs is quite complex and determined by various factors of society \( economic ) s
5 197 M
(disparities, ethnicity etc.,\)) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(-----------------------------------) s
5 153 M
(360. \(FEATURE-DONE\) Commits - 11 January 2017 - DeepLearning Convolution Networks update) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(-----------------------------------) s
5 120 M
(Some changes done to Convolution computation:) s
5 109 M
(*\) Made sigmoid perceptron optional in final neural network from Maxpooling layer so that weig) s
5 98 M
(hted sum is printed instead of sigmoid value) s
5 87 M
(*\) This causes the convolution network to be very sensitive to presence of pattern) s
5 76 M
(*\) 2 more example bitmaps have been added with varying degree of pattern prominence \(a pronoun) s
5 65 M
(ced X and a thin 1\)) s
5 54 M
(*\) With this final neurons from maxpooling layer print values of neurons which quite closely r) s
5 43 M
(eflect the pattern's magnitude: Huge pattern) s
5 32 M
(results in big value while small pattern results in small value proportionately.) s
5 21 M
(*\) This can rank the bitmaps in increasing degree of magnitude of pattern presence) s
5 10 M
(*\) Logs for this have been committed to testlogs) s
_R
S
%%Page: (209) 209
%%BeginPageSetup
_S
18 36 translate
/pagenum 209 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (209) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(-----------------------------) s
5 659 M
(361. \(FEATURE-DONE\) DeepLearning Convolution Network - an example pattern recognition from bit) s
5 648 M
(map images - 12 January 2017) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(-----------------------------) s
5 615 M
(*\) Few more bitmap images have been included with same pattern but of different sizes) s
5 604 M
(*\) There are 5 patterns and 9 bitmaps:) s
5 593 M
(        - Thin X and Boldfaced X) s
5 582 M
(        - Thin 0 and Boldfaced 0) s
5 571 M
(        - Thin 8 and Boldfaced 8) s
5 560 M
(        - No pattern) s
5 549 M
(        - Thin 1 and Boldfaced 1) s
5 538 M
(*\) Expectation is that Convolution Network final neuron layer must output similar values for s) s
5 527 M
(ame pattern and different values) s
5 516 M
(for different patterns) s
5 505 M
(*\) pooling_neuron_weight has been reintroduced in final neuron layer of 10 neurons each with a) s
5 494 M
( randomly chosen weight.) s
5 483 M
(*\) Logs show for all 10 neurons, final neural activation values are close enough for similar p) s
5 472 M
(atterns and different for different patterns.) s
5 461 M
(*\) Thus Convolution Network which is a recent advance in DeepLearning works quite well to reco) s
5 450 M
(gnize similar image patterns.) s
5 428 M
(In above example , 9th and 10th neurons output following values. Example 11 and 12 are similar) s
5 417 M
( patterns - 0 and 0. Example 21 and 22 are similar patterns - 8 and 8. Example 41 and 42 are s) s
5 406 M
(imilar patterns - X and X. Example 51 and 52 are similar patterns - 1 and 1. Neurons reflect t) s
5 395 M
(his similarities :) s
5 384 M
(###########################################################################################) s
5 373 M
(Inference from Max Pooling Layer - Neuron  8) s
5 362 M
(###########################################################################################) s
5 351 M
(Example 11:) s
5 340 M
(###########) s
5 329 M
([27.402311485751664]) s
5 318 M
(###########) s
5 307 M
(Example 12:) s
5 296 M
(###########) s
5 285 M
([27.36740767846171]) s
5 274 M
(###########) s
5 263 M
(Example 21:) s
5 252 M
(###########) s
5 241 M
([32.15200939997122]) s
5 230 M
(###########) s
5 219 M
(Example 22:) s
5 208 M
(###########) s
5 197 M
([30.835940458495205]) s
5 186 M
(###########) s
5 175 M
(Example 3:) s
5 164 M
(###########) s
5 153 M
([17.133246549473675]) s
5 142 M
(###########) s
5 131 M
(Example 41:) s
5 120 M
(###########) s
5 109 M
([29.367605168715038]) s
5 98 M
(###########) s
5 87 M
(Example 42:) s
5 76 M
(###########) s
5 65 M
([27.446193773968886]) s
5 54 M
(###########) s
5 43 M
(Example 51:) s
5 32 M
(###########) s
5 21 M
([22.12145242997834]) s
5 10 M
(###########) s
_R
S
%%Page: (210) 210
%%BeginPageSetup
_S
18 36 translate
/pagenum 210 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (210) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Example 52:) s
5 681 M
(###########) s
5 670 M
([24.17603022706531]) s
5 659 M
(###########################################################################################) s
5 648 M
(Inference from Max Pooling Layer - Neuron  9) s
5 637 M
(###########################################################################################) s
5 626 M
(Example 11:) s
5 615 M
(###########) s
5 604 M
([24.667080337176497]) s
5 593 M
(###########) s
5 582 M
(Example 12:) s
5 571 M
(###########) s
5 560 M
([24.635666910615544]) s
5 549 M
(###########) s
5 538 M
(Example 21:) s
5 527 M
(###########) s
5 516 M
([28.941808459974094]) s
5 505 M
(###########) s
5 494 M
(Example 22:) s
5 483 M
(###########) s
5 472 M
([27.757346412645685]) s
5 461 M
(###########) s
5 450 M
(Example 3:) s
5 439 M
(###########) s
5 428 M
([15.424921894526316]) s
5 417 M
(###########) s
5 406 M
(Example 41:) s
5 395 M
(###########) s
5 384 M
([26.435844651843524]) s
5 373 M
(###########) s
5 362 M
(Example 42:) s
5 351 M
(###########) s
5 340 M
([24.70657439657199]) s
5 329 M
(###########) s
5 318 M
(Example 51:) s
5 307 M
(###########) s
5 296 M
([19.914307186980512]) s
5 285 M
(###########) s
5 274 M
(Example 52:) s
5 263 M
(###########) s
5 252 M
([21.763427204358788]) s
5 230 M
(---------------------------------------------------------------------------------------------) s
5 219 M
(362. \(FEATURE-DONE\) DeepLearning BackPropagation Implementation Update - 17 January 2017) s
5 208 M
(---------------------------------------------------------------------------------------------) s
5 197 M
(*\) DeepLearning BackPropagation code has been changed to have 3 inputs, 3 hidden and 3 output ) s
5 186 M
(layers) s
5 175 M
(with 3*3=9 input-hidden weights and 3*3=9 hidden-output weights with total of 18 weights) s
5 164 M
(*\) Software Analytics example has been updated with a third input and logs for it have been co) s
5 153 M
(mmitted) s
5 142 M
(to testlogs/.) s
5 131 M
(*\) Logs include a diff notes of how to extend this for arbitrary inputs and accuracy of backpr) s
5 120 M
(opagation) s
5 109 M
(which beautifully converges at ~10^-26 error after ~1000000 iterations.) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(--------) s
5 65 M
(363. \(FEATURE-DONE\) Software Analytics with DeepLearning - 18 January 2017) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(--------) s
5 32 M
(*\) An example software analytics code based on DeepLearning implementation has been added to) s
5 21 M
(software_analytics which import BackPropagation,Convolution and RecurrentLSTM to learn models) s
5 10 M
(from software analytics input variables \(CPU%, Memory% and TimeDuration%\)) s
_R
S
%%Page: (211) 211
%%BeginPageSetup
_S
18 36 translate
/pagenum 211 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (211) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(*\) Logs for all 3 models learnt with same input variables have been added to software_analytic) s
5 681 M
(s/testlogs) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(--------------------------------) s
5 637 M
(364. \(THEORY and IMPLEMENTATION\) Polynomial Encoding of a Text and 2 new distance measures bas) s
5 626 M
(ed on it - related to 2.9) s
5 615 M
(- 19 January 2017) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(--------------------------------) s
5 582 M
(*\) It has been earlier mentioned that an alphanumeric text can be construed as a polynomial de) s
5 571 M
(fined as f:position->alphabet) s
5 560 M
(*\) This python implementation encodes a text as a polynomial by applying NumPy Polyfit functio) s
5 549 M
(n on ordinal values of the text) s
5 538 M
(letter positions as y-axis and letter positions as x-axis.) s
5 527 M
(*\) A sample polynomial plotted with matplotlib has been added to testlogs/ alongwith logs) s
5 516 M
(*\) Once a text is plotted as a polynomial curve, it is natural to define distance between two ) s
5 505 M
(strings as distance) s
5 494 M
(between two respective polynomial encodings.) s
5 483 M
(*\) Usual distance measures for strings e.g Edit distance are somewhat qualitative and do not q) s
5 472 M
(uantify in numeric terms exactly.) s
5 461 M
(*\) Distance between polynomials of two texts is numerically quite sensitive to small changes i) s
5 450 M
(n texts and visually match the) s
5 439 M
(definition of "distance" between two polynomials of strings.) s
5 417 M
(There are two distance functions defined for polynomial representation of texts:) s
5 406 M
(*\) Distance between polynomials is defined by inner product of polynomials f\(x\) and g\(x\) and i) s
5 395 M
(n discrete version is the) s
5 384 M
(L2 norm : sum\(i\(f\(xi\)-g\(xi\)\)^2\)) s
5 373 M
(*\) Distance between polynomials considering them as two discrete set of probability distributi) s
5 362 M
(ons - Kullback-Leibler and Jensen-Shannon) s
5 351 M
( Divergence measures.) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(----------------------------------) s
5 307 M
(For example following are two polynomials fitted for ordinal values of 2 texts and comparative) s
5 296 M
( distance values are printed for) s
5 285 M
(edit distance and 2 polynomial distance measures:) s
5 274 M
(text9="fdjfjkkkkkkkkkkkkkfjjjjjjjjjjjskwwwwwwwwwwwwwwwwwwiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii) s
5 263 M
(iiiiiii") s
5 252 M
(text10="wjejwejwkjekwjkejkwjekjwkjekwjjoisjdiwidoiweiwie0iw0eio0wie0wie0iw0ei0cndknfndnfndnfkd) s
5 241 M
(jfkjdfkjd) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(----------------------------------) s
5 208 M
(X-axis: xrange\(94\)) s
5 197 M
(Y-axis: [102, 100, 106, 102, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, ) s
5 186 M
(107, 102, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 115, 107, 119, 119, 119, 119,) s
5 175 M
( 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 105, 105, 105, 105, 105) s
5 164 M
(, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 10) s
5 153 M
(5, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 1) s
5 142 M
(05, 105]) s
5 131 M
(Coefficients of fitting polynomial of degree 5: [  1.07744279e+02  -1.44951431e+00   1.3392800) s
5 120 M
(5e-01  -3.69850703e-03) s
5 109 M
(   4.03119671e-05  -1.53297932e-07]) s
5 98 M
(X-axis: xrange\(95\)) s
5 87 M
(Y-axis: [119, 106, 101, 106, 119, 101, 106, 119, 107, 106, 101, 107, 119, 106, 107, 101, 106, ) s
5 76 M
(107, 119, 106, 101, 107, 106, 119, 107, 106, 101, 107, 119, 106, 106, 111, 105, 115, 106, 100,) s
5 65 M
( 105, 119, 105, 100, 111, 105, 119, 101, 105, 119, 105, 101, 48, 105, 119, 48, 101, 105, 111, ) s
5 54 M
(48, 119, 105, 101, 48, 119, 105, 101, 48, 105, 119, 48, 101, 105, 48, 99, 110, 100, 107, 110, ) s
5 43 M
(102, 110, 100, 110, 102, 110, 100, 110, 102, 107, 100, 106, 102, 107, 106, 100, 102, 107, 106,) s
5 32 M
( 100]) s
5 21 M
(Coefficients of fitting polynomial of degree 5: [  1.13816036e+02  -2.17630157e+00   1.9635719) s
5 10 M
(5e-01  -6.45349037e-03) s
_R
S
%%Page: (212) 212
%%BeginPageSetup
_S
18 36 translate
/pagenum 212 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (212) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(   8.34267469e-05  -3.67775407e-07]) s
5 681 M
(...) s
5 670 M
(##################################################################################) s
5 659 M
(Two text polynomial ordinal points are represented as set of ordered pairs) s
5 648 M
(##################################################################################) s
5 637 M
(Wagner-Fischer Edit Distance for text9 and text10: 76) s
5 626 M
(Polynomial Encoding Edit Distance \(JensenShannon\) for text9 and text10:) s
5 615 M
(str1str2_tuple: [\(102, 119\), \(100, 106\), \(106, 101\), \(102, 106\), \(106, 119\), \(107, 101\), \(107,) s
5 604 M
( 106\), \(107, 119\), \(107, 107\), \(107, 106\), \(107, 101\), \(107, 107\), \(107, 119\), \(107, 106\), \(10) s
5 593 M
(7, 107\), \(107, 101\), \(107, 106\), \(107, 107\), \(102, 119\), \(106, 106\), \(106, 101\), \(106, 107\), \() s
5 582 M
(106, 106\), \(106, 119\), \(106, 107\), \(106, 106\), \(106, 101\), \(106, 107\), \(106, 119\), \(106, 106\),) s
5 571 M
( \(115, 106\), \(107, 111\), \(119, 105\), \(119, 115\), \(119, 106\), \(119, 100\), \(119, 105\), \(119, 119) s
5 560 M
(\), \(119, 105\), \(119, 100\), \(119, 111\), \(119, 105\), \(119, 119\), \(119, 101\), \(119, 105\), \(119, 1) s
5 549 M
(19\), \(119, 105\), \(119, 101\), \(119, 48\), \(119, 105\), \(105, 119\), \(105, 48\), \(105, 101\), \(105, 1) s
5 538 M
(05\), \(105, 111\), \(105, 48\), \(105, 119\), \(105, 105\), \(105, 101\), \(105, 48\), \(105, 119\), \(105, 1) s
5 527 M
(05\), \(105, 101\), \(105, 48\), \(105, 105\), \(105, 119\), \(105, 48\), \(105, 101\), \(105, 105\), \(105, 4) s
5 516 M
(8\), \(105, 99\), \(105, 110\), \(105, 100\), \(105, 107\), \(105, 110\), \(105, 102\), \(105, 110\), \(105, 1) s
5 505 M
(00\), \(105, 110\), \(105, 102\), \(105, 110\), \(105, 100\), \(105, 110\), \(105, 102\), \(105, 107\), \(105,) s
5 494 M
( 100\), \(105, 106\), \(105, 102\), \(105, 107\), \(105, 106\), \(105, 100\), \(105, 102\), \(105, 107\), \(10) s
5 483 M
(5, 106\), \(1, 100\)]) s
5 472 M
(421.059610023) s
5 461 M
(Polynomial Encoding Edit Distance \(L2 Norm\) for text9 and text10:) s
5 450 M
(str1str2_tuple: [\(102, 119\), \(100, 106\), \(106, 101\), \(102, 106\), \(106, 119\), \(107, 101\), \(107,) s
5 439 M
( 106\), \(107, 119\), \(107, 107\), \(107, 106\), \(107, 101\), \(107, 107\), \(107, 119\), \(107, 106\), \(10) s
5 428 M
(7, 107\), \(107, 101\), \(107, 106\), \(107, 107\), \(102, 119\), \(106, 106\), \(106, 101\), \(106, 107\), \() s
5 417 M
(106, 106\), \(106, 119\), \(106, 107\), \(106, 106\), \(106, 101\), \(106, 107\), \(106, 119\), \(106, 106\),) s
5 406 M
( \(115, 106\), \(107, 111\), \(119, 105\), \(119, 115\), \(119, 106\), \(119, 100\), \(119, 105\), \(119, 119) s
5 395 M
(\), \(119, 105\), \(119, 100\), \(119, 111\), \(119, 105\), \(119, 119\), \(119, 101\), \(119, 105\), \(119, 1) s
5 384 M
(19\), \(119, 105\), \(119, 101\), \(119, 48\), \(119, 105\), \(105, 119\), \(105, 48\), \(105, 101\), \(105, 1) s
5 373 M
(05\), \(105, 111\), \(105, 48\), \(105, 119\), \(105, 105\), \(105, 101\), \(105, 48\), \(105, 119\), \(105, 1) s
5 362 M
(05\), \(105, 101\), \(105, 48\), \(105, 105\), \(105, 119\), \(105, 48\), \(105, 101\), \(105, 105\), \(105, 4) s
5 351 M
(8\), \(105, 99\), \(105, 110\), \(105, 100\), \(105, 107\), \(105, 110\), \(105, 102\), \(105, 110\), \(105, 1) s
5 340 M
(00\), \(105, 110\), \(105, 102\), \(105, 110\), \(105, 100\), \(105, 110\), \(105, 102\), \(105, 107\), \(105,) s
5 329 M
( 100\), \(105, 106\), \(105, 102\), \(105, 107\), \(105, 106\), \(105, 100\), \(105, 102\), \(105, 107\), \(10) s
5 318 M
(5, 106\), \(1, 100\)]) s
5 307 M
(200.743617582) s
5 296 M
(##################################################################################) s
5 285 M
(From above, usual edit distance between 2 strings is less than polynomial distances of JensenS) s
5 274 M
(hannon and L2 norms. Ordinal values were not normalized by subtracting lowest possible ordinal) s
5 263 M
( value of unicode.) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(----------------------------------------------) s
5 219 M
(365. \(THEORY\) BKS conjecture and Stability of Interview TQBF - related to 359 - 21 January 201) s
5 208 M
(7) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(----------------------------------------------) s
5 175 M
(Caution: This derivation is still experimental with possible errors.) s
5 153 M
(Stability of a boolean function is defined as:) s
5 142 M
(        Stability\(f\) = Expectation\(f\(x\)*f\(y\)\)) s
5 131 M
(where y is correlated version of x.) s
5 109 M
(Stability of Majority is defined as \(From page 120 of AnalysisOfBooleanFunctions - Chapter 5 M) s
5 98 M
(ajority and Threshold Functions - https://www.cs.cmu.edu/~odonnell/boolean-analysis/\)) s
5 87 M
(        Stability\(Majn\) = Expectation\(Majn\(x\)*Majn\(y\)\)) s
5 76 M
(where y is correlated version of x.) s
5 54 M
(For infinite n, Stability\(Majn\) is bounded by 2/pi*arcsin\(rho\). Similar stability measure can ) s
5 43 M
(be derived for Interview TQBF threshold function also. Interview as a linear threshold functio) s
5 32 M
(n \(LTF\) can be defined as:) s
5 21 M
(        w1*a1 + w2*a2 + ... + wn*an > threshold_cutoff) s
5 10 M
(were each ai is an answer for a question qi and wi is the weightage associated with it. Berry-) s
_R
S
%%Page: (213) 213
%%BeginPageSetup
_S
18 36 translate
/pagenum 213 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (213) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Esseen Central Limit Theorem applies for Interview threshold function. CLT implies that a rand) s
5 681 M
(om variable S=X1 + X2 + X3 + ... + Xn which is a sum of random variables Xi\(s\) converges to Ga) s
5 670 M
(ussian Normal Distribution. Berry-Esseen CLT generalizes it to S=a1*x1 + a2*x2 + ... + an*xn w) s
5 659 M
(here sum\(ai^2\) is normalized and = 1. Thus interview threshold function and Berry-Esseen CLT a) s
5 648 M
(re structurally similar when weights wi are normalized and sum\(wi^2\) = 1. This implies intervi) s
5 637 M
(ew scores are approximately Gaussian \(Intuitively obvious because, bell curve corresponds to l) s
5 626 M
(arge proportion of voters scoring medium while tails correspond to very small percentage scori) s
5 615 M
(ng very low and very high\).) s
5 593 M
(Stability of Interview can be equivalently defined as:) s
5 582 M
(        Stability\(Interview\) = Expectation\(Interview\(x\)*Interview\(y\)\)) s
5 571 M
(where y is correlated version of x.) s
5 549 M
(Substituting the threshold definition of interview in Stability:) s
5 538 M
(        Stability\(Interview\) = Expectation\(\(w1*a1+w2*a2+...+wn*an\)*\(z1*b1+z2*b2+...+zn*bn\)\)) s
5 527 M
(                                = Expectation\(w1*z1*a1*b1 + w1*z1*a2*b2 + ... + wn*zn*an*bn\)) s
5 516 M
(                                = a1*b1*Expectation\(w1*z1\) + .... + an*bn*Expectation\(wn*zn\)) s
5 494 M
(Assuming for all ai=bi=a:) s
5 483 M
(        Stability\(Interview\) = a^2 * \(Expectation\(w1*z1\) + Expectation\(w1*z2\) + .... + Expecta) s
5 472 M
(tion\(wn*zn\)\)) s
5 450 M
(Expectation\(wi*zk\) = 0*0*1/4 + 0*1*1/4 + 1*0*1/4 + 1*1*1/4 for 4 possible values of \(wi,zk\) ea) s
5 439 M
(ch with probability 1/4.) s
5 417 M
(=>      Stability\(Interview\) = a^2 * \(n^2 * 0.25\) = a^2*n^2/4) s
5 395 M
(        Stability\(Interview\) = a^2*n^2/4 < 1 => a < 2/n) s
5 373 M
(If Stability\(Interview\) > Stability\(Majority\), BKS conjecture is true.) s
5 351 M
(=>      a^2*n^2 / 4 > 1 - 2/pi) s
5 340 M
(=>      a > 2/n * sqrt\(1-2/pi\)) s
5 329 M
(=>      a > 1.2056205488/n [For minimum case of n=2, a > 0.6028102744]) s
5 307 M
(Thus for Stability\(Interview\) to exceed Stability\(Majority\) and BKS Conjecture to be true , we) s
5 296 M
(ight per answer has to be > 1.2056/n approximately. For minimal base case n=2, a > 0.6028.) s
5 274 M
(Stability is alternatively defined as:) s
5 263 M
(        \(+1\)*Pr\(f\(x\) = f\(y\)\) + \(-1\)*Pr\(f\(x\) != f\(y\)\)) s
5 252 M
(which is just expansion of Expectation and there are two random variables \(+1 for f\(x\)=f\(y\)\) a) s
5 241 M
(nd \(-1 for f\(x\) != f\(y\)\)) s
5 230 M
(=> Stability\(f\(x\)\) = 1-2*Pr\(f\(x\) != f\(y\)\)) s
5 219 M
(=> Stability\(f\(x\)\) = 1-2*Sensitivity\(f\(x\)\)) s
5 208 M
(=> Sensitivity\(f\(x\)\) = 0.5-0.5*Stability\(f\(x\)\)) s
5 186 M
(NoiseSensitivity\(Interview\) which is the dual of Stability is defined as:) s
5 175 M
(        NoiseSensitivity\(Interview\) = 0.5-0.5*Stability\(Interview\) = 0.5-0.5*a^2*n^2/4) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(--------------------------) s
5 131 M
(366. \(FEATURE-DONE\)  Commits - 25 January 2017 - related to 2.9 and 345) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(--------------------------) s
5 98 M
(Berlekamp-Welch Polynomial Reconstruction Decoder Implementation \(for Reed-Solomon codes, text) s
5 87 M
(s, numerical points etc.,\)) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(--------------------------) s
5 54 M
(*\) Implements Berlekamp-Welch Polynomial Reconstruction Algorithm for reconstructing data from) s
5 43 M
( errors.) s
5 32 M
(*\) System of linear equations has been solved with NumPy/SciPy Linear Algebra solve\(\).) s
5 21 M
(*\) Logs show how well the reconstructed polynomial closely approximates the original polynomia) s
5 10 M
(l.) s
_R
S
%%Page: (214) 214
%%BeginPageSetup
_S
18 36 translate
/pagenum 214 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (214) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(*\) Error locator polynomial E is degree 1 and Numerator Q is of degree = number of points thus) s
5 681 M
( yielding Q/E=P \(reconstructed\)) s
5 670 M
(*\) Special case is natural language text with errors and a polynomial can be reconstructed fro) s
5 659 M
(m ordinal values of unicode) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(--------------------) s
5 615 M
(367. \(FEATURE-DONE\) Berlekamp-Welch Algorithm implementation - update for text message decodin) s
5 604 M
(g - 27 January 2017) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(--------------------) s
5 571 M
(*\) Using unicode values for ordinals with ord\(\) and inverting with chr\(\) causes overflow error) s
5 560 M
(s in SciPy/NumPy) s
5 549 M
(Linear Algebra Equation solver \(solve\(\)\) because evaluating polynomials for large messages cre) s
5 538 M
(ates huge numbers) s
5 527 M
(*\) Hence unicode has been replaced with a simple dictionaries - alphanumeric to numeric values) s
5 516 M
( and numeric to) s
5 505 M
(alphanumeric values.) s
5 494 M
(*\) With above 2 dictionaries an example text message with error \(garbled version of "thisissen) s
5 483 M
(tence"\) is list) s
5 472 M
(decoded with a window of possible values for each letter positions.) s
5 461 M
(*\) Logs show an approximate decoding of original message from message with error.) s
5 450 M
(*\) Garbled text with error was created from a previous execution of Berlekamp-Welch algorithm.) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(-------------------------------------------------) s
5 406 M
(368. \(THEORY\) KRW Conjecture, KW relations, Majority Voting Circuit Composition - 30 January 2) s
5 395 M
(017 and 31 January 2017 - related to 358) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(-------------------------------------------------) s
5 362 M
(Majority Voting Circuit for P\(Good\) binomial series RHS is a boolean circuit composition of NC) s
5 351 M
( Majority voting circuit with) s
5 340 M
(Voter Decision Functions for each voter variable input to Majority function defined as:) s
5 329 M
(         Maj\(m\) + Voter\(n\) = Maj\(Voter1\(x1,x2,...,xn\),Voter2\(x1,x2,...,xn\),...,Voterm\(x1,x2,..) s
5 318 M
(.,xn\)\).  ) s
5 307 M
(Assumption is Voter Decision Functions can be exactly learnt in Angluin Exact Learning model i) s
5 296 M
(.e Voters can have zero errors. ) s
5 285 M
(KRW Conjecture for boolean formula composition implies Depth\(f+g\) ~ Depth\(f\) + Depth\(g\) for co) s
5 274 M
(mposition f+g of two boolean formulae ) s
5 263 M
(\(fanout 1\) f and g. Applying KRW conjecture to Maj\(m\) + Voter\(n\) Majority voting composition:) s
5 252 M
(        Depth\(Maj\(m\) + Voter\(n\)\) ~ Depth\(Maj\(m\)\) + Depth\(Voter\(n\)\)) s
5 241 M
(where m is the number of voters and n is the number of variables per voter decision function.) s
5 219 M
(KW relations R\(f\) for a function f imply Depth\(f\) = CommunicationComplexity\(R\(f\)\).) s
5 208 M
(Karchmer-Wigderson relations for the composition are the following:) s
5 197 M
(-------------) s
5 186 M
(R\(Maj,Voter\):) s
5 175 M
(-------------) s
5 164 M
(        Alice: x in Inverse\(Maj + Voter\)\(0\)) s
5 153 M
(        Bob:  y in Inverse\(Maj + Voter\)\(1\)) s
5 142 M
(        Find xi and yi such that x != y) s
5 120 M
(Depth\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\)) s
5 109 M
(Thus Majority voting circuit composition is a KW relation.) s
5 98 M
(There is an equivalent notion of Universal relation U\(n\) for KW relation defined as:) s
5 87 M
(        Alice: x in {0,1}^\(n\)) s
5 76 M
(        Bob:  y in {0,1}^\(n\)) s
5 65 M
(        Find xi and yi such that x != y) s
5 43 M
(Result in 368.2 prove a lowerbound:) s
5 32 M
(        Depth\(g+U\(n\)\) = CommunicationComplexity\(R\(g,U\(n\)\)\) >= log L\(g\) + n - O\(m*logm/n\) where) s
5 21 M
( L\(g\) is the formula size of g.) s
5 10 M
(If g is Majority function and U\(n\) is individual voter decision function, depth of composition) s
_R
S
%%Page: (215) 215
%%BeginPageSetup
_S
18 36 translate
/pagenum 215 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (215) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( of Majority and Voter circuits is:) s
5 681 M
(        D\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\) >= log L\(Majority\) + n - O\(m*lo) s
5 670 M
(gm/n\)) s
5 659 M
(But formula size of Majority is O\(m^5.3\) implying depth of Majority+VoterDecisionFunction comp) s
5 648 M
(osition is:) s
5 637 M
(        D\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\) >= 5.3*logm  + n - O\(m*logm/n\)) s
5 626 M
(Thus depth of Majority voting circuit for P\(Good\) RHS is lowerbounded by a function of number ) s
5 615 M
(of voters and number of variables per voter decision function.) s
5 593 M
(368.1 prove a result which is an extension of 355.8:) s
5 582 M
(If a class C is exactly learnable in polynomial time, DTIME\(n^omega\(1\)\) is not in C. In mistak) s
5 571 M
(e bounded learning model, learner updates the hypothesis in each round based on mistake it mak) s
5 560 M
(es in labelling a point on hypercube. Mistake bounded learning very closely matches human expe) s
5 549 M
(riential learning and hence human voting error. If a class C is mistake bounded learnable in t) s
5 538 M
(ime T and mistakes M then, DTIME\(n + MT\) is not in C yielding a separation. Corollary: If a fu) s
5 527 M
(nction in NP is polynomial time exact learnable, there is no polynomial time algorithm for NP.) s
5 516 M
( For unbounded number of voters\(m\) and variables per voter decision function\(n\), depth of comp) s
5 505 M
(osition is unbounded. Depth Hierarchy Theorem 368.4 immediately applies for functions computab) s
5 494 M
(le by circuits of various depths of RHS composition. Number of variables per voter and depth o) s
5 483 M
(f composition are linearly related while Number of voters and depth of composition are logarit) s
5 472 M
(hmically related.) s
5 450 M
(Exact Learning implies zero error on both sides of P\(Good\) binomial series. Assuming all boole) s
5 439 M
(an function are exactly learnt, a Pseudorandom choice amongst those functions yields 100% perf) s
5 428 M
(ect choice. Quoting from 359:) s
5 406 M
(        Let number of  voter decision functions with goodness xi = m\(xi\). Thus N = m\(x1\)+m\(x2\)) s
5 395 M
(+m\(x3\)+...+m\(xn\)) s
5 384 M
(        Expected goodness of a PRG choice is:) s
5 373 M
(                1/N * summation\(xi*m\(xi\)\) = \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\) + ... + xn*m\(xn\)\) ) s
5 362 M
(/ N) s
5 351 M
(        When all voter functions have goodness 1 then PRG choice in LHS of P\(good\) has goodnes) s
5 340 M
(s 1.) s
5 318 M
(Similarly, exact learning implies all voter decision functions are 100% perfect with zero-erro) s
5 307 M
(r in LHS. Binomial series converges to 1 on both sides. LHS is a polynomial time algorithm \(be) s
5 296 M
(cause there is a PRG in P to make a choice\) to RHS majority voting NP problem \(assuming the ex) s
5 285 M
(actly learnt boolean functions are in NP\) implying P=NP. But from 368.1, if NP is learnable in) s
5 274 M
( polynomial time, NP does not have polynomial time algorithms and therefore P != NP - a contra) s
5 263 M
(diction. Thus polynomial time exact learning of an NP boolean function \(e.g 3SAT learnt from a) s
5 252 M
( truth table\) conflicts with P=NP and binomial series convergence.) s
5 230 M
(Usual process of high level human learning vis-a-vis boolean function learning is bottom-up. A) s
5 219 M
(tomic concepts are learnt in leaves and complexity is built  from leaf to root by learning new) s
5 208 M
( concepts which are functions of subtrees. Recursive Lambda Function Growth algorithm for lear) s
5 197 M
(ning texts described earlier in this document is based on this paradigm but constructs a compo) s
5 186 M
(sition tree top-down \(Mind grows lambda functions/circuits\). Generalization of Recursive Lambd) s
5 175 M
(a Function Growth is to learn a graph as opposed to trees. This is already done in Recursive G) s
5 164 M
(loss Overlap special case by merging/removing isomorphic, repetitive subtrees while tree is gr) s
5 153 M
(own top-down. This is why core number based classifier for the recursive gloss overlap graph w) s
5 142 M
(orks - repeating gloss nodes are connected to already discovered nodes by a new edge thereby c) s
5 131 M
(onverting a tree to graph top-down - Because most synset paths between words in a text go thro) s
5 120 M
(ugh "class label" vertices making them high degree and all such high degree vertices belong to) s
5 109 M
( a dense subgraph e.g k-core.) s
5 76 M
(Hypothetical exact learner for 3SAT - NP voter decision functions :) s
5 65 M
(-------------------------------------------------------------------) s
5 54 M
(Given a truth table of size n*2^n for n variables with truth values:) s
5 43 M
(        *\) Find a set of binary strings, satisfying truth values 1) s
5 32 M
(        *\) Construct a DNF for complement of the previous set) s
5 21 M
(        *\) Complement the DNF to get CNF for original set) s
_R
S
%%Page: (216) 216
%%BeginPageSetup
_S
18 36 translate
/pagenum 216 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (216) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Example - For following truth table, to construct CNF for satisfying assignments {000, 001, 01) s
5 681 M
(1, 101, 110}:) s
5 670 M
(        ------------------------------------------) s
5 659 M
(        x1 x2 x3        truthvalue      complement) s
5 648 M
(        ------------------------------------------) s
5 637 M
(        0  0  0         1               0) s
5 626 M
(        0  0  1         1               0) s
5 615 M
(        0  1  0         0               1) s
5 604 M
(        0  1  1         1               0) s
5 593 M
(        1  0  0         0               1) s
5 582 M
(        1  0  1         1               0) s
5 571 M
(        1  1  0         1               0) s
5 560 M
(        1  1  1         0               1) s
5 538 M
(DNF for complement set {010,100,111} is:) s
5 527 M
(        !x1x2!x3 + x1!x2!x3 + x1x2x3) s
5 516 M
(and the CNF learnt is complement of DNF:) s
5 505 M
(        \(x1 + !x2 + x3\)\(!x1 + x2 + x3\)\(!x1 + !x2 + !x3\)) s
5 494 M
(with satisfying assignments {000, 001, 011, 101, 110}) s
5 472 M
(This exact learner requires O\(2^n\) time which is exponential in number of variables.) s
5 450 M
(368.6 describes an algorithm \(CDNF\) to learn any boolean functions in time polynomial in numbe) s
5 439 M
(r of variables,its DNF size and CNF size. This together with 368.1 implies a polynomial time l) s
5 428 M
(earning algorithm for NP and existence of polynomial time learning algorithm for NP\(3CNF\) indi) s
5 417 M
(cates NP does not have polynomial time algorithms \(and Expoential Time Hypothesis could be tru) s
5 406 M
(e\). This coincides with evidences towards divergence of P\(Good\) series and superpolynomial siz) s
5 395 M
(e circuits for 3SAT implied in 53.16, 256, 265, 275, 318 \(Majority Lemma for Hardness Amplific) s
5 384 M
(ation\) and 355. This is a serious contradiction - exact learning derandomizes both sides of P\() s
5 373 M
(Good\) circuit. LHS non-majority social choice is zero-error and equals 1 while RHS if NP also ) s
5 362 M
(converges to 1 and implies a polynomial time algorithm for NP while exact learning forbids pol) s
5 351 M
(ynomial time algorithm for NP. Resolving this impasse amounts to defining what is meant by exa) s
5 340 M
(ctness and zero-error in voting decision and social choice \(Perfection commonsensically enshri) s
5 329 M
(nes zero-error decision making for unbounded number of scenarios i.e variables while exact lea) s
5 318 M
(rning assumes bounded set of variables\)) s
5 296 M
(References:) s
5 285 M
(----------) s
5 274 M
(368.1 Exact Learning implies Derandomization \(i.e. P=BPP\) and Mistake bound learning - [Klivan) s
5 263 M
(sKothariOliveira] - http://www.cs.princeton.edu/~kothari/ccc13.pdf) s
5 252 M
(368.2 KRW Conjecture, KW relations and Lowerbound for Depth of Boolean Circuit Composition - [) s
5 241 M
(GavinskyMeirWeinsteinWigderson] - https://video.ias.edu/sites/video/files/Meir.pdf) s
5 230 M
(368.3 Generalization of Spira's Theorem - https://www.cs.utexas.edu/users/panni/spira.pdf - Sp) s
5 219 M
(ira's theorem transforms every circuit of size S  to a circuit of depth O\(logS\).) s
5 208 M
(368.4 Depth Hierarchy Theorem - [RossmanServedioTan] - Theorem 1 - https://arxiv.org/pdf/1504.) s
5 197 M
(03398v1.pdf - Circuit of depth <= d-1 with size <= 2^\(n^\(1/6\(d-1\)\)\) agrees with a function of ) s
5 186 M
(depth d on at most 0.5 + n^Omega\(-1/d\) fraction of inputs.) s
5 175 M
(368.5 Formula size of Majority function - [Valiant] - http://www.sciencedirect.com/science/art) s
5 164 M
(icle/pii/0196677484900166?via%3Dihub) s
5 153 M
(368.6 Exact Learning of Boolean Functions from Monotone Theory - [Nader H. Bshouty] - http://w) s
5 142 M
(ww.cs.technion.ac.il/~bshouty/MyPapers/Exact-Learning-Boolean-Functions-via-the-Monotone-Theor) s
5 131 M
(y.ps - CDNF algorithm - Section 6 - exactly learns any boolean function in time polynomial in ) s
5 120 M
(number of variables, size of DNF and CNF with polynomial membership and equivalence\(counterexa) s
5 109 M
(mple\) queries.) s
5 98 M
(368.7 BPEXP is believed to collapse to EXP - if P=BPP then BPEXP=EXP \(but converse BPEXP=EXP i) s
5 87 M
(mplying P=BPP is not known\) - https://www.ime.usp.br/~spschool2016/wp-content/uploads/2016/07/) s
5 76 M
(CarboniOliveiraIgor.pdf) s
5 65 M
(368.8 From [Klivans-Fortnow] result mentioned in 368.1, if class EXP is efficiently PAC learna) s
5 54 M
(ble with membership queries, BPEXP is not in EXP) s
5 43 M
(contradicting BPEXP=EXP by homogeneous voter Condorcet Jury Theorem BPEXP circuit derandomizat) s
5 32 M
(ion mentioned in 400. BPEXP=EXP implies hence that EXP is not efficiently PAC learnable.) s
5 21 M
(368.9 Extended Depth Hierarchy Theorem - https://dl.acm.org/citation.cfm?id=3095799 - [Hastad-) s
5 10 M
(Rossman-Servedio-Tan] - For any d < logn/loglogn there is a function F computed by a read once) s
_R
S
%%Page: (217) 217
%%BeginPageSetup
_S
18 36 translate
/pagenum 217 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (217) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( formula of depth d but any circuit of depth d-1 and size O\(2^O\(n^\(1/5d\)\)\) agrees with F by a ) s
5 681 M
(fraction of 0.5 + O\(n^\(-1/5d\)\) inputs. This approximation by smaller depth circuit has applica) s
5 670 M
(tions in forecasting accuracy of previous Majority+VoterSAT boolean composition voting - as al) s
5 659 M
(l Voters' decision SAT Circuit depth tends to infinity, accuracy of election forecasting tends) s
5 648 M
( to 50%.) s
5 637 M
(368.10 Quasidemocracies - Banzhaf Power Index - https://gilkalai.files.wordpress.com/2018/08/k) s
5 626 M
(alai-icm2018.pptx - Quasi democracies are electorate in which each voter has decision SAT of n) s
5 615 M
( variables and as n tends to infinity, probability of forecasting the outcome of the election ) s
5 604 M
(by any voter tends to zero as other voters vote at random. This needs to be contrasted with pr) s
5 593 M
(evious depth hierarchy ramification - number of variables per SAT versus depth of the CircuitS) s
5 582 M
(AT.) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(------------------) s
5 538 M
(369. \(FEATURE-DONE\) An experimental special case k-CNF SAT Solver algorithm implementation - 3) s
5 527 M
(1 January 2017) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(------------------) s
5 494 M
(Algorithm:) s
5 483 M
(----------) s
5 472 M
(*\) Create a k-DNF from k-CNF input by negating literals in all clauses of k-CNF) s
5 461 M
(*\) Binary encode the clauses of k-DNF into set of binary strings of length n where n is number) s
5 450 M
( of variables) s
5 439 M
(*\) Compute the complement of the previous binary encoded set from set of 2^n binary strings) s
5 428 M
(*\) These are satisfying assignments) s
5 417 M
(*\) Presently requires all literals in each CNF clause) s
5 406 M
(*\) Implemented for simulation of a Majority Voting with Voter SATs) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(---------------------------------) s
5 362 M
(370. \(THEORY\) Majority Boolean Function, Sensitivity, Roth's estimate and 2-Coloring/Complemen) s
5 351 M
(t Functions of Sequences -) s
5 340 M
(1 February 2017 - related to 24,338 - Important draft updates to https://arxiv.org/pdf/1106.41) s
5 329 M
(02v1) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(---------------------------------) s
5 296 M
(Boolean Majority Function finds the majority binary value of input binary string of length n. ) s
5 285 M
(Any binary string of length n can be) s
5 274 M
(considered as 2-coloring of bit position integers with corresponding complement functions for ) s
5 263 M
(each color: f\(x\) is for 1s colored red and) s
5 252 M
(g\(x\) is for 0s colored blue. For example, 1001011 is a 2-colored sequence with red \(1\) in bit ) s
5 241 M
(positions 1,4,6,7 and blue \(0\) in bit positions) s
5 230 M
(2,3,5. Complement functions for this bit position binary coloring are defined as:) s
5 219 M
(        f\(1\)=1) s
5 208 M
(        f\(2\)=4) s
5 197 M
(        f\(3\)=6) s
5 186 M
(        f\(4\)=7) s
5 175 M
(and) s
5 164 M
(        g\(1\)=2) s
5 153 M
(        g\(2\)=3) s
5 142 M
(        g\(3\)=5) s
5 131 M
(Natually, arithmetic progressions and monochromatic arithmetic progressions on these bit posit) s
5 120 M
(ions can be defined. Discrepancy is the) s
5 109 M
( difference between number of colored integers in an arithmetic progression. Roth's estimate w) s
5 98 M
(hich is the minimum\(maximum\(discrepancy\)\)) s
5 87 M
(for all possible colorings \(i.e all possible binary strings\) is >= N^\(1/4+epsilon\). For majori) s
5 76 M
(ty function 2-coloring, this estimate is) s
5 65 M
(the difference between number of 0s and 1s in the input to majority function with probability ) s
5 54 M
(equal to natural density of min\(max\(\)\) arithmetic progression.  If majority function outputs 1) s
5 43 M
(, |f\(x\)| > |g\(x\)| and if 0, |g\(x\)| > |f\(x\)|. From this an approximate estimate of number of 1s) s
5 32 M
( and 0s in majority function input can be obtained \(with probability equal to natural density\)) s
5 21 M
(:) s
5 10 M
(        |f\(x\)| = number of 1s = [N + N^\(1/4+epsilon\)]/2  if majority function outputs 1) s
_R
S
%%Page: (218) 218
%%BeginPageSetup
_S
18 36 translate
/pagenum 218 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (218) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        |g\(x\)| = number of 0s = [N - N^\(1/4+epsilon\)]/2  if majority function outputs 1) s
5 681 M
(and vice versa if majority function outputs 0. For previous example, majority is 1 and :) s
5 670 M
(        |f\(x\)| = number of 1s = [7 + 7^0.25]/2 = 4.313288 ~ 4) s
5 659 M
(        |g\(x\)| = number of 0s = [7 - 7^0.25]/2 = 2.6867 ~ 3) s
5 648 M
(Sensitivity of Majority function is number of bits to be flipped to change the outcome which i) s
5 637 M
(s nothing but the discrepancy \(|f\(x\)| - |g\(x\)|\) wth probability equal to natural density and i) s
5 626 M
(s lowerbounded by Roth's estimate. Formally, Sensitivity\(Majority\) > N^\(1/4+epsilon\). An impor) s
5 615 M
(tant special case is when input to majority is a binary string 2-colored by prime-composite co) s
5 604 M
(mplement functions in bit positions i.e prime bit positions are 1 and composite bit positions ) s
5 593 M
(are 0 and majority function outputs 0 or 1 \(Approximate number of primes less than N = pi\(N\) ~) s
5 582 M
( N/logN from Prime Number Theorem\).) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(-------------------------------------------) s
5 538 M
(371. \(FEATURE-DONE\) Reinforcement Learning - ThoughtNet based Recommender Systems Implementati) s
5 527 M
(on Update - 2 February 2017) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(-------------------------------------------) s
5 494 M
(*\) Recursive Gloss Overlap classifier disambiguation has been updated to invoke NLTK lesk algo) s
5 483 M
(rithm function\(\) with options to) s
5 472 M
(choose between PyWSD lesk implementation and best_matching_synset\(\) primitive disambiguation n) s
5 461 M
(ative implementation) s
5 450 M
(*\) New usecase shopping cart example with book reviews has been added) s
5 439 M
(*\) Fixed a major bug in RecursiveGlossOverlap Classifier in definition graph construction : Ed) s
5 428 M
(ges for all lemma names of previous level synsets were added which bloated the graph and somew) s
5 417 M
(hat skewed core number of the graph. Changed it to create edge only for one lemma name. All ot) s
5 406 M
(her Recursive Gloss Overlap implementations in InterviewAlgorithm/ folder already have this fi) s
5 395 M
(x. Regenerated the hypergraph for shoppingcart3 example Logs for this have been added to testl) s
5 384 M
(ogs/) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(------------------------------------------) s
5 340 M
(372. \(FEATURE-DONE\) Recursive Gloss Overlap classifier update - 3 February 2017) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(------------------------------------------) s
5 307 M
(Uncommented NetworkX matplotlib graph plotting to get a graph for a sample document definition) s
5 296 M
( graph. Logs and PNG file for this classification have been added to testlogs/. Also did some ) s
5 285 M
(experimentation with various documents and classification based on core number has been reason) s
5 274 M
(ably accurate \(relevance of unsupervised core number based classification to the document's ac) s
5 263 M
(tual class decreases with core number\) and top percentage classes reflect the subject matter o) s
5 252 M
(f the document. Also best_matching_synset\(\) lesk disambiguation implemented in AsFer and NLTK ) s
5 241 M
(lesk\(\) functions are faster than PyWSD simple_lesk\(\).) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(------------) s
5 197 M
(373. \(THEORY and FEATURE-DONE\) CNFSAT solver update - polynomial time approximation - 5 Februa) s
5 186 M
(ry 2017) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(------------) s
5 153 M
(Solves CNFSAT by a Polynomial Time Approximation scheme:) s
5 142 M
(       - Encode each clause as a linear equation in n variables: missing variables and negated) s
5 131 M
( variables are 0, others are 1) s
5 120 M
(       - Solve previous system of equations by least squares algorithm to fit a line) s
5 109 M
(       - Variable value above 0.5 is set to 1 and less than 0.5 is set to 0) s
5 98 M
(       - Rounded of assignment array satisfies the CNFSAT with high probability) s
5 87 M
(Essentially each CNF is represented as a matrix A and solved by AX=B where X is the column vec) s
5 76 M
(tor of variables and B is identity column vector) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(--------------) s
5 32 M
(374. \(FEATURE-DONE\) Java Spark Streaming - Generic Stream Receiver Implementation - 6 February) s
5 21 M
( 2017) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (219) 219
%%BeginPageSetup
_S
18 36 translate
/pagenum 219 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (219) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(--------------) s
5 681 M
(Spark Streaming Java implementation to receive generic stream of unstructured text data from a) s
5 670 M
(ny URL and Sockets has been added to) s
5 659 M
(NeuronRain AsFer java/bigdata_analytics/. It is based on Spart 2.1.0 + Hadoop 2.7 single node ) s
5 648 M
(cluster. Following are the setup prerequisites:) s
5 626 M
(*\) Oracle Java 8 compiler and runtime and PATH set to it) s
5 615 M
(*\) export CLASSPATH=/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/spark-streaming_2.11-2) s
5 604 M
(.1.0.jar:.:/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/scala-library-2.11.8.jar:/home/) s
5 593 M
(shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/spark-sql_2.11-2.1.0.jar:/home/shrinivaasanka/sp) s
5 582 M
(ark-2.1.0-bin-hadoop2.7/jars/spark-core_2.11-2.1.0.jar:/usr/lib/jvm/java-8-oracle/bin:/usr/loc) s
5 571 M
(al/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin) s
5 560 M
(*\) Compiled as: javac SparkGenericStreaming.java) s
5 549 M
(*\) JAR packaging of SparkGenericStreaming*.class :  jar -cvf sparkgenericstreaming.jar *class) s
5 538 M
(*\) Example Spark submit commandline for 2 local threads \(2 cores\) and data streamed from twitt) s
5 527 M
(er :) s
5 516 M
(/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/bin/spark-submit --class SparkGenericStreaming ) s
5 505 M
(--master local[2] sparkgenericstreaming.jar "https://twitter.com/search?f=tweets&vertical=news) s
5 494 M
(&q=Chennai&src=typd") s
5 472 M
(Spark Streaming Java implementation complements Streaming Abstract Generator Python native abs) s
5 461 M
(traction implemented in AsFer. Advantage of Spark Streaming is it can process realtime streame) s
5 450 M
(d data from many supported datasources viz.,Kinesis,Kafka etc., This implementation is generic) s
5 439 M
(, customized for arbitrary streaming data.) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(-------------------------) s
5 395 M
(375. \(FEATURE-DONE\) Java Spark Streaming for Generic data - Jsoup ETL integration - 7 February) s
5 384 M
( 2017) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(-------------------------) s
5 351 M
(*\) Jsoup HTML parser has been imported into SparkGenericStreaming.java and a very basic Extrac) s
5 340 M
(t-Transform-Load is) s
5 329 M
(performed on the URL passed in with a special boolean flag to use Jsoup) s
5 318 M
(*\) Jsoup connects to URL and does a RESTful GET of the HTML, extracts text from HTML and store) s
5 307 M
(s the text in Spark RDD) s
5 296 M
(*\) receive\(\) is periodically invoked and word count is computed) s
5 285 M
(*\) foreachRDD\(\) is invoked on the DStream to iterate through all words in DStream.) s
5 274 M
(*\) forEach\(\) invokes a lambda function to print the word text) s
5 263 M
(*\) Logs for this have been added to spark_streaming/testlogs/) s
5 241 M
(spark-submit commandline requires additional classpath to jsoup .jar with --jars option as bel) s
5 230 M
(ow:) s
5 219 M
(/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/bin/spark-submit --class SparkGenericStreaming ) s
5 208 M
(--master local[2] --jars /home/shrinivaasanka/jsoup/jsoup-1.10.2.jar sparkgenericstreaming.jar) s
5 197 M
( "https://twitter.com/search?f=tweets&vertical=news&q=Chennai&src=typd" 2>&1 > testlogs/SparkG) s
5 186 M
(enericStreaming.out.7February2017) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(-------------------------) s
5 142 M
(376. \(THEORY and FEATURE-DONE\) Approximate SAT solver update - 8 February 2017 - related to 37) s
5 131 M
(3) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(-------------------------) s
5 98 M
(Updated CNFSATSolver.py to create set of random 3CNFs and verify if the least squares assignme) s
5 87 M
(nt is satisfied. Presently it creates randomly concatenated CNFs of 10 variables and 10 clause) s
5 76 M
(s in an infinite loop and prints a percentage of satisfied 3CNFs so far by least square heuris) s
5 65 M
(tic. Logs for this percentage after few hundred iterations has been committed to testlogs/. It) s
5 54 M
( shows an intriguing convergence at 80% \(i.e 80% of 3CNFs are satisfied\) after few hundred ite) s
5 43 M
(rations of random CNFs. A caveat has to be mentioned here on hardness of approximation and PCP) s
5 32 M
( theorem: MaxSAT and Clique do not have Polynomial Time Approximation Scheme unless P=NP. PTAS) s
5 21 M
( usually creates a solution within 1+/-epsilon distance from optimal. MaxSAT problem tries to ) s
5 10 M
(maximize number of clauses satisified in a CNF. But this least square SAT solver is exact SAT ) s
_R
S
%%Page: (220) 220
%%BeginPageSetup
_S
18 36 translate
/pagenum 220 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (220) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(solver and the percentage of 80% found in testlogs/ implies 80% of CNFs were satisfied. This c) s
5 681 M
(ould heuristically imply 80% of clauses per CNF were satisfied on the average. Though this per) s
5 670 M
(centage is specific to 10 clauses * 10 variables, similar asymptotic convergence to ~79% was o) s
5 659 M
(bserved for 5 clauses * 5 variables. Assuming this implies epsilon to be 0.2 in general \(avera) s
5 648 M
(ge 20% distance from optimal for all CNFs\), could imply a PTAS \(because solving system of equa) s
5 637 M
(tions by Least Squares or Gaussian Elimination is polynomial in number of clauses\) for MaxSAT ) s
5 626 M
(which satisfies 80% clauses per CNF on average and P=NP.\(Related: Unique Games Conjecture\)) s
5 604 M
(References:) s
5 593 M
(----------) s
5 582 M
(376.1 PCP theorem and Hardness of Approximation - http://www.cs.jhu.edu/~scheideler/courses/60) s
5 571 M
(0.471_S05/lecture_9.pdf) s
5 560 M
(376.2 PCP theorem and Hardness of Approximation - http://pages.cs.wisc.edu/~dieter/Courses/200) s
5 549 M
(8s-CS880/Scribes/lecture17.pdf) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(-----------------) s
5 505 M
(377. \(FEATURE-DONE\) Java Spark Streaming Generic Receiver update - 9 February 2017) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-----------------) s
5 472 M
(*\) Objectified the SparkGenericStreaming more by moving the SparkConf and JavaStreamingContext) s
5 461 M
( into) s
5 450 M
(class private static data.) s
5 439 M
(*\) new method SparkGenericStreamingMain\(\) instantiates the Spark Context and returns the JavaP) s
5 428 M
(airDStream<String,Integer> wordCounts object) s
5 417 M
(*\) main\(\) static method instantiates SparkGenericStreaming class and receives wordCounts JavaP) s
5 406 M
(airDStream from SparkGenericStreamingMain\(\)) s
5 395 M
(method) s
5 384 M
(*\) Spark JavaStreamingContext output operations are invoked by start\(\) and print actions by la) s
5 373 M
(mbda expressions.) s
5 362 M
(*\) SparkConf and JavaStreamingContext variables have to be static because Not Serializable exc) s
5 351 M
(eptions are thrown otherwise.) s
5 340 M
(*\) sparkgenericstreaming.jar has been repackaged by recompilation.) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(------------------------------------) s
5 296 M
(378. \(FEATURE-DONE\) Spark Streaming Java Update - Java Bean DataFrame\(Dataset\) creation, Hive ) s
5 285 M
(Metastore support and persistence of) s
5 274 M
(DataFrame to Hive and as a Parquet file - 10 February 2017) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(------------------------------------) s
5 241 M
(*\) New JavaSparkSingletonInstance class for singleton Spark Context has been added.) s
5 230 M
(*\) New Java Bean Word.java has been added for creating DataFrame from JavaRDD iterable) s
5 219 M
(*\) DataFrame has been persisted to filesystem as .parquet file in overwrite mode of DataFrameW) s
5 208 M
(riter) s
5 197 M
(*\) DataFrame has also been persisted to Hive MetaStore db which Spark supports \(Shark SQL\) wit) s
5 186 M
(h saveAsTable\(\)) s
5 175 M
(*\) SparkGenericStreaming has been rewritten to do transformations on words JavaRDD iterable wi) s
5 164 M
(th VoidFunction\(\) in) s
5 153 M
(2-level nested iterations of foreachRDD\(\) and forEach\(\)) s
5 142 M
(*\) map\(\) transformation for each row in JavaRDD throws a null pointer exception and inner call) s
5 131 M
(\(\) is never invoked.) s
5 120 M
(*\) This has been remedied by replacing map\(\) with a forEach\(\) and storing the rows in each RDD) s
5 109 M
( in an ArrayList) s
5 98 M
(*\) With Hive MetaStore + Shark integration, Streaming_AbstractGenerator.py abstraction now has) s
5 87 M
( access to Java Spark Streaming) s
5 76 M
(because it already supports Hive via thrift and NeuronRain now has ability to analyze any real) s
5 65 M
(time or batch unstructured data.) s
5 54 M
(*\) Primitive ETL to just scrape words in URL text sufficiently tracks trending topics in socia) s
5 43 M
(l media.) s
5 32 M
(*\) Hive metastore db, Spark warehouse data have been committed and Logs for this has been adde) s
5 21 M
(d to testlogs/) s
5 10 M
(*\) sparkgenericstreaming.jar has been repackaged with recompilation) s
_R
S
%%Page: (221) 221
%%BeginPageSetup
_S
18 36 translate
/pagenum 221 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (221) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(*\) Updated spark-submit commandline: /home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/bin/spark-) s
5 681 M
(submit --class SparkGenericStreaming --master local[2] --jars /home/shrinivaasanka/spark-2.1.0) s
5 670 M
(-bin-hadoop2.7/jars/scala-reflect-2.11.8.jar,/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/ja) s
5 659 M
(rs/spark-catalyst_2.11-2.1.0.jar,/home/shrinivaasanka/jsoup/jsoup-1.10.2.jar sparkgenericstrea) s
5 648 M
(ming.jar "http://www.facebook.com") s
5 637 M
(*\) Updated CLASSPATH: export CLASSPATH=/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/sca) s
5 626 M
(la-reflect-2.11.8.jar:/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/spark-catalyst_2.11-) s
5 615 M
(2.1.0.jar:/home/shrinivaasanka/jsoup/jsoup-1.10.2.jar:/home/shrinivaasanka/spark-2.1.0-bin-had) s
5 604 M
(oop2.7/jars/spark-streaming_2.11-2.1.0.jar:.:/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/ja) s
5 593 M
(rs/scala-library-2.11.8.jar:/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/spark-sql_2.11) s
5 582 M
(-2.1.0.jar:/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/jars/spark-core_2.11-2.1.0.jar:/usr/) s
5 571 M
(lib/jvm/java-8-oracle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(---------------------------------------------) s
5 527 M
(379. \(THEORY\) Machine Translation, Recursive Gloss Overlap Graphs in different Natural Languag) s
5 516 M
(es and Graph Homomorphisms - 13 February 2017) s
5 505 M
(- related to 178) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(---------------------------------------------) s
5 472 M
(Machine Translation is equivalent to graph homomorphism between 2 recursive gloss overlap grap) s
5 461 M
(hs of a text in 2 natural languages where) s
5 450 M
(homomorphism f for translation is defined as:) s
5 439 M
(        if \(u,v\) is in E\(G1\) then \(f\(u\),f\(v\)\) is in E\(G2\)) s
5 428 M
(for recursive gloss overlap graphs G1 and G2 for languages L1 \(e.g. English\) and L2 \(e.g Tamiz) s
5 417 M
(h\) constructed from respective ontologies.) s
5 406 M
(In previous definition, u and v are two words in natural language L1 and f\(u\) and f\(v\) are two) s
5 395 M
( words in natural language L2.) s
5 384 M
(This relaxes the isomorphism requirement mentioned in 178. Set of all digraphs G such that the) s
5 373 M
(re is a homomorphism from G to a graph H is) s
5 362 M
(denoted by L\(H\). Guessing the set of digraphs G for a digraph H implies finding set of all tra) s
5 351 M
(nslations for a text from a set of natural) s
5 340 M
(languages to another natural language. This guessing problem is known by Dichotomy Conjecture ) s
5 329 M
(to be either in P or NP-Complete.) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(--------------------------------------------) s
5 285 M
(380. \(FEATURE-DONE\) Approximate SAT solver update - 14 February 2017) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(--------------------------------------------) s
5 252 M
(*\) Changed number of variables and clauses to 14 and 14 with some additional debug statements.) s
5 241 M
(*\) After 4000+ iterations ratio of random 3SAT instances satisfied is: ~70%) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(----------------------------------------------) s
5 197 M
(381. \(FEATURE-DONE\) Java Spark Streaming with NetCat WebServer update and some analysis on Hiv) s
5 186 M
(eServer2+Spark Integration - 18 February 2017) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(----------------------------------------------) s
5 153 M
(*\) Rewrote SparkGenericStreaming.java mapreduce functions with Spark 2.1.0 + Java 8 lambda fun) s
5 142 M
(ctions) s
5 131 M
(*\) Enabled Netcat Socket streaming boolean flag instead of URL socket with Jsoup) s
5 120 M
(*\) With above changes \(and no HiveServer2\), socket streaming receiver works and Hive saveAsTab) s
5 109 M
(le\(\)/Parquet file saving works.) s
5 98 M
(*\) HiveServer2 was enabled in Spark Conf by adding hive-site.xml in spark/conf directory. \(Two) s
5 87 M
( example hive-site.xml\(s\) have been) s
5 76 M
(committed to repository.\)) s
5 65 M
(*\) Spark 2.1.0 was started with hive-site.xml to connect to HiveServer2 2.1.1. This resulted i) s
5 54 M
(n 2 out of heapspace errors as documented) s
5 43 M
(in testlogs/ with exception "Error in instantiating HiveSessionState".) s
5 32 M
(*\) Such OOM errors with HiveServer2 and Spark have been reported earlier in Apache JIRA. Inste) s
5 21 M
(ad of TTransport, FrameTransport was also) s
5 10 M
(tried which caused "Frame size exceeds maximum frame size" errors. SASL was also disabled in h) s
_R
S
%%Page: (222) 222
%%BeginPageSetup
_S
18 36 translate
/pagenum 222 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (222) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ive-site.xml.) s
5 681 M
(*\) Reason for such OOM errors in HiveServer2 seems to be heavy memory footprint of HiveServer2) s
5 670 M
( and Spark together and CPU usage reaches 100%) s
5 659 M
(for both cores. Might require a high-end server with large RAM size so that heapspace is set t) s
5 648 M
(o atleast 8GB. HiveServer2 is known to be) s
5 637 M
(memory intensive application. Also Spark only supports Hive 1.2.1 and not Hive 2.1.1 which cou) s
5 626 M
(ld be the reason.) s
5 615 M
(*\) Increasing Java Heap space in spark config file \(spark.executor.memory and spark.driver.mem) s
5 604 M
(ory\) also did not have effect.) s
5 593 M
(*\) Setting HADOOP_HEAPSIZE also did not have effect. OOM error occurs while instantiating Hive) s
5 582 M
(SessionState and bootstrapping Hive databases) s
5 571 M
(\(get_all_databases\). Isolated beeline CLI connection works though with HiveServer2.) s
5 560 M
(*\) Hence presently Spark Streaming works with Spark provided metastore_db Hive Support and Par) s
5 549 M
(quet file support.) s
5 538 M
(*\) testlogs/ have stream processing logs for NetCat \(NC\) webserver.) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(-------------------------------------------) s
5 494 M
(382. \(FEATURE-DONE\) Spark Version Upgrade for Recursive Gloss Overlap Graph Intrinsic merit an) s
5 483 M
(d Discrete Hyperbolic Factorization Cloud) s
5 472 M
(Implementations - 21 February 2017) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(-------------------------------------------) s
5 439 M
(*\) Re-executed Interview Algorithm and Factorization Spark Cloud implementations with Spark 2.) s
5 428 M
(1.0 and Cython optimization for Recursive) s
5 417 M
(Gloss Overlap Graph construction) s
5 406 M
(*\) Earlier these were benchmarked with Spark 1.5.x) s
5 395 M
(*\) Added debug statements in python-src/DiscreteHyperbolicFactorizationUpperbound_Bitonic_Spar) s
5 384 M
(k.py and file locations updated. Logs) s
5 373 M
(committed to python-src/testlogs and python-src/InterviewAlgorithm/testlogs) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-------------------------------------------) s
5 329 M
(383. \(THEORY\) Recursive Gloss Overlap Graphs, Intrinsic Merit and Korner Graph Entropy - relat) s
5 318 M
(ed to 348 - 22 February 2017) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(-------------------------------------------) s
5 285 M
(Graph representation of text and deriving a quantitative intrinsic merit from recursive gloss ) s
5 274 M
(overlap definition graph by projecting) s
5 263 M
(WordNet onto the document has been described previously. Spectral Graph Theory qualitatively a) s
5 252 M
(nalyzes the graph in terms of eigenvalues of) s
5 241 M
(its Laplacian. Quantitative Graph Theory provides various statistical tools to quantify a grap) s
5 230 M
(h in terms of its complexity. Measuring) s
5 219 M
(meaningfulness of a text has been translated to the problem finding easy paths between concept) s
5 208 M
(s and keywords in the text. This is computational linguistic Symbol Grounding problem of learn) s
5 197 M
(ing from dictionary definitions \(refer 216.3\). Korner's Graph Entropy defines the entropy of a) s
5 186 M
(graph G as follows:) s
5 175 M
(                KE\(G\) = minimum\(I\(X,Y\)\)) s
5 164 M
(where X is a randomly chosen vertex in V\(G\) and Y is an independent set of G \(set of vertices ) s
5 153 M
(with no edges between them\). I\(X,Y\) is the) s
5 142 M
(probabilistic mutual information of two random variable X and Y defined as:) s
5 131 M
(                I\(X,Y\) = double_summation\(p\(x,y\)log\(p\(x,y\)/p\(x\)p\(y\)\)\)) s
5 120 M
(where p\(x\) is probability of X=x, p\(y\) is probability of Y=y and p\(x,y\) is a joint probability) s
5 109 M
( distribution of X=x and Y=y.) s
5 87 M
(An alternative definition of Korner Entropy of a graph G is :) s
5 76 M
(                KE\(G\) = minimum [- sum_v_in_V\(G\) {1/|V\(G\)| * log\(Pr[v in Y]\)}]) s
5 65 M
(i.e minimum of summations over product of probability of a randomly chosen vertex v in V\(G\) an) s
5 54 M
(d log likelihood probability of v in an independent set Y of G.) s
5 32 M
(Mutual information is the generalization of Shannon information entropy when two dependent ran) s
5 21 M
(dom variables are involved. Korner's entropy quantitatively captures the complexity and merit ) s
5 10 M
(of a graph representation of text quite effectively because mutual information is the amount o) s
_R
S
%%Page: (223) 223
%%BeginPageSetup
_S
18 36 translate
/pagenum 223 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (223) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(f knowledge one random variable has about the other. This is quite useful for text meaningfuln) s
5 681 M
(ess - two words with high mutual information are quite likely to be closely related. More prec) s
5 670 M
(isely, from definitions of Korner Entropy, mutual information of a word vertex and an independ) s
5 659 M
(ent set of word vertices in recursive gloss overlap graph is the "extent of relatedness" betwe) s
5 648 M
(en a word and an independent set of words it is part of. When a word is in an independent set ) s
5 637 M
(of word vertices, there exists no relation among them - no word vertex is in dictionary gloss ) s
5 626 M
(definition of other word vertices. By summing up log likelihoods for all such vertices, a meas) s
5 615 M
(ure of "meaninglessness" is obtained. Dual of this meaninglessness is meaningfulness \(document) s
5 604 M
( ranking by meaninglessness is inversion of ranking by meaningfulness\) obtained by \(-\) sign an) s
5 593 M
(d minimum\(\). Maximum Korner Entropy is log\(|V|\) for complete graphs and minimum is zero for em) s
5 582 M
(pty graphs. Any document graph would have entropy merit value between 0 and log|V|. Computing ) s
5 571 M
(Korner Entropy is NP-hard since finding stable independent sets is NP-hard.) s
5 549 M
(References:) s
5 538 M
(-----------) s
5 527 M
(383.1 Korner Entropy - [JaikumarRadhaKrishnan] - http://www.tcs.tifr.res.in/~jaikumar/Papers/E) s
5 516 M
(ntropyAndCounting.pdf) s
5 505 M
(383.2 Entropy of Graphs - [MowshowitzDehmer] - www.mdpi.com/1099-4300/14/3/559/pdf) s
5 494 M
(383.3 Entropy Centrality of Graphs - [Qiao-Shan-Zhou] - http://www.mdpi.com/1099-4300/19/11/61) s
5 483 M
(4/pdf - influence of a vertex is defined in terms of Shannon Entropy \(-plogp\) and Subgraph Deg) s
5 472 M
(ree Centrality) s
5 461 M
(383.4 Entropy measures for networks - [Anand-Bianconi] - https://arxiv.org/pdf/0907.1514.pdf -) s
5 450 M
( Relations between Shannon Entropy, Gibbs Entropy and Von Neumann Entropy of networks) s
5 439 M
(383.5 Graph Energy and its relation to average degree k - http://iopscience.iop.org/article/10) s
5 428 M
(.1088/1742-6596/604/1/012024/pdf - Energy of a Graph is sum of absolute values of its adjaceny) s
5 417 M
( matrix eigenvalues. Quoted excepts: "...When the network is very sparse, graph energy E will ) s
5 406 M
(be monotonically increasing with k. With slow increase of intensity, energy E will be still pr) s
5 395 M
(oportional to k but with appearing of some weak fluctuations. However, while the network is be) s
5 384 M
(coming highly dense, the graph energy will drop sharply. And the value of k that corresponds t) s
5 373 M
(o the largest graph energy is about 0.8N...". This threshold relation between average degree a) s
5 362 M
(nd energy of graph has parallels to Bianconi-Barabasi least energy intrinsic fitness which imp) s
5 351 M
(lies low energy vertices attract large number of links. Similarly, Graph Energy which is cumul) s
5 340 M
(ative estimate for all vertices, decreases when the graph has lot of edges which is possible o) s
5 329 M
(nly if average degree of the vertices is high. High average degree by Bianconi-Barabasi model ) s
5 318 M
(implies least energy and high intrinsic fitness.) s
5 307 M
(383.6 Graph Energy and its meaning - https://arxiv.org/pdf/1704.00779.pdf) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(-------------------------------------------) s
5 263 M
(384. \(THEORY\) Neural Tensor Networks Reasoning and Recursive Gloss Overlap merit scoring - 23 ) s
5 252 M
(February 2017) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(-------------------------------------------) s
5 219 M
(Neural Tensor Networks described in 384.1 generalizes a linear neuron into a multidimensional ) s
5 208 M
(tensor and assigns a score for relation) s
5 197 M
(between two entities e1 and e2. This is described in the context of an ontology \(e.g WordNet\) ) s
5 186 M
(where a relation between two words w1 and w2) s
5 175 M
(is assigned a score based on various distance measures. Recursive Gloss Overlap graph which is) s
5 164 M
( a gloss definition graph has a single relation) s
5 153 M
(between any two words - w1 "is in dictionary/gloss definition of" w2. Present implementation d) s
5 142 M
(oes not quantify the extent of relatedness) s
5 131 M
(between two words connected by an edge in Recursive Gloss Overlap graph. This definition graph) s
5 120 M
( can be considered as a Neural Tensor Network) s
5 109 M
(and each edge can be scored as a neural tensor relation between two word vertices. Cumulative ) s
5 98 M
(sum total score of all edges in this graph is a) s
5 87 M
(quantitative intrinsic merit measure of the meaningfulness and intrinsic merit. Thus any docum) s
5 76 M
(ent's definition graph is a set of tensor neurons which together decide the merit of the text.) s
5 65 M
( Together with Korner Entropy complexity measure, Sum of Tensor Neuron scores effectively weig) s
5 54 M
(ht the text.) s
5 32 M
(References:) s
5 21 M
(----------) s
5 10 M
(384.1 Neural Tensor Networks - [SocherManningNg] - http://nlp.stanford.edu/pubs/SocherChenMann) s
_R
S
%%Page: (224) 224
%%BeginPageSetup
_S
18 36 translate
/pagenum 224 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (224) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ingNg_NIPS2013.pdf) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(------------------------------------------) s
5 648 M
(385. \(THEORY\) Recursive Lambda Function Growth, Random Walks on Recursive Gloss Overlap graph ) s
5 637 M
(and Text Comprehension - 25 February 2017 - related to 46, 47, 216, 230 and 384) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(------------------------------------------) s
5 604 M
(As mentioned in previous section, two word vertices x1 and x2 are connected by an edge weight ) s
5 593 M
(determined by tensor neuron \(x1 R x2\) for some relation R. Human comprehension of text can be ) s
5 582 M
(approximated by set of compositional lambda functions created from converging random walks or ) s
5 571 M
(DFS Tree on the recursive gloss overlap graph. For example, following definition graph for a t) s
5 560 M
(ext "Flight landed on runway because) s
5 549 M
(of fuel shortage" is created from thesaurus/sdictionary/gloss definitions of an ontology:) s
5 527 M
(                        flight -------> tyre ------> wheel ---> runway) s
5 516 M
(                          ^                             |) s
5 505 M
(                          |                             V) s
5 494 M
(                          |                          landing) s
5 483 M
(                        fuel -----> shortage            |) s
5 472 M
(                                                        V) s
5 461 M
(                                                       gear) s
5 439 M
(Example Random walks on previous graph:) s
5 428 M
(---------------------------------------) s
5 417 M
(                        flight ---> tyre ----> wheel ---> landing ---> gear) s
5 406 M
(                        flight ----> fuel ----> shortage) s
5 395 M
(If Tensor Neurons are applied for each edge, this graph is a weighted directed graph where wei) s
5 384 M
(ght is determined by Tensor Neuron. If each relation is a lambda function following the Recurs) s
5 373 M
(ive Lambda Function Compositional Growth defined in 216, every random walk can be mapped to a ) s
5 362 M
(lambda function composition tree. For example, following random walk:) s
5 340 M
(                        fuel ----> flight ---> tyre ----> wheel ---> landing ---> gear) s
5 318 M
(is tensor neuron labelled with lambda functions:) s
5 296 M
(                        fuel --\(requiredby\)---> flight----\(has\)---> tyre ---\(has\)---> wheel --) s
5 285 M
(-\(does\) ---> landing ---\(requires\)---> gear) s
5 263 M
(where lambda functions for each edge with word vertices as parameters are:) s
5 252 M
(        f1 = requiredby\(fuel, flight\)) s
5 241 M
(        f2 = has\(flight, tyre\)) s
5 230 M
(        f3 = has\(tyre, wheel\)) s
5 219 M
(        f4 = does\(wheel, landing\)) s
5 208 M
(        f5 = requires\(landing, gear\)) s
5 186 M
(Composition is done left associative creating following tree recursively:) s
5 175 M
(        f5\(landing,gear\)) s
5 164 M
(        f4\(wheel, f5\(landing, gear\)\)) s
5 153 M
(        f3\(tyre, f4\(wheel, f5\(landing, gear\)\)\)) s
5 142 M
(        f2\(flight, f3\(has, f4\(wheel, f5\(landing, gear\)\)\)\)) s
5 131 M
(        f1\(fuel, f2\(flight, f3\(tyre, f4\(wheel, f5\(landing, gear\)\)\)\)\)) s
5 109 M
(Previous composition tree is done for each Markov Chain Random Walk on the Definition Graph. D) s
5 98 M
(ifference between composition in 216 and previous is: Recursive Lambda Function Compositional ) s
5 87 M
(Growth is done on a flat sentence in 216, while it is applied to a random walk on definition g) s
5 76 M
(raph here. Because neuron tensors are equivalent to a lambda function per edge, each function ) s
5 65 M
(fi can be made to return a relevance merit score which is fed to next layer - in essence each ) s
5 54 M
(random walk lambda function composition tree is a multilayer tensor neuron. Similar process ca) s
5 43 M
(n be applied to paths in a DFS tree also. Inorder traversal of the composition tree yields an ) s
5 32 M
(equivalent expanded text of original text \(In above example it is "fuel requiredby flight has ) s
5 21 M
(tyre has wheel does landing requires gear"\) . Each random walk results in a tree-structured mu) s
5 10 M
(ltilayer tensor neuron. Equivalently, each lambda function tensor could return a pictorial mea) s
_R
S
%%Page: (225) 225
%%BeginPageSetup
_S
18 36 translate
/pagenum 225 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (225) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ning and each composition "operates" on the tensor arguments to return a new animated version ) s
5 681 M
(to next level up the tree \(i.e meaning is represented as visuals\). Ontology required for this ) s
5 670 M
(is an ImageNet than a WordNet.) s
5 648 M
(Advantage of Random Walks is it mimicks the randomness of deep learning in human text comprehe) s
5 637 M
(nsion. Typical visual comprehension reads a passage atleast once scanning the keywords and inf) s
5 626 M
(erring grammatical connectives between keywords. After keywords are known, they have to be rel) s
5 615 M
(ated to infer meaning. An ontology provides paths between keywords and how they are related. A) s
5 604 M
(fter all edges and paths are known, collective meaning has to be evaluated by traversing the g) s
5 593 M
(raph. Meaning is accrued over time by traversing the relations between keywords compositionall) s
5 582 M
(y. This traversal is a random walk on the definition graph. Previous lambda function growth fo) s
5 571 M
(r each random walk on graph builds meaning recursively. Covering time of random walk is the nu) s
5 560 M
(mber of steps required to visit all vertices. Mixing time of random walk is the number of step) s
5 549 M
(s required to reach stationary distribution \(i.e any further random walk is no different from ) s
5 538 M
(previous walks\). These two measures have been widely studied for weighted directed graphs and ) s
5 527 M
(are good estimators of time required to deep-learn and comprehend a text. Trivial DFS search i) s
5 516 M
(s quite static and stationary distribution in Mixing time of random walk is the state when a t) s
5 505 M
(ext has been fully understood and any further reading does not add more meaning. Mixing time i) s
5 494 M
(n undirected graph is proportional to Isoperimetric number or Cheeger's constant. Isoperimetry) s
5 483 M
( measures amount of bottleneck in a graph. For directed weighted graph, Conductance is the equ) s
5 472 M
(ivalent isoperimetric measure. When isoperimetry is high, random walk converges quickly implyi) s
5 461 M
(ng faster text comprehension.  For a partition of the vertex set of a graph \(S, T\), conductanc) s
5 450 M
(e of the cut \316\246\(S,T\) = u \342\\210\\210 S,v \342\\210\\210 T sum\(a\(u,v\)\) / minimum \(sum\(w \342\\210\\210 S dw) s
5 439 M
(\), sum\(w \342\\210\\210 T dw\)\) where dw = for all \(w,z\) sum\(a\(w,z\)\) and a\(s,t\) is the weight of an ) s
5 428 M
(edge i.e tensor neuron lambda function score. PageRank of the Recusive Gloss Overlap graph is ) s
5 417 M
(converging random walk - PageRank along with Core Number of definition graph is already known ) s
5 406 M
(to classify texts in unsupervised setting by ranking the vertices.) s
5 384 M
(References:) s
5 373 M
(-----------) s
5 362 M
(385.1 Random Walks Survey - http://www.cs.elte.hu/~lovasz/erdos.pdf) s
5 351 M
(385.2 Random Walks on Weighted Directed Graphs - http://www.cs.yale.edu/homes/spielman/eigs/le) s
5 340 M
(ct7.pdf) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(------------) s
5 296 M
(386. \(FEATURE-DONE\) Java Spark Generic Streaming and Streaming Abstract Generator Integration ) s
5 285 M
(- 27 February 2017) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(------------) s
5 252 M
(*\) Enabled URLSocket in Spark Generic Streaming and crawled an example facebook and twitter) s
5 241 M
(streaming data stored into Parquet files and Spark metastore) s
5 230 M
(*\) Added Spark Streaming Data Source and Parquet Data Storage to Streaming_AbstractGenerator.p) s
5 219 M
(y) s
5 208 M
(and updated iterator to read DataFrames from word.parquet Spark Streaming storage.) s
5 197 M
(*\) Spark DataFrames are iterated by accessing word column ordinal and yielded to any applicati) s
5 186 M
(on of) s
5 175 M
(interest.) s
5 164 M
(*\) As an example Streaming HyperLogLogCounter implementation has been updated to read from Spa) s
5 153 M
(rk) s
5 142 M
(Parquet streaming data storage and cardinality is computed) s
5 131 M
(*\) Example Spark Generic Streaming logs with URLSockets and HyperLogLogCounter with Spark Parq) s
5 120 M
(uet) s
5 109 M
(data storage have been added to testlogs in python-src and java-src/bigdata_analytics/spark_st) s
5 98 M
(reaming/testlogs) s
5 87 M
(*\) Thus an end-to-end Java+Spark+Python streaming ETSL pipeline has been implemented where:) s
5 76 M
(                - Extract is done by JSoup crawl) s
5 65 M
(                - Transform is done by Spark RDD transformations) s
5 54 M
(                - Store is done by Spark Hive and Parquet storage) s
5 43 M
(                - Load is done by Streaming Abstract Generator iterator/facade pattern) s
5 32 M
(*\) Streaming_HyperLogLogCounter.py instantiates SparkSession from pyspark.sql. Usage of SparkS) s
5 21 M
(ession requires executing this through spark-submit \(Usual python <file> commandline doesnot w) s
5 10 M
(ork\) as below:) s
_R
S
%%Page: (226) 226
%%BeginPageSetup
_S
18 36 translate
/pagenum 226 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (226) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(/home/shrinivaasanka/spark-2.1.0-bin-hadoop2.7/bin/spark-submit Streaming_HyperLogLogCounter.p) s
5 681 M
(y 2>&1 > testlogs/Streaming_HyperLogLogCounter.out.SparkStreaming.27February2017) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(-------------) s
5 637 M
(387. \(FEATURE-DONE\) Streaming Algorithms Implementations for Spark Streaming Parquet Data Stor) s
5 626 M
(age - 28 February 2017) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(-------------) s
5 593 M
(*\) All Streaming_<algorithm> implementations have been updated to have Spark Streaming) s
5 582 M
(Parquet file storage as input generators.) s
5 571 M
(*\) New Streaming_SocialNetworkAnalyis.py file has been added to do sentiment analysis for) s
5 560 M
(Streaming Data from Spark Parquet file storage) s
5 549 M
(*\) Streaming_AbstractGenerator.py has been updated to filter each Spark Parquet DataFrame to r) s
5 538 M
(emove) s
5 527 M
(grammatical connectives and extract only keywords from streamed content) s
5 516 M
(*\) Logs for all Streaming_<algorithm>.py and Streaming_SocialNetworkAnalysis.py executed again) s
5 505 M
(st) s
5 494 M
(Spark Streaming Parquet data have been committed to testlogs/) s
5 483 M
(*\) Streaming_SocialNetworkAnalysis.py presently iterates through word stream generated by) s
5 472 M
(Streaming_AbstractGenerator.py and does Markov Random Fields Clique potential sentiment analys) s
5 461 M
(is.) s
5 450 M
(*\) Streaming_AbstractGenerator.py Spark Parquet __iter__\(\) clause presently returns word strea) s
5 439 M
(m which) s
5 428 M
(can be optionally made to return sentences or phrases of specific length) s
5 417 M
(*\) All python streaming implementations instantiating Streaming_AbstractGenerator.py have to b) s
5 406 M
(e executed with $SPARK_DIR/bin/spark-submit) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(------------------------------------------) s
5 362 M
(388. \(FEATURE-DONE\) Major rewrite of BackPropagation Implementation for arbitrary number of Ne) s
5 351 M
(uron input variables layer - 2 March 2017) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(------------------------------------------) s
5 318 M
(*\) BackPropagation algorithm code has been rewritten for arbitrary number of input layer, hidd) s
5 307 M
(en layer and output layer variables.) s
5 296 M
(*\) Some Partial Differential Equations functions have been merged into one function.) s
5 285 M
(*\) This was executed with 6 variable input layer neuron, 6 variable hidden layer and 6 variabl) s
5 274 M
(e output layer with 2*6*6=72 weights) s
5 263 M
(for each of 72 activations. ) s
5 252 M
(*\) Logs for this have been committed to testlogs/) s
5 241 M
(*\) For 100000 iterations, error tapers to ~10^-29 as below) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(----------------) s
5 208 M
(Error after Backpropagation- iteration : 99998) s
5 197 M
(1.05827458078e-29) s
5 186 M
(Layers in this iteration:) s
5 175 M
(###############) s
5 164 M
(Input Layer:) s
5 153 M
(###############) s
5 142 M
([0.23, 0.11, 0.05, 0.046, 0.003, 0.1]) s
5 131 M
(###############) s
5 120 M
(Hidden middle Layer:) s
5 109 M
(###############) s
5 98 M
([0.07918765738490302, 0.17639329000539292, 0.3059104560477687, 0.06819897810162112, 0.13596389) s
5 87 M
(556531566, 0.18092367420130773]) s
5 76 M
(###############) s
5 65 M
(Output Layer:) s
5 54 M
(###############) s
5 43 M
([0.29999999999999977, 0.53, 0.11000000000000039, 0.09000000000000002, 0.010000000000004578, 0.) s
5 32 M
(2099999999999999]) s
5 21 M
(Weights updated in this iteration:) s
5 10 M
([0.048788506679748, 0.11426171324845727, 0.24603459114714846, 0.0795780558315572, 0.1778420975) s
_R
S
%%Page: (227) 227
%%BeginPageSetup
_S
18 36 translate
/pagenum 227 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (227) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(4093078, 0.18901665972998824, 0.11262698024008909, 0.20899193850252168, 0.5190303819914409, 0.) s
5 681 M
(3056462222980023, 0.5043023226568699, 0.6597581902164429, 0.16317511417689112, 0.6856596163043) s
5 670 M
(989, 1.0387023103855846, 0.2606362555325616, 0.9902995852922012, 1.0606233996394616, 0.0379210) s
5 659 M
(6334721366, 0.08894920940249851, 0.19690317303590538, 0.06956852060077344, 0.15685074966243606) s
5 648 M
(, 0.1617685764906898, 0.07393365494416165, 0.11785754559950794, 0.32914500297950156, 0.2691055) s
5 637 M
(311488234, 0.4255090307780099, 0.5588219323805761, 0.17422407739745155, 0.7118075853635217, 0.) s
5 626 M
(335920938970278, 0.08421750448989332, 0.18955175416917805, 0.2131459459234997, 0.1858591689561) s
5 615 M
(9456, 0.2871421205369935, 0.4097382856269691, 0.09927665626493291, 0.2820455537957722, 0.44170) s
5 604 M
(499922267087, 0.4181874495051114, 0.6343547541074734, 0.5019659876526656, 0.6341824150669009, ) s
5 593 M
(0.9311854573920668, 0.415739542966714, 0.8116648622103757, 0.7642211240783323, -0.277870450243) s
5 582 M
(04763, -0.03796350343576473, -0.06897746410924578, -0.12106324365840128, 0.09688102161356603, ) s
5 571 M
(0.0833653488478167, 0.025844281679456543, 0.01924251728820474, 0.1166534752079898, 0.225441137) s
5 560 M
(67193752, 0.2565459528164421, 0.2598246679566054, -0.2448286735461752, 0.48545168615654455, -0) s
5 549 M
(.12033616818940464, -0.17996884551601777, 0.09161370830913909, 0.16523481156548922, 0.22079944) s
5 538 M
(846849042, 0.4246703906819317, 0.05813513760785996, 0.49187786590191596]) s
5 527 M
(Recomputing Neural Network after backpropagation weight update) s
5 516 M
(Error after Backpropagation- iteration : 99999) s
5 505 M
(1.05827458078e-29) s
5 494 M
(Layers in this iteration:) s
5 483 M
(###############) s
5 472 M
(Input Layer:) s
5 461 M
(###############) s
5 450 M
([0.23, 0.11, 0.05, 0.046, 0.003, 0.1]) s
5 439 M
(###############) s
5 428 M
(Hidden middle Layer:) s
5 417 M
(###############) s
5 406 M
([0.07918765738490302, 0.17639329000539292, 0.3059104560477687, 0.06819897810162112, 0.13596389) s
5 395 M
(556531566, 0.18092367420130773]) s
5 384 M
(###############) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(---------------------) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(---------------) s
5 318 M
(389. \(FEATURE-DONE\) Convolution Network Final Neuron Layer Integrated with BackPropagation Imp) s
5 307 M
(lementation- 3 March 2017) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(---------------) s
5 274 M
(*\) New python module has been added to repository to invoke BackPropagation algorithm) s
5 263 M
(implementation in final neuron layer of convolution network.) s
5 252 M
(*\) This creates a multilayer perceptron from maxpooling layer variables as input layer and) s
5 241 M
(backpropagates for few iterations to do weight updates.) s
5 230 M
(*\) Maxpooling layer is a matrix of 5*5=25 variables. With 25 variable input layer, backpropaga) s
5 219 M
(tion) s
5 208 M
(is done on 25*25*2=1250 activation edges with weights\(25 inputs * 25 hidden + 25 hidden * 25 o) s
5 197 M
(utputs\).) s
5 186 M
(*\) Logs for this have been added to testlogs/) s
5 175 M
(*\) Presently expected output layer has been hardcoded to some constant) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(----------------------------------------------) s
5 131 M
(390. \(THEORY\) Prime-Composite Complementation/2-coloring, Riemann Zeta Function and Sum of Eig) s
5 120 M
(envalues - Elementary Analysis - 6 March 2017) s
5 109 M
(- related to 19, 24, 319, 323, 338, 370) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(----------------------------------------------) s
5 76 M
(Special case of complementation/2-coloring is prime-composite coloring where set of natural nu) s
5 65 M
(mbers is 2-colored as primes and composites.) s
5 54 M
(Here terminology of complementation and 2-coloring is used interchangeably. But complementatio) s
5 43 M
(n is a generic notion for functions over) s
5 32 M
(reals too. Riemann Zeta Function and truth of Riemann Hypothesis imply a pattern in distributi) s
5 21 M
(on of primes and hence pattern in prime-composite) s
5 10 M
(coloring. Thus Riemann Zeta Function is a 2-coloring scheme for set of natural numbers.) s
_R
S
%%Page: (228) 228
%%BeginPageSetup
_S
18 36 translate
/pagenum 228 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (228) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(Let q^s + q^\(1-s\) = v be an eigenvalue of a graph where s is a complex exponent \(s=a+ib\). It c) s
5 670 M
(an be written as:) s
5 659 M
(        q^2s + q = vq^s) s
5 648 M
(        q^2\(a+ib\) + q = vq^\(a+ib\)) s
5 637 M
(        q^2a*q^2ib + q = vq^a*q^ib) s
5 626 M
(        q^2a\(e^i2blogq\) + q = vq^a[e^iblogq] by rewriting q^ib = e^iblogq) s
5 615 M
(        q^2a[cos\(2blogq\) + isin\(2blogq\)] + q = vq^a[cos\(blogq\) + isin\(blogq\)]) s
5 604 M
(Equating Re\(\) and Im\(\):) s
5 593 M
(        q^2a[cos\(2blogq\)] + q = vq^a[cos\(blogq\)]) s
5 582 M
(        q^2a[sin\(2blogq\)] = vq^a[sin\(blogq\)]) s
5 571 M
(Ratio of Re\(\) and Im\(\) on both sides:) s
5 560 M
(        q^2a[sin\(2blogq\)]                vq^a[sin\(blogq\)]) s
5 549 M
(     --------------------------  =      ------------------) s
5 538 M
(        q^2a[cos\(2blogq\)] + q            vq^a[cos\(blogq\)]) s
5 516 M
(   q^2a[2*sin\(blogq\)*cos\(blogq\)]                [sin\(blogq\)]) s
5 505 M
(     --------------------------  =           ------------------) s
5 494 M
(        q^2a[cos\(2blogq\)] + q                   [cos\(blogq\)]) s
5 472 M
(        q^2a[2*cos\(blogq\)*cos\(blogq\)] =   q^2a[cos\(2blogq\)] + q) s
5 450 M
(        q^2a[2*cos\(blogq\)*cos\(blogq\)] =   q^2a[cos\(blogq\)*cos\(blogq\) - sin\(blogq\)*sin\(blogq\)] ) s
5 439 M
(+ q) s
5 417 M
(        q^2a[cos\(blogq\)*cos\(blogq\) + sin\(blogq\)*sin\(blogq\)] = q) s
5 395 M
(        q^2a = q => a = 0.5) s
5 373 M
(When s=0.5 with no imaginary part and q+1 is regularity of a graph, v = 2*sqrt\(q\) and correspo) s
5 362 M
(nding graph is a q+1 regular Ramanujan Graph.) s
5 340 M
([This is already derived in:) s
5 329 M
(https://sites.google.com/site/kuja27/RamanujanGraphsRiemannZetaFunctionAndIharaZetaFunction.pd) s
5 318 M
(f,) s
5 307 M
(https://sites.google.com/site/kuja27/RZFAndIZF_25October2014.pdf,) s
5 296 M
(http://sourceforge.net/p/asfer/code/HEAD/tree/python-src/ComplFunction_DHF_PVsNP_Misc_Notes.pd) s
5 285 M
(f]) s
5 263 M
(Let H = {G1,G2,G3,...} be an infinite set of graphs with eigenvalues 1^s + 1^\(1-s\), 2^s + 2^\(1) s
5 252 M
(-s\), 3^s + 3^\(1-s\),....) s
5 230 M
(Sum of these eigenvalues for infinite set of graphs has following relation to Riemann Zeta Fun) s
5 219 M
(ction for s=w+1:) s
5 208 M
(Sum_q=1_to_inf\(q^s + q^\(1-s\)\) = [1 + 1/2^w + 1/3^w + ...] + [1 + 2^\(w+1\) + 3^\(w+1\) + ...] = Ri) s
5 197 M
(emannZetaFunction + [1 + 2^\(w+1\) + 3^\(w+1\) + ...]) s
5 175 M
(Sum_q=1_to_inf\(q^s + q^\(1-s\)\) -  [1 + 2^\(w+1\) + 3^\(w+1\) + ...] = RiemannZetaFunction) s
5 153 M
(Thus Riemann Zeta Function is written as difference of sum of eigenvalues for an infinite set ) s
5 142 M
(of graphs and another infinite exponential series.) s
5 131 M
(Hermitian Real Symmetric matrices have real eigenvalues which is true for undirected graphs. F) s
5 120 M
(or directed graphs, eigenvalues are complex numbers. Because of this condition, elements of se) s
5 109 M
(t H have to be directed graphs. Relation between eigenvalues of two matrices M1 and M2 and eig) s
5 98 M
(envalues of their sum M1+M2 is expressed by [Weyl] inequalities and [Knutson-Tao] proof of Hor) s
5 87 M
(n's conjecture. Sum of eigenvalues of M1+M2 is equal to sum of eigen values of M1 + sum of eig) s
5 76 M
(en values of M2 \(Trace=sum of eigen values=sum of diagonal elements\). The set H has one-to-one) s
5 65 M
( mapping with set of natural numbers and is 2-colored as prime and composite graphs based on i) s
5 54 M
(ndex \(each graph is monochromatic\). Sum of adjacency matrices of H is also a directed graph \(i) s
5 43 M
(f all Gi have same number of vertices\) denoted as G\(H\).) s
5 21 M
(References:) s
5 10 M
(-----------) s
_R
S
%%Page: (229) 229
%%BeginPageSetup
_S
18 36 translate
/pagenum 229 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (229) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(390.1 Complex Analysis - [Lars Ahlfors] - Page 30 - Poles and Zeros, Page 213 - Product Develo) s
5 681 M
(pment, Riemann Zeta Function and Prime Numbers) s
5 670 M
(390.2 Honeycombs and Sums of Hermitian Matrices - http://www.ams.org/notices/200102/fea-knutso) s
5 659 M
(n.pdf) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(---------------------------------------) s
5 615 M
(391. \(FEATURE-DONE\) DeepLearning \(ConvolutionNetwork-BackPropagation\) JPEG files with Python I) s
5 604 M
(maging Library \(PILlow\) - 6 March 2017) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(---------------------------------------) s
5 571 M
(*\) Added import of PIL Image library to open any image file and convert into a matrix in Integ) s
5 560 M
(er mode) s
5 549 M
(*\) This matrix is input to Convolution and BackPropagation code) s
5 538 M
(*\) Logs of Convolution and BackPropagation for sample images have been committed to testlogs/) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(--------------------------------------) s
5 494 M
(392. \(FEATURE-DONE\) DeepLearning \(ConvolutionNetwork-BackPropagation\) tobit\(\) update - 7 March) s
5 483 M
( 2017) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(--------------------------------------) s
5 450 M
(*\) Updated python-src/DeepLearning_ConvolutionNetwork_BackPropagation.py tobit\(\) function to m) s
5 439 M
(ap each pixel to a decimal value < 1) s
5 428 M
(*\) Increased BackPropagation iteration to 100.) s
5 417 M
(*\) Logs for this have been committed to testlogs/. With this final neurons for max pooling lay) s
5 406 M
(er are sensitive to changes in image pixels) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(---------------------------------------) s
5 362 M
(393. \(FEATURE-DONE\) DeepLearning \(ConvolutionNetwork-BackPropagation\) image_to_bitmatrix\(\) upd) s
5 351 M
(ate - 8 March 2017) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(---------------------------------------) s
5 318 M
(*\) Refactored the tobit\(\) function - moved it to a new directory image_pattern_mining and reim) s
5 307 M
(plemented it with a new) s
5 296 M
(image_to_bitmatrix\(\) function in ImageToBitMatrix.py by enumerating through the pixel rows and) s
5 285 M
( applying map\(tobit\)) s
5 274 M
(*\) This removed the opaqueness related 255 appearing for all pixels in bitmap.) s
5 263 M
(*\) Each pixel is multiplied by a fraction. Mapping it to binary digits 0,1 based on [0-127],[1) s
5 252 M
(28-255] intervals for pixel values) s
5 241 M
(does not work well with BackPropagation of MaxPooling in Convolution Network. Instead multiple) s
5 230 M
(s of a small fraction makes the) s
5 219 M
(MaxPooling layer quite receptive to changes in image pixel values.) s
5 208 M
(*\) Added few handwriting recognition example images for numbers 1\(two fonts\),2 and 8.) s
5 197 M
(*\) Logs for this have been committed to testlogs/) s
5 186 M
(---------------------------------------------------------) s
5 175 M
(Following are Maxpooling Neurons) s
5 164 M
(---------------------------------------------------------) s
5 153 M
(Final Layer of Inference from Max Pooling Layer - BackPropagation on Max Pooling Layer Neurons) s
5 142 M
(Inference from Max Pooling Layer - Image: [0.1452950826564989, 0.15731736449115244, 0.16984767) s
5 131 M
(785665972]) s
5 120 M
(Inference from Max Pooling Layer - Image: [0.14920888863234688, 0.16193600589418844, 0.1752809) s
5 109 M
(2024601222]) s
5 98 M
(Inference from Max Pooling Layer - Image: [0.13197897244871004, 0.1417448800619895, 0.15171424) s
5 87 M
(525284838]) s
5 76 M
(Inference from Max Pooling Layer - Image: [0.14007345008310818, 0.15118749472569865, 0.1626782) s
5 65 M
(2705412283]) s
5 54 M
(Inference from Max Pooling Layer - Image: [0.07847441088145349, 0.0807616625716103, 0.08303607) s
5 43 M
(840796547]) s
5 32 M
(Inference from Max Pooling Layer - Image: [0.08983732685398557, 0.09365789540391084, 0.0974476) s
5 21 M
(5711798722]) s
5 10 M
(Inference from Max Pooling Layer - Image: [0.0903328782140764, 0.09421672093823663, 0.09806798) s
_R
S
%%Page: (230) 230
%%BeginPageSetup
_S
18 36 translate
/pagenum 230 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (230) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(136073994]) s
5 681 M
(Inference from Max Pooling Layer - Image: [0.08761036574911765, 0.09113121170496671, 0.0946240) s
5 670 M
(5037074482]) s
5 659 M
(\('Inference from Max Pooling Layer - Example 11:', [0.1619896774094416, 0.1615169723530323, 0.) s
5 648 M
(15009965578039716]\)) s
5 637 M
(\('Inference from Max Pooling Layer - Example 12:', [0.14303879829783814, 0.12068614560924568, ) s
5 626 M
(0.07211705852669059]\)) s
5 615 M
(\('Inference from Max Pooling Layer - Example 21:', [0.1932801269861012, 0.11587916253160746, -) s
5 604 M
(0.007889615456070018]\)) s
5 593 M
(\('Inference from Max Pooling Layer - Example 22:', [0.17605214289097237, 0.19326380725531284, ) s
5 582 M
(0.2114152778184319]\)) s
5 571 M
(\('Inference from Max Pooling Layer - Example 3:', [0.062097695970929206, 0.062097695970929206,) s
5 560 M
( 0.062097695970929206]\)) s
5 549 M
(\('Inference from Max Pooling Layer - Example 41:', [0.2976324086103368, 0.32891470561393965, 0) s
5 538 M
(.34986397693929844]\)) s
5 527 M
(\('Inference from Max Pooling Layer - Example 42:', [0.22669904395788065, 0.26336097548290116, ) s
5 516 M
(0.3065443950445386]\)) s
5 505 M
(\('Inference from Max Pooling Layer - Example 51:', [0.11935155170571034, 0.12477637373255022, ) s
5 494 M
(0.12911872514904305]\)) s
5 483 M
(\('Inference from Max Pooling Layer - Example 52:', [0.12675869649313706, 0.12051203261825084, ) s
5 472 M
(0.10578392639393523]\)) s
5 461 M
(----------------------------------------------------------) s
5 450 M
(Previous logs are grep-ed from testlogs/. Handwritten Numeral recognitions \(with high noise\) a) s
5 439 M
(re done in following Maxpooling inferences:) s
5 428 M
([Number 1 - Font 1] Inference from Max Pooling Layer - Image: [0.07847441088145349, 0.08076166) s
5 417 M
(25716103, 0.08303607840796547]) s
5 406 M
([Number 1 - Font 2] Inference from Max Pooling Layer - Image: [0.08983732685398557, 0.09365789) s
5 395 M
(540391084, 0.09744765711798722]) s
5 384 M
([Number 2] Inference from Max Pooling Layer - Image: [0.0903328782140764, 0.09421672093823663,) s
5 373 M
( 0.09806798136073994]) s
5 362 M
([Number 8] Inference from Max Pooling Layer - Image: [0.08761036574911765, 0.09113121170496671) s
5 351 M
(, 0.09462405037074482]) s
5 329 M
(Contrasting this with bitmap numerals inscribed in 2 dimensional arrays \(with low noise\), simi) s
5 318 M
(lar elements have close enough values:) s
5 307 M
([Number 0 - Font 1] \('Inference from Max Pooling Layer - Example 11:', [0.1619896774094416, 0.) s
5 296 M
(1615169723530323, 0.15009965578039716]\)) s
5 285 M
([Number 0 - Font 2] \('Inference from Max Pooling Layer - Example 12:', [0.14303879829783814, 0) s
5 274 M
(.12068614560924568, 0.07211705852669059]\)) s
5 263 M
([Number 8 - Font 1] \('Inference from Max Pooling Layer - Example 21:', [0.1932801269861012, 0.) s
5 252 M
(11587916253160746, -0.007889615456070018]\)) s
5 241 M
([Number 8 - Font 2] \('Inference from Max Pooling Layer - Example 22:', [0.17605214289097237, 0) s
5 230 M
(.19326380725531284, 0.2114152778184319]\)) s
5 219 M
([Null pattern] \('Inference from Max Pooling Layer - Example 3:', [0.062097695970929206, 0.0620) s
5 208 M
(97695970929206, 0.062097695970929206]\)) s
5 197 M
([Letter X - Font 1] [\('Inference from Max Pooling Layer - Example 41:', [0.2976324086103368, 0) s
5 186 M
(.32891470561393965, 0.34986397693929844]\)) s
5 175 M
([Letter X - Font 2] \('Inference from Max Pooling Layer - Example 42:', [0.22669904395788065, 0) s
5 164 M
(.26336097548290116, 0.3065443950445386]\)) s
5 153 M
([Number 1 - Font 1] \('Inference from Max Pooling Layer - Example 51:', [0.11935155170571034, 0) s
5 142 M
(.12477637373255022, 0.12911872514904305]\)) s
5 131 M
([Number 1 - Font 2] \('Inference from Max Pooling Layer - Example 52:', [0.12675869649313706, 0) s
5 120 M
(.12051203261825084, 0.10578392639393523]\)) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-----------------------) s
5 76 M
(394. \(THEORY\) Coloring Real Numbers and Complement Functions - 8 March 2017 - related to 323, ) s
5 65 M
(338) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(-----------------------) s
5 32 M
(So far equivalence of 2-coloring schemes and integer valued complement functions have been men) s
5 21 M
(tioned. Most generic problem in this class) s
5 10 M
(is to find coloring schemes \(or\) functions which "complement" real and complex n-dimensional s) s
_R
S
%%Page: (231) 231
%%BeginPageSetup
_S
18 36 translate
/pagenum 231 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (231) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(urfaces\(i.e sets of values of a function f and) s
5 681 M
(its complement g create a disjoint set cover of the real/complex planes\). Ramsey theory pertai) s
5 670 M
(ns to coloring integer sequences. 394.1 defines) s
5 659 M
(the problem of coloring the real line as minimum number of colors required to color the real l) s
5 648 M
(ine such that no two points within some specific distance \(which in turn is an element of a di) s
5 637 M
(stance set\) are of same color. In Graph theory terms, this reduces to chromatic number of a) s
5 626 M
(graph where two vertices a and b are adjacent iff distance between a and b on real line is in ) s
5 615 M
(distance set. This is stricter requirement) s
5 604 M
(of coloring compared to complementation and complement graphs representation mentioned in 338.) s
5 593 M
( For example, following complementation of [1,2]:) s
5 582 M
(        f\(0\) = [1.0,1.11]) s
5 571 M
(                g\(0\) = [1.12,1.23]) s
5 560 M
(        f\(1\) = [1.24,1.30]) s
5 549 M
(                g\(1\) = [1.31,1.68]) s
5 538 M
(        f\(2\) = [1.69,2.0]) s
5 527 M
(has colored regions of length [0.11,0.11,0.06,0.37,0.31] and can be 2-colored with f and g. If) s
5 516 M
( the distance set is {0.01,0.02} two) s
5 505 M
(points 1.32 and 1.33 are 0.01 apart but have same color \(belong to same function g\). Similarly) s
5 494 M
( points 1.69 and 1.71 are 0.02 apart but) s
5 483 M
(have same color f. Thus complementation over reals relaxes the coloring conditions significant) s
5 472 M
(ly. Coloring real line is a special case of) s
5 461 M
(complementation with distance set requirement while Coloring integers is equivalent to complem) s
5 450 M
(entation. Rather, distance set for real) s
5 439 M
(complementation is of size 1 containing length of largest monochromatic streak - in previous e) s
5 428 M
(xample it is {0.37}.) s
5 406 M
(References:) s
5 395 M
(----------) s
5 384 M
(394.1 Coloring Real Line - [EggletonErdosSkilton] - http://ac.els-cdn.com/0095895685900395/1-s) s
5 373 M
(2.0-0095895685900395-main.pdf?_tid=3b53ab92-03ec-11e7-870e-00000aab0f01&acdnat=1488970060_784d) s
5 362 M
(7a37e58d4662a8e474c62a6c8ae7) s
5 351 M
(394.2 Coloring Reals - http://webbuild.knu.ac.kr/~trj/HN.pdf) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(----------------------------------------) s
5 307 M
(395. \(FEATURE-DONE\) Deep Learning Recurrent Neural Network Gated Recurrent Unit \(RNN GRU\) Impl) s
5 296 M
(ementation - 9 March 2017) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(----------------------------------------) s
5 263 M
(*\) This commit implements Gated Recurrent Unit algorithm \(most recent advance in deep learning) s
5 252 M
( - published in 2014\) which is a) s
5 241 M
(simplification of RNN LSTM by reducing number of gates \(input, cell, forget, output are mapped) s
5 230 M
( to cell, reset, update\)) s
5 219 M
(*\) Logs for this have been uploaded to testlogs/ showing convergence of gates and state.) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(--------------------------------------------) s
5 175 M
(396. \(FEATURE-DONE\) Recursive Lambda Function Growth + Tensor Neuron \(NTN\) Intrinsic Merit - 1) s
5 164 M
(3 March 2017 - related to 384, 385) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(--------------------------------------------) s
5 131 M
(*\) This commit rewrites the Recursive Lambda Function Growth implementation by adding a new la) s
5 120 M
(mbda function growth) s
5 109 M
(function.) s
5 98 M
(*\) This new function creates a definition graph with Recursive Gloss Overlap algorithm from a ) s
5 87 M
(text and computes all pairs shortest paths in the graph) s
5 76 M
(*\) For each such shortest path edges, an AVL lambda function composition balanced tree is grow) s
5 65 M
(n \(i.e every path is a lambda function composition tree\).) s
5 54 M
(*\) Tensor Neuron Lambda Function is computed for each subtree root by following relation evalu) s
5 43 M
(ated on a stack:) s
5 32 M
(                function\(operand1, operand2\)) s
5 21 M
(where operand1, operand2 and function are successively popped from AVL composition tree stack ) s
5 10 M
(representation) s
_R
S
%%Page: (232) 232
%%BeginPageSetup
_S
18 36 translate
/pagenum 232 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (232) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(*\) Tensor Neuron triplet \(operand1, function, operand2\) is evaluated presently as maximum Wu-P) s
5 681 M
(almer similarity of Synsets for cartesian product of operand1 and operand2. But it can be augm) s
5 670 M
(ented with any arbitrary weighting scheme. Cartesian product of Synsets for 2 entities is the ) s
5 659 M
(simplest 2-dimensional tensor neuron.) s
5 648 M
(*\) Sum of tensor neuron weights for all random walks composition tree evaluation is printed as) s
5 637 M
( merit of the text.) s
5 626 M
(*\) Logs for this have been committed to testlogs) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(------------------------------------------) s
5 582 M
(397. \(FEATURE-DONE\) Korner Entropy Intrinsic Merit for Recursive Gloss Overlap graphs - 14 Mar) s
5 571 M
(ch 2017 - related to 383) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(------------------------------------------) s
5 538 M
(*\) Implemented  Korner Entropy intrinsic merit for Recursive Gloss Overlap graph.) s
5 527 M
(*\) function korner_entropy\(\) finds maximal independent sets for all vertices and chooses the m) s
5 516 M
(inimum entropy such that a vertex is in a maximal independent set.) s
5 505 M
(*\) Logs for this have been committed to testlogs/) s
5 483 M
(Previous two intrinsic merit measures - tensor neuron network and korner entropy - sufficientl) s
5 472 M
(y quantify the complexity of a document's inner purport. Neuron Tensors transform the ontology) s
5 461 M
( subgraph of a text into a new kind of multilayered graph perceptron. Infact it generalizes tr) s
5 450 M
(aditional multilayered trellis perceptrons for which backpropagation is applied to find weight) s
5 439 M
(s per activation edge. There is no known backpropagation algorithm for generic graph of percep) s
5 428 M
(trons. Neuron Tensors per word-word edge are equated to a lambda function and compositional tr) s
5 417 M
(ee of these neurons for any walk on the text-graph is an alternative deep learning technique t) s
5 406 M
(o backpropagation. Korner Entropy is a measure of disconnectedness \(total probability of verti) s
5 395 M
(ces in independent sets\). Presently all pairs shortest paths is used in place of random walks ) s
5 384 M
(- set of all pairwise path tensor neuron lambda compositions is an upperbound on set of all ra) s
5 373 M
(ndom walks.) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-----------------------------------------) s
5 329 M
(398. \(FEATURE-DONE\) Software Analytics update - 15 March 2017) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(-----------------------------------------) s
5 296 M
(*\) Software Analytics Deep Learning code has been updated to include all Deep Learning impleme) s
5 285 M
(ntations: RNN LSTM, RNN GRU, BackPropagation) s
5 274 M
(and ConvolutionNetwork+BackPropagation) s
5 263 M
(*\) logs for this have been committed to software_analytics/testlogs/) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(-----------------------------------------) s
5 219 M
(399. \(USECASE\) NeuronRain Usecases - Software \(Log\) Analytics and VIRGO kernel_analytics confi) s
5 208 M
(g - 16 March 2017) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(-----------------------------------------) s
5 175 M
(Software Analytics Deep Learning implementation in python-src/software_analytics/ sources its ) s
5 164 M
(input variables - CPU%, Memory%, TimeDuration% for a process from logs. VIRGO kernel_analytics) s
5 153 M
( module reads machine learnt config variables from kernel_analytics.conf and exports them kern) s
5 142 M
(elwide. An example single layer perceptron usecase is:) s
5 120 M
(        If the CPU% is > 75% and Memory% > 75% and TimeDuration% > 75% then) s
5 109 M
(                do a kernelwide overload signal) s
5 98 M
(        else) s
5 87 M
(                do nothing) s
5 65 M
(Sigmoid function for this usecase is:) s
5 54 M
(        sigma\(4/9 * x1 + 4/9 * x2 + 4/9 * x3\) where x1 = CPU%, x2 = Memory% and x3 = TimeDurat) s
5 43 M
(ion%) s
5 32 M
(which is 1 when all variables reach 75%.) s
5 10 M
(Spark Streaming Log Analyzer ETLs htop data to .parquet files and Software Analytics code read) s
_R
S
%%Page: (233) 233
%%BeginPageSetup
_S
18 36 translate
/pagenum 233 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (233) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(s it, deep-learns above neural network and writes a key-value variable OverloadSignal=1 to VIR) s
5 681 M
(GO kernel_analytics.conf. VIRGO kernel_analytics driver reads it and exports a kernelwide vari) s
5 670 M
(able kernel_overload=1. Any interested kernel driver takes suitable action based on it \(automa) s
5 659 M
(tic shutdown, reboot, quiesce intensive applications etc.,\)) s
5 637 M
(An inverse of this usecase is to find the weights for x1,x2,x3 when system crashes. This requi) s
5 626 M
(res a gradient descent or backpropagation with multilayered perceptron.) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(-----------------------------------------) s
5 582 M
(400. \(THEORY\) Mechanism Design, Condorcet Jury Theorem, Derandomization, Gibbard-Satterthwaite) s
5 571 M
( Theorem and Designing a Voting Mechanism) s
5 560 M
(- 27 March 2017 , 30 March 2017, 31 March 2017, 18 April 2017 - related to 368 and all other P) s
5 549 M
(\(Good\) circuit related sections) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(-----------------------------------------) s
5 516 M
(Gibbard-Satterthwaite theorem prevents any Social Choice Function defined on atleast 3 element) s
5 505 M
(s from being non-dictatorial. Mechanism Design is the reverse game theory which tries to circu) s
5 494 M
(mvent this limitation and designs a mechanism for required result for social goodness. With re) s
5 483 M
(spect to P\(Good\) series and circuit, design of a voting mechanism for arbitrary number of vote) s
5 472 M
(rs which overcomes limitation of Gibbard-Satterthwaite Theorem would imply convergence of P\(Go) s
5 461 M
(od\) series. This is related to exact learning of boolean social choice functions with zero-err) s
5 450 M
(or in 368.6. Open question: Does exact learning of a voter decision function imply a voting me) s
5 439 M
(chanism design?) s
5 417 M
(A simple example of strategic/tactical voting and Gibbard-Satterthwaite theorem is given in ht) s
5 406 M
(tp://rangevoting.org/IncentToExagg.html. Here by changing the ranking preferences \(i.e voter s) s
5 395 M
(witch loyalties by manipulation, tactical and strategic voting, bribery, bounded rationality a) s
5 384 M
(nd erroneous decision etc.,\) result of an election with atleast 3 candidates can be changed. T) s
5 373 M
(hus majority voting is vulnerable to error. Gibbard-Satterthwaite Theorem applies to all votin) s
5 362 M
(g systems including secret ballot because even discreet voter can be psychologically influence) s
5 351 M
(d to change stance against inherent desire.) s
5 329 M
(This implies for more than 3 candidates, RHS of P\(Good\) series for majority voting can never c) s
5 318 M
(onverge because there is always a non-zero error either by bounded rationality or manipulation) s
5 307 M
(. By pigeonhole principle either some or all of voters contributing to the P\(Good\) summation m) s
5 296 M
(ust have decided incorrectly or manipulated with non-zero probability. But this requires voter) s
5 285 M
( decision function \(i.e social choice function\) to be non-boolean \(Candidates are indexed as 0) s
5 274 M
(,1,2,...\). Exact learning of boolean functions applies to only 2 candidates setting where cand) s
5 263 M
(idates are indexed as 0 and 1. Also, LHS of P\(Good\) series which is a \(or quite close to a dic) s
5 252 M
(tatorship by Friedgut-Kalai-Nisan quantitative version of Gibbard-Satterthwaite theorem\) dicta) s
5 241 M
(torship social choice function, would be strategyproof \(resilient to error and manipulative vo) s
5 230 M
(ting\) and thus may have greater goodness probability \(which is a conditional probability on ch) s
5 219 M
(osen one's goodness\) than RHS in more than 3 candidates setting.) s
5 197 M
(Condorcet Jury Theorem mentioned in references below, is exactly the P\(Good\) binomial series s) s
5 186 M
(ummation and has been studied in political science and social choice theory. This theorem impl) s
5 175 M
(ies majority decision is better and its goodness probability tends to 1 than individual decisi) s
5 164 M
(on if probability of correct decision making for each voter is > 0.5. In the opposite case maj) s
5 153 M
(ority decision goodness worsens if individual decision goodness probability is < 0.5. Thus maj) s
5 142 M
(ority voting is both good and bad depending on individual voter decision correctness. In terms) s
5 131 M
( of BP* complexity definitions, if each voter has a BP* social choice function \(boolean or non) s
5 120 M
(-boolean\) with p > 0.5, accuracy of majority voting tends to 100% correctness i.e Composition ) s
5 109 M
(Majn\(BPX1, BPX2,...\) for some complexity class BPXi for each voter implying derandomization \(t) s
5 98 M
(his also implies BPX=X if Majn\(BPX1,BPX2,...\) composition is in BPX\). Proof of BPP != P would ) s
5 87 M
(imply there is atleast one voter with p < 0.5. Condorcet theorem ignores dependency and unequa) s
5 76 M
(l error scenarios but still holds good by central limit theorem \(because each voter decision i) s
5 65 M
(s a random variable +1 or -1 and sum of these random variables for all voters tends to gaussia) s
5 54 M
(n by CLT\) and law of large numbers.) s
5 32 M
(Corollary: From 129 and 368, depth of Majority voting circuit composition can be unbounded and) s
5 21 M
( if all voter social choice functions have same number of variables and number of voters is ex) s
5 10 M
(ponential in number of variables, Majority voting circuit composition with error is in BPEXP t) s
_R
S
%%Page: (234) 234
%%BeginPageSetup
_S
18 36 translate
/pagenum 234 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (234) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(han PH. By Condorcet Jury Theorem, if all voters tending to infinity decide correctly with pro) s
5 681 M
(bability > 0.5, then BPEXP derandomizes to EXP => BPEXP=EXP. Non-boolean social choice functio) s
5 670 M
(ns for more than 2 candidates are usually preference profiles per voter \(list of ranked candid) s
5 659 M
(ates per voter\) and topranked candidate is voted for by the voter.) s
5 637 M
(If Majority Voting Circuit is in BPP, which is quite possible if number of voters is polynomia) s
5 626 M
(l in number of variables and circuit is of polynomial size and because from Adleman's Theorem ) s
5 615 M
(\(and Bennet-Gill Theorem\), BPP is in P/poly, BPP derandomizes to P for infinite electorate wit) s
5 604 M
(h decision correctness probability > 0.5 for all voters. Thus homogeneous electorate of high d) s
5 593 M
(ecision correctness \(> 0.5\) implies both BPEXP=EXP and P=BPP.) s
5 571 M
(Locality Sensitive Hashing accumulates similar voters in a bucket chain. The social choice fun) s
5 560 M
(ction is the distance function. Circuit/Algorithm for Multiway contest social choice \(generali) s
5 549 M
(zation of Majority boolean function\) is:) s
5 538 M
(        *\) Locality Sensitive Hashing \(LSH\) for clustering similar voters who vote for same ca) s
5 527 M
(ndidate) s
5 516 M
(        *\) Sorting the LSH and find the maximum size cluster \(bucket chain\)) s
5 494 M
(References:) s
5 483 M
(-----------) s
5 472 M
(400.1 Mechanism Design, Convicting Innocent, Arrow and GibbardSatterthwaite Theorems - https:/) s
5 461 M
(/ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-254-game-theory-with-engine) s
5 450 M
(ering-applications-spring-2010/lecture-notes/MIT6_254S10_lec21.pdf) s
5 439 M
(400.2 Electoral Fraud, Gibbard-Satterthwaite Theorem and its recent extensions on manipulative) s
5 428 M
( and strategic voting, Cake cutting Multi Agent Resource Allocation Protocols - https://www.il) s
5 417 M
(lc.uva.nl/COMSOC/theses/phd-schend.pdf) s
5 406 M
(400.3 Most important point of this document \(which I was searching for 11 years\) - Condorcet J) s
5 395 M
(ury Theorem in Political Science - http://www.stat.berkeley.edu/~mossel/teach/SocialChoiceNetw) s
5 384 M
(orks10/ScribeAug31.pdf - Asymptotic closed form and convergence of P\(Good\) binomial summation ) s
5 373 M
(when probability of good decision  > 0.5 uniformly for all voters was already solved by Condor) s
5 362 M
(cet 2 centuries ago :) s
5 351 M
(         "... Condorcet\342\\200\\231s Jury theorem applies to the following hypothetical situation) s
5 340 M
(: suppose that there is some decision to be made between two alternatives + or \342\\210\\222. Assu) s
5 329 M
(me that one of the two decisions is \342\\200\\230correct,\342\\200\\231 but we do not know which. Furth) s
5 318 M
(er, suppose there are n individuals in a population, and the population as a whole needs to co) s
5 307 M
(me to a decision. One reasonable method is a majority vote. So, each individual has a vote Xi ) s
5 296 M
(, taking the value either +1 or \342\\210\\2221 in accordance with his or her opinion, and then the) s
5 285 M
( group decision is either + or \342\\210\\222 depending on whether Sn = Pn i=1 Xi is positive or ne) s
5 274 M
(gative.  Theorem 1.1. \(Condorcet\342\\200\\231s Theorem\) [4] If the individual votes Xi , i = 1, . ) s
5 263 M
(. . , n are independent of one another, and each voter makes the correct decision with probabi) s
5 252 M
(lity p > 1 2 , then as n \342\\206\\222 \342\\210\\236, the probability of the group coming to a correct) s
5 241 M
( decision by majority vote tends to 1. ...") s
5 230 M
(400.4 Strategic Voting and Mechanism Design - [VinayakTripathi] - https://www.princeton.edu/~s) s
5 219 M
(morris/pdfs/PhD/Tripathi.pdf) s
5 208 M
(400.5 Condorcet Jury Theorem and OCR - Section 2 - http://math.unipa.it/~grim/Jlamlouisa.PDF) s
5 197 M
(400.6 Condorcet Jury Theorem graph plots - http://www.statisticalconsultants.co.nz/blog/condor) s
5 186 M
(cets-jury-theorem.html) s
5 175 M
(400.7 Probabilistic Aspects of Voting - Course Notes - www.maths.bath.ac.uk/~ak257/talks/Uugna) s
5 164 M
(a.pdf - Condorcet Jury Theorem, Bertrand Ballots Theorem and Gibbard Random Dictatorship Theor) s
5 153 M
(em) s
5 142 M
(400.8 Law of Large Numbers and Weighted Majority - [Olle Haggstrom, Gil Kalai, Elchanan Mossel) s
5 131 M
(] - https://arxiv.org/abs/math/0406509v1 ) s
5 120 M
(400.9 Thirteen Theorems in search of truth - http://www.socsci.uci.edu/~bgrofman/69%20Grofman-) s
5 109 M
(Owen-Feld-13%20theorems%20in%20search%20of%20truth.pdf - Condorcet Jury Theorem for Heterogene) s
5 98 M
(ous voters \(voters with unequal decision correctness probability - Poisson-binomial distributi) s
5 87 M
(on\) - same as Condorcet Jury Theorem for Homogeneous voters \(voters with equal decision correc) s
5 76 M
(tness probability\) when correctness probabilities are a Gaussian and > 0.5. In other words, la) s
5 65 M
(rge majority is more correct than small majority.) s
5 54 M
(400.10 Margulis-Russo Formula and Condorcet Jury Theorem - http://www.cs.tau.ac.il/~amnon/Clas) s
5 43 M
(ses/2016-PRG/Analysis-Of-Boolean-Functions.pdf - pages 224-225 - Majority function is defined ) s
5 32 M
(in Erdos-Renyi Random graph model with each edge having probability p. Maj\(N,G\) for a random g) s
5 21 M
(raph G with probability of edge being p = True of G has atleast N/2 = |V|*\(|V| - 1\)/4 edges. M) s
5 10 M
(ajority voting can be defined as a random graph with each voter being an edge with decision co) s
_R
S
%%Page: (235) 235
%%BeginPageSetup
_S
18 36 translate
/pagenum 235 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (235) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(rrectness probability p i.e Probability of Existence of an edge increases with correctness of ) s
5 681 M
(decision by voter. Margulis-Russo formula describes the sharp threshold phenomenon for boolean) s
5 670 M
( functions and rate of change of P\(Maj\(G\)\)=1 with respect to p, specifically for majority bool) s
5 659 M
(ean function. Thus it is an alternative spectacle to view P\(Good\) majority voting binomial coe) s
5 648 M
(fficient summation and Condorcet Jury Theorem. For majority function, sharp threshold occurs a) s
5 637 M
(t p >= 0.5.) s
5 626 M
(400.11 Percolation, Sharp Threshold in Majority, Condorcet Jury Theorem and later results, Inf) s
5 615 M
(luence, Pivotality - http://www.cs.tau.ac.il/~safra/PapersAndTalks/muligil.old.pdf) s
5 604 M
(400.12 Complexity Inclusion Graph - https://www.math.ucdavis.edu/~greg/zoology/diagram.xml - B) s
5 593 M
(PEXP=EXP implies a significant collapse of the complexity class separation edges.) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(------------------------------------------) s
5 549 M
(401. \(FEATURE-DONE\) LSH Index implementation for NeuronRain AsFer Text and Crawled Web Documen) s
5 538 M
(ts Intrinsic Merit Ranking - 4 April 2017) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(------------------------------------------) s
5 505 M
(*\) This commit adds a Locality Sensitive Hashing based inverted index for scrapy crawled HTML ) s
5 494 M
(website pages.) s
5 483 M
(*\) It is a derivative of LSH based similarity clustering implemented in python-src/LocalitySen) s
5 472 M
(sitiveHashing.py) s
5 461 M
(*\) It has to be mentioned here that ThoughtNet is also an inverted index for documents with ad) s
5 450 M
(ditional features \(i.e it is) s
5 439 M
(classifier based than raw string similarity\)) s
5 428 M
(*\) LSHIndex uses Redis Distributed Key Value Persistent Store as hashtable backend to store in) s
5 417 M
(dex.) s
5 406 M
(*\) LSHIndex is not string to text inverted index, but hashed string to text inverted index \(so) s
5 395 M
(mething like a digital fingerprint\)) s
5 384 M
(*\) Presently two types of hashes exist: primitive ordinal and MD5 hash) s
5 373 M
(*\) Only one hash table is implemented on Redis with multiple hash functions with random choice) s
5 362 M
(.) s
5 351 M
(*\) Presently 50 hash functions with 50 entries hash index has been implemented.) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-----------------------------------------------) s
5 307 M
(402. \(FEATURE-DONE\) ThoughNet Index implementation for NeuronRain AsFer Text and Crawled Web D) s
5 296 M
(ocuments Intrinsic Merit Ranking - 4 April 2017) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(-----------------------------------------------) s
5 263 M
(*\) This commit implements an inverted index on top of ThoughtNet) s
5 252 M
(*\) ThoughtNet is a hypergraph stored in file and on Neo4j Graph Database) s
5 241 M
(*\) JSON loads ThoughtNet edges and hypergraph files and queries by classes returned by Recursi) s
5 230 M
(ve Gloss Overlap classifier) s
5 219 M
(*\) Querying Neo4j is also better, but file representation of ThoughtNet is quite succinct and ) s
5 208 M
(scalable because it just numerically) s
5 197 M
(encodes each edge \(= a web crawled HTML document\)) s
5 186 M
(*\) file representation of ThoughtNet views the hypergraph as stack vertices interconnected by ) s
5 175 M
(document id\(s\) similar to a source code) s
5 164 M
(versioning system. Having similar view on a graph database doesn't look straightforward) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(-----------) s
5 120 M
(403. \(FEATURE-DONE\) Initial commits for Indexless Hyperball Recursive Web Crawler - 7 April 20) s
5 109 M
(17) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-----------) s
5 76 M
(*\) An indexless crawler which tries to find a url matching a query string in a recursive crawl) s
5 65 M
( creating a hyperball of certain radius) s
5 54 M
(*\) This is similar to Stanley Milgram, Kleinberg Lattice Small World Experiments and recent Hy) s
5 43 M
(perball algorithm for Facebook graph which) s
5 32 M
(concluded that Facebook has 3.74 degrees of freedom.) s
5 21 M
(*\) Starts with a random url on world wide web.) s
5 10 M
(*\) Success probability depends on average number of hops over large number of queries.) s
_R
S
%%Page: (236) 236
%%BeginPageSetup
_S
18 36 translate
/pagenum 236 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (236) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(*\) This is a Randomized Monte Carlo Crawler and does a Depth First Search from an epicentre pi) s
5 681 M
(vot url to start with) s
5 670 M
(*\) Hyperball References:) s
5 659 M
(        1\) http://webgraph.di.unimi.it/docs/it/unimi/dsi/webgraph/algo/HyperBall.html) s
5 648 M
(        2\) Facebook Hyperball - https://arxiv.org/pdf/1308.2144.pdf) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(--------------------------------) s
5 604 M
(404. \(THEORY\) Indexless Web Search, World Wide Web Graph Property Testing, On-demand Indexing ) s
5 593 M
(- related to 403 - 9 April 2017) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(--------------------------------) s
5 560 M
(Almost all known web search engines rely on a pre-built index created from already crawled WWW) s
5 549 M
( graph. Is a pre-built index necessary for) s
5 538 M
(web search? Can the small world property of world wide web graph \(i.e property of graph such t) s
5 527 M
(hat easy short paths exist between any pairs) s
5 516 M
(of vertices as proved in Stanley Milgram experiment, Kleinberg Lattice\), be applied to find a ) s
5 505 M
(url matching a search query starting from any) s
5 494 M
(vertex? Facebook graph has almost a billion user vertices and on an average any person is conn) s
5 483 M
(ected to any other within 3.74 path lengths.) s
5 472 M
(Can this be generalized to world wide web? Traditional book index maps word queries to pages h) s
5 461 M
(aving the words. If entire book is translated) s
5 450 M
(into a huge definition graph by Recursive Gloss Overlap graph, then instead of looking-up inde) s
5 439 M
(x, starting at a random word vertex, any other) s
5 428 M
(word should be easily reachable if graph has small world property. This realworld problem is a) s
5 417 M
(lready studied as Graph Property Testing which are algorithms to test if a graph has specific ) s
5 406 M
(property\(clique, colorability, edge and vertex queries etc.,\). Hyperball indexless crawler in ) s
5 395 M
(NeuronRain AsFer is an effort in this line of thought. Such an indexless crawler can "learn" a) s
5 384 M
(n index online by repeated queries and build an index from cached results at runtime. Index is) s
5 373 M
( not prebuilt but grown ondemand. Assuming internet has such small world degrees of freedom up) s
5 362 M
(perbounded by a constant, any query is constant time serviceable in average case complexity.) s
5 340 M
(References:) s
5 329 M
(-----------) s
5 318 M
(404.1 Small World Property - [WattsStrogatz] -http://www.nature.com/nature/journal/v393/n6684/) s
5 307 M
(full/393440a0.html) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(--------------------------------) s
5 263 M
(405. \(FEATURE-DONE\) Commit - NeuronRain AsFer-CPython Extensions VIRGO64 system call invocatio) s
5 252 M
(ns - 20 April 2017) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(--------------------------------) s
5 219 M
(*\) VIRGO64 system calls are invoked from Python code by CPython extensions.) s
5 208 M
(*\) Separate folder cpython_extensions64/ has been created for 64bit VIRGO kernel) s
5 197 M
(*\) Requires Python 64-bit version) s
5 186 M
(*\) Logs for VIRGO64 memory and filesystem systemcalls-to-drivers have been committed to testlo) s
5 175 M
(gs) s
5 164 M
(*\) With this Complete Application Layer-SystemCalls-Drivers request routing for python applica) s
5 153 M
(tions deployed on VIRGO64 works.) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(------------------------------------) s
5 109 M
(406. \(FEATURE-DONE\) Commits - NeuronRain AsFer Boost C++-Python - VIRGO64 System calls + Drive) s
5 98 M
(rs invocation - 26 April 2017) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(------------------------------------) s
5 65 M
(*\) VIRGO64 system calls are invoked from C++ by Boost::Python extensions) s
5 54 M
(*\) Kernel Logs for VIRGO KMemCache, Clone and FileSystem Calls Boost::python invocations have ) s
5 43 M
(been committed to testlogs/) s
5 32 M
(*\) Boost version used is 1.64.0) s
5 21 M
(*\) setup.py has been updated with library_dirs config variable) s
5 10 M
(*\) virgofstest.txt for filesystem calls has been committed to testlogs/) s
_R
S
%%Page: (237) 237
%%BeginPageSetup
_S
18 36 translate
/pagenum 237 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (237) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(------------------------------------------) s
5 659 M
(407. \(FEATURE-DONE\) Commits - 28 April 2017 - NeuronRain AsFer-Boost::Python-C++ - VIRGO64 sys) s
5 648 M
(temcalls and drivers invocations) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(------------------------------------------) s
5 615 M
(*\) VIRGO64 clone, kmemcache and filesystem system calls were invoked from Python-C++ boost ext) s
5 604 M
(ensions again and reproducibly work) s
5 593 M
(without kernel panics.) s
5 582 M
(*\) Logs, persisted disk file written by filesystem system calls and rebuilt boost-python C++ e) s
5 571 M
(xtensions have been committed to testlogs/) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(------------------------------) s
5 527 M
(408. \(THEORY\) Condorcet Jury Theorem, Collaborative Filtering, Epistemological Democracy, Netw) s
5 516 M
(ork Voting in WWW Link Graph,) s
5 505 M
(Majority Function and Correctness of Majority Vote Ranking - 16 May 2017, 23 May 2017) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(------------------------------) s
5 472 M
(Let v1, v2 be two vertices being good and bad choices respectively. In link graph all incoming) s
5 461 M
( edges to a vertex v1 are) s
5 450 M
(votes for that vertex. From Condorcet Jury Theorem if all incoming links occur with probabilit) s
5 439 M
(y p > 0.5, then probability that v1 is chosen tends to 1 for large indegree. For 2 candidates ) s
5 428 M
(c1, c2 and voters v1, v2, v3, ... vn, edges \(votes\) to c1 occur with probability p and edges\(v) s
5 417 M
(otes\) to v2 occur with probability 1-p. Thus voting graph is a random bipartite graph and can ) s
5 406 M
(be generalized to multiple candidates. Candidates Vertex set C={c1, c2, ...,cn} can have more ) s
5 395 M
(than one indegree and zero outdegree. Voters Vertex set V={v1, v2, ..., vn} can have only one ) s
5 384 M
(outdegree and zero indegree. If C intersection V != emptyset, then graph is general directed g) s
5 373 M
(raph and can have cycles. Each voter vertex vy either votes to some other vertex vx or receive) s
5 362 M
(s vote from vx. vy votes for vx with probability p. vy votes for vertices other than vx with c) s
5 351 M
(umulative probability 1-p. Vertices voted by vy are ranked by goodness \(i.e goodness\(vx\) > goo) s
5 340 M
(dness\(others\)\). If vy votes for vx then vy decides with decision correctness probability p.) s
5 318 M
(More generically, vertex vx receives votes from vertices vy2,vy2,vy3,...,vyn with decision cor) s
5 307 M
(rectness probability p. Vertices vy1,vy2,vy3,...,vyn vote for vertices other than vx with deci) s
5 296 M
(sion correctness probability 1-p. Each vertex in WWW link graph has this 2 level tree structur) s
5 285 M
(e with varying probability pi. From Condorcet Jury Theorem, hyperlinks to vx from vy1,vy2,...,) s
5 274 M
(vyn  are 100% correct group decision if p > 0.5. Equal p for all votes to a vertex is the homo) s
5 263 M
(geneous voter assumption of Condorcet Jury Theorem. If the vertices are ranked by some algorit) s
5 252 M
(hm \(HITS Hub-Authority, PageRank etc.,\) then correctness of rank is measured by Condorcet Jury) s
5 241 M
( Theorem. It is apt to mention here that probability p is different from weights of directed g) s
5 230 M
(raph edges in PageRank Markov Random Walk iteration \(where weight of outgoing edge/vote is dec) s
5 219 M
(ided by the ratio 1/outdegree\) in the sense that: 1/outdegree is the static percentage of vote) s
5 208 M
( to an adjacent vertex in a non-random graph while p in network voting is a dynamic measure fo) s
5 197 M
(r decision correctness of a vote to a vertex in a random graph. For heterogeneous voter assump) s
5 186 M
(tion, more recent theorems which generalize Condorcet Jury Theorem are required.) s
5 164 M
(Collaborative Filtering in Recommender Systems is the most generalized way of Majority Voting ) s
5 153 M
(where a matrix of users to their preferences for items is used as a training data for a new us) s
5 142 M
(er to recommend an item. For example, if 9 out of 10 users up vote an item, 11th user is recom) s
5 131 M
(mended that item and viceversa for down votes. Above analysis is an alternative direction for ) s
5 120 M
(defining value judgement correctness already discussed in references 408.1 and 408.2. Correlat) s
5 109 M
(ed Votes and their effects on Condorcet Jury Theorem are analyzed by [KrishnaLadha].) s
5 87 M
(References:) s
5 76 M
(----------) s
5 65 M
(408.1 Condorcet Jury Theorem and the truth on the web - http://voxpublica.no/2017/03/condorcet) s
5 54 M
(s-jury-theorem-and-the-truth-on-the-web) s
5 43 M
(408.2 Webometrics, Goodness of PageRank and Condorcet Jury Theorem - [MastertonOlssonAngere] -) s
5 32 M
( https://link.springer.com/article/10.1007/s11192-016-1837-1 - PageRank is very good in findin) s
5 21 M
(g truth i.e it is close to objective judgement with certain empirical assumptions despite bein) s
5 10 M
(g subjective ranking measure. Here objective judgement is any value judgement which is not maj) s
_R
S
%%Page: (238) 238
%%BeginPageSetup
_S
18 36 translate
/pagenum 238 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (238) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ority voting or subjective. Computational linguistic text graph analysis which reckons the psy) s
5 681 M
(chological aspects of text comprehension is an objective intrinsic merit judgement. Ideally ma) s
5 670 M
(jority vote should coincide with objective judgement absence of which implies error in voting ) s
5 659 M
(or objective judgement or both \(family of BP* complexity classes\).) s
5 648 M
(408.3 Generalized Condorcet Jury Theorem, Free Speech, Correlated Voting \(dependence of voters) s
5 637 M
(\) - https://www.jstor.org/stable/2111584) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(--------------------------) s
5 593 M
(409. \(FEATURE-DONE\) Commits - 17 May 2017 - NeuronRain AsFer-VIRGO64 Boost-C++-Python invocati) s
5 582 M
(ons) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(--------------------------) s
5 549 M
(*\) Boost Python C++ VIRGO64 system calls were tested repeatedly in a loop) s
5 538 M
(*\) All three system call subsystems - virgo_clone, virgo_kmemcache, virgo_filesystem - work we) s
5 527 M
(ll without any kernel panics) s
5 516 M
(*\) But a strange thing was observed: virgo filesystem system calls were not appending to disk ) s
5 505 M
(file but when run as) s
5 494 M
("strace -f python asferpythonextensions.py" disk file is written to \(a coincidence or strace d) s
5 483 M
(oing something special\)) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(-----------------------------) s
5 439 M
(410. \(THEORY\) Objective and Subjective Value Judgement, Text Ranking and Condorcet Jury Theore) s
5 428 M
(m - 29 May 2017 and 4 June 2017 - Related to 202, 384, 385 and all Recursive Lambda Function G) s
5 417 M
(rowth and Recursive Gloss Overlap algorithms sections in this document) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(-----------------------------) s
5 384 M
(Objective merit or Intrinsic merit of a document is the measure of meaningfulness or informati) s
5 373 M
(on contained in a document. Subjective merit is how the document is perceived - Reality Versus) s
5 362 M
( Perception - Both should ideally coincide but do not.) s
5 340 M
(Following are few real-world examples in addition to academic credentials example in 202:) s
5 329 M
(*\) Soccer player, Cricket player or a Tennis player is measured intrinsically by number of goa) s
5 318 M
(ls scored, number of runs/wickets or number of grandslams won respectively and not subjectivel) s
5 307 M
(y by extent of votes or fan following to them \(incoming edges\). Here reality and perception co) s
5 296 M
(incide often and an intrinsically best player by records is also most revered. Any deviation i) s
5 285 M
(s because of human prejudice. Here intrinsic merit precedes social prestige.) s
5 274 M
(*\) Merits of students are judged by examinations \(question-answering\) and not by majority voti) s
5 263 M
(ng by faculty. Thus question-answering or interview is an algorithm to measure intrinsic merit) s
5 252 M
( objectively. Here again best student in terms of marks or grades is also the most favoured. A) s
5 241 M
(ny deviation is human prejudice. Interview of a document is how relevant it is to a query meas) s
5 230 M
(ured by graph edit distance between recursive gloss overlap graphs of query and text. Here als) s
5 219 M
(o intrinsic merit precedes social prestige.) s
5 197 M
(Present ranking algorithms are mostly majority voting \(perception\) oriented which is just half) s
5 186 M
( truth. Other half is the reality and there are no known algorithms to objectively judge docum) s
5 175 M
(ents.  Recursive Lambda Function Growth algorithm and its specialization Recursive Gloss Overl) s
5 164 M
(ap graph are objective intrinsic merit algorithms filling this void and try to map above real-) s
5 153 M
(life examples to text document ranking.) s
5 131 M
(But how to measure "number of goals etc.," of a document vis-a-vis the rest? This is where Com) s
5 120 M
(putational Linguistic Text-to-Graph analysis fits in. Graph representation of a document with ) s
5 109 M
(various quantitative and qualitative graph complexity measures differentiates and grades the t) s
5 98 M
(exts by intrinsic complexity. This combines two fields: Computational Linguistics which is fou) s
5 87 M
(nded on Psychoanalysis and Graph Theory. Former pertains to mental picture created by reading ) s
5 76 M
(a document and latter is how complex that picture is. Recursive Lambda Function Growth envisag) s
5 65 M
(es an ImageNet which is a graph of related images of entities to create an animated movie repr) s
5 54 M
(esentation of a text stored as a subgraph of ImageNet. ImageNet \(pictorial WordNet\) is not yet) s
5 43 M
( available.) s
5 21 M
(Condorcet Jury Theorem formalizes above intuition and bridges two worlds - objective reality a) s
5 10 M
(nd subjective perception. A best performing student by objective examination/interview assessm) s
_R
S
%%Page: (239) 239
%%BeginPageSetup
_S
18 36 translate
/pagenum 239 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (239) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ent is also the most voted by infinite faculty if correctness of decision > 0.5 for all facult) s
5 681 M
(y voters i.e. Objective Intrinsic Merit = Subjective Perception based Majority Voting Merit.) s
5 659 M
(Crucial Observation is: Merit creates Centrality \(Social prestige\) and not the opposite - Pres) s
5 648 M
(tige can not create merit but can only be a measure of merit. Otherwise this is an anachronism) s
5 637 M
( - merit does not exist yet but prestige exists and thus prestige preceding merit.) s
5 615 M
(Alternatively, interview of document is simply the rank of the document in terms of intrinsic ) s
5 604 M
(graph complexity merit of it versus the rest of the text documents. Thus there are 2 aspects o) s
5 593 M
(f interview:) s
5 582 M
(*\) Ranking text document by intrinsic graph complexity/entropy merit) s
5 571 M
(*\) Relevance of the text to a query - graph edit distance) s
5 549 M
(Here again another question can be raised: Why is a graph representation of text an apt object) s
5 538 M
(ive intrinsic merit measure? Because, by "Circuits of Mind" and "Mind grows circuits/lambda fu) s
5 527 M
(nctions" theories \(cited in previous sections\), biological neurons are connected as a graph an) s
5 516 M
(d information from sensory perception is transmitted through these neurons. Threshold TC circu) s
5 505 M
(its theoretically formalize neural networks. Better neuroimaging techniques for quantifying th) s
5 494 M
(e potentials created in brain by cerebral representation of a text could be ideal relevance me) s
5 483 M
(asures and can be substituted in Tensor Neuron Model of Recursive Lambda Function Growth algor) s
5 472 M
(ithm.) s
5 450 M
(There is special case of intrinsic merit: For example, reading a story creates a mental pictur) s
5 439 M
(e of it as a graph of events. Objectively judging it could vary from one human to the other ma) s
5 428 M
(king it subjective. But still the absolute objective merit can be defined for such a special c) s
5 417 M
(ase by applying EventNet to this problem - whole set of events are laid out as events with par) s
5 406 M
(takers with cause-effect edges amongst them.) s
5 384 M
(References:) s
5 373 M
(-----------) s
5 362 M
(410.1 The Meaning of Meaning - http://courses.media.mit.edu/2004spring/mas966/Ogden%20Richards) s
5 351 M
(%201923.pdf) s
5 340 M
(410.2 WordNet and Word2Vec - https://yaledatascience.github.io/2017/03/17/nnnlp.html - In word) s
5 329 M
(2vec words from text are represented in a vector space and contextually related words are clos) s
5 318 M
(e enough in proximity on vector space. Word2Vec is a recent neural network model of word relat) s
5 307 M
(ions similar to Neural Tensor Network \(NTN\). NTN defines a relation between two words as a ten) s
5 296 M
(sor neuron and thus complete WordNet can be defined as a graph with Tensor Neuron as edge pote) s
5 285 M
(ntials. This is the motivation for invoking Neural Tensor WordNet as an objective intrinsic me) s
5 274 M
(rit indicator as it approximates human brain neurological text comprehension and visualization) s
5 263 M
(.) s
5 252 M
(410.3 Random Walks on WordNet - http://anthology.aclweb.org/N/N15/N15-1165.pdf - Recursive Lam) s
5 241 M
(bda Function Growth algorithm does something similar to this. It finds all random walks on Rec) s
5 230 M
(ursive Gloss Overlap graph \(described in 385\) and constructs a lambda function composition tre) s
5 219 M
(e for each such walk and assigns a Neural Tensor Potential to each edge of these trees.) s
5 208 M
(410.4 ImageNet - Pictorial WordNet - http://www.image-net.org/ - image net is recently availab) s
5 197 M
(le. In the context of Recursive Lambda Function Growth, lambda functions inferred from ImageNe) s
5 186 M
(t than WordNet/ConceptNet are pictures and composition of the lambda functions translates to a) s
5 175 M
(nimating the pictures based on PoS or tensor relation. For example the composition for "It rai) s
5 164 M
(ned heavily today", rained\(It, heavily\(today\)\), should theoretically compose/superpose/animate) s
5 153 M
( images for day, heaviness, rain from leaves to root of the tree. ) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(-------------------------------------) s
5 109 M
(411. \(FEATURE-DONE\) AngularJS - Tornado GUI-REST WebService - Commits - 1 June 2017) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(------------------------------------- ) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(---------------------) s
5 54 M
(NeuronRain AngularJS RESTful client for Tornado webserver and others) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(---------------------) s
5 21 M
(*\) AngularJS support has been added to NeuronRain GUI-WebServer with a new webserver_rest_ui/N) s
5 10 M
(euronRain_AngularJS_REST_WebServer.py which reads) s
_R
S
%%Page: (240) 240
%%BeginPageSetup
_S
18 36 translate
/pagenum 240 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (240) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(and renders angularjs Model-View-Controller templates) s
5 681 M
(*\) New AngularJS Model, View and Controller script-html templates have been added to angularjs) s
5 670 M
( directory) s
5 659 M
(*\) LSHIndex.py has been updated to have commandline arguments for index queries) s
5 648 M
(*\) Hyperball Crawler pivot epicentre url has been changed and an example query "Chennai" was f) s
5 637 M
(ound to be matching within few hops.) s
5 626 M
(*\) NeuronRain_REST_WebServer.py has been updated to print the logs for the script execution to) s
5 615 M
( browser console with subprocess POpen\(\) , communicate\(\) and poll\(\) python facilities) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(----------------------------) s
5 571 M
(412. \(THEORY\) Graph Neural Networks, Tensor Neurons and Recursive Lambda Function Growth Intri) s
5 560 M
(nsic Merit - 4 June 2017 and) s
5 549 M
(8 June 2017 - related to 410) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(----------------------------) s
5 516 M
(Definition Recursive Gloss Overlap Graph with word-word edges as Neuron Tensor Network relatio) s
5 505 M
(ns having potentials was defined previously. Recursive Lambda Function Growth computes all ran) s
5 494 M
(dom walks of the definition graph and creates a lambda function composition tree for each such) s
5 483 M
( random walk. For each subtree f of the recursive lambda function growth with children w1 and ) s
5 472 M
(w2 composed potential for f is defined as:) s
5 461 M
(        p\(f\(w1,w2\)\) = p\(w1\) * p\(w2\) for some operator *) s
5 439 M
(Rather than mere summation of potentials of edges following minmax criterion extracts the most) s
5 428 M
( meaningful random walk:) s
5 417 M
(*\) Minimum Neuron Tensor Potential edge of each random walk is found - path minimum potential) s
5 406 M
(*\) Maximum of all minimum path potentials extracts a random walk lambda composition tree which) s
5 395 M
( is the most probable inferred meaning of the document - Max\(Min\(potentials\)\) - this makes sen) s
5 384 M
(se because maximum of minimum potential implies minimum possible neural activation.) s
5 362 M
(Event Related Potentials \(ERP\) mentioned in 202 are unusual spikes in EEG of brain \(N400 datas) s
5 351 M
(et\) when unrelated words are read. Complement of ERP for related words as dataset could be an ) s
5 340 M
(ideal estimator for Neuron Tensor relatedness potential between two words in definition graph.) s
5 318 M
(Graph Neural Networks are recent models of neural network which generalize to a graph. In a Gr) s
5 307 M
(aph Neural Network, potential of each vertex is a function of potentials of all adjacent verti) s
5 296 M
(ces and neuron tensor potentials of incoming edges from them. Neuron Tensor Network edge relat) s
5 285 M
(ions for each word vertices pair of Recursive Gloss Overlap Graph can be mapped to edges of a ) s
5 274 M
(Graph Neural Network. Thus a text is mapped to not just a graph but to a Graph Neural Network ) s
5 263 M
(with Tensor Neuron Edges, an ideal choice for human text comprehension simulation. Recursive G) s
5 252 M
(loss Overlap Graph with Neuron Tensor word-word edges combines two concepts into one - Graph T) s
5 241 M
(ensor Neuron Network \(GTNN\).) s
5 219 M
(Data on websites can be classified into 3 categories: 1\) text 2\) voice 3\) images and videos. I) s
5 208 M
(ntrinsic merit which is a measure of creativity presently focuses only on text. Analyzing the ) s
5 197 M
(intrinsic merit of voice and visuals is a separate field in itself - Fourier Analysis of Wavef) s
5 186 M
(orms and Discrete Fourier Transforms.) s
5 164 M
(Ranking text by Graph Tensor Neuron Network intrinsic merit potential can be done in multiple ) s
5 153 M
(ways:) s
5 142 M
(- Rank Vertices and Edges by potential) s
5 131 M
(- Rank the random walk lambda function composition tree by potential) s
5 120 M
(- Rank by Korner Entropy of the Graph Tensor Neuron Network and other qualitative and quantita) s
5 109 M
(tive graph complexity metrics.) s
5 98 M
(and so on.) s
5 76 M
(Example lambda composition tree on a random walk of recursive gloss overlap graph:) s
5 65 M
(        f1 = requiredby\(fuel, flight\)) s
5 54 M
(        f2 = has\(flight, tyre\)) s
5 43 M
(        f3 = has\(tyre, wheel\)) s
5 32 M
(        f4 = does\(wheel, landing\)) s
5 21 M
(        f5 = requires\(landing, gear\)) s
5 10 M
(        f1\(fuel, f2\(flight, f3\(tyre, f4\(wheel, f5\(landing, gear\)\)\)\)\)) s
_R
S
%%Page: (241) 241
%%BeginPageSetup
_S
18 36 translate
/pagenum 241 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (241) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(Previous example random walk lambda composition tree has been constructed in 384 and 385. Pote) s
5 670 M
(ntials for Tensor Neuron Relations have to be predetermined by a dataset if such exists simila) s
5 659 M
(r to N400 EEG dataset. Tensor Neuron Relations in Recursive Gloss Overlap Definition Graph are) s
5 648 M
( grammatical connectives mostly. In this example, "requiredby" is a relation. Cumulative poten) s
5 637 M
(tial of each such random walk lambda composition tree has to be computed.) s
5 615 M
(Difference in Graph Tensor Neuron Network mapping of a text is: Each lambda composition tree i) s
5 604 M
(s evaluated as a Graph Neural Network - each subtree is evaluated and passed on to higher leve) s
5 593 M
(l - and potential at the root is returned as the merit. Mixing time in markov chain andom walk) s
5 582 M
( is the number of steps before stationary distribution is attained. Thus maximum potential ret) s
5 571 M
(urned at the root of \(a lambda composition graph tensor neuron network of \(any converging stat) s
5 560 M
(ionary random walk of \(a recursive gloss overlap definition graph of \(a text\)\)\)\) is a measure ) s
5 549 M
(of intrinsic merit.) s
5 527 M
(Intuition for Graph Tensor Neuron Network is below:) s
5 516 M
(*\) Random walk on recursive gloss overlap graph simulates randomness in cognitive cerebral tex) s
5 505 M
(t comprehension.) s
5 494 M
(*\) Tensor Neuron relatedness potential between two word vertices in definition graph quantifie) s
5 483 M
(s relevance and meaningfulness) s
5 472 M
(*\) Lambda composition tree-graph neural network for each random walk on definition graph simul) s
5 461 M
(ates how meaning is recursively understood bottom-up with randomness involved.) s
5 428 M
(References:) s
5 417 M
(-----------) s
5 406 M
(412.1 Graph Neural Networks -  http://repository.hkbu.edu.hk/cgi/viewcontent.cgi?article=1000&) s
5 395 M
(context=vprd_ja) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(-----------------------------------------------) s
5 351 M
(413. \(FEATURE-DONE\) Recursive Lambda Function Growth - Graph Tensor Neuron Network Implementat) s
5 340 M
(ion - Commits - 9 June 2017) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-----------------------------------------------) s
5 307 M
(\(*\) Recursive Lambda Function Growth implementation has been updated to compute Graph Tensor N) s
5 296 M
(euron Network intrinsic merit) s
5 285 M
(\(*\) Each lambda function composition tree of a random walk on recursive gloss overlap graph is) s
5 274 M
( evaluated as a Graph Neural Network having Tensor Neuron potentials for word-word edges.) s
5 263 M
(\(*\) Tensor neuron potential for relation edges in Graph Neural Network has been hardcoded at p) s
5 252 M
(resent and requires a dataset for grammatical) s
5 241 M
(connective relations similar to EEG dataset for brain spikes in electric potentials.) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(--------------------------------) s
5 197 M
(414. \(FEATURE-DONE\) Graph Tensor Neuron Network - implementation update - Commits - 10 June 20) s
5 186 M
(17) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(--------------------------------) s
5 153 M
(*\) Changed the subtree graph tensor neuron network computation) s
5 131 M
(*\) Children of each subtree are the Tensor Neuron inputs to the subtree root) s
5 120 M
(Each subtree is evaluated as a graph neural network with weights for) s
5 109 M
(each neural input to the subtree root.) s
5 87 M
(*\) WordNet similarity is computed between each child and subtree root and is presently assumed) s
5 76 M
( as Tensor Neuron) s
5 65 M
(relation potential for the lack of better metric to measure word-word EEG potential.) s
5 54 M
(If a dataset for tensor neuron potential is available, it has to to be looked-up and numeric) s
5 43 M
(potential has to be returned from here.) s
5 21 M
(*\) Finally a neuron activation function \(simple 1-dimensional tensor\) is computed and returned) s
5 10 M
( to the subtree root for next level.) s
_R
S
%%Page: (242) 242
%%BeginPageSetup
_S
18 36 translate
/pagenum 242 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (242) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(*\) logs for the this have been committed to testlogs. Presently graph tensor neuron network in) s
5 670 M
(trinsic merit is a very small decimal) s
5 659 M
(because of the decimal values of similarity and tensor neurons, but quite receptive to small c) s
5 648 M
(hanges.) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(--------------------------------------) s
5 604 M
(415. \(FEATURE-DONE\) Script for Querying Index \(LSH and ThoughtNet\) and Ranking the results wit) s
5 593 M
(h Recursive Lambda Function Growth) s
5 582 M
(- Commits - 13 June 2017) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(--------------------------------------) s
5 549 M
(*\) New python script QueryIndexAndRank.py has been committed for retrieving results from Index) s
5 538 M
( matching a query and rank them) s
5 527 M
(*\) It queries both Locality Sensitive Hashing and ThoughtNet indices) s
5 516 M
(*\) Functions of classes have been parametrized for invocation across modules) s
5 505 M
(*\) Both LSH and ThoughtNet indices have been recreated) s
5 494 M
(*\) Ranking is done by Recursive Lambda Function Growth algorithm which is a superset of Recurs) s
5 483 M
(ive Gloss Overlap) s
5 472 M
(*\) This script was tested via NeuronRain Tornado RESTful GUI) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(---------------------------------------) s
5 428 M
(416. \(FEATURE-DONE\) Graph Tensor Neuron Network Intrinsic Merit and QueryIndexAndRank update -) s
5 417 M
( Commits - 15 June 2017) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(---------------------------------------) s
5 384 M
(*\) Graph Tensor Neuron Network Intrinsic Merit computation has been changed - Intrinsic merits) s
5 373 M
( of all random walks are summed up than multiplying to get a tangible merit value) s
5 362 M
(*\) Some bugs fixed and debug prints have been changed) s
5 351 M
(*\) logs have been committed to testlogs/) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-------------------------------------) s
5 307 M
(417. \(FEATURE-DONE\) Hyperball crawler update - Commits - 19 June 2017) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-------------------------------------) s
5 274 M
(Integrated Recursive Lambda Function Growth Intrinsic Merit Score\(Graph Tensor Neuron Network ) s
5 263 M
(and Korner Entropy\)  into Hyperball crawler.) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(------------------------------------) s
5 219 M
(418. \(THEORY\) Thought Experiment of Generic Intrinsic Merit and Condorcet Jury Theorem - 21 Ju) s
5 208 M
(ne 2017) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(------------------------------------) s
5 175 M
(Intrinsic merit so far is restricted to text documents. Subjective ranking measures are like m) s
5 164 M
(irrors which reflect the real merit of the) s
5 153 M
(candidate. Each vote in the majority voting is similar to an image of the votee projected on t) s
5 142 M
(o the voter mirror. Some mirrors reflect well) s
5 131 M
(while others don't. Efficiency of a voter mirror is equivalent to decision correctness of a vo) s
5 120 M
(ter. Present web ranking algorithms measure votee by the perception mirror images, which is in) s
5 109 M
(direct. Intrinsic merit breaks mirror images and relies only on what the votee really is. But ) s
5 98 M
(then isn't intrinisic merit a mirror image too? It is not because no human perception or image) s
5 87 M
( based voting is involved to ascertain merit. Only the graph complexity of the text-graph and ) s
5 76 M
(its graph neural network is sufficient. Merit is a universal requirement. Examples in 410 and ) s
5 65 M
(202 motivate it. Can merit be applied to entities beyond voice, visuals and text? Most probabl) s
5 54 M
(y yes. Intelligence of human beings are ranked by intelligence quotients which is also an intr) s
5 43 M
(insic merit measure \(though IQ tests are disputed by psychological studies\). Hence judging peo) s
5 32 M
(ple by intrinsic merit is beyond just IQ scores. An algorithm to classify people as "Good" and) s
5 21 M
( "Bad" could be a breakthrough in machine intelligence. Hypothetical people classifier could b) s
5 10 M
(e as below:) s
_R
S
%%Page: (243) 243
%%BeginPageSetup
_S
18 36 translate
/pagenum 243 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (243) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\(*\) Peruse academic records and translate to score) s
5 681 M
(\(*\) Peruse work records and translate to score) s
5 670 M
(\(*\) Translate awards received to score) s
5 659 M
(\(*\) Translate brain imageing data to score \(EEG and fMRI\)) s
5 648 M
(\(*\) Translate IQ or EQ to score) s
5 637 M
(Above is not a formal algorithm but tries to intuit how it may look like. Human Resource Analy) s
5 626 M
(tics are done as above) s
5 604 M
(Objective Intrinsic Merit = Vote by an algorithm) s
5 593 M
(Subjective Ranking = Votes by people translated into rank by an algorithm \(present ranking alg) s
5 582 M
(orithms rely on incoming links or votes to a text which are created by human beings\)) s
5 560 M
(Thus Generic Intrinsic Merit removes human element completely while assessing merit \(closer to) s
5 549 M
( AI\).Goodness when it applies to human beings is not just a record based score and usually has) s
5 538 M
( moral and ethical elements in it. People classifier based on intrinsic merit has to be intrus) s
5 527 M
(ive and invasive similar to HR analytics example earlier.) s
5 505 M
(\(*\)Question: Why should intrinsic merit be judged only in this way?) s
5 494 M
(\(*\)Answer: This is not the only possible objective intrinsic merit judgement. There could be o) s
5 483 M
(ther ways too. Disclaimer is intrinsic merit assumes cerebral representation of sensory recept) s
5 472 M
(ion \(words, texts, visuals, voices etc.,\) and its complexity to be the closest to ideal judgem) s
5 461 M
(ent.) s
5 439 M
(\(*\)Question: Wouldn't cerebral representation vary from person to person and thus be subjectiv) s
5 428 M
(e?) s
5 417 M
(\(*\)Answer: Yes, but there are standardized event related potential datasets gathered from mult) s
5 406 M
(iple neuroscience experiments on human subjects. Such ERP data are similar for most brains. Va) s
5 395 M
(riation in potential occurs because cerebral cortex and its sulci&gyri vary from person to per) s
5 384 M
(son. It has been found that cortex and complexity of gray matter determine intelligence and gr) s
5 373 M
(asping ability. Intrinsic merit should therefore be based on best brain potential data.) s
5 351 M
(\(*\)Question: Isn't perception based ranking enough? Why is such an intrusive objective merit r) s
5 340 M
(equired?) s
5 329 M
(\(*\)Answer: Yes and No. Perception majority voting based ranking is accurate only if  all voter) s
5 318 M
(s have decision correctness probability > 0.5 from Condorcet Jury Theorem. PageRank works well) s
5 307 M
( in most cases because incoming edges vote mostly with >50% correctness. This correctness is a) s
5 296 M
(ccumulated by a Markov Chain Random Walk recursively - vote from a good vertex to another vert) s
5 285 M
(ex implies voted vertex is good \(Bonacich Power Centrality\) and so on. Initial goodness is bas) s
5 274 M
(ed on weight of an edge. Markov iteration stabilizes the goodness. Probability that goodness o) s
5 263 M
(f stationary Markov distribution < 0.5 can be obtained by a tail bound and should be exponenti) s
5 252 M
(ally meagre.) s
5 230 M
(It was mentioned earlier that Fourier analysis of visuals and voice is the measure of intrinsi) s
5 219 M
(c merit. Following definition of generic intrinsic merit further strengthens it:) s
5 208 M
(Generic intrinsic merit of an entity - text, visual or voice - is the complexity of cerebral r) s
5 197 M
(epresentation potential as received by sensory perception.  For texts it is the graph complexi) s
5 186 M
(ty measure. For voice and visuals it could ERPs activated on seeing or hearing and based on EE) s
5 175 M
(G data.) s
5 153 M
(References:) s
5 142 M
(-----------) s
5 131 M
(418.1 Event Related Potentials for attractive facial recognition - https://labs.la.utexas.edu/) s
5 120 M
(langloislab/research/event-related-potential-erp/418.2 Event Related Potentials - http://cogni) s
5 109 M
(trn.psych.indiana.edu/busey/eegseminar/pdfs/Event-Related%2520PotentialsIntro.pdf - ERPs are c) s
5 98 M
(ortical potentials of interoperating neurons in response to a cognitive stimulus.) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(------------------------------------------------) s
5 54 M
(419. \(THEORY\) Goodness of Link Graph Majority Voting and Complex Plane representation of merit) s
5 43 M
( - 22 June 2017 and 23 June 2017 - related to 418) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(------------------------------------------------) s
5 10 M
(Following is an example link graph in world wide web with weights for each edge:) s
_R
S
%%Page: (244) 244
%%BeginPageSetup
_S
18 36 translate
/pagenum 244 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (244) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        y1 - x1 : 0.25) s
5 681 M
(        y1 - x2 : 0.25) s
5 670 M
(        y1 - x3 : 0.25) s
5 659 M
(        y1 - x4 : 0.25) s
5 648 M
(implying y1 votes to x1,x2,x3,x4 with weight 0.25 each.) s
5 626 M
(Following is the corresponding initial decision correctness \(goodness\) graph with goodness for) s
5 615 M
( each edge:) s
5 604 M
(        y1 - x1 : 0.25) s
5 593 M
(        y1 - x2 : 0.25) s
5 582 M
(        y1 - x3 : 0.375) s
5 571 M
(        y1 - x4 : 0.125) s
5 560 M
(implying y1 votes to x1 with correctness 0.25, x2 with correctness 0.25, x3 with correctness 0) s
5 549 M
(.375 and x4 with correctness 0.125.) s
5 527 M
(Markov iteration on the decision correctness graph \(similar to random walk on link graph\) tend) s
5 516 M
(s to a stationary distribution after certain number of random walks. Cumulative goodness of vo) s
5 505 M
(ter v1 is defined as:) s
5 494 M
(        summation\(weight\(edge\) * goodness\(edge\)\)) s
5 483 M
(For previous example cumulative goodness of voter y1 is:) s
5 472 M
(        0.25*0.25 + 0.375*0.25 + 0.25*0.25 + 0.25*0.25 =) s
5 461 M
(        1/32 + 3/32 + 2/32 + 2/32 = 0.25) s
5 439 M
(If all votes are 100% correctly decided by y1, correctness graph has 1 for all edge weights. T) s
5 428 M
(hus cumulative goodness of y1 is:) s
5 417 M
(        0.25 * 1 + 0.25 * 1 + 0.25 * 1 + 0.25 * 1 = 1 = 100%) s
5 406 M
(After markov iteration attains stationary distribution, cumulative goodness of all vertices al) s
5 395 M
(so becomes stationary. Atleast one incoming vertex y voting to another vertex x having cumulat) s
5 384 M
(ive goodness < 0.5 at the end of markov iteration implies group decision is a failure and does) s
5 373 M
( not concur with the real merit of a vertex x.) s
5 351 M
(Following are the votes received by a vertex x1 from voters y1,y2,y3,y4 having respective cumu) s
5 340 M
(lative goodness:) s
5 329 M
(        y1 - x1: 0.75) s
5 318 M
(        y2 - x1: 0.3 \(voter with cumulative goodness < 0.5\)) s
5 307 M
(        y3 - x1: 0.8) s
5 296 M
(        y4 - x1: 0.9) s
5 274 M
(What is the probability in average case that atleast one voting vertex has cumulative goodness) s
5 263 M
( < 0.5? Link graph voting is different from normal voting - it is peer to peer and each voter ) s
5 252 M
(apportions vote to the neighbouring candidates - single voter can vote multiple candidates sim) s
5 241 M
(ultaneously.) s
5 219 M
(Pr[atleast one adjacent vertex y to a candidate vertex x has cumulative goodness < 0.5 after m) s
5 208 M
(arkov iteration] = 1 - Pr[goodness > 0.5]) s
5 186 M
(From Markov inequality tail bound, Pr[cumulative goodness > 0.5] <= mean/0.5) s
5 175 M
(Pr[cumulative goodness < 0.5] = 1 - Pr[goodness > 0.5] >= 1 - mean/0.5) s
5 164 M
(where mean is the average cumulative goodness of all vertices in link graph.) s
5 142 M
(When mean is 0.5 \(uniform distribution\), Pr[cumulative goodness < 0.5] >= 1 - 0.5/0.5 = 0) s
5 131 M
(For any other values of mean < 0.5, Pr[atleast one adjacent vertex y to a candidate vertex x h) s
5 120 M
(as cumulative goodness < 0.5 after markov iteration] = 1 - mean/0.5 is always greater than zer) s
5 109 M
(o.) s
5 87 M
(In discrete random variable case, if goodness takes n discrete values between 0 and 1 then, me) s
5 76 M
(an = summation\(x*p\(x\)\) where p\(x\) = 1/n is:) s
5 65 M
(        n\(n+1\)/2*n*n = 0.5 + 0.5/n which tends to 0.5 when n tends to infinity.) s
5 54 M
(Thus mean cumulative goodness is 0.5 in uniform distribution.) s
5 32 M
(Objective and Subjective rankings can be represented on a complex plane with following notatio) s
5 21 M
(n:) s
5 10 M
(        \(intrinsic merit=m\) + i\(perception=p\) = m + ip) s
_R
S
%%Page: (245) 245
%%BeginPageSetup
_S
18 36 translate
/pagenum 245 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (245) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(where p is a function of m. Any text,visual or voice can be plotted on complex plane in previo) s
5 681 M
(us notation. Ideally m should be equal to p. This creates a special case when m is fixed and p) s
5 670 M
( varies for an entity which usually happens with perception based majority voting. Such set of) s
5 659 M
( complex numbers with fixed merit and varying perception can be thought of as zeros of a compl) s
5 648 M
(ex valued function. Famous special case is Riemann Zeta Function with merit=0.5 and varying pe) s
5 637 M
(rception imaginary parts.) s
5 615 M
(Riemann Hypothesis if true implies Re=0.5 for non trivial zeros of Riemann Zeta Function. If a) s
5 604 M
( set of complex number rankings as described previously have Re=0.5 or fixed real part and var) s
5 593 M
(ying imaginary parts equalling non trivial zeros of Riemann Zeta Function, then the rankings s) s
5 582 M
(how pattern in prime numbers an unusual connection.) s
5 560 M
(Any k-coloring of a sequence of text and audio-visuals\(AVs\) denoted by integers is a classifie) s
5 549 M
(r. 2-coloring or complementation is a special case of such a classifier. Conversely, any class) s
5 538 M
(ifier is a coloring scheme for sequence of text and audio-visuals\(AVs\). For example following ) s
5 527 M
(bit pattern is a 2-coloring/complement function - 0 and 1 are colors and f and g are complemen) s
5 516 M
(t functions illustrated as dotted indentations:) s
5 505 M
(        1111000011110000111000011100011111100000) s
5 483 M
(        ----    ----    ---    ---   ------             function f:) s
5 472 M
(           .....    ----   ----   ---      -----        complement g:) s
5 450 M
(Vapnik-Chervonenkis Shattering or VC Shattering is defined as:) s
5 439 M
(Let H be a set of sets and C be a set. C is shattered by H if H intersection C = powerset of C) s
5 428 M
( = 2^C. Intuitively, H classifies C with labels from the set H. Largest cardinality of C shatt) s
5 417 M
(ered by H is the VC dimension.) s
5 395 M
(2-coloring/complementation is a classifier on real line or integer sequences. 2 colors/binary ) s
5 384 M
(encodings/complementations create a set H of size equal to powerset of real line of integer se) s
5 373 M
(quence. Largest cardinality of real line or integer sequence that can be shattered by H \( H in) s
5 362 M
(tersection C = 2^C\) is infinite. Thus 2-color/complementation classifier of infinite stream of) s
5 351 M
( sequences has VC Dimension Infinity.) s
5 329 M
(References:) s
5 318 M
(-----------) s
5 307 M
(419.1 Probability and Statistics with Reliability, Queuing and Computer Science Applications -) s
5 296 M
( Pages 223-225 - [Kishor Shridharbhai Trivedi-Duke University]) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(------------------------------------------------) s
5 252 M
(420. \(THEORY\) Human Resource Analytics, Interview Algorithm and Intrinsic Merit - related to 3) s
5 241 M
(14, 359 and 365 - 26 June 2017 and 27 June 2017) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(------------------------------------------------) s
5 208 M
(Stability of Interview TQBF circuit which is the theoretical formalism of Interview Algorithm ) s
5 197 M
(Intrinsic Merit has been analyzed earlier as opposed to stability of Majority Voting. Extendin) s
5 186 M
(g the notion of merit from WWW to humans is the most obvious consequence. Usual interview proc) s
5 175 M
(edure in industry is to screen resumes, shortlist them and interview for few rounds and make a) s
5 164 M
(n offer. Does this tradition measure merit flawlessly? No. Error in interview and its stabilit) s
5 153 M
(y has been analyzed in 359 and 365. Is there a way to circumvent this error and remove human e) s
5 142 M
(lement completely? Error in interview process applies to examination system in academics too. ) s
5 131 M
(Real-life interviews and examinations have duration of few hours and rely on question-answerin) s
5 120 M
(g. Can few hours measure years of accrued merit? This question is reduced to sampling problem.) s
5 109 M
( If merit is a scatter-plot of feature vector points on a metric space V of n-dimensions, a sa) s
5 98 M
(mple is a set of subspaces S which approximate V. Contraction Mapping \(and Banach Fixed Point ) s
5 87 M
(Theorem\) maps a space to a subspace and there is always a unique fixed point in this map \(f\(x\)) s
5 76 M
(=x for some x in V\). An intrinsic merit analyzer can be thought of as a contraction map on the) s
5 65 M
( metric space of merit feature vectors of an individual. This contraction map must create a sa) s
5 54 M
(mple subspace in such a way that all merit feature vectors are near-perfectly measured. This i) s
5 43 M
(nvolves 2 difficult problems:) s
5 32 M
(\(*\) Construct a complete merit metric feature vector space for an individual based on past rec) s
5 21 M
(ords\( work and academic \).) s
5 10 M
(\(*\) Construct a contraction map\(s\) which contracts this merit vector space into a sample subsp) s
_R
S
%%Page: (246) 246
%%BeginPageSetup
_S
18 36 translate
/pagenum 246 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (246) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ace. This contraction map is then translated into an interview TQBF function. Objective Questi) s
5 681 M
(on-Answers \(multiple choice\) are relatively easy to construct and evaluate than descriptive, s) s
5 670 M
(ubjective question-answers.) s
5 648 M
(Real life interviews typically have following usecase \(e.g IT industry\) - a slightly modified ) s
5 637 M
(version of previous TQBF construction:) s
5 626 M
(\(*\) suitability for a requirement) s
5 615 M
(\(*\) technical discussions \(question-answering on programming/projects etc.,\)) s
5 604 M
(\(*\) experience) s
5 582 M
(Intrinsic Merit of Collection of Humans are measured in economics literature by many indices l) s
5 571 M
(ike GDP,Human Development Index\(HDI\),Inequality adjusted HDI,Gender Inequality Index,Purchasin) s
5 560 M
(g Power Parity\(PPP\) etc.,Human Development Index defined as geometric mean of standard of life) s
5 549 M
(,income,education indices is used to rank countries by their development.Intrinsic Merit of sp) s
5 538 M
(ortspersons are measured by Intrinsic Performance Rating\(IPR\) measures e.g Elo rating in Chess) s
5 527 M
( is used to rank players. Translating the previous example, one possible IPR for interview is ) s
5 516 M
(the following adapted from HDI \(not necessarily perfect\):) s
5 505 M
(        IPR\(candidate\)=geometric_mean\(IPR\(interview\)*IPR\(education\)*IPR\(experience\)\)) s
5 483 M
(From 359 and 365, NoiseSensitivity\(InterviewTQBF\) which is the dual of Stability is defined as) s
5 472 M
(:) s
5 461 M
(        NoiseSensitivity\(InterviewTQBF\) = 0.5-0.5*Stability\(InterviewTQBF\) = 0.5-0.5*a^2*n^2/4) s
5 439 M
(Error in interview is equal to NoiseSensitivity of interview TQBF. What is the probability of ) s
5 428 M
(interview process failing? By Markov tail bound:) s
5 417 M
(        Pr[Error in interview process > e ] <= mean/e where mean is the average error or Noise) s
5 406 M
(Sensitivity of interview. Therefore:) s
5 395 M
(        Pr[Error in interview process > e ] <= NoiseSensitivity\(InterviewTQBF\)/e) s
5 373 M
(While suitability can be easiliy quantified for error and interview TQBF having previous error) s
5 362 M
( bound, experience is a new variable in real-life HR analytics. Experience of a candidate is t) s
5 351 M
(otal duration in industry \(academics,private initiatives inclusive\). Experience itself is indi) s
5 340 M
(rectly caused by past interviews. For example, a person having 30 years experience from 10 com) s
5 329 M
(panies was meritorious in past 10 interviews and it is counterintuitive if 11th finds no merit) s
5 318 M
( \(this contradiction makes objective merit subjective and in a sense this is also an error in ) s
5 307 M
(interview process - a flawed TQBF\). Thus experience is a function of merit and gradually makes) s
5 296 M
( future interviews redundant - an example below:) s
5 285 M
(        Experience = f\(number of job/academic/private hops, intrinsic merit at each previous h) s
5 274 M
(op, experience per hop\)) s
5 252 M
(Interview algorithm being a TQBF satisfiability problem is PSPACE-complete \(=IP=AP\). There are) s
5 241 M
( existing question-answering systems like IBM watson \(answer-questioning\) which beat humans in) s
5 230 M
( Jeopardy with least error, a contest like Turing test, Question-Answering using WordNet as Wo) s
5 219 M
(rd Sense Disambiguator and older expert-system based Q&A software. But there does not seem to ) s
5 208 M
(exist a theoretical decision tree parallel for QBF similar to boolean decision trees except DP) s
5 197 M
(LL evaluations. An error in interview QBF can also be formalised as a Lambda-Tolerant Randomiz) s
5 186 M
(ed Decision Tree having access to pseudorandom bits and making errors with an upperbound while) s
5 175 M
( evaluating decision tree.) s
5 153 M
(TQBF formulation of question-answering is far stringent than traditional interviews. Existenti) s
5 142 M
(al and Universal quantifiers simulate "there exists an answer or a counter-question for all qu) s
5 131 M
(estions" instead of "there exists an answer for a question". In proving lowerbounds for games ) s
5 120 M
(like Chess, Go etc., TQBF is evaluated as game-tree \(alpha-beta pruning\) - "for all moves ther) s
5 109 M
(e exists a countermove" where each level choices in the tree alternate between 2 opponents for) s
5 98 M
( bounded \(polynomial\) or unbounded \(exponential\) number of rounds.) s
5 76 M
(Intrinsic merit metric space of feature vector points can be construed as a Hypergraph with fe) s
5 65 M
(ature vector points as vertices and edges spanning multiple of these points which are related ) s
5 54 M
(as edges. Hypergraph edge connects more than two vertices. Transversal or Hitting Set of a Hyp) s
5 43 M
(ergraph is the subset  S of the vertices X which have non-empty intersection with all hyperedg) s
5 32 M
(es. Transversal graph is a subgraph of this hypergraph consisting of all possible minimal tran) s
5 21 M
(sversals\(a minimal transversal has no other traversals as subsets\). Transversal graph is a "su) s
5 10 M
(mmary" of the larger graph and thus is a Contraction Map which creates a gist of the merit met) s
_R
S
%%Page: (247) 247
%%BeginPageSetup
_S
18 36 translate
/pagenum 247 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (247) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ric space.) s
5 670 M
(Similar notion of transversal hypergraph can be applied to Recursive Gloss Overlap Definition ) s
5 659 M
(Graph too \(considering it as a hypergraph\), for text summarization - subset of word vertices w) s
5 648 M
(hich intersect all hyperedges. Hypergraph Transversal Problem is known to be in co-NP.) s
5 626 M
(Like usual text documents, candidate resumes can be represented as either a Recursive Gloss Ov) s
5 615 M
(erlap graph or a ThoughtNet hypergraph:) s
5 604 M
(*\) Graph: Resume text is mapped to a graph by Recursive Gloss Overlap algorithm. Core number b) s
5 593 M
(ased classifier brings out the best in the graph - candidate experience domains in resume that) s
5 582 M
( are closely related) s
5 571 M
(*\) Hypergraph: Resumes are stored in ThoughtNet as Hypergraph index. Querying results in simil) s
5 560 M
(ar resumes. ThoughtNet internally invokes Recursive Gloss Overlap core number classifier.) s
5 538 M
(References:) s
5 527 M
(-----------) s
5 516 M
(420.1 P,NP and examinations - https://terrytao.wordpress.com/2009/08/01/pnp-relativisation-and) s
5 505 M
(-multiple-choice-exams/) s
5 494 M
(420.2 Shrink Map and Contraction Map - [Topology - James Munkres] - pages 181-182) s
5 483 M
(420.3 Banach Fixed Point Theorem - https://en.wikipedia.org/wiki/Banach_fixed-point_theorem) s
5 472 M
(420.4 Davis-Putnam-Logemann-Loveland \(DPLL\) decision tree solver algorithm for QBF - http://pe) s
5 461 M
(rsonalpages.manchester.ac.uk/student/joshua.dawes/notes/qbf.pdf) s
5 450 M
(420.5 Parallel algorithm for Hypergraph Transversals - https://people.mpi-inf.mpg.de/~elbassio) s
5 439 M
(/pub/COCOON05.pdf) s
5 428 M
(420.6 Efficient algorithm for Hypergraph Transversals - http://jgaa.info/accepted/2005/Kavvadi) s
5 417 M
(asStavropoulos2005.9.2.pdf) s
5 406 M
(420.7 Compendium of Intrinsic Performance Ratings in Chess - https://www.cse.buffalo.edu/~rega) s
5 395 M
(n/papers/pdf/Reg12IPRs.pdf) s
5 384 M
(420.8 Human Development Index \(New\) - https://poseidon01.ssrn.com/delivery.php?ID=615100008007) s
5 373 M
(0240871090821120680310680020590930930310100950700060671251210721040180990580270960580510400110) s
5 362 M
(8810200309401212401410805806205507607012408807109710112307006505908512501211901808007208402901) s
5 351 M
(2007002119065081015116009119108104075076102112012027&EXT=pdf) s
5 340 M
(420.9 Social Progress Index - https://www.socialprogressindex.com/assets/downloads/resources/e) s
5 329 M
(n/English-2017-Social-Progress-Index-Methodology-Report_embargo-until-June-21-2017.pdf - Compr) s
5 318 M
(ehensive ranking of countries based on multitude of social indicators \(Basic Needs, Wellbeing,) s
5 307 M
( Opportunities\)) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(-----------------) s
5 263 M
(421. \(FEATURE-DONE\) Text Summarization from Recursive Gloss Overlap Graph Core - Commits - 28 ) s
5 252 M
(June 2017) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(-----------------) s
5 219 M
(\(*\) Added a new function to create a summary from text - This function creates the core of a R) s
5 208 M
(ecursive Gloss Overlap graph) s
5 197 M
(with certain core number and writes out a text sentence for each edge in core subgraph obtaini) s
5 186 M
(ng least common ancestor\(hypernym\) relation) s
5 175 M
(\(*\) logs for this have been committed to python-src/testlogs) s
5 153 M
(Summarization from k-core\(s\) of a Recursive Gloss Overlap graph captures the most crucial area) s
5 142 M
(s of the text because document belongs to the class/word vertex with high core numbers.) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(------------------------) s
5 98 M
(422. \(FEATURE-DONE\) Text Summarization from Recursive Gloss Overlap Graph Core - Commits - 30 ) s
5 87 M
(June 2017) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(------------------------) s
5 54 M
(\(*\) New clause added to classify the text and match the prominent core number word vertices in) s
5 43 M
( the text and only add those sentences to summary.) s
5 32 M
(\(*\) This is an alternative to k-core subgraph traversal and creating text programmatically. It) s
5 21 M
( is based on the heuristic that a summary should) s
5 10 M
(capture the essence/classes the text belongs to.) s
_R
S
%%Page: (248) 248
%%BeginPageSetup
_S
18 36 translate
/pagenum 248 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (248) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\(*\) Prominent core number classes are shaved off from the sorted core number list returned by ) s
5 681 M
(RGO classifier and top percentile is used. Summary is limited in size relative to the original) s
5 670 M
( text.) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(-------------------------------------) s
5 626 M
(423. \(THEORY\) Dense Subgraph Problem and Mining patterns in Graph Representation of Text - 2 J) s
5 615 M
(uly 2017) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(-------------------------------------) s
5 582 M
(Recursive Gloss Overlap and Recursive Lambda Function Growth algorithms create graphs from tex) s
5 571 M
(t documents. Unsupervised classification from) s
5 560 M
(prominent vertices of the definition graph and Text summarization at present depend on finding) s
5 549 M
( k-core subgraphs. In general this is an NP hard) s
5 538 M
(problem to find Dense Subgraphs of a Graph where density of a subgraph S of a graph G is defin) s
5 527 M
(ed as:) s
5 516 M
(        d\(S\) = |Edges of S| / |Vertices of S|) s
5 505 M
(There are polynomial time maxflow based algorithms and approximations to find dense subgraphs ) s
5 494 M
(of a graph. ) s
5 472 M
(References:) s
5 461 M
(----------) s
5 450 M
(423.1 Goldberg Algorithm, Charikar Algorithm and k-Cliques Densest Subgraph Algorithm for Dens) s
5 439 M
(e Subgraph Discovery - people.seas.harvard.edu/~babis/dsd.pdf) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(-----------------------------) s
5 395 M
(424. \(THEORY\) Pseudorandom non-majority choice and Bounded Electorate Majority Choice - 3 July) s
5 384 M
( 2017 - related to 53.7) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(-----------------------------) s
5 351 M
(Bounded Electorate Majority Choice:) s
5 340 M
(-----------------------------------) s
5 329 M
(Odd Electorate with 3 voters is the minimum possible majority voting setting which vouchsafes ) s
5 318 M
(a clear winner. This is a composition \(both formula and circuit\) of NC majority voting functio) s
5 307 M
(n with Voter SATs. This composition can be written as a unified formula by substituting the vo) s
5 296 M
(ter SAT formulas in formula for Majority function which has formula of size O\(n^5.3\). This com) s
5 285 M
(bined formula can be converted to a 3-CNF by Tseitin transformation. This specific 3 voter exa) s
5 274 M
(mple is NP-complete. Similar substitution for infinite electorate majority could be undecidabl) s
5 263 M
(e.) s
5 241 M
(Pseudorandom Non-majority Choice:) s
5 230 M
(--------------------------------) s
5 219 M
(Majority social choice has only one level of error probability i.e goodness for each voter whi) s
5 208 M
(le Non-majority pseudorandom social choice invoking a PRG has 2 levels of probabilities - 1\) P) s
5 197 M
(robability of choosing a voter SAT at random 2\) Goodness probability of chosen voter SAT and t) s
5 186 M
(hus conditional.) s
5 164 M
(Let number of voter decision functions with goodness xi = m\(xi\). Total number of voters N = m\() s
5 153 M
(x1\)+m\(x2\)+m\(x3\)+...+m\(xn\)) s
5 142 M
(Effective goodness of a PRG choice is the mean:) s
5 131 M
(        1/N * summation\(xi*m\(xi\)\) = \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\) + ... + xn*m\(xn\)\) / N) s
5 120 M
(When all voter functions have goodness 1 then PRG choice has effective goodness 1.) s
5 98 M
(Probability of choosing a voter of Goodness xi = m\(xi\)/N) s
5 87 M
(Conditional goodness probability of a PRG chosen voter SAT =) s
5 76 M
(Pr[choosing voter SAT of goodness xi] * Pr[goodness of SAT] = [m\(xi\)/N]*xi) s
5 54 M
(When m\(xi\)*xi/N = 1, Goodness of PRG choice is 1. This can happen only if m\(xi\)*xi = N => m\(xi) s
5 43 M
(\) = N and xi = 1 i.e all voters have equal goodness 1 because smaller values of xi require m\(x) s
5 32 M
(i\) > N , a contradiction. This is a BPP/BPNC/RNC/RP algorithm despite the goodness being 1 bec) s
5 21 M
(ause Pseudorandom bits have to be created by a PRG.) s
5 10 M
(--------------------------------) s
_R
S
%%Page: (249) 249
%%BeginPageSetup
_S
18 36 translate
/pagenum 249 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (249) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(When goodness is 1 for both LHS PRG choice and RHS Bounded Electorate Majority Choice, PRG cho) s
5 681 M
(ice is a BPP/BPNC/RNC/RP algorithm to NP-complete Majority Choice for finite voters => NP is i) s
5 670 M
(n BPP/BPNC/RNC/RP. But BPP is in P/poly. Therefore NP is in P/poly if NP is in BPP. From Karp-) s
5 659 M
(Lipton theorem if NP is in P/poly, PH collapses to Sigma\(p,2\) and NP in P/poly implies AM=MA b) s
5 648 M
(y [Arvind, Vikraman; K\303\266bler, Johannes; Sch\303\266ning, Uwe; Schuler, Rainer \(1995\)]. This independ) s
5 637 M
(ently leads to a similar bound mentioned earlier for Percolation Boolean Voter Functions for N) s
5 626 M
(on-majority social choice which have 100% Noise stability \(LHS is a P/poly percolation circuit) s
5 615 M
( with 100% goodness while RHS is NP-complete finite electorate\).) s
5 593 M
(NP in P/poly also implies PH is in P/poly. It is not known if this implies PH-complete problem) s
5 582 M
(s exist \(because PH collapsing to second level causes every k-QBFSAT problem in PH to reduce t) s
5 571 M
(o 2-QBFSAT sigma\(p,2\) and thus PH-hardness is proved\).) s
5 549 M
(PH-completeness proof outline:) s
5 538 M
(------------------------------) s
5 527 M
(If NP is in BPP, NP is in P/poly because BPP is in P/poly.) s
5 516 M
(=> If NP is in P/poly, PH is in Sigma\(p,2\) from Karp-Lipton-Sipser Collapse Theorem) s
5 505 M
(=> If NP is in P/poly, PH collapses to P/poly) s
5 494 M
(=> There are complete problems in each level k of the Polynomial Hierarchy\(correspond to a k-d) s
5 483 M
(epth QBFSAT\).) s
5 472 M
(=> There is a complete problem in Sigma\(p,2\) corresponding to 2-QBFSAT.) s
5 461 M
(=> All problems in Sigma\(p,2\) can be reduced to this Sigma\(p,2\)-complete 2-QBFSAT problem.) s
5 450 M
(=> All problems in PH collapse to Sigma\(p,2\) if NP is in P/poly) s
5 439 M
(=> All problems in PH can be reduced to this Sigma\(p,2\)-complete 2-QBFSAT problem.) s
5 428 M
(=> Sigma\(p,2\)-complete problem is thus a PH-Complete problem) s
5 406 M
(References:) s
5 395 M
(-----------) s
5 384 M
(424.1 Proof of Karp-Lipton-Sipser collapse theorem - PH in P/poly -  http://www.cse.iitm.ac.in) s
5 373 M
(/~jayalal/teaching/CS6840/2012/lecture14.pdf) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(------------------------) s
5 329 M
(425. \(FEATURE-DONE\) Updates to Text Summarization from Dense Subgraph of Recursive Gloss Overl) s
5 318 M
(ap graph of a Text -) s
5 307 M
(Commits - 4 July 2017) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(------------------------) s
5 274 M
(\(*\) import matplotlib commented in RGO classifier) s
5 263 M
(\(*\) New clause added to Text Summarization: This finds the common path between 2 word vertices) s
5 252 M
( synsets by inheriting an) s
5 241 M
(existing WordNet code for shortest wordnet path distance and constructs sentences by a sliding) s
5 230 M
( window for each successive) s
5 219 M
(pair of intermediate vertices in this common path. This creates a deeper profund summary than ) s
5 208 M
(least_common_hypernyms\(\).Sentences thus created are sorted based on a relevance score to the a) s
5 197 M
(ctual text - size of intersection similar to Lesk WSD. Only top relevant sentences can be chos) s
5 186 M
(en as required.) s
5 175 M
(\(*\) Logs for this have been committed to testlogs/.) s
5 164 M
( ) s
5 153 M
(It has to be noted that, dense subgraph traversal and writing unguided summary sans training d) s
5 142 M
(ata mimicks human recursive) s
5 131 M
(comprehension and looks non-conventional for human reading. Presently only hypernym \(IS A\) rel) s
5 120 M
(ation is used for connectives.) s
5 109 M
(More comprehensive humane-looking summary can be created by Meronyms \(HAS A\) and Holonyms\(IS P) s
5 98 M
(ART OF\) in WordNet API. ConceptNet 5 which is a better semantic framework for finding relation) s
5 87 M
(s between concepts could do well in this context. But) s
5 76 M
(presently there is no python API for ConceptNet5 and data has to be queried as RESTful JSON ob) s
5 65 M
(jects.) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(--------------------------------------------) s
5 21 M
(426. \(FEATURE-DONE\) Updates to Text Summarization - Commits - 5 July 2017) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (250) 250
%%BeginPageSetup
_S
18 36 translate
/pagenum 250 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (250) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(--------------------------------------------) s
5 681 M
(\(*\) Changed the class-sentence matching clause by increasing the percentile of prominent class) s
5 670 M
(es) s
5 659 M
(\(*\) Changed relevance_to_text\(\) by comparing each sentence chosen by prominent class match to ) s
5 648 M
(the sentences in text - Ratcliff-Obershelp) s
5 637 M
(Longest Common Subsequence matching difflib library function is invoked for this similarity. S) s
5 626 M
(entences are chosen also based on relevance_to_text\(\) scoring) s
5 615 M
(\(*\) Percentage of summary to the size of the text has been printed as a ratio. Logs have been ) s
5 604 M
(committed to testlogs/) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(---------------------------) s
5 560 M
(427. \(FEATURE-DONE\) Updates to Text Summarization - choosing sentences matching class labels -) s
5 549 M
( 6 July 2017) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(---------------------------) s
5 516 M
(\(*\) Some experimentation on choosing relevant sentences to be added to summary was performed) s
5 505 M
(\(*\) relevance_to_text\(\) invocation has been changed as per algorithm below:) s
5 494 M
(for each prominent dense subgraph k-core class label) s
5 483 M
(find the synset definition of class label) s
5 472 M
(for each sentence) s
5 461 M
(invoke relevance_to_text\(\) similarity function between sentence and the class label definition) s
5 450 M
(and add to summary if the relevance ratio > 0.41 and if not already in summary) s
5 439 M
(\(*\) Ratio 0.41 was arrived at heuristically:) s
5 428 M
(- For relevance ratio 0.1, summary ratio was 0.65) s
5 417 M
(- For relevance ratio 0.2, summary ratio was 0.48) s
5 406 M
(- For relevance ratio 0.3, summary ratio was 0.35) s
5 395 M
(- For relevance ratio 0.4, summary ratio was 0.21) s
5 384 M
(- For relevance ratio 0.5, summary ratio was 0.02) s
5 373 M
(There is a drastic dip in size of summary if relevance threshold is increased beyond 0.4. Beca) s
5 362 M
(use of this 0.41 has been) s
5 351 M
(hardcoded.) s
5 340 M
(\(*\) Logs for this have been added to testlogs/) s
5 329 M
(\(*\) Summary generated is human readable - subset chosen from actual text.) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(----------------------) s
5 285 M
(428. \(FEATURE-DONE\) ConceptNet 5.4 Python RESTful API implementation - lookup, search and asso) s
5 274 M
(ciation - 7 July 2017) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(----------------------) s
5 241 M
(\(*\) This commit implements the RESTful Python requests HTTP API for querying ConceptNet 5.4 da) s
5 230 M
(taset) s
5 219 M
(\(*\) Three functions for looking up a concept, searching a concept and finding similar associat) s
5 208 M
(ed concepts have been) s
5 197 M
(implemented with 3 endpoints \(as per the documentation in https://github.com/commonsense/conce) s
5 186 M
(ptnet5/wiki/API/2349f2bbd1d7fb726b3bbdc14cbeb18f0a40ef18\)) s
5 175 M
(\(*\) ConceptNet is quite different from WordNet in representation as JSON dictionary as against) s
5 164 M
( graph in WordNet.) s
5 153 M
(\(*\) ConceptNet 5.4 endpoints have been invoked instead of 5.) s
5 142 M
(\(*\) If necessary ConceptNet can replace all WordNet invocations in a later point in time. But ) s
5 131 M
(such a replacement is non-trivial and would) s
5 120 M
(probably require almost all Recursive Gloss Overlap related code to be rewritten from scratch.) s
5 109 M
( But that depends on how ConceptNet 5) s
5 98 M
(weighs against WordNet in measuring semantic meaningfulness.) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(-------------------------------------) s
5 54 M
(429. \(THEORY\) Contradictions in bounds between finite and infinite electorate - 8,10,11,12,13 ) s
5 43 M
(July 2017) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(-------------------------------------) s
5 10 M
(Lowerbounds by equating the goodness of Non-majority and Majority social choice thus far menti) s
_R
S
%%Page: (251) 251
%%BeginPageSetup
_S
18 36 translate
/pagenum 251 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (251) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(oned in drafts in this document \(subject to errors\) are based on following assumptions:) s
5 681 M
(        \(*\) There are two possible paths to social choice - Non-majority and Majority) s
5 670 M
(        \(*\) Each social choice belongs to a computational complexity class) s
5 659 M
(        \(*\) Goodness of a social choice is the measure of error-free-ness of the choice made i) s
5 648 M
(n either paths i.e decision correctness \(e.g noise stability, sensitivity,error in BP* algorit) s
5 637 M
(hm etc.,\)) s
5 626 M
(        \(*\) RHS Majority voting has been assumed to abide by Homegeneous version of Condorcet ) s
5 615 M
(Jury Theorem convergence and divergence of group decision goodness as a function of individual) s
5 604 M
( voter goodness while LHS is either a pseudorandom choice or an interview TQBF algorithm) s
5 593 M
(        \(*\) Goodness of either choice majority or non-majority must be equal) s
5 582 M
(        \(*\) Either LHS or RHS has to be a complete problem for a complexity class C.) s
5 571 M
(        \(*\) Traditional literature on boolean majority functions and circuits assumes that inp) s
5 560 M
(ut to majority is readily available which is equivalent to SAT oracle access to Majority funct) s
5 549 M
(ion where SAT oracle could belong to any complexity class \(2-SAT, 3-SAT, k-QBFSAT, etc.,\) => M) s
5 538 M
(ajority voting is in P^NP,P^PH,P^EXP etc.,) s
5 527 M
(        \(*\) Previous Oracle access based proofs have been intentionally circumvented by replac) s
5 516 M
(ing Oracles with Boolean Function/Circuit compositions which have strong Communication Complex) s
5 505 M
(ity basis \(KW relations and depth of a circuit composition mentioned in 368\)) s
5 494 M
(        \(*\) Assuming all above, LHS is an algorithm for RHS complete problem \(or viceversa\) cr) s
5 483 M
(eating a lowerbound.) s
5 472 M
(        \(*\) All bounds derived in this draft assuming above do not follow conventional lowerbo) s
5 461 M
(und techniques e.g Circuit Lower Bounds. Equal goodness assumption implies - "both algorithms ) s
5 450 M
(solve same problem - one is more efficient than the other".) s
5 439 M
(        \(*\) Most importantly drafts in this document are just analyses of various social choic) s
5 428 M
(e functions, their complexities and contradictions irrespective of attaining lowerbounds.) s
5 406 M
(Equality of Goodness of PRG choice and Majority voting for finite electorate of size 3:) s
5 395 M
(--------------------------------------------------------------------------------------) s
5 384 M
(Let x1,x2,x3 be the goodness of 3 voter SATs. PRG choice randomly chooses one of the 3 voters ) s
5 373 M
(while majority voting is the usual CJT Majority+SAT composition.) s
5 351 M
(Goodness of PRG choice:) s
5 340 M
(----------------------) s
5 329 M
(= \(x1*m\(x1\) + x2*m\(x2\) + x3*m\(x3\)\) / 3) s
5 318 M
(When all 3 have equal goodness 1, effective goodness is:) s
5 307 M
(= \(1*1 + 1*1 + 1*1\)/3 = 1) s
5 285 M
(Goodness of Majority choice:) s
5 274 M
(----------------------------) s
5 263 M
(This is the bounded version of CJT binomial series summation. When x1=x2=x3=1:) s
5 252 M
(= \(3C2\(1\)^2\(0\)^1 + 3C3\(1\)^3\(0\)^0\)  = \(0 + 1\) = 1) s
5 230 M
(Possible Lowerbounds described previously for Unbounded and Bounded electorate lead to contrad) s
5 219 M
(ictions as below:) s
5 208 M
(\(*\) In infinite voter case, homogeneous voter CJT circuit in BPP is derandomized to P if CJT c) s
5 197 M
(onverges => P=BPP.) s
5 186 M
(\(*\) In finite voter case, NP-complete RHS has BPP algorithm in LHS \(NP in BPP\) implying NP in ) s
5 175 M
(P/poly and collapse of PH => NP in P/poly and PH in P/poly.) s
5 153 M
(Contradiction 1 :) s
5 142 M
(-----------------) s
5 131 M
(If BPP=P \(unbounded CJT\) and NP is in BPP \(bounded\) then NP is in P=BPP => P=NP. This conflict) s
5 120 M
(s with P != NP implied by :) s
5 109 M
(        \(*\) the Majority Hardness Lemma \(318\),) s
5 98 M
(        \(*\) Polytime learning of NP implying NP does not have polytime algorithms \(368\) and) s
5 87 M
(        \(*\) HLMN PARITYSAT counterexample \(53.15\)) s
5 76 M
(but concurs with :) s
5 65 M
(        \(*\) high percentage of random k-SATs satisified in Approximate CNF SAT solver by least) s
5 54 M
( squares \(376\).) s
5 32 M
(But can infinite voter CJT circuit be in BPP and thus in P/poly? Infinite voter CJT circuit is) s
5 21 M
( of polynomial size if it is polynomial in number of Voter SAT variables and exponential if it) s
5 10 M
( is exponential in number of variables. Latter happens only if all voters have dissimilar SAT ) s
_R
S
%%Page: (252) 252
%%BeginPageSetup
_S
18 36 translate
/pagenum 252 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (252) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(variables while common variables across voter SATs make it exponential. This is described in e) s
5 681 M
(xample of 53.8. Condorcet Jury Theorem convergence in homogeneous voters case implies all vote) s
5 670 M
(rs are similar \(e.g have similar voting SATs\) thus ruling out polynomial size case i.e Unbound) s
5 659 M
(ed CJT circuit can not both be in BPP and converging. This contradiction stems from the assump) s
5 648 M
(tion - BPP derandomizes to P. LHS could be in RP too. RP is contained in NP. \(Can BPP derandom) s
5 637 M
(ize to NP i.e BPP in NP?\). Another assumption is all voters have 3-SAT choice functions. If al) s
5 626 M
(l voter SATs are 2-SATs \(in P\), infinite and finite voter cases are not equatable and there is) s
5 615 M
( no contradiction. Known result: If NP is in BPP, NP=RP - this applies to bounded voting case ) s
5 604 M
(above. Thus BPP=P possibility is removed by exponential sized CJT circuit and BPEXP=EXP is sti) s
5 593 M
(ll possible when CJT converges. Contradiction 1 is avoided.) s
5 571 M
(Contradiction 2 :) s
5 560 M
(-----------------) s
5 549 M
(If NP is in BPP and thus in P/poly \(irrespective of BPP=P\), similar conflicts arise. An assump) s
5 538 M
(tion made in composition of 3-SAT voters and Majority function for bounded electorate in 424 i) s
5 527 M
(s resultant composition is also in NP \(depth lowerbound for this composition can be obtained b) s
5 516 M
(y KW relations in 368\). This assumption could be false because composition of NP 3-SAT with no) s
5 505 M
(n-uniform NC1 majority function could be harder than mere NP - because this is equivalent to r) s
5 494 M
(eplacing oracle with a circuit composition in a P^NP algorithm. P with NP oracle adds an addit) s
5 483 M
(ional quantifier and places it in second level of polynomial hierarchy \(inclusion in https://w) s
5 472 M
(ww.cse.buffalo.edu/~regan/papers/ComplexityPoster.jpg shows there are problems in Sigma\(p,2\) /) s
5 461 M
(\\ Pi\(p,2\) which also have BPP algorithms and P^NP is contained in Sigma\(p,2\) /\\ Pi\(p,2\)\). Thus) s
5 450 M
( a PRG choice and converging bounded electorate voting of equal goodness need not imply NP in ) s
5 439 M
(BPP. This composition may not be a complete problem. Stricter oracle definition of Majority+SA) s
5 428 M
(T composition is NC1\(L\) where Majority is computable by non-uniform circuits or BWBP with orac) s
5 417 M
(le access to gates belonging to a class L. For 3-SAT voter oracles, CJT majority voting circui) s
5 406 M
(t is in NC1\(NP\) \(is this contained in P^NP?\). Subject to equal goodness, composition equivalen) s
5 395 M
(t of NC1\(NP\) is in BPP and not NP is in BPP.) s
5 373 M
(Reference 429.3 suggests there exists a random oracle A relative to which NC^A is in P^A. P ha) s
5 362 M
(ving NP oracle access is known as class delta\(p,2\)=P^NP. This answers if NC1^NP is in P^NP in ) s
5 351 M
(the affirmative. There is a known delta\(p,2\)-complete problem mentioned in reference 429.5. If) s
5 340 M
( bounded electorate NC1^NP problem is complete for its class, then equal goodness of PRG choic) s
5 329 M
(e and bounded majority voting implies NC1^NP is in BPP. This in turn implies NP is in BPP \(if ) s
5 318 M
(NC1^NP strictly contains NP\) and thus NP is in P/poly again leading to contradiction in the ou) s
5 307 M
(tset.) s
5 285 M
(Replacing oracles with compositions and applying depth lowerbounds for Majority+VoterSAT circu) s
5 274 M
(it composition as below for m voters with n variables per voter SAT \(from 368\):) s
5 263 M
(        D\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\) >= 5.3*logm  + n - O\(m*logm/n\)) s
5 252 M
(does away with the hassles of relativization and directly gives the depth lowerbound of the ma) s
5 241 M
(jority voting circuit composition. Size of this composition is the alternately phrased KRW con) s
5 230 M
(jecture in 429.7.) s
5 208 M
(Example delta\(p,2\)-complete problem mentioned in 429.5:) s
5 197 M
(-----------------------------------------------------) s
5 186 M
(While number of queries to NP oracle <= k) s
5 175 M
({) s
5 164 M
(        \(*\) Query a 3SAT oracle for a satisfying assignment for a 3CNF Voter SAT) s
5 153 M
(        \(*\) Store the queried satisfying assignment in a linked list in sorted order - this is) s
5 142 M
( linear per insertion i.e traverse the list and compare the two adjacent nodes. E.g. {1,5}, {1) s
5 131 M
(,3,5}, {1,3,5,6}, {1,3,5,6,7}... upto k-th query and lexicographic ordering is preserved by a ) s
5 120 M
(decimal encoding of SAT oracle query string.) s
5 109 M
(}) s
5 98 M
(Output 1 if last element in the list ends with binary 1 digit.) s
5 76 M
(This algorithm makes k queries to an NP oracle and has O\(k^2\) time complexity and thus in delt) s
5 65 M
(a\(p,2\). Hardness follows by reducing any polynomial time algorithm with NP oracle to above - r) s
5 54 M
(easonably straightforward because oracle queries are memoized and can be looked-up in polynomi) s
5 43 M
(al time.) s
5 21 M
(Mapping above delta\(p,2\) complete problem to proving completeness of NC1^NP majority voting is) s
5 10 M
( non-trivial. Majority function can make n queries to n voter SAT oracles and atleast n/2 + 1 ) s
_R
S
%%Page: (253) 253
%%BeginPageSetup
_S
18 36 translate
/pagenum 253 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (253) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(queries should return 1 or 0 to compute majority in NC1. Beyond this, NC reducibility has to b) s
5 681 M
(e proved by Many-one/Turing reductions or Logspace reductions of any other problem in NC1^NP t) s
5 670 M
(o this. Integer multiplication,powering and division have been proved to be equivalent \(NC red) s
5 659 M
(ucible to each other\) mentioned in reference 429.8. NC reducibility through oracle NC gates ha) s
5 648 M
(ve been proved in reference 429.9. Majority function is known not to be complete for NC1 under) s
5 637 M
( AC0 many-instances-to-one reductions \(reference 429.10\). This could probably imply that NC1^N) s
5 626 M
(P is not complete too, thereby avoiding contradiction 2.) s
5 604 M
(But this also implies that any Majority^A for a random oracle A is not complete if Majority is) s
5 593 M
( not complete for NC1. Hence it has to be proved or disproved if a problem is not NC1 complete) s
5 582 M
(, it is not NC1^A complete for an oracle A. Lemma 3.3.9 in reference 429.9 [RuzzoGreenlawHoove) s
5 571 M
(r] describes an Oracle PRAM or an NC oracle circuit M' to another NC circuit M. M has O\(n^c\) s) s
5 560 M
(ize/processors and depth/time of O\(logn\) and M makes at most O\(n^c\) oracle queries to M' \(each) s
5 549 M
( node can query\). But these oracle queries are made simultaneously in parallel time of O\(logn\)) s
5 538 M
(. Thus replacing calls to M' by M' itself increases depth by O\(logn\) and size by O\(n^c\) order ) s
5 527 M
(of magnitude i.e new circuit without oracle M' has time O\(\(logn\)^2\) and size O\(n^2c\). Similar ) s
5 516 M
(oracle replacement could be done for Majority^A circuits too. If oracle gates to Majority are ) s
5 505 M
(replaced by circuit for A itself which has size s and depth d and Majority makes at most O\(n^c) s
5 494 M
(\) calls to oracle A, new Majority circuit without oracle has depth/time O\(d*logn\) and size/pro) s
5 483 M
(cessors O\(s*n^c\). This new circuit need not be in NC1. From Spira's Theorem a circuit of size ) s
5 472 M
(O\(s*n^c\) can be transformed into a circuit of depth O\(log\(s*n^c\)\)=O\(log\(s\) + c*log\(n\)\). Follow) s
5 461 M
(ing cases arise after replacing oracle gates with a new circuit of size s.) s
5 439 M
(Case 1 - s = 2^n:) s
5 428 M
(----------------) s
5 417 M
(This makes the new majority circuit sans oracle to be of depth O\(n*log2+c*log\(n\)\) which is not) s
5 406 M
( polylog depth and polynomial size and thus lies outside NC - this new circuit problem could b) s
5 395 M
(e complete for a different class. This line of reasoning coincides with previous formulations ) s
5 384 M
(of majority voting based on depth bounds by Communication Complexity \(KRW Conjecture\) and Dire) s
5 373 M
(ct Connect circuit families of unbounded depth and exponential size. If there is a problem B i) s
5 362 M
(n NC1, Majority^A and B^A can be in totally different depth hierarchy classes by depth hierarc) s
5 351 M
(hy theorem. This could be a complete problem in different class \(e.g, PH-complete, EXP-complet) s
5 340 M
(e etc.,\) and can be equated under equal goodness assumption with a non-majority social choice.) s
5 318 M
(Case 2 - s = n^c:) s
5 307 M
(-----------------) s
5 296 M
(This new majority circuit has depth O\(2*c*log\(n\)\) and size O\(n^2c\) and is obviously in NC1 and) s
5 285 M
( computes majority. But majority is not complete for NC1 and thus majority voting itself is no) s
5 274 M
(t a complete problem and cannot be equated under equal goodness assumption with a non-majority) s
5 263 M
( choice.) s
5 230 M
(References:) s
5 219 M
(-----------) s
5 208 M
(429.1 Definition of Homogenenous Voter - http://www.uni-saarland.de/fak1/fr12/csle/publication) s
5 197 M
(s/2006-03_condorcet.pdf - "...Now assume that a chamber consists of three homogenous judges. H) s
5 186 M
(omogenous means that the decision-making quality of each single judges is described by identic) s
5 175 M
(al parameters r..." - identical parameters are translatable to identical variables though SAT ) s
5 164 M
(could be different for each) s
5 153 M
(429.2 Counting Classes and Fine Structure between NC and L - [Samir Datta , Meena Mahajan , B ) s
5 142 M
(V Raghavendra Rao , Michael Thomas , Heribert Vollmer] - http://www.imsc.res.in/~meena/papers/) s
5 131 M
(fine-struct-nc.pdf - Definition of NC circuits with Oracle gates. Definitions 8 and 10 and Rem) s
5 120 M
(ark 9 - Majority NC1 circuit with NP oracle for all homogeneous voters belongs to Boolean Hier) s
5 109 M
(archy and specifically is in NC1 hierarchy.) s
5 98 M
(429.3 For a random oracle A, NC^A is strictly contained in P^A - https://complexityzoo.uwaterl) s
5 87 M
(oo.ca/Complexity_Zoo:N, https://complexityzoo.uwaterloo.ca/Zooref#mil92 - [PeterBroMiltersen]) s
5 76 M
(429.4 Delta\(p,2\) - P has NP oracle - https://complexityzoo.uwaterloo.ca/Complexity_Zoo:D#delta) s
5 65 M
(2p) s
5 54 M
(429.5 Delta\(p,2\) complete problem - https://complexityzoo.uwaterloo.ca/Zooref#kre88 - [Krentel) s
5 43 M
(] - Given a Boolean formula, does the lexicographically last satisfying assignment end with 1?) s
5 32 M
(429.6 Spira theorem - any formula of leaf size s can be transformed into a formula of depth lo) s
5 21 M
(g\(s\) - https://www.math.ucsd.edu/~sbuss/CourseWeb/Math267_1992WS/wholecourse.pdf) s
5 10 M
(429.7 Size of a circuit composition - alternative form of KRW conjecture - http://www.math.ias) s
_R
S
%%Page: (254) 254
%%BeginPageSetup
_S
18 36 translate
/pagenum 254 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (254) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(.edu/~avi/PUBLICATIONS/GavinskyMeWeWi2016.pdf - "...This suggests that information complexity ) s
5 681 M
(may be the \342\\200\\234right\342\\200\\235 tool to study the KRW conjecture.  In particular, since in ) s
5 670 M
(the setting of KW relations, the information cost is analogous to the formula size, the \342\\200) s
5 659 M
(\\234correct\342\\200\\235 way to state the KRW conjecture may be using formula size: L\(g*f\) \342\\211) s
5 648 M
(\\210 L\(g\)\302\267L\(f\)..." - for Majority+VoterSAT composition size is conjectured as O\(n^5.3 * s\) wh) s
5 637 M
(ere s is the size of VoterSAT formula. Information complexity of a composition of a function g) s
5 626 M
(:{0,1}^m->{0,1} and a universal relation Un:{0,1}^n->{0,1} for majority voting is: a Voter SAT) s
5 615 M
( g of m variables is composed with a Majority universal relation of n variables. Majority is a) s
5 604 M
( universal relation because for 2 input strings to majority function drawn at random can be ch) s
5 593 M
(ecked if they differ in a bit position. Above depth bound is the amount of mutual information ) s
5 582 M
("leaked" while computing the composition together by Alice and Bob. Alice gets a m*n matrix X ) s
5 571 M
(and a string a in ginverse\(0\) and Bob gets a m*n matrix Y and a string b in ginverse\(1\) and bo) s
5 560 M
(th accept if a and b differ in a bit position and X and Y have row mismatch and reject else. g) s
5 549 M
(inverse\(0\) is equivalent to a rejecting assignment to SAT and ginverse\(1\) is equivalent to an ) s
5 538 M
(accepting assignment to SAT because g\(\) is the Voter SAT.) s
5 527 M
(429.8 Log Depth circuits for Division and Related - [BeameCookHoover] - https://pdfs.semantics) s
5 516 M
(cholar.org/29c6/f0ade6de6c926538be6420b61ee9ad71165e.pdf) s
5 505 M
(429.9 NC reducibility - reducing one NC instance to another - https://homes.cs.washington.edu/) s
5 494 M
(~ruzzo/papers/limits.pdf - replace NC oracle gates by multiplication of equivalent number of p) s
5 483 M
(rocessors and depth) s
5 472 M
(429.10 Catechism on open problems - Interview of Eric Allender - https://books.google.co.in/bo) s
5 461 M
(oks?id=7z3VCgAAQBAJ&pg=PA37&lpg=PA37&dq=NC+reducibility+majority+function&source=bl&ots=WOzlJF) s
5 450 M
(Rbpt&sig=OmFqckehlrTfyaeTOjscJ423dUk&hl=en&sa=X&ved=0ahUKEwjQ_O-Y1YPVAhVGMI8KHbJCDbAQ6AEIIzAA#) s
5 439 M
(v=onepage&q=NC%20reducibility%20majority%20function&f=false - "...Majority function is not com) s
5 428 M
(plete for NC1 under AC0 many-one reductions...") s
5 417 M
(429.11 Parallel Computation and the NC hierarchy relativized - [Christopher Wilson] - https://) s
5 406 M
(link.springer.com/chapter/10.1007/3-540-16486-3_111 - containments of NC classes relative to o) s
5 395 M
(racle - "NC^A hierarchy is seen to be in P^A for any oracle A. Also, nondeterministic log-spac) s
5 384 M
(e relative to ... there exists an oracle A, such that NC1^A in NC2^A ... in P^A") s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(-------------------------------------------------) s
5 340 M
(430. \(THEORY\) Theoretical Formalism for an Electronic Voting Machine based on Locality Sensiti) s
5 329 M
(ve Hashing - 13 and 14 July 2017 - related to 265,275,376 and 319) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(-------------------------------------------------) s
5 296 M
(Locality Sensitive Hashing and their relevance to Multiway Contests have been described in 319) s
5 285 M
(. Voters voting for same candidate are clustered together in a bucket chain of tabulation hash) s
5 274 M
(ing. This is akin to a naive electronic voting machine which increments counters of a candidat) s
5 263 M
(e for each vote cast for h\(im/er\). An LSH voting machine queries voter SAT oracles sequentiall) s
5 252 M
(y\(or parallelly if there is a parallel LSH implementation\), receives the candidate index, find) s
5 241 M
(s the candidate index key in LSH and appends the voter id to the bucket chain for the candidat) s
5 230 M
(e. Sequential version of LSH voting machine is in delta\(p,2\)=P^NP because LSH is in P and orac) s
5 219 M
(le queries are made to voter 3SATs. LSH algorithms usually search for nearest neighbours and f) s
5 208 M
(ind similar items with high probability. For LSH based Electronic Voting Machine this rho para) s
5 197 M
(meter as defined in 319 is log\(1/p1\)/log\(1/p2\) where p1=Pr\(h\(x\)=h\(y\)\) if x and y had voted for) s
5 186 M
( same candidate and p2=Pr\(h\(x\)=h\(y\)\) if x and y had voted for different candidates. Simplest v) s
5 175 M
(oting machine is an array of candidates and voters increment an array element for a candidate ) s
5 164 M
(index which is exact and errorfree. But LSH voting generalizes the notion of voting as: "x and) s
5 153 M
( y vote for same candidate" is generalized to "x and y are similar or have similar liking". Fo) s
5 142 M
(r example, a web search engine lists URL results for a query and all these URLs hash/vote to s) s
5 131 M
(ame query bucket in LSH parlance. Thus notion of exact candidate is replaced by an abstract si) s
5 120 M
(milarity probability. Definition of rho thus allows error and its bounds are derived in refere) s
5 109 M
(nces 430.2 and 430.3.) s
5 87 M
(Non-boolean social choice functions which a voter computes to obtain a candidate index have be) s
5 76 M
(en described previously. Previous LSH or array of counters based voting machine has following ) s
5 65 M
(standard operating procedure:) s
5 54 M
(        \(*\)  receives voters in a streaming sequence,) s
5 43 M
(        \(*\)  each voter solves a non-boolean SAT \(which could be in an arbitrary complexity cl) s
5 32 M
(ass\) having oracle access to it) s
5 21 M
(        \(*\)  oracle returns a candidate index and counter is incremented) s
5 10 M
(        \(*\)  LSH based voting has a special step - it compares two voters for similarity i.e i) s
_R
S
%%Page: (255) 255
%%BeginPageSetup
_S
18 36 translate
/pagenum 255 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (255) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(f their oracle queries return same candidate index hash them to same bucket) s
5 681 M
(        \(*\)  Multipartisan SAT Oracle internally has to implement the following:) s
5 670 M
(                - Iterate through all candidates) s
5 659 M
(                - Find the maximum number of clauses that can be satisfied by each candidate a) s
5 648 M
(nd quantify it as score which is NP-hard MAXSAT problem.) s
5 637 M
(                - Sort the scores for the candidates and return the topranked candidate.) s
5 626 M
(        \(*\) Sort the LSH by length of buckets) s
5 615 M
(        \(*\) MAXSAT has been used in lieu of Exact SAT for grading the candidates based on numb) s
5 604 M
(er of clauses satisfied. Exact SAT would return either 1 or 0 only and doesn't compute percent) s
5 593 M
(age of clauses satisfied.) s
5 582 M
(        \(*\) Random k-CNF SAT Solver implemented in 276 approximates by solving system of equat) s
5 571 M
(ions by least squares.) s
5 560 M
(        \(*\) Boolean Majority function is a special case of multipartisan voting: Restrict the ) s
5 549 M
(number of candidates to 2 indexed as 0 and 1 and apply LSH.) s
5 538 M
(        \(*\) Voter SAT Oracles could be Constraint Satisfaction Problem\(CSP\) Solvers too which ) s
5 527 M
(allow reals. This has been described in 265. Approximation of CSPs could be NP-hard if UGC is ) s
5 516 M
(true.) s
5 494 M
(Circuit Value Problem finds if a circuit encoding evaluates to 1 or 0 for an input assignment.) s
5 483 M
( This is equivalent to the following prover-verifier protocol:) s
5 472 M
(        \(*\) Voter has a Constraint Satisfaction Problem \(boolean or real\)) s
5 461 M
(        \(*\) Candidate has an assignment to the variables of voter CSP \(Prover\)) s
5 450 M
(        \(*\) Voter verifies the assignment to CSP \(Verifier\)) s
5 439 M
(This kind of Circuit Value Problem \(CVP\) formulation has been avoided throughout drafts in doc) s
5 428 M
(ument for Majority Voting. This is because, equating goodness and Condorcet Jury Theorem appli) s
5 417 M
(cation requires quantifying the decision correctness \(or\) accuracy of Voter SAT/CSP which is n) s
5 406 M
(ot feasible to compute in CVP. Class PP generalizes BPP by removing bounds on error. From Toda) s
5 395 M
('s Theorem, PH is contained in P^PP and P^#P. Goodness in LSH voting is exactly the rho parame) s
5 384 M
(ter and if each voter SAT oracle in LSH with unbounded error is in PP \(extent to which a voter) s
5 373 M
( is misclassified in a candidate bucket\), LSH voting itself is in P^PP and thus subsumes PH. A) s
5 362 M
(nother aspect of LSH voting is majority circuit fan-in is replaced by size of buckets.) s
5 340 M
(References:) s
5 329 M
(----------) s
5 318 M
(430.1 Locality Sensitive Hashing - [Alex Andoni] - http://web.mit.edu/andoni/www/LSH/index.htm) s
5 307 M
(l) s
5 296 M
(430.2 Lowerbounds for Locality Sensitive Hashing - [MotwaniAssafPanigrahi] - http://theory.sta) s
5 285 M
(nford.edu/~rinap/papers/lshlb.pdf) s
5 274 M
(430.3 Optimal lowerbounds for Locality Sensitive Hashing - [ODonnell] - https://www.cs.cmu.edu) s
5 263 M
(/~odonnell/papers/lsh.pdf) s
5 252 M
(430.4 Reflections on Trusting Trust - Trojan horses in code - program that prints itself - Qui) s
5 241 M
(nes - Godel,Escher,Bach: An Eternal Golden Braid - Fixed Points in Turing Computable Functions) s
5 230 M
( - [Ken Thompson] - http://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf) s
5 219 M
(430.5 Problems with Electronic Voting Machines \(e.g DRE machines\), VVPAT and Trusting source c) s
5 208 M
(ode - [Bruce Schneier] - https://www.schneier.com/blog/archives/2004/11/the_problem_wit.html) s
5 197 M
(430.6 B-Cryptographic counters protocol augmented with Public Key Infrastructure for Increment) s
5 186 M
(ing Counters in Tabulation Authority - https://crypto.stanford.edu/pbc/notes/crypto/voting.htm) s
5 175 M
(l - Previous LSH based theoretical voting machine requires such a secure increment protocol fo) s
5 164 M
(r incrementing tabulation hashing buckets. Anonymity requires shuffling the buckets.) s
5 153 M
(430.7 PP is as hard as polynomial time hierarchy - [Toda] - http://epubs.siam.org/doi/abs/10.1) s
5 142 M
(137/0220053?journalCode=smjcat and [SanjeevArora-BoazBarak] - http://theory.cs.princeton.edu/c) s
5 131 M
(omplexity/book.pdf) s
5 120 M
(430.8 Beyond Locality Sensitive Hashing - [Alexandr Andoni,Piotr Indyk, Huy L. Nguy\313\\234\303\252n, I) s
5 109 M
(lya Razenshteyn] - http://www.mit.edu/~andoni/papers/subLSH.pdf - Two level LSH partitioning b) s
5 98 M
(y hash tables - Outer hashing creates buckets for the hash table and Inner hashing creates has) s
5 87 M
(h table for each buckets around a centroid.) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(------------------------) s
5 43 M
(431. \(FEATURE-DONE and THEORY\) Approximate CNF SAT Solver Update - percentage of clauses satis) s
5 32 M
(fied - 18 July 2017) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(------------------------) s
_R
S
%%Page: (256) 256
%%BeginPageSetup
_S
18 36 translate
/pagenum 256 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (256) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\(*\) This commit prints percentage of clauses satisfied for each random CNF 3SAT formula for bo) s
5 681 M
(th 0 and 1 evaluations) s
5 670 M
(\(*\) logs for ~1000 iterations of random 3SAT have been committed to testlogs/) s
5 659 M
(\(*\) Interestingly, even failing formula assignments by least squares satisfy more than 75% of ) s
5 648 M
(clauses of the formula) s
5 637 M
(\(*\) Percentage of formulas satisfied by least squares heuristic is ~70%) s
5 626 M
(\(*\) This is probably a demonstration of complement form of Lovasz Local Lemma \(LLL\) for MAXSAT) s
5 615 M
( which is:) s
5 604 M
(if events occur independently with a certain probability, there is a small non-zero probabilit) s
5 593 M
(y that none of them will occur) s
5 582 M
(\(*\) Dual of LLL for this MAXSAT approximation is:) s
5 571 M
(if each clauses are satisfied with a certain probability, there is a large probability that al) s
5 560 M
(l of them are satisfied) s
5 538 M
(References:) s
5 527 M
(----------) s
5 516 M
(431.1 Lovasz Local Lemma - https://en.wikipedia.org/wiki/Lov\303\241sz_local_lemma) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(--------------------------) s
5 472 M
(432. \(THEORY\) MAXSAT ranking of text documents, Approximate CNF SAT solver and Lovasz Local Le) s
5 461 M
(mma - related to 431 -) s
5 450 M
(19 July 2017) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(--------------------------) s
5 417 M
(Considering a set of text documents, ranking function r\(X,A\), is the subjective perception mea) s
5 406 M
(sure of a text X) s
5 395 M
(with access to a perception oracle A:) s
5 384 M
(        r\(X,A\) = subjective rank of X as perceived by an oracle A) s
5 373 M
(In the context of web link graphs of HTML documents, every adjacent vertex of a node N is the ) s
5 362 M
(perceiver of N and for two) s
5 351 M
(adjacent vertices A and B of N:) s
5 340 M
(        r\(X,A\) = r\(X,B\) or r\(X,A\) != r\(X,B\)) s
5 329 M
(Perception ranking of a node need not be decided just by adjacent vertices at the end of rando) s
5 318 M
(m walk markov iterations. For example, there could be vertices which are not adjacent but yet ) s
5 307 M
(could have indirect unaccounted for perception. An example of this are the readers of a websit) s
5 296 M
(e who do not link to it but yet have a perception. This perception is not reckoned in subjecti) s
5 285 M
(ve link graph ranking.) s
5 263 M
(Ranking of texts can be thought of as MAXSAT problem: Each reader of a text has a CNF \(subject) s
5 252 M
(ive\) or all readers have fixed CNF \(Intrinsic Objective Merit\) which they apply on the qualita) s
5 241 M
(tive and quantitative attributes of a text. CNF for measuring merit conjoins clauses for measu) s
5 230 M
(ring meaningfulness of the text. Each literal in this CNF is a merit variable e.g Graph comple) s
5 219 M
(xity measures like Korner Entropy , Graph Tensor Neuron Network Intrinsic Merit, Connectivity ) s
5 208 M
(etc., Rank of the text is the percentage of clauses satisfied. This CNF based ranking unifies ) s
5 197 M
(all subcategories of rankings.) s
5 175 M
(Lovasz Local Lemma:) s
5 164 M
(Let a1,a2,a3,...,an be set of events. If each event occurs with probability < p, and dependenc) s
5 153 M
(y digraph of these events have outdegree at most d, then the probability of non-occurrence of ) s
5 142 M
(all these events is non-zero:) s
5 131 M
(        Pr[/\\ !ai] > 0 , if ep\(d+1\) < 1 for e=2.7128...) s
5 109 M
(CNF formula can be translated into a graph where each vertex corresponds to a clause and there) s
5 98 M
( is an edge between any 2 clausevertices if they have a common literal \(negated or unnegated\).) s
5 87 M
( In approximate least-square SAT solver, let d+1 be the number of clauses per CNF. Then at mos) s
5 76 M
(t d other clauses can have literal overlap and thus CNF clause dependency graph can have maxim) s
5 65 M
(um outdegree of d. Each event ai corresponds to not satisfying clause i in CNF.) s
5 43 M
(From LLL, If p < 1/[e\(d+1\)] is the probability of an event \(not satisfying a clause\) :) s
5 32 M
(Probability that clause is satisfied: 1-p > \(1-1/[e\(d+1\)]\)) s
5 21 M
(Probability that all of the clauses are satisfied > \(1-1/[e\(d+1\)]\)^\(d+1\) \(for d+1 clauses\)) s
5 10 M
(Probability that none of the clauses are satisfied < 1-\(1-1/[e\(d+1\)]\)^\(d+1\)) s
_R
S
%%Page: (257) 257
%%BeginPageSetup
_S
18 36 translate
/pagenum 257 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (257) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(In previous example d+1 = 14 and thus probability that none of the clauses are satisified for ) s
5 681 M
(any random CNF is:) s
5 670 M
(= 1-\(1-1/[e\(14\)]\)^\(14\)  < ~31.11%) s
5 659 M
(and probability of all the clauses being satisified for any random CNF is:) s
5 648 M
(\(1-1/[e\(14\)]\)^\(14\)  > ~68.89%) s
5 626 M
(Experimental iterations of SAT solver converge as below \(10000 CNFs\):) s
5 615 M
(Percentage of CNFs satisfied so far: 71.14) s
5 604 M
(Average Percentage of Clauses per CNF satisfied: 97.505) s
5 582 M
(This coincides with LLL lowerbounds above and far exceeds it because outdegree \(common literal) s
5 571 M
(s\) is less and average percentage of CNFs satisfied is 71% after 10000 iterations. It has to b) s
5 560 M
(e noted that average percentage of clauses satisfied per random CNF is 97% which implies that ) s
5 549 M
(very few clauses fail per CNF.) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(-----------------------) s
5 505 M
(433. \(FEATURE-DONE\) Approximate CNF SAT Solver update - Commits 1 - 19 July 2017) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-----------------------) s
5 472 M
(\(*\) Average percentage of clauses satisfied per CNF is printed at the end of 10000 iterations) s
5 461 M
(\(*\) AsFer Design Document updated for Lovasz Local Lemma analysis of least squares CNF SAT sol) s
5 450 M
(ver) s
5 439 M
(\(*\) logs for least square assignment of 10000 random CNFs committed to testlogs/) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(-----------------------) s
5 406 M
(434. \(FEATURE-DONE\) Recursive Gloss Overlap Graph Classifier update - Commits 2 - 19 July 2017) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(-----------------------) s
5 373 M
(\(*\) printed Betweenness Centrality \(BC\) of the definition graph of a text) s
5 362 M
(\(*\) BC of a node is the ratio of number of \(s-t\) shortest paths going through the node to all ) s
5 351 M
(pairs shortest paths and) s
5 340 M
(thus measures how central a node is to the graph and thus is another basis for classifying a t) s
5 329 M
(ext apart from dense subgraphs. ) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(----------------------------------------------) s
5 285 M
(435. \(FEATURE-DONE\) Recursive Gloss Overlap graph classifier update - commits 1 - 20 July 2017) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(----------------------------------------------) s
5 252 M
(\(*\) Following centrality measures for the definition graph have been printed in sorted order a) s
5 241 M
(nd top vertices are compared:) s
5 230 M
(       1\) Betweenness Centrality) s
5 219 M
(       2\) Closeness Centrality) s
5 208 M
(       3\) Degree Centrality) s
5 197 M
(       4\) Eigenvector Centrality \(PageRank\)) s
5 186 M
(       5\) Core numbers Centrality \(k-core dense subgraphs\)) s
5 175 M
(\(*\) While first 3 centrality measures are reasonably equal in terms of ranking central vertice) s
5 164 M
(s, PageRank centrality and k-core centrality are) s
5 153 M
( slightly different) s
5 142 M
(\(*\) But all 5 centrality measures reasonably capture the central purport of the text i.e the t) s
5 131 M
(ext on) s
5 120 M
( "Chennai Metropolitan Area Expansion to 8848 sqkm" is classified into "Area" which is the top) s
5 109 M
(ranked central vertex) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(------------------------------------------) s
5 65 M
(436. \(FEATURE-DONE\) Approximate SAT Solver update - commits 2 - 20 July 2017) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(------------------------------------------) s
5 32 M
(\(*\) Increased number of clauses and variables to 16 and iterated for ~3100 random CNF formulae) s
5 21 M
(.) s
5 10 M
(\(*\) Following are the MaxSAT percentages after ~3100 iterations:) s
_R
S
%%Page: (258) 258
%%BeginPageSetup
_S
18 36 translate
/pagenum 258 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (258) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Percentage of CNFs satisfied so far: 69.1020276794) s
5 681 M
(Average Percentage of Clauses per CNF satisfied: 97.6122465401) s
5 670 M
(\(*\) Previous values are quite close to 14 clauses and variables iterations done previously.) s
5 648 M
(Lovasz Local Lemma bound for 16 clauses all having common literals:) s
5 637 M
(= \(1-1/[e\(16\)]\)^\(16\)  > ~68.9233868%) s
5 626 M
(and average percentage of clauses satisfied after 3100 iterations far exceeds this bound at 97) s
5 615 M
(.61%) s
5 593 M
(Commercially available SAT solvers \(exact NP-complete decision tree evaluation based\) usually ) s
5 582 M
(scale to millions of clauses and variables.Though) s
5 571 M
(this approximate polynomial time SAT solver does not have similar advantage, yet the huge perc) s
5 560 M
(entage of clauses satisfied in repetitive iterations does seem to have a lurking theoretical r) s
5 549 M
(eason. Infact this is symmetry breaking solver having a sharp threshold phase transition which) s
5 538 M
( tries to translate a system of equations over reals in [0,1] to discrete boolean CNF formulae) s
5 527 M
(\(value below 0.5 is 0 and above 0.5 is 1\). Hardness of Approximation and UGC prohibit polytime) s
5 516 M
( approximations unless P=NP. 98% satisfied clauses could imply 100/98=\(1 + 0.020408163\) approx) s
5 505 M
(imation where epsilon=0.020408163. This has to be corroborated for millions of clauses and var) s
5 494 M
(iables in least-squares and requires high performance computing.) s
5 472 M
(Random number generator used in generating random CNF clauses is based on /dev/random and hard) s
5 461 M
(ware generated entropy. This CNF SAT solver depends on linux randomness to simulate pseudorand) s
5 450 M
(omness and create permutations of CNFs. Accuracy of previous convergence figures therefore mig) s
5 439 M
(ht depend on if the CNFs are pseudorandom \(e.g k-wise independent for k variables - when k inc) s
5 428 M
(reases to infinity independence may have infinitesimal probability\).) s
5 406 M
(References:) s
5 395 M
(-----------) s
5 384 M
(436.1 Linux Pseudorandom Generator - https://eprint.iacr.org/2012/251.pdf) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(-------------------------------------------) s
5 340 M
(437. \(FEATURE-DONE\) Approximate SAT Solver update - 24 July 2017) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-------------------------------------------) s
5 307 M
(\(*\) Increased number of variables and clauses to \(20,20\).) s
5 296 M
(\(*\) Changed SciPy lstsq\(\) to NumPy lstsq\(\) because NumPy has a faster lstsq\(\) LAPACK implement) s
5 285 M
(ation as against xGELSS in SciPy) s
5 274 M
(\(*\) Logs for 100 random CNFs have been committed to testlogs/ and Percentage CNFs and Clauses ) s
5 263 M
(satisfied are as below:) s
5 252 M
(Percentage of CNFs satisfied so far: 58.4158415842) s
5 241 M
(Average Percentage of Clauses per CNF satisfied: 97.1782178218) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(-------------------------------------------) s
5 197 M
(438. \(THEORY\) Tight Hamiltonian Cycles and Independent Sets in ThoughtNet Hypergraph for Socia) s
5 186 M
(l Networks - related to 40,222,229,295,351,418,) s
5 175 M
(420 and other sections on ThoughtNet - 25 July 2017 and 28 July 2017) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(-------------------------------------------) s
5 142 M
(Theoretical description of ThoughtNet Hypergraph as basis for evocative thought and text analy) s
5 131 M
(sis is mentioned previously. Hypergraph with 3 vertices per edge \(3-uniform\) and number of ver) s
5 120 M
(tices n > n0, and minimum degree > n/2 + epsilon*n is guaranteed to have atleast one tight ham) s
5 109 M
(iltonian cycle from [Rodl,Rucinski,Szemeredi] theorem. Tight Hamiltonian Cycles have set of ma) s
5 98 M
(ximum vertex overlapping hyperedges. If complete universal knowledge is represented as 3-unifo) s
5 87 M
(rm ThoughtNet \(infinite\), this ensures all the concepts in universe are connected in a tight h) s
5 76 M
(amiltonian. Social media networks are also generalizable to hypergraphs \(though tradition is t) s
5 65 M
(o model as graphs having network flow\). This can be simulated by ThoughtNet index - streamed s) s
5 54 M
(ocial media tweets/posts/shares/likes are updated in ThoughtNet \(non-planar\) and each class st) s
5 43 M
(ack vertex \(e.g genre of people\) could be part of multiple hyperedges \(e.g events involving pe) s
5 32 M
(ople\) and each hyperedge can span multiple class stack vertices. Independent sets in this Thou) s
5 21 M
(ghtNet Hypergraph are set of vertices e.g people who do not directly know each other. Centrali) s
5 10 M
(ty measures \(e.g PageRank if there is one for hypergraph\) on this hypergraph would elicit the ) s
_R
S
%%Page: (259) 259
%%BeginPageSetup
_S
18 36 translate
/pagenum 259 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (259) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(social prestige/perception of individuals. It is worth quantifying how a vertex A is perceived) s
5 681 M
( by vertex B with no edge between them. This is a special case of centrality and gossip inform) s
5 670 M
(ation flow - ratio of number of shortest paths between two vertices s,t in an independent set ) s
5 659 M
(/ number of all pair shortest paths. This estimates how two unknown vertices indirectly know e) s
5 648 M
(ach other.) s
5 626 M
(Ranking people in social network can not be done in the same way as documents are ranked becau) s
5 615 M
(se of intrinsic merit anachronism paradox motivated by real world examples in earlier sections) s
5 604 M
( - merit precedes prestige while perception/prestige is a measure of merit. Bianconi-Barabasi ) s
5 593 M
(network model deserves a mention here in which each node has an intrinsic fitness parameter in) s
5 582 M
( addition to incoming links. Examples in the reference 438.2 below explain how intrinsic fitne) s
5 571 M
(ss/merit are applied to search engine ranking algorithms. Earlier network models relied on tem) s
5 560 M
(poral Preferential Attachment alone i.e node having high adjacency at time x are likely to hav) s
5 549 M
(e higher adjacency at time x+deltax. This is a transition from older First-Mover-Advantage \(fi) s
5 538 M
(rst starter always wins\), Rich-Get-Richer to Fit-Get-Richer paradigm. Fitness of a social netw) s
5 527 M
(ork profile \(twitter/facebook etc.,\) is a function of credentials mentioned in the profile and) s
5 516 M
( how fitness is quantified is specific to internal algorithm.) s
5 494 M
(Reference:) s
5 483 M
(-----------) s
5 472 M
(438.1 Tight Hamiltonian Cycles in 3-uniform Hypergraphs - [Rodl-Rucinski-Szemeredi] theorem - ) s
5 461 M
(https://web.cs.wpi.edu/~gsarkozy/Cikkek/Rio08.pdf) s
5 450 M
(438.2 Bianconi-Barabasi Social Network Model - https://en.wikipedia.org/wiki/Bianconi%E2%80%93) s
5 439 M
(Barab%C3%A1si_model - "...In 1999, Albert-L\303\241szl\303\263 Barab\303\241si requested his student Bianconi to) s
5 428 M
( investigate evolving networks where nodes have a fitness parameter. Barab\303\241si was interested ) s
5 417 M
(in finding out how Google, a latecomer in the search engine market, became a top player. Googl) s
5 406 M
(e\342\\200\\231s toppling of previous top search engines went against Barab\303\241si's BA model, which s) s
5 395 M
(tates that first mover has an advantage. In the scale-free network if a node appears first it ) s
5 384 M
(will be most connected because it had the longest time to attract links. Bianconi's work showe) s
5 373 M
(d that when fitness parameter is present, the "early bird" is not always the winner.[10] Bianc) s
5 362 M
(oni and Barab\303\241si's research showed that fitness is what creates or breaks the hub. Google's s) s
5 351 M
(uperior PageRank algorithm helped them to beat other top players. Later on Facebook came and d) s
5 340 M
(ethroned Google as Internet's most linked website. In all these cases fitness mattered which w) s
5 329 M
(as first showed in Bianconi and Barab\303\241si's research. In 2001, Ginestra Bianconi and Albert-L\303) s
5 318 M
(\241szl\303\263 Barab\303\241si published the model in the Europhysics Letters.[11] In another paper,[12] sub) s
5 307 M
(stituting fitness for energy, nodes for energy level and links for particles, Bianconi and Bar) s
5 296 M
(ab\303\241si was able to map the fitness model with Bose gas....") s
5 285 M
(438.3 Experience versus Talent shapes the web - http://www.pnas.org/content/105/37/13724.full ) s
5 274 M
(- following simplistic theory provides intuition for it:) s
5 263 M
(        Let M be the natural ability/merit/fitness of a vertex and E be the experience.) s
5 241 M
(        Rate of change of experience of a social profile vertex is proportional to its intrins) s
5 230 M
(ic fitness and present experience.) s
5 219 M
(        Previous assumption is a heuristic on real-life experiences - intrinsic fitness is a c) s
5 208 M
(onstant while experience changes with time.) s
5 197 M
(        Thus at any time point, experiential learning depends on how naturally meritorious a p) s
5 186 M
(erson is and how much past experience is) s
5 175 M
(        helpful in increasing experiential learning. \(Might have some theoretical basis in Mis) s
5 164 M
(take bound in computational learning theory.) s
5 153 M
(        Following formalises how a boolean function is learnt incrementally from a dataset ove) s
5 142 M
(r time by making mistakes and correcting them\)) s
5 120 M
(        dE/dt = kME) s
5 109 M
(        => dE = kME.dt) s
5 98 M
(        => dE/E = kM.dt) s
5 87 M
(        => log E = kMt + c) s
5 76 M
(        => E = e^\(kMt+c\)) s
5 65 M
(        => E = e^c * e^\(kMt\)) s
5 54 M
(        => Experience is exponentially related to talent/merit/fitness) s
5 43 M
(        => People with high natural ability amass same experience in less time compared to peo) s
5 32 M
(ple with low merit) s
5 21 M
(At time t=0, E = e^c which is equal to natural ability/merit/fitness M of a social profile ver) s
5 10 M
(tex in Bianconi-Barabasi network model.) s
_R
S
%%Page: (260) 260
%%BeginPageSetup
_S
18 36 translate
/pagenum 260 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (260) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Therefore, E = M*e^\(kMt\). At t=0, experience equals merit and grows exponentially over time. B) s
5 681 M
(ut how to measure the fitness of a social profile for a human in terms of energy? What is the ) s
5 670 M
(energy of a human social profile? Low energy syntactically implies low entropy and less chaoti) s
5 659 M
(c nature of a profile. But real-life social profiles with high entropy do attract huge links. ) s
5 648 M
(Previous derivation assumes natural talent is defined in terms of numeric quantification of cr) s
5 637 M
(edentials \(marks/grades/awards/publications/IQ/achievements\) which is insufficient. For human ) s
5 626 M
(resource analytics, sampling experience at each tenure change \(academic/work\) gets a snap of e) s
5 615 M
(xperience at that time. Usually experience is measured linearly in time in academics/industrie) s
5 604 M
(s often overlooking merit, but previous equation changes that notion and implies experience ex) s
5 593 M
(ponentially increases with time as a function of intrinsic merit. Also previous differential e) s
5 582 M
(quation is a very naive definition of experience vs talent - adding more variables could make ) s
5 571 M
(it reflect reality.) s
5 560 M
(438.4 Bose-Einstein Condensation in Complex Networks - [Bianconi-Barabasi] - Physical Review L) s
5 549 M
(etters - http://barabasi.com/f/91.pdf) s
5 538 M
(438.5 PAFit - Joint estimation of preferential attachment and node fitness in growing complex ) s
5 527 M
(networks - [Thong Pham, Paul Sheridan & Hidetoshi Shimodaira] - https://www.nature.com/article) s
5 516 M
(s/srep32558 - factors determining node fitness in facebook graph - "...A directed edge in the ) s
5 505 M
(network represents a post from one user to another user\342\\200\\231s wall. One might speculate th) s
5 494 M
(at the following factors are important for a user to attract posts to his/her wall: a\) How muc) s
5 483 M
(h information about his/her life that he/she publicises: his/her birthday, engagement, promoti) s
5 472 M
(on, etc. b\) How influential and/or authoritative his/her own posts are which call for further ) s
5 461 M
(discussions from other people; and c\) how responsive the user is in responding to existing wal) s
5 450 M
(l posts. We then can hypothesize fitness \316\267i to be a combination of these three factors averag) s
5 439 M
(ed over time ...") s
5 428 M
(438.6 3-Uniform Hypergraphs/Triple System and Langford Pairs - [Donald Knuth] - The Art of Com) s
5 417 M
(puter Programming: Combinatorial Algorithms - Volume 4 - Pages 3,33 - Langford Pairs are combi) s
5 406 M
(natorial objects created by all possible ways of spacing each of 2n elements in a set having n) s
5 395 M
( pairs of identical twins so that each pair is spaced equal to its numeric value. In the conte) s
5 384 M
(xt of ThoughtNet, langford pairs can be created by embedding any two pair of class stack verti) s
5 373 M
(ces having identical number of hyperedges passing through them on a plane, separated by distan) s
5 362 M
(ce equal to number of edges traversing the two hypervertices. 3-Uniform Hypergraphs or Triple ) s
5 351 M
(System can be represented by an equivalent bipartite graph, incidence matrix and a boolean for) s
5 340 M
(mula.) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(-----------------------------------------------) s
5 296 M
(439. \(FEATURE-DONE\) Scheduler Analytics for VIRGO Linux Kernel - Commits - 31 July 2017 and 1,) s
5 285 M
(3 August 2017) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(-----------------------------------------------) s
5 252 M
(\(*\) As mentioned in NeuronRain FAQ at http://neuronrain-documentation.readthedocs.io/en/latest) s
5 241 M
(/, analytics driven linux kernel scheduler) s
5 230 M
(is the ideal application of machine learning within kernel. There are two options to go about:) s
5 219 M
(\(*\) First is Application Layer Scheduling Analytics in which a python code for example, learns) s
5 208 M
( from linux kernel logs, /proc/<pid>/schedstat) s
5 197 M
(and /proc/<pid>/sched data of CFS and exports key-value pairs on how to prioritize processes' ) s
5 186 M
(nice values in /etc/kernel_analytics.conf. This config file is read by VIRGO Linux kernel_anal) s
5 175 M
(ytics module and exported kernelwide. Existing kernel scheduler code might require slight chan) s
5 164 M
(ges to read these variables periodically and change process priorities. There have been past e) s
5 153 M
(fforts like Scheduler Activations which delink userspace threads and kernel threads by multipl) s
5 142 M
(exing M user threads onto N kernel threads and focus is on scheduling the userspace threads on) s
5 131 M
( kernel threads. But Linux kernel does not have support for Scheduler Activation and has 1:1 u) s
5 120 M
(ser:kernel thread ratio i.e there is no application thread library having scheduling support. ) s
5 109 M
(This option would be ideally suited for prioritizing userspace threads by deep-learning from p) s
5 98 M
(rocess perf data.) s
5 87 M
(\(*\) Second is Kernel Layer Scheduling Analytics in which kernel has to make upcalls to userspa) s
5 76 M
(ce machine learning functions. This is quite impractical because kernel overhead and latency o) s
5 65 M
(f scheduling increases and upcalls are usually discouraged for heavy processing. Moreover this) s
5 54 M
( adds a theoretical circularity too - upcall is made on the context of present kernel thread a) s
5 43 M
(nd who decides the priority of the upcall? This requires complete kernel level machine learnin) s
5 32 M
(g implementation \(e.g Kernel has an independent replicated implementation of String library an) s
5 21 M
(d does not depend on userspace GCC libraries\). Major hurdle to implement machine learning in k) s
5 10 M
(ernel is the lack of support for C in machine learning as most of the packages are in C++/Java) s
_R
S
%%Page: (261) 261
%%BeginPageSetup
_S
18 36 translate
/pagenum 261 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (261) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(/Python - e.g. how would Apache Spark cloud processing fit with in kernel?. Computational comp) s
5 681 M
(lexity of this scheduling is O\(n*m\) where m is the time spent per upcall in process priority c) s
5 670 M
(lassification by machine learning and n is the number of processes. This implies every process) s
5 659 M
( would have significant waiting time in queue and throughput takes a hit. Also this requires s) s
5 648 M
(ignificant rewrite of kernel scheduler to setup upcalls, do userspace execve\(\), redirect stand) s
5 637 M
(ard error/output \(fd_install\) for logging userspace analytics etc., Userspace upcalls are alre) s
5 626 M
(ady supported in VIRGO linux CPU/Memory/FileSystem kernel modules for executing user libraries) s
5 615 M
( from kernel. If upcall instead writes to /etc/kernel_analytics.conf file than communicating t) s
5 604 M
(o kernel \(using NetLink for example\), this option is same as first one.) s
5 593 M
(\(*\) Third option is to implement a separate kernel module with access to process waiting queue) s
5 582 M
( which loops in a kernel thread and does upcalls to userspace to classify the process prioriti) s
5 571 M
(es and notifies the scheduler on process priorities change asynchronously. But this option is ) s
5 560 M
(same as first except it is done in kernel with upcalls and overkill while first is a downcall.) s
5 538 M
(First option is chosen for time being because:) s
5 527 M
(        - it is top-down) s
5 516 M
(        - it does not interfere in existing scheduler code flow much) s
5 505 M
(        - minimal code change is required in kernel scheduler e.g as a KConfig build parameter) s
5 494 M
( and can be #ifdef-ed) s
5 483 M
(        - key-value pair variable mechanism is quite flexible and broadcast kernelwide) s
5 472 M
(        - any interested module in kernel can make use of them not just scheduler) s
5 461 M
(        - it is asynchronous while kernel layer scheduling is synchronous \(scheduler has to wa) s
5 450 M
(it to know priority for each process from userspace code\)) s
5 439 M
(        - second and third options are circuitous solutions compared to first one.) s
5 428 M
(        - Languages other than C are not preferable in kernel \(http://harmful.cat-v.org/softwa) s
5 417 M
(re/c++/linus\)) s
5 406 M
(        - Key-Value pair protocol between userspace and kernelspace effectively tames language) s
5 395 M
( barriers between user and kernel spaces indirectly i.e this protocol is atleast as efficient ) s
5 384 M
(as an inlined kernel code equivalent doing an upcall and computing the same pair ) s
5 373 M
(        - Key-Value storage can also exist on a cloud too not necessarily in /etc/kernel_analy) s
5 362 M
(tics.conf file thus transforming VIRGO kernel into a practical dynamic cloud OS kernel) s
5 351 M
(        - first option is more suited for realtime kernels) s
5 329 M
(############################################################################################) s
5 318 M
(#Scheduler Analytics for Linux Kernel:) s
5 307 M
(#=====================================) s
5 296 M
(# Following DeepLearning models learn from process perf variables - CPU, Memory, Context switc) s
5 285 M
(hes, Number of Threads and Nice data) s
5 274 M
(# for each process id retrieved by psutil process iterator - BackPropagation, RecurrentLSTM) s
5 263 M
(# RecurrentGRU and ConvolutionNetwork models learn software analytics neural networks from psu) s
5 252 M
(til process performance info) s
5 241 M
(# Key value pairs learnt from these can be read by Linux Kernel Scheduler or anything else) s
5 230 M
(# and suitably acted upon for changing the process priorities dynamically. Any kernel module c) s
5 219 M
(an make an upcall to this userspace) s
5 208 M
(# executable and dump the key-value pairs in /etc/kernel_analytics.conf. Presently the impleme) s
5 197 M
(ntation is quite primitive and) s
5 186 M
(# classifies the output layer of neural network into "Highest, Higher, High, Normal, Medium, L) s
5 175 M
(ow, Lower and Lowest" priority classes) s
5 164 M
(# in the format: <pid#deeplearningalgorithm>=<scheduled_priority_class>. Number of iterations ) s
5 153 M
(has been set to 10 for all deep learning networks.) s
5 142 M
(############################################################################################) s
5 120 M
(Following is a simulation of how the key-value pair for repriotization from Scheduler Analytic) s
5 109 M
(s could affect the kernel scheduler:) s
5 98 M
(        \(*\) Linux kernel scheduler has the notion of jiffies - HZ - set of clock ticks - for t) s
5 87 M
(ime slicing processes) s
5 76 M
(        \(*\) Each priority class has a red-black binary search tree based queue - deletion is O) s
5 65 M
(\(1\) and insertion is O\(logN\) after rebalancing such that longest root to leaf path is not more) s
5 54 M
( than twice longer than that of least root to leaf path) s
5 43 M
(        \(*\) On receipt of repriotization analytics, kernel_analytics exports it kernelwide, sc) s
5 32 M
(heduler reads this <pid>=<new_priority> key-value pair and removes <pid> from <old_priority> r) s
5 21 M
(ed-black tree and inserts in <new_priority> red-black tree.) s
5 10 M
(        \(*\) Thus multiple red-black trees make a trade-off and rebalance periodically with no ) s
_R
S
%%Page: (262) 262
%%BeginPageSetup
_S
18 36 translate
/pagenum 262 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (262) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(manual nice interventions - this deletion and insertion is O\(logN\)) s
5 681 M
(        \(*\) Every repriotization is therefore O\(logN\).) s
5 670 M
(        \(*\) In realtime bigdata processing of heavy load, priorities can change quite frequent) s
5 659 M
(ly. For m reprioritizations, scheduler incurs O\(m*logN\) time. But m can have maximum value equ) s
5 648 M
(al to total number of processes and thus a multiple of N \(number of processes per priority cla) s
5 637 M
(ss\) and thus effective worstcase cost is O\(NlogN\)) s
5 615 M
(References:) s
5 604 M
(-----------) s
5 593 M
(439.1 Scheduler Activations - Effective Kernel Support for the user level management of parall) s
5 582 M
(elism - http://dl.acm.org/citation.cfm?id=121151) s
5 571 M
(439.2 Controlling Kernel Thread Scheduling From Userspace - http://citeseerx.ist.psu.edu/viewd) s
5 560 M
(oc/download?doi=10.1.1.605.3571&rep=rep1&type=pdf) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(------------------------------------------------) s
5 516 M
(440. \(THEORY\) Social Networks, Money Flow Markets, Pricing Equilibrium, Centrality, Intrinsic ) s
5 505 M
(versus Perceptive Valuations - 1 August 2017 and) s
5 494 M
(11 August 2017) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(------------------------------------------------) s
5 461 M
(Flow of money in a network of buyers and sellers and pricing have been described in KingCobra ) s
5 450 M
(design document - https://github.com/shrinivaasanka/kingcobra-github-code/blob/master/KingCobr) s
5 439 M
(aDesignNotes.txt. Problem of relating intrinsic merit/fitness of an entity to perceptive judge) s
5 428 M
(ments is essentially reducible to the problem of market equilibrium as below:) s
5 417 M
(In a flow market digraph,there is a directed edge from a vertex b to vertex s of weight p wher) s
5 406 M
(e b is a buyer, s is a seller and p is the price offered by buyer b for s. There can be multip) s
5 395 M
(le b\(i\) edges incoming for a seller s offering different prices and multiple sellers s\(i\) can ) s
5 384 M
(have incoming edges from a buyer b. Problem of determining fair price for seller s amounts to ) s
5 373 M
(finding objective intrinsic merit/fitness of goods/services of s while incoming buyer edges ar) s
5 362 M
(e perceptive subjective market values \(auction\). Treating this as a link graph and applying Ce) s
5 351 M
(ntrality measures like PageRank could identify most valued seller in terms of market perceptio) s
5 340 M
(n. Thus the problem of intrinsic merit versus perception is ubiquitous and is not just restric) s
5 329 M
(ted to internet\(text, audio-visuals\). Assuming Bose-Einstein Condensation in Flow Markets, fit) s
5 318 M
(ness/merit is measured by least energy.Note of caution is the term "least energy" has multiple) s
5 307 M
( meanings depending on context and cannot be literally taken as least entropy. In flow markets) s
5 296 M
(, least energy seller could be one with best marketing abilities, quality, technical knowhow, ) s
5 285 M
(qualifications etc.,) s
5 263 M
(In money flow markets, each buyer i is allocated a good/service j of x\(ij\) units with utility ) s
5 252 M
(u\(ij\) with price p\(j\). Objective is to maximimize the money weighted geometric mean of the pro) s
5 241 M
(duct of utilities for all buyers. This has to satisfy Karush-Kuhn-Tucker conditions of convex ) s
5 230 M
(program i.e this money weighted geometric mean is a convex function \(line connecting two point) s
5 219 M
(s on the graph of a function is always above the graph - epigraph is convex\) on a convex set \() s
5 208 M
(line connecting any two points in the set is within the set\) and optimized subject to KKT cond) s
5 197 M
(itions. Another algorithm is to construct a goods/services - buyers bipartite flow network wit) s
5 186 M
(h a source and sink. This network has edges weighted by prices from source to goods/services v) s
5 175 M
(ertices and edges weighted by money from buyers vertices to sink. Mincuts of this network dete) s
5 164 M
(rmine price equilibrium by maxflow algorithm.) s
5 142 M
(Previous example is mooted to invoke the striking parallels between buyer versus seller price ) s
5 131 M
(equilibrium and intrinsic merit versus perception equilibrium - Intrinsic value of a good/serv) s
5 120 M
(ice is immutable while buyers' price requirements for same good/service vary; Similarly intrin) s
5 109 M
(sic merit of an entity is immutable while perception of an entity is subjective. By replacing ) s
5 98 M
(price with merit in Convex Program and Maxflow algorithms, equilibrium state between intrinsic) s
5 87 M
( merit and perceived merit of a social profile vertex can be found. But still this does not le) s
5 76 M
(ad to absolute intrinsic merit.) s
5 54 M
(Convex Program for Market Equilibrium is defined as below:) s
5 43 M
(        Maximize u\(ij\)^e\(i\) where buyer i has money e\(i\) at disposal) s
5 32 M
(subject to:) s
5 21 M
(        Total happiness of a customer = Sigma\(u\(ij\)*x\(ij\)\) where u\(ij\) is the utility buyer i ) s
5 10 M
(gets from x\(ij\) units of good j) s
_R
S
%%Page: (263) 263
%%BeginPageSetup
_S
18 36 translate
/pagenum 263 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (263) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(Following maps a Market to Merit equilibrium:) s
5 670 M
(Intrinsic merit of a \(corresponds to Seller\) vertex is defined by a feature vector of merit va) s
5 659 M
(riables. Buyers are perceivers. Each perceiver has a pre-allocated total perceived merit which) s
5 648 M
( is divided amongst the perceived vertices. The Convex Program for Equilibrium between intrins) s
5 637 M
(ic merit and perceived merit is:) s
5 626 M
(        Maximize u\(ij\)^e\(i\) where perceiver i has total perceived merit e\(i\) at disposal and u) s
5 615 M
(\(ij\) is the utility perceiver i gets from merit variable j of a vertex) s
5 604 M
(subject to:) s
5 593 M
(        Total happiness of a perceiver = utility of i = Sigma\(u\(ij\)*x\(ij\)\) where u\(ij\) is the ) s
5 582 M
(utility perceiver i gets from x\(ij\) units of merit variable j of a vertex) s
5 571 M
(        and p\(j\) is the equilibrium perceived merit of a variable j) s
5 560 M
(Solving the previous convex program results in an optimal merit vector \(set of p\(j\)'s\) and wei) s
5 549 M
(ghts of merit variables \(x\(j\)'s\) which satisfies both perceiver and perceived.) s
5 527 M
(This equilibrium is closely related to Nash Bargaining Problem which postulates existence of a) s
5 516 M
(n agreement and disagreement point \(a,b\) in a set X in R^2 involving two players where a and b) s
5 505 M
( are utilities of the two players. Nash function of a point \(a,b\) is the maximum a*b. In the c) s
5 494 M
(ontext of merit equilibrium, the equilibrium point \(a,b\) is in optimum distance between intrin) s
5 483 M
(sic merit and perceived merit and maximizes happiness utility of both perceiver and the percei) s
5 472 M
(ved.) s
5 450 M
(References:) s
5 439 M
(-----------) s
5 428 M
(440.1 Algorithmic Game Theory - Chapter 5 and Chapter 15 - Existence of Flow Markets Equilibri) s
5 417 M
(um and Nash Bargaining Problem - Fisher and Eisenberg-Gale Convex Program and Network MaxFlow ) s
5 406 M
(algorithm - [Tim Roughgarden, Noam Nisan, Eva Tardos, Vijay Vazirani] - http://www.cambridge.o) s
5 395 M
(rg/download_file/909426) s
5 384 M
(440.2 New Convex Program for Fisher Market Equilibria - Convex Program Duality, Fisher Markets) s
5 373 M
(, and Nash Social Welfare -  [Richard Cole \342\\200\240 Nikhil R. Devanur \342\\200\241 Vasilis Gkatzelis \302) s
5 362 M
(\247 Kamal Jain \302\266 Tung Mai k Vijay V. Vazirani \342\\210\\227\342\\210\\227 Sadra Yazdanbod \342\\200\240\342\\200\240] ) s
5 351 M
(- https://arxiv.org/pdf/1609.06654.pdf - Previous Convex Geometric Mean Program is a Nash Soci) s
5 340 M
(al Welfare Function which is Spending Restricted. This article introduces an improved Convex P) s
5 329 M
(rogram with higher integrality gap. Integrality Gap is the measure of goodness of approximatio) s
5 318 M
(n and is based on Linear Program Relaxation. LP Relaxation waives the 0-1 integer programming ) s
5 307 M
(to range of reals in [0,1]. Approximate CNFSAT Solver implemented and described earlier in thi) s
5 296 M
(s document is also a relaxation but for system of equations. Integrality Gap of CNF MAXSAT sol) s
5 285 M
(ver found experimentally for few instances is ~100/98 = 1.02 though still it requires further ) s
5 274 M
(theoretical analysis to upperbound the error.) s
5 263 M
(440.3 Triangle Inequality based Christofides 1/2-approximation Algorithm for Travelling Salesm) s
5 252 M
(an Problem - Combinatorial Optimization - [Christos H.Papadimitriou,Kenneth Steiglitz] - Page ) s
5 241 M
(416) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(--------------------------------------------) s
5 197 M
(441. \(FEATURE-DONE\) Scheduler Analytics update - commits - 1 August 2017) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(--------------------------------------------) s
5 164 M
(\(*\) Updated AsFer Design Document) s
5 153 M
(\(*\) Updated python-src/software_analytics/DeepLearning_SchedulerAnalytics.py to write in /etc/) s
5 142 M
(kernel_analytics.conf) s
5 131 M
(\(*\) logs committed to testlogs/) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(-------------------------------------------) s
5 87 M
(442. \(FEATURE-DONE\) Graph Density \(Regularity Lemma\) and Bose-Einstein Fitness implementations) s
5 76 M
( - commits - 1 August 2017) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(-------------------------------------------) s
5 43 M
(\(*\) New intrinsic merit measures based on graph density \(regularity lemma\) and Bose-Einstein i) s
5 32 M
(ntrinsic fitness have been added as functions) s
5 21 M
(and invoked) s
5 10 M
(\(*\) logs have been committed to testlogs/) s
_R
S
%%Page: (264) 264
%%BeginPageSetup
_S
18 36 translate
/pagenum 264 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (264) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(--------------------------------------------) s
5 659 M
(443. \(THEORY\) Mistake bound learning\(MB\), Experience and Intrinsic merit, Social Network Analy) s
5 648 M
(tics - 2,3,11 August 2017 - related to 368, 438) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(--------------------------------------------) s
5 615 M
(Mistake bound learning, iteratively refines and converges from an initial hypothesis based on ) s
5 604 M
(mistakes. PAC learning is also a kind of mistake bound learning.  Previously described differe) s
5 593 M
(ntial equation relation between experience and intrinsic merit/fitness/natural talent can be t) s
5 582 M
(heoretically formalised as below:) s
5 560 M
(Let M be the intrinsic merit \(correctness\) of a boolean function hypothesised in the form of c) s
5 549 M
(onjunctions and disjunctions. From the derivation) s
5 538 M
(of experience\(E\) versus merit\(M\) as function of time\(t\):) s
5 527 M
(        dE/dt = kME) s
5 516 M
(        => dE = kME.dt) s
5 505 M
(        => dE/E = kM.dt) s
5 494 M
(        => log E = kMt + c) s
5 483 M
(        => E = e^\(kMt+c\)) s
5 472 M
(        => E = M*e^\(kMt\)) s
5 450 M
(If dE/dt is replaced by number of mistakes b1 made and corrected per time unit in MB model and) s
5 439 M
( E is replaced by total number of mistakes b2 made so far in hypothesis and corrected \(experie) s
5 428 M
(nce is function of this in human context\), learner's experiential learning converges in time t) s
5 417 M
( to some percentage error and number of mistakes done in time t , b2 = t*b1.) s
5 406 M
(        => E = M*e^\(kMt\)) s
5 395 M
(        => E = M*e^\(kM*b2/b1\)) s
5 384 M
(Previous expression for experience depends both on intrinsic merit and mistakes made which is ) s
5 373 M
(exactly required in human classification.) s
5 351 M
(Traditionally mistake bounds are used only in learning boolean functions. Generalizing it to a) s
5 340 M
(ny functions and humans creates a generic definition of merit and experience irrespective of t) s
5 329 M
(he entity involved. Assumption in the previous differential equation is delta increase in expe) s
5 318 M
(rience is proportional to existing experience and merit. Boolean function learning theory does) s
5 307 M
( not appear to have the concept of intrinsic merit or how learning accrued so far helps in fur) s
5 296 M
(ther learning which is quite essential for classifying humans based on merit+experience in soc) s
5 285 M
(ial networks and human resource analytics. In previous expression for mistake bounded experien) s
5 274 M
(ce, number of mistakes made b2 and b1 themselves could be a function of factors like IQ and EQ) s
5 263 M
(  e.g b1 = f\(IQ,EQ\) and b2 = g\(IQ,EQ\). Then experience becomes:) s
5 252 M
(        => E = M*e^\(kM*g\(IQ,EQ\)/f\(IQ,EQ\)\)) s
5 241 M
(If M=h\(IQ\):) s
5 230 M
(        => E = h\(IQ\)*e^\(k*h\(IQ\)*g\(IQ,EQ\)/f\(IQ,EQ\)\)) s
5 208 M
(It has to be mentioned here f is nothing but the first temporal derivative of g evaluated at t) s
5 197 M
(ime t i.e f = dg/dt.) s
5 186 M
(        => E = h\(IQ\)*e^\(k*h\(IQ\)*g\(IQ,EQ\)/g'\(IQ,EQ\)\)) s
5 164 M
(Alternatively, f and g can be substituted directly if known and integrable:) s
5 153 M
(        g'\(IQ,EQ\) = k*h\(IQ\)*g\(IQ,EQ\)) s
5 142 M
(        g'\(IQ,EQ\) = k*h\(IQ\)*g\(IQ,EQ\)) s
5 131 M
(        log g\(IQ,EQ\) = k*M*t + c) s
5 120 M
(        g\(IQ,EQ\) = h\(IQ\)*e^\(k*h\(IQ\)*t\)) s
5 98 M
(Curiously, function g which depends on EQ has no equivalent in RHS except time duration t and ) s
5 87 M
(a constant k. This is probably because time is measured in terms of mistakes in the integral a) s
5 76 M
(bove and EQ is function of mistakes. Intrinsic merit function M does not involve EQ because mi) s
5 65 M
(stakes alone are usually emotive in the context of social profiles \(bounded rationality\) and m) s
5 54 M
(erit must be independent of emotions and time. Previous definition of experience can be used a) s
5 43 M
(s a ranking metric for human social profiles as below for comparison of two humans after evalu) s
5 32 M
(ating h, g and g' for some time duration subject to disclaimer that follows:) s
5 21 M
(        g\(IQ1,EQ1\) = h\(IQ1\)*e^\(k*h\(IQ1\)*t1\)) s
5 10 M
(        g\(IQ2,EQ2\) = h\(IQ2\)*e^\(k*h\(IQ2\)*t2\)) s
_R
S
%%Page: (265) 265
%%BeginPageSetup
_S
18 36 translate
/pagenum 265 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (265) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Disclaimer: Previous model of merit based on IQ and EQ are purely presumptive and disputable b) s
5 681 M
(ecause of lack of well-defined Bose-Einstein "least energy" counterpart for human profiles.) s
5 659 M
(This model is quite generic and should apply to any computable function including boolean lear) s
5 648 M
(nt by mistake bounds. For boolean function learning, this model implies total number of mistak) s
5 637 M
(es corrected at time t \("experience"\) depends exponentially on learning time i.e if the mistak) s
5 626 M
(e bound learning algorithm is polynomial time in number of variables, number of mistakes corre) s
5 615 M
(cted is exponential in number of variables. For learning 3CNFs polynomial time mistake bound i) s
5 604 M
(n RHS implies exponential number of mistakes have been corrected \(function g\) in LHS but an ex) s
5 593 M
(isting result implies if polynomial time learning is possible for 3CNFs there is no polynomial) s
5 582 M
( time algorithm for SAT \(section 368\) \(But, isn't correcting exponential number of mistakes in) s
5 571 M
( polynomial time a nemesis of SETH?\).) s
5 549 M
(Mistakes in the social networks context are proportional to bounded rationality of the human s) s
5 538 M
(ocial profile vertices of the social network. Bounded rationality in turn arises by inability ) s
5 527 M
(of a human being to make 100% correct decision because of cognitive, psychological, emotional,) s
5 516 M
( time limitations. Decision taken is termed satisfactory than optimal and such suboptimal deci) s
5 505 M
(sion is called satisficing. Thus emotional quotient and bounded rationality are related. Measu) s
5 494 M
(ring emotional quotient \(intelligence+emotions\) than intelligence quotient \(intelligence alone) s
5 483 M
(\) in social network profiles is equivalent to quantifying the sentiments of social network twe) s
5 472 M
(ets/wallposts/likes etc.,) s
5 450 M
(Thus following equivalence is conspicuous: Emotional Quotient \(proportional to\) Bounded Ration) s
5 439 M
(ality \(proportional to\) Sentiment polarity of Social profile data e.g obtained by Sentiwordnet) s
5 428 M
( sentiment analysis. This is an approximate estimation of mistake-prone-ness and applies to de) s
5 417 M
(cision errors of voters in Condorcet Jury Theorem group decision circuit too.) s
5 395 M
(BackPropagation is a mistake bound deep-learning algorithm refining a perceptron by trial and ) s
5 384 M
(error iterations. Previous differential equation for experiential learning is equivalent to a ) s
5 373 M
(time-evolving recursive mistake correction tree described below:) s
5 362 M
(At time x, tree reaches level l\(x\). Each node in the tree is a corrected mistake and each mist) s
5 351 M
(ake corrected at level l\(x\) is subtree root for n corrected mistakes in level l\(x+1\). Thus eac) s
5 340 M
(h level l\(x\) of the learning tree is the set of mistakes made at time x. In the language of NC) s
5 329 M
(-PRAM  circuit families, each node is a PRAM processor correcting a mistake. After time durati) s
5 318 M
(on x, this learning tree has 2^x-1 nodes correcting exponential number of mistakes. In NC nota) s
5 307 M
(tion, if number of mistake correcting processors=2^x=n, depth of the circuit is O\(logn\) equal ) s
5 296 M
(to learning time x. This is a hypothetical parallel learning algorithm in non-uniform NC. This) s
5 285 M
( recursive mistake correction tree is nothing but a translation of differential equation dE/dt) s
5 274 M
(=kME. Outdegree of each vertex \(number of future mistakes corrected by a PRAM processor\) is de) s
5 263 M
(termined by merit M, and delta increase in learning is number of mistakes corrected at level l) s
5 252 M
(\(x\) after time x = M*2^\(l\(x\)\). This should apply to backpropagation weight update iterations b) s
5 241 M
(ecause each error term is a mistake. Perceptrons are in TC=AC=NC which is same as previous PRA) s
5 230 M
(M recursive learning.) s
5 208 M
(Caveat is the previous recursive mistake correction tree is not traditional bottom-up evaluati) s
5 197 M
(on circuit but is top-down based on heuristic: mistake corrected at time x helps correcting n ) s
5 186 M
(number of mistakes at time x+deltax inspired by a differential equation for experiential learn) s
5 175 M
(ing.It makes sense to define "least energy/fitness" of a social network profile vertex to be e) s
5 164 M
(qual to function g above thereby sufficiently weighing both merit and experiential learning. S) s
5 153 M
(ocial networks fall into two classes: Professional\(e.g LinkedIn/Stackoverflow/Quora/Academic C) s
5 142 M
(itation Networks\) and Personal\(e.g Facebook/Twitter/Instagram/Whatsapp\). Aforementioned defini) s
5 131 M
(tion of least energy as function of merit and experience applies only to Professional social n) s
5 120 M
(etworks. Stackoverflow is a special case of professional social profile - users up or down vot) s
5 109 M
(e answers to a question which is fame-driven and not merit-driven. Least energy in personal so) s
5 98 M
(cial networks is totally unrelated to merit and experience and should more or less quantify de) s
5 87 M
(finition of fitness in Facebook mentioned in 438.5 - profile having high nett positive emotive) s
5 76 M
( sentiment evaluated from wallposts/tweets/likes/replies/retweets. Personal social networks ar) s
5 65 M
(e replete with spam,chutzpah,trolls,expletives,emojis,satires etc., requiring parsing/filterin) s
5 54 M
(g in Sentiment Analysis. Reference 443.4 analyzes the Merit Versus Fame problem in academic ci) s
5 43 M
(tations which belongs to Professional social network category. In essence ranking humans on in) s
5 32 M
(trinsic merit is two-fold: 1\) Merit-Experience ranking 2\) Personal Emotive ranking. These two ) s
5 21 M
(rankings need not coincide and define intrinsic fitness/least energy of a person in two disjoi) s
5 10 M
(nt contexts. In literature, fitness/least energy of a social profile vertex is not a point val) s
_R
S
%%Page: (266) 266
%%BeginPageSetup
_S
18 36 translate
/pagenum 266 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (266) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ue but a probability distribution i.e probability of a vertex/person having an intrinsic merit) s
5 681 M
( random variable value. Let us assume that merit is defined as a vector of n dimensions as:) s
5 670 M
(        M=<m1,m2,m3,...,mn> where each mi is the weight for a merit variable) s
5 659 M
(For example, Probability distribution for merit/least energy/fitness can be defined as:) s
5 648 M
(        Pr\(M=mi\) = mi/|M| where |M| is the L1 norm of M) s
5 637 M
(        Sigma\(Pr\(M=mi\)\) = \(m1 + m2 + m3 + ... mn\) / |M| = 1) s
5 626 M
(Continuous Probability distribution is the polynomial passing through above merit weight point) s
5 615 M
(s.) s
5 593 M
(In generic sense, previous recursive mistake correction tree need not be a binary tree but a g) s
5 582 M
(raph: At any time point t, number of mistakes corrected by a social profile vertex thus far fo) s
5 571 M
(rms an evolving triangular region of experience E, and each corrected mistake vertex in this t) s
5 560 M
(riangle causes some mistake to be corrected in a future trapezoidal region dE in time interval) s
5 549 M
( \(t,t+dt\) adjoining this triangle E weighted by intrinsic merit M. This intuitively captures t) s
5 538 M
(he equation E = M*e^\(kMt\) \(dE/dt = kME\) and the paradigm "experience = learning from mistakes") s
5 516 M
(References:) s
5 505 M
(-----------) s
5 494 M
(443.1 Mistake bound learning - https://www.cs.utexas.edu/~klivans/lec1.ps - In this teacher/le) s
5 483 M
(arner model, learner iteratively refines hypothesis based on mistakes pointed out by teacher a) s
5 472 M
(nd number of mistakes are polynomially bounded.) s
5 461 M
(443.2 Learning quickly when irrelevant attributes abound - [Nick Littlestone] - http://citesee) s
5 450 M
(rx.ist.psu.edu/viewdoc/download?doi=10.1.1.130.9013&rep=rep1&type=pdf) s
5 439 M
(443.3 Bounded Rationality and Satisficing - https://en.wikipedia.org/wiki/Bounded_rationality) s
5 428 M
(443.4 Multiplex Networks with Intrinsic Fitness: Modeling the Merit-Fame Interplay via Latent ) s
5 417 M
(Layers - [Babak Fotouhi and Naghmeh Momeni] - https://arxiv.org/pdf/1506.04189.pdf - An exampl) s
5 406 M
(e of intrinsic merit versus fame in Academeic Citations graph - "...We consider a growing dire) s
5 395 M
(cted multiplex network that comprises two layers. Each node is assigned an intrinsic fitness, ) s
5 384 M
(which models its quality. The fitness of a node never changes. Each node belongs to two layers) s
5 373 M
(: a merit layer and a fame layer. In the former, fitness values are the sole drivers of the gr) s
5 362 M
(owth mechanism. In the fame layer, attachment is preferential, that is, the probability that a) s
5 351 M
( node receives a link from a newcomer is proportional to the total degree of that node, i.e., ) s
5 340 M
(the sum of its degrees in both layers. For example, in the case of citation networks, the inte) s
5 329 M
(rpretation of the model is as follows. Two distinct types of citations can be discerned.  The ) s
5 318 M
(first type\342\\200\\224the meritocratic type\342\\200\\224is when a scholar reads a paper, and cites it) s
5 307 M
( because of its content \(a citation which would be given regardless of the number of citations) s
5 296 M
( that paper already has\). Another type of citation is what we call fame-driven. A paper can be) s
5 285 M
(come trendy, or well-known in some literature \(particularly true for seminal papers which init) s
5 274 M
(iate a new subfield\), and many citations that it receives would be solely due to its fame\342\\200) s
5 263 M
(\\224i.e., current number of citations,...") s
5 252 M
(443.5 Relation between Intrinsic Merit of two vertices and probability of creating link betwee) s
5 241 M
(n them - Page 27 - Equation 3.1 - http://bura.brunel.ac.uk/bitstream/2438/10345/1/FulltextThes) s
5 230 M
(is.pdf - a new vertex is assumed to have an apriori fitness and probability of establishing co) s
5 219 M
(nnection between a new node and an existing node in social networks is weighted average of pro) s
5 208 M
(bability of new node creation and edge creation between new node and existing node. From this ) s
5 197 M
(edge probability an a posteriori fitness distribution can be derived for all vertices after a ) s
5 186 M
(stationary markov chain random walk.) s
5 175 M
(443.6 First to Market is not Everything: an Analysis of Preferential Attachment with Fitness -) s
5 164 M
( [Christian Borgs, Jennifer Chayes, Constantinos Daskalakis \342\\210\\227 Sebastien Roch \342\\200\240] -) s
5 153 M
( https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/First-to-Market-is-not-Ev) s
5 142 M
(erything-an-Analysis-of-Preferential-Attachment-with-Fitness.pdf - Polya Urn model of preferen) s
5 131 M
(tial attachment and Power law relation between degree of a vertex in networks and its intrinsi) s
5 120 M
(c fitness - "...A by-product of our technique is a precise characterization of the vertex dyna) s
5 109 M
(mics under preferential attachment with fitness. More specifically, if a vertex v has fitness ) s
5 98 M
(f, then our analysis implies that its degree dv\(t\) at time t scales as dv\(t\) \342\\210\274  t^\(c*f\) ,) s
5 87 M
( \(1\) where c is a global constant determined by the fitness distribution.  \(The details are om) s
5 76 M
(itted from this extended abstract.\) Hence, the logarithm of the degree of the vertices directl) s
5 65 M
(y reflects their quality. We note in passing that this could suggest new directions in the des) s
5 54 M
(ign of ranking or recommendation algorithms...". Roughly this implies, fame in social networks) s
5 43 M
( is exponentially related to merit. Previous experience-versus-merit temporal identity strikin) s
5 32 M
(gly coincides with this. Fame=dv\(t\)=t^\(cf\) can be rewritten as dv\(t\) = e^\(cf*logt\) which when ) s
5 21 M
(constrasted against Experience E = M*e^\(kMt\), yields E=f*e^\(cft\) setting fitness f= Merit M an) s
5 10 M
(d k=c. Similarity between degree of a vertex and experience by matching LHS of these 2 express) s
_R
S
%%Page: (267) 267
%%BeginPageSetup
_S
18 36 translate
/pagenum 267 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (267) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ions is obvious i.e experience of vertex is proportional to its adjacency. This is intuitive b) s
5 681 M
(ecause experience is gained after interacting with other vertices and correcting mistakes whil) s
5 670 M
(e judging them. Alternatively, Experiential Learning E can be defined in terms of time evolvin) s
5 659 M
(g degree of vertex :) s
5 648 M
(        log\(dv\(t\)\) = cf*logt) s
5 637 M
(        f=log\(dv\(t\)\)/clog\(t\)) s
5 626 M
(        Since f=M, E = M*e^\(kMt\) = log\(dv\(t\)\) * e^\(klog\(dv\(t\)\)*t/clogt\) / clogt) s
5 615 M
(443.7 Degree distribution and Intrinsic Fitness - https://www.cs.upc.edu/~CSN/slides/08network) s
5 604 M
(_dynamics.pdf - "... Consider f \(xi , xj\) = \(xi*xj\)/x*M\)^MM where x\(M\) is the largest value of) s
5 593 M
( x in the network. Then the mean degree of a node of fitness x is k\(x\) = nx/x\(M\)^2 * integral\() s
5 582 M
(0,\342\\210\\236\) [y\317\\201\(y\)dy] = N<x>*x/x\(M\)^2 ... " - Expected Degree of vertex and Fitness of ve) s
5 571 M
(rtex are thus related - Expectation of Fitness PDF is obtained by integral.) s
5 560 M
(443.8 Ghadge et al Model of Intrinsic Fitness of a vertex - https://www.cs.umb.edu/~duc/public) s
5 549 M
(ations/papers/ijpeds10.pdf - A statistical construction of power-law networks - [Shilpa Ghadge) s
5 538 M
(a, Timothy Killingback, Bala Sundaram and Duc A. Trana] - "... To motivate the definition of o) s
5 527 M
(ur procedure, we observe that in most real-world networks the nodes will have an attribute or ) s
5 516 M
(an associated quantity that represents, in some way, the likelihood that other nodes in the ne) s
5 505 M
(twork will connect to them. For example, in a citation network \(see, e.g. [22]\), the different) s
5 494 M
( nodes \(i.e. papers\) will have different propensities to attract links \(i.e. citations\). The v) s
5 483 M
(arious factors that contribute to the likelihood of a paper being cited could include the prom) s
5 472 M
(inence of the author\(s\), the importance of the journal in which it is published, the apparent ) s
5 461 M
(scientific merit of the work, the timeliness of the ideas contained in the paper, etc. Moreove) s
5 450 M
(r, it is plausible that the overall quantity that determines the propensity of a paper to be c) s
5 439 M
(ited depends essentially multiplicatively on such various factors. The multiplicative nature i) s
5 428 M
(s likely in this case since if one or two of the factors happen to be very small, then the ove) s
5 417 M
(rall likelihood of a paper being cited is often also small, even when other factors are not sm) s
5 406 M
(all.  The case of Mendel\342\\200\\231s work on genetics constitutes an exemplar of this \342\\200\\223 ) s
5 395 M
(an unknown author and an obscure journal were enough to bury a fundamentally important scienti) s
5 384 M
(fic paper.  Motivated by this and the other examples, we consider it reasonable that in many c) s
5 373 M
(omplex networks each node will have associated to it a quantity, which represents the property) s
5 362 M
( of the node to attract links, and this quantity will be formed multiplicatively from a number) s
5 351 M
( of factors. That is, to any node i in the network there is associated a non-negative real num) s
5 340 M
(ber Fi , which is called the fitness of node i, and which is of the form Fi = product\(fl\) ,l=1) s
5 329 M
( to L where each fl is non-negative and real. ..." - this multiplicative intrinsic merit is ma) s
5 318 M
(pped to summation of logarithms of merit variables. Central Limit Theorem implies summation of) s
5 307 M
( random variables converge to a Gaussian irrespective of values of merit variables. Merit vari) s
5 296 M
(ables are dimesional projections of merit vector defined above. CLT also implies merit \(social) s
5 285 M
( or linguistic\) converges to a Gaussian as it were in real life - tails are entities with high) s
5 274 M
(est and lowest merit and modal is of maximum merit. Interestingly, this prohibits multimodal. ) s
5 263 M
(It has to be noted here Recursive Gloss Overlap algorithm  computes the intrinsic merit of a t) s
5 252 M
(ext as a product of graph complexity merit variables \(Section 4.6 of https://arxiv.org/abs/100) s
5 241 M
(6.4458, Section 5.6 of https://tac.nist.gov//publications/2010/participant.papers/CMI_IIT.proc) s
5 230 M
(eedings.pdf\). Recursive Gloss Overlap graph intrinsic merit is indeed a mapping of social netw) s
5 219 M
(ork intrinsic fitness to graph representation of texts - socially networked humans are replace) s
5 208 M
(d by hyperlinked texts.) s
5 197 M
(443.9 Vertex Intrinsic Fitness in Social Networks - [Servedio,Caldarelli] - https://arxiv.org/) s
5 186 M
(pdf/cond-mat/0309659.pdf) s
5 175 M
(443.10 Bibliography listed in Social Networking: Mining, Visualization and Security - [Mrutyun) s
5 164 M
(jaya Panda, Satchidanda Dehuri, Gi-Nam Wang] - https://books.google.co.in/books?id=5-W5BQAAQBA) s
5 153 M
(J&pg=PA42&lpg=PA42&dq=intrinsic+fitness+social+network&source=bl&ots=KD2lkaUq9Q&sig=6WmEYptNmn) s
5 142 M
(z4X2Y4qrQHJIRpsHk&hl=en&sa=X&ved=0ahUKEwi177OJ7dHWAhUBtY8KHZ9hBPcQ6AEITDAH#v=onepage&q=intrins) s
5 131 M
(ic%20fitness%20social%20network&f=false) s
5 120 M
(443.11 Vertex Fitness defined in terms of Unfitness - Network growth models: A behavioural bas) s
5 109 M
(is for attachment proportional to fitness - [Michael Bell* , Supun Perera, Mahendrarajah Pirav) s
5 98 M
(eenan, Michiel Bliemer, Tanya Latty, Chris Reid] - https://arxiv.org/pdf/1702.04046.pdf) s
5 87 M
(443.12 A \316\272-deformed Model of Growing Complex Networks with Fitness - [Massimo Stella , Markus) s
5 76 M
( Brede] - https://arxiv.org/pdf/1404.3276.pdf - Generalizes the Bianconi-Barabasi Bose-Einstei) s
5 65 M
(n Condensation Least Energy Intrinsic Fitness of a vertex - https://arxiv.org/pdf/1404.3276.pd) s
5 54 M
(f) s
5 43 M
(443.13 Various Intrinsic Fitness Models - Barabasi-Albert, Barabasi-Bianconi, Ghadge Log Norma) s
5 32 M
(l Fitness Attachment, Caldarelli Fitness - https://www.cs.umb.edu/~duc/www/research/publicatio) s
5 21 M
(ns/papers/bookchapter_fitness_models.pdf - Of these Ghadge LNFA multiplicative intrinsic fitne) s
5 10 M
(ss has close resemblance to Recursive Gloss Overlap Intrinsic Merit and Recursive Lambda Funct) s
_R
S
%%Page: (268) 268
%%BeginPageSetup
_S
18 36 translate
/pagenum 268 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (268) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ion Growth Graph Tensor Neuron Network Intrinsic Merit which are both multiplicative and addit) s
5 681 M
(ive.) s
5 670 M
( ) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(----------------------------------------) s
5 637 M
(444. \(FEATURE-DONE\) Scheduler Analytics Update - Commits - 10 August 2017) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(----------------------------------------) s
5 604 M
(\(*\) There is a problem in defining expected priorities in BackPropagation Neural Network outpu) s
5 593 M
(t layer. This is necessary for) s
5 582 M
(weight update to happen iteratively and to quantify error between expected and actual neural n) s
5 571 M
(etwork output) s
5 560 M
(\(*\) Output layer of BackPropagation is an indicator of process priority learnt by the perceptr) s
5 549 M
(on.) s
5 538 M
(\(*\) Previously expected priorities were hardcoded. This has been changed as below:) s
5 527 M
(        \(*\) Set of processes currently running are clustered and stored in an input JSON file) s
5 516 M
(        \(*\) This JSON dictionary has key-value pairs mapping a process class to its apriori ex) s
5 505 M
(pected priority) s
5 494 M
(        \(*\) Scheduler Analytics loads this JSON and looks up the expected priority for each pr) s
5 483 M
(ocess executable by its process class) s
5 472 M
(        \(*\) Presently process class is just a substring of the executable name) s
5 461 M
(        \(*\) BackPropagation does string match of this process class to executable name and fin) s
5 450 M
(ds the expected priority from JSON dict) s
5 439 M
(        \(*\) BackPropagation iteration updates the weights of all 3 layers) s
5 428 M
(\(*\) Defining apriori class of a process is subjective and instead of substring of executable, ) s
5 417 M
(an independent clustering algorithm having a) s
5 406 M
(suitable distance function can be used to write the JSON classification of processes. For exam) s
5 395 M
(ple, unix process groups are numerical classes of) s
5 384 M
( processes.) s
5 373 M
(\(*\) Previous generation of JSON classes for processes and backpropagation weight update iterat) s
5 362 M
(ion is the first phase of analytics.) s
5 351 M
(\(*\) In the second phase, weight-updated BackPropagation Neural Network takes as input runtime ) s
5 340 M
(process statistics \(CPU, Memory and Context Switches\)) s
5 329 M
(to predict the actual priority of a process belonging to the apriori class.) s
5 318 M
(\(*\) This is a depth 2 tree evaluation:) s
5 307 M
(        Static - apriori expected class of a process and BackPropagation iteration) s
5 296 M
(        Dynamic - fine grained priority of a process within the previous static class by evalu) s
5 285 M
(ating the multilayer neural network) s
5 263 M
(Presently, input variables are per process CPU percentage, Memory percentage and ratio of invo) s
5 252 M
(luntary context switches to total context switches. Involuntary context switches are usually n) s
5 241 M
(umber of pre-emptions by the scheduler on time-slice expiry and Voluntary context switches are) s
5 230 M
( number of system call and I/O pre-emptions.) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(--------------------------------------------) s
5 186 M
(445.\(FEATURE-DONE\) Celestial Pattern Mining Update - specific to NeuronRain Research in Source) s
5 175 M
(Forge repositories - recreated Sequence Mined Rules - Commits - 22 August 2017) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(--------------------------------------------) s
5 142 M
(\(*\) Added a documentation text file asfer-docs/NeuronRain_Research_Celestial_Pattern_Mining.tx) s
5 131 M
(t describing how astronomical pattern) s
5 120 M
(mining is done and code involved therein.) s
5 109 M
(    ) s
5 98 M
(\(*\) In python-src/autogen_classifier_dataset/MaitreyaToEncHoroClassified.py upgraded Maitreya') s
5 87 M
(s Dreams \(http://www.saravali.de/\)) s
5 76 M
(ephemeris text client version to 7.1.1) s
5 65 M
(   ) s
5 54 M
(\(*\) Created separate string encoded astronomical data files for Earthquakes\(USGS 100 year eart) s
5 43 M
(hquake dataset\) and) s
5 32 M
(Storms\(NOAA 100 year HURDAT2 dataset\) Datasets from python-src/autogen_classifier_dataset/Mait) s
5 21 M
(reyaToEncHoroClassified.py) s
5 10 M
(\(zodiacal does not have ascendant, while ascrelative is rotated string relative to ascendant. ) s
_R
S
%%Page: (269) 269
%%BeginPageSetup
_S
18 36 translate
/pagenum 269 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (269) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Ascendant is defined astronomically as the) s
5 681 M
( degree of the zodiac sign rising at the time of an event in eastern horizon\)) s
5 670 M
(    ) s
5 659 M
(\(*\) Executed python-src/SequenceMining.py on these 2 datasets. The results have been written t) s
5 648 M
(o python-src/MinedClassAssociationRules.txt) s
5 637 M
(    ) s
5 626 M
(\(*\) python-src/autogen_classifier_dataset/asfer_dataset_segregator.sh has updated asfer relati) s
5 615 M
(ve location) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(---------------------------------------------) s
5 571 M
(446. \(FEATURE-DONE\) Celestial Data Pattern Mining - Updates to autogen_classifier_dataset pre-) s
5 560 M
(processing and classification of datasets - 23 August 2017) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(---------------------------------------------) s
5 527 M
(\(*\) An 8 year old lurking bug in cpp-src/NaiveBayesClassifier.cpp has been resolved.It was cau) s
5 516 M
(sing a null class to be returned after) s
5 505 M
(bayesian argmax\(\) computation.) s
5 494 M
(\(*\) Lot of new articles on earthquakes and hurricanes have been added as training dataset for ) s
5 483 M
(NaiveBayesian Classifier.These articles also) s
5 472 M
(have lot of research information on predicting hurricanes and earthquakes) s
5 461 M
(\(*\) python-src/autogen_classifier_dataset/AsferClassifierPreproc.py has been updated to includ) s
5 450 M
(e new articles in training data for NaiveBayesian) s
5 439 M
(\(*\) words.txt,word-frequency.txt,training-set.txt,topics.txt,test-set.txt have been re-created) s
5 428 M
( by executing python-src/autogen_classifier_dataset/AsferClassifierPreproc.py) s
5 417 M
(\(*\) Datasets are classified into python-src/autogen_classifier_dataset/EventClassDataSet_Earth) s
5 406 M
(quakes.txt and python-src/autogen_classifier_dataset/EventClassDataSet_Storms.txt by executing) s
5 395 M
( asfer_dataset_segregator.sh) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(-----------------------------------------------) s
5 351 M
(447. \(FEATURE-DONE\) Updated Ephemeris Search Script - Commits - 24 August 2017) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(-----------------------------------------------) s
5 318 M
(Updated mined class association rule parsing in python-src/MaitreyaEncHoro_RuleSearch.py) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-----------------------------------------------) s
5 274 M
(448. \(FEATURE-DONE\) Approximate CNFSAT Solver update - SciPy Sparse - 28 August 2017) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(-----------------------------------------------) s
5 241 M
(\(*\) imported scipy.sparse.linalg least squares function lsqr\(\).) s
5 230 M
(\(*\) Number of clauses and variables set to 18 each.) s
5 219 M
(\(*\) After 673 iterations of Random 3CNFs following satisfied clauses data were observed:) s
5 208 M
(Percentage of CNFs satisfied so far: 58.7537091988) s
5 197 M
(Average Percentage of Clauses per CNF satisfied: 97.0161556215) s
5 175 M
(From LLL, If p < 1/[e\(d+1\)] is the probability of an event \(not satisfying a clause\) :) s
5 164 M
(Probability that clause is satisfied: 1-p > \(1-1/[e\(d+1\)]\)) s
5 153 M
(Probability that all of the clauses are satisfied > \(1-1/[e\(d+1\)]\)^\(d+1\) \(for d+1 clauses\)) s
5 142 M
(Probability that some of the clauses are satisfied < 1-\(1-1/[e\(d+1\)]\)^\(d+1\)) s
5 120 M
(If all clauses overlap:) s
5 109 M
(In previous example d+1 = 18 and thus probability that all of the clauses are satisified for a) s
5 98 M
(ny random CNF is :) s
5 87 M
(\(1-1/[e\(18\)]\)^\(18\)  > ~68.96%) s
5 76 M
(and probability that some but not all of the clauses being satisified for any random CNF is:) s
5 65 M
(1-\(1-1/[e\(18\)]\)^\(18\)  < ~31.043%) s
5 43 M
(If none of the clauses overlap:) s
5 32 M
(d=0 and probability that all the clauses are satisfied  \(1-1/e\) > ~63.21%) s
5 21 M
(and probability that some but not all of the clauses being satisified for any random CNF is  <) s
5 10 M
( ~36.79%) s
_R
S
%%Page: (270) 270
%%BeginPageSetup
_S
18 36 translate
/pagenum 270 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (270) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(-----------------------------------------------) s
5 659 M
(449. \(THEORY\) Analysis of Error Upperbound for Approximate CNFSAT Solver based on Lovasz Local) s
5 648 M
( Lemma clause dependency digraph - 29 August 2017) s
5 637 M
(,30 August 2017) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(-----------------------------------------------) s
5 604 M
(Probability of a clause being not satisfied from Lovasz Local Lemma:) s
5 593 M
(        p < 1/\(e\(d+1\)\)) s
5 582 M
(Probability of a clause being satisfied:) s
5 571 M
(        1-p > 1 - 1/\(e\(d+1\)\)) s
5 560 M
(Probability of all n clauses being satisfied \(ExactSAT\):) s
5 549 M
(        \(1-p\)^n > [1 - 1/\(e\(d+1\)\)]^n) s
5 538 M
(Probability of some or none of the clauses being satisfied:) s
5 527 M
(        1-\(1-p\)^n < 1 - [1 - 1/\(e\(d+1\)\)]^n) s
5 516 M
(If there are no overlaps, d=0:) s
5 505 M
(        Probability of all n clauses being satisfied = \(1-p\)^n > [1 - 1/e]^n = [1 - 1/e]^n) s
5 494 M
(        Probability of some or none of the clauses being satisfied = 1 - \(1-p\)^n < 1 - [1 - 1/) s
5 483 M
(e]^n) s
5 461 M
(Probability of atleast k of n clauses being satisfied:) s
5 450 M
(        Pr[#SATclauses >= k] = Pr[#SATclauses = k] + Pr[#SATclauses = k+1] + Pr[#SATclauses = ) s
5 439 M
(k+2] + ... + Pr[#SATclauses = n]) s
5 417 M
(        = \(1-p\)^k + \(1-p\)^\(k+1\) + ... + \(1-p\)^n) s
5 395 M
(if q = 1-p:) s
5 384 M
(        = q^k + q^\(k+1\) + ... + q^n) s
5 373 M
(        = q^k * \(1 + q + q^2 + ... + q^\(n-k\)\)  [Geometric series]) s
5 362 M
(        = q^k \(1 - q^\(n-k+1\)\) / \(1-q\)) s
5 351 M
(But from LLL, p < 1/e\(d+1\)) s
5 340 M
(        q = 1 - p > \(ed+e-1\)/\(ed+e\) ) s
5 318 M
(Substituting for q:) s
5 307 M
(        [\(ed+e-1\)/\(ed+e\)]^k [1 - [\(ed+e-1\)/\(ed+e\)]^\(n-k+1\)]) s
5 296 M
(        ---------------------------------------) s
5 285 M
(                1 - [\(ed+e-1\)/\(ed+e\)]) s
5 263 M
(#################################################################) s
5 252 M
(#Probability of atleast k of n clauses being satisfied:         #) s
5 241 M
(#       [ed+e-1]^k [\(ed+e\)^\(n-k+1\) - [ed+e-1]^\(n-k+1\)]          #) s
5 230 M
(#       ---------------------------------------                 #) s
5 219 M
(#                [\(ed+e\)^n]                                     #) s
5 208 M
(#################################################################) s
5 186 M
(if k=n:) s
5 175 M
(        \(ed+e-1\)^n / \(ed+e\)^n) s
5 153 M
(If overlap of variables across the clauses is huge, ed+e-1 ~ ed+e) s
5 142 M
(Maximum overlap d is \(n-1\) i.e a clause has common variables across all other clauses) s
5 120 M
(When d is maximum:) s
5 109 M
(------------------) s
5 98 M
(Lt \(d -> n-1, n -> infinity\) \(\(ed+e-1\)/\(ed+e\)\)^n) s
5 87 M
(        = [\(\(e\(n-1\)+e-1\)/\(e\(n-1\) + e\)]^n) s
5 76 M
(        = [\(en-e+e-1\)/\(en-e+e\)]^n) s
5 65 M
(        = [\(en-1\)/\(en\)]^n) s
5 54 M
(        = [\(1-1/ne\)]^n) s
5 43 M
(        = [1 - 0.3678/n]^n ) s
5 32 M
(For infinite n:) s
5 21 M
(        = e^\(-0.3678\)) s
5 10 M
(Pr[#SATclauses = n]     = 69.22% ) s
_R
S
%%Page: (271) 271
%%BeginPageSetup
_S
18 36 translate
/pagenum 271 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (271) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(When overlap is absent at d=0:) s
5 670 M
(------------------------------) s
5 659 M
(Pr[#SATclauses = n]     = \(e-1\)^n/e^n = \(0.6321\)^n -> 0 for huge n) s
5 637 M
(When d=1 \(minimum overlap\):) s
5 626 M
(---------------------------) s
5 615 M
(Pr[#SATclauses = n] = [2e-1]^n / [2e]^n = [1-0.5/e]^n = \(0.81606\)^n -> 0 for huge n) s
5 593 M
(=> When the number of variables overlapping across clauses tends to a huge number almost equal) s
5 582 M
( to number of clauses, the system of) s
5 571 M
(linear equations obtained by relaxing each of the clauses are solved by least squares and prob) s
5 560 M
(ability of all clauses being satisfied tends ) s
5 549 M
(to 69.22%.  High overlap of variables across clauses is the most probable occurrence in real w) s
5 538 M
(orld SAT solvers. If the overlap as random variable is uniformly distributed:) s
5 527 M
(        Expected value of d = 1/\(n-1\) * \(n-1\)n/2 = n/2) s
5 505 M
(For mean overlap of n/2 variables across clauses:) s
5 494 M
(#################################################################) s
5 483 M
(#Probability of atleast k of n clauses being satisfied:         #) s
5 472 M
(#       [en/2+e-1]^k [\(en/2+e\)^\(n-k+1\) - [en/2+e-1]^\(n-k+1\)]    #) s
5 461 M
(#       ---------------------------------------                 #) s
5 450 M
(#                [\(en/2+e\)^n]                                   #) s
5 439 M
(#################################################################) s
5 417 M
(When k=n:) s
5 406 M
(        [en/2+e-1]^n ) s
5 395 M
(        ------------) s
5 384 M
(        [en/2+e]^n) s
5 362 M
(        = [1 - 0.7357888/\(n+1\)]^n > [1 - 0.7357888/n]^n) s
5 351 M
(        = Lt \(n->infinity\) [1 - 0.735758882/n\)]^n = e^-0.73578882   ) s
5 340 M
(        => Pr[#SATclauses = n] > 47.91%) s
5 318 M
(=> When the number of variables overlapping across clauses are uniformly distributed, Probabil) s
5 307 M
(ity of all clauses being satisfied per random) s
5 296 M
(3CNF is lowerbounded as 47.91% when number of clauses tend to infinity.) s
5 285 M
(=> Caveat: This is an average case analysis of overlaps and best case analysis for number of c) s
5 274 M
(lauses satisfied. This implies SAT is approximately solvable in polynomial time asymptotically) s
5 263 M
( in infinite if the overlaps are uniformly distributed. This is almost an 1/2-approximation in) s
5 252 M
( average overlap setting, similar to Christofides algorithm for TSP. This is not an abnormal a) s
5 241 M
(ppoximation and it does not outrageously contradict witnesses towards P != NP described earlie) s
5 230 M
(r in this document.) s
5 208 M
(Correction to Geometric distribution LLL estimate:) s
5 197 M
(--------------------------------------------------) s
5 186 M
(Previous bound assumes Pr[#SATclauses >= k] is geoemtric distribution. If k satisfying clauses) s
5 175 M
( are chosen from total n clauses in 3CNF, it is a tighter binomial distribution and not geomet) s
5 164 M
(ric.) s
5 142 M
(=> Pr[#SATclauses >= k] = summation\(nCl*\(1-p\)^l*\(p\)^\(n-l\)\), l=k,k+1,k+2,...,n) s
5 120 M
(If k=n/2, this summation is exactly same as Condorcet Jury Theorem where each clause in the 3C) s
5 109 M
(NF is a voter = probability of majority of the clauses are satisfied. Each satisfying clause i) s
5 98 M
(s +1 vote and each rejecting clause is -1 vote. Condorcet Jury Theorem thus applies directly a) s
5 87 M
(nd Pr[#SATclauses >= k] tends to 1 if p > 1/2 and tends to 0 if p < 1/2. For p=0.5, Pr[#SATcla) s
5 76 M
(uses >= k] = 0.5. From LLL, p=0.5 implies e*0.5*\(d+1\) > 1 \(or\) \(d+1\) > 2/e. For arbitrary valu) s
5 65 M
(es of k, computing closed form of binomial coefficient sum for Pr[#SATclauses >= k] requires h) s
5 54 M
(ypergeometric functions.) s
5 32 M
(When k=n:) s
5 21 M
(---------) s
5 10 M
(Pr[#SATclauses = n] = \(1-p\)^n) s
_R
S
%%Page: (272) 272
%%BeginPageSetup
_S
18 36 translate
/pagenum 272 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (272) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(From LLL, ep\(d+1\) > 1 => p > 1/e\(d+1\) ) s
5 681 M
(        1-p < 1 - 1/e\(d+1\)) s
5 670 M
(        1-p < 1 - 0.36788/\(d+1\)) s
5 659 M
(        \(1-p\)^n < \(1 - 0.36788/\(d+1\)\)^n ) s
5 637 M
(d=0, no overlaps:) s
5 626 M
(-----------------) s
5 615 M
(        Pr[#SATclauses=n] = \(1-p\)^n < \(0.6321\)^n which tends to 0 for huge number of clauses n) s
5 604 M
(.) s
5 582 M
(d=n-1, maximum overlaps:) s
5 571 M
(------------------------) s
5 560 M
(        Pr[#SATclauses=n] = \(1-p\)^n < \(1 - 0.36788/n\)^n) s
5 549 M
(        But Limit\(n->infinity\) \(1 - 0.36788/n\)^n = e^\(-0.36788\) = 0.692200241) s
5 538 M
(        Pr[#SATclauses=n] < 69.22% for huge n.) s
5 516 M
(d=n/2, expected overlaps in uniform distribution:) s
5 505 M
(--------------------------------------------------) s
5 494 M
(        Pr[#SATclauses=n] = \(1 - 1/\(e\(n/2+1\)\)\)^n = \(1 - 0.735758882/\(n+2\)\)^n) s
5 483 M
(        0.735758882/\(n+2\) < 0.735758882/n) s
5 472 M
(        \(1 - 0.735758882/\(n+2\)\)^n > \(1 - 0.735758882/n\)^n) s
5 461 M
(        As n->infinity, \(1-0.73578882/\(n+2\)\) > e^\(-0.73578882\) ~ 47.91%) s
5 450 M
(        => Pr[#SATclauses=n] > 47.91%) s
5 428 M
(=> 97-98% satisfied clauses found in few hundred iterations above for upto 20 clauses and 20 v) s
5 417 M
(ariables should tend asymptotically to 69.22% if there are high overlaps, high number of claus) s
5 406 M
(es and variables. For average number of overlaps, Pr[#SATclauses=n] > 47.91% and does not rule) s
5 395 M
( out convergence to 98%. This can be substituted for k for probability that 98% clauses are sa) s
5 384 M
(tisfied as below: ) s
5 373 M
(        Pr[#SATclauses >= 0.98n] = summation\(nCl*\(1-p\)^l*\(p\)^\(n-l\)\), l=k,k+1,k+2,...,n) s
5 362 M
(This is tail bound for binomial distribution which is defined as:) s
5 351 M
(        Pr[X >= k] <= e^\(-nD\(k/n || p\)\) ) s
5 340 M
(where relative entropy D\(k/n || p\) = k/n log \(k/np\) + \(1-k/n\)log \(\(1-k/n\)/\(1-p\)\)) s
5 329 M
(But k/n = 0.98n/n = 0.98) s
5 318 M
(=> D\(k/n || p\) = k/n log \(k/np\) + \(1-k/n\)log \(\(1-k/n\)/\(1-p\)\) = 0.98log\(0.98/p\) + 0.02log\(0.02/) s
5 307 M
(\(1-p\)\)) s
5 296 M
(=> Pr[X >= 0.98n] <= e^\(-n*\(0.98log\(0.98/p\) + 0.02log\(0.02/\(1-p\)\)\)\) ) s
5 285 M
(From LLL, p < 1/e\(d+1\). Substituting for p:) s
5 274 M
(=> Pr[X >= 0.98n] <= e^\(-n*\(0.98log\(0.98e\(d+1\)\) + 0.02log\(0.02\(ed+e\)/\(ed+e-1\)\)\)\) ) s
5 263 M
(Lt\(n->infinity\) e^\(-n*\(0.98log\(0.98e\(d+1\)\) + 0.02log\(0.02\(ed+e\)/\(ed+e-1\)\)\)\) = 0) s
5 241 M
(Pr\(#SATclauses <= n\) <= e^\(-\(np-n\)^2/2pn\) by Chernoff bounds. From LLL, p < 1/e\(d+1\). For aver) s
5 230 M
(age number of overlaps d=n/2, Chernoff bound reduces to:) s
5 219 M
(Pr\(#SATclauses <= n\) <= e^\(-1/e\) ~ 69.22% which coincides with maximum overlaps bound above.) s
5 197 M
(Previous imply approximate CNF SAT solver by solving system of linear equations \(= clauses rel) s
5 186 M
(axed to reals from binary\) is a 0.6922-approximation.) s
5 164 M
(References:) s
5 153 M
(-----------) s
5 142 M
(449.1 Sum of Binomial Coefficients - http://web.maths.unsw.edu.au/~mikeh/webpapers/paper87.pdf) s
5 131 M
( - "... \342\\200\\234For years [before working with) s
5 120 M
(George E. Andrews in 1973] I had been trying to point out that the rather confused world of bi) s
5 109 M
(nomial coefficient summations is best understood in the language of hypergeometric series iden) s
5 98 M
(tities. Time and again I would find first\342\\200\\223rate mathematicians who had never heard of t) s
5 87 M
(his insight and who would waste considerable time proving some apparently new binomial coeffic) s
5 76 M
(ient summation which almost always turned out to be a special case of one of a handful of clas) s
5 65 M
(sical hypergeometric identities. ...\342\\200\\235) s
5 54 M
(449.2 Binomial Distribution Tail Bounds - https://en.wikipedia.org/wiki/Binomial_distribution#) s
5 43 M
(Tail_bounds) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(--------------------------------------------------) s
_R
S
%%Page: (273) 273
%%BeginPageSetup
_S
18 36 translate
/pagenum 273 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (273) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(450.\(THEORY\) Analysis of Error Upperbound for Approximate CNFSAT Solver based on Lovasz Local ) s
5 681 M
(Lemma clause dependency digraph - continued - 1 September 2017) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(--------------------------------------------------) s
5 648 M
(\(*\) Least Squares lsqr\(\) function has been replaced by recent lsmr\(\) least square function men) s
5 637 M
(tioned to be faster.) s
5 626 M
(\(*\) For 10 variables and 10 clauses for 54068 random 3CNF iterations following were the percen) s
5 615 M
(tage of satisfied CNFs and clauses satisfied ) s
5 604 M
(per CNF:) s
5 593 M
(Percentage of CNFs satisfied so far: 79.6722706172) s
5 582 M
(Average Percentage of Clauses per CNF satisfied: 97.6276609517) s
5 571 M
(\(*\) Again the percentage of clauses satisfied per random 3CNF converges to ~98% after ~54000 r) s
5 560 M
(andom 3CNFs.) s
5 549 M
(\(*\) The clauses are created by randomly choosing each literal and its negation independent of ) s
5 538 M
(any other literal or clause and thus are identically, independently distributed. CNFs can repe) s
5 527 M
(at since this is not a permutation.) s
5 516 M
(\(*\) Repetitive convergence of number of clauses satisfied per CNF to 98% is mysterious in vari) s
5 505 M
(ed clause-variable combinations. ) s
5 494 M
(\(*\) Previous error bound analysis does not assume least squares and is based only on LLL. But ) s
5 483 M
(Least Squares is about sum of squares of errors minimization i.e Error^2 = |Ax-b|^2 is minimiz) s
5 472 M
(ed e.g A'Ax=A'b, partial first derivative of error set to 0. System of equations translated fr) s
5 461 M
(om each 3CNF is overdetermined or underdetermined mostly i.e number of variables and number of) s
5 450 M
( clauses are not equal.) s
5 439 M
(\(*\) Motivation for least squares for boolean CNF is the relaxation achieved: An example assign) s
5 428 M
(ment for a literal, 0.88 is inclined towards boolean 1 and 0.02 is inclined towards boolean 0.) s
5 417 M
( ) s
5 406 M
(\(*\) Convergence to 98% implies probability of average number of clauses satisfied per 3CNF > 0) s
5 395 M
(.98n must be almost 0.) s
5 384 M
(\(*\) Following Binomial Tail Bound:) s
5 373 M
(Pr[#SATclauses >= 0.98n] <= e^\(-n*\(0.98log\(0.98e\(d+1\)\) + 0.02log\(0.02\(ed+e\)/\(ed+e-1\)\)\)\) is max) s
5 362 M
(imized when there are no overlaps - d=0. ) s
5 351 M
(Pr[#SATclauses >= 0.98n] <= e^\(-n*\(0.98log\(0.98e\) + 0.02log\(0.02\(e\)/\(e-1\)\)\)\)) s
5 340 M
(Pr[#SATclauses >= 0.98n] <= e^\(-n*\(0.41701 - 0.02999\)) s
5 329 M
(Pr[#SATclauses >= 0.98n] <= e^\(-n*0.38701\) ~ 0 for large n.) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(------------------------------------------------) s
5 285 M
(451.\(THEORY\) PCP theorem, Hardness of Approximation, Least Squares SAT solver and Semidefinite) s
5 274 M
( Programming - related to 450 - 2 September 2017) s
5 263 M
(and 3 September 2017) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(------------------------------------------------) s
5 230 M
(Probabilistically Checkable Proof theorem implies it is NP-hard to find satisfiable instances ) s
5 219 M
(or 7/8+epsilon satisfiable instance to 3SAT. There are Semidefinite Programming optimization a) s
5 208 M
(lgorithms for MAX3SAT which replace the clauses by an arithmetized polynomial for each literal) s
5 197 M
(. Sum of these polynomials or Sum of Squares \(SOS\) of these polynomials is optimized by Semide) s
5 186 M
(finite decomposition. Positive literal x is replaced by \(1-x\)/2 and negation !x by \(1+x\)/2. Li) s
5 175 M
(teral polynomials within each clause are multiplied. This is a polynomial over reals and is de) s
5 164 M
(composed as XSX' > 0 i.e positive semi-definite. Values of these Sum and Sum of Squares polyno) s
5 153 M
(mials \(F\) for an assignment to CNF \(a\) are equal to number of clauses violating an assignment.) s
5 142 M
( Semidefinite Program maximizes/minimizes the difference F\(a\)-e \(thus maximizing or minimizing) s
5 131 M
( the number of violating clauses\) where e is value of F for assignment a. In this context, the) s
5 120 M
( striking 98% convergence for percentage of clauses satisfiedfor multiple clause-variable comb) s
5 109 M
(inations for least squares/LSMR solver gains importance. It implies 7/8+epsilon=0.98 \(or 0.875) s
5 98 M
( + 0.105 = 0.98\) satisfiable clauses per CNF if proved for all permutations of variables-claus) s
5 87 M
(es-overlaps \(and that is a big if\) implying P=NP. Atleast a convergence to 0.875 if not 0.98 w) s
5 76 M
(ould suffice.) s
5 54 M
(References:) s
5 43 M
(-----------) s
5 32 M
(451.1 PCP and hardness of approximation - algorithm satisfying 7/8+delta clauses - https://cs.) s
5 21 M
(stackexchange.com/questions/71040/hardness-of-approximation-of-max-3sat) s
5 10 M
(451.2 SDP for MAX3SAT - http://www.isa.ewi.tudelft.nl/~heule/publications/sum_of_squares.pdf -) s
_R
S
%%Page: (274) 274
%%BeginPageSetup
_S
18 36 translate
/pagenum 274 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (274) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( Maximum number of clauses violating an assignment and Semidefinite Programming) s
5 681 M
(451.3 Binary Solutions to System of Linear Equations - https://arxiv.org/pdf/1101.3056.pdf) s
5 670 M
(451.4 Karloff-Zwick 7/8 algorithm for MAX3SAT - http://citeseerx.ist.psu.edu/viewdoc/summary?d) s
5 659 M
(oi=10.1.1.51.1351 - A 7/8-approximation algorithm for MAXSAT? - This is randomized polynomial ) s
5 648 M
(time algorithm and satisfies an expected >= \(7/8\)n clauses.) s
5 637 M
(451.5 Inapproximability results - [Johan Hastad] - https://www.nada.kth.se/~johanh/optimalinap) s
5 626 M
(.pdf - Assuming P != NP, MAX3SAT can not have polynomial time algorithm satisfying > \(7/8\)n cl) s
5 615 M
(auses.) s
5 604 M
(451.6 Gauss-Jordan Elimination For System of Linear Equations, Origin of Least Squares, Linear) s
5 593 M
( Programs for Inequalities - http://www-personal.umich.edu/~murty/LPINFORMStutorial2.pdf - pre) s
5 582 M
(vious CNF SAT Solver has only equalities.) s
5 571 M
(451.7 Randomized Rounding for LP relaxation - https://en.wikipedia.org/wiki/Randomized_roundin) s
5 560 M
(g - Randomized Rounding involves 3 steps - formulating a Linear Program for a 3SAT, solving it) s
5 549 M
( fractionally and rounding the fraction to nearest integer. Previous CNF SAT Solver maps this ) s
5 538 M
(rounding process to system of linear equations - formulate each 3SAT as system of linear equat) s
5 527 M
(ions, one equation per clause \(AX=B, B is unit vector of all 1s\), get fractional values for ve) s
5 516 M
(ctor X from Least Squares, Round the fraction to 0 or 1 whichever is nearest.) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(------------------------------------------------) s
5 472 M
(452.\(THEORY\) Approximate CNF 3SAT Solver - Least Squares Error Rounding Analysis - 9 September) s
5 461 M
( 2017, 11 September 2017, 14 September 2017) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(------------------------------------------------) s
5 428 M
(Notation:) s
5 417 M
(A' = Transpose of A) s
5 406 M
(A^-1 = Inverse of A) s
5 395 M
(E\(A\) = Expectation of A) s
5 384 M
(p\(A\) = probability of A) s
5 362 M
(Rounding in least squares solution to system of equations per CNF 3SAT fails if and only if bi) s
5 351 M
(nary assignment obtained by rounding does not satisfy the CNF while fractional assignment sati) s
5 340 M
(sfies the system of equations for CNF. Least Square error is minimized by setting first partia) s
5 329 M
(l derivative of error to zero:) s
5 318 M
(        A'Ax = A'b) s
5 307 M
(        => x = \(A'A\)^-1*A'*b) s
5 296 M
(Number of satisfied clauses in least squares is = tr\(A\(A'A\)^-1*A'*b\) because Ax-b is minimized) s
5 285 M
(.) s
5 274 M
(Maximum value of tr\(A\(A'A\)^-1*A'*b\) is the maximum number of satisfied clauses) s
5 263 M
(if tr\(A\(A'A\)^-1*A'*b\) > 7/8*number_of_clauses, then P=NP by PCP theorem.) s
5 241 M
(Each matrix A corresponding to a CNF is a random variable - A is a random matrix \(not necessar) s
5 230 M
(ily square\).) s
5 219 M
(Expected value of A\(A'A\)^-1*A'*b where random matrix A belongs to some probability distributio) s
5 208 M
(n = E\(A\(A'A\)^-1*A'*b\)) s
5 197 M
(        E\(A\(A'A\)^-1*A'*b\) = b*E\(A\)*E\(\(A'A\)^-1\)*E\(A'\)) s
5 186 M
(        E\(A\(A'A\)^-1*A'*b\) = b*E\(A\)*E\(\(A'A\)^-1\)*E\(A\) because A and A' are bijections. ) s
5 175 M
(        E\(A\(A'A\)^-1*A'*b\) = b*E\(A\)*E\(A'A\)*E\(A\) because A'A and \(A'A\)^-1 are bijections. ) s
5 164 M
(        E\(A\(A'A\)^-1*A'*b\) = b*E\(A\)*E\(A\)*E\(A'\)*E\(A\) by definition of product of expectations) s
5 153 M
(        E\(A\(A'A\)^-1*A'*b\) = b*\(E\(A\)\)^4) s
5 142 M
(        E\(A\(A'A\)^-1*A'*b\) = b*\(A*p\(A\)\)^4) s
5 131 M
(Each random matrix for a random 3CNF has nm entries where n is number of variables and m is nu) s
5 120 M
(mber of clauses. Each of nm literals is either a variable or its negation.) s
5 98 M
(Probability of choosing a variable or its negation = 1/\(2n\) for n variables + n negations.) s
5 87 M
(Probability of a random matrix A of mn entries = \(1/\(2n\)\)^nm) s
5 76 M
(        => E\(A\(A'A\)^-1*A'*b\) = b\(sigma\(A\(1/2n\)^nm\)^4 in uniform distribution.) s
5 65 M
(                        = b\(1/\(2n\)^nm * sigma\(A\)\)^4 which sums up all 2^nm possible boolean ma) s
5 54 M
(trices.) s
5 43 M
(                        = b\(1/\(2n\)^mn * [ matrix of 2^\(nm-1\) for all entries ]\)^4) s
5 32 M
(                        = b * [ matrix of 2^\(mn-1\)/\(2n\)^nm for all entries ]^4) s
5 10 M
(=================================================) s
_R
S
%%Page: (275) 275
%%BeginPageSetup
_S
18 36 translate
/pagenum 275 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (275) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Tighter estimate for probability of a random 3CNF:) s
5 681 M
(=================================================) s
5 670 M
(        Per clause 3 literals have to be chosen from 2n literals = 2nC3\(1/2n\)^3\(1/2n\)^\(2n-3\)) s
5 659 M
(        For m clauses each being independent, Probability of a random 3CNF) s
5 648 M
(                = \(2nC3\(1/2n\)^3\(1/2n\)^\(2n-3\)\)^m) s
5 637 M
(=================================================) s
5 626 M
(        E\(A\(A'A\)^-1*A'*b\) = b * [ matrix of 2^\(mn-1\)/\(2n\)^nm for all entries ]^4  \(1,m\) * \(m*n) s
5 615 M
(, n*m, m*n, n*m\)) s
5 604 M
(                        = b * [ matrix of n*2^\(2nm-2\)/\(2n\)^2mn for all entries ]^2  \(1,m\) * \(m) s
5 593 M
(*m, m*m\)) s
5 582 M
(                        = b * [ matrix of m*n^2*2^\(2nm-2\)/\(2n\)^2mn for all entries ] \(1,m\) * \() s
5 571 M
(m*m\) ) s
5 560 M
(                        = [ matrix of m^2*n^2*2^\(2nm-2\)/\(2n\)^2mn for all entries ] \(1,m\)) s
5 549 M
(        Trace of this expected matrix is the expected number of clauses that can be satisfied ) s
5 538 M
(by least squares in uniform distribution:) s
5 527 M
(                        = m^3*n^2*2^\(2nm-2\)/\(2n\)^2mn) s
5 516 M
(        if number of clauses to be satisfied <= m, m^3*n^2*2^\(2nm-2\) <= m*\(2n\)^2mn) s
5 505 M
(                        => m^2*n^2*2^\(2nm-2\) <= \(2n\)^2nm) s
5 494 M
(        which is obvious because \(2n\)^\(2mn\) grows faster.) s
5 483 M
(                        => m^2*n^2*2^2nm <= 4 * 2^2nm * n^2nm) s
5 472 M
(                        => m^2*n^2 <= 4 * n^2nm) s
5 461 M
(        For all m clauses to be satisfied, this must be an equality:) s
5 450 M
(                        m^2 = 4 * n^2\(nm-1\)) s
5 439 M
(        if m=n \(number of clauses = number of variables\), all clauses are satisfied if:) s
5 428 M
(                        n^2 = 4 * n^\(n^2-1\)) s
5 417 M
(                        n^2/4 = n^\(n^2-1\)) s
5 406 M
(                        => log \(n^2/4\) = \(n^2-1\) log\(n\)) s
5 395 M
(                        => log \(n^2/4\)/log\(n\) = \(n^2-1\)) s
5 384 M
(        which is a contradiction because RHS grows faster.) s
5 373 M
(=================================================) s
5 362 M
(Alternatively, following simpler analysis leads to something more concrete:) s
5 351 M
(        For minimum error x = \(A'A\)^-1*A'*b) s
5 340 M
(        Ax=A\(A'A\)^-1*A'*b is maximum when A\(A'A\)^-1*A'*b = b) s
5 329 M
(        => A\(A'A\)^-1*A' = I) s
5 318 M
(When A is square symmetric matrix \(number of variables = number of clauses \) and A=A':) s
5 307 M
(        => A\(AA\)^-1*A = I) s
5 296 M
(        => Least squares perfectly solves system of equations for CNFSAT if matrix of clauses ) s
5 285 M
(is symmetric and square i.e error is zero) s
5 274 M
(Least squares thus solves a subset of NP-complete set of input 3CNFs i.e exactly solves a prom) s
5 263 M
(ise NP problem in deterministic polynomial time.) s
5 241 M
(References:) s
5 230 M
(-----------) s
5 219 M
(452.1 Advanced Engineering Mathematics - [Erwin Kreyszig - 8th Edition] - Page 357) s
5 208 M
(452.2 Linear Algebra - [Gilbert Strang] - http://math.mit.edu/~gs/linearalgebra/ila0403.pdf) s
5 197 M
(452.3 Least Squares Error - [Stephen Boyd] - https://see.stanford.edu/materials/lsoeldsee263/0) s
5 186 M
(5-ls.pdf) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(------------------------------------------------) s
5 142 M
(453. \(THEORY\) Random Matrix Analysis of Least Squares Approximate CNFSAT solver - related to 4) s
5 131 M
(52 - 15 September 2017) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(------------------------------------------------) s
5 98 M
(From previous definition of expected value of random matrix equivalent to a random 3SAT:) s
5 87 M
(        E\(A\(A'A\)^-1*A'*b\) = b*\(E\(A\)\)^4) s
5 76 M
(Previous derivation of expected value of a random matrix is further simplified by a different ) s
5 65 M
(definition of expectation:) s
5 54 M
(        E\(A\) = [ matrix of E\(x\(i,j\)\) ] i.e each entry of the matrix is evaluated independently) s
5 43 M
(.) s
5 32 M
(Let the probability of each entry x\(i,j\) of the random matrix = p. Each entry is a literal or ) s
5 21 M
(its negation and can take 0 or 1 values.) s
5 10 M
(        E\(x\(i,j\)\) = p) s
_R
S
%%Page: (276) 276
%%BeginPageSetup
_S
18 36 translate
/pagenum 276 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (276) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        => E\(A\) = [ matrix of p for all entries ]) s
5 681 M
(        => b * \(E\(A\)\)^4 = b*[ matrix of np^2 for all entries ]^2) s
5 670 M
(                        = b*[ matrix of m*n^2*p^4 for all entries ] ) s
5 659 M
(                        = [ matrix of m^2*n^2*p^4 for all entries ]) s
5 648 M
(        E\(A\(A'A\)^-1*A'*b\) = [ matrix of m^2*n^2*p^4 for all entries ]) s
5 637 M
(        Trace\(E\(A\(A'A\)^-1*A'*b\)\) = m^3*n^2*p^4 which has maximum value equal to number of clau) s
5 626 M
(ses m) s
5 615 M
(        => m^3*n^2*p^4 <= m) s
5 604 M
(        => m^2*n^2*p^4 <= 1) s
5 593 M
(        => p^4 <= 1/\(mn\)^2) s
5 582 M
(        => p^2 <= 1/\(mn\)) s
5 571 M
(        => p <= 1/sqrt\(mn\)) s
5 560 M
(This retrieves the probability distribution of the random 3SAT instances. ) s
5 549 M
(If all clauses have to be satisfied \(ExactSAT\), p = 1/sqrt\(mn\).) s
5 538 M
(In previous example iterations of the solver, number of clauses = number of variables i.e p = ) s
5 527 M
(1/n.) s
5 516 M
(This differs from the uniform probability assumption 1/\(2n\) per literal in earlier derivations) s
5 505 M
( including the negations too.) s
5 494 M
(The promise subset of NP solved exactly by least squares is defined by the set of all random 3) s
5 483 M
(CNFs created with each ) s
5 472 M
(literal occurring with probability 1/n.) s
5 439 M
(References:) s
5 428 M
(----------) s
5 417 M
(453.1 Random matrices - http://www.utstat.toronto.edu/~brunner/oldclass/431s09/readings/Random) s
5 406 M
(Matrices.pdf) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(----------------------------------------------) s
5 362 M
(454. \(FEATURE and THEORY\) Commits - Approximate SAT solver - 15 September 2017) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(----------------------------------------------) s
5 329 M
(\(*\) Some debug statements have been included to print average probability of each literal's oc) s
5 318 M
(currence in random 3CNF.) s
5 307 M
(\(*\) SATsolver has been re-executed with 20 clauses and 20 variables and probability of occurre) s
5 296 M
(nce of each literal has been logged.) s
5 285 M
(\(*\) This was necessitated to ascertain the pseudorandomness of the clauses and CNFs created.) s
5 274 M
(\(*\) Average probability of a literal is less than previous estimate of 1/n = 1/20 = 0.05 for 1) s
5 263 M
(00% satisfied clauses but still converges to usual 97% for 100 iterations.) s
5 252 M
(\(*\) logs committed to testlogs/) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(---------------------------------------------) s
5 208 M
(455. \(THEORY\) Eigenvalues of Random Matrices, Riemann Zeta Function, MAXSAT ranking of merit, ) s
5 197 M
(Promise problems and Some additional notes on CNFSAT solver scipy/numpy least squares implemen) s
5 186 M
(tation - 18 September 2017 - related to 24,432) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(---------------------------------------------) s
5 153 M
(The set of random 3CNFs created by the solver is just a subset of all possible 3CNFs because a) s
5 142 M
(ll least squares API in SciPy require number of variables to be equal to number of clauses, an) s
5 131 M
(d an exception is thrown at runtime if they are unequal. A better alternative for these API wh) s
5 120 M
(ich works for any combination of number of clauses and variables has to be found and substitut) s
5 109 M
(ed in least square invocation \(replacing lsqr\(\)/lsmr\(\)\). This is a limitation of SciPy/NumPy a) s
5 98 M
(nd not the least squares algorithm. This makes it a Promise SAT solver and not the universal S) s
5 87 M
(AT solver for time being. Also for huge number of variables/clauses, both lsqr\(\) and lsmr\(\) fu) s
5 76 M
(nctions slow down heavily and it is difficult to test on  low-end personal desktops. The most ) s
5 65 M
(plausible reason for convergence of MaxSAT to ~98% for almost all executions so far is the pro) s
5 54 M
(mise nature of the problem and only subset of 3CNFs \(number of clauses=number of variables\) ar) s
5 43 M
(e solved. In above random matrix analysis, if number of variables=number of clauses, probabili) s
5 32 M
(ty of choosing a literal \(positive or negative\) is 1/n which is also uniform if two sets of po) s
5 21 M
(sitive and negated literals each of size n are separately evaluated for probability \(E\(x\(i,j\)\)) s
5 10 M
( = 0*1/n + 1*1/n\). This also raises a question: Since promise-SAT instances are NP-complete,do) s
_R
S
%%Page: (277) 277
%%BeginPageSetup
_S
18 36 translate
/pagenum 277 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (277) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(es solving promise-NP imply solving NP. Since least squares exactly solves this promise subset) s
5 681 M
( \(square matrix of equal number of variables and clauses\) when probability of choosing a liter) s
5 670 M
(al is 1/n, percentage of clauses satisfied is ~98% which is close to 100% implying the probabi) s
5 659 M
(lity of choosing a literal is slightly less than uniform 1/n. Exact average MaxSAT percentage ) s
5 648 M
(of least squares solver can be analyzed only if there is a suitable alternative to SciPy/NumPy) s
5 637 M
(. Therefore this convergence still does not contradict P!=NP and PCP.) s
5 615 M
(Earlier the problem of intrinsically ranking texts etc., based on merit has been reduced to a ) s
5 604 M
(MAXSAT problem where each text document etc., satisfies a fixed or variable 3CNFSAT formed fro) s
5 593 M
(m merit variables \(e.g textgraph complexity\) and merit is ranked by percentage of clauses sati) s
5 582 M
(sfied. All the quantified outcomes of intrinsic merit algorithms described in this document ca) s
5 571 M
(n be translated to merit variables e.g variable1 = 1 if graph tensor neuron merit > threshold ) s
5 560 M
(else 0.) s
5 538 M
(Random Matrix representation of random 3SAT instances throws up an unusual window into the rea) s
5 527 M
(lm of Riemann Zeta Functions. It has been known that non-trivial zeros of Riemann Zeta Functio) s
5 516 M
(ns and Eigenvectors of Random Matrices \(N*N hermitian matrices\) have something in common. This) s
5 505 M
( indicates a possibility of a connection between Riemann Zeta Function zeros and eigenvalues o) s
5 494 M
(f Random Matrices for Random 3CNFs.) s
5 472 M
(References:) s
5 461 M
(----------) s
5 450 M
(455.1 Promise Problems - http://www.cs.tau.ac.il/~amnon/Classes/2017-BPP/Lectures/Lecture11.pd) s
5 439 M
(f) s
5 428 M
(455.2 Survey of Promise Problems - [Oded Goldreich] - http://www.wisdom.weizmann.ac.il/~oded/P) s
5 417 M
(SX/prpr-r.pdf - there exist BPP-complete promise problems though in general case there are no ) s
5 406 M
(known BPP-complete problems. This is quite applicable in equating a non-majority social choice) s
5 395 M
( and a Condorcet Jury Theorem majority social choice e.g. RHS majority choice with error is pr) s
5 384 M
(omise-BPP-complete and LHS non-majority interview TQBF social choice is in PSPACE.) s
5 373 M
(455.3 Gaussian Unitary Ensemble - Random Matrices - http://empslocal.ex.ac.uk/people/staff/mrw) s
5 362 M
(atkin//zeta/random.htm) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(-----------------------------------------) s
5 318 M
(456. \(THEORY and FEATURE\) CNF3SAT Approximate Solver Update - All possible variable-clause com) s
5 307 M
(binations - Commits - 18 September 2017) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-----------------------------------------) s
5 274 M
(\(*\) Solve_SAT2\(\) function has been changed to take both number of variables and clauses as par) s
5 263 M
(ameters) s
5 252 M
(\(*\) Bug in EquationsB creation has been fixed so that length of b equals number of clauses. Th) s
5 241 M
(is was causing dimension mismatch and incompatible) s
5 230 M
(dimensions in LSMR and LSQR) s
5 219 M
(\(*\) Logs for 18*16 clauses-variables random 3CNFs have been committed to testlogs/. MaxSAT per) s
5 208 M
(centage is ~96% after 1200 random CNF iterations) s
5 197 M
(. Per literal probability is too less than 1/sqrt\(mn\) obtained from random matrix analysis and) s
5 186 M
( therefore converges much below 100%.) s
5 175 M
(-------------------------------------) s
5 164 M
(\(*\) Bugs fixed in prob_dist\(\)) s
5 153 M
(\(*\) restored lsmr\(\)) s
5 142 M
(\(*\) logs for some other clause-variable combinations have been committed to testlogs/. Observe) s
5 131 M
(d per literal probability is close to random) s
5 120 M
( matrix probability of 1/sqrt\(mn\)) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(----------------------------------------------) s
5 76 M
(457. \(THEORY and FEATURE\) Inapproximability and Random Matrix Analysis of Least Square Approxi) s
5 65 M
(mate SAT solver - Commits - 19 September 2017) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(----------------------------------------------) s
5 32 M
(Previous Random Matrix Analysis shows expected number of satisfied clauses = m^3*n^2*p^4 where) s
5 21 M
( there are m clauses,n variables and p is the) s
5 10 M
(probability of choosing a positive or negative literal. For 21 variables and 20 clauses, follo) s
_R
S
%%Page: (278) 278
%%BeginPageSetup
_S
18 36 translate
/pagenum 278 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (278) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(wing are the results after few iterations:) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(------------------) s
5 659 M
(--------------------------------------------------------------) s
5 648 M
(Iteration : 29) s
5 637 M
(--------------------------------------------------------------) s
5 626 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 615 M
(--------------------------------------------------------------) s
5 604 M
(a: [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 593 M
( [0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0]) s
5 582 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0]) s
5 571 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 560 M
( [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 549 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 538 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 527 M
( [0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 516 M
( [0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 505 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]) s
5 494 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 483 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 472 M
( [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]) s
5 461 M
( [0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 450 M
( [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0]) s
5 439 M
( [1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 428 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 417 M
( [0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 406 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 395 M
( [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]]) s
5 384 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 373 M
(a.shape: \(20, 21\)) s
5 362 M
(b.shape: \(20,\)) s
5 351 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  5.00000000e-01,   0.00000000e+00,   0.00000000e+00,) s
5 340 M
(         1.00000000e+00,   3.89920951e-13,   1.00000000e+00,) s
5 329 M
(         1.00000000e+00,   5.00000000e-01,   7.50000000e-01,) s
5 318 M
(         1.00000000e+00,   5.00000000e-01,   7.50000000e-01,) s
5 307 M
(         1.24863661e-13,   0.00000000e+00,   0.00000000e+00,) s
5 296 M
(         0.00000000e+00,   5.00000000e-01,   5.00000000e-01,) s
5 285 M
(         1.00000000e+00,   5.00000000e-01,   0.00000000e+00]\), 2, 12, 1.870828693386971, 5.203) s
5 274 M
(2984761241552e-12, 4.898979485566356, 4.001266321699533, 2.7613402542972292\)) s
5 263 M
(Random 3CNF: \(!x11 + !x3 + !x13\) * \(!x2 + x12 + x11\) * \(x20 + x11 + !x10\) * \(!x1 + !x2 + x11\) ) s
5 252 M
(* \(x5 + !x10 + x19\) * \(!x4 + x9 + !x17\) * \(x4 + !x1 + !x6\) * \(x5 + x7 + x13\) * \(x9 + x11 + !x1) s
5 241 M
(5\) * \(!x20 + !x19 + x12\) * \(!x14 + !x9 + x4\) * \(!x11 + !x6 + x19\) * \(x10 + !x9 + !x15\) * \(x7 +) s
5 230 M
( !x16 + x5\) * \(!x7 + x17 + x8\) * \(!x3 + x1 + x11\) * \(!x18 + !x7 + !x13\) * \(x5 + !x21 + x6\) * \() s
5 219 M
(!x16 + !x9 + !x6\) * \(x1 + !x6 + x18\)) s
5 208 M
(Assignment computed from least squares: [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1,) s
5 197 M
( 1, 1, 0]) s
5 186 M
(CNF Formula: [['!x11', '!x3', '!x13'], ['!x2', 'x12', 'x11'], ['x20', 'x11', '!x10'], ['!x1', ) s
5 175 M
('!x2', 'x11'], ['x5', '!x10', 'x19'], ['!x4', 'x9', '!x17'], ['x4', '!x1', '!x6'], ['x5', 'x7') s
5 164 M
(, 'x13'], ['x9', 'x11', '!x15'], ['!x20', '!x19', 'x12'], ['!x14', '!x9', 'x4'], ['!x11', '!x6) s
5 153 M
(', 'x19'], ['x10', '!x9', '!x15'], ['x7', '!x16', 'x5'], ['!x7', 'x17', 'x8'], ['!x3', 'x1', ') s
5 142 M
(x11'], ['!x18', '!x7', '!x13'], ['x5', '!x21', 'x6'], ['!x16', '!x9', '!x6'], ['x1', '!x6', 'x) s
5 131 M
(18']]) s
5 120 M
(Number of clauses satisfied: 20.0) s
5 109 M
(Number of clauses : 20) s
5 98 M
(Assignment satisfied: 1) s
5 87 M
(Percentage of clauses satisfied: 100.0) s
5 76 M
(Percentage of CNFs satisfied so far: 46.6666666667) s
5 65 M
(Average Percentage of Clauses per CNF satisfied: 96.0) s
5 54 M
(y= 46) s
5 43 M
(sumfreq= 896) s
5 32 M
(y= 43) s
5 21 M
(sumfreq= 896) s
5 10 M
(y= 36) s
_R
S
%%Page: (279) 279
%%BeginPageSetup
_S
18 36 translate
/pagenum 279 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (279) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sumfreq= 896) s
5 681 M
(y= 46) s
5 670 M
(sumfreq= 896) s
5 659 M
(y= 41) s
5 648 M
(sumfreq= 896) s
5 637 M
(y= 42) s
5 626 M
(sumfreq= 896) s
5 615 M
(y= 48) s
5 604 M
(sumfreq= 896) s
5 593 M
(y= 37) s
5 582 M
(sumfreq= 896) s
5 571 M
(y= 48) s
5 560 M
(sumfreq= 896) s
5 549 M
(y= 39) s
5 538 M
(sumfreq= 896) s
5 527 M
(y= 46) s
5 516 M
(sumfreq= 896) s
5 505 M
(y= 42) s
5 494 M
(sumfreq= 896) s
5 483 M
(y= 42) s
5 472 M
(sumfreq= 896) s
5 461 M
(y= 50) s
5 450 M
(sumfreq= 896) s
5 439 M
(y= 39) s
5 428 M
(sumfreq= 896) s
5 417 M
(y= 33) s
5 406 M
(sumfreq= 896) s
5 395 M
(y= 41) s
5 384 M
(sumfreq= 896) s
5 373 M
(y= 42) s
5 362 M
(sumfreq= 896) s
5 351 M
(y= 44) s
5 340 M
(sumfreq= 896) s
5 329 M
(y= 43) s
5 318 M
(sumfreq= 896) s
5 307 M
(y= 48) s
5 296 M
(sumfreq= 896) s
5 285 M
(y= 40) s
5 274 M
(sumfreq= 904) s
5 263 M
(y= 43) s
5 252 M
(sumfreq= 904) s
5 241 M
(y= 51) s
5 230 M
(sumfreq= 904) s
5 219 M
(y= 36) s
5 208 M
(sumfreq= 904) s
5 197 M
(y= 38) s
5 186 M
(sumfreq= 904) s
5 175 M
(y= 46) s
5 164 M
(sumfreq= 904) s
5 153 M
(y= 44) s
5 142 M
(sumfreq= 904) s
5 131 M
(y= 36) s
5 120 M
(sumfreq= 904) s
5 109 M
(y= 41) s
5 98 M
(sumfreq= 904) s
5 87 M
(y= 45) s
5 76 M
(sumfreq= 904) s
5 65 M
(y= 46) s
5 54 M
(sumfreq= 904) s
5 43 M
(y= 34) s
5 32 M
(sumfreq= 904) s
5 21 M
(y= 46) s
5 10 M
(sumfreq= 904) s
_R
S
%%Page: (280) 280
%%BeginPageSetup
_S
18 36 translate
/pagenum 280 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (280) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(y= 46) s
5 681 M
(sumfreq= 904) s
5 670 M
(y= 36) s
5 659 M
(sumfreq= 904) s
5 648 M
(y= 42) s
5 637 M
(sumfreq= 904) s
5 626 M
(y= 44) s
5 615 M
(sumfreq= 904) s
5 604 M
(y= 47) s
5 593 M
(sumfreq= 904) s
5 582 M
(y= 51) s
5 571 M
(sumfreq= 904) s
5 560 M
(y= 54) s
5 549 M
(sumfreq= 904) s
5 538 M
(y= 38) s
5 527 M
(sumfreq= 904) s
5 516 M
(Probability of Variables chosen in CNFs so far: [0.05133928571428571, 0.04799107142857143, 0.0) s
5 505 M
(4017857142857143, 0.05133928571428571, 0.04575892857142857, 0.046875, 0.05357142857142857, 0.0) s
5 494 M
(41294642857142856, 0.05357142857142857, 0.04352678571428571, 0.05133928571428571, 0.046875, 0.) s
5 483 M
(046875, 0.05580357142857143, 0.04352678571428571, 0.036830357142857144, 0.04575892857142857, 0) s
5 472 M
(.046875, 0.049107142857142856, 0.04799107142857143, 0.05357142857142857]) s
5 461 M
(Probability of Negations chosen in CNFs so far: [0.04424778761061947, 0.04756637168141593, 0.0) s
5 450 M
(5641592920353982, 0.03982300884955752, 0.0420353982300885, 0.05088495575221239, 0.048672566371) s
5 439 M
(681415, 0.03982300884955752, 0.04535398230088496, 0.049778761061946904, 0.05088495575221239, 0) s
5 428 M
(.03761061946902655, 0.05088495575221239, 0.05088495575221239, 0.03982300884955752, 0.046460176) s
5 417 M
(991150445, 0.048672566371681415, 0.051991150442477874, 0.05641592920353982, 0.0597345132743362) s
5 406 M
(86, 0.0420353982300885]) s
5 395 M
(Average probability of a variable or negation: 0.047619047619) s
5 384 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.048795003) s
5 373 M
(6474) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(------------------) s
5 340 M
(From PCP theorem and [Hastad] inapproximability result based on it, if m^3*n^2*p^4 > 7/8*m the) s
5 329 M
(n P=NP.) s
5 318 M
(=> m^2*n^2*p^4 > 7/8) s
5 307 M
(=> p^4 > 7/\(8m^2n^2\)) s
5 296 M
(=> if p > 0.96716821/sqrt\(m*n\) then P=NP.) s
5 274 M
(In previous iteration, y and sumfreq print the frequencies of literals chosen so far at random) s
5 263 M
( \(which are almost evenly distributed\) and observed average probability of choosing a literal ) s
5 252 M
(is 0.047619 whereas the required Random Matrix analysis probability for exact SAT is somewhat ) s
5 241 M
(higher at 0.048795. Substituting the observed probability 0.047619 for 21 variables and 20 cla) s
5 230 M
(uses:) s
5 219 M
(        Expected number of clauses satisfied = \(20\)^3*\(21\)^2*\(0.047619\)^4 = 18.1405 clauses or) s
5 208 M
( 90.7025%) s
5 197 M
(implying the MaxSAT for 21 variables and 20 clauses converges to 90.7025% asymptotically ad in) s
5 186 M
(finitum.) s
5 164 M
(The inequality m^3*n^2*p^4 > 7/8*m relates hardness and randomness because probability distrib) s
5 153 M
(ution for p is directly related to uniformity and k-wise independence of pseudorandom \(number\)) s
5 142 M
( generator for choosing a literal at random. Presently the randomness depends on linux PRNG. I) s
5 131 M
(f there exists a pseudorandom number generator corresponding to probability p > 0.96716821/sqr) s
5 120 M
(t\(m*n\) then P=NP.) s
5 98 M
(For a binary valued random variable X, bias\(X\) is defined as Pr\(X=0\)-Pr\(X=1\) <= epsilon. Epsil) s
5 87 M
(on biased pseudorandom generators \(e-PRG\) are functions G:{0,1}^l->{0,1}^n expanding seed of l) s
5 76 M
(ength l to a pseudorandom string of length n and for all subsets Si \(which are random variable) s
5 65 M
(s\) of {0,1}^n, bias\(Si\) <= epsilon. For uniform distributions, bias of all subset random varia) s
5 54 M
(bles is zero excluding the empty set. This is equivalent to: Bias\(UniformDistribution\)-Bias\(e-) s
5 43 M
(PRGDistribution\) <= epsilon. For random matrix approximate SAT solver probability p, previous ) s
5 32 M
(condition of probability of choosing a positive or negative literal in a random SAT, p > 0.967) s
5 21 M
(16821/sqrt\(m*n\) for P=NP to hold, differs from the uniform probability distribution 1/2n \(assu) s
5 10 M
(ming n variables and n negations of them\). This implies an epsilon biased PRG of bias p-\(1-p\) ) s
_R
S
%%Page: (281) 281
%%BeginPageSetup
_S
18 36 translate
/pagenum 281 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (281) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(= 2p-1 = [1.93433642/sqrt\(m*n\)] - 1 for all possible values of m and n, must exist for P=NP. P) s
5 681 M
(RG described in reference has bias \(n-1\)/2^l. Equating 2p-1 = \(n-1\)/2^l and solving for seed l) s
5 670 M
(ength l gives an expression of required seed length l in terms of number of clauses m.) s
5 648 M
(Let Xi be the random variable for choosing the literal xi. If literal xi is chosen Xi=1, else ) s
5 637 M
(Xi=0. Therefore bias\(ePRG\)=Pr\(Xi=1\)-Pr\(Xi=0\). But Pr\(Xi=1\) = p = 0.96716821/sqrt\(m*n\) for choo) s
5 626 M
(sing a literal from random matrix analysis derived previously for 7/8 approximation to exist.) s
5 604 M
(An example application of Epsilon biased Pseudorandom Generator in reference 457.1 below :) s
5 593 M
(------------------------------------------------------------------------------------------) s
5 582 M
(=> bias\(ePRG\)=p-\(1-p\)=1.94/sqrt\(m*n\) - 1.) s
5 571 M
(Equating this to the ePRG bias \(n-1\)/2^l:) s
5 560 M
(=> \(n-1\)/2^l = [1.94/sqrt\(m*n\)] - 1) s
5 549 M
(=> length of the seed l in ePRG = log\([\(n-1\)*sqrt\(m*n\)]/[1.94-sqrt\(m*n\)]) s
5 538 M
(Absurdity is for length of the seed to be valid logarithm, sqrt\(m*n\) < 1.94 => m*n < 4 which i) s
5 527 M
(s possible only for m=1 and n=3, the trivial 1 clause 3SAT. This necessitates transforming pre) s
5 516 M
(vious into an inequality as below:) s
5 505 M
(        2^2l * \(1.94\)^2) s
5 494 M
(        ----------------- < m) s
5 483 M
(        n*[2^l + \(n-1\)]^2) s
5 472 M
(For large n, inequality tends to a surd 0 < m.) s
5 450 M
(An example application of Epsilon biased Pseudorandom Generator in reference 457.2 below :) s
5 439 M
(------------------------------------------------------------------------------------------) s
5 428 M
(=> bias\(ePRG\)=p-\(1-p\)=1.94/sqrt\(m*n\) - 1.) s
5 417 M
(Other ePRG \(Mossel-Shpilka-Trevisan\) bias 1/2^\(kn/c^4\) mentioned in the references relates m a) s
5 406 M
(nd n for random matrix CNF SAT solver bias as:) s
5 395 M
(        \(1.94\)^2 * 2^\(2kn/c^4\)) s
5 384 M
(        ------------------------ < m) s
5 373 M
(        n*\(1 + 2^\(kn/c^4\)\)^2) s
5 362 M
(For large n, inequality tends to a surd 0 < m.) s
5 340 M
(Both these prescribe a relation between n and m for small n and for large number of variables ) s
5 329 M
(both ePRGs fit to the random matrix CNF SAT solver least squares bias for P=NP to hold. This i) s
5 318 M
(mplies there are random SAT instances for small n which might not create literals with probabi) s
5 307 M
(lity 0.96716821/sqrt\(m*n\) a hindrance to conclude that P=NP and defining this small n is non-t) s
5 296 M
(rivial.) s
5 274 M
(Generic Epsilon biased Pseudorandom Generator of bias epsilon=1/x for x > 0:) s
5 263 M
(--------------------------------------------------------------------) s
5 252 M
(Consider a fictitious Epsilon biased Pseudorandom Generator of bias epsilon=1/x, x > 0.) s
5 241 M
(Lowerbounding bias:) s
5 230 M
(        [1.94/sqrt\(m*n\)] - 1 <= 1/x) s
5 219 M
(which reduces to:) s
5 208 M
(        m >= \(1.94\)^2*x^2/[n*\(x+1\)^2]) s
5 197 M
(This implies for any epsilon biased PRG, there exists number of clauses m below which Approxim) s
5 186 M
(ate SAT solver solves less than 7/8 fraction of the clauses. Largest possible value of m occur) s
5 175 M
(s for n=1 and x tending to infinity => m >= 1.94*1.94 \(or\) m >= 3.7636 i.e all CNF random SAT ) s
5 164 M
(instances of 4 or less number of clauses can not be solved by least squares to get atleast 7/8) s
5 153 M
(-approximation.) s
5 131 M
(Number of possible random k-SAT instances of m clauses and n variables = \(nP3 * 2\)^m because e) s
5 120 M
(ach clause has either a literal or its negation, not both. Variables and their negation form a) s
5 109 M
( set of ordered pairs \(x1,x1'\),\(x2,x2'\),...,\(xn,xn'\) from which 3 ordered pairs are chosen per) s
5 98 M
( clause in nP3 ways and variable or its negation is chosen from each ordered pair thereby crea) s
5 87 M
(ting nP3 * 2 possible clauses. An m clause random 3SAT has thus \(nP3 * 2\)^m possibilities.) s
5 65 M
(Number of possible 4 clause 3SATs are = \(nP3 * 2\)^4. Therefore fraction of random SAT instance) s
5 54 M
(s not solvable for 7/8 approximation is:) s
5 43 M
(        \(nP3 * 2\)^4             1) s
5 32 M
(        -----------     =  -------------) s
5 21 M
(        \(nP3 * 2\)^m        \(n*\(n-1\)*\(n-2\)\)^\(m-4\)) s
5 10 M
(which is negligible for large m and n but non-trivial for small m and n.) s
_R
S
%%Page: (282) 282
%%BeginPageSetup
_S
18 36 translate
/pagenum 282 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (282) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(Number of variables in 4 clause 3SAT is at the maximum 12. Thus this small subset can be solve) s
5 670 M
(d in a constant time because m and n are fixed at 4 and 12 respectively.) s
5 648 M
([Caution: Previous derivation is still experimental with possible errors and assumes an epsilo) s
5 637 M
(n PRG of bias atleast [1.94/sqrt\(m*n\)]-1 exists. If it indeed does, then it could imply P=NP a) s
5 626 M
(nd is in direct conflict with Majority version of XOR lemma - if numerator hardness does not c) s
5 615 M
(ancel out - for hardness amplification described earlier and caveats therein which implies P !) s
5 604 M
(= NP.]) s
5 582 M
(References:) s
5 571 M
(----------) s
5 560 M
(457.1 Epsilon biased Pseudo Random Generators - [Advanced Complexity Theory Course Notes - Die) s
5 549 M
(ter] - http://pages.cs.wisc.edu/~dieter/Courses/2008s-CS880/Scribes/lecture21.pdf) s
5 538 M
(457.2 Epsilon biased Pseudo Random Generator in NC0 - every pseudorandom bit depends only on 5) s
5 527 M
( bits of seed - [Elchanan Mossel, Amir Shpilka, Luca Trevisan] - https://www.stat.berkeley.edu) s
5 516 M
(/~mossel/publications/prginnc0.pdf - "...  Then we present an \316\265-biased generator mapping n bi) s
5 505 M
(ts into cn bits such that \316\265 = 1/2^\342\\204\246\(n/c^4\) and every bit of the output depends only on k) s
5 494 M
( = 5 bits of the seed. The parameter c can be chosen arbitrarily, and may depend on n. The con) s
5 483 M
(stant in the \342\\204\246\(\) notation does not depend on c ...") s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(------------------------------------------------) s
5 439 M
(458. \(THEORY\) Intrinsic Merit, Consensus Algorithms, Byzantine Failures and Level Playing Fiel) s
5 428 M
(d - 23 September 2017) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(------------------------------------------------) s
5 395 M
(So far Intrinsic merit of a text has been analyzed mostly in the context of connectedness and ) s
5 384 M
(meaningfulness of it. It assumes a document text-graph \(subgraph of an ontology like WordNet\) ) s
5 373 M
(obtained from the Ontology graph is implicitly agreed upon metric to measure merit i.e IM\(text) s
5 362 M
(\) = subgraph of Ontology, for some intrinsic merit algorithm IM. But the problem of "agreeing") s
5 351 M
( by stakeholders on some process is itself a non-trivial Consensus Problem which has been over) s
5 340 M
(looked so far. For example, merit measured by interview/examination question-answering or a co) s
5 329 M
(mpetition requires all parties to agree upon the terms, conditions and rules a priori. This is) s
5 318 M
( widely studied problem of Agreement or Consensus. Consensus is defined by:) s
5 307 M
(        * Agreement - all parties must agree on a correct process and its outcome) s
5 296 M
(        * Validity - if all correct processes receive same input value,they must all output sa) s
5 285 M
(me value) s
5 274 M
(        * Termination - all processes must eventually decide on an output value ) s
5 263 M
(There are realworld consensus implementations - Google Chubby Lock Service based on Paxos Cons) s
5 252 M
(ensus Protocol, Bitcoin's Proof-of-work hyperledgering which appends transactions of a node to) s
5 241 M
( common log in a distributed timestamp server etc., ensuring all participants agree. As oppose) s
5 230 M
(d to Majority voting which requires crossing just half-way mark in number of votes\(>50%\), Cons) s
5 219 M
(ensus requires complete agreement \(=100%\). Once 100% consensus is achieved on how to measure i) s
5 208 M
(ntrinsic merit, it is accepted as a standard and levels playing field for contestants. Consens) s
5 197 M
(us is most required in measuring human intrinsic merit than merit of documents. In other words) s
5 186 M
(, majority voting permits each voter to decide on his/her own volition. Each voter can have di) s
5 175 M
(fferent decision function\(boolean or non-boolean\). But Consensus requires all voters to reach ) s
5 164 M
(an agreement on a standardized decision function. Recursive Gloss Overlap algorithm and its en) s
5 153 M
(hancements to measure intrinsic merit from graph of text can be termed as "consensual" because) s
5 142 M
( connectedness implies meaningfulness by WordNet distance measures \(Resnick, Wu-Palmer, Jiang-) s
5 131 M
(Conrath etc.,\) and any text can be mapped to a subgraph of an ontology like WordNet and WordNe) s
5 120 M
(t has been accepted as a consensus peer-reviewed standard.) s
5 98 M
(Consensus can be impeded by presence of malicious nodes which spoof and send spurious votes kn) s
5 87 M
(own as Byzantine generals problem. A known result implies there is a consensus resilient to by) s
5 76 M
(zantine failures if number of faulty nodes is not above 33%. ) s
5 54 M
(References:) s
5 43 M
(----------) s
5 32 M
(458.1 Consensus Algorithms - https://en.wikipedia.org/wiki/Consensus_\(computer_science\)) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (283) 283
%%BeginPageSetup
_S
18 36 translate
/pagenum 283 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (283) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(------------------------------------------------) s
5 681 M
(459. \(THEORY\) Random Matrix Rounding for Least Squares Approximate CNFSAT Solver, Distinguishe) s
5 670 M
(r for Pseudorandomness, Majority Hardness Lemma) s
5 659 M
(- related to 318, 457 - 13 October 2017) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(------------------------------------------------) s
5 626 M
(Existence of Pseudorandom generators \(PRG\) implies P != NP. Proof of this is by contradiction:) s
5 615 M
( If there exists a distinguisher which is able to discern perfect randomness from any PRG in p) s
5 604 M
(olynomial time then existence of PRGs which fool a distinguisher is ruled out i.e Pr[A\(x\)=1]-P) s
5 593 M
(r[A\(G\(s\)\)=1] >> epsilon where x is a perfect random string in {0,1}^n , A is a distinguisher a) s
5 582 M
(nd G is a function extending a seed s of length m to n - G:{0,1}^m to {0,1}^n , m < n .) s
5 560 M
(Majority Voting Hardness Lemma is an adaptation of Yao's XOR Lemma for hardness amplification ) s
5 549 M
(from weak voting functions composed to Majority function \(related to KRW Conjecture and Boolea) s
5 538 M
(n Function Composition\). Hardness of a boolean function is the error in approximating the func) s
5 527 M
(tion f by a boolean circuit C defined by probability Pr[f\(x\) != C\(x\)]. Majority Hardness Lemma) s
5 516 M
( implies hardness of the majority+votingfunction composition amplifies the hardness compared t) s
5 505 M
(o individually weak voters and inverting this composition \(MajorityInverse: finding who voted ) s
5 494 M
(in favour or against\) is extremely hard to approximate by a circuit and thus in average case c) s
5 483 M
(ould be an one-way function composition. Being one-way implies hard-to-distinguish PRGs can be) s
5 472 M
( constructed from this composition.) s
5 450 M
(Random Matrix Rounding for Least Squares Approximate CNFSAT Solver in previous sections derive) s
5 439 M
(s an expected probability of choosing a literal in a CNF for ExactSAT\(when all clauses are sat) s
5 428 M
(isfied\). This expected random matrix probability \(mentioned as RMLSQR henceforth: 1/sqrt\(m*n\)\)) s
5 417 M
( corresponds to some hypothetical pseudorandom generator PRG1.) s
5 395 M
(Probability of choosing a CNF by RMLSQR \(there are 3m literals per 3CNF\) = \(1/[mn]\)^1.5m) s
5 373 M
(Alternatively,number of all possible random 3CNF SATs of m clauses and n variables = \(n * n * ) s
5 362 M
(n\)^m = n^\(3m\)) s
5 340 M
(Probability of choosing a CNF from all possible n^\(3m\) random 3SATs in this uniform distributi) s
5 329 M
(on is = \(1/n\)^3m) s
5 307 M
(Thus there are two possible probability distributions for choosing a random 3SAT: \(1/[mn]\)^1.5) s
5 296 M
(m required by Random Matrix rounding and \(1/n\)^3m for uniform. Probability distributions and P) s
5 285 M
(seudorandom generators underlying these distributions are directly related.) s
5 263 M
(If m=n\(number of clauses and number of variables are equal\):) s
5 252 M
(------------------------------------------------------------) s
5 241 M
(\(1/[nn]\)^1.5n = \(1/n\)^3n and thus both RMLSQR and Uniform distributions are same implying simi) s
5 230 M
(lar pseudorandomness in RMLSQR and Uniform and distinguisher is fooled.This is a promise speci) s
5 219 M
(al case described earlier and does not suffice.) s
5 197 M
(If m !=n e.g m >> n \(this is most prevalent setting where number of clauses are huge and varia) s
5 186 M
(bles are relatively less\):) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(--------------------------) s
5 153 M
(\(1/[mn]\)^1.5m < \(1/n\)^3m) s
5 142 M
(\(1/m\)^1.5m * \(1/n\)^1.5m < \(1/n\)^1.5m * \(1/n\)^1.5m) s
5 131 M
(\(1/m\)^1.5m < \(1/n\)^1.5m) s
5 120 M
(1/m < 1/n) s
5 109 M
(=> m > n) s
5 87 M
(When number of clauses m differs from number of variables n, RMLSQR and Uniform distributions ) s
5 76 M
(are dissimilar implying there are two different) s
5 65 M
(randomness-es: PRG1 for RMLSQR and PRG2\(or perfect randomness\) for Uniform. Distinguisher for ) s
5 54 M
(these two random generators has the probability of success defined by difference of the probab) s
5 43 M
(ility distributions for RMLSQR and Uniform = \(1/n\)^1.5m * [\(1/n\)^1.5m - \(1/m\)^1.5m] i.e when t) s
5 32 M
(he number of clauses is high compared to number of variables, this difference is significant a) s
5 21 M
(nd distinguisher succeeds with high probability implying PRG1 is not pseudorandom and altogeth) s
5 10 M
(er PRGs may not exist at all. This coincides with > 87.5% of clauses getting satisfied breakin) s
_R
S
%%Page: (284) 284
%%BeginPageSetup
_S
18 36 translate
/pagenum 284 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (284) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(g 7/8 barrier in average case and could be synonymous to Karloff-Zwick SDP relaxation algorith) s
5 681 M
(m for > 7/8 MAXSAT. This need not contradict majority+voterfunction composition hardness becau) s
5 670 M
(se MajorityInverse is a depth-2 #P-Complete counting problem \(first step counts and inverts vo) s
5 659 M
(ter inputs to majority and second step counts and inverts assignments per voter and hardness i) s
5 648 M
(s a function of sensitivity\) and could be beyond P != NP purview \(i.e. There could be pseudora) s
5 637 M
(ndom generators indistinguishable only by an algorithm harder than NP\).) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(------------------------------------------------) s
5 593 M
(460. \(THEORY and FEATURE\) Random Matrix Rounding for Least Squares Approximate CNFSAT Solver -) s
5 582 M
( various clause-variable permutations - numbers, some anomalous - 25 October 2017) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(------------------------------------------------) s
5 549 M
(Following are some random 3SAT iteration MAXSAT percentage numbers for multiple combinations o) s
5 538 M
(f number of variables and clauses. Observed average probabilities of linux PRNG have some anom) s
5 527 M
(alies when substituted in random matrix expected number of satisfied clauses \(>100%\). Reasons ) s
5 516 M
(for) s
5 505 M
(this could be error in estimating linux PRNG probability distribution. Deficiencies of Linux P) s
5 494 M
(RNGs - especially randomness extractor from SHA - are already analyzed \(random.c\) in https://e) s
5 483 M
(print.iacr.org/2005/029.pdf - [BoazBarak-ShaiHalevi]) s
5 472 M
( ) s
5 461 M
(##############################################) s
5 450 M
(17 variables, 18 clauses - 1066 random 3SATs:) s
5 439 M
(##############################################) s
5 428 M
(--------------------------------------------------------------) s
5 417 M
(Iteration : 1066) s
5 406 M
(--------------------------------------------------------------) s
5 395 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 384 M
(--------------------------------------------------------------) s
5 373 M
(a: [[0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 362 M
( [0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 351 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]) s
5 340 M
( [0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0]) s
5 329 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 318 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 307 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]) s
5 296 M
( [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 285 M
( [0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0]) s
5 274 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 263 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 252 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 241 M
( [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]) s
5 230 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0]) s
5 219 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 208 M
( [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 197 M
( [0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 186 M
( [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0]]) s
5 175 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 164 M
(a.shape: \(18, 17\)) s
5 153 M
(b.shape: \(18,\)) s
5 142 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  0.00000000e+00,   1.00000000e+00,   8.00000000e-01,) s
5 131 M
(         1.00000000e+00,   2.00000000e-01,   1.00000000e+00,) s
5 120 M
(         1.00000000e+00,   6.66666667e-01,   6.00000000e-01,) s
5 109 M
(         0.00000000e+00,   0.00000000e+00,  -6.66666667e-01,) s
5 98 M
(         6.00000000e-01,   1.89190298e-14,   6.66666667e-01,) s
5 87 M
(         4.00000000e-01,   0.00000000e+00]\), 2, 11, 1.653279569018299, 9.190906242470613e-13, ) s
5 76 M
(4.690415759823429, 4.19738295792774, 2.625515822335343\)) s
5 65 M
(Random 3CNF: \(x3 + !x11 + !x16\) * \(!x16 + x3 + x5\) * \(x6 + !x9 + !x4\) * \(x15 + !x10 + x8\) * \(!) s
5 54 M
(x14 + x2 + !x8\) * \(!x11 + !x10 + !x3\) * \(!x9 + x2 + x14\) * \(!x1 + x3 + !x7\) * \(x2 + x8 + x12\) ) s
5 43 M
(* \(!x8 + !x1 + !x13\) * \(!x10 + !x8 + x9\) * \(!x12 + x4 + !x8\) * \(!x7 + x8 + !x4\) * \(!x8 + x16 +) s
5 32 M
( x9\) * \(!x12 + !x7 + x15\) * \(!x1 + x7 + !x14\) * \(x3 + x9 + !x12\) * \(!x11 + x13 + x16\)) s
5 21 M
(Assignment computed from least squares: [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0]) s
5 10 M
(CNF Formula: [['x3', '!x11', '!x16'], ['!x16', 'x3', 'x5'], ['x6', '!x9', '!x4'], ['x15', '!x1) s
_R
S
%%Page: (285) 285
%%BeginPageSetup
_S
18 36 translate
/pagenum 285 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (285) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(0', 'x8'], ['!x14', 'x2', '!x8'], ['!x11', '!x10', '!x3'], ['!x9', 'x2', 'x14'], ['!x1', 'x3',) s
5 681 M
( '!x7'], ['x2', 'x8', 'x12'], ['!x8', '!x1', '!x13'], ['!x10', '!x8', 'x9'], ['!x12', 'x4', '!) s
5 670 M
(x8'], ['!x7', 'x8', '!x4'], ['!x8', 'x16', 'x9'], ['!x12', '!x7', 'x15'], ['!x1', 'x7', '!x14') s
5 659 M
(], ['x3', 'x9', '!x12'], ['!x11', 'x13', 'x16']]) s
5 648 M
(Number of clauses satisfied: 18.0) s
5 637 M
(Number of clauses : 18) s
5 626 M
(Assignment satisfied: 1) s
5 615 M
(Percentage of clauses satisfied: 100.0) s
5 604 M
(Percentage of CNFs satisfied so far: 61.0121836926) s
5 593 M
(Average Percentage of Clauses per CNF satisfied: 97.3341664063) s
5 582 M
(y= 1675) s
5 571 M
(sumfreq= 28722) s
5 560 M
(y= 1683) s
5 549 M
(sumfreq= 28722) s
5 538 M
(y= 1716) s
5 527 M
(sumfreq= 28722) s
5 516 M
(y= 1750) s
5 505 M
(sumfreq= 28722) s
5 494 M
(y= 1699) s
5 483 M
(sumfreq= 28722) s
5 472 M
(y= 1690) s
5 461 M
(sumfreq= 28722) s
5 450 M
(y= 1697) s
5 439 M
(sumfreq= 28722) s
5 428 M
(y= 1662) s
5 417 M
(sumfreq= 28722) s
5 406 M
(y= 1732) s
5 395 M
(sumfreq= 28722) s
5 384 M
(y= 1740) s
5 373 M
(sumfreq= 28722) s
5 362 M
(y= 1687) s
5 351 M
(sumfreq= 28722) s
5 340 M
(y= 1669) s
5 329 M
(sumfreq= 28722) s
5 318 M
(y= 1677) s
5 307 M
(sumfreq= 28722) s
5 296 M
(y= 1662) s
5 285 M
(sumfreq= 28722) s
5 274 M
(y= 1664) s
5 263 M
(sumfreq= 28722) s
5 252 M
(y= 1660) s
5 241 M
(sumfreq= 28722) s
5 230 M
(y= 1659) s
5 219 M
(sumfreq= 28722) s
5 208 M
(y= 1716) s
5 197 M
(sumfreq= 28896) s
5 186 M
(y= 1782) s
5 175 M
(sumfreq= 28896) s
5 164 M
(y= 1660) s
5 153 M
(sumfreq= 28896) s
5 142 M
(y= 1714) s
5 131 M
(sumfreq= 28896) s
5 120 M
(y= 1704) s
5 109 M
(sumfreq= 28896) s
5 98 M
(y= 1716) s
5 87 M
(sumfreq= 28896) s
5 76 M
(y= 1721) s
5 65 M
(sumfreq= 28896) s
5 54 M
(y= 1688) s
5 43 M
(sumfreq= 28896) s
5 32 M
(y= 1679) s
5 21 M
(sumfreq= 28896) s
5 10 M
(y= 1653) s
_R
S
%%Page: (286) 286
%%BeginPageSetup
_S
18 36 translate
/pagenum 286 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (286) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sumfreq= 28896) s
5 681 M
(y= 1662) s
5 670 M
(sumfreq= 28896) s
5 659 M
(y= 1686) s
5 648 M
(sumfreq= 28896) s
5 637 M
(y= 1702) s
5 626 M
(sumfreq= 28896) s
5 615 M
(y= 1673) s
5 604 M
(sumfreq= 28896) s
5 593 M
(y= 1735) s
5 582 M
(sumfreq= 28896) s
5 571 M
(y= 1678) s
5 560 M
(sumfreq= 28896) s
5 549 M
(y= 1727) s
5 538 M
(sumfreq= 28896) s
5 527 M
(Probability of Variables chosen in CNFs so far: [0.058317665900703294, 0.05859619803634844, 0.) s
5 516 M
(05974514309588469, 0.06092890467237658, 0.059153262307638746, 0.05883991365503795, 0.059083629) s
5 505 M
(273727456, 0.057865051180279924, 0.06030220736717499, 0.06058073950282014, 0.05873546410417102) s
5 494 M
(, 0.05810876679896943, 0.058387298934614584, 0.057865051180279924, 0.057934684214191214, 0.057) s
5 483 M
(79541814636864, 0.057760601629412996]) s
5 472 M
(Probability of Negations chosen in CNFs so far: [0.059385382059800665, 0.061669435215946845, 0) s
5 461 M
(.05744739756367663, 0.05931616832779624, 0.058970099667774084, 0.059385382059800665, 0.0595584) s
5 450 M
(1638981174, 0.05841638981173865, 0.058104928017718716, 0.057205149501661126, 0.057516611295681) s
5 439 M
(065, 0.05834717607973422, 0.058900885935769656, 0.057897286821705425, 0.06004291251384274, 0.0) s
5 428 M
(580703211517165, 0.059766057585825025]) s
5 417 M
(Average probability of a variable or negation: 0.0588235294118) s
5 406 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.057166195) s
5 395 M
(0475) s
5 373 M
(#############################################) s
5 362 M
(18 variables, 19 clauses - 137 random 3SATs:) s
5 351 M
(#############################################) s
5 340 M
(--------------------------------------------------------------) s
5 329 M
(Iteration : 137) s
5 318 M
(--------------------------------------------------------------) s
5 307 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 296 M
(--------------------------------------------------------------) s
5 285 M
(a: [[1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 274 M
( [0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0]) s
5 263 M
( [0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0]) s
5 252 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 241 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0]) s
5 230 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]) s
5 219 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 208 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1]) s
5 197 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 186 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 175 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 164 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]) s
5 153 M
( [0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0]) s
5 142 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 131 M
( [0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0]) s
5 120 M
( [0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0]) s
5 109 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 98 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 87 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]]) s
5 76 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 65 M
(a.shape: \(19, 18\)) s
5 54 M
(b.shape: \(19,\)) s
5 43 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  6.66666667e-01,   1.00000000e+00,  -1.11111111e-01,) s
5 32 M
(         3.33333333e-01,   0.00000000e+00,   1.00000000e+00,) s
5 21 M
(         4.44444445e-01,   1.66666667e+00,   8.93039852e-11,) s
5 10 M
(         0.00000000e+00,   0.00000000e+00,   6.66666667e-01,) s
_R
S
%%Page: (287) 287
%%BeginPageSetup
_S
18 36 translate
/pagenum 287 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (287) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        -6.66666666e-01,   0.00000000e+00,  -5.55555556e-01,) s
5 681 M
(         6.66666667e-01,  -8.43769499e-15,   1.00000000e+00]\), 2, 13, 2.0816659994661344, 5.02) s
5 670 M
(7196399901854e-09, 5.2915026221291805, 4.8051011045747947, 2.8609762647129626\)) s
5 659 M
(Random 3CNF: \(x4 + x1 + !x7\) * \(!x3 + x6 + x9\) * \(x3 + x12 + x7\) * \(!x13 + !x4 + !x10\) * \(x12 ) s
5 648 M
(+ x16 + !x6\) * \(x12 + !x17 + !x14\) * \(x16 + !x2 + !x17\) * \(x17 + x18 + !x7\) * \(x16 + !x2 + x4\)) s
5 637 M
( * \(x6 + !x17 + !x18\) * \(!x14 + !x5 + !x17\) * \(x2 + !x14 + x17\) * \(x6 + x16 + x13\) * \(!x12 + !) s
5 626 M
(x10 + !x7\) * \(x13 + !x12 + x8\) * \(x15 + x8 + x3\) * \(!x3 + !x9 + !x7\) * \(x6 + !x16 + !x13\) * \(x) s
5 615 M
(18 + !x6 + !x2\)) s
5 604 M
(Assignment computed from least squares: [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1]) s
5 593 M
(CNF Formula: [['x4', 'x1', '!x7'], ['!x3', 'x6', 'x9'], ['x3', 'x12', 'x7'], ['!x13', '!x4', ') s
5 582 M
(!x10'], ['x12', 'x16', '!x6'], ['x12', '!x17', '!x14'], ['x16', '!x2', '!x17'], ['x17', 'x18',) s
5 571 M
( '!x7'], ['x16', '!x2', 'x4'], ['x6', '!x17', '!x18'], ['!x14', '!x5', '!x17'], ['x2', '!x14',) s
5 560 M
( 'x17'], ['x6', 'x16', 'x13'], ['!x12', '!x10', '!x7'], ['x13', '!x12', 'x8'], ['x15', 'x8', ') s
5 549 M
(x3'], ['!x3', '!x9', '!x7'], ['x6', '!x16', '!x13'], ['x18', '!x6', '!x2']]) s
5 538 M
(Number of clauses satisfied: 19.0) s
5 527 M
(Number of clauses : 19) s
5 516 M
(Assignment satisfied: 1) s
5 505 M
(Percentage of clauses satisfied: 100.0) s
5 494 M
(Percentage of CNFs satisfied so far: 52.8985507246) s
5 483 M
(Average Percentage of Clauses per CNF satisfied: 96.7581998474) s
5 472 M
(y= 220) s
5 461 M
(sumfreq= 3952) s
5 450 M
(y= 243) s
5 439 M
(sumfreq= 3952) s
5 428 M
(y= 252) s
5 417 M
(sumfreq= 3952) s
5 406 M
(y= 230) s
5 395 M
(sumfreq= 3952) s
5 384 M
(y= 195) s
5 373 M
(sumfreq= 3952) s
5 362 M
(y= 203) s
5 351 M
(sumfreq= 3952) s
5 340 M
(y= 231) s
5 329 M
(sumfreq= 3952) s
5 318 M
(y= 225) s
5 307 M
(sumfreq= 3952) s
5 296 M
(y= 224) s
5 285 M
(sumfreq= 3952) s
5 274 M
(y= 228) s
5 263 M
(sumfreq= 3952) s
5 252 M
(y= 221) s
5 241 M
(sumfreq= 3952) s
5 230 M
(y= 224) s
5 219 M
(sumfreq= 3952) s
5 208 M
(y= 205) s
5 197 M
(sumfreq= 3952) s
5 186 M
(y= 216) s
5 175 M
(sumfreq= 3952) s
5 164 M
(y= 199) s
5 153 M
(sumfreq= 3952) s
5 142 M
(y= 206) s
5 131 M
(sumfreq= 3952) s
5 120 M
(y= 203) s
5 109 M
(sumfreq= 3952) s
5 98 M
(y= 227) s
5 87 M
(sumfreq= 3952) s
5 76 M
(y= 207) s
5 65 M
(sumfreq= 3914) s
5 54 M
(y= 218) s
5 43 M
(sumfreq= 3914) s
5 32 M
(y= 214) s
5 21 M
(sumfreq= 3914) s
5 10 M
(y= 220) s
_R
S
%%Page: (288) 288
%%BeginPageSetup
_S
18 36 translate
/pagenum 288 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (288) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sumfreq= 3914) s
5 681 M
(y= 223) s
5 670 M
(sumfreq= 3914) s
5 659 M
(y= 204) s
5 648 M
(sumfreq= 3914) s
5 637 M
(y= 220) s
5 626 M
(sumfreq= 3914) s
5 615 M
(y= 233) s
5 604 M
(sumfreq= 3914) s
5 593 M
(y= 203) s
5 582 M
(sumfreq= 3914) s
5 571 M
(y= 210) s
5 560 M
(sumfreq= 3914) s
5 549 M
(y= 234) s
5 538 M
(sumfreq= 3914) s
5 527 M
(y= 208) s
5 516 M
(sumfreq= 3914) s
5 505 M
(y= 239) s
5 494 M
(sumfreq= 3914) s
5 483 M
(y= 180) s
5 472 M
(sumfreq= 3914) s
5 461 M
(y= 205) s
5 450 M
(sumfreq= 3914) s
5 439 M
(y= 232) s
5 428 M
(sumfreq= 3914) s
5 417 M
(y= 259) s
5 406 M
(sumfreq= 3914) s
5 395 M
(y= 205) s
5 384 M
(sumfreq= 3914) s
5 373 M
(Probability of Variables chosen in CNFs so far: [0.05566801619433198, 0.06148785425101214, 0.0) s
5 362 M
(6376518218623482, 0.05819838056680162, 0.049342105263157895, 0.0513663967611336, 0.05845141700) s
5 351 M
(4048586, 0.056933198380566805, 0.05668016194331984, 0.057692307692307696, 0.05592105263157895,) s
5 340 M
( 0.05668016194331984, 0.05187246963562753, 0.05465587044534413, 0.05035425101214575, 0.0521255) s
5 329 M
(0607287449, 0.0513663967611336, 0.05743927125506073]) s
5 318 M
(Probability of Negations chosen in CNFs so far: [0.05288707204905468, 0.05569749616760347, 0.0) s
5 307 M
(54675523760858456, 0.05620848237097598, 0.05697496167603475, 0.052120592743995914, 0.056208482) s
5 296 M
(37097598, 0.05952989269289729, 0.051865099642309655, 0.05365355135411344, 0.05978538579458355,) s
5 285 M
( 0.05314256515074093, 0.061062851303014816, 0.045988758303525806, 0.052376085845682166, 0.0592) s
5 274 M
(7439959121104, 0.06617271333673991, 0.052376085845682166]) s
5 263 M
(Average probability of a variable or negation: 0.0555555555556) s
5 252 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.054073807) s
5 241 M
(0436) s
5 219 M
(############################################################) s
5 208 M
(19 variables, 18 clauses - 34 random 3SATs) s
5 197 M
(############################################################) s
5 186 M
(--------------------------------------------------------------) s
5 175 M
(Iteration : 34) s
5 164 M
(--------------------------------------------------------------) s
5 153 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 142 M
(--------------------------------------------------------------) s
5 131 M
(a: [[0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0]) s
5 120 M
( [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 109 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]) s
5 98 M
( [0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 87 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 76 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]) s
5 65 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 54 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0]) s
5 43 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 32 M
( [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 21 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0]) s
5 10 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1]) s
_R
S
%%Page: (289) 289
%%BeginPageSetup
_S
18 36 translate
/pagenum 289 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (289) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 681 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 670 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 659 M
( [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 648 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 637 M
( [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]) s
5 626 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 615 M
(a.shape: \(18, 19\)) s
5 604 M
(b.shape: \(18,\)) s
5 593 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,) s
5 582 M
(         1.00000000e+00,   1.00000000e+00,   1.00000000e+00,) s
5 571 M
(        -3.65332764e-15,   0.00000000e+00,   0.00000000e+00,) s
5 560 M
(         9.05525654e-15,   1.00000000e+00,   1.00000000e+00,) s
5 549 M
(         0.00000000e+00,   9.05525654e-15,   0.00000000e+00,) s
5 538 M
(        -1.00000000e+00,   1.00000000e+00,   3.34888367e-14,) s
5 527 M
(        -3.65332764e-15]\), 2, 12, 1.414213562373095, 2.093877713811129e-13, 4.795831523312719,) s
5 516 M
( 3.8125525032467102, 3.1622776601683884\)) s
5 505 M
(Random 3CNF: \(x4 + x14 + x10\) * \(!x2 + !x11 + x5\) * \(x16 + x2 + x17\) * \(!x8 + x11 + x7\) * \(!x5) s
5 494 M
( + x11 + !x14\) * \(x4 + x18 + !x7\) * \(x17 + !x6 + !x5\) * \(!x10 + x18 + x12\) * \(!x4 + x17 + !x11) s
5 483 M
(\) * \(!x8 + x1 + !x13\) * \(!x7 + x6 + x18\) * \(x11 + x19 + !x16\) * \(!x6 + x2 + !x3\) * \(!x1 + !x2 ) s
5 472 M
(+ !x8\) * \(!x13 + !x10 + !x7\) * \(!x6 + !x10 + x1\) * \(!x7 + x6 + !x10\) * \(x3 + !x18 + !x1\)) s
5 461 M
(Assignment computed from least squares: [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0,) s
5 450 M
( 0]) s
5 439 M
(CNF Formula: [['x4', 'x14', 'x10'], ['!x2', '!x11', 'x5'], ['x16', 'x2', 'x17'], ['!x8', 'x11') s
5 428 M
(, 'x7'], ['!x5', 'x11', '!x14'], ['x4', 'x18', '!x7'], ['x17', '!x6', '!x5'], ['!x10', 'x18', ) s
5 417 M
('x12'], ['!x4', 'x17', '!x11'], ['!x8', 'x1', '!x13'], ['!x7', 'x6', 'x18'], ['x11', 'x19', '!) s
5 406 M
(x16'], ['!x6', 'x2', '!x3'], ['!x1', '!x2', '!x8'], ['!x13', '!x10', '!x7'], ['!x6', '!x10', ') s
5 395 M
(x1'], ['!x7', 'x6', '!x10'], ['x3', '!x18', '!x1']]) s
5 384 M
(Number of clauses satisfied: 18.0) s
5 373 M
(Number of clauses : 18) s
5 362 M
(Assignment satisfied: 1) s
5 351 M
(Percentage of clauses satisfied: 100.0) s
5 340 M
(Percentage of CNFs satisfied so far: 80.0) s
5 329 M
(Average Percentage of Clauses per CNF satisfied: 98.7301587302) s
5 318 M
(y= 52) s
5 307 M
(sumfreq= 942) s
5 296 M
(y= 39) s
5 285 M
(sumfreq= 942) s
5 274 M
(y= 46) s
5 263 M
(sumfreq= 942) s
5 252 M
(y= 50) s
5 241 M
(sumfreq= 942) s
5 230 M
(y= 53) s
5 219 M
(sumfreq= 942) s
5 208 M
(y= 43) s
5 197 M
(sumfreq= 942) s
5 186 M
(y= 47) s
5 175 M
(sumfreq= 942) s
5 164 M
(y= 51) s
5 153 M
(sumfreq= 942) s
5 142 M
(y= 57) s
5 131 M
(sumfreq= 942) s
5 120 M
(y= 48) s
5 109 M
(sumfreq= 942) s
5 98 M
(y= 54) s
5 87 M
(sumfreq= 942) s
5 76 M
(y= 49) s
5 65 M
(sumfreq= 942) s
5 54 M
(y= 46) s
5 43 M
(sumfreq= 942) s
5 32 M
(y= 61) s
5 21 M
(sumfreq= 942) s
5 10 M
(y= 54) s
_R
S
%%Page: (290) 290
%%BeginPageSetup
_S
18 36 translate
/pagenum 290 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (290) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sumfreq= 942) s
5 681 M
(y= 44) s
5 670 M
(sumfreq= 942) s
5 659 M
(y= 48) s
5 648 M
(sumfreq= 942) s
5 637 M
(y= 49) s
5 626 M
(sumfreq= 942) s
5 615 M
(y= 51) s
5 604 M
(sumfreq= 942) s
5 593 M
(y= 44) s
5 582 M
(sumfreq= 948) s
5 571 M
(y= 42) s
5 560 M
(sumfreq= 948) s
5 549 M
(y= 43) s
5 538 M
(sumfreq= 948) s
5 527 M
(y= 43) s
5 516 M
(sumfreq= 948) s
5 505 M
(y= 61) s
5 494 M
(sumfreq= 948) s
5 483 M
(y= 60) s
5 472 M
(sumfreq= 948) s
5 461 M
(y= 49) s
5 450 M
(sumfreq= 948) s
5 439 M
(y= 60) s
5 428 M
(sumfreq= 948) s
5 417 M
(y= 43) s
5 406 M
(sumfreq= 948) s
5 395 M
(y= 57) s
5 384 M
(sumfreq= 948) s
5 373 M
(y= 47) s
5 362 M
(sumfreq= 948) s
5 351 M
(y= 60) s
5 340 M
(sumfreq= 948) s
5 329 M
(y= 49) s
5 318 M
(sumfreq= 948) s
5 307 M
(y= 41) s
5 296 M
(sumfreq= 948) s
5 285 M
(y= 60) s
5 274 M
(sumfreq= 948) s
5 263 M
(y= 46) s
5 252 M
(sumfreq= 948) s
5 241 M
(y= 53) s
5 230 M
(sumfreq= 948) s
5 219 M
(y= 41) s
5 208 M
(sumfreq= 948) s
5 197 M
(y= 49) s
5 186 M
(sumfreq= 948) s
5 175 M
(Probability of Variables chosen in CNFs so far: [0.055201698513800426, 0.041401273885350316, 0) s
5 164 M
(.04883227176220807, 0.05307855626326964, 0.05626326963906582, 0.045647558386411886, 0.04989384) s
5 153 M
(2887473464, 0.054140127388535034, 0.06050955414012739, 0.050955414012738856, 0.057324840764331) s
5 142 M
(21, 0.05201698513800425, 0.04883227176220807, 0.06475583864118896, 0.05732484076433121, 0.0467) s
5 131 M
(0912951167728, 0.050955414012738856, 0.05201698513800425, 0.054140127388535034]) s
5 120 M
(Probability of Negations chosen in CNFs so far: [0.046413502109704644, 0.04430379746835443, 0.) s
5 109 M
(04535864978902954, 0.04535864978902954, 0.06434599156118144, 0.06329113924050633, 0.0516877637) s
5 98 M
(1308017, 0.06329113924050633, 0.04535864978902954, 0.060126582278481014, 0.049578059071729956,) s
5 87 M
( 0.06329113924050633, 0.05168776371308017, 0.043248945147679324, 0.06329113924050633, 0.048523) s
5 76 M
(20675105485, 0.05590717299578059, 0.043248945147679324, 0.05168776371308017]) s
5 65 M
(Observed Average probability of a variable or negation: 0.0526315789474) s
5 54 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.054073807) s
5 43 M
(0436) s
5 32 M
(Percentage of Clauses satisfied - Observed Average Probability substituted in Random Matrix An) s
5 21 M
(alysis of Least Squared \(m^2*n^2*p^4\): 89.7506925208) s
_R
S
%%Page: (291) 291
%%BeginPageSetup
_S
18 36 translate
/pagenum 291 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (291) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(###########################################################) s
5 681 M
(16 variables, 15 clauses - 60 random 3SATs) s
5 670 M
(###########################################################) s
5 659 M
(--------------------------------------------------------------) s
5 648 M
(Iteration : 60) s
5 637 M
(--------------------------------------------------------------) s
5 626 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 615 M
(--------------------------------------------------------------) s
5 604 M
(a: [[0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]) s
5 593 M
( [0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0]) s
5 582 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 571 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 560 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]) s
5 549 M
( [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 538 M
( [0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0]) s
5 527 M
( [0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0]) s
5 516 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 505 M
( [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 494 M
( [0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0]) s
5 483 M
( [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]) s
5 472 M
( [0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0]) s
5 461 M
( [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0]) s
5 450 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]]) s
5 439 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 428 M
(a.shape: \(15, 16\)) s
5 417 M
(b.shape: \(15,\)) s
5 406 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  0.00000000e+00,   4.00000000e-01,   1.00000000e+00,) s
5 395 M
(         1.00000000e+00,  -2.00000000e-01,   1.00000000e+00,) s
5 384 M
(         0.00000000e+00,   6.00000000e-01,   6.00000000e-01,) s
5 373 M
(         8.00000000e-01,  -2.28234722e-16,   0.00000000e+00,) s
5 362 M
(         5.00000000e-01,   5.00000000e-01,   1.00000000e+00,) s
5 351 M
(         0.00000000e+00]\), 2, 9, 1.5491933384829675, 1.3065051242742054e-12, 4.242640687119285) s
5 340 M
(, 2.7186789946524619, 2.4617067250183342\)) s
5 329 M
(Random 3CNF: \(!x8 + x10 + !x11\) * \(x11 + x3 + !x8\) * \(!x10 + !x16 + !x1\) * \(!x8 + x6 + !x4\) * ) s
5 318 M
(\(x9 + !x1 + !x10\) * \(!x5 + !x1 + x6\) * \(!x6 + x2 + x8\) * \(x10 + x2 + x5\) * \(!x1 + !x8 + !x7\) *) s
5 307 M
( \(x3 + !x1 + !x12\) * \(x14 + !x11 + x13\) * \(!x1 + x10 + !x2\) * \(!x13 + x15 + x11\) * \(x9 + !x1 +) s
5 296 M
( x10\) * \(!x1 + x4 + !x8\)) s
5 285 M
(Assignment computed from least squares: [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0]) s
5 274 M
(CNF Formula: [['!x8', 'x10', '!x11'], ['x11', 'x3', '!x8'], ['!x10', '!x16', '!x1'], ['!x8', ') s
5 263 M
(x6', '!x4'], ['x9', '!x1', '!x10'], ['!x5', '!x1', 'x6'], ['!x6', 'x2', 'x8'], ['x10', 'x2', ') s
5 252 M
(x5'], ['!x1', '!x8', '!x7'], ['x3', '!x1', '!x12'], ['x14', '!x11', 'x13'], ['!x1', 'x10', '!x) s
5 241 M
(2'], ['!x13', 'x15', 'x11'], ['x9', '!x1', 'x10'], ['!x1', 'x4', '!x8']]) s
5 230 M
(Number of clauses satisfied: 15.0) s
5 219 M
(Number of clauses : 15) s
5 208 M
(Assignment satisfied: 1) s
5 197 M
(Percentage of clauses satisfied: 100.0) s
5 186 M
(Percentage of CNFs satisfied so far: 65.5737704918) s
5 175 M
(Average Percentage of Clauses per CNF satisfied: 97.1584699454) s
5 164 M
(y= 75) s
5 153 M
(sumfreq= 1376) s
5 142 M
(y= 95) s
5 131 M
(sumfreq= 1376) s
5 120 M
(y= 77) s
5 109 M
(sumfreq= 1376) s
5 98 M
(y= 79) s
5 87 M
(sumfreq= 1376) s
5 76 M
(y= 96) s
5 65 M
(sumfreq= 1376) s
5 54 M
(y= 89) s
5 43 M
(sumfreq= 1376) s
5 32 M
(y= 79) s
5 21 M
(sumfreq= 1376) s
5 10 M
(y= 94) s
_R
S
%%Page: (292) 292
%%BeginPageSetup
_S
18 36 translate
/pagenum 292 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (292) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sumfreq= 1376) s
5 681 M
(y= 86) s
5 670 M
(sumfreq= 1376) s
5 659 M
(y= 93) s
5 648 M
(sumfreq= 1376) s
5 637 M
(y= 101) s
5 626 M
(sumfreq= 1376) s
5 615 M
(y= 91) s
5 604 M
(sumfreq= 1376) s
5 593 M
(y= 92) s
5 582 M
(sumfreq= 1376) s
5 571 M
(y= 80) s
5 560 M
(sumfreq= 1376) s
5 549 M
(y= 77) s
5 538 M
(sumfreq= 1376) s
5 527 M
(y= 72) s
5 516 M
(sumfreq= 1376) s
5 505 M
(y= 93) s
5 494 M
(sumfreq= 1369) s
5 483 M
(y= 82) s
5 472 M
(sumfreq= 1369) s
5 461 M
(y= 82) s
5 450 M
(sumfreq= 1369) s
5 439 M
(y= 85) s
5 428 M
(sumfreq= 1369) s
5 417 M
(y= 84) s
5 406 M
(sumfreq= 1369) s
5 395 M
(y= 87) s
5 384 M
(sumfreq= 1369) s
5 373 M
(y= 84) s
5 362 M
(sumfreq= 1369) s
5 351 M
(y= 71) s
5 340 M
(sumfreq= 1369) s
5 329 M
(y= 80) s
5 318 M
(sumfreq= 1369) s
5 307 M
(y= 74) s
5 296 M
(sumfreq= 1369) s
5 285 M
(y= 90) s
5 274 M
(sumfreq= 1369) s
5 263 M
(y= 91) s
5 252 M
(sumfreq= 1369) s
5 241 M
(y= 100) s
5 230 M
(sumfreq= 1369) s
5 219 M
(y= 100) s
5 208 M
(sumfreq= 1369) s
5 197 M
(y= 88) s
5 186 M
(sumfreq= 1369) s
5 175 M
(y= 78) s
5 164 M
(sumfreq= 1369) s
5 153 M
(Probability of Variables chosen in CNFs so far: [0.05450581395348837, 0.0690406976744186, 0.05) s
5 142 M
(59593023255814, 0.057412790697674417, 0.06976744186046512, 0.06468023255813954, 0.057412790697) s
5 131 M
(674417, 0.06831395348837209, 0.0625, 0.06758720930232558, 0.07340116279069768, 0.0661337209302) s
5 120 M
(3256, 0.06686046511627906, 0.05813953488372093, 0.0559593023255814, 0.05232558139534884]) s
5 109 M
(Probability of Negations chosen in CNFs so far: [0.0679327976625274, 0.05989773557341125, 0.05) s
5 98 M
(989773557341125, 0.0620891161431702, 0.061358655953250546, 0.0635500365230095, 0.0613586559532) s
5 87 M
(50546, 0.05186267348429511, 0.05843681519357195, 0.05405405405405406, 0.06574141709276844, 0.0) s
5 76 M
(664718772826881, 0.07304601899196493, 0.07304601899196493, 0.06428049671292914, 0.056975894813) s
5 65 M
(73265]) s
5 54 M
(Observed Average probability of a variable or negation: 0.0625) s
5 43 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.064549722) s
5 32 M
(4368) s
5 21 M
(Percentage of Clauses satisfied - Observed Average Probability substituted in Random Matrix An) s
5 10 M
(alysis of Least Squared \(m^2*n^2*p^4\): 87.890625) s
_R
S
%%Page: (293) 293
%%BeginPageSetup
_S
18 36 translate
/pagenum 293 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (293) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(####################################################) s
5 670 M
(21 variables, 18 clauses - 6 random 3SATs) s
5 659 M
(####################################################) s
5 648 M
(--------------------------------------------------------------) s
5 637 M
(Iteration : 6) s
5 626 M
(--------------------------------------------------------------) s
5 615 M
(solve_SAT2\(\): Verifying satisfying assignment computed .....) s
5 604 M
(--------------------------------------------------------------) s
5 593 M
(a: [[0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0]) s
5 582 M
( [0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 571 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0]) s
5 560 M
( [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 549 M
( [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]) s
5 538 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 527 M
( [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]) s
5 516 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]) s
5 505 M
( [0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 494 M
( [0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0]) s
5 483 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 472 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]) s
5 461 M
( [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0]) s
5 450 M
( [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 439 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 428 M
( [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 417 M
( [0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]) s
5 406 M
( [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]) s
5 395 M
(b: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]) s
5 384 M
(a.shape: \(18, 21\)) s
5 373 M
(b.shape: \(18,\)) s
5 362 M
(solve_SAT2\(\): lstsq\(\): x: \(array\([  5.00000000e-01,   1.00000000e+00,   0.00000000e+00,) s
5 351 M
(         5.00000000e-01,   1.00000000e+00,   0.00000000e+00,) s
5 340 M
(        -2.63027447e-16,   1.00000000e+00,  -3.67351548e-14,) s
5 329 M
(         0.00000000e+00,   8.39171896e-12,   9.28077060e-17,) s
5 318 M
(         0.00000000e+00,  -3.67351548e-14,   0.00000000e+00,) s
5 307 M
(         2.65906351e-12,   1.00000000e+00,  -2.52681990e-14,) s
5 296 M
(         5.00000000e-01,   1.00000000e+00,   5.00000000e-01]\), 2, 12, 1.7320508075688767, 6.31) s
5 285 M
(85165416969518e-11, 4.898979485566356, 3.9602900491395312, 2.4494897427873532\)) s
5 274 M
(Random 3CNF: \(x11 + x8 + x16\) * \(!x12 + x11 + x5\) * \(!x4 + x17 + x18\) * \(x5 + !x18 + !x8\) * \(!) s
5 263 M
(x8 + x21 + x1\) * \(!x9 + !x20 + !x17\) * \(x4 + !x20 + x19\) * \(!x6 + x17 + !x12\) * \(x2 + x7 + !x9) s
5 252 M
(\) * \(x17 + x14 + x9\) * \(x2 + !x13 + !x6\) * \(!x13 + !x19 + x20\) * \(x20 + !x3 + x12\) * \(x8 + !x2) s
5 241 M
(0 + !x7\) * \(!x8 + !x2 + !x7\) * \(!x2 + !x9 + !x10\) * \(x5 + !x1 + x11\) * \(!x13 + x2 + !x11\)) s
5 230 M
(Assignment computed from least squares: [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,) s
5 219 M
( 1, 1, 1]) s
5 208 M
(CNF Formula: [['x11', 'x8', 'x16'], ['!x12', 'x11', 'x5'], ['!x4', 'x17', 'x18'], ['x5', '!x18) s
5 197 M
(', '!x8'], ['!x8', 'x21', 'x1'], ['!x9', '!x20', '!x17'], ['x4', '!x20', 'x19'], ['!x6', 'x17') s
5 186 M
(, '!x12'], ['x2', 'x7', '!x9'], ['x17', 'x14', 'x9'], ['x2', '!x13', '!x6'], ['!x13', '!x19', ) s
5 175 M
('x20'], ['x20', '!x3', 'x12'], ['x8', '!x20', '!x7'], ['!x8', '!x2', '!x7'], ['!x2', '!x9', '!) s
5 164 M
(x10'], ['x5', '!x1', 'x11'], ['!x13', 'x2', '!x11']]) s
5 153 M
(Number of clauses satisfied: 18.0) s
5 142 M
(Number of clauses : 18) s
5 131 M
(Assignment satisfied: 1) s
5 120 M
(Percentage of clauses satisfied: 100.0) s
5 109 M
(Percentage of CNFs satisfied so far: 71.4285714286) s
5 98 M
(Average Percentage of Clauses per CNF satisfied: 97.619047619) s
5 87 M
(y= 10) s
5 76 M
(sumfreq= 184) s
5 65 M
(y= 9) s
5 54 M
(sumfreq= 184) s
5 43 M
(y= 5) s
5 32 M
(sumfreq= 184) s
5 21 M
(y= 7) s
5 10 M
(sumfreq= 184) s
_R
S
%%Page: (294) 294
%%BeginPageSetup
_S
18 36 translate
/pagenum 294 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (294) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(y= 10) s
5 681 M
(sumfreq= 184) s
5 670 M
(y= 2) s
5 659 M
(sumfreq= 184) s
5 648 M
(y= 11) s
5 637 M
(sumfreq= 184) s
5 626 M
(y= 5) s
5 615 M
(sumfreq= 184) s
5 604 M
(y= 8) s
5 593 M
(sumfreq= 184) s
5 582 M
(y= 13) s
5 571 M
(sumfreq= 184) s
5 560 M
(y= 14) s
5 549 M
(sumfreq= 184) s
5 538 M
(y= 9) s
5 527 M
(sumfreq= 184) s
5 516 M
(y= 8) s
5 505 M
(sumfreq= 184) s
5 494 M
(y= 10) s
5 483 M
(sumfreq= 184) s
5 472 M
(y= 4) s
5 461 M
(sumfreq= 184) s
5 450 M
(y= 9) s
5 439 M
(sumfreq= 184) s
5 428 M
(y= 11) s
5 417 M
(sumfreq= 184) s
5 406 M
(y= 9) s
5 395 M
(sumfreq= 184) s
5 384 M
(y= 10) s
5 373 M
(sumfreq= 184) s
5 362 M
(y= 9) s
5 351 M
(sumfreq= 184) s
5 340 M
(y= 11) s
5 329 M
(sumfreq= 184) s
5 318 M
(y= 8) s
5 307 M
(sumfreq= 194) s
5 296 M
(y= 14) s
5 285 M
(sumfreq= 194) s
5 274 M
(y= 9) s
5 263 M
(sumfreq= 194) s
5 252 M
(y= 11) s
5 241 M
(sumfreq= 194) s
5 230 M
(y= 7) s
5 219 M
(sumfreq= 194) s
5 208 M
(y= 10) s
5 197 M
(sumfreq= 194) s
5 186 M
(y= 11) s
5 175 M
(sumfreq= 194) s
5 164 M
(y= 11) s
5 153 M
(sumfreq= 194) s
5 142 M
(y= 11) s
5 131 M
(sumfreq= 194) s
5 120 M
(y= 11) s
5 109 M
(sumfreq= 194) s
5 98 M
(y= 6) s
5 87 M
(sumfreq= 194) s
5 76 M
(y= 11) s
5 65 M
(sumfreq= 194) s
5 54 M
(y= 4) s
5 43 M
(sumfreq= 194) s
5 32 M
(y= 6) s
5 21 M
(sumfreq= 194) s
5 10 M
(y= 11) s
_R
S
%%Page: (295) 295
%%BeginPageSetup
_S
18 36 translate
/pagenum 295 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (295) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sumfreq= 194) s
5 681 M
(y= 3) s
5 670 M
(sumfreq= 194) s
5 659 M
(y= 8) s
5 648 M
(sumfreq= 194) s
5 637 M
(y= 14) s
5 626 M
(sumfreq= 194) s
5 615 M
(y= 4) s
5 604 M
(sumfreq= 194) s
5 593 M
(y= 13) s
5 582 M
(sumfreq= 194) s
5 571 M
(y= 11) s
5 560 M
(sumfreq= 194) s
5 549 M
(Probability of Variables chosen in CNFs so far: [0.05434782608695652, 0.04891304347826087, 0.0) s
5 538 M
(2717391304347826, 0.03804347826086957, 0.05434782608695652, 0.010869565217391304, 0.0597826086) s
5 527 M
(95652176, 0.02717391304347826, 0.043478260869565216, 0.07065217391304347, 0.07608695652173914,) s
5 516 M
( 0.04891304347826087, 0.043478260869565216, 0.05434782608695652, 0.021739130434782608, 0.04891) s
5 505 M
(304347826087, 0.059782608695652176, 0.04891304347826087, 0.05434782608695652, 0.04891304347826) s
5 494 M
(087, 0.059782608695652176]) s
5 483 M
(Probability of Negations chosen in CNFs so far: [0.041237113402061855, 0.07216494845360824, 0.) s
5 472 M
(04639175257731959, 0.05670103092783505, 0.03608247422680412, 0.05154639175257732, 0.0567010309) s
5 461 M
(2783505, 0.05670103092783505, 0.05670103092783505, 0.05670103092783505, 0.030927835051546393, ) s
5 450 M
(0.05670103092783505, 0.020618556701030927, 0.030927835051546393, 0.05670103092783505, 0.015463) s
5 439 M
(917525773196, 0.041237113402061855, 0.07216494845360824, 0.020618556701030927, 0.0670103092783) s
5 428 M
(5051, 0.05670103092783505]) s
5 417 M
(Observed Average probability of a variable or negation: 0.047619047619) s
5 406 M
(Probability per literal from Random Matrix Analysis of Least Squared \(1/sqrt\(mn\)\): 0.051434449) s
5 395 M
(9874) s
5 384 M
(Percentage of Clauses satisfied - Observed Average Probability substituted in Random Matrix An) s
5 373 M
(alysis of Least Squared \(m^2*n^2*p^4\): 73.4693877551) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(------------------------------------------------) s
5 329 M
(461. \(THEORY\) Space-Filling, Random Close Packing, Bin Packing and Voter Decision Functions - ) s
5 318 M
(27 October 2017 - related to 135) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(------------------------------------------------) s
5 285 M
(Parallel PRG and Cellular Automaton Algorithms for randomly filling a space with objects and t) s
5 274 M
(heir relevance to Linear Programming were described earlier. Space Filling is a problem studie) s
5 263 M
(d in the field of Structural Topology. For example, density of spheres randomly packed into a ) s
5 252 M
(container is approximately ~63.6% \(reference below\) which is exactly the problem solved by Par) s
5 241 M
(allel PRG and Cellular Automaton Randomized Space filling algorithms. This space filling probl) s
5 230 M
(em can be formulated as a Voter Constraint Satisfaction Problem. Variant of Space filling is t) s
5 219 M
(he NP-hard Packing problem where set of items of variable sizes have to be packed into set of ) s
5 208 M
(bins of same volume by minimizing number of bins whereas Space filling has just one container ) s
5 197 M
(and items are of similar sizes and random close packing converges to a fixed density percentag) s
5 186 M
(e. If set of items in a random close packing within a container are equivalent to satisfied cl) s
5 175 M
(auses \(having same number of variables\) of a Voter Decision Function, this topology result imp) s
5 164 M
(lies not more than ~V*63.6% of clauses \(where V is the volume of container\) can be satisfied p) s
5 153 M
(er candidate\(MAXSAT\). Each n-sphere can be mapped to a  satisfied clause of n variables \(each ) s
5 142 M
(variable corresponds to a bounded length equal to diameter of n-sphere on a dimension of the n) s
5 131 M
(-space\).) s
5 109 M
(Reference:) s
5 98 M
(---------) s
5 87 M
(461.1 Random Close Packings of Spheres in a Container - Space-filling and Structural Topology ) s
5 76 M
(- http://www.math.cornell.edu/~connelly/PackingsIII.IV.pdf and http://www-iri.upc.es/people/ro) s
5 65 M
(s/StructuralTopology/) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(------------------------------------------------) s
5 21 M
(462. \(THEORY\) Reduction from Random Close Packing to CNFSAT - related to 461 - 30 October 2017) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (296) 296
%%BeginPageSetup
_S
18 36 translate
/pagenum 296 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (296) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(------------------------------------------------) s
5 681 M
(Each random close pack after a random shuffle shifts the centre of an n-sphere. Set of all pos) s
5 670 M
(sible centroids of an n-sphere in each random close pack are connected in a clause by disjunct) s
5 659 M
(ions. There are as many clauses as number of n-spheres connected by conjunctions. For example,) s
5 648 M
(if R1,R2,R3,...  are random close packs and n-spheres s1,s2,s3,... are constituents of these p) s
5 637 M
(acks R1,R2,R3,... , Centroid of n-sphere si = Cik is different for each Rk i.e n-sphere si can) s
5 626 M
( exist on any of these possible centroids which implies disjunction Ci1 V Ci2 V ... for locati) s
5 615 M
(ons of n-sphere si in Random Close Packs R1,R2,R3,.... This creates one clause per n-sphere. F) s
5 604 M
(or all n-spheres packed in container at random, following conjunction of clauses for all n-sph) s
5 593 M
(eres completes the reduction:) s
5 582 M
(        \(C11 V C12 V C13 ...\) /\\ \(C21 V C22 V C32 ...\) /\\ \(C31 V C32 V C33 ...\) /\\ ...) s
5 571 M
(Each Cik is assumed to be boolean variable which is 1 if n-sphere si is located in centroid Ci) s
5 560 M
(k in random close pack Rk, else 0.) s
5 538 M
(Randomized Algorithm \(Parallel PRG or Cellular Automaton\) for this space filling random close ) s
5 527 M
(pack finds a satisfying assignment to previous kSAT. This is not exactSAT because some spheres) s
5 516 M
( \(clauses\) might lie outside the container. Topological maximum limit of 63% for this random c) s
5 505 M
(lose) s
5 494 M
(pack is the limit on density = Total Volume of Spheres \(or\) Total number of satisfied clauses ) s
5 483 M
(/ Volume of Container. As density increases , number of satisfied clauses increases. In other ) s
5 472 M
(words, Total number of satisfied clauses = Volume of Container * PackingDensity = V*0.636. Wha) s
5 461 M
(t Volume of Container translates to in the context of CNFs is open to interpretation - it migh) s
5 450 M
(t depend on the maximum-minimum range of centroid dimensions.) s
5 428 M
(Filling the space within the container by n-spheres in parallel monte carlo random choice of c) s
5 417 M
(entroids, simulates many natural parallel processes e.g shaking a container filled with equal ) s
5 406 M
(sized balls. Parallel PRG and Cellular Automaton algorithms are for these special settings of ) s
5 395 M
(random close packing \(wherein size of the ball is infinitesimally finite\) which are BPP/BPNC/R) s
5 384 M
(NC randomized algorithms to find a random close pack assignment to the previous kSAT. Each lit) s
5 373 M
(eral in this random close pack SAT is not just a centroid but also covers circular space aroun) s
5 362 M
(d it of finite constant radius. Considering the usual example - shaking a container having clo) s
5 351 M
(sely packed balls: Every successive shake of the container creates an assignment to the kSAT. ) s
5 340 M
(Formulating this kSAT requires prior knowledge of all possible centroid tuples which could be ) s
5 329 M
(infinite. If shaking is of constant or polynomial time, churning out successive assignments to) s
5 318 M
( previous kSAT is surprisingly not hard. Also previous kSAT does not have overlapping literals) s
5 307 M
( across clauses.) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(--------------------------------------------) s
5 263 M
(463. \(FEATURE-DONE\) Ephemeris Search Script Update - Celestial Pattern Mining - 31 October 201) s
5 252 M
(7) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(--------------------------------------------) s
5 219 M
(Updated Ephemeris Search for Sequence Mined Celestial Configurations - toString\(\) function has) s
5 208 M
( been changed to concatenate "Unoccupied") s
5 197 M
(for vacant zodiac signs while creating encoded celestial chart.) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(-) s
5 153 M
(464. \(FEATURE-DONE\) Ephemeris Search - Sequence Mining of Tropical Monsoon for mid-November 20) s
5 142 M
(17 - 1 November 2017) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(-) s
5 109 M
(\(#\) Apriori GSP SequenceMining on autogen_classifier_dataset historic Storms data has been exe) s
5 98 M
(cuted) s
5 87 M
(\(#\) asfer.enchoros.seqmining has been updated from autogen_classifier_dataset) s
5 76 M
(\(#\) MinedClassAssociationRules.txt has been rewritten containing almost 2500 celestial planeta) s
5 65 M
(ry patterns) s
5 54 M
(\(#\) Ephemeris has been searched for almost 250 top astronomical patterns of these 2500 configu) s
5 43 M
(rations ) s
5 32 M
(for mid-November 2017 ) s
5 21 M
(\(#\) There has been a significant match of most the patterns during this period. Range of searc) s
5 10 M
(h has been) s
_R
S
%%Page: (297) 297
%%BeginPageSetup
_S
18 36 translate
/pagenum 297 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (297) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(narrowed to 2 days because exhaustive search for all patterns is intensive.) s
5 681 M
(\(#\) This matches to NOAA CPC forecast in http://www.cpc.ncep.noaa.gov/products/JAWF_Monitoring) s
5 670 M
(/India/GFS_forecasts.shtml) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(--------) s
5 626 M
(465. \(THEORY\) Discrete Hyperbolic Computational Geometric Factorization, Chvatal Art Gallery T) s
5 615 M
(heorem) s
5 604 M
( and Parallel Tiling - 6 November 2017, 8 November 2017 - related to 34) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(--------) s
5 571 M
(Chvatal Art Gallery Theorem states for floodlighting an art gallery shaped as n-polygon, floor) s
5 560 M
(\(n/3\) guards are sufficient. There is a graph theoretic proof of this by [Fisk]. Discrete Hype) s
5 549 M
(rbolic Factorization requires pixelation of continuous hyperbolic curve as set of contiguous t) s
5 538 M
(iles \(array of pixels\). This computational geometric standard pixelation creates a polygon sur) s
5 527 M
(rounding hyperbola of 4*\(number_of_factors + 1\) sides. This is because there are \(number_of_fa) s
5 516 M
(ctors + 1\) pixelated rectangles in the polygon and each rectangle of the polygon has 4 sides. ) s
5 505 M
(From Chvtal art gallery theorem 4/3 * \(number_of_factors + 1\) guards are sufficient to cover t) s
5 494 M
(his polygon. This optimum number of guards is approximately the minimum number of parallel pro) s
5 483 M
(cessors \(PRAMs\) required for tiling \(pixelation\) pre-processing step. Once these tiles are cre) s
5 472 M
(ated in parallel, parallel sorting requires O\(logN\) time and post-processing binary search is ) s
5 461 M
(also O\(logN\) - If there is a parallel binary search algorithm this could be sub-logarithmic. A) s
5 450 M
(ssumption made previously is each guard has only vertical and horizontal 90 degree visibility.) s
5 428 M
(As opposed to polygon pixelation, if the hyperbolic curve is discretized into set of line segm) s
5 417 M
(ents by plain rounding off creating a line segment for each interval [N/x, N/\(x+1\)], lower env) s
5 406 M
(elope of this set of segments is the list of endpoints of segments and there are no overlaps -) s
5 395 M
( segments meet only at endpoints. Number of line segments is twice the number of factors of N ) s
5 384 M
(or O\(loglogN\). Computing lower envelope in parallel is equivalent to tiling in parallel. Lower) s
5 373 M
( envelope can be computed in parallel by CREW PRAM in O\(logN\) time and O\(NlogN\) operations.) s
5 351 M
(References:) s
5 340 M
(----------) s
5 329 M
(465.1 Chvatal Art Gallery Theorem and Fisk's Proof - https://www.cut-the-knot.org/Curriculum/C) s
5 318 M
(ombinatorics/Chvatal.shtml) s
5 307 M
(465.2 Number of prime factors of an integer - [Srinivasa Ramanujan] - Quarterly Journal of Mat) s
5 296 M
(hematics, XLVIII, 1917, 76 \342\\200\\223 92 - Ramanujan Papers and Notebooks - http://ramanujan.si) s
5 285 M
(rinudi.org/Volumes/published/ram35.pdf - number of prime factors are of O\(loglogN\). This impli) s
5 274 M
(es number of rectangles \(and hence number of PRAMs\) in the pixelated hyperbola polygon could b) s
5 263 M
(e sub-logarithmic in N.) s
5 252 M
(465.3 Introduction to Parallel Algorithms - [Joseph JaJa] - Chapter 4 - Searching,Sorting,Merg) s
5 241 M
(ing - Corollary 4.5 - Cole's Pipelined Mergesort and Chapter 6 - Planar Geometry - Lower Envel) s
5 230 M
(opes and Visibility polygon - Theorem 6.7 - https://people.ksp.sk/~ppershing/data/skola/JaJa.p) s
5 219 M
(df) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(--------) s
5 175 M
(466. \(FEATURE-DONE\) Support Vector Machines implementation - based on CVXPY - 9 November 2017) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(--------) s
5 142 M
(\(*\) New Support Vector Machines python implementation is committed to NeuronRain AsFer reposit) s
5 131 M
(ory) s
5 120 M
(\(*\) This minimizes an objective function 1/2*||w|| subject to constraint ||WX+b|| >= 1 which) s
5 109 M
(labels a point +1 or -1 on either side of a decision separating hyperplane WX+b for weight vec) s
5 98 M
(tor W) s
5 87 M
(and bias b \(Reference: Machine Learning - Ethem Alpaydin - Chapter 13 - Kernel Machines\)) s
5 76 M
(\(*\) Optimization is solved by CVXPY DCCP Convex-Concave program) s
5 65 M
(\(*\) logs for this have been added to testlogs/) s
5 54 M
(\(*\) Present NeuronRain AsFer SVMRetriever.cpp depends on third-party SVMlight opensource softw) s
5 43 M
(are. With) s
5 32 M
(this new implementation, references to SVMlight are to be phased out.) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (298) 298
%%BeginPageSetup
_S
18 36 translate
/pagenum 298 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (298) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(------------------------------------------------) s
5 681 M
(467. \(THEORY\) Random Matrix Rounding for CNFSAT Solver, Blum-Micali PRG, Distinguisher for Pse) s
5 670 M
(udorandomness - 10 November 2017 -) s
5 659 M
(related to 459) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(------------------------------------------------) s
5 626 M
(Blum-Micali PRG depends on intractability of Discrete Logarithm f\(x\)=g^x mod p for primes p,g ) s
5 615 M
(and group element x. Blum-Micali PRG creates) s
5 604 M
(sequences of \(f\(x\), f^2\(x\), f^3\(x\), ...\) by composition of f and computes stream of bits by ha) s
5 593 M
(rd-core boolean predicate function b\(.\) - \(b\(f\(x\)\), b\(f^2\(x\)\), ...\) which is sequence of unpre) s
5 582 M
(dictable pseudorandom bits. In Random Matrix Rounding for CNFSAT solver by least squares, prob) s
5 571 M
(ability of choosing a literal xn  = probability of the bit stream \(b\(f\(x\)\),b\(f^2\(x\)\), ...\) cor) s
5 560 M
(responding to binary encoding of n.) s
5 538 M
(Probability of choosing a CNF by RMLSQR probability \(p=1/sqrt\(mn\) and there are 3m literals pe) s
5 527 M
(r 3CNF\) = \(1/[mn]\)^1.5m) s
5 516 M
(Probability of choosing a CNF from all possible n^\(3m\) random 3SATs in uniform distribution is) s
5 505 M
( = \(1/n\)^3m) s
5 483 M
(Inverse of RMLSQR probability = \(mn\)^1.5m is the expected number of pseudorandom binary string) s
5 472 M
(s churned out by PRG before a required 3SAT is found.) s
5 461 M
(Inverse of uniform probability = n^3m is the expected number of pseudorandom binary strings ch) s
5 450 M
(urned out by PRG before required 3SAT is found.) s
5 428 M
(Distinguisher for these 2 distributions iterates through both sequences of bitstreams and prin) s
5 417 M
(ts "RMLSQR" if match occurs in \(mn\)^1.5m expected number of iterations else prints "Uniform". ) s
5 406 M
(This requires exponential time in number of clauses.) s
5 384 M
(From PCP [Hastad] inapproximability result and previous Random Matrix analysis for approximate) s
5 373 M
( CNFSATSolver, if m^3*n^2*p^4 > 7/8*m then P=NP i.e. if p > 0.96716821/sqrt\(m*n\) then P=NP. Fo) s
5 362 M
(r the previous distinguisher, this requires \(mn\)^1.5m / \(0.96716821\)^3m exponential iterations) s
5 351 M
(. From condition for P=NP, this number of iterations has to be polynomial for efficient distin) s
5 340 M
(guishing of a PRG from perfect random sequence, which is a contradiction.) s
5 318 M
(References:) s
5 307 M
(-----------) s
5 296 M
(467.1 Existence of Pseudorandom Generators - [Goldreich-Hugo-Luby] - http://www.wisdom.weizman) s
5 285 M
(n.ac.il/~oded/X/gkl.pdf) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(-----) s
5 241 M
(468. \(FEATURE-DONE\) Support Vector Machines - update - 10 November 2017) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(-----) s
5 208 M
(\(*\) Numpy indexing has been changed) s
5 197 M
(\(*\) Both random point and parametric point distances have been tested) s
5 186 M
(\(*\) DCCP log and Support Vector logs for 2 points and a random point have been committed to te) s
5 175 M
(stlogs/) s
5 164 M
(\(*\) Distances are printed in the matrix result - two diametrically opposite points have equal ) s
5 153 M
(distances) s
5 142 M
(\(*\) Distance matrix is returned from distance_from_separating_hyperplane\(\) function) s
5 131 M
(\(*\) The distance minimized is the L1 norm \(sum of tuple elements\) and not L2 norm) s
5 120 M
( \(sum of squares of tuple elements\)) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(--------------------------------------) s
5 76 M
(469. \(FEATURE-DONE\) Computational Geometric Hyperbolic Factorization - Pixelated Segments Spar) s
5 65 M
(k Bitonic Sort - 13 November 2017) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(--------------------------------------) s
5 32 M
(\(*\) Numbers 147,219,251,253 are factorized.) s
5 21 M
(\(*\) C++ tiling pre-processing routines have been changed for this and Pixelated Tiles storage ) s
5 10 M
(text files for bitonic sort have been updated) s
_R
S
%%Page: (299) 299
%%BeginPageSetup
_S
18 36 translate
/pagenum 299 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (299) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\(*\) Factorization is benchmarked on single node cluster on dual core \(which is parallel RAM\).) s
5 681 M
(\(*\) This is just a representative number on single dual-core CPU and not a cloud parallelism b) s
5 670 M
(enchmark.) s
5 659 M
(\(*\) Each DAGScheduler Spark work item is independent code executable in parallel and benchmark) s
5 648 M
( has to be this parallel time per work unit which) s
5 637 M
(is captured in per task duration logs below by Spark Driver:) s
5 626 M
(17/11/13 21:18:22 INFO TaskSetManager: Finished task 1.0 in stage 1791.0 \(TID 3583\) in 46 ms o) s
5 615 M
(n localhost \(executor driver\) \(1/2\)) s
5 604 M
(17/11/13 21:18:22 INFO TaskSetManager: Finished task 0.0 in stage 1791.0 \(TID 3582\) in 47 ms o) s
5 593 M
(n localhost \(executor driver\) \(2/2\)) s
5 582 M
(17/11/13 21:18:22 INFO TaskSetManager: Starting task 0.0 in stage 1792.0 \(TID 3584, localhost,) s
5 571 M
( executor driver, partition 0, PROCESS_LOCAL, 6281 bytes\)) s
5 560 M
(17/11/13 21:18:22 INFO TaskSetManager: Starting task 1.0 in stage 1792.0 \(TID 3585, localhost,) s
5 549 M
( executor driver, partition 1, PROCESS_LOCAL, 6309 bytes\)) s
5 538 M
(17/11/13 21:18:22 INFO TaskSetManager: Finished task 1.0 in stage 1792.0 \(TID 3585\) in 46 ms o) s
5 527 M
(n localhost \(executor driver\) \(1/2\)) s
5 516 M
(17/11/13 21:18:22 INFO TaskSetManager: Finished task 0.0 in stage 1792.0 \(TID 3584\) in 50 ms o) s
5 505 M
(n localhost \(executor driver\) \(2/2\)) s
5 494 M
(17/11/13 21:26:39 INFO TaskSetManager: Finished task 0.0 in stage 1791.0 \(TID 3582\) in 50 ms o) s
5 483 M
(n localhost \(executor driver\) \(1/2\)) s
5 472 M
(17/11/13 21:26:39 INFO TaskSetManager: Finished task 1.0 in stage 1791.0 \(TID 3583\) in 49 ms o) s
5 461 M
(n localhost \(executor driver\) \(2/2\)) s
5 450 M
(17/11/13 21:26:39 INFO TaskSetManager: Starting task 0.0 in stage 1792.0 \(TID 3584, localhost,) s
5 439 M
( executor driver, partition 0, PROCESS_LOCAL, 6281 bytes\)) s
5 428 M
(17/11/13 21:26:39 INFO TaskSetManager: Starting task 1.0 in stage 1792.0 \(TID 3585, localhost,) s
5 417 M
( executor driver, partition 1, PROCESS_LOCAL, 6309 bytes\)) s
5 406 M
(17/11/13 21:26:39 INFO TaskSetManager: Finished task 0.0 in stage 1792.0 \(TID 3584\) in 48 ms o) s
5 395 M
(n localhost \(executor driver\) \(1/2\)) s
5 384 M
(17/11/13 21:26:39 INFO TaskSetManager: Finished task 1.0 in stage 1792.0 \(TID 3585\) in 49 ms o) s
5 373 M
(n localhost \(executor driver\) \(2/2\)) s
5 362 M
(17/11/13 21:33:59 INFO TaskSetManager: Finished task 0.0 in stage 1791.0 \(TID 3582\) in 48 ms o) s
5 351 M
(n localhost \(executor driver\) \(1/2\)) s
5 340 M
(17/11/13 21:33:59 INFO TaskSetManager: Finished task 1.0 in stage 1791.0 \(TID 3583\) in 50 ms o) s
5 329 M
(n localhost \(executor driver\) \(2/2\)) s
5 318 M
(17/11/13 21:33:59 INFO TaskSetManager: Starting task 0.0 in stage 1792.0 \(TID 3584, localhost,) s
5 307 M
( executor driver, partition 0, PROCESS_LOCAL, 6281 bytes\)) s
5 296 M
(17/11/13 21:33:59 INFO TaskSetManager: Starting task 1.0 in stage 1792.0 \(TID 3585, localhost,) s
5 285 M
( executor driver, partition 1, PROCESS_LOCAL, 6309 bytes\)) s
5 274 M
(17/11/13 21:33:59 INFO TaskSetManager: Finished task 0.0 in stage 1792.0 \(TID 3584\) in 55 ms o) s
5 263 M
(n localhost \(executor driver\) \(1/2\)) s
5 252 M
(17/11/13 21:33:59 INFO TaskSetManager: Finished task 1.0 in stage 1792.0 \(TID 3585\) in 57 ms o) s
5 241 M
(n localhost \(executor driver\) \(2/2\)) s
5 230 M
(17/11/13 21:40:20 INFO TaskSetManager: Finished task 1.0 in stage 1791.0 \(TID 3583\) in 49 ms o) s
5 219 M
(n localhost \(executor driver\) \(1/2\)) s
5 208 M
(17/11/13 21:40:20 INFO TaskSetManager: Finished task 0.0 in stage 1791.0 \(TID 3582\) in 52 ms o) s
5 197 M
(n localhost \(executor driver\) \(2/2\)) s
5 186 M
(17/11/13 21:40:20 INFO TaskSetManager: Starting task 0.0 in stage 1792.0 \(TID 3584, localhost,) s
5 175 M
( executor driver, partition 0, PROCESS_LOCAL, 6281 bytes\)) s
5 164 M
(17/11/13 21:40:20 INFO TaskSetManager: Starting task 1.0 in stage 1792.0 \(TID 3585, localhost,) s
5 153 M
( executor driver, partition 1, PROCESS_LOCAL, 6309 bytes\)) s
5 142 M
(17/11/13 21:40:20 INFO TaskSetManager: Finished task 0.0 in stage 1792.0 \(TID 3584\) in 50 ms o) s
5 131 M
(n localhost \(executor driver\) \(1/2\)) s
5 120 M
(17/11/13 21:40:20 INFO TaskSetManager: Finished task 1.0 in stage 1792.0 \(TID 3585\) in 50 ms o) s
5 109 M
(n localhost \(executor driver\) \(2/2\)) s
5 98 M
(\(*\) Bitonic Sort is O\(logN*logN\) and number of processors required is approximately O\(N^2.5\) b) s
5 87 M
(ut abides by NC definition. Cole Pipelined Merge Sort which is O\(logN\) is both in NC and Work-) s
5 76 M
(Time Optimal.) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(---------------------------------------) s
5 32 M
(470. \(FEATURE-DONE\) Support Vector Machines Update - Learn and Classify functions - 13 Novembe) s
5 21 M
(r 2017) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (300) 300
%%BeginPageSetup
_S
18 36 translate
/pagenum 300 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (300) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(---------------------------------------) s
5 681 M
(\(*\) Support Vector Machines python implementation has been updated to include two functions :) s
5 670 M
(        - for learning set of support vectors from a training dataset tuples and store the vec) s
5 659 M
(tors in a dictionary map of distance-to-vectors.) s
5 648 M
(        - to classify a tuple by finding its distance with reference to the support vector reg) s
5 637 M
(ions - distance-to-vectors map is sorted and) s
5 626 M
(        - if there are more than 1 tuples per minimum distance, those have to be reckoned as s) s
5 615 M
(upport vectors ) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-----------------------------------------) s
5 571 M
(471. \(THEORY\) Jones-Sato-Wada-Wiens Theorem, Complement Functions, Prime-Composite Complementa) s
5 560 M
(tion, Prime Number Theorem, Ulam Spiral,) s
5 549 M
(Ramsey 2-coloring of integers, Hilbert Tenth Problem, Unique Factorization , Matiyasevich-Robi) s
5 538 M
(nson-Davis-Putnam Theorem, Riemann Hypothesis - ) s
5 527 M
(related to 24,370,390,394 - 13 November 2017, 14 November 2017, 29 November 2017,1 December 20) s
5 516 M
(17,4 December 2017,23 December 2017) s
5 505 M
(\(Draft updates to https://arxiv.org/abs/1106.4102\)) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-----------------------------------------) s
5 472 M
(Jones-Sato-Wada-Wiens Theorem proves existence of a polynomial in 25 degree-26 variables which) s
5 461 M
( has values equal to set of all primes. This relates to Prime-Composite Function Complementati) s
5 450 M
(on - Jones-Sato-Wada-Wiens polynomial is a complement function of set of composites which are ) s
5 439 M
(formalized by unique factorization theorem. This is special case of Matiyasevich-Davis-Robinso) s
5 428 M
(n-Putnam Theorem which proves any recursively enumerable set accepted by a Turing machine is e) s
5 417 M
(quivalent to a polynomial accepting the elements of the set. Another closely related problem i) s
5 406 M
(s: Does there exist a prime between two integers p=xy and q=x\(y+1\). Prime number theorem state) s
5 395 M
(s and proves number of primes less than N=O\(N/logN\).) s
5 373 M
(Number of primes < p=xy:) s
5 362 M
(        = c1*xy/logxy) s
5 351 M
(Number of primes < q=\(x+1\)y:) s
5 340 M
(        = c1*\(x+1\)y/log\(x+1\)y) s
5 318 M
(Number of primes between p=xy and q=\(x+1\)y :) s
5 307 M
(        = c1*\(x+1\)y/log\(x+1\)y - c1*xy/logxy) s
5 285 M
(Assuming number of primes between p and q = c1*\(x+1\)y/log\(x+1\)y - c1*xy/logxy > 0:) s
5 274 M
(        \(x+1\)y/log\(x+1\)y > xy/logxy) s
5 263 M
(After reducing:) s
5 252 M
(        log\(xy\) > x\(log\(x+1\) - logx\)) s
5 241 M
(        log\(xy\) > xlog\(x+1/x\)) s
5 230 M
(For large x:) s
5 219 M
(        log\(x+1/x\) ~ log 1 = 0) s
5 208 M
(=>      log\(xy\) > 0) s
5 197 M
(thus proving the assumption. This estimate of number of primes between two composites thus dir) s
5 186 M
(ectly has bearing on discrepancy of this 2-colored \(prime-composite\) integer sequence where di) s
5 175 M
(screpancy is difference between number of elements of 2 colors in monochromatic arithmetic pro) s
5 164 M
(gressions. Ulam Spiral, which is sequence of integers written in concentric spiralling rectang) s
5 153 M
(le, has diagonals aligned along points of prime numbers described by polynomials. Rectangle of) s
5 142 M
( Ulam Spiral can be written as polynomial x\(x+1\) or x\(x-1\). Previous derivation on existence o) s
5 131 M
(f primes between x\(x+1\) and x*x implies there is a prime diagonal. Ulam rectangle sequence for) s
5 120 M
( x\(x+1\) or x\(x-1\) is 1,2,4,6,9,12,16,20,25,30,36,42,...) s
5 98 M
(Matiyasevich-Davis-Robinson-Putnam theorem implies every recursively enumerable set has a diop) s
5 87 M
(hantine equation. Complement Function in several variables is nothing but a diophantine equati) s
5 76 M
(on for the complement set by rewriting a diophantine as function in several variables. Thus co) s
5 65 M
(ncepts of Diophantine sets/equations and Complement functions are synonymous. Decidability of ) s
5 54 M
(complement functions \(https://arxiv.org/abs/1106.4102\) is equivalent to decidability of diopha) s
5 43 M
(ntine equations. MRDP theorem requires every recursively enumerable set to have a diophantine ) s
5 32 M
(equation and therefore to have a function for it. [There exists a set which is not recursively) s
5 21 M
( enumerable e.g set of subsets of infinite set]. Undecidability of Function Complementation fo) s
5 10 M
(llows from MRDP theorem because there exists a recursively enumerable set which is not computa) s
_R
S
%%Page: (301) 301
%%BeginPageSetup
_S
18 36 translate
/pagenum 301 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (301) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(bly recursive and hence has no algorithm \(algorithms are computable recursive languages which ) s
5 681 M
(do not loop and have yes/no halt on all inputs\) i.e Undecidability of Hilbert's Tenth Problem ) s
5 670 M
(applies directly to Undecidability of Function Complementation. In other words set of diophant) s
5 659 M
(ines has cardinality greater than set of all computable recursive languages and therefore ther) s
5 648 M
(e exists a diophantine function for a complement set which cannot be computed by a Turing mach) s
5 637 M
(ine. This is one more proof of undecidability of complementation and simpler than Post Corresp) s
5 626 M
(ondence Problem based proof described earlier.) s
5 604 M
(Definition:) s
5 593 M
(----------) s
5 582 M
(For a set S and subsets A,B of S, if {A,B} is a disjoint set cover of S and if A has a diophan) s
5 571 M
(tine equation diophantine\(A\) \(expressible as values of polynomial\), then diophantine equation ) s
5 560 M
(for B = diophantine\(B\), is the complement function of diophantine\(A\).) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(------------------------------------------) s
5 516 M
(Theorem: Existence of Complement Diophantine Equation or Complement Function is Undecidable wh) s
5 505 M
(en neither of the complementary sets are recursive.) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(------------------------------------------) s
5 461 M
(Proof:) s
5 450 M
(------) s
5 439 M
(MRDP theorem for Hilbert's tenth problem implies every recursively enumerable set is expressib) s
5 428 M
(le as values of a diophantine polynomial.) s
5 406 M
(Possibility 1 - Generic - Both complementary sets A and B are recursively enumerable:) s
5 395 M
(--------------------------------------------------------------------------------------) s
5 384 M
(If both complementary sets A and B are recursively enumerable, they always have a diophantine ) s
5 373 M
(polynomial - diophantine\(A\) and diophantine\(B\).) s
5 362 M
(There is a known result which states: if set A and B=S-A are both recursively enumerable, then) s
5 351 M
( A is recursive. But there exists a recursively enumerable set B which is not recursive, for s) s
5 340 M
(ome complement A => There is no algorithm for construction of diophantine\(B\).) s
5 318 M
(Possibility 2 - Special - One of the complementary sets A or B is recursively enumerable and t) s
5 307 M
(he other is recursive:) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(----------------------) s
5 274 M
(Both A and B have a diophantine polynomial. If A is recursively enumerable but not recursive, ) s
5 263 M
(there is a complement B \(A=S-B\) such that there is no algorithm for construction of diophantin) s
5 252 M
(e\(A\).) s
5 230 M
(Possibility 3 - Special - Both complementary sets A and B are recursive:) s
5 219 M
(------------------------------------------------------------------------) s
5 208 M
(Both A and B are recursive and recursively enumerable => Both A and B have diophantine polynom) s
5 197 M
(ials and both diophantine\(A\) and diophantine\(B\) can be constructed. There are many examples fo) s
5 186 M
(r this complementation: [Squares,PellEquation],[Composites/UniqueFactorizationDomain,Primes] e) s
5 175 M
(tc.,) s
5 153 M
(Possibility 4 - Special - Both complementary sets are non recursively enumerable:) s
5 142 M
(--------------------------------------------------------------------------------) s
5 131 M
(Obviously both sets A and B are beyond Chomsky hierarchy and there is no algorithm for constru) s
5 120 M
(ction of diophantine\(A\) and diophantine\(B\)) s
5 98 M
(Possibility 5 - Special - One of the complementary sets is recursively enumerable and the othe) s
5 87 M
(r is non recursively enumerable:) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(---------------------------------) s
5 54 M
(One of the sets A is recursively enumerable and thus has a diophantine polynomial. But there e) s
5 43 M
(xists a complement B=S-A such that A is not recursive => There is no algorithm for constructio) s
5 32 M
(n of diophantine\(A\)) s
5 10 M
(Proof in one line: Any set is a complementary set of some other set and thus any complementary) s
_R
S
%%Page: (302) 302
%%BeginPageSetup
_S
18 36 translate
/pagenum 302 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (302) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( set which is recursively enumerable but not recursive has a diophantine equation, and thus un) s
5 681 M
(decidable by an algorithm.) s
5 659 M
(Construction of a complement function for complementary set:) s
5 648 M
(------------------------------------------------------------) s
5 637 M
(Construction of a complement function is to find a mapping function f defined as:) s
5 626 M
(        f\(0\) = a1) s
5 615 M
(        f\(1\) = a2) s
5 604 M
(        f\(2\) = a3) s
5 593 M
(        ...) s
5 582 M
(        f\(n\) = an) s
5 571 M
(for a1,a2,a3,...,an in Diophantine complementary set, which is equivalent to definition of rec) s
5 560 M
(ursively enumerable total function. This enumeration can be written as a diophantine equation:) s
5 549 M
(        f\(x\) - a = 0) s
5 538 M
(Function f can internally be any mathematical function and can have additional parameters besi) s
5 527 M
(des x. Finding the enumerated mapping previously is equivalent to solving an arbitrary diophan) s
5 516 M
(tine f\(x\) - a = 0 i.e finding solutions to x and a which is Hilbert's Tenth Problem - MRDP the) s
5 505 M
(orem proves finding integer solutions to arbitrary Diophantine is undecidable. ArXiv version a) s
5 494 M
(t https://arxiv.org/abs/1106.4102 mentions some algorithms for constructing a complement e.g F) s
5 483 M
(ourier series, Lambda calculus, Polynomial interpolation. Polynomial Reconstruction Problem al) s
5 472 M
(so provides a polynomial approximation of the set and has origins in Error Correction and List) s
5 461 M
( Decoding. These algorithms apply only to recursive sets - complement function mappings are co) s
5 450 M
(nstructible only for recursive sets. This is intuitively obvious because a Turing Machine comp) s
5 439 M
(uting the previous mapping for a recursively enumerable set might loop for ever.) s
5 417 M
(An important example for applicability of function complementation is ABC Conjecture which is ) s
5 406 M
(defined in references below. Let S be the universal set of all possible integer triples \(a,b,c) s
5 395 M
(\). Set of coprime triples which have quality q\(a,b,c\) = log\(c\)/log\(radical\(abc\)\) > 1 + epsilon) s
5 384 M
( for all epsilon > 0 is the subset A of S. ABC conjecture states that there are only finitely ) s
5 373 M
(many such triples for every epsilon > 0. Then the set B=S-A is the set of all triples which vi) s
5 362 M
(olate this criterion - sets A and B are complementary. Proving ABC Conjecture is equivalent to) s
5 351 M
( proving the violation of this criterion in the complement set B - there are infinite non-copr) s
5 340 M
(ime triples for each epsilon > 0 which have q\(a,b,c\) > 1.This converts ABC conjecture from pri) s
5 329 M
(mal finiteness to its dual infiniteness.) s
5 296 M
(References:) s
5 285 M
(----------) s
5 274 M
(471.1 Jones-Sato-Wada-Wiens Theorem and Prime valued Polynomial - https://www.maa.org/sites/de) s
5 263 M
(fault/files/pdf/upload_library/22/Ford/JonesSatoWadaWiens.pdf - Jones-Sato-Wada-Wiens polynomi) s
5 252 M
(al generates negative numbers too and its positive values are set of primes.) s
5 241 M
(471.2 Matijasevic Polynomial - http://primes.utm.edu/glossary/xpage/MatijasevicPoly.html - neg) s
5 230 M
(ative values can be removed by setting squared terms of polynomial to zero and thus only set o) s
5 219 M
(f all primes is generated which is the complement function of factorization.) s
5 208 M
(471.3 Hilbert's Tenth Problem and Matiyasevich-Robinson-Davis-Putnam \(MRDP\) Theorem - https://) s
5 197 M
(en.wikipedia.org/wiki/Hilbert%27s_tenth_problem - Hilbert's Tenth Problem poses if there exist) s
5 186 M
(s an algorithm which generates integer values for unknowns in a multivariate diophantine equat) s
5 175 M
(ion. Hilbert's Tenth Problem was proved undecidable. Converse of this is finding a diophantine) s
5 164 M
( equation for a set - MRDP Theorem: Every recursively enumerable set is diophantine.) s
5 153 M
(471.4 Primes are nonnegative values of a polynomial in 10 variables - [Yu.V.Matijasevic - http) s
5 142 M
(s://logic.pdmi.ras.ru/~yumat/publications/publications.php] - https://link.springer.com/articl) s
5 131 M
(e/10.1007/BF01404106 - [In Russian, Translated to English by Louise Guy and James P. Jones, Th) s
5 120 M
(e University of Calgary, Calgary, Canada]) s
5 109 M
(471.5 Pell's Equation - https://en.wikipedia.org/wiki/Pell%27s_equation - Diophantine equation) s
5 98 M
( for set of nonsquare integers - Discovered first in treatise Brahmasphutasiddhanta of Brahmag) s
5 87 M
(upta. This complements set of squared integers.) s
5 76 M
(471.6 Non-Recursively Enumerable Languages - https://www.seas.upenn.edu/~cit596/notes/dave/rel) s
5 65 M
(ang8.html - powerset of infinite set is NonRecursivelyEnumerable.) s
5 54 M
(471.7 Goedel's First Incompleteness Theorem Follows From MRDP theorem - https://en.wikipedia.o) s
5 43 M
(rg/wiki/G%C3%B6del%27s_incompleteness_theorems and http://www.scholarpedia.org/article/Matiyas) s
5 32 M
(evich_theorem - Diophantines and Complement Functions - "... The Diophantine equation of the g) s
5 21 M
(eneral form P\(a,x1,\342\\200\246,xm\)=0 in the definition of a Diophantine representation can be repla) s
5 10 M
(ced by a Diophantine equation of a special kind, namely, with the parameter isolated in the ri) s
_R
S
%%Page: (303) 303
%%BeginPageSetup
_S
18 36 translate
/pagenum 303 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (303) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ght-hand side, thus giving a representation of form a \342\\210\\210 R  \342\\237\272 \342\\210\\203x1\342\\200\246xn{) s
5 681 M
(Q\(x1,\342\\200\246,xn\)=a} In other word, every Diophantine \(and hence every listable\) set of non-nega) s
5 670 M
(tive integers is the set of all values assumed by some polynomial with integer coefficients wi) s
5 659 M
(th many variables. ..." - Any complement set which is enumerable/listable is diophantine and t) s
5 648 M
(here exists a diophantine set which is not recursive but enumerable.) s
5 637 M
(471.8 What is Mathematics: Goedel Theorem and Around - https://dspace.lu.lv/dspace/bitstream/h) s
5 626 M
(andle/7/5306/Podnieks_What_is_Mathematics_Goedel.pdf?sequence=1 - Ramsey Theorem \(finite and i) s
5 615 M
(nfinite\) - Decidability of Function Complementation is the question: "For any two sets A and B) s
5 604 M
( which are disjoint set covers of a universal set S \(A U B = S\), and if set A is diophantine \() s
5 593 M
(is expressible as values of a polynomial\), is B also diophantine and if yes is there a generic) s
5 582 M
( algorithm to construct a diophantine polynomial for B?". [Equivalently A and B are Ramsey 2-c) s
5 571 M
(oloring of S and diophantine polynomials for A and B\(if it exists\) are 2-coloring schemes]. An) s
5 560 M
(swer to this question is two-fold:) s
5 549 M
(        \(*\) Is set B recursively enumerable? \(There are sets which are not recursively enumera) s
5 538 M
(ble e.g set of subsets of infinite set\)) s
5 527 M
(        \(*\) If set B is recursively enumerable, B has an equivalent diophantine polynomial. Bu) s
5 516 M
(t there exists a set B which is enumerable but not computably recursive and there is no generi) s
5 505 M
(c algorithm for constructing complement diphantine polynomial. Undecidability of Complementati) s
5 494 M
(on implies finding 2-coloring scheme is also undecidable.) s
5 483 M
(        \(*\) In both possibilities, there is a set which does not have a diophantine polynomial) s
5 472 M
( - there is a non-recursively enumerable set which is outside Chomsky-Schutzenberger Type-0,1,) s
5 461 M
(2,3 hierarchy and there is a recursively enumerable set which is not recursive computable by a) s
5 450 M
( Turing machine thus ruling out a generic procedure for finding 2-coloring schemes.) s
5 439 M
(471.9 Goedel Incompleteness and MRDP theorem - https://plato.stanford.edu/entries/goedel-incom) s
5 428 M
(pleteness/#HilTenProMRDThe - "... Beginning in the early 1950s, Julia Robinson and Martin Davi) s
5 417 M
(s worked on this problem, later joined by Hilary Putnam. As a result of their collaboration, t) s
5 406 M
(he first important result in this direction was achieved. Call an equation \342\\200\\234an exponen) s
5 395 M
(tial Diophantine equation\342\\200\\235 if it involves also exponentiation, as well as addition and) s
5 384 M
( multiplication \(that is, one can have both constants and variables as exponents\); naturally, ) s
5 373 M
(the focus is still in the integer solutions. Davis, Putnam, and Robinson \(1961\), showed that t) s
5 362 M
(he problem of solvability of exponential Diophantine equations is undecidable. In 1970, Yuri M) s
5 351 M
(atiyasevich added the final missing piece, and demonstrated that the problem of the solvabilit) s
5 340 M
(y of Diophantine equations is undecidable. Hence the overall result is often called MRDP Theor) s
5 329 M
(em \(for an exposition, see, e.g., Davis 1973; Matiyasevich 1993\).  The essential technical ach) s
5 318 M
(ievement was that all semi-decidable \(recursively enumerable\) sets can be given a Diophantine ) s
5 307 M
(representation, i.e., they can be represented by a simple formula of the form \342\\210\\203x1\342\\200) s
5 296 M
(\246\342\\210\\203xn\(s = t\), where \(s = t\) is a Diophantine equation. More exactly, for any given recu) s
5 285 M
(rsively enumerable set S, there is a Diophantine equation \(s\(y, x1, \342\\200\246 , xn\) = t\(y, x1, \342) s
5 274 M
(\\200\246 , xn\)\) such that n \342\\210\\210 S if and only if \342\\210\\203x1\342\\200\246\342\\210\\203xn\(s\(n, x1, \342) s
5 263 M
(\\200\246 , xn\) = t\(n, x1, \342\\200\246 , xn\)\).  As there are semi-decidable \(recursively enumerable\) se) s
5 252 M
(ts which are not decidable \(recursive\), the general conclusion follows immediately:) s
5 241 M
(        MRDP Theorem) s
5 230 M
(                There is no general method for deciding whether or not a given Diophantine equ) s
5 219 M
(ation has a solution. ...") s
5 208 M
(471.10 Special Case of Complement Functions and MRDP Theorem - http://www.logicmatters.net/res) s
5 197 M
(ources/pdfs/MRDP.pdf - Section 3 \(Diophantine equation for set of Primes\) and Section 4 - Theo) s
5 186 M
(rem 4.3 - "If a set K and its complement N-K are both recursively enumerable then K is recursi) s
5 175 M
(ve". But MRDP theorem implies all recursively enumerable sets are diophantine and because ther) s
5 164 M
(e exists a recursively enumerable set which is not recursive, there is no algorithm to find a ) s
5 153 M
(diophantine polynomial whose values is a set and thus the general case procedure for complemen) s
5 142 M
(tation is undecidable. Rephrasing theorem 4.3, If a set K is diophantine\(K is expressible as v) s
5 131 M
(alues of a polynomial\) and the complement set N-K is also diophantine\(N-K is expressible as va) s
5 120 M
(lues of a polynomial\), then K is recursive\(there exists an Yes/No halt Turing machine acceptin) s
5 109 M
(g K\). It has to be observed here that diophantine equations for K and N-K are complement funct) s
5 98 M
(ions. This special case is for the converse direction: assuming 2 complementary sets are dioph) s
5 87 M
(antine, then one of the two is computable by an algorithm. Quoted excerpts from Definition 4.1) s
5 76 M
( - "...Definition 4.1. A set of numbers K is recursively enumerable iff it is \(i\) the range of) s
5 65 M
( a total recursive function \342\\200\\223 or equivalently, it is \(ii\) the domain of a partial recu) s
5 54 M
(rsive function.  What does this come to? Definition \(i\) says that K is recursively enumerable ) s
5 43 M
(if there is an algorithmically computable \(total\) function f such that as you go through f\(0\),) s
5 32 M
( f\(1\), f\(2\), . . . you spit out values k0, k1, k2 . . . in K, with any member of K eventually ) s
5 21 M
(appearing \(perhaps with repetitions\). The equivalent definition \(ii\) says that there is an alg) s
5 10 M
(orithm such that the set of input numbers for which the algorithm halts is exactly the set of ) s
_R
S
%%Page: (304) 304
%%BeginPageSetup
_S
18 36 translate
/pagenum 304 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (304) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(numbers in K ...". Partial recursive function is a primitive recursive function not necessaril) s
5 681 M
(y defined for all inputs and computable by a Turing machine. Total recursive function is a par) s
5 670 M
(tial recursive function which is defined for all inputs.) s
5 659 M
(471.11 MRDP Theorem, Jone-Sato-Wada-Wiens Polynomial and Undecidability in Number Theory - [Bj) s
5 648 M
(orn Poonen] - http://www.cis.upenn.edu/~cis262/notes/rademacher.pdf - Diophantine statement of) s
5 637 M
( Riemann Hypothesis - " MRDP theorem gives a polynomial equation that has integer solutions if) s
5 626 M
( and only if Riemann Hypothesis is false " i.e find a counterexample to Riemann Zeta Function ) s
5 615 M
(non-trivial zeroes - one which does not have Re\(s\) = 0.5. Turing machine for this might loop f) s
5 604 M
(orever and thus recursively enumerable. Hence this Turing machine has a diophantine polynomial) s
5 593 M
( representation.) s
5 582 M
(471.12 Formulas for Primes - https://oeis.org/wiki/Formulas_for_primes#Solutions_to_Diophantin) s
5 571 M
(e_equations) s
5 560 M
(471.13 Simplest Diophantine Representation - [Panu Raatikainen] - https://pdfs.semanticscholar) s
5 549 M
(.org/cd96/ead1a00b73ecc9cfabf4b9a617907ce9bdd6.pdf - Theorem 4 - This translates to the proble) s
5 538 M
(m of determining simplest complement diophantine function of complexity measure K such that wi) s
5 527 M
(th respect to a complexity measure \(e.g Kolmogorov Complexity and Chaitin incompleteness Theor) s
5 516 M
(em\) every other diophantine for a complementary set has complexity greater than K. Finding Sim) s
5 505 M
(plest Complement Diophantine is also undecidable.) s
5 494 M
(471.14 Waring Problem and Diophantos/Bachet/Lagrange Four Square Theorem for real quarternions) s
5 483 M
( - Topics in Algebra - Lemma 7.4.3 and Theorem 7.4.1 - Page 373-377 - [Israel N. Herstein] - E) s
5 472 M
(ver positive integer is sum of four squares i.e There is a diophantine polynomial f\(a,b,c,d\) =) s
5 461 M
( a^2 + b^2 + c^2 + d^2 = n in N.) s
5 450 M
(471.15 Complement Functions, Diophantine Analysis and ABC Conjecture - https://en.wikipedia.or) s
5 439 M
(g/wiki/Abc_conjecture - ABC Conjecture in number theory is the following:) s
5 428 M
(Let a + b = c be a mutually coprime integer triple f\(a,b,c\). Quality q\(a,b,c\) is defined as = ) s
5 417 M
(log\(c\)/log\(radical\(abc\)\) where radical\(abc\) is the product of distinct prime factors of produc) s
5 406 M
(t abc. In most cases q\(a,b,c\) < 1. ABC conjecture postulates existence of finitely many triple) s
5 395 M
(s \(a,b,c\) for which q\(a,b,c\) > 1 + epsilon. f\(a,b,c\) : a + b = c is the diophantine equation f) s
5 384 M
(or the set of coprime triples.) s
5 373 M
(471.16 Erdos-Straus Diophantine Conjecture - https://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93) s
5 362 M
(Straus_conjecture - For any integer n >= 2, there exist integer triples a,b,c which are soluti) s
5 351 M
(ons to diophantine equation : 4/n = 1/a + 1/b + 1/c) s
5 340 M
(471.17 ABC Conjecture Proof-designate - Interuniversal Teichmuller Theory - [Shinichi Mochizuk) s
5 329 M
(i] - http://www.kurims.kyoto-u.ac.jp/~motizuki/top-english.html) s
5 318 M
(471.18 Exponential Diophantines, Fibonacci and Lucas Sequences, Maximum limit on solvability o) s
5 307 M
(f Diophantine - Reduction of Unknowns in Diophantine Representations - [SunZhiWei] - http://ma) s
5 296 M
(ths.nju.edu.cn/~zwsun/12d.pdf - "... If we take into account the number of unknowns, then it i) s
5 285 M
(s natural to ask that for what n there does not exist an algorithm to test \(polynomial\) Diopha) s
5 274 M
(ntine equations with n unknowns for solvability in integers..." - n=27 or n=11) s
5 263 M
(471.19 Diophantine Equation Representation of Fibonacci Series - [James P.Jones] - https://www) s
5 252 M
(.fq.math.ca/Scanned/13-1/jones.pdf ) s
5 241 M
(471.20 Vandermonde Matrix and Polynomial Interpolation - https://ece.uwaterloo.ca/~dwharder/Nu) s
5 230 M
(mericalAnalysis/05Interpolation/vandermonde/) s
5 219 M
(471.21 Number of zeroes of Riemann Zeta Function - [Norman Levinson - Hugh L.Montgomery] - htt) s
5 208 M
(ps://projecteuclid.org/download/pdf_1/euclid.acta/1485889821) s
5 197 M
(471.22 Diophantine Representation of Riemann Zeta Function - Davis-Matiyasevich-Robinson Theor) s
5 186 M
(em and Matiyasevich\(1993\) Theorem - "...Theorem 2 \(Davis, Matiyasevich, and Robinson\). The Rie) s
5 175 M
(mann hypothesis is equivalent to the assertion \(for n = 1, 2, 3, . . .\) that \(Sum\(k\342\\211\244\316\264\(n\)) s
5 164 M
( [1/k \342\\210\\222 n^2/2]\)^2 < 36n^3 ..." and "...Matiyasevich essentially takes advantage of the) s
5 153 M
( fact that the Riemann hypothesis implies that for n \342\\211\245 600, |\317\\210\(n\) \342\\210\\222 n| < n^1/) s
5 142 M
(2*\(logn\)^2.  Since \317\\210\(n\) = log\(lcm\(1, 2, . . . , n\)\),..." - http://web.stanford.edu/~anayeb) s
5 131 M
(i/projects/RH_Diophantine.pdf \(Philosophical Implication: Diophantines are contained in Adlema) s
5 120 M
(n-Manders Complexity Class D a subset of NP. Proof of P=NP implies Riemann Hypothesis is easil) s
5 109 M
(y solvable by an algorithm e.g ZetaGrid or humans\) ) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(--------) s
5 65 M
(472. \(FEATURE-DONE\) Support Vector Machines Update and Discrete Hyperbolic Factorization Spark) s
5 54 M
( Benchmarks) s
5 43 M
(- 14 November 2017) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(--------) s
5 10 M
(\(*\) Support Vector Machines implementation has been updated to persist the learnt support vect) s
_R
S
%%Page: (305) 305
%%BeginPageSetup
_S
18 36 translate
/pagenum 305 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (305) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ors to) s
5 681 M
( a disk file SupportVectorMachines.txt) s
5 670 M
(\(*\) This text file is read in classify\(\)) s
5 659 M
(\(*\) Support Vectors Dictionary is JSON dumped and eval\(\)-ed and not JSON loaded because of ser) s
5 648 M
(ialization) s
5 637 M
(  glitch in defaultdict\(list\)) s
5 626 M
(------------------------------------------) s
5 615 M
(\(*\) Computational Geometric Hyperbolic Factorization Spark implementation has been benchmarked) s
5 604 M
( for) s
5 593 M
( 2 more integers of 9 and 10 bits. Some 8 bit numbers were benchmarked earlier.) s
5 582 M
(\(*\) Spark logs for these benchmarks have been committed and time duration is calculated as 3 w) s
5 571 M
(ay split) s
5 560 M
( of real/user/system by time shell utility) s
5 549 M
(\(*\) These benchmark numbers are on dual core single node Spark cluster) s
5 538 M
(\(*\) C++/python files for tilings have been updated and pixelated tiles storage text files have) s
5 527 M
( been rewritten) s
5 516 M
(------------------------------------------) s
5 505 M
(Note on Factorization Spark benchmarks) s
5 494 M
(------------------------------------------) s
5 483 M
(Following are approximate correlations of the observed numbers to the theoretical polylogarith) s
5 472 M
(mic time bound - exponents of logN \(=number of bits\) increase probably because number of paral) s
5 461 M
(lel RAMs\(cores\) do not increase commensurate with the number of bits and is static dual core:) s
5 439 M
(10 bit - real   17m11.931s = 1031.931s \(~k*10^x3\) ~ \(logN\)^3.013 \(x3=3.013\)) s
5 428 M
(9 bit  - real   7m46.247s  = 466.247s  \(~k*9^x2\) ~ \(logN\)^2.796 \(x2=2.796\)) s
5 417 M
(8 bit  - real   3m40.091s  = 220.091s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 406 M
(8 bit  - real   3m39.539s  = 219.539s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 395 M
(8 bit  - real   3m38.795s  = 218.795s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 384 M
(8 bit  - real   3m38.622s  = 218.622s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 373 M
(8 bit  - real   3m38.920s  = 218.920s  \(~k*8^x1\) ~ \(logN\)^2.589 \(x1=2.589\)) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-------------------------------------------) s
5 329 M
(473. \(THEORY\) Computational Geometric Hyperbolic Factorization, Discrete Geometry, Rastering i) s
5 318 M
(n Graphics/Computational Digital Geometry,) s
5 307 M
(Bresenham's Line Algorithm adapted for Hyperbolic tiling, Point Location, Ray shooting - 15,16) s
5 296 M
( November 2017 - related to 34, 465) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(-------------------------------------------) s
5 263 M
(Finding factors of integer N by creating pixelated polygon for hyperbolic curve xy=N has great) s
5 252 M
( visual intuition. Similar algorithms already) s
5 241 M
(exist in discrete geometry and computer graphics disciplines. Bresenham's Line drawing algorit) s
5 230 M
(hm is a classic used still in vector graphics) s
5 219 M
(which approximates a continuous line on a pixelated digital space. This approximation of conti) s
5 208 M
(nuous curves on digital space is called) s
5 197 M
(Rastering. Tile segments of hyperbola in preprocessing step of factorization are found by solv) s
5 186 M
(ing for deltay in:) s
5 175 M
(                xy = N) s
5 164 M
(                \(x+1\)\(y-deltay\) = N) s
5 153 M
(                xy - x*deltay + y - deltay = N) s
5 142 M
(                y = deltay * \(x+1\)) s
5 131 M
(                deltay = y/\(x+1\) for deltax=1) s
5 120 M
(which is similar to Bresenham Line algorithm for finding next point to plot on raster. Tile se) s
5 109 M
(gment \(N/x, N/\(x+1\)\) along y-axis is equal to) s
5 98 M
(interval \(y, y-\(y/x+1\)\) on y-axis.) s
5 76 M
(Tiling preprocessing phase of factorization embeds a continuous hyperbola in a grid of horizon) s
5 65 M
(tal and vertical straight lines. Each horizontal) s
5 54 M
(line corresponds to an integer in y-axis and vertical line to an integer in x-axis. Hyperbolic) s
5 43 M
( arc traverses the squares\(pixels\) of the grid.) s
5 32 M
(Thus the polygon approximating the continuous hyperbola is the union of all squares\(pixels\) th) s
5 21 M
(rough which hyperbolic arc passes. Union of) s
5 10 M
(squares create rectangular faces of the art gallery polygon vertices of which are the location) s
_R
S
%%Page: (306) 306
%%BeginPageSetup
_S
18 36 translate
/pagenum 306 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (306) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(s of the guards. Vertices of these rectangles) s
5 681 M
(through which hyperbolic arc passes through are the factors.) s
5 659 M
(Art Gallery Pixelated polygon approximating a hyperbola is a Planar Simple Line Graph \(PSLG\) w) s
5 648 M
(here each side of the polygon is an edge in) s
5 637 M
(PSLG. This PSLG has \(number_of_factors + 1\) rectangular faces which is O\(loglogN\). Vertices wh) s
5 626 M
(ere two adjacent rectangular faces) s
5 615 M
(meet are the factor points of N. Planar point location has to find these factor points. Geomet) s
5 604 M
(ric Ray Shooting Query for this is : "Find points of vertices where two rectangular faces of p) s
5 593 M
(olygon meet". This ray shooting can be picturised as a line from origin intersecting the raste) s
5 582 M
(red hyperbolic polygon and multiple rays from a common origin are shot in parallel of various ) s
5 571 M
(\(0-90 degrees\) angles.  O\(loglogN\) of these rays pass through the factor vertices. Number of r) s
5 560 M
(ays required is proportional to length of the hyperbolic curve = O\(N\). Thus parallel ray shoot) s
5 549 M
(ing is a geometric sieve for factoring   and is an alternative to sorting and binary searching) s
5 538 M
( the hyperbolic tile segments.) s
5 516 M
(References:) s
5 505 M
(----------) s
5 494 M
(473.1 Bresenham Algorithm for Line Rastering - https://en.wikipedia.org/wiki/Bresenham%27s_lin) s
5 483 M
(e_algorithm) s
5 472 M
(473.2 Rasterizing curves - http://members.chello.at/easyfilter/bresenham.pdf) s
5 461 M
(473.3 Efficient Algorithms for Ray Shooting Queries - [Pankaj K.Agarwal] - https://epubs.siam.) s
5 450 M
(org/doi/pdf/10.1137/0222051) s
5 439 M
(473.4 Parallel Planar Point Location - [Richard Cole] - https://ia601408.us.archive.org/33/ite) s
5 428 M
(ms/onoptimalparalle00cole/onoptimalparalle00cole.pdf) s
5 417 M
(473.5 Parallel Geometric Search - [Albert Chan,Frank Dehne, Andrew Rau-Chaplin] - https://web.) s
5 406 M
(cs.dal.ca/~arc/publications/1-16/paper.pdf) s
5 395 M
(473.6 Parallel Computational Geometry - https://www.cs.princeton.edu/~chazelle/pubs/ParallelCo) s
5 384 M
(mpGeom.pdf - [A.Aggarwal,B.Chazelle,L.Guibas,C.O.Dunlaing,C.Yap] - Section 2 - Definition of N) s
5 373 M
(C based on PRAM - Section 5 - Algorithms for line segment intersection, art gallery guards, po) s
5 362 M
(lygon triangulation, partitioning \(kd-trees, quadtrees\) are in NC. Factorization by approximat) s
5 351 M
(ing a hyperbola into a pixelated polygon can be rephrased as line segment intersection problem) s
5 340 M
(, where sides of the polygons are line segments and their intersecting points contain factor v) s
5 329 M
(ertices. There are O\(loglogN\) intersection points in hyperbolic polygon where sides meet. Thus) s
5 318 M
( factorization can be solved in NC assuming pixelated hyperbolic polygon already exists.) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-----------) s
5 274 M
(474. \(FEATURE-DONE\) Computational Geometric Factorization - Tiling Update and benchmark number) s
5 263 M
(s for factoring few integers - 16 November 2017) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(-----------) s
5 230 M
(\(*\) Existing hyperbolic tiling code depends on C++ code in cpp-src/miscellaneous) s
5 219 M
(\(*\) To remove this dependency, python script for tiling the hyperbolic arc with simple pixelat) s
5 208 M
(ion similar to bresenham algorithm has been committed to repository - this script writes two f) s
5 197 M
(iles suffixed .coordinates and .mergedtiles from rounding off the interval [N/x,N/\(x+1\)] in a ) s
5 186 M
(function hyperbolic_tiling\(\)) s
5 175 M
(\(*\) This function is invoked in DiscreteHyperbolicFactorizationUpperbound_Bitonic_Spark.py bef) s
5 164 M
(ore bitonic sort) s
5 153 M
(\(*\) DiscreteHyperbolicFactorizationUpperbound_Bitonic_Spark.py is parametrized and accepts num) s
5 142 M
(ber to factorize as commandline argument:) s
5 131 M
(       #$SPARK_2.1.0_HOME/spark-submit DiscreteHyperbolicFactorizationUpperbound_Bitonic_Spark) s
5 120 M
(.py <number_to_factorize>) s
5 109 M
(\(*\) Few more time shell builtin benchmark numbers for factorizing 3-bit, 4-bit, 5-bit, 6-bit ,) s
5 98 M
( 7-bit integers have been committed in testlogs/) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(----------) s
5 54 M
(475. \(FEATURE-DONE\) Computational Geometric Factorization Update - Spark Accumulators, JSON fo) s
5 43 M
(r Tiling etc., - 19 November 2017) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(----------) s
5 10 M
(\(*\) Hyperbolic tiling code in python has been changed to reflect C++ tiling in cpp-src/miscell) s
_R
S
%%Page: (307) 307
%%BeginPageSetup
_S
18 36 translate
/pagenum 307 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (307) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(aneous) s
5 681 M
(\(*\) globalcoordinates global variable has been made Spark Accumulator Mutable global state - g) s
5 670 M
(lobalmergedtiles is already a Spark Accumulator global mutable state) s
5 659 M
(\(*\) bitoniclock acquire/release statements have been added for global variables, but commented) s
5 648 M
( for benchmarking) s
5 637 M
(\(*\) New boolean flags for bitonic comparator python style variable swap, for enabling multiple) s
5 626 M
( threads for assign have been added) s
5 615 M
(\(*\) merge_sorted_halves\(\) has been invoked as a separate function) s
5 604 M
(\(*\) C++ tiling has been chosen because accuracy of long double in creating tile pixels is bett) s
5 593 M
(er than similar tiling code in python) s
5 582 M
(\(*\) Benchmark numbers for factoring 511 has been added to testlogs/ and are similar to previou) s
5 571 M
(s numbers) s
5 560 M
(\(*\) .mergedtiles and .coordinates files are loaded/dumped as JSON in python hyperbolic tiling) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(-------------------------------------------) s
5 516 M
(476. \(FEATURE-DONE and THEORY\) Computational Geometric Factorization Update - Benchmarks and T) s
5 505 M
(iling - 20 November 2017 - related to 34) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-------------------------------------------) s
5 472 M
(\(*\) Some further changes to Python hyperbolic tiling have been made - tile endpoints have been) s
5 461 M
( cast from floating point to integer) s
5 450 M
(for create_tile\(\)) s
5 439 M
(\(*\) C++ tiling in cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.cpp ) s
5 428 M
(has been parametrized and takes) s
5 417 M
(as commandline argument the integer to factorize.) s
5 406 M
(\(*\) Shell script cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.sh ha) s
5 395 M
(s been changed to pass in the integer to) s
5 384 M
(factorize to the C++ tiling binary in cpp-src/ and spark-submit for PySpark executable in pyth) s
5 373 M
(on-src/ from shell args $*) s
5 362 M
(\(*\) This shell script unifies C++ tiling and PySpark factorization) s
5 351 M
(\(*\) Known issues: Python tiling still differs from C++ tiling significantly. Changing the hard) s
5 340 M
(coded tile arrays storage in C++ tiling) s
5 329 M
(to malloc\(\)-ed heap storage causes faulty tiling. There are only optimization issues which do ) s
5 318 M
(not affect the factorization. Factorization) s
5 307 M
(works well and more benchmarks were done e.g for integers 723 and 501. Numbers for these and p) s
5 296 M
(ast numbers are charted below) s
5 285 M
(\(*\) Following profiling numbers along with previous benchmarks for 8,9,10 bits \(14 November 20) s
5 274 M
(17\) capture the trend in the exponent of logN ) s
5 263 M
(\(*\) Gradual increase in exponent of number of bits because of static number of parallel RAMs \() s
5 252 M
(cores\) is not quite steep from ) s
5 241 M
(3-bit to 10-bit integers as one might expect. Integers of same bit numbers need almost equal d) s
5 230 M
(uration to factorize which implies the exponent) s
5 219 M
(could be a function of logN and not N. Htop shows equal loading of both cores of CPU and consu) s
5 208 M
(mption is almost 100%+100%.) s
5 197 M
(\(*\) Cloud computing is not exactly a parallel RAM but multiple cores are PRAMs having concurre) s
5 186 M
(nt access to a shared memory. Nodes in) s
5 175 M
(cloud have local memory processing too. Spark's Global State Variables \(Accumulators\) which ar) s
5 164 M
(e reflected across all cloud nodes are) s
5 153 M
(software simulations of Parallel RAMs - same global state is concurrently accessed by CPUs of ) s
5 142 M
(spark nodes. Present PySpark implementation) s
5 131 M
( does the sorting on accumulators. Binary search is not necessary because Maximum elements at ) s
5 120 M
(the end of the k-merge sorting of globalmergetiles automatically have shuffled coordinates as ) s
5 109 M
(factors in globalcoordinates accumulator. This shaves of additional O\(logN\). This optimization) s
5 98 M
( ) s
5 87 M
(is an update to drafts in 34.1 and 34.2:) s
5 76 M
(         - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmic) s
5 65 M
(SieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.tex/) s
5 54 M
(download) s
5 43 M
(         - http://sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmic) s
5 32 M
(SieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.pdf/) s
5 21 M
(download) s
_R
S
%%Page: (308) 308
%%BeginPageSetup
_S
18 36 translate
/pagenum 308 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (308) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\(*\) Following are only representative figures and ideal benchmark requires a Spark cloud prefe) s
5 681 M
(rably on machines of high number multicore CPUs) s
5 670 M
( and comparison with existing General Number Field Sieve implementations \(which is quasipolyno) s
5 659 M
(mial-exponential\).) s
5 648 M
(----------------------------------------------------------------) s
5 637 M
(723 - 10-bit - real    16m30.346s = 990.346s ~ O\(logN^2.9956\)) s
5 626 M
(511 - 9-bit - real    7m46.518s = 466.518s ~ O\(logN^2.8382\)) s
5 615 M
(511 - 9-bit - real    7m35.642s = 455.642s ~ O\(logN^2.7854\)) s
5 604 M
(501 - 9-bit - real    7m36.879s = 456.642s ~ O\(logN^2.7864\) [shell script - includes time dura) s
5 593 M
(tion for C++ tiling]) s
5 582 M
(100 - 7-bit - real    2m33.911s = 153.911s ~ O\(logN^2.5851\)) s
5 571 M
(123 - 7-bit - real    2m52.704s = 172.704s ~ O\(logN^2.6482\)) s
5 560 M
(63 - 6-bit - real    1m17.460s = 77.460s ~ O\(logN^2.4243\)) s
5 549 M
(33 - 6-bit - real    0m58.950s = 58.950s ~ O\(logN^2.2757\)) s
5 538 M
(14 - 4-bit - real    0m19.927s = 19.927s ~ O\(logN^2.1609\)) s
5 527 M
(12 - 4-bit - real    0m19.651s = 19.651s ~ O\(logN^2.1609\)) s
5 516 M
(6 - 3-bit - real    0m15.118s = 15.118s ~ O\(logN^2.4649\)) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(------------------------------------------------) s
5 472 M
(477. \(THEORY\) Computational Geometric Factorization - Tiling Optimizations - K-Merge Sort is d) s
5 461 M
(ispensable and Local Tile Search is sufficient) s
5 450 M
(- 21 November 2017) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(------------------------------------------------) s
5 417 M
(Finding factor vertices in pixelated hyperbolic polygon is equivalent to geometric search quer) s
5 406 M
(y: "Is there a right turn followed by a) s
5 395 M
(downturn in the polygon?". These turning points coinciding with hyperbolic arc are factor poin) s
5 384 M
(ts. Number of rectangles in pixelated hyperbolic) s
5 373 M
(polygon = O\(loglogN\). Each tile along y-axis in the polygon \(array of pixels\) is of length del) s
5 362 M
(tay = N/[x\(x+1\)]. Maximum number of tiles) s
5 351 M
(in the pixelation can be derived as:) s
5 340 M
(        xy=N) s
5 329 M
(        \(x+deltax\)\(y-deltay\)=N) s
5 318 M
(        => xy + y*deltax - x*deltay - deltax*deltay = N) s
5 307 M
(        But deltax = 1, ) s
5 296 M
(        => y - \(x+1\) deltay = 0) s
5 285 M
(        deltay = y/\(x+1\) and y = N/x ) s
5 274 M
(        => N/x\(x+1\) = deltay > 1 [each tile should be of length atleast 1]) s
5 263 M
(        N > x*x + x) s
5 252 M
(        => x = \(sqrt\(1 + 4N\) - 1\) / 2) s
5 241 M
(        For large N, sqrt\(1 + 4N\) ~ sqrt\(4N\) = 2*sqrt\(N\)) s
5 230 M
(        => x ~ sqrt\(N\) for large N) s
5 219 M
(Maximum number of tiles in the pixelation is O\(sqrt\(N\)\). If number of processors is O\(sqrt\(N\)\)) s
5 208 M
(, each tile can be assigned to a processor and) s
5 197 M
(tiling can be done in O\(1\) parallel time. Number of processors required can be reduced by havi) s
5 186 M
(ng O\(sqrt\(N\)/\(logN\)^c\) processors. O\(sqrt\(N\)\)) s
5 175 M
(tiles can be created in O\(\(logN\)^c\) total parallel time i.e in each iteration O\(sqrt\(N\)/\(logN\)) s
5 164 M
(^c\) tiles can be created in parallel by as many processors and there are O\(\(logN\)^c\) iteration) s
5 153 M
(s. Creating a tile in a processor is defined as assigning the tile interval ordered pair of co) s
5 142 M
(ordinates \(tilestart, tileend\) to it where tilestart=\(x, y1\) and tileend=\(x, y2\). This tile se) s
5 131 M
(gment interval is implicitly sorted ascending/descending in one of the axes and therefore can ) s
5 120 M
(be locally binary searched. This does away with Global K-Merge Sort of the locally sorted tile) s
5 109 M
( segments. Because each tile is of length N/x\(x+1\), |y2-y1| = N/[x\(x+1\)]. If N exists in a til) s
5 98 M
(e segment then there exists a factor point \(x,y\) in the tile segment such that y1 < y < y2 and) s
5 87 M
( xy=N. Binary search per implicitly sorted tile segment is of O\(log\(N/[x\(x+1\)]\) <= O\(logN\).) s
5 65 M
(Thus factors can be found just by:) s
5 54 M
(        477.1 Tiling in parallel requiring O\(\(logN\)^c\) tile and O\(sqrt\(N\)/\(logN\)^c\) processors) s
5 43 M
( where number of tiles = O\(sqrt\(N\)\)) s
5 32 M
(        477.2 Local Binary Search per processor on each sorted tile of O\(logN\) time) s
5 21 M
(and no k-merge sort is necessary.) s
_R
S
%%Page: (309) 309
%%BeginPageSetup
_S
18 36 translate
/pagenum 309 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (309) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Previous optimization reduces number of PRAMs by orders of \(logN\)^c but increases exponent of ) s
5 681 M
(parallel time O\(\(logN\)^c\). Bitonic K-merge sort is global and least parallel time though numbe) s
5 670 M
(r of processors required is huge \(yet in NC and work-time optimal\). Bitonic K-merge sort doesn) s
5 659 M
(ot require binary search because factors are in the forefront of the mergesorted and shuffled ) s
5 648 M
(tile coordinates always.) s
5 626 M
(References:) s
5 615 M
(-----------) s
5 604 M
(477.1 Line segment turn detection - http://fileadmin.cs.lth.se/cs/Personal/Rolf_Karlsson/lect9) s
5 593 M
(.pdf - For two line segments, find if there is a left or right turn - line segments are vector) s
5 582 M
(s and sign of their cross product determines left or right turn. Assuming a pixelated polygon ) s
5 571 M
(and) s
5 560 M
(its sides as input array of line segments, cross product of adjacent pairs of line segment vec) s
5 549 M
(tors can be computed in parallel and direction of turn can be found.) s
5 538 M
(477.2 Sweepline algorithms - http://www.ics.uci.edu/~goodrich/pubs/ggb-sweep-j.pdf) s
5 527 M
(477.3 Rectangle Stabbing - School on Geometric Computing, IIT Delhi \(2010\) - http://www.cse.ii) s
5 516 M
(td.ernet.in/~ssen/geomschool/nandy/TR-RS.pdf - Stabbing number for a set of axis-parallel rect) s
5 505 M
(angles is the minimum number of vertical and horizontal lines required such that each line pas) s
5 494 M
(ses through one of the rectangles covering all rectangles. This problem is NP-hard by reductio) s
5 483 M
(n from set cover. Hyperbolic pixelation is a special case inverse problem of stabbing where a ) s
5 472 M
(polygon of adjoining axis-parallel rectangles are created such that hyperbolic arc passes thro) s
5 461 M
(ugh each of them.) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(----------) s
5 417 M
(478. \(FEATURE-DONE and THEORY\)  Computational Geometric Factorization and Parallel Tile Search) s
5 406 M
( Updates) s
5 395 M
(- related to 34 and 477 - 22 November 2017) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(----------) s
5 362 M
(\(*\) cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.cpp has been revam) s
5 351 M
(ped and unnecessary code has been removed. Function names have been changed. NUMBER_OF_TILES h) s
5 340 M
(as been declared as a macro and has to be manually changed and compiled to nearest power of 2 ) s
5 329 M
(greater than number to factorize. Compilation and PySpark factorization is taken care of by sh) s
5 318 M
(ell script cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_Bitonic.sh) s
5 307 M
(\(*\) New Spark python script python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Op) s
5 296 M
(timized.py has been added to repository. This is the parallel tile search optimization already) s
5 285 M
( mentioned in NeuronRain AsFer Design Document. Spark parallelize\(\) distributes the tiles-coor) s
5 274 M
(dinates array of ordered pairs as RDDs across cloud nodes and node prints the factor point in ) s
5 263 M
(y-axis if x-axis matches the number to factorize. Spark parallelize\(\) simulates the binary sea) s
5 252 M
(rch on a local tile segment per PRAM processor. Presently binary search has not been implement) s
5 241 M
(ed in tilesearch\(\) function of foreach\(\) Spark Action. This is because map/foreach functions a) s
5 230 M
(ct on a single element argument of a parallelized RDD.) s
5 219 M
(\(*\) How Spark parallelizes a sequential datastructure on cloud nodes is equivalent to binary s) s
5 208 M
(earch on an array of length 1 which is a no-op.  Because of this parallize\(\) of Spark has been) s
5 197 M
( assumed to be equivalent to a binary search.) s
5 186 M
(\(*\) Benchmark numbers for two integers 1011 and 1013 with and without sorting have been commit) s
5 175 M
(ted to testlogs/ and Tiling time durations have also been captured on how well mere tile searc) s
5 164 M
(h optimizes as opposed to sorting.) s
5 153 M
(\(*\) As evidenced from python-src/testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch) s
5 142 M
(_Optimized.log.22November2017, tiling preprocessing is quite insignificant \(<<1 sec\) and tile ) s
5 131 M
(search for 1011 and 1013 requires approximately 20 seconds while bitonic sorting duration for ) s
5 120 M
(same numbers is ~16minutes \(960 seconds\) a speedup of almost 50x.) s
5 109 M
(\(*\) Benchmarks for Local Tile Search obviate the requirement for k-merge sorting of pixelated ) s
5 98 M
(hyperbolic tiles, if parallelism is huge.) s
5 87 M
(\(*\) Following is the trade-off:) s
5 76 M
(        - Bitonic K-merge sorting of tiles : binary search is not necessary but a tremendous p) s
5 65 M
(erformance drag and overkill, suitable for low number of PRAMs) s
5 54 M
(        - Local tile search : binary search is necessary only per processor but requires relat) s
5 43 M
(ively high number of PRAMs) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(---------------------------------------------) s
_R
S
%%Page: (310) 310
%%BeginPageSetup
_S
18 36 translate
/pagenum 310 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (310) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(479. \(FEATURE-DONE\) Computational Geometric Factorization Tiling Optimization - Binary Search ) s
5 681 M
(for Tile Segments in Spark - 23 November 2017) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(---------------------------------------------) s
5 648 M
(\(*\) Binary Search has been implemented in Spark Tile Search Optimization by parallizing the se) s
5 637 M
(t of intervals of pixelated hyperbolic arc.) s
5 626 M
(\(*\) By this each tile interval can be binary searched in parallel to find the factor point wit) s
5 615 M
(h no) s
5 604 M
(necessity for global k-merge sorting.) s
5 593 M
(\(*\) Separate pixelation and tile interval file creation C++ source file has been added in cpp-) s
5 582 M
(src/miscellaneous) s
5 571 M
(\(*\) Arrayless tile creation has been chosen and only intervals are written to a file suffixed ) s
5 560 M
(as .tileintervals) s
5 549 M
(\(*\) Shell script which compiles and executes the tile interval creation file and spark interva) s
5 538 M
(l binary search script has been added.) s
5 527 M
(\(*\) Invoking the shell script as:) s
5 516 M
(        cpp-src/miscellaneous/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.s) s
5 505 M
(h <number_to_factorize\)) s
5 494 M
(is sufficient to print the factors) s
5 483 M
(\(*\) Following are benchmark numbers for factorizing few reasonably high bit integers. Removing) s
5 472 M
( K-Merge sort has significant effect on the) s
5 461 M
(throughput even for a single node spark cluster on dual core \(local[2]\):) s
5 450 M
(Factorization of 12093 \(14-bit\): real   0m33.108s \(single core - local[1]\) ) s
5 439 M
(Factorization of 12093 \(14-bit\): real   0m29.589s \(dual core - local[2]\)) s
5 417 M
(Factorization of 65532 \(16-bit\): real   0m44.899s \(single core - local[1]\)) s
5 406 M
(Factorization of 65532 \(16-bit\): real   0m39.621s \(dual core - local[2]\)) s
5 373 M
(Factorization of 102349 \(17-bit\): real  1m5.490s \(single core - local[1]\)) s
5 362 M
(Factorization of 102349 \(17-bit\): real  0m58.776s \(dual core - local[2]\)) s
5 340 M
(Factorization of 934323 \(20-bit\): real  8m20.017s \(single core - local[1]\)) s
5 329 M
(Factorization of 934323 \(20-bit\): real  7m37.958s \(dual core - local[2]\)) s
5 307 M
(Factorization of 1343231 \(21-bit\): real 16m34.759s \(single core - local[1]\)) s
5 296 M
(Factorization of 1343231 \(21-bit\): real 10m49.218s \(dual core - local[2]\)) s
5 285 M
( ) s
5 274 M
(\(*\) Above tile binary search numbers beat bitonic k-mergesort of tiles by many orders of magni) s
5 263 M
(tude ) s
5 252 M
(\(*\) logs containing factors of above integers have been committed to testlogs/) s
5 241 M
(\(*\) This optimization thus effectively supersedes mergesort of tiles and is thus a better PySp) s
5 230 M
(ark implementation of Discrete Hyperbolic Factorization. ) s
5 219 M
(----------------------------------------------) s
5 208 M
(\(*\) Updated AsFer Design Document - benchmark numbers for both single and dual cores for tile ) s
5 197 M
(search) s
5 186 M
(in computational geometric factorization) s
5 175 M
(\(*\) Updated python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py for d) s
5 164 M
(ual cores) s
5 153 M
(\(local[2]\)) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(------) s
5 109 M
(480. \(FEATURE-DONE\) Computation Geometric Factorization - Binary Search for Tiles - Benchmarks) s
5 98 M
(- 24 November 2017) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(------) s
5 65 M
(Benchmark numbers for factoring 24 bit integer by Tile BinarySearch Optimization script have b) s
5 54 M
(een committed to testlogs/ \(single node cluster, dual core\):) s
5 32 M
(Factorization of 9333123 \(24-bit\):) s
5 21 M
(---------------------------------) s
5 10 M
(real    112m24.101s \(Spark duration 12:21 to 14:02 = 101minutes = 6060seconds\)) s
_R
S
%%Page: (311) 311
%%BeginPageSetup
_S
18 36 translate
/pagenum 311 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (311) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(user    0m0.000s) s
5 681 M
(sys     0m0.004s) s
5 659 M
(Again binary search of tiles in parallel is way better than k-mergesort of tiles. Largest know) s
5 648 M
(n numbers) s
5 637 M
(widely used are 128-bit. Trend for different bits indicates, Spark cloud of few multicore node) s
5 626 M
(s is) s
5 615 M
(sufficient to factorize 128-bit integers in few minutes. Previous benchmark uses spark-default) s
5 604 M
(.conf files) s
5 593 M
(from python-src/InterviewAlgorithm/ \(2GB of heapspace\)) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(--------------------------------------------) s
5 549 M
(481. \(THEORY\) Computational Geometric Factorization - Parallel Local Binary Search for Tiled H) s
5 538 M
(yperbolic Arc - 27 November 2017) s
5 527 M
(- Snir's Theorem for Parallel Search - related to 34,477) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(--------------------------------------------) s
5 494 M
(Previous optimized factorization with no sorting and only local binary search per tile interva) s
5 483 M
(l can achieve further speed-up \(from logarithmic to sublogarithmic\) if search of each locally ) s
5 472 M
(sorted tile can be done in PRAMs. Snir's Theorem implies searching a table of sorted elements ) s
5 461 M
(can be done in sublogarithmic O\(logN/logp\) time by p CREW PRAM processors.) s
5 439 M
(Tiling preprocessing of hyperbolic arc creates O\(N\) tiles. [This is proportional to length of ) s
5 428 M
(hyperbolic arc obtainable from elementary) s
5 417 M
(calculus = DefiniteIntegral\(sqrt\(1 + [N^2/x^4]\)\)]) s
5 395 M
(Number of iterations = O\(\(logN\)^k\)) s
5 384 M
(Number of PRAMs = \(N/\(logN\)^k\)) s
5 362 M
(Factorization in parallel has following algorithm:) s
5 351 M
(while\(iterations <= O\(\(logN\)^k\)\)) s
5 340 M
({) s
5 329 M
(        *\) Assign N/\(logN\)^k tiles to N/\(logN\)^k PRAMs in parallel \(O\(1\) parallel time because) s
5 318 M
( each interval tile in a global shared memory array can be accessed by PRAM id as index\)) s
5 307 M
(        *\) Binary Search tile in each PRAM for factors \(O\(logN\) parallel time which can be red) s
5 296 M
(uced to O\(logN/logp\) by parallel binary search from Snir's Theorem\)) s
5 285 M
(}) s
5 263 M
(Previous loop totally is of [O\(1\) + O\(logN\)]*O\(\(logN\)^k\) = O\(\(logN\)^\(k+1\)\) parallel time.For m) s
5 252 M
(inimum value of k=1, Factorization by parallel) s
5 241 M
(local binary search of tiled hyperbolic arc, can be done in O\(\(logN\)^2\) parallel time and O\(N/) s
5 230 M
(logN\) PRAM processors without k-mergesort. Assigning N/\(logN\)^k tiles to each of N/\(\(logN\)^k\) ) s
5 219 M
(PRAMs is of constant time assuming tile intervals are in a global shared memory state i.e PRAM) s
5 208 M
( is simulated by a cloud global distributed state - e.g. Spark Accumulators. Snir's Theorem im) s
5 197 M
(plies O\(\(logN\)^2\) could be optimized to) s
5 186 M
(O\(logN*logN/logp\) in CREW PRAM.) s
5 164 M
(References:) s
5 153 M
(----------) s
5 142 M
(481.1 Efficient Parallel Algorithms and subclasses of NC - [KruskalRudolphSnir] - https://ac.e) s
5 131 M
(ls-cdn.com/030439759090192K/1-s2.0-030439759090192K-main.pdf?_tid=4ba471c8-d35a-11e7-9c39-0000) s
5 120 M
(0aab0f26&acdnat=1511777222_ae2aa80751a47624aeb524f723e969b0) s
5 109 M
(481.2 On Parallel Search - Snir's Theorem - https://pdfs.semanticscholar.org/3a58/58e8517f28fa) s
5 98 M
(586364daffb34160c437bf78.pdf) s
5 87 M
(481.3 Point in Polygon \(PIP\) problem - https://en.wikipedia.org/wiki/Point_in_polygon - querie) s
5 76 M
(s if a point is inside, outside or on the polygon. Factor points are always within the pixelat) s
5 65 M
(ed hyperbolic polygon.) s
5 54 M
(481.4 Simulation of BSP and CRCW PRAM in MapReduce - Sorting, Searching, and Simulation in the) s
5 43 M
( MapReduce Framework - [Michael T. Goodrich, Nodari Sitchinava, Qin Zhang] - https://arxiv.org) s
5 32 M
(/abs/1101.1902 - Theorem 3.2 - CRCW PRAM can be simulated on MapReduce clouds by logarithmic i) s
5 21 M
(ncrease in parallel time.) s
5 10 M
(481.5 Models of Parallel Computation - PRAM shared memory model can be simulated on BSP distri) s
_R
S
%%Page: (312) 312
%%BeginPageSetup
_S
18 36 translate
/pagenum 312 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (312) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(buted memory model - http://mpla.math.uoa.gr/media/theses/msc/Lentaris_G.pdf - Bulk Synchronou) s
5 681 M
(s Parallel model consists of sequence of supersteps. Each superstep performs a local computati) s
5 670 M
(on in a processor, communicates to other parallel processors and synchronizes multiple local c) s
5 659 M
(omputations by barriers. BSP which is a distributed memory model than shared thus has close re) s
5 648 M
(semblance to cloud parallelism than PRAM.) s
5 637 M
(481.6 PRAM memory access is unit time - [Guy Blelloch] - http://www.cs.cmu.edu/afs/cs/academic) s
5 626 M
(/class/15499-s09/www/scribe/lec2/lec2.pdf - "...Once again, recall that all instructions - inc) s
5 615 M
(luding reads and writes - takes unit time. The memory is shared amongst all processors, making) s
5 604 M
( this a similar abstraction to a multi-core machine - all processors read from and write to th) s
5 593 M
(e same memory, and communicate between each other using this...". First step in the loop of pr) s
5 582 M
(evious factorization thus implies a hypothetical machine of N/\(logN\)^k cores and each core rea) s
5 571 M
(ds tile assigned to it in O\(1\) time.) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(-------------------------------------) s
5 527 M
(482. \(FEATURE-DONE\) Support Vector Machines - Mercer Theorem - Kernel Implementation - 29 Nove) s
5 516 M
(mber 2017) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(-------------------------------------) s
5 483 M
(\(*\) This commit implements the kernel trick for lifting points in lower dimension to higher di) s
5 472 M
(mension by a Feature map so that) s
5 461 M
( decision hyperplane in higher dimension separates the points accurately.) s
5 450 M
(\(*\) Mercer Theorem creates a kernel function unifies Feature map lifting and Dot product in hi) s
5 439 M
(gher dimension) s
5 428 M
(\(*\) Feature map phi maps a point in a dimension d to a point in dimension d+k: phi\(x\) = X. Inn) s
5 417 M
(er Product \(Dot\) of two vectors in dimension) s
5 406 M
(d+k = phi\(x\)*phi\(y\). Mercer Theorem unifies the Feature map and Dot product into a Kernel func) s
5 395 M
(tion defined as series:) s
5 384 M
(   K\(x,y\) = Sigma\(eigenvalue\(i\)*eigenfunction\(x\)*eigenfunction\(y\)\)) s
5 373 M
(\(*\) This implementation randomly instantiates a N*N square matrix, finds its Eigenvalues and E) s
5 362 M
(igenvectors, and computes the series for) s
5 351 M
(K\(x,y\) as per previous identity \(neglecting imaginary parts of Eigenvalues and Eigenvectors\)) s
5 340 M
(\(*\) logs for this have been added to testlogs/) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(--------) s
5 296 M
(483. \(FEATURE-DONE\) Support Vector Machines - Mercer Kernel Update - 30 November 2017) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(--------) s
5 263 M
(\(*\) Mercer Kernel Function has been changed to return a tuple of feature mapped points and the) s
5 252 M
( dot product) s
5 241 M
(\(*\) Feature mapped points in higher dimension are : [....., square_root\(eigenvalue[i]\)*eigenfu) s
5 230 M
(nction\(x[i]\),....]) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(------) s
5 186 M
(484. \(FEATURE-DONE\) Compressed Sensing - Image Sketch implementation - 1 December 2017) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(------) s
5 153 M
(\(*\) Sketch B of an image bitmap X is computed by multiplying with a random matrix A: B=AX) s
5 142 M
(\(*\) import ImageToBitMatrix from image_pattern_mining/ for mapping an image to a bitmap matrix) s
5 131 M
(\(*\) Sketch matrix B contains compressed information of the larger image. Original image can be) s
5 120 M
( sensed from this sketch.) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(---------------------------------------------) s
5 76 M
(485. \(FEATURE-DONE\) Compressed Sensing Update - Decompression and Error estimation of recovere) s
5 65 M
(d image bitmap from sketch - 4 December 2017) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(---------------------------------------------) s
5 32 M
(\(*\) Sketch Ax=B of an image bitmap has been persisted to a file CompressedSensing.sketch) s
5 21 M
(\(*\) A is a random matrix of dimensions \(m,n\) m<<n and m is scaled by a sketch ratio variable) s
5 10 M
(\(*\) Original image x is recovered from sketch Ax=B by inverting A and multiplying with sketch:) s
_R
S
%%Page: (313) 313
%%BeginPageSetup
_S
18 36 translate
/pagenum 313 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (313) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(                Ainverse.Ax = x_recovered) s
5 681 M
(\(*\) For non-square only approximate pseudo inverse is computable.) s
5 670 M
(\(*\) For inverting non-square matrix A, Moore-Penrose Pseudoinverse function pinv\(\) from NumPy ) s
5 659 M
(is invoked.) s
5 648 M
(\(*\) Error of the recovered image computed by trace \(sum of all entries\) of the recovered image) s
5 637 M
(.) s
5 626 M
(\(*\) Logs for multiple sketch ratios \(row values:100,200,300,400,50\) have been committed to tes) s
5 615 M
(tlogs/ which show an increase in error) s
5 604 M
(as size of the sketch decreases.) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(--------------------------------------------) s
5 560 M
(486. \(THEORY\) Computational Geometric Factorization, Tile Search Optimization and Parallel Int) s
5 549 M
(erval/Segment Search Trees - 5 December 2017) s
5 538 M
( and 22 December 2017 - related to 34, 481) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(--------------------------------------------) s
5 505 M
(Tile Search optimization for finding factors of an integer described earlier, binary-search se) s
5 494 M
(t of intervals in parallel for factor point.) s
5 483 M
(This is the classic segment/interval search tree problem in Computational Geometry. Segments/I) s
5 472 M
(ntervals are 1-dimensional polygons and represented in a binary search tree. Query point and t) s
5 461 M
(he containing interval are searched on this binary search tree. Sequential construction of int) s
5 450 M
(erval/segment search tree needs O\(nlogn\) time. Searching each tile segment in parallel and sea) s
5 439 M
(rching an interval/segment tree in parallel for factor points are equivalent. There are parall) s
5 428 M
(el segment tree construction algorithms on Bulk Synchronous Parallel\(BSP\) model and as Distrib) s
5 417 M
(uted Segment Trees. Distributed Segment Trees are based on Distributed Hash Tables and inserti) s
5 406 M
(on/retrieval of a key is based on keyspace partitioning and routing in the network i.e Each no) s
5 395 M
(de in the network is assigned a subset of segment id\(s\) in a binary partitioned space. Inserti) s
5 384 M
(on/Retrieval primitives hop through the network and find the matching node for the segment. Mo) s
5 373 M
(st cloud key-store implementations are distributed hash tables. Example: For inserting n keys ) s
5 362 M
(in O\(logN\) time, number of hops has to be O\(logN\) per key and each key is inserted in parallel) s
5 351 M
( in O\(1\) time. Minimizing number of hops implies maximizing mean degree of a node in the netwo) s
5 340 M
(rk and is a trade-off.) s
5 318 M
(Unique Prime Factorization of an integer N = p1^k1 * p2^k2 ... * pn*kn) s
5 307 M
(This can be rewritten as:) s
5 296 M
(        2^logN = 2^\(k1*log\(p1\) + k2*log\(p2\) + ... + kn*log\(pn\)\)) s
5 285 M
(=>      logN = \(k1*log\(p1\) + k2*log\(p2\) + ... + kn*log\(pn\)\)) s
5 274 M
(        SmallOmega\(N\) = number of distinct prime factors of N = O\(loglogN\) from Hardy-Ramanuja) s
5 263 M
(n Theorem) s
5 252 M
(        BigOmega\(N\) = number of prime factors including multiplicity = sum of prime powers = k) s
5 241 M
(1 + k2 + k3 + ... + kn) s
5 230 M
(But     k1 + k2 + k3 + ... + kn < \(k1*log\(p1\) + k2*log\(p2\) + ... + kn*log\(pn\)\) = logN) s
5 219 M
(=>      BigOmega\(N\) < logN) s
5 208 M
(        BigOmega\(N\) = O\(logN\) [This is very high upperbound and not tight estimate]) s
5 186 M
(Segment binary search tree representation of pixelated hyperbolic tile segments is described i) s
5 175 M
(n references below.) s
5 153 M
(Factorization algorithm for N based on Segment Tree Search is:) s
5 142 M
(        \(#\) Construct Segment Tree of Pixelated Hyperbolic Segments in Parallel \(O\(logN\) or be) s
5 131 M
(tween O\(\(logN\)^2\) and O\(\(logN\)^3\) depending on sorting\)) s
5 120 M
(        \(#\) Query the Segment Tree for factor points in O\(k + logN\) where k is the number of s) s
5 109 M
(egment intervals to be reported having factor point N=pq. It is sufficient to report atleast 1) s
5 98 M
( segment having factor point and thus k=1. Number of segments containing both prime and non-pr) s
5 87 M
(ime factor points is proportional to size of set of all subsets of distinct prime factors and ) s
5 76 M
(multiplicity \(SmallOmega and BigOmega\). Geometric intuition for this is: By moving a sweepline) s
5 65 M
( across the x-y plane, factor points and segments containing them \(which are nothing but all p) s
5 54 M
(ossible size 2 partitions of set of distinct prime factors which correspond to p and q in N=pq) s
5 43 M
(, where as Bell Number of this set is number of all possible partitions\) are reached in sequen) s
5 32 M
(ce left-to-right sorted ascending. Size of set of all subsets of distinct prime factors = 2^Sm) s
5 21 M
(allOmega\(N\) = 2^loglogN = logN. If multiplicity is taken into consideration, from the very hig) s
5 10 M
(h bound above number of sets of subsets can be as high as O\(2^logN\).) s
_R
S
%%Page: (314) 314
%%BeginPageSetup
_S
18 36 translate
/pagenum 314 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (314) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(Thus there are 3 Computational Geometric Factorization algorithms described in this draft and ) s
5 670 M
(all of them are PRAM algorithms and in NC requiring between O\(\(logN\)^2\) and O\(\(logN\)^3\) parall) s
5 659 M
(el time:) s
5 648 M
(        \(#\) K-MergeSort and BinarySearch of Hyperbolic tile segments \(mentioned in 34 - requir) s
5 637 M
(es merge sort of tile intervals/segments\)) s
5 626 M
(        \(#\) Local Binary Search in parallel of hyperbolic tiles without K-MergeSort \(mentioned) s
5 615 M
( in 481 - recent optimization, better than k-mergesort\)) s
5 604 M
(        \(#\) Segment Tree Representation and Binary Search of hyperbolic tile Segments \(uses a ) s
5 593 M
(classic datastructure, preprocessing is non-trivial and segment tree has to be constructed in ) s
5 582 M
(parallel - requires merge sort of tile intervals/segments\)) s
5 560 M
(Note: First and Third factorization algorithms are equivalent because both involve sorting of ) s
5 549 M
(pixelated hyperbolic tile segments. Second algorithm obviates sorting by assumption that each ) s
5 538 M
(PRAM can locally do a binary search without involving peer PRAM processors. Theoretically all ) s
5 527 M
(three have similar polylogarithmic \(O\(logN*logN\) at best\) runtime upperbounds. Second algorith) s
5 516 M
(m is better than First and Third probably because the constant involved in Big-O notation in s) s
5 505 M
(econd algorithm is very small compared to First and Third.) s
5 483 M
(It is apt to mention the resemblance of K-MergeSort of Hyperbolic Tile segments and Burrows-Wh) s
5 472 M
(eeler Transform \(BWT\) of a string. Burrows-Wheeler Transform sorts all rotation permutations o) s
5 461 M
(f a string, extracts the last index fr) s
5 450 M
(om each sorted permutation, concatenates them into a transformed string which has co-located s) s
5 439 M
(ubstrings. This co-location of similar substrings is invertible and useful for compression and) s
5 428 M
( indexes. K-MergeSort Computational Geometric Factorization merges and sorts concatenated tile) s
5 417 M
( segment strings, resulting in a sorted string which has) s
5 406 M
(colocated similar factor points.) s
5 384 M
(An Unsorted Search algorithm has been implemented in NeuronRain \(Section 500\) to locate a quer) s
5 373 M
(y point on an unsorted array of numbers, by representing the numbers as arrays of hashtables f) s
5 362 M
(or each digit.This algorithm can find factors in the concatenation of merged pixelated hyperbo) s
5 351 M
(lic tile segments with no requirement for sorting. But this involves hashtable preprocessing.) s
5 329 M
(Length of each tile on x-axis can be derived from equating for N:) s
5 318 M
(        xy = \(x+delta\)\(y-1\)) s
5 307 M
(        delta = x/\(y-1\) = N/[y\(y-1\)]) s
5 285 M
(Sum of lengths of all pixelated hyperbolic tiles along x-axis is the series:) s
5 274 M
(        N/\(1*2\) + N/\(2*3\) + N/\(3*4\) + ...) s
5 263 M
(But:) s
5 252 M
(        N/\(1*2\) + N/\(2*3\) + N/\(3*4\) + ... < N/1 + N/2^2 + N/3^2 + ... < N + DefiniteIntegral_2) s
5 241 M
(_to_N\(dx/x^2\) = 1.5N-1) s
5 230 M
(=> Sum of lengths of all pixelated hyperbolic tiles is upperbounded by 1.5N-1 or O\(N\)) s
5 208 M
(Some more optimizations:) s
5 197 M
(------------------------) s
5 186 M
([#] Sorting is required only if end points of two adjoined segments are in conflict \(only some) s
5 175 M
(, not all, elements in next tile are greater than last element of the preceding tile\). ) s
5 153 M
([Subsegment1] Elements of succeeding tile segment become bigger than last element in preceding) s
5 142 M
( tile segment if:) s
5 131 M
(        xy < \(x + delta\)\(y-1\)) s
5 120 M
(        xy < xy - x + delta\(y-1\)) s
5 109 M
(        => delta > x/\(y-1\)) s
5 87 M
([Subsegment2] Similarly first element in succeeding tile is bigger than last element in Subseg) s
5 76 M
(ment1 if:) s
5 65 M
(        \(x+delta\)y < \(x + N/\(y-1\)\(y-2\)\)\(y-1\) ) s
5 43 M
(Splitting each tile segment of length l into two subsegments of length delta and l-delta and b) s
5 32 M
(inary searching two sets of concatenations of these split tile segments can find factors in O\() s
5 21 M
(logN\) sequentially with no necessity for PRAMs if concatenation can be done in sequential in O) s
5 10 M
(\(logN\) time \(tree of list concatenations can be done in parallel on PRAMs in O\(logN\) time, but) s
_R
S
%%Page: (315) 315
%%BeginPageSetup
_S
18 36 translate
/pagenum 315 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (315) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( doing sequential concatenation of lists in sublinear time is an open problem\). In other words) s
5 681 M
( hyperbolic arc bow is broken into two concatenated tile segement sets and these two tile conc) s
5 670 M
(atenations are searched.) s
5 648 M
([#] If the quadrant containing hyperbolic arc is partitioned by parallel ray shooting queries ) s
5 637 M
(from origin, separated by angles proportional to location of factor points, there is no necess) s
5 626 M
(ity for sorting. Number of primes factors are O\(loglogN\). Thus kloglogN ray shooting queries f) s
5 615 M
(rom origin pierce the hyperbolic arc bow in parallel. If angular spacing between ray shooting ) s
5 604 M
(queries are approximately equal, following trigonometric expression gives the approximate prim) s
5 593 M
(e factor for each ray angle:) s
5 582 M
(        y\(m\) = SquareRoot\(N/[tan\(m*pi/\(2*k*loglogN\)\)]\) - 1 for m=1,2,3,...,kloglogN) s
5 571 M
(These are only approximate angles. Factors should lie in close proximity of the intersection p) s
5 560 M
(oints of these rays with in hyperbolic bow.) s
5 538 M
(References:) s
5 527 M
(-----------) s
5 516 M
(486.1 Parallel Segment Trees - [AV Gerbessiotis] - https://web.njit.edu/~alexg/pubs/papers/seg) s
5 505 M
(ment.ps.gz) s
5 494 M
(486.2 Distributed Segment Trees - [Guobin Shen, Changxi Zheng, Wei Pu, and Shipeng Li - Micros) s
5 483 M
(oft Research] - http://www.cs.columbia.edu/~cxz/publications/TR-2007-30.pdf) s
5 472 M
(486.3 Computational Geometry - Algorithms and Applications - [Mark de Berg, Otfried Cheong, Ma) s
5 461 M
(rc van Kreveld, Mark Overmars] - Chapter 10 - More Geometric Datastructures - Interval Trees a) s
5 450 M
(nd Segment Trees - http://people.inf.elte.hu/fekete/algoritmusok_msc/terinfo_geom/konyvek/Comp) s
5 439 M
(utational%20Geometry%20-%20Algorithms%20and%20Applications,%203rd%20Ed.pdf) s
5 428 M
(486.4 Parallel Construction of Binary Search Trees - [MJAtallah,SRKosaraju,LLLarmore,GLMiller,) s
5 417 M
(SHTeng] - https://www.cs.cmu.edu/~glmiller/Publications/Papers/ConstructingTreesInParallel.pdf) s
5 406 M
( - general binary search trees can be constructed in parallel.) s
5 395 M
(486.5 Segment Trees - definition and diagrams - [Computational Geometry Course Notes - Antoine) s
5 384 M
( Vigneron - King Abdullah University of Science and Technology] - https://algo.kaust.edu.sa/do) s
5 373 M
(cuments/cs372l07.pdf - Segments are sorted by endpoints. Leaves of the binary search segment t) s
5 362 M
(ree are atomic elementary intervals created by start-end coordinates of segments. Internal nod) s
5 351 M
(es of the segment tree contain list of segments. Internal node n of segment tree has a segment) s
5 340 M
( [s1,s2] if and only if Interval\(n\) is a subset of [s1,s2] and Interval\(parent\(n\)\) is not a su) s
5 329 M
(bset of [s1,s2] and n is closest to root. Stabbing Query "Which are the segments containing a ) s
5 318 M
(point q?" is answered by traversing the segment search tree from root recursively and choosing) s
5 307 M
( one of the two child subtree intervals containing q at each level. In Computational Geometric) s
5 296 M
( Factorization, segment binary search tree stores the tile segments of pixelated hyperbola and) s
5 285 M
( stabbing query is "Which of the tile segments have the factorization point N=pq?" which is O\() s
5 274 M
(k+logN\) and k is the O\(loglogN\) because number of tile segments containing N is exactly equal ) s
5 263 M
(to number of factors of N which is loglogN from Hardy-Ramanujan Theorem. Thus finding all fact) s
5 252 M
(or points is O\(loglogN + logN\). It has to be noted here this further optimizes the factorizati) s
5 241 M
(on algorithm by local binary search of tiles in parallel described earlier in 481. Loop in the) s
5 230 M
( algorithm is replaced by a segment tree of tile segments. But construction preprocessing time) s
5 219 M
( of segment search tree is O\(NlogN\) which requires a parallel tile segment tree construction i) s
5 208 M
(n polylogarithmic time mentioned in references below - Thus segment tree construction + stabbi) s
5 197 M
(ng query for factor points is: O\(logN^2 + loglogN + logN\) = O\(\(logN\)^2\) which is same as the t) s
5 186 M
(ime required in Factorization loop.) s
5 175 M
(486.6 Hardy-Ramanujan Theorem - https://en.wikipedia.org/wiki/Hardy%E2%80%93Ramanujan_theorem) s
5 164 M
(486.7 Parallel Construction of Segment Trees - https://www.cs.dartmouth.edu/~trdata/reports/TR) s
5 153 M
(92-184.pdf - [Peter Su, Scot Drysdale] - Section 4.2 - Analysis of Algorithm S - "...Thus we e) s
5 142 M
(xpect runtime of algorithm S would be between O\(logN^2\) and O\(logN^3\) depending on how good ou) s
5 131 M
(r sorting algorithm is...") s
5 120 M
(486.8 Parallel Computational Geometry - Parallel Construction of Segment Trees is O\(logN\) time) s
5 109 M
( - Section 5 - Pages 308-309 - [A.Aggarwal,B.Chazelle,L.Guibas,C.O.Dunlaing,C.Yap] - https://w) s
5 98 M
(ww.cs.princeton.edu/~chazelle/pubs/ParallelCompGeom.pdf) s
5 87 M
(486.9 Small omega - Number distinct prime factors of an integer - https://oeis.org/A001221 - i) s
5 76 M
(s O\(loglogN\) from Hardy-Ramanujan and Erdos-Kac Theorems) s
5 65 M
(486.10 Big omega - Number prime factors of an integer with multiplicity - https://oeis.org/A00) s
5 54 M
(1222 - is sum of prime powers in unique factorization of n. For quadratfrei\(squarefree\) intege) s
5 43 M
(rs Big Omega = Small Omega. An optimization in the segment tree search or local binary search ) s
5 32 M
(in parallel for factor points is it is not necessary to find all factorization points in stabb) s
5 21 M
(ing query. Segment tree search or local binary search can stop once first factor is found. Oth) s
5 10 M
(er factors are obtained by repetitive application of this algorithm after dividing the integer) s
_R
S
%%Page: (316) 316
%%BeginPageSetup
_S
18 36 translate
/pagenum 316 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (316) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( by factor found in previous step.) s
5 681 M
(486.11 Parallel Construction of Segment Trees applied in another setting - [Helmut Alt, Ludmil) s
5 670 M
(a Scharf] - computing depth of arrangement of axis parallel rectangles - http://cs.au.dk/filea) s
5 659 M
(dmin/madalgo/PDF/Parallel_Algorithms_for_Shape_Matching.pdf and https://pdfs.semanticscholar.o) s
5 648 M
(rg/99e5/2d0c99263dd97d5db289b72f82b233528765.pdf - O\(\(logN\)^2\) time parallel construction of a) s
5 637 M
( balanced search tree) s
5 626 M
(486.12 Function plot of Number of PRAM processors - N/\(logN\)^k - For k=1, N/logN has been plot) s
5 615 M
(ted in https://github.com/shrinivaasanka/asfer-github-code/blob/master/python-src/testlogs/Dis) s
5 604 M
(creteHyperbolicFactorizationUpperbound_TileSearch_Optimized.NbylogN_Desmos_Function_Plot.pdf -) s
5 593 M
( N/\(logN\)^k can be rewritten as 2^\(logN-kloglogN\). If N^m = 2^\(logN-kloglogN\), m = log\(logN - ) s
5 582 M
(kloglogN\)/logN << 1 for large kloglogN.) s
5 571 M
(486.13 Interval Hash Trees - [T. F. Syeda-Mahmood, P. Raghavan, N. Megiddo] - http://www.almad) s
5 560 M
(en.ibm.com/cs/people/stf/papers/caivd99.pdf - Variant of Interval Trees which includes Merkle ) s
5 549 M
(Hash Trees for Region hashing of affine rectangles within images. Merkle trees are trees of ha) s
5 538 M
(shes - leaves are hashes of regions of file blocks, internal nodes are hashes of concatenation) s
5 527 M
(s of hashes of its children nodes. If hyperbola is represented as an image, computational geom) s
5 516 M
(etric factorization reduces to querying the factor point or rectangles having factors in the i) s
5 505 M
(mage.) s
5 494 M
(486.14 Efficient Parallel Algorithms for Geometric Clustering and Partitioning Problems \(1994\)) s
5 483 M
( - [Amitava Datta] - http://www.informatik.uni-freiburg.de/tr/1994/Report64/report64.ps.gz - S) s
5 472 M
(ection 2.1 - Parallel Construction of Range Tree by creating Segment Tree in parallel in O\(log) s
5 461 M
(N\) time and O\(N\) processors.) s
5 450 M
(486.15 Parallel computational geometry of rectangles - [Chandran-Kim-Mount] - https://link.spr) s
5 439 M
(inger.com/article/10.1007/BF01758750 - this algorithm is applied in 486.14 for parallel constr) s
5 428 M
(uction of segment trees.) s
5 417 M
(486.16 SCALABLE PARALLEL COMPUTATIONAL GEOMETRY FOR COARSE GRAINED MULTICOMPUTERS - [FRANK DEH) s
5 406 M
(NE, ANDREAS FABRI, ANDREW RAU-CHAPLIN] - http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.) s
5 395 M
(1.1.46.1429&rep=rep1&type=pdf - describes a Scalable Parallel Segment Tree Construction and Se) s
5 384 M
(arch Algorithm.) s
5 373 M
(486.17 Simpler example of Segment trees - tree of nested intervals - http://www.eng.biu.ac.il/) s
5 362 M
(~wimers/files/courses/VLSI_Backend_CAD/Lecture_Notes/SegmentTree.ppt - each internal node has ) s
5 351 M
(an interval of endpoints which is union of intervals of subtree rooted in it. E.g Internal nod) s
5 340 M
(e having children [10,11] and [11,13] has interval [10,13] - Set of pixelated tile segments of) s
5 329 M
( hyperbolic arc bow creates a lower envelope - list of tile segment endpoints - which has no o) s
5 318 M
(verlaps. Segment tree of this envelope is parallelly created by one of the parallel segment tr) s
5 307 M
(ee constructions algorithms referred previously.) s
5 296 M
(486.18 Parallel construction of Bounding Volume Hierarchy Trees \(BVH\) - BVH trees are computat) s
5 285 M
(ional geometric binary search datastructures similar to BSP and kd-trees for hierarchical spac) s
5 274 M
(e partitions. Each internal node of the search tree has union of volumes bounded by its childr) s
5 263 M
(en. In this respect BVH trees are 3-dimensional counterparts of segment trees. BVH trees can b) s
5 252 M
(e constructed in parallel in GPU - https://dcgi.felk.cvut.cz/projects/ploc/ploc-tvcg.pdf) s
5 241 M
(486.19 Parallel Algorithms for Geometric Problems - [Anita Chow] - Ph.D Thesis - http://www.dt) s
5 230 M
(ic.mil/dtic/tr/fulltext/u2/a124353.pdf - Planar Point Location Binary Search Tree for Plain Si) s
5 219 M
(mple Line Graph \(similar to segment tree\) - "...In this section we describe two algorithms: \(i) s
5 208 M
(\) the construction of a search structure for the set of edges on the SMl4 with N processors an) s
5 197 M
(d \(ii\) the concurrent location of M points with M processors. The construction and the locatio) s
5 186 M
(n run in time 0\(\(logN\)^2*loglogN\) and O\(\(logN\)^2\) respectively..." - Section 4.1 - Page 60) s
5 175 M
(486.20 Parallel Augmented Maps \(PAM\) - https://arxiv.org/pdf/1612.05665.pdf - [Yihan Sun, Dani) s
5 164 M
(el Ferizovic, Guy Blelloch] - Recent Algorithm for Parallel Construction of Interval Trees by ) s
5 153 M
(Parallel Augmented Maps - Segment Trees are specialized versions of Interval Trees. Interval T) s
5 142 M
(rees can also answer stabbing query on interval, not just a point - Section 5.1 and Section 6.) s
5 131 M
(2 - "...In parallel, on 10^8 intervals, our code can build an interval tree in about 0.23 seco) s
5 120 M
(nd, achieving a 63-fold speedup. We also give the speedup of our PAM interval tree in Figure 6) s
5 109 M
(\(d\). Both construction and queries scale up to 144 threads \(72 cores with hyperthreads\)....") s
5 98 M
(486.21 Burrows-Wheeler Transform - Example transformed string "^BANANA|" - https://en.wikipedi) s
5 87 M
(a.org/wiki/Burrows%E2%80%93Wheeler_transform) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(--------------------------------------------) s
5 43 M
(487. \(THEORY\) Thermodynamics Gas Diffusion Entropy Model of Information Diffusion in Social Ne) s
5 32 M
(tworks and Text Graphs - 11 December 2017) s
5 21 M
(- related to 383) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (317) 317
%%BeginPageSetup
_S
18 36 translate
/pagenum 317 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (317) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(--------------------------------------------) s
5 681 M
(Second Law of Thermodynamics implies entropy of a closed system always increases. Gas diffusio) s
5 670 M
(n in a closed chamber distributes molecules) s
5 659 M
(at random with in the space of the chamber. Gas chamber is a 3-dimensional grid of volume N. I) s
5 648 M
(f in initial state, all gas molecules were confined to a small fractional cubic volume, probab) s
5 637 M
(ility of finding m gas molecules in kN \(k < 1\) grid points is kNCm / NCm. As the fractional vo) s
5 626 M
(lume gets close to N \(k is almost 1\), gas molecules engulf the chamber. Increase in fractional) s
5 615 M
( volume facilitates increase in degrees of freedom. Entropy of this closed system is defined a) s
5 604 M
(s clogN where c is Boltzmann constant. Diffusion of information in Social network graphs can b) s
5 593 M
(e likened to gas diffusion in closed chamber and adjacent vertices of a social network node ar) s
5 582 M
(e the neigbouring grid points. In other words, social network graph is plotted as non-planar s) s
5 571 M
(imple line graph in a 3-dimensional space and information diffuses along edges of this graph. ) s
5 560 M
(Entropy of this system can then be defined as O\(logV\) where V is number of vertices. Probabili) s
5 549 M
(ty of finding a diffused information in any fraction kV of the network follows previous Gas di) s
5 538 M
(ffusion model = \(kV\)Ci/VCi where i is the total number of information units diffused among soc) s
5 527 M
(ial network vertices. For text defintion graphs, this is nothing but Korner Entropy.) s
5 505 M
(References:) s
5 494 M
(----------) s
5 483 M
(487.1 Solomon Asch Conformity Experiments and Herd behaviour - Information Diffusion in Social) s
5 472 M
( Media - Section 7.1 - http://dmml.asu.edu/smm/SMM.pdf - this is a psychology experiment where) s
5 461 M
( set of subjects are swayed by peer opinions and rational independent decision making ceases i) s
5 450 M
(.e majority voting can go wrong.) s
5 439 M
(487.2 Emperor's New Mind - [Roger Penrose] - Inexorable increase in entropy - Page 405) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(-----------------------------------------------) s
5 395 M
(488. \(FEATURE-DONE\) NeuronRain AsFer-KingCobra MAC Electronic Money - Proof-of-Work and Univer) s
5 384 M
(sally Unique ID Hash implementation -) s
5 373 M
(14 December 2017) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(-----------------------------------------------) s
5 340 M
(\(#\) Fictitious Message-As-Currency \(MAC\) in AsFer-KingCobra has been named "Neuro".) s
5 329 M
(\(#\) This commit implements a non-trivial proof-of-work computation and finds a universally uni) s
5 318 M
(que hash id for each Neuro currency) s
5 307 M
( which has 2 leading "ff"s - Proof of Work is analogous to reCAPTCHA in websites for filtering) s
5 296 M
( out robots) s
5 285 M
(\(#\) Unique id is created from Boost UUID random generator and checked in a loop for 2 leading ) s
5 274 M
("ff" in stringified hex representation) s
5 263 M
(\(#\) Protocol Buffer version has been upgraded to 3.5/15 and currency.proto has been recompiled) s
5 252 M
( with protoc) s
5 241 M
(\(#\) asfercloudmoveclient.cpp has been updated to make a choice between std::move\(\) and std::fo) s
5 230 M
(rward\(\) move semantics:) s
5 219 M
(     - std::move\(\) just does =operator overload and moves Neuro currency over network) s
5 208 M
(     - std::forward\(\) + std::move\(\) first deferences rvalue of && for currency uuid and then d) s
5 197 M
(oes =operator overload to move Neuro currency) s
5 186 M
(\(#\) Limitation: Presently there is no documented way to create an rvalue for non-primitive dat) s
5 175 M
(atypes. For example std::string can have rvalue) s
5 164 M
(as literal string "xxxxxx".) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(--------------------------------------------) s
5 120 M
(489. \(FEATURE-DONE\) AsFer-KingCobra Neuro Electronic Currency - Rvalue NonPrimitive Perfect Fo) s
5 109 M
(rward - 18 December 2017) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(--------------------------------------------) s
5 76 M
(\(#\) New constructor for cloudmove which takes const char* uuid has been defined. This enables) s
5 65 M
(assigning a string literal rvalue to cloudmove<currency::Currency> objects.) s
5 54 M
(\(#\) New move operator= which takes const char* uuid has been defined. This internally instanti) s
5 43 M
(ates) s
5 32 M
(a currency::Currency object) s
5 21 M
(\(#\) New move operator= which takes cloudmove<T>& lvalue has been defined.) s
5 10 M
(\(#\) New value and a clause for move semantics, "nonprimitiveforward" has been defined. This cl) s
_R
S
%%Page: (318) 318
%%BeginPageSetup
_S
18 36 translate
/pagenum 318 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (318) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ause) s
5 681 M
(does std::forward\(\) of an rvalue cloudmove<currency::Currency> and then invokes std::move\(\) of) s
5 670 M
( the currency over network.) s
5 659 M
(\(#\) This differs from move semantics "std::forward" which is specific to std::string uuid only) s
5 648 M
(, and thus solves the generic currency::Currency object rvalue forward and move.) s
5 637 M
(\(#\) client and server logs for this network move have been committed to testlogs.) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(-------------------------------------------) s
5 593 M
(490. \(THEORY\) Generalization of Complementation Undecidability to Rationals\(Q\) and Reals\(R\) by) s
5 582 M
( H10\(Hilbert Tenth Problem\) and) s
5 571 M
(Connection between ZF with Axiom of Choice \(ZFC\) and Complementation - related to 471 - 28 Dec) s
5 560 M
(ember 2017, 29 March 2018) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(-------------------------------------------) s
5 527 M
(Thus far Function Complementation described in drafts of this document are oriented towards se) s
5 516 M
(t of natural numbers only - e.g Coloring of Integer Sequences, Diophantines Sets of Integers a) s
5 505 M
(nd associated Diophantine polynomials having Integer Solutions. As mentioned earlier, finding ) s
5 494 M
(the map f from a diophantine set a={a1,a2,...,an} is equivalent to solving the diophantine f\(x) s
5 483 M
(,a\)=0 for unknown x and parameter a and f itself being an arbitrary unknown diophantine. Integ) s
5 472 M
(er solutions to x in f\(x,a\)=0 creates the enumeration f\(0\)=a1,f\(1\)=a2,... which is the constru) s
5 461 M
(cted complement map. But from MRDP theorem solving integer diophantine f\(x,a\)=0 is undecidable) s
5 450 M
(. MRDP theorem does not apply for set of reals which is uncountable/non-recursively-enumerable) s
5 439 M
( - Reals have cardinality 2^|N| where N is set of natural numbers \(there are atleast two level) s
5 428 M
(s of infinities\). Because any set of cardinality greater than set of natural integers are unco) s
5 417 M
(untable, reals cannot be enumerated as f\(0\),f\(1\),... [By Cantor diagonalization there exists a) s
5 406 M
( real between any two reals]. For reals, Sturm's and Tarski methods solve arbitrary diophantin) s
5 395 M
(es for real solutions to unknowns and thus H10 is decidable for reals. But there are undecidab) s
5 384 M
(le real diophantine problems which involve sine\(\) function\(details in references\). Constructio) s
5 373 M
(n of complementation is not just about solving unknowns in a diophantine but to construct the ) s
5 362 M
(diophantine itself which is harder problem than proving undecidability from H10. Constructing ) s
5 351 M
(the complement diophantine by previous mapping procedure mandates x to be always a natural int) s
5 340 M
(eger for enumerability/listability and existence of a corresponding diophantine for this enume) s
5 329 M
(rable set - f\(0\),f\(1\),f\(2\),... - once the mapping process terminates, interpolation can find t) s
5 318 M
(he diophantine polynomial from the ordered pairs \(x1,f\(x1\)\),\(x2,f\(x2\)\),...,\(xn,f\(xn\)\). Undecid) s
5 307 M
(ability of complement construction for recursively enumerable sets arises when mapping procedu) s
5 296 M
(re itself is not recursive. Removing restriction that x has to be integer and admitting real s) s
5 285 M
(olutions for a and x, makes f\(x,a\)=0 decidable.) s
5 263 M
(Axiom of Choice: For set of sets S={s1,s2,s3,...} there exists a choice function C\(si\)=xi whic) s
5 252 M
(h chooses an element xi from every set si in S.) s
5 230 M
(Following is a special case example of Axiom of Choice in Boolean Social Choice functions:) s
5 219 M
(Depth-2 boolean function/circuit B leaves of which are sets s1,s2,s3,.... and nodes at level o) s
5 208 M
(ne are C\(s1\)=x1,C\(s2\)=x2,... for C\(si\) = 0 or 1 and si={si1,si2}, si1,si2 in {0,1}. Root is an) s
5 197 M
( AND/OR gate. For example C\(si\) is a boolean AND/OR function. Boolean complementation of C\(si\)) s
5 186 M
( flips the chosen element per each set si. This yields a complement choice function per set. I) s
5 175 M
(f this example of Boolean Axiom of Choice complementation is generalized to any set and is Tru) s
5 164 M
(e, S={C\(s1\),C\(s2\),C\(s3\),...,C\(sn\)} is a recursively enumerable set listed by function C and ha) s
5 153 M
(s a diophantine representation by MRDP theorem and its complement set created from complement ) s
5 142 M
(choice function C' of C denoted by S'={C'\(s1\),C'\(s2\),C'\(s3\),...}. If this complement set S' is) s
5 131 M
( also recursively enumerable, then both sets S and S' are recursive. This implies choice funct) s
5 120 M
(ions C and C' are constructible and have a diophantine representation.) s
5 98 M
(Disjoint Set Cover is also known as Exact Cover defined as subcollection S' of collection of s) s
5 87 M
(ubsets S of a universal set X, and each element in) s
5 76 M
( X is contained in exactly one subset in S'. S' is a disjoint collection and the exact set cov) s
5 65 M
(er of X. Exact Cover problem is NP-complete and is) s
5 54 M
( solved by DLX Dancing Links algorithm. Complementary or Ramsey k-colored sets are created by ) s
5 43 M
(Exact Set Cover.) s
5 21 M
(Hilbert's Tenth Problem for Rationals \(Q\) is open. Some approaches to solving Diophantines ove) s
5 10 M
(r Q - defining integers via rationals i.e integers are definable in first order theory of rati) s
_R
S
%%Page: (319) 319
%%BeginPageSetup
_S
18 36 translate
/pagenum 319 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (319) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(onals - have been mentioned in references.) s
5 670 M
(References:) s
5 659 M
(----------) s
5 648 M
(490.1 Diophantines for Reals - http://wwwmayr.in.tum.de/konferenzen/Jass07/courses/1/Sadovniko) s
5 637 M
(v/Sadovnikov_Paper.pdf - Section 1.2 - "...It would be natural to ask if the complements of th) s
5 626 M
(e sets listed above are also Diophantine. We can easily build a Diophantine representation for) s
5 615 M
( the complement of the first set while the answer for two other complements is not so evident:) s
5 604 M
( ... " and Section 3) s
5 593 M
(490.2 Uncountable sets and non-recursively enumerable languages - http://www.cs.colostate.edu/) s
5 582 M
(~massey/Teaching/cs301/RestrictedAccess/Slides/301lecture23.pdf) s
5 571 M
(490.3 Deciding the Undecidable - https://books.google.co.in/books?id=1rjnCwAAQBAJ&pg=PA10&lpg=) s
5 560 M
(PA10&dq=real+solutions+to+diophantine+tarski&source=bl&ots=W2QvvG1KJX&sig=PqhrS-5ThqyokMAvXDIY) s
5 549 M
(NivBPAc&hl=en&sa=X&ved=0ahUKEwj05ofgmqzYAhUBro8KHUaYA-sQ6AEINDAC#v=onepage&q=real%20solutions%) s
5 538 M
(20to%20diophantine%20tarski&f=false - Tarski's Decision Procedure for Algebra over Reals) s
5 527 M
(490.4 Introduction to Automata Theory, Languages and Computation - [John E.Hopcroft,Rajeev Mot) s
5 516 M
(wani,Jeffrey D.Ullman] - Theorem 9.4 - Page 376 - If both language L and its complement L' are) s
5 505 M
( recursively enumerable, then L is recursive and L' is recursive as well. L'=A*-L for set of a) s
5 494 M
(lphabets A.) s
5 483 M
(490.5 Real Roots of polynomials - https://en.wikipedia.org/wiki/Root-finding_algorithm) s
5 472 M
(490.6 Constructing Diophantine Representation of a Listable Set, Register Machines preferred o) s
5 461 M
(ver Turing Machines - https://books.google.co.in/books?id=GlgLDgAAQBAJ&pg=PA43&lpg=PA43&dq=con) s
5 450 M
(structing+diophantine+representations&source=bl&ots=UT5_nW-OUn&sig=vpIkAMBvoNBD1PvqdZ-qmP7QYME) s
5 439 M
(&hl=en&sa=X&ved=0ahUKEwjkxKWnsa_YAhVFr48KHcpJCvUQ6AEIPjAC#v=onepage&q=constructing%20diophanti) s
5 428 M
(ne%20representations&f=false - Chapter 2 - Martin Davis and H10 - [Y.Matiyasevich] - Construct) s
5 417 M
(ing Diophantine representation for a listable complementary set is exactly construction of a c) s
5 406 M
(omplement function.) s
5 395 M
(490.7 Diophantine Representation, Non-Deterministic Diophantine Machine \(NDDM\), Complexity cla) s
5 384 M
(ss NP, Single Fold Diophantine - [Yuri Matiyasevich, St.Petersburg, Department of Steklov Inst) s
5 373 M
(itute of Mathematics of Russian Academy of Sciences] - https://www.newton.ac.uk/files/seminar/) s
5 362 M
(20120111170017302-152989.pdf - Adleman-Manders class D of Diophantines which have total binary) s
5 351 M
( length of unknowns <= [binary length of parameter]^k - Open Problem: Is D = NP?) s
5 340 M
(490.8 DPR theorem and finite-fold diophantine representations - [Yuri Matiyasevich] - ftp://ft) s
5 329 M
(p.pdmi.ras.ru/pub/publicat/znsl/v377/p078.pdf - Every effectively enumerable set has single-fo) s
5 318 M
(ld exponential diophantine representation \(a diophantine polynomial which has unknowns in expo) s
5 307 M
(nents and value for unknowns per parameter tuple is unique\) of the form: <a1,a2,...> in S <=> ) s
5 296 M
(There exist y,x1,x2,...,a1,a2,... P\(y,x1,x2,...,a1,a2,...\) = 4^y + y for a diophantine polynom) s
5 285 M
(ial P in integer coefficients.) s
5 274 M
(490.9 Factoring Semi-primes \(numbers of the form N=pq for prime p,q\) by Diophantine Equations ) s
5 263 M
(- http://www2.mae.ufl.edu/~uhk/FACTORING-VIA-DIOPHANTINE.pdf) s
5 252 M
(490.10 Dancing Links X Algorithm For Exact Cover - Pentominoes Example - 4-way doubly linked l) s
5 241 M
(ist - [Donald E. Knuth] - https://arxiv.org/pdf/cs/0011047.pdf) s
5 230 M
(490.11 Dancing Links - [Hitotumatu, Hirosi; Noshita, Kohei] \(1979\). "A Technique for Implement) s
5 219 M
(ing Backtrack Algorithms and its Application". Information Processing Letters. 8 \(4\): 174\342\\200) s
5 208 M
(\\223175. doi:10.1016/0020-0190\(79\)90016-4.) s
5 197 M
(490.12 Hilbert Tenth Problem for Rationals - https://rjlipton.wordpress.com/2010/08/07/hilbert) s
5 186 M
(s-tenth-over-the-rationals/ - "...One of the most celebrated such results is that deciding whe) s
5 175 M
(ther or not a polynomial {P\(x_1,x_2,\\dots,x_m\)} has an integer solution is undecidable. This i) s
5 164 M
(s the famous negative solution to Hilbert\342\\200\\231s Tenth. An obvious question, which is still) s
5 153 M
( open, is what happens if we ask for solutions where the {x_1,x_2,\\dots,x_m} are allowed to be) s
5 142 M
( rationals? This is open\342\\200\\224I discussed it recently as a potential million dollar problem) s
5 131 M
(....An approach to proving that H10 extended to the rationals is also undecidable is to show t) s
5 120 M
(hat the integers are definable by a polynomial formula. Suppose \\displaystyle  \\exists y_1 \\do) s
5 109 M
(ts \\exists y_n \\ R\(x,y_1,\\dots,y_n\) = 0 is true for a rational {x} if and only if {x} is actua) s
5 98 M
(lly an integer. Note, the quantifiers range over rationals. Then, we can transform a question ) s
5 87 M
(about integers into a question about rationals\342\\200\\224this would show that H10 for rationals ) s
5 76 M
(is also undecidable. ...") s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(------------------------------------------------) s
5 32 M
(491. \(FEATURE-DONE\) All pairs of encoded strings - Sum of Distances - algorithm mentioned in G) s
5 21 M
(rafit course notes implemented - 3 January 2018) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (320) 320
%%BeginPageSetup
_S
18 36 translate
/pagenum 320 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (320) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(------------------------------------------------) s
5 681 M
(\(#\) For pairwise pattern mining, sum of distances between binary encoded strings algorithm men) s
5 670 M
(tioned in Grafit course notes has been) s
5 659 M
(implemented which is better than bruteforce.) s
5 648 M
(\(#\) asfer.conf has been updated) s
5 637 M
(\(#\) asferencodestr.cpp and asferencodestr.h have been updated for new class member functions \() s
5 626 M
(factorial and combinations\)) s
5 615 M
(\(#\) logs have been committed to testlogs/) s
5 604 M
(\(#\) This is only in GitHub \(NeuronRain Enterprise\) repo which has binary encoded strings. Neur) s
5 593 M
(onRain Research repo in SourceForge) s
5 582 M
(has astronomically encoded unicode strings which requires a variant of this implementation \(mu) s
5 571 M
(st be sum of 10 combination terms for each character - each term is per symbol\).) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(-------------------------------------------------) s
5 527 M
(492. \(THEORY and FEATURE-DONE\) Complement Function Map Construction - Diophantine Representati) s
5 516 M
(on - Lagrange's Four Square Theorem SymPy solver) s
5 505 M
(\(Draft updates to: https://arxiv.org/abs/1106.4102\) - related to 472 - 4 January 2018) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-------------------------------------------------) s
5 472 M
(\(#\) This commit implements diophantine representation of an enumerable recursive set by Sum of) s
5 461 M
( Four squares solver) s
5 450 M
(in SymPy.) s
5 439 M
(\(#\) New function that enumerates each element x of the complement set and applies it as a para) s
5 428 M
(meter to Sum of Squares Diophantine solver) s
5 417 M
(to obtain the quadruple \(a,b,c,d\) such that a^2 + b^2 + c^2 + d^2 = x) s
5 406 M
(\(#\) This is mostly partial recursive function and not necessarily a total recursive function\(d) s
5 395 M
(efined for all possible quadruples\).) s
5 384 M
(\(#\) logs for this have been committed to testlogs/) s
5 373 M
(\(#\) SymPy has other diophantine solvers too which require more than one parameters.) s
5 362 M
(\(#\) SymPy does not have exponential diophantine support yet which if available could construct) s
5 351 M
( an exponential diophantine for almost every) s
5 340 M
(recursively enumerable set \('almost' because of MRDP theorem - there are diophantine equations) s
5 329 M
( for recursively enumerable non-recursive sets and undecidable\)) s
5 307 M
(Any partial function f:X - Y which maps a subset X' of X to Y, can be converted to a total fun) s
5 296 M
(ction by mapping all elements in the unmapped complement domain set X - X' to an element y in ) s
5 285 M
(a new extended codomain Y' = Y U {y} or an existing element in Y. This partial-turned-total fu) s
5 274 M
(nction map can be interpolated to obtain a polynomial.) s
5 263 M
( ) s
5 252 M
(References:) s
5 241 M
(-----------) s
5 230 M
(492.1 Reduction of arbitrary diophantine equation to one in 13 unknowns - [Matijasevic-Robinso) s
5 219 M
(n] - http://matwbn.icm.edu.pl/ksiazki/aa/aa27/aa27125.pdf - This implies every effectively enu) s
5 208 M
(merable complement set can be represented by a diophantine in 13 unknowns.) s
5 197 M
(492.2 Distinction between Enumerable and Effectively Enumerable - http://faculty.washington.ed) s
5 186 M
(u/keyt/Effenumerability.pdf - "1\) A set is enumerable if, and only if, it is the range of a to) s
5 175 M
(tal or partial function on the natural numbers.  2\) A set is effectively enumerable if, and on) s
5 164 M
(ly if, it is the range of a total or partial effectively computable function on the natural nu) s
5 153 M
(mbers.  3\) A function \306\\222 is effectively computable if, and only if, there is a list of inst) s
5 142 M
(ructions giving a step-by-step procedure that will determine in a finite number of steps the v) s
5 131 M
(alue \306\\222\(n\) for any argument n for which \306\\222 returns a value...." - Effectively enumerable) s
5 120 M
( sets are recursive sets created by a partial or total recursive function i.e an algorithm can) s
5 109 M
( always find a diophantine representation of the set. From previous result every recursive set) s
5 98 M
( can be represented by a diophantine in 13 unknowns. If each unknown has maximum limit l, then) s
5 87 M
( there are l^13 possible 13-tuples t\(i\) of unknowns which is the maximum cardinality of the ef) s
5 76 M
(fectively enumerable set - mapping is enumerated as f\(t\(0\)\),f\(t\(1\)\),...,f\(t\(l^13-1\)\). This kin) s
5 65 M
(d of complementation has two phases:) s
5 54 M
(        \(*\) first 13-tuples are found by a diophantine solver and) s
5 43 M
(        \(*\) these tuples are listed as t\(0\),t\(1\),t\(2\),....) s
5 32 M
(492.3 Function Spaces - Extending partial function to a total function - https://en.wikipedia.) s
5 21 M
(org/wiki/Partial_function#Total_function) s
_R
S
%%Page: (321) 321
%%BeginPageSetup
_S
18 36 translate
/pagenum 321 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (321) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(------------------------------------------) s
5 670 M
(493. \(FEATURE-DONE\) Computation Geometric Factorization - Binary Search for Tiles - Optimizati) s
5 659 M
(on - Benchmarks - Revised - 4 January 2018) s
5 648 M
(- related to 480) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(------------------------------------------) s
5 615 M
(\(#\) Factorization benchmarks for Tile binary search optimization have been redone on dual core) s
5 604 M
( \(local[2]\) after removing some print statements in python spark code which were CPU intensive) s
5 593 M
(.) s
5 582 M
(\(#\) Following are the durations for factoring same 24 bit integer factorized previously after ) s
5 571 M
(removing print statements - an improvement of more than 3X:) s
5 560 M
(--------------------------------------------------------------) s
5 549 M
(Factorization of 9333123 \(24-bit\) - without print statements) s
5 538 M
(--------------------------------------------------------------) s
5 527 M
(real    35m56.196s \(Spark Duration = 1839.146seconds\)) s
5 516 M
(user    3m2.836s) s
5 505 M
(sys     4m56.668s) s
5 494 M
(-----------------------------------------------------------------) s
5 483 M
(Factorization of 9333123 \(24-bit\) - with print statements earlier) s
5 472 M
(-----------------------------------------------------------------) s
5 461 M
(real    112m24.101s \(Spark duration 12:21 to 14:02 = 101minutes = 6060seconds\)) s
5 450 M
(user    0m0.000s) s
5 439 M
(sys     0m0.004s) s
5 428 M
(=================================================) s
5 417 M
(Factors of 9333123 are \(excerpt from logs\):) s
5 406 M
(=================================================) s
5 395 M
(...) s
5 384 M
(Factor is =  219) s
5 373 M
(Factor is =  1387) s
5 362 M
(Factor is =  2243) s
5 351 M
(Factor is =  4161) s
5 340 M
(Factor is =  6729) s
5 329 M
(Factor is =  6729) s
5 318 M
(Factor is =  42617) s
5 307 M
(Factor is =  127851) s
5 296 M
(Factor is =  163739) s
5 285 M
(Factor is =  491217) s
5 274 M
(Factor is =  3111041) s
5 263 M
(Factor is =  9333123) s
5 252 M
(=================================================) s
5 241 M
(\(#\) Compressed Spark log for this factorization has been committed to python-src/testlogs/) s
5 230 M
(\(#\) General Number Field Sieve algorithm is sequential, exponential in number of bits and requ) s
5 219 M
(ires O\(2^\(c\(logN\)^0.33*\(loglogN\)^0.67\)\) where c=1.901883 \(for atleast one factor\). For 24-bit ) s
5 208 M
(\(=logN\) this is approximately k*128 time units for some constant k. But Computational Geometri) s
5 197 M
(c Factorization Sieve finds all factors in O\(logN*logN\) time on multicore\(PRAMs\).) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(-----------------------------) s
5 153 M
(494. \(THEORY and FEATURE-DONE\) Complement Diophantine Map - Converts a Partial Function to Tot) s
5 142 M
(al Function - 6 January 2018) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(-----------------------------) s
5 109 M
(\(#\) Sum of Four Squares diophantine solutions are quadruples \(a,b,c,d\) which form a subset of ) s
5 98 M
(all possible tuples and thus) s
5 87 M
(complement function unknows-to-parameter map is partial.) s
5 76 M
(\(#\) This is remedied by extending the parameter codomain by adding -1 as additional possible p) s
5 65 M
(arameter value and mapping all unmapped tuples in domain to -1.  Resultant map is Total define) s
5 54 M
(d for all possible unknown tuples.) s
5 43 M
(\(#\) logs for this have been committed to testlogs/) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(---------------------------------------) s
_R
S
%%Page: (322) 322
%%BeginPageSetup
_S
18 36 translate
/pagenum 322 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (322) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(495. \(THEORY\) Factoring as a service - General Number Field Sieve on Amazon EC2 cloud - RSA 51) s
5 681 M
(2 bit - Relevance to Computational) s
5 670 M
(Geometric NC-PRAM-Multicore Factorization Theoretical O\(\(logN\)^2\) bound - related to 481 - 9 J) s
5 659 M
(anuary 2018) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(---------------------------------------) s
5 626 M
(Number field sieve has been implemented as Amazon EC2 cloud service. Benchmarks for RSA 512 bi) s
5 615 M
(t achieve factorization in less than) s
5 604 M
(4 hours applying CADO-NFS and MSieve NFS implementations optimized for Elastic Cloud. Instance) s
5 593 M
( type used is c4.8xlarge \(each instance has two Intel Xeon E5-2666 v3 processor chips, with 36) s
5 582 M
( vCPUs in a NUMA configuration with 60 GB of RAM\) and maximum of 200 instances were in the clo) s
5 571 M
(ud connected by Elastic Network Adapter\(ENA\). RSA 512 GNFS benchmark has some parallels in Com) s
5 560 M
(putational Geometric Factorization - Most time intensive preprocessing step is to create tile ) s
5 549 M
(segments in parallel by pixelating the hyperbolic arc. Presently this is implemented as SparkC) s
5 538 M
(ontext.parallelize\(tilesegementslist\) which creates tile segment RDDs in parallel on cloud rea) s
5 527 M
(ding tile segment array on flatfile. Ideally, each PRAM processor \(assuming there are N/\(logN\)) s
5 516 M
(^k PRAMs\) must read in a tile by computation and not from storage. For example in the algorith) s
5 505 M
(m mentioned in 481, p-th PRAM has to compute the tile segment interval \(tilestart,tileend\) loc) s
5 494 M
(ally in i-th iteration as tilestart=\(x,N/x\) and tileend=\(x,N/x-N/x\(x+1\)\) for x=\(p+i*N/\(logN\)^k) s
5 483 M
(\). Factoring 512 bit by Hyperbolic pixelation and sort-search of tiles theoretically requires ) s
5 472 M
(constant*\(512\)^k parallel time units and 2^512/\(512\)^k PRAM processors. It has to be mentioned) s
5 461 M
( that real advantage of this Computational Geometric Factorization can be felt only for large ) s
5 450 M
(integers on huge multicores and is by-and-large a theoretical fancy abiding by definition of N) s
5 439 M
(C \("Factorization is in NC"\) in the absence of a practical large scale cloud benchmark. Number) s
5 428 M
( of PRAMs required in definition of NC-PRAM equivalence is high even for work-optimal NC. Nece) s
5 417 M
(ssity of sorting the tile segments arises because successive segments though locally sorted as) s
5 406 M
(cending cannot be merged by splicing end-to-end directly because some elements in end of a seg) s
5 395 M
(ment could be larger than some elements in the beginning of next segment. Local tile search re) s
5 384 M
(dresses this deficit.) s
5 362 M
(References:) s
5 351 M
(----------) s
5 340 M
(495.1 Factoring as a service - slides - http://crypto.2013.rump.cr.yp.to/981774ce07e51813fd446) s
5 329 M
(6612a78601b.pdf) s
5 318 M
(495.2 Factoring as a service - https://github.com/eniac/faas - Parallelizing Number Field Seiv) s
5 307 M
(e - Polynomial selection, Sieving, Linear Algebra, Square root - paper - [Luke Valenta, Shaana) s
5 296 M
(n Cohney, Alex Liao, Joshua Fried, Satya Bodduluri, Nadia Heninger - University of Pennsylvani) s
5 285 M
(a] - https://eprint.iacr.org/2015/1000.pdf - "...The current public factorization record, a 76) s
5 274 M
(8-bit RSA modulus, was reported in 2009 by Kleinjung, Aoki, Franke, Lenstra, Thom\303\251, Bos, Gaud) s
5 263 M
(ry, Kruppa, Montgomery, Osvik, te Riele, Timofeev, and Zimmermann, and took about 2.5 calendar) s
5 252 M
( years and a large academic effort [23],...We experimented with Apache Spark [37] to manage da) s
5 241 M
(ta flow, but Spark was not flexible enough for our needs, and our initial tests suggested that) s
5 230 M
( a Spark-based job distribution system was more than twice as slow as the system we were aimin) s
5 219 M
(g to replace. Ultimately we chose Slurm \(Simple Linux Utility for Resource Management\) [36] fo) s
5 208 M
(r job distribution...") s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(----------------------------------------------) s
5 164 M
(496. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization Update - Local Tile Compu) s
5 153 M
(tation and necessity for storage removed -) s
5 142 M
(10 January 2018 - 30-bit integer dual core single node Spark Cluster benchmark - related to 49) s
5 131 M
(5) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(----------------------------------------------) s
5 98 M
(As mentioned in previous section, reading tiles from storage in SparkContext.parallelize\(\) is ) s
5 87 M
(a serious bottleneck. In this commit, tile interval storage is obviated and each foreach\(\) inv) s
5 76 M
(okes a function which computes non-persisted tile interval locally and does binary search to p) s
5 65 M
(rint factors. SparkContext.parallelize\(\) takes xrange\(\) as argument. Python xrange\(\) is an opt) s
5 54 M
(imized implementation of list and returns XRange object.XRange object does not store all the e) s
5 43 M
(lements in memory and is more like an iterator. A thirty bit integer has been factored and num) s
5 32 M
(bers are below:) s
5 21 M
(---------------------------) s
5 10 M
(Factorization of 921234437:) s
_R
S
%%Page: (323) 323
%%BeginPageSetup
_S
18 36 translate
/pagenum 323 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (323) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(---------------------------) s
5 681 M
(18/01/10 17:56:56 INFO Utils: /home/shrinivaasanka/Krishna_iResearch_OpenSource/GitHub/asfer-g) s
5 670 M
(ithub-code/python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has be) s
5 659 M
(en previously copied to /tmp/spark-9fba8482-8ca1-4022-9bcc-1c285a8e1f58/userFiles-3e4bf574-9b1) s
5 648 M
(a-44c5-8b96-3873e96dc6c3/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py) s
5 637 M
(Factor is =  1) s
5 626 M
(Factor is =  17) s
5 615 M
(Factor is =  19) s
5 604 M
(Factor is =  59) s
5 593 M
(Factor is =  323) s
5 582 M
(Factor is =  1003) s
5 571 M
(Factor is =  1121) s
5 560 M
(Factor is =  19057) s
5 549 M
(Factor is =  48341) s
5 538 M
(Factor is =  821797) s
5 527 M
(Factor is =  918479) s
5 516 M
(Factor is =  2852119) s
5 505 M
(Factor is =  15614143) s
5 494 M
(Factor is =  48486023) s
5 483 M
(Factor is =  54190261) s
5 472 M
(18/01/10 18:08:51 INFO PythonRunner: Times: total = 714516, boot = 649, init = 23, finish = 71) s
5 461 M
(3844) s
5 439 M
(Spark Duration: 18:08:51 - 17:56:56 = 535seconds) s
5 417 M
(Spark-Python has RPC and serialization latencies and following numbers could be better if impl) s
5 406 M
(emented in a different frameworks like Slurm and on a Gigabit ENA cloud. First non-trivial fac) s
5 395 M
(tor above was printed within few seconds and this benchmark is for sieving all factors. Time u) s
5 384 M
(tility is misleading because it includes all Spark RPC overhead. ) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(-----------------------------------) s
5 340 M
(497. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Non-Persistent Tile Seg) s
5 329 M
(ments - 30 bit Single Node Dual Core Spark Benchmarks - 11 January 2018 - related to 495) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(-----------------------------------) s
5 296 M
(\(#\) Benchmarks for factoring another 30-bit integer 999994437 on single node dual core Spark c) s
5 285 M
(luster have been committed to python-src/testlogs/) s
5 274 M
(\(#\) Similar to previous 30 bit integer, time utility prints 40 minutes 56 seconds while the ac) s
5 263 M
(tual Spark duration is between first and last factors:) s
5 252 M
(18/01/11 13:34:34 INFO Utils: /home/shrinivaasanka/Krishna_iResearch_OpenSource/GitHub/asfer-g) s
5 241 M
(ithub-code/python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has be) s
5 230 M
(en previously copied to /tmp/spark-5630f619-b8a7-46b8-b15b-7296508792c5/userFiles-44c23be8-a7b) s
5 219 M
(3-48d3-bfd7-98acf1971e10/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py) s
5 208 M
(=================================================) s
5 197 M
(Factor is = 1) s
5 186 M
(=================================================) s
5 175 M
(=================================================) s
5 164 M
(Factor is = 3) s
5 153 M
(=================================================) s
5 142 M
(=================================================) s
5 131 M
(Factor is = 9) s
5 120 M
(=================================================) s
5 109 M
(=================================================) s
5 98 M
(Factor is = 13) s
5 87 M
(=================================================) s
5 76 M
(=================================================) s
5 65 M
(Factor is = 23) s
5 54 M
(=================================================) s
5 43 M
(=================================================) s
5 32 M
(Factor is = 27) s
5 21 M
(=================================================) s
5 10 M
(=================================================) s
_R
S
%%Page: (324) 324
%%BeginPageSetup
_S
18 36 translate
/pagenum 324 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (324) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Factor is = 39) s
5 681 M
(=================================================) s
5 670 M
(=================================================) s
5 659 M
(Factor is = 69) s
5 648 M
(=================================================) s
5 637 M
(=================================================) s
5 626 M
(Factor is = 97) s
5 615 M
(=================================================) s
5 604 M
(=================================================) s
5 593 M
(Factor is = 117) s
5 582 M
(=================================================) s
5 571 M
(=================================================) s
5 560 M
(Factor is = 207) s
5 549 M
(=================================================) s
5 538 M
(=================================================) s
5 527 M
(Factor is = 291) s
5 516 M
(=================================================) s
5 505 M
(=================================================) s
5 494 M
(Factor is = 299) s
5 483 M
(=================================================) s
5 472 M
(=================================================) s
5 461 M
(Factor is = 351) s
5 450 M
(=================================================) s
5 439 M
(=================================================) s
5 428 M
(Factor is = 621) s
5 417 M
(=================================================) s
5 406 M
(=================================================) s
5 395 M
(Factor is = 873) s
5 384 M
(=================================================) s
5 373 M
(=================================================) s
5 362 M
(Factor is = 897) s
5 351 M
(=================================================) s
5 340 M
(=================================================) s
5 329 M
(Factor is = 1261) s
5 318 M
(=================================================) s
5 307 M
(=================================================) s
5 296 M
(Factor is = 1277) s
5 285 M
(=================================================) s
5 274 M
(=================================================) s
5 263 M
(Factor is = 2231) s
5 252 M
(=================================================) s
5 241 M
(=================================================) s
5 230 M
(Factor is = 2619) s
5 219 M
(=================================================) s
5 208 M
(=================================================) s
5 197 M
(Factor is = 2691) s
5 186 M
(=================================================) s
5 175 M
(=================================================) s
5 164 M
(Factor is = 3783) s
5 153 M
(=================================================) s
5 142 M
(=================================================) s
5 131 M
(Factor is = 3831) s
5 120 M
(=================================================) s
5 109 M
(=================================================) s
5 98 M
(Factor is = 6693) s
5 87 M
(=================================================) s
5 76 M
(=================================================) s
5 65 M
(Factor is = 8073) s
5 54 M
(=================================================) s
5 43 M
(=================================================) s
5 32 M
(Factor is = 11349) s
5 21 M
(=================================================) s
5 10 M
(=================================================) s
_R
S
%%Page: (325) 325
%%BeginPageSetup
_S
18 36 translate
/pagenum 325 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (325) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Factor is = 11493) s
5 681 M
(=================================================) s
5 670 M
(=================================================) s
5 659 M
(Factor is = 16601) s
5 648 M
(=================================================) s
5 637 M
(=================================================) s
5 626 M
(Factor is = 20079) s
5 615 M
(=================================================) s
5 604 M
(=================================================) s
5 593 M
(Factor is = 29003) s
5 582 M
(=================================================) s
5 571 M
(=================================================) s
5 560 M
(Factor is = 29371) s
5 549 M
(=================================================) s
5 538 M
(=================================================) s
5 527 M
(Factor is = 34047) s
5 516 M
(=================================================) s
5 505 M
(=================================================) s
5 494 M
(Factor is = 34479) s
5 483 M
(=================================================) s
5 472 M
(=================================================) s
5 461 M
(Factor is = 49803) s
5 450 M
(=================================================) s
5 439 M
(=================================================) s
5 428 M
(Factor is = 60237) s
5 417 M
(=================================================) s
5 406 M
(=================================================) s
5 395 M
(Factor is = 87009) s
5 384 M
(=================================================) s
5 373 M
(=================================================) s
5 362 M
(Factor is = 88113) s
5 351 M
(=================================================) s
5 340 M
(=================================================) s
5 329 M
(Factor is = 123869) s
5 318 M
(=================================================) s
5 307 M
(=================================================) s
5 296 M
(Factor is = 149409) s
5 285 M
(=================================================) s
5 274 M
(=================================================) s
5 263 M
(Factor is = 261027) s
5 252 M
(=================================================) s
5 241 M
(=================================================) s
5 230 M
(Factor is = 264339) s
5 219 M
(=================================================) s
5 208 M
(=================================================) s
5 197 M
(Factor is = 371607) s
5 186 M
(=================================================) s
5 175 M
(=================================================) s
5 164 M
(Factor is = 381823) s
5 153 M
(=================================================) s
5 142 M
(=================================================) s
5 131 M
(Factor is = 448227) s
5 120 M
(=================================================) s
5 109 M
(=================================================) s
5 98 M
(Factor is = 783081) s
5 87 M
(=================================================) s
5 76 M
(=================================================) s
5 65 M
(Factor is = 793017) s
5 54 M
(=================================================) s
5 43 M
(=================================================) s
5 32 M
(Factor is = 1114821) s
5 21 M
(=================================================) s
5 10 M
(=================================================) s
_R
S
%%Page: (326) 326
%%BeginPageSetup
_S
18 36 translate
/pagenum 326 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (326) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Factor is = 1145469) s
5 681 M
(=================================================) s
5 670 M
(=================================================) s
5 659 M
(Factor is = 1610297) s
5 648 M
(=================================================) s
5 637 M
(=================================================) s
5 626 M
(Factor is = 2848987) s
5 615 M
(=================================================) s
5 604 M
(=================================================) s
5 593 M
(Factor is = 3344463) s
5 582 M
(=================================================) s
5 571 M
(=================================================) s
5 560 M
(Factor is = 3436407) s
5 549 M
(=================================================) s
5 538 M
(=================================================) s
5 527 M
(Factor is = 4830891) s
5 516 M
(=================================================) s
5 505 M
(=================================================) s
5 494 M
(Factor is = 8546961) s
5 483 M
(=================================================) s
5 472 M
(=================================================) s
5 461 M
(Factor is = 10309221) s
5 450 M
(=================================================) s
5 439 M
(=================================================) s
5 428 M
(Factor is = 14492673) s
5 417 M
(=================================================) s
5 406 M
(=================================================) s
5 395 M
(Factor is = 25640883) s
5 384 M
(=================================================) s
5 373 M
(=================================================) s
5 362 M
(Factor is = 37036831) s
5 351 M
(=================================================) s
5 340 M
(=================================================) s
5 329 M
(Factor is = 43478019) s
5 318 M
(=================================================) s
5 307 M
(=================================================) s
5 296 M
(Factor is = 76922649) s
5 285 M
(=================================================) s
5 274 M
(=================================================) s
5 263 M
(Factor is = 111110493) s
5 252 M
(=================================================) s
5 241 M
(18/01/11 13:48:32 INFO PythonRunner: Times: total = 837634, boot = 641, init = 37, finish = 83) s
5 230 M
(6956) s
5 219 M
(18/01/11 13:48:32 INFO Executor: Finished task 0.0 in stage 0.0 \(TID 0\). 1529 bytes result sen) s
5 208 M
(t to driver) s
5 197 M
(18/01/11 13:48:32 INFO TaskSetManager: Starting task 1.0 in stage 0.0 \(TID 1, localhost, execu) s
5 186 M
(tor driver, partition 1, PROCESS_LOCAL, 6208 bytes\)) s
5 175 M
(18/01/11 13:48:32 INFO Executor: Running task 1.0 in stage 0.0 \(TID 1\)) s
5 164 M
(=================================================) s
5 153 M
(Factor is = 333331479) s
5 142 M
(=================================================) s
5 131 M
(18/01/11 13:48:32 INFO TaskSetManager: Finished task 0.0 in stage 0.0 \(TID 0\) in 838426 ms on ) s
5 120 M
(localhost \(executor driver\) \(1/3\)) s
5 98 M
(which is almost 14 minutes \( 13:48:32 - 13:34:34 \). First non-trivial factor was printed withi) s
5 87 M
(n 10 seconds. Time utility prints 40 minutes including overhead for finishing Spark RPC tasks) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(------------------------------------------------) s
5 43 M
(498. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Non-Persistent Tile Seg) s
5 32 M
(ments - 31 bit Single Node Dual Core Spark Benchmarks - Primality Testing - Multiplicative Par) s
5 21 M
(tition - Factorisatio Numerorum - 12 January 2018 - related to 495) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (327) 327
%%BeginPageSetup
_S
18 36 translate
/pagenum 327 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (327) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(------------------------------------------------) s
5 681 M
(31-bit integer 2147483647 has been factorized by searching non-persisted pixelated hyperbolic ) s
5 670 M
(tile segments. Only trivial factors are found and is a mersenne prime. This integer is the max) s
5 659 M
(imum permissible limit for xrange\(\) and printed by python sys module \(sys.maxsize\). Similar to) s
5 648 M
( integer partition function which is number of ways of splitting an integer as sum of smaller ) s
5 637 M
(integers, multiplicative partition function f\(n\) = number of ways of unordered factorizations ) s
5 626 M
(of n. This function has an upperbound of : a{n} <= n\(exp{{log n * logloglog n}/{loglog n}}\)^{{) s
5 615 M
(-1+o\(1\)}}.) s
5 593 M
(----------------------------------------------------------------------------) s
5 582 M
(Factorization/Primality of 2147483647) s
5 571 M
(----------------------------------------------------------------------------) s
5 560 M
(18/01/12 14:33:12 INFO Utils: /home/shrinivaasanka/Krishna_iResearch_OpenSource/GitHub/asfer-g) s
5 549 M
(ithub-code/python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has be) s
5 538 M
(en previously copied to /tmp/spark-169ef9d3-56df-46eb-9b09-d63561491f87/userFiles-9f55cc79-e7c) s
5 527 M
(c-46e6-bad7-540f950587b5/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py) s
5 516 M
(=================================================) s
5 505 M
(Factor is =  1) s
5 494 M
(=================================================) s
5 483 M
(18/01/12 15:02:57 INFO PythonRunner: Times: total = 1784724, boot = 643, init = 23, finish = 1) s
5 472 M
(784058) s
5 461 M
(----------------------------------------------------------------------------) s
5 450 M
(Spark Duration 15:02:57 - 14:33:12 = 29 minutes 45 seconds) s
5 428 M
(Spark Logs have been committed to python-src/testlogs/) s
5 406 M
(References:) s
5 395 M
(----------) s
5 384 M
(498.1 Multiplicative Partition Function - ON THE OPPENHEIM\342\\200\\231S \342\\200\\235FACTORISATIO NUM) s
5 373 M
(ERORUM\342\\200\\235 FUNCTION - [FLORIAN LUCA, ANIRBAN MUKHOPADHYAY AND KOTYADA SRINIVAS] - https:/) s
5 362 M
(/arxiv.org/pdf/0807.0986.pdf - "... The function f\(n\) is related to various partition function) s
5 351 M
(s. For example, f\(2^n\) = p\(n\), where p\(n\) is the number of partitions of n. Furthermore, f\(p1p) s
5 340 M
(2 \302\267 \302\267 \302\267 pk\) = Bk, where Bk is the kth Bell number which counts the number of partitions of ) s
5 329 M
(a set with k elements in nonempty disjoint subsets. In general, f\(p1^\316\2611*p2^\316\2612 \302\267 \302\267 \302\267 pk^\316\261) s
5 318 M
(k\) is the number of partitions of a multiset consisting of \316\261i copies of {i} for each i = 1, .) s
5 307 M
( . . , k.  Throughout the paper, we put log x for the natural logarithm of x. We use p and q f) s
5 296 M
(or prime numbers and O and o for the Landau symbols. ..." ) s
5 285 M
(498.2 Multiplicative Partition Function - https://oeis.org/A001055) s
5 274 M
(498.3 Bound for Multiplicative Partition Function - [Canfield-Erdos-Pomerance] - https://www.m) s
5 263 M
(ath.dartmouth.edu/~carlp/PDF/paper39.pdf) s
5 252 M
(498.4 Eigth Mersenne Prime - 2^31 - 1 = 2147483647 - https://en.wikipedia.org/wiki/2,147,483,6) s
5 241 M
(47 - this was largest known prime till 1867.) s
5 230 M
(498.5 M31 - http://primes.utm.edu/curios/page.php/2147483647.html - The first prime that canno) s
5 219 M
(t be tested on 32-bit primality-check software.) s
5 208 M
(498.6 Cryptography in NC0 - [Benny Applebaum, Yuval Ishai, Eyal Kushilevitz] - http://www.cs.t) s
5 197 M
(echnion.ac.il/~abenny/pubs/nc0.pdf, Hardness of factoring - [Emanuele Viola] - https://emanuel) s
5 186 M
(eviola.wordpress.com/2018/02/16/i-believe-pnp/ - One way functions are in NC0 and there are PR) s
5 175 M
(Gs for which output bit depends only on O\(1\) bits of seed implying factoring is hard for const) s
5 164 M
(ant depth. Computational Geometric Factorization doable in O\(logN^2\) PRAM time in NC2, implies) s
5 153 M
( factoring can be made easy by parallelism and polylog depth circuits.) s
5 142 M
(498.7 Binary Quadratic Diophantine Equations \(BQDE\) and BQDE for Factorization - [JC Lagarias]) s
5 131 M
( - https://arxiv.org/pdf/math/0611209 - Succinct Certificates for the Solvability of BQDE.) s
5 120 M
(498.8 Polynomial Time Quantum Algorithm for Solving Pell's Equation - [Hallgren] - http://www.) s
5 109 M
(cse.psu.edu/~sjh26/pell.pdf - Integer Solutions to Pell's Equation reduce to Factoring - e.g S) s
5 98 M
(olving for x,y for known N in x^2 - Ny^2 = 1 factorizes N by rewriting as: \(x^2 - 1\) / y^2 = N) s
5 87 M
( => \(\(x+1\)/y\)\(\(x-1\)/y\) = N. In this respect, Hallgren's algorithm is equivalent to Shor Quantu) s
5 76 M
(m Factorization. Computational Geometric Factorization in NC-PRAM or Sequential Optimization i) s
5 65 M
(n P could therefore imply Pell's equation is solvable by PRAM model and in NC or in P as follo) s
5 54 M
(ws:) s
5 43 M
(        \(x+1\)/y = a) s
5 32 M
(        \(x-1\)/y = b) s
5 21 M
(        2/y = a-b for factors a,b of N.) s
5 10 M
(        y = 2/a-b ) s
_R
S
%%Page: (328) 328
%%BeginPageSetup
_S
18 36 translate
/pagenum 328 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (328) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        => \(x+1\) = 2a/\(a-b\)) s
5 681 M
(        => x = 2a/\(a-b\) - 1) s
5 670 M
(Historicity of this problem \(Brahmagupta's Chakravala\) and a polylog approximation based on Ne) s
5 659 M
(wton-Raphson square root recurrence is described in GRAFIT course material https://kuja27.blog) s
5 648 M
(spot.in/2018/04/grafit-course-material-newton-raphson.html) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(---------------------------) s
5 604 M
(499. \(FEATURE-DONE\) Secure Neuro Currency Cloud Perfect Forward Move - OpenSSL client and serv) s
5 593 M
(er - 19 January 2018) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(---------------------------) s
5 560 M
(Neuro Currency Cloud Perfect Forward Move socket code has been openSSL enabled:) s
5 549 M
(- Makefile updated include -DOPENSSL #ifdef option for compiling SSL client-server headers) s
5 538 M
(- license headers updated) s
5 527 M
(- new header asfercloudmove_openssl.h has been added to repository for invoking openSSL client) s
5 516 M
( and server functions in opensslclient.h) s
5 505 M
(and opensslserver.h) s
5 494 M
(- An example fictitious X.509 cert.pem and key.pem have been created by openssl utility for ce) s
5 483 M
(rtificate verification) s
5 472 M
(- new headers opensslclient.h and opensslserver.h have been added to repository which define o) s
5 461 M
(penSSL client and server functions \(these) s
5 450 M
( are reference examples in www.openssl.org Wiki changed for cloud move\)) s
5 439 M
(- logs for SSL cloud_move client and server have been committed to cloud_move/testlogs/) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(------------------------------) s
5 395 M
(500. \(FEATURE-DONE\) Searching Unsorted List of Numbers - Algorithm in GRAFIT Open Learning Imp) s
5 384 M
(lemented - 21 January 2018) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(------------------------------) s
5 351 M
(An algorithm to search list of numbers better than bruteforce search mentioned in GRAFIT Cours) s
5 340 M
(e Notes:) s
5 329 M
(https://github.com/shrinivaasanka/Grafit/blob/master/course_material/ComputerScienceMiscellane) s
5 318 M
(ous/ComputerScienceMiscellaneous_CourseNotes.txt) s
5 307 M
(has been implemented in NeuronRain AsFer.) s
5 285 M
(This lifts one dimensional numbers to multidimensional tuples and creates hashtables for each ) s
5 274 M
(dimension of tuple. Lookup for a query number is) s
5 263 M
(lookup of each digit in query in these hash tables in succession. If all hash lookups succeed ) s
5 252 M
(queried number exists in the unsorted list) s
5 230 M
(This implementation pads each number with "#" so that it is right justified and maximum number) s
5 219 M
( of digits is stipulated.) s
5 197 M
(Searching Unsorted lists is the most fundamental open research problem and this implementation) s
5 186 M
( uses Locality sensitive hashing as the hash table) s
5 175 M
(. Python dictionaries are hash maps and not hash tables which support collisions. Each digit i) s
5 164 M
(n query is lookedup for nearest neighbours and if) s
5 153 M
( there is a match digitmatch is set to True. Logical AND of all digit matches is returned as T) s
5 142 M
(rue/False.) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(---------------------------------------) s
5 98 M
(501. \(THEORY\) Answer-Questioning \(Reversal of Interview\) and Recursive Gloss Overlap Dense Sub) s
5 87 M
(graph Classification - 21 January 2018) s
5 76 M
(- related to 412, 420) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(---------------------------------------) s
5 43 M
(Recursive Gloss Overlap Definition Graph of a text previously has been demonstrated to classif) s
5 32 M
(y documents in unsupervised manner based on) s
5 21 M
(dense subgraphs: centrality, k-cores, pageranks etc., Dense subgraphs of text graph extract th) s
5 10 M
(e essence of an article and highlight the keywords) s
_R
S
%%Page: (329) 329
%%BeginPageSetup
_S
18 36 translate
/pagenum 329 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (329) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(which may or may not be present in the document. Keywords not present in the document can be c) s
5 681 M
(lasses of a document because of the recursive) s
5 670 M
(deep learning of definitions. From the keywords, a question or set of permutations of question) s
5 659 M
(s can be constructed which the text answers.) s
5 648 M
(Relevance of Question depends on the relatedness e.g Tensor Neuron of all possible pairs of ke) s
5 637 M
(yword class vertices.) s
5 615 M
(Example:) s
5 604 M
(--------) s
5 593 M
(If a text graph of an academic research text has been classified in following word vertices of) s
5 582 M
( high core numbers) s
5 571 M
(                [Prime, Factorization, Theorem, Composites, Diophantine, Polynomials,...]) s
5 560 M
(in decreasing value of centrality/k-core/pagerank and pairwise Tensor Neuron potentials are ra) s
5 549 M
(nked as below:) s
5 538 M
(                Prime-Factorization = 0.34234) s
5 527 M
(                Theorem-Composites=0.33333) s
5 516 M
(                Diophantine-polynomials=0.221212) s
5 505 M
(                ... and so on) s
5 494 M
(then question\(s\) can be constructed based on previous ranking of Tensor relatedness as:) s
5 483 M
(                Does this article discuss relation between [Primes] and [Factorization]?) s
5 472 M
(                ....) s
5 450 M
(Reference:) s
5 439 M
(---------) s
5 428 M
(501.1 CALO, SIRI, PAL - https://pal.sri.com/architecture/ - Cognitive Assistants, Question Ans) s
5 417 M
(wering) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(--------------------------------------------) s
5 373 M
(502. \(FEATURE-DONE\) Scheduler Analytics - Interprocess Distance Computation by DictDiffer - 24) s
5 362 M
( January 2018) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(--------------------------------------------) s
5 329 M
(1. Representing OS Process Information as Feature Vectors has been mentioned as Software Sched) s
5 318 M
(uler Analytics usecase in) s
5 307 M
(http://neuronrain-documentation.readthedocs.io/en/latest/) s
5 296 M
(2. This commit implements a new python function which reads process info as a dictionary from ) s
5 285 M
(psutils. Psutils has an option to read individual) s
5 274 M
(process metrics or to read the dictionary in its entirety.) s
5 263 M
(3. Psutils per-process dictionary has all the basic details pertaining to instantaneous resour) s
5 252 M
(ce consumptions of a process) s
5 241 M
(4. These per-process features are collated in an array and are json.dump\(\)-ed as strings in as) s
5 230 M
(fer.enterprise.encstr.scheduleranalytics file) s
5 219 M
(which can be used as input by clustering/classification NeuronRain-AsFer C++ implementations.) s
5 208 M
(5. logs for this have been committed to software_analytics/testlogs/DeepLearning_SchedulerAnal) s
5 197 M
(ytics.log.24January2018) s
5 186 M
(6. Distance between two process feature dictionaries/vectors are printed by DictDiffer which h) s
5 175 M
(as been imported and length of the diff is) s
5 164 M
( the distance function between any two processes.) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(---------------------------------------------) s
5 120 M
(503. \(FEATURE-DONE\) Scheduler Analytics - Process kNN classification and K-Means clustering, P) s
5 109 M
(rocess Dict Hashing - 25 January 2018) s
5 98 M
(\(Only in NeuronRain Enterprise - GitHub\)) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(---------------------------------------------) s
5 65 M
(1. python-src/software_analytics/DeepLearning_SchedulerAnalytics.py has been updated to define) s
5 54 M
( a getHash\(\) function similar to Streaming_<algorithm>.py implementations, which creates an MD) s
5 43 M
(5 hash of process psutils dictionary string. ) s
5 32 M
(2. This hashing of dictionary is because of huge size of process dictionary storing of which r) s
5 21 M
(equires few KBs for each process. Computing distance \(Levenshtein\) of these strings is again m) s
5 10 M
(emory intensive.) s
_R
S
%%Page: (330) 330
%%BeginPageSetup
_S
18 36 translate
/pagenum 330 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (330) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(3. DictDiffer distance implemented in python-src/software_analytics/DeepLearning_SchedulerAnal) s
5 681 M
(ytics.py is not directly invocable in C++ and diff between process dictionary strings is also ) s
5 670 M
(huge in KBs.) s
5 659 M
(4. Succinct representation of process dictionary string - Fingerprinting - is therefore a nece) s
5 648 M
(ssity to optimize space. MD5 binary hash digest of the process dictionary string is written to) s
5 637 M
( python-src/software_analytics/asfer.enterprise.encstr.scheduleranalytics prefixed by process ) s
5 626 M
(name and process id , instead of complete chunk.) s
5 615 M
(5. cpp-src/asferkNNclustering.cpp and cpp-src/asferkmeansclustering.cpp are updated for EOF ch) s
5 604 M
(eck and number of clusters has been increased to 10 in kNN classifier.) s
5 593 M
(6. asfer binary has been rebuilt and asfer.conf has been updated to do clustering and classifi) s
5 582 M
(cation.) s
5 571 M
(7. process statistics dataset - cpp-src/asfer.enterprise.encstr, cpp-src/asfer.enterprise.encs) s
5 560 M
(tr.clustered and cpp-src/asfer.enterprise.encstr.kNN have been updated.) s
5 549 M
(8. asfer kNN classification and KMeans clustering has been executed on this encoded process st) s
5 538 M
(atistics dataset ) s
5 527 M
(9. logs have been committed to cpp-src/testlogs/asfer.SchedulerAnalytics.KMeansAndkNNClusterin) s
5 516 M
(g.log.25January2018 \(Scheduler Analytics\) and cpp-src/testlogs/asfer.SchedulerAnalytics.KMeans) s
5 505 M
(AndkNNClustering.log.25January2018 \(kNN classification and KMeans clustering\) - for 194 proces) s
5 494 M
(ses) s
5 483 M
(10. logs for clustering and classification imply similar processes flock together - e.g excerp) s
5 472 M
(t from KMeans cluster logs show lot of kworkers in same cluster:) s
5 461 M
(===========) s
5 450 M
(Cluster 6) s
5 439 M
(===========) s
5 428 M
(encoded string [5574:bash:0b110111011110100011111010001100001111101110000110100100010011001101) s
5 417 M
(0011011000001110010100101100000110000110001011001100100110000001000011110100010100000000000]) s
5 406 M
(encoded string [139:kworker/u4:4:0b11001110101100100111010100010000100111011001100100111100110) s
5 395 M
(0100110110001100111111101011011001010111100000000010110111111011000010101001110100100010010010) s
5 384 M
(010001]) s
5 373 M
(encoded string [145:usb-storage:0b110000101010111000011111001110110001011101110101000000000110) s
5 362 M
(0110001100100110110101001101010010100000011011111000100101110101110001001010111101101000111000) s
5 351 M
(001]) s
5 340 M
(encoded string [35:fsnotify_mark:0b10110111100000011110100110001101010110100011000000100100010) s
5 329 M
(1010011010111110100111100001110010100011100011100100000010100001100010111010110010010100000110) s
5 318 M
(1101110]) s
5 307 M
(encoded string [2769:cups-browsed:0b1110011010000000111100101100010010111011110111110111100111) s
5 296 M
(1010110100100000110011101010011011101111001010100010011111010011000101101000100111011100110000) s
5 285 M
(0000100]) s
5 274 M
(encoded string [5673:bash:0b100000010101001101011100011111101110001010000110100001011110101100) s
5 263 M
(000110101101001000011000101110000110100010111010001001101000001101101110101011110101011100011]) s
5 252 M
(encoded string [49:acpi_thermal_pm:0b111001010000011111010000001000010111100000100001100100111) s
5 241 M
(1010111100101000000101110111100100010100101111101000011100000110101011001100011000110100011100) s
5 230 M
(001010100]) s
5 219 M
(encoded string [6220:kworker/u4:1:0b1011111100100011001100000010111100111111110001000101011110) s
5 208 M
(1001110011010101101010101110100001110010101100011011111111001010001100011110111101010110011100) s
5 197 M
(1100100]) s
5 186 M
(encoded string [5977:kworker/0:0:0b11010000100100010111011001000010110110110111011001111001011) s
5 175 M
(1000011111101110110010100101101010110000000011100110101101101100000110111000011111011010100011) s
5 164 M
(0010010]) s
5 153 M
(encoded string [5905:kworker/u4:0:0b1011011110010010111000111001101101001000001010100100100101) s
5 142 M
(0011100001111001110011011101001011010000010111010100000100100011010101001100010001111111001001) s
5 131 M
(11100010]) s
5 120 M
(encoded string [2433:kworker/u5:0:0b1100100101100010100101000010001010111010010111110110011110) s
5 109 M
(1111000011101101101011100100101010011010111110110001011100000010010001101001000101110111100001) s
5 98 M
(10000101]) s
5 87 M
(encoded string [2439:kworker/u5:2:0b1110100001111010101011110110101110101101001100000111000111) s
5 76 M
(1000110100001100111110110010111010001001101011000101011000101000100100010111101101110010110100) s
5 65 M
(0001111]) s
5 54 M
(encoded string [5:kworker/0:0H:0b1000110000100110011111100011111100100001000110011011001000111) s
5 43 M
(0010111001001101011011101011011001010011100111011101011111111111101110111000010010001000100100) s
5 32 M
(11000]) s
5 21 M
(encoded string [9:migration/0:0b11001101000011110110001000011100110000101111100101010010111100) s
5 10 M
(1010110110100010110110011100110011011101011011110111110010011011110100100001010010000011001001) s
_R
S
%%Page: (331) 331
%%BeginPageSetup
_S
18 36 translate
/pagenum 331 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (331) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(000]) s
5 681 M
(encoded string [6300:kworker/0:1:0b11000110011011100000000001000001000111001101100010111011100) s
5 670 M
(1101001110100000101111100101101000000000110101010100010110010110100001111101011001100011010001) s
5 659 M
(110100]) s
5 648 M
(encoded string [5065:upstart-dbus-bridge:0b101000011111100000000010011101011010011000110010111) s
5 637 M
(0101010111001100011000111111110101110100001010011110011100001101001111101101100010101100100100) s
5 626 M
(101100011101000]) s
5 615 M
(===========) s
5 604 M
( ) s
5 593 M
(Reference:) s
5 582 M
(----------) s
5 571 M
(503.1 Randomized Algorithms - [Rajeev Motwani, Prabhakar Raghavan] - Pages 168 and 214 - 7.4 V) s
5 560 M
(erifying Equality of Strings and 8.4 Hash Tables for string fingerprinting) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(--------------------------------------------) s
5 516 M
(504. \(FEATURE-DONE\) Streaming Algorithms - Encoded Strings Data Source - 26 January 2018) s
5 505 M
(\(For MD5 hash and other Encoded Strings\)) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(--------------------------------------------) s
5 472 M
(1. python-src/Streaming_AbstractGenerator.py iterator has been updated for new data storage "A) s
5 461 M
(sFer_Encoded_Strings" and data source "NeuronRain") s
5 450 M
(for streaming encoded strings created by NeuronRain AsFer) s
5 439 M
(2. Streaming algorithm implementations have been updated to stream data from this new datasour) s
5 428 M
(ce and logs have been committed to testlogs/) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(--------------------------------------------) s
5 384 M
(505. \(FEATURE-DONE\) Scheduler Analytics - Sequence Mining - 29 January 2018) s
5 373 M
(\(Only in NeuronRain Enterprise - GitHub\)) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(--------------------------------------------) s
5 340 M
(1. Sequence Mining has been executed on Scheduler Analytics process statistics \(few processes ) s
5 329 M
(and max length set to 5\).) s
5 318 M
(2. Candidate initial item set has been changed to alphanumeric) s
5 307 M
(3. Declared boolean flag for choosing between MD5 hash encoding of process dicts or plain stri) s
5 296 M
(ng representation of process dict) s
5 285 M
(4. updated software_analytics/asfer.enterprise.encstr.scheduleranalytics) s
5 274 M
(5. Sequence Mined Scheduler Analytics has been committed to testlogs/SequenceMining.log.Schedu) s
5 263 M
(lerAnalytics.29January2018) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(---------------------------------------------------) s
5 219 M
(506. \(THEORY\) Computational Geometric Factorization - Feasibility of Sequential Optimization -) s
5 208 M
( related to 486 - 6 February 2018, 1 September 2018) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(---------------------------------------------------) s
5 175 M
(Doing away with Parallel RAMs in Computational Geometric Factorization by breaking the hyperbo) s
5 164 M
(lic arc bow into two sets of tilesegments ) s
5 153 M
(and searching their concatenations which are implicitly sorted ascending, has problems because) s
5 142 M
( concatenation of multiple tile segments may not be sublinear. Concatenating tile segments can) s
5 131 M
( be likened to concatenation of multiple strings. Concatenation of two strings can be done) s
5 120 M
(in O\(logN\) time by using Rope Strings which are tree representations of strings \(logarithmic i) s
5 109 M
(n length of strings and not in number of) s
5 98 M
(strings\). But concatenation of multiple strings/tiles logarithmic time in number of strings is) s
5 87 M
( still open.) s
5 65 M
(Following sequential optimization tries to find feasibility of doing Sequential Factorization ) s
5 54 M
(without PRAMs and concatenation of tile segments:) s
5 32 M
(number_to_factorize=N) s
5 21 M
(factor_candidate=N/2) s
_R
S
%%Page: (332) 332
%%BeginPageSetup
_S
18 36 translate
/pagenum 332 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (332) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(---------------------------) s
5 681 M
(Loop for subsegment1 tree:) s
5 670 M
(---------------------------) s
5 659 M
(while\(factor is not found\)) s
5 648 M
({) s
5 637 M
(        1. Find the tile segment/interval containing factor candidate.) s
5 626 M
(        [2. Split the candidate tile segment to two subsegments - subsegment1 contains points ) s
5 615 M
(which are less than previous segment's end point,subsegment2 contains points which are greater) s
5 604 M
( than previous segment's end point.]) s
5 593 M
(        3. Binary Search each node in subsegment1 tree for factor points \(p,q\) \(N=pq\) - There ) s
5 582 M
(are 3 possibilities:) s
5 571 M
(        3.1 All points in this subsegment1 tree node are less than N => Binary Search has to b) s
5 560 M
(e done on right subsegment1 subtree recursively, factor_candidate is updated) s
5 549 M
(        3.2 All points in this subsegment1 tree node are greater than N => Search has to be do) s
5 538 M
(ne on left subsegment1 subtree recursively, factor_candidate is updated) s
5 527 M
(        3.3 N is present in this subsegment1 tree node and factor point N=pq is found) s
5 516 M
(}) s
5 494 M
(---------------------------) s
5 483 M
(Loop for subsegment2 tree:) s
5 472 M
(---------------------------) s
5 461 M
(while\(factor is not found\)) s
5 450 M
({) s
5 439 M
(        4. Find the tile segment/interval containing factor candidate.) s
5 428 M
(        [5. Split the candidate tile segment to two subsegments - subsegment1 contains points ) s
5 417 M
(which are less than previous segment's end point,subsegment2 contains points which are greater) s
5 406 M
( than previous segment's end point.]) s
5 395 M
(        6. Binary Search each node in subsegment2 tree for factor points \(p,q\) \(N=pq\) - There ) s
5 384 M
(are 3 possibilities:) s
5 373 M
(        6.1 All points in this subsegment2 tree node are less than N => Binary Search has to b) s
5 362 M
(e done on right subsegment2 subtree recursively) s
5 351 M
(        6.2 All points in this subsegment2 tree node are greater than N => Search has to be do) s
5 340 M
(ne on left subsegment2 subtree recursively) s
5 329 M
(        6.3 N is present in this subsegment2 tree node and factor point N=pq is found) s
5 318 M
(}) s
5 296 M
(7.Above algorithm is Depth-2 Two Level Binary Search:) s
5 285 M
(7.1\) First binary search finds the subsegment node in subsegment trees in O\(logN\)) s
5 274 M
(7.2\) Second binary search searches within subsegment node in O\(logN\)) s
5 263 M
(and thus requires O\(logN*logN\) sequential time.) s
5 241 M
(8. Sets of subsegment1\(s\) and subsegment2\(s\) constitute 2 binary search trees of segments, but) s
5 230 M
( these two search trees are not physically created. Binary search of tile containing factor ca) s
5 219 M
(ndidate dynamically creates treelike traversal.) s
5 197 M
(9. Finding tile segment containing a factor candidate point is non-trivial planar point locati) s
5 186 M
(on problem in general. But Following algorithm finds the interval containing the point in O\(1\)) s
5 175 M
( time specific to hyperbolic pixelated tiling:) s
5 164 M
(Sum of lengths of k consecutive hyperbolic pixelated tiles = N/\(1*2\) + N/\(2*3\) + N/\(3*4\) + ...) s
5 153 M
( + N/\(k*\(k+1\)\)) s
5 142 M
(        = N\(1/1 - 1/2 + 1/2 - 1/3 + 1/3 - 1/4 + ... + 1/k - 1/\(k+1\)\)) s
5 131 M
(        = N\(1 - 1/\(k+1\)\)) s
5 120 M
(        = Nk/\(k+1\)) s
5 109 M
(Tile containing point x:) s
5 98 M
(        Nk/\(k+1\) < x < N\(k+1\)/\(k+2\)) s
5 87 M
(        k < x/\(N-x\)) s
5 76 M
(integer round-off of k is the index of tile interval containing x.) s
5 54 M
(10. Previous sequential optimization of O\(\(logN\)^2\) though removes PRAMs, proves only that Fac) s
5 43 M
(torization is in P. Computational geometric factorization by PRAMs is still a better result be) s
5 32 M
(cause it implies Factorization is in NC from PRAM-NC equivalence despite requirement of high n) s
5 21 M
(umber of parallel processors.) s
_R
S
%%Page: (333) 333
%%BeginPageSetup
_S
18 36 translate
/pagenum 333 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (333) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(11. For each segment k in loops previously, 2 subsegments of it have following interval endpoi) s
5 681 M
(nts - \(xleft,yleft,xright,yright\):) s
5 670 M
(        subsegment1:  \(N/\(k+2\),\(k+1\),N/\(k+2\)+delta,\(k+1\)\)) s
5 659 M
(        subsegment2:  \(N/\(k+2\)+delta,\(k+1\),N/\(k+1\),\(k+1\)\)) s
5 648 M
(and delta=N/\(\(k+1\)\(k+2\)\)) s
5 626 M
(12. CAVEAT: Two factor points \(x1,y1\) and \(x2,y2\) can equal by x1*y1=x2*y2 but these two point) s
5 615 M
(s are located in different subsegments of different tiles because points within subsegment1 or) s
5 604 M
( subsegment2 of a tile segment have same y-coordinates. Previous inequality applies only to a ) s
5 593 M
(binary search segment tree comprised of subsegment2\(s\) of all segments by implicit geometric s) s
5 582 M
(patial sortedness i.e end of subsegment2 in previous segment is less than start of subsegment2) s
5 571 M
( in next segment. Set of subsegment1\(s\) need not be implicitly sorted and thus can not be sear) s
5 560 M
(ched by a segment tree constructed sequentially. This renders previous optimization feasible o) s
5 549 M
(nly to a subset of integers. Algorithms for Parallel RAM construction of segment tree describe) s
5 538 M
(d previously are therefore necessary to find factor points in polylogarithmic time and thus in) s
5 527 M
( NC and all these algorithms require parallel k-mergesort. This sequential algorithm has been ) s
5 516 M
(mentioned only as an optimization.) s
5 494 M
(--------------------------------------) s
5 483 M
(13. Tile Summation and Wavelet trees:) s
5 472 M
(--------------------------------------) s
5 461 M
(Sum of lengths of first n tile segments of pixelated hyperbolic curve derived previously:) s
5 450 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] = Nn/\(n+1\)) s
5 439 M
(which can be equated to sum of distances between first m prime factors by Hardy-Ramanujan Theo) s
5 428 M
(rem:) s
5 417 M
(        Nn/\(n+1\) = mN/kloglogN) s
5 395 M
(=> n = m/\(kloglogN - m\) = number of tiles till m-th prime factor. Sum of lengths \(N/x\(x+1\) eac) s
5 384 M
(h\) of these n tiles \(=O\(loglogN\)\) till m-th prime factor finds approximate m-th prime factor. ) s
5 373 M
(Constructing wavelet tree for concatenated unsorted string of tile segments of epsilon radius ) s
5 362 M
(around approximate factors and doing select\(N\) on the wavelet string finds atleast one factor ) s
5 351 M
(location. Geometric intuition: Tile summations are hyperbolic pixel polygons and if vertices o) s
5 340 M
(f this polygon - endpoints of concatenation - coincide with factor points on x-y axis grid, fa) s
5 329 M
(ctors are found. Accuracy depends on precision of tile summation and this is only an optimizat) s
5 318 M
(ion. If epsilon radius centered around each approximate prime factor is e, total length of con) s
5 307 M
(catenated unsorted tile for all prime factors is: O\(2*e*loglogN\). Sequential Construction and ) s
5 296 M
(select\(\) for wavelet tree for this string is:) s
5 285 M
(        O\(2eloglogN * log\(2eloglogN\)\) + log\(2eloglogN\) = O\(e*loglogN * log\(e*loglogN\)\) + log\(e) s
5 274 M
(*loglogN\)) s
5 263 M
(For sequential polylogarithmic factorization, e has to be upperbounded by O\(\(logN\)^l\).) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(-----------------------------------------------) s
5 219 M
(507. \(THEORY\) Tournament Graph Election, Coloring, Intrinsic Merit, Partitions and Bell Number) s
5 208 M
( - 8 February 2018) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(-----------------------------------------------) s
5 175 M
(Tournament Graph of n vertices has n\(n-1\)/2 edges \(complete\). Each vertex of the tournament gr) s
5 164 M
(aph is uniquely colored by total of n colors.) s
5 153 M
(Each edge \(v1,v2\) is the contest between vertices v1 and v2. Each edge of the tournament graph) s
5 142 M
( is progressively colored by the color of winning vertex of the edge endpoints. Thus at the en) s
5 131 M
(d of the tournament, n\(n-1\)/2 edges are partitioned into n monochromatic sets of edges. Number) s
5 120 M
( of) s
5 109 M
(all possible partitions of a set is the Bell number. Vertex corresponding to Color of the bigg) s
5 98 M
(est part in this edge set partition is the final winner. Any partition which has unequal parts) s
5 87 M
( has biggest part. Thus number of partitions of edges having atleast one biggest part = BellNu) s
5 76 M
(mber - 1 because there is exactly one partition of n\(n-1\)/2 edges into n sets of equal size \(n) s
5 65 M
(-1\)/2. Tournament Graph Election is an alternative social choice function and does not involve) s
5 54 M
( Majority voting. Win in contest between two vertices of an edge can be defined as the vertex ) s
5 43 M
(having greater Intrinsic Merit \(In social networks this is the standard Intrinsic Fitness of a) s
5 32 M
( vertex\). This formalizes the intrinsic merit usecases mentioned in NeuronRain Documentation a) s
5 21 M
(nd FAQ in http://neuronrain-documentation.readthedocs.io/en/latest/ . One additional usecase w) s
5 10 M
(here majority voting falters and Intrinsic Merit is a necessity is the indispensability of exp) s
_R
S
%%Page: (334) 334
%%BeginPageSetup
_S
18 36 translate
/pagenum 334 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (334) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(erimental evidences in exact sciences. For example, in archaeology/history/mythology, "an arte) s
5 681 M
(fact existed few millenia ago" is quite presumptive hypothesis which cannot be proved by mere ) s
5 670 M
(majority voting in contemporary era. In tournaments involving knock-out\(s\), each elimination r) s
5 659 M
(emoves \(n-1\) edges and n/2 rounds decides winner.) s
5 637 M
(References:) s
5 626 M
(-----------) s
5 615 M
(507.1 Tournament Trees - Minimum Comparison Selection - [Don Knuth] - The Art of Computer Prog) s
5 604 M
(ramming - Volume 3) s
5 593 M
(- Page 207-209 - Section 5.3.3 - Kislitsyn Theorem - In a knockout tournament tree of n player) s
5 582 M
(s, minimum number o) s
5 571 M
(f comparisons required to find second best player is n - 2 + ceil\(logn\). For first best player) s
5 560 M
( minimum number of comparisons required is n - 1.   ) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(--------------------------) s
5 516 M
(508. \(FEATURE-DONE\) Streaming Analytics Abstract Generator Update - Socket Streaming Datasourc) s
5 505 M
(e Added - 8 February 2018) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(--------------------------) s
5 472 M
(1.Streaming Abstract Generator facade/generator pattern implementation has been updated for a ) s
5 461 M
(new "Socket Streaming" data storage/data source.) s
5 450 M
(2.Constructor Datasource arg is the remote host and port is hardcoded to 64001 \(one more than ) s
5 439 M
(kernel_analytics driver streaming port\)) s
5 428 M
(3.Python socket has been imported and socket client code has been added to __iter__\(\)) s
5 417 M
(4.As example, Hyper LogLog Counter Streaming implementation has been updated to read streaming) s
5 406 M
( data from remote streaming webservice host) s
5 395 M
(5.Logs for this have been committed to testlogs/) s
5 384 M
(6.Example webserver commandline:) s
5 373 M
(        nc -l 64001) s
5 362 M
(        ><data>) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(------------------------------------------) s
5 318 M
(509. \(FEATURE-DONE\) Scheduler Analytics - Socket Streaming Server - Decorator pattern implemen) s
5 307 M
(tation - 9 February 2018) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(------------------------------------------) s
5 274 M
(1. New Socket Streaming Server for Scheduler Analytics has been implemented in python-src/soft) s
5 263 M
(ware_analytics/SchedulerAnalytics_WebServer.py) s
5 252 M
(2. This invokes get_stream_data\(\) function in python-src/software_analytics/DeepLearning_Sched) s
5 241 M
(ulerAnalytics.py) s
5 230 M
(3. get_stream_data\(\) function is decorated by a Decorator class implemented in a new file pyth) s
5 219 M
(on-src/webserver_rest_ui/NeuronRain_Generic_WebServer.py) s
5 208 M
(4. SocketWebServerDecorator implemented in python-src/webserver_rest_ui/NeuronRain_Generic_Web) s
5 197 M
(Server.py is generic and overrides) s
5 186 M
( __init__\(\) and __call__\(\) functions. __call__\(\) invokes the decoratee function get_stream_dat) s
5 175 M
(a\(\) specific to Scheduler Analytics.) s
5 164 M
(5. SocketWebServerDecorator can decorate any other streaming datasource, not just scheduler an) s
5 153 M
(alytics - decoratee function has to be implemented) s
5 142 M
( accordingly.) s
5 131 M
(6. Logs for Socket Streaming Server have been committed to python-src/software_analytics/testl) s
5 120 M
(ogs/SchedulerAnalytics_WebServer.log.9February2018 and example Socket Streaming Client HyperLo) s
5 109 M
(gLogCounter logs are at python-src/testlogs/Streaming_HyperLogLogCounter.log.9February2018) s
5 98 M
(7. Global configs for socket streaming server host and port \(64001\) have been set in a new con) s
5 87 M
(fig file python-src/software_analytics/SchedulerAnalytics_Config.py) s
5 76 M
(8. Known issue: There seems to be a random iterator disconnect because of psutil process_iter\() s
5 65 M
(\) process statistics streaming delay) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(-------------------------------------------) s
5 21 M
(510. \(FEATURE-DONE\) Scheduler Analytics Socket Streaming Decorator - Psutil iterator frequent ) s
5 10 M
(disconnects resolution - 11 February 2018) s
_R
S
%%Page: (335) 335
%%BeginPageSetup
_S
18 36 translate
/pagenum 335 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (335) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(-------------------------------------------) s
5 670 M
(1. SocketWebServerDecorator frequently and periodically throws "NoneType object not callable" ) s
5 659 M
(exception.) s
5 648 M
(2. This exception happens after every 215 or 217 processes \(not sure what this magic number is) s
5 637 M
(\)) s
5 626 M
(3. Because of this try/except error handling has been added throughout decorator code) s
5 615 M
(4. Socket listen queue size has been increased to 100) s
5 604 M
(5. datasourcefunc\(\) is re-called once an exception is thrown in a loop - a palliative cure) s
5 593 M
(6. After this 215 barrier is breached. Logs for 558 processes streamed by Socket Server Decora) s
5 582 M
(tor and received by Streaming Abstract) s
5 571 M
(Generator client have been committed to python-src/software_analytics/testlogs/SchedulerAnalyt) s
5 560 M
(ics_WebServer.log.11February2018 and) s
5 549 M
(python-src/testlogs/Streaming_HyperLogLogCounter.log.11February2018) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(--------------------------------------------) s
5 505 M
(511. \(FEATURE-DONE\) Approximate 3SAT Solver Randomized Rounding Update - NumPy random choice\(\)) s
5 494 M
( replacing permutation\(\) - 27 February 2018) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(--------------------------------------------) s
5 461 M
(1. CNFSATSolver.py - function creating random 3SAT instances has been updated to invoke NumPy ) s
5 450 M
(random choice\(\) instead of) s
5 439 M
(permutation\(\) without replacement - equivalent to nP3 per clause for n variables.) s
5 428 M
(2. Logs for 16 variables - 16 clauses and 18 variables - 18 clauses have been committed to tes) s
5 417 M
(tlogs/CNFSATSolver.16variables16clauses.log2.27February2018) s
5 406 M
(and testlogs/CNFSATSolver.18variables18clauses.log.27February2018) s
5 395 M
(3. Numpy random choice\(\) is based on Uniform distribution.) s
5 384 M
(4. It is remarkable to note that observed probability average and Random Matrix probability 1/) s
5 373 M
(sqrt\(m*n\)) s
5 362 M
( are strikingly equal - a confirmation of the least squares randomized rounding and relaxation) s
5 351 M
( SAT solver's accuracy) s
5 340 M
(5. Logs for 16*16 and 18*18 have few hundreds and thousand plus random 3SAT instances which ar) s
5 329 M
(e solved 100%) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(------------) s
5 285 M
(512. \(FEATURE-DONE\) ConceptNet5 Update - REST endpoints changed - 27 February 2018) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(------------) s
5 252 M
(1. ConceptNet5 rest_client.py has been imported which already wraps REST methods and endpoints) s
5 241 M
(2. REST endpoints for search,lookup and query have been updated for ConceptNet 5.5 which were ) s
5 230 M
(5.4 earlier) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(-----------------------------------------------) s
5 186 M
(513. \(FEATURE-DONE and THEORY\) Approximate SAT Solver and ConceptNet REST client updates - 21 ) s
5 175 M
(variables,21 clauses LSMR and Common Ancestor Distance in ConceptNet5 - 28 February 2018) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(-----------------------------------------------) s
5 142 M
(1.Least Square SAT solver has been updated to print more readable debug messages and highlight) s
5 131 M
( MAXSAT approximation ratio) s
5 120 M
( average for SATs solved thus far) s
5 109 M
(2.Number of variables and clauses is set to 21,21 and MAXSAT ratio is 98% for 34 random 3SATs) s
5 98 M
(3.Logs for 21,21 has been committed to testlogs/CNFSATSolver.21variables21clauses.log.28Februa) s
5 87 M
(ry2018 which shows the observed literal) s
5 76 M
(probabilities and random matrix 1/sqrt\(m*n\) literal probability agreeing well.) s
5 65 M
(4.This is because of uniform unbiased \(mostly\) choice\(\) when number of clauses = number of var) s
5 54 M
(iables causing 1/sqrt\(m*n\) = 1/n) s
5 43 M
(5.For unequal clauses and variables numbers, an epsilon biased PRG implementation in linux ker) s
5 32 M
(nel is necessary \(random.c might have to be) s
5 21 M
( rewritten\)) s
5 10 M
(---------------------) s
_R
S
%%Page: (336) 336
%%BeginPageSetup
_S
18 36 translate
/pagenum 336 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (336) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(6.ConceptNet5 client has been updated to include a related\(\) function wrapper which invokes /r) s
5 681 M
(elated REST endpoint for finding similar concepts.) s
5 670 M
(7.ConceptNet5 finds related concepts by word embeddings implementation of word2vec which maps ) s
5 659 M
(each word to a vector and similar words/concepts) s
5 648 M
(are clustered together in this vector space. More precisely, word distances are represented as) s
5 637 M
( a word-word 2 dimensional matrix/graph) s
5 626 M
(and sum of path edge weights between word pair is the distance.) s
5 615 M
(8.For finding distance between two concepts a common ancestor algorithm has been implemented i) s
5 604 M
(n new conceptnet_distance\(\) function which recursively invokes related\(\) to deep learn concept) s
5 593 M
(s and grows paths between the two concept endpoints. This recursion stops when paths grown fro) s
5 582 M
(m both ends meet i.e when there is a common ancestor \(inspired by Savitch and USTCONN in logsp) s
5 571 M
(ace theorems\).) s
5 560 M
(9.Common ancestors are printed in end and distance between the concepts is also printed) s
5 549 M
(10.Some example conceptnet_distance\(\) invocations have been captured in ConceptNet/testlogs/Co) s
5 538 M
(nceptNet5Client.log.28February2018) s
5 527 M
( ) s
5 516 M
(References:) s
5 505 M
(-----------) s
5 494 M
(513.1 ConceptNet 5.5: An Open Multilingual Graph of General Knowledge - [Robert Speer,Joshua C) s
5 483 M
(hin,Catherine Havasi-Luminoso Technologies] - https://arxiv.org/pdf/1612.03975.pdf) s
5 472 M
(513.2 ConceptNet blog - https://blog.conceptnet.io/) s
5 461 M
(513.3 Microsoft Concept Graph - Probase - https://concept.research.microsoft.com/Home/Introduc) s
5 450 M
(tion - similar to ConceptNet) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(--------------------------------------------) s
5 406 M
(514. \(THEORY\) ConceptNet, Graph Tensor Neuron Network Intrinsic Merit, Word2Vec Word Embedding) s
5 395 M
(s - 2 March 2018 - related to 412, 513) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(--------------------------------------------) s
5 362 M
(ConceptNet5 /related REST endpoint retrieves concepts similar to a concept and ranks them by w) s
5 351 M
(ord2vec word embedding similarity score. Recursiv) s
5 340 M
(e Lambda Function Growth algorithm mentioned previously, grows lambda functions for random wal) s
5 329 M
(ks in a text definition graph created by Recursiv) s
5 318 M
(e Gloss Overlap and word-word similarity/relevance is formalized by Neural Tensor Network. Con) s
5 307 M
(ceptNet /related word2vec word embedding word-word similarity scores are perfect fit for Neuro) s
5 296 M
(n Tensor Network entity relation potentials. Per random walk lambda function composition tree ) s
5 285 M
(composes the neuron tensor potentials of all relations in the random walk. Composition trees a) s
5 274 M
(re ranked by these composed potentials and Lambda composition tree of maximum potential best a) s
5 263 M
(pproximates the meaning of the Natural Language Text. This implies ConceptNet itself is one hu) s
5 252 M
(ge Graph Tensor Neuron Network Monolith. ) s
5 230 M
(Rationale for creating random walks in text definition graph is: Process of Human Text Compreh) s
5 219 M
(ension is simulated by connecting concepts in text in various possible random walks of finite ) s
5 208 M
(lengths, creating a tree of their meaning as lambda function composition and choosing the most) s
5 197 M
( rewarding random walk ranked by composed potentials. Most rewarding random walk must contain ) s
5 186 M
(the word vertices of high core numbers \(or centralities/classes of the text\) because most numb) s
5 175 M
(er of paths in the graph go through these hub vertices \(Section 5.16 in https://tac.nist.gov/p) s
5 164 M
(ublications/2010/participant.papers/CMI_IIT.proceedings.pdf proves this notion for Recursive G) s
5 153 M
(loss Overlap graph in terms of WordNet relations\). Cycles in the definition graph have also be) s
5 142 M
(en experimentally found to approximate the text well. Random walks/Cycles in the definition gr) s
5 131 M
(aph have close resemblance to Word-Chain Theory in Psycholinguistics which postulates Brain st) s
5 120 M
(ores the information as chain of words. Word-Chain Theory was dismissed by the Deep Structure ) s
5 109 M
(theory of Chomsky. Lambda Function Composition of Random Walks/Cycles combines Word-Chain and ) s
5 98 M
(Deep Tree Structure into one - converts list of words into a meaning tree. ) s
5 76 M
(References:) s
5 65 M
(----------) s
5 54 M
(514.1 Neural Tensor Network - [Socher-Chen-Manning-Ng] - https://nlp.stanford.edu/pubs/SocherC) s
5 43 M
(henManningNg_NIPS2013.pdf - Section 3.1 - "...The goal of our approach is to be able to state ) s
5 32 M
(whether two entities \(e1, e2\) are in a certain relationship R. For instance, whether the relat) s
5 21 M
(ionship \(e1, R, e2\) = \(Bengal tiger, has part, tail\) is true and with what certainty. ... The ) s
5 10 M
(Neural Tensor Network \(NTN\) replaces a standard linear neural network layer with a bilinear te) s
_R
S
%%Page: (337) 337
%%BeginPageSetup
_S
18 36 translate
/pagenum 337 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (337) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(nsor layer that directly relates the two entity vectors across multiple dimensions. ...") s
5 681 M
(514.2 The Language Instinct - [Steven Pinker] - Chapter 4 - How Language Works - Word Chains a) s
5 670 M
(nd Chomsky) s
5 659 M
(514.3 Chomsky-Norvig Debate on Algorithmic Versus Statistical Learning - http://daselab.cs.wri) s
5 648 M
(ght.edu/nesy/NeSy13/norvig.pdf - 98% learning models are probabilistic/statistical while 2% ar) s
5 637 M
(e algorithmic. Chomsky's viewpoints:) s
5 626 M
(        <quote>) s
5 615 M
(        - Statistical language models have had engineering success, but that is irrelevant to ) s
5 604 M
(science.) s
5 593 M
(        - Accurately modeling linguistic facts is just butterfly collecting; what matters in s) s
5 582 M
(cience \(and specifically linguistics\) is the underlying principles.) s
5 571 M
(        - Statistical models are incomprehensible; they provide no insight.) s
5 560 M
(        - Statistical models may provide an accurate simulation of some phenomena, but the sim) s
5 549 M
(ulation is done completely the wrong way; people don't decide what the third word of a sentenc) s
5 538 M
(e should be by consulting a probability table keyed on the previous two words, rather they map) s
5 527 M
( from an internal semantic form to a syntactic tree-structure, which is then linearized into w) s
5 516 M
(ords. This is done without any probability or statistics.) s
5 505 M
(        - Statistical models have been proven incapable of learning language; therefore langua) s
5 494 M
(ge must be innate, so why are these statistical modelers wasting their time on the wrong enter) s
5 483 M
(prise?) s
5 472 M
(        <unquote>) s
5 461 M
(Recursive Gloss Overlap and Recursive Lambda Function Growth are Algorithmic Language Learning) s
5 450 M
( Models.) s
5 439 M
(514.4 Gold's Theorem - www.lps.uci.edu/~johnsonk/Publications/Johnson.GoldsTheorem.pdf and lim) s
5 428 M
(it on learnability  - language L has infinite elasticity if there exist subsets T1 in T2 in ..) s
5 417 M
(. ad infinitum such that Ti in Li and T\(i+1\) not in Li for set of languages Li and Lim Ti = L ) s
5 406 M
(. Languages of infinite elasticity are not learnable.) s
5 395 M
(514.5 Power Law Distribution, Scale-Invariance, Small Word Phenomenon in Roget's Thesaurus and) s
5 384 M
( WordNet -Section 4.3 -  http://web.mit.edu/cocosci/Papers/03nSteyvers.pdf - Roget's Thesaurus) s
5 373 M
( and WordNet follow Pareto's Power Law Distribution i.e P\(k\) = k^\(-e\) where P\(k\) is the probab) s
5 362 M
(ility of vertices having k incoming links and e is the scale exponent. Power Law implies large) s
5 351 M
( number of nodes have small incoming links and small number of nodes have high incoming links.) s
5 340 M
( Both Roget's Thesaurus and WordNet have scale exponent ~3, high sparsity, very short average ) s
5 329 M
(distances among words\(5.6 and 10.56\), single connected component containing almost all words, ) s
5 318 M
(high local clustering.) s
5 307 M
(514.6 Pareto's 80/20 rule, Scale-Invariance in phase-transition - Chapter 6: Sixth Link - Link) s
5 296 M
(ed - [Albert Laszlo Barabazi]) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(---------) s
5 252 M
(515. \(THEORY and FEATURE-DONE\) Recursive Lambda Function Growth - ConceptNet5 support, Per ran) s
5 241 M
(dom walk ) s
5 230 M
(Lambda Function Composition Tree Graph Tensor Neuron Network Intrinsic Merit - 3 March 2018 - ) s
5 219 M
(related to 514) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(---------) s
5 186 M
(Recursive Lambda Function Growth implementation has been updated to print per random walk lamb) s
5 175 M
(da function) s
5 164 M
(composition tree and its Graph Tensor Neuron Network Intrinsic Merit. Similarity has been made) s
5 153 M
( configurable by a flag to choose between 2 Antology Nets - WordNet and ConceptNet. Logs for t) s
5 142 M
(his have been committed to testlogs/RecursiveLambdaFunctionnGrowth.log.GraphTensorNeuronNetwor) s
5 131 M
(k.3March2018. Logs show a striking similarity between Maximum Intrinsic Merit Random Walk Comp) s
5 120 M
(osition and Centralities/Classes of the definition graph \(excerpts below\):) s
5 109 M
(...) s
5 98 M
(grow_lambda_function3\(\): Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Merit :) s
5 87 M
( \(u'\(present\(etc,\(infrastructure\(country,\(urban\(area,\(Mumbai\(city,largest\)\)\)\)\)\)\)\)', 3.79035087) s
5 76 M
(7192983\)) s
5 65 M
(...) s
5 54 M
(==============================================================================================) s
5 43 M
(===============) s
5 32 M
(Unsupervised Classification based on top percentile Core numbers of the definition graph\(subgr) s
5 21 M
(aph of WordNet\)) s
5 10 M
(==============================================================================================) s
_R
S
%%Page: (338) 338
%%BeginPageSetup
_S
18 36 translate
/pagenum 338 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (338) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(===============) s
5 681 M
(This document belongs to class: Mumbai ,core number= 12) s
5 670 M
(This document belongs to class: infrastructure ,core number= 9) s
5 659 M
(...) s
5 648 M
(which is an evidence to the fact intrinsic merit peaks for random walks through high core numb) s
5 637 M
(ered hub word vertices. Another aspect of ConceptNet's relevance to Graph Tensor Neuron Networ) s
5 626 M
(k is the strong resemblance of word2vec word embeddings to Connectomes in Computational Neuros) s
5 615 M
(cience \(mentioned in references\). Connectomes are the wiring diagrams for neurons in brain. Wo) s
5 604 M
(rd2Vec clusters similar words of a text in vector space forming a clique. These word cluster c) s
5 593 M
(liques are wired together into a text graph. Thus Graph representation of Text and Neuron Cliq) s
5 582 M
(ues and Connectome Information Propagation Among Cliques of Neurons have uncanny similarities.) s
5 571 M
( ) s
5 549 M
(References:) s
5 538 M
(-----------) s
5 527 M
(515.1 Cliques and Cavities in Human Brain - [Ann Sizemore, Chad Giusti, Ari Kahn, Richard F. B) s
5 516 M
(etzel, Danielle S. Bassett] - https://arxiv.org/abs/1608.03520 ) s
5 505 M
(515.2 Algebraic topology and Computational Neuroscience - https://www.technologyreview.com/s/6) s
5 494 M
(02234/how-the-mathematics-of-algebraic-topology-is-revolutionizing-brain-science/) s
5 483 M
(515.3 Brain Graphs of Women are better expander graphs than men - http://journals.plos.org/plo) s
5 472 M
(sone/article?id=10.1371/journal.pone.0130045 - Brain Graphs \(or\) Connectomes of Brain have bee) s
5 461 M
(n analyzed in computational neuroscience as Graph Expanders. Better Expander implies the Brain) s
5 450 M
( Graph or Graph of Neurons have better epsilon-Expansion trait i.e each vertex subset S of bra) s
5 439 M
(in graph has epsilon*|S| incident edges. - "...Expander graphs and the expander-property of gr) s
5 428 M
(aphs are one of the most interesting area of graph theory: they are closely related to the con) s
5 417 M
(vergence rate and the ergodicity of Markov chains, and have applications in the design of comm) s
5 406 M
(unication- and sorting networks and methods for de-randomizing algorithms [25]. A graph is an ) s
5 395 M
(\311\\233-expander, if every\342\\200\\224not too small and not too large\342\\200\\224vertex-set S of the g) s
5 384 M
(raph has at least \311\\233\342\\210\243S\342\\210\243 outgoing edges \(see [25] for the exact definition\).  Rand) s
5 373 M
(om walks on good expander graphs converge very fast to the limit distribution: this means that) s
5 362 M
( good expander graphs, in a certain sense, are \342\\200\\234intrinsically better\342\\200\\235 connecte) s
5 351 M
(d than bad expanders. It is known that large eigengap of the walk transition matrix of the gra) s
5 340 M
(ph implies good expansion property [25].  We have found that women\342\\200\\231s connectomes have ) s
5 329 M
(significantly larger eigengap, and, consequently, they are better expander graphs than the con) s
5 318 M
(nectomes of men. For example, in the 83-node resolution, in the left hemisphere and in the unw) s
5 307 M
(eighted graph, the average female connectome\342\\200\\231s eigengap is 0.306 while in the case of ) s
5 296 M
(men it is 0.272, with p = 0.00458..." - High expansion implies least energy by [Barabasi-Bianc) s
5 285 M
(oni] Bose-Einstein condensation and vertices are able to attract high number of links. In the ) s
5 274 M
(context of random walks in Recursive Lambda Function Growth previously, assuming the lambda fu) s
5 263 M
(nction tree as logical connectome - because role of neurons is simulated by the lambda functio) s
5 252 M
(ns - random walks on high expanding, least energy definition graph should converge faster theo) s
5 241 M
(retically. ) s
5 230 M
(515.4 Mapping Neurone Synapses to Connectomes - https://neurophys.gu.se/digitalAssets/1553/155) s
5 219 M
(3052_richard_dybowski.pdf - Workflow for Segmentation of fMRI images, Identifying membranes, I) s
5 208 M
(nferring Connectomes by Deep Learning.) s
5 197 M
(515.5 Measuring Intrinsic Fitness in WWW and Scientific Publications \(Bianconi-Barabasi Model\)) s
5 186 M
( - http://networksciencebook.com/6#bianconi-model - Sections 6.3 - Case studies of journals \(N) s
5 175 M
(ature,PRL,PNAS,Science etc.,\) and Bose-Einstein Condensation in some networks - Section 6.4) s
5 164 M
(515.6 Analysis of Brain Graphs or Connectomes - https://arxiv.org/pdf/1105.4705.pdf - Network ) s
5 153 M
(Motifs - "...Similarly, human structural connectivity between brain regions shows small-world ) s
5 142 M
(properties with a small-worldness S of 10.6 \(Text S2, Hagmann et al., 2008\). For human functio) s
5 131 M
(nal connectivity between brain regions, the clustering coefficient is 53% \(22% in random netwo) s
5 120 M
(rks\) and the path length 2.5 \(2.3 in random networks\) \(Achard et al., 2006\)...") s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-------------------------------------) s
5 76 M
(516. \(FEATURE-DONE\) SAT Solver - verbose print and iterations reduced - 4 March 2018) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(-------------------------------------) s
5 43 M
(Least Squares LSMR SAT solver implementation has been updated to print LSMR internal calculati) s
5 32 M
(ons. Maximum iterations, conlim, atol, btol parameters have been set to least values for reduc) s
5 21 M
(ing latency. But this reduces MAXSAT accuracy to ~94% which is still above 88% \(7/8 approximat) s
5 10 M
(ion\). SciPy Sparse dsolve.spsolve\(\) was tried for solving least squares by csc_matrix and ther) s
_R
S
%%Page: (339) 339
%%BeginPageSetup
_S
18 36 translate
/pagenum 339 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (339) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(e were nan errors.Finally, LSMR looks to be the best of the lot. Logs for few random 3SATs of ) s
5 681 M
(\(21 clauses, 21 variables\) have been committed to testlogs/CNFSATSolver.21variables21clauses.l) s
5 670 M
(og.4March2018. Observed average probability of choosing a literal again agrees quite well to 1) s
5 659 M
(/sqrt\(m*n\) Random Matrix theoretical probability as gleaned from logs.) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(------------------------------------) s
5 615 M
(517. \(THEORY\) Majority+Voter Composition Hardness Amplification Lemma, Sensitivity Conjecture ) s
5 604 M
(- Updated Hardness Bound -) s
5 593 M
(related to 318,355 - 5 March 2018) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(------------------------------------) s
5 560 M
(Hardness Amplification for Majority+Voter Composition has been described earlier by adapting X) s
5 549 M
(OR Lemma to Majority function as:) s
5 527 M
(     Hardness of Maj+voter composition       [c/sqrt\(n*delta\)] + [sum\(column2 error entries\)] ) s
5 516 M
(- [sum\(column3 no error entries\)]) s
5 505 M
(    -----------------------------------  =  --------------------------------------------------) s
5 494 M
(--------------------------------) s
5 483 M
(         Hardness of voter function                                             delta) s
5 461 M
(which is based on the sudivided BP* error scenarios matrix mentioned earlier and described aga) s
5 450 M
(in below:) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(---) s
5 417 M
(        x                               |    f\(x\) = f\(x/e\)      |       f\(x\) != f\(x/e\) Noise  ) s
5 406 M
(  |) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(---) s
5 373 M
(x in L, x/e in L                        |       No error        |       Error                 ) s
5 362 M
(  |) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(---) s
5 329 M
(x in L, x/e not in L                    |       Error           |   No error if f\(x\)=1,f\(x/e\)=) s
5 318 M
(0 |) s
5 307 M
(                                        |                       |   else Error                ) s
5 296 M
(  |) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(---) s
5 263 M
(x not in L, x/e in L                    |       Error           |   No error if f\(x\)=0,f\(x/e\)=) s
5 252 M
(1 |) s
5 241 M
(                                        |                       |   else Error                ) s
5 230 M
(  |) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(---) s
5 197 M
(x not in L, x/e not in L                |       No error        |      Error                  ) s
5 186 M
(  |) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(---) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(--) s
5 131 M
(       x                                |                       f\(x\)                          ) s
5 120 M
( |) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(--) s
5 87 M
(Randomized Decision tree evaluation     |       No error       |       Error                  ) s
5 76 M
( |) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(--) s
5 43 M
(This matrix picturises the various false positives and false negative errors possible in major) s
5 32 M
(ity voting. Language L denotes voting pattern for candidate 0 to win \(and its complement is vo) s
5 21 M
(ting pattern for candidate 1\). Correlation x/e is the flip in voting pattern. Previous matrix ) s
5 10 M
(divides BP* errors into 2 dimensions based on 1\) whether the voting pattern is valid 2\) Noise ) s
_R
S
%%Page: (340) 340
%%BeginPageSetup
_S
18 36 translate
/pagenum 340 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (340) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sensitivity/stability . For example a voting pattern x for candidate 0's win is correlated/fli) s
5 681 M
(pped to x/e so that candidate 1 wins and input to Majority function f\(\), but yet majority func) s
5 670 M
(tion treats them with equal outcome - in matrix this error scenario is: x in L, x/e not in L a) s
5 659 M
(nd f\(x\)=f\(x/e\). Other scenarios follow this convention. Based on this error matrix, Hardness a) s
5 648 M
(mplification ratio derived previously can be rewritten as:) s
5 626 M
( Hardness of Maj+voter composition       [sum\(column2 entries\)] + [sum\(column3 entries\)] - [su) s
5 615 M
(m\(all no error entries\)]) s
5 604 M
( -----------------------------------  =  -----------------------------------------------------) s
5 593 M
(-------------------------) s
5 582 M
(     Hardness of voter function                                                 delta) s
5 560 M
(But Stability\(f\(x\)\) = Pr\(f\(x\)=f\(x/e\)\) - Pr\(f\(x\) != f\(x/e\)\) from definition of Noise stability ) s
5 549 M
(=> Pr\(f\(x\)=f\(y\)\) = \(1+Stability\)/2.) s
5 538 M
(Sum\(column2 entries\) = Pr\(f\(x\)=f\(y\)\) = \(1+Stability\)/2.) s
5 527 M
(Sum\(column3 entries\) = NoiseSensitivity) s
5 516 M
(=> Hardness of Maj+Voter composition = \(1+Stability\)/2 + NoiseSensitivity - [sum\(all no error ) s
5 505 M
(entries\)]) s
5 494 M
(For majority function, Stability = \(2/pi\)*delta + O\(\(delta\)^1.5\) and NoiseSensitivity = O\(1/sq) s
5 483 M
(rt\(n*delta\)\)) s
5 472 M
(=> Hardness of Maj+Voter composition = 1 + \(2/pi\)*delta + O\(\(delta\)^1.5\) + O\(1/sqrt\(n*delta\)\) ) s
5 461 M
(- [sum\(all no error entries\)]) s
5 450 M
(For large n, previous hardness tends to 1 + \(2/pi\)*delta + O\(\(delta\)^1.5\) - [sum\(all no error ) s
5 439 M
(entries\)]) s
5 417 M
(From definition of BP*, Probability of No error entries >= 2/3 => Sum\(all no error entries\) >=) s
5 406 M
( 2/3) s
5 395 M
(=> Hardness of Maj+Voter composition <= [pi + 2*delta + k*pi*\(delta\)^1.5]/2*pi - 2/3) s
5 384 M
(=> Hardness Amplification for Majority+Voter Composition <= [3*pi + 6*delta + 6k*pi*\(delta\)^1.) s
5 373 M
(5 - 2] /[6*pi*delta]) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(-----------------) s
5 340 M
(=> Hardness Amplification for Majority+Voter Composition <= 1/delta*\(1/2-1/3*pi\) + 1/pi + 6k*p) s
5 329 M
(i*\(delta\)^0.5) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(-----------------) s
5 296 M
(which is huge amplification for small hardness of voter boolean functions.) s
5 285 M
(=> weak voters are hardened by majority) s
5 274 M
(=> Computing majority by a circuit is increasingly hard as voters become weak \(intuitively obv) s
5 263 M
(ious because if voter circuits err, majority circuit errs, an indirect proof of Margulis-Russo) s
5 252 M
( Threshold and Condorcet Jury Theorem\).) s
5 230 M
(Sensitivity Conjecture polynomially relates sensitivity and block sensitivity of boolean funct) s
5 219 M
(ions as: s\(f\) <= bs\(f\) <= poly\(s\(f\)\). So far only Noise Sensitivity has been applied as sensit) s
5 208 M
(ivity measure throughout for quantifying BP* error in Majority voting because it is a probabil) s
5 197 M
(ity measure. But Sensitivity and Block Sensitivity are maximum number of bits and disjoint blo) s
5 186 M
(cks of bits sensitive to output. Noise sensitivity probability can be written as:) s
5 175 M
(                                for_all_length_e\(Number of correlations x/e for which [f\(x\) !=) s
5 164 M
( f\(x/e\)]\)) s
5 153 M
(        --------------------------------------------------------------------------------------) s
5 142 M
(-----------------------------------------) s
5 131 M
(        for_all_length_e\(Number of correlations x/e for which [f\(x\) == f\(x/e\)] + Number of cor) s
5 120 M
(relations x/e for which [f\(x\) != f\(x/e\)]\)) s
5 98 M
(Sensitivity and Block Sensitivity are maximum values of e\(which can be number of bits or numbe) s
5 87 M
(r of blocks\) in summations of numerator and denominator. Block Sensitivity in Majority+Voter c) s
5 76 M
(omposition implies voter boolean functions are interdependent \(correlated majority\) and swayed) s
5 65 M
( by peer opinions en masse \(Herding\). Hardness of voter boolean function and majority are indi) s
5 54 M
(rectly related to sensitivity and block sensitivity through summations in Noise Sensitivity pr) s
5 43 M
(obability.) s
5 21 M
(NOTE: Here hardness of voter boolean function is approximately assumed to equal NoiseSensitivi) s
5 10 M
(ty of Voter Boolean Function and delta=epsilon. To be precise, delta = epsilon +/- error by BP) s
_R
S
%%Page: (341) 341
%%BeginPageSetup
_S
18 36 translate
/pagenum 341 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (341) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(* versus NoiseSensitivity/Stability Scenarios Matrix conventions. This +/- term is ignored. Ac) s
5 681 M
(counting for this +/- error:) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(------------------------------------------) s
5 648 M
(=> Hardness Amplification for Majority+Voter Composition <= 1/\(delta + or - error\)*\(1/2-1/3*pi) s
5 637 M
(\) + 1/pi + 6k*pi*\(delta + or - error\)^0.5) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(------------------------------------------) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-------------------------------------------------) s
5 571 M
(518. \(THEORY and FEATURE-DONE\) Hardness of Majority Voting, SAT Solver Update - Compressed Sen) s
5 560 M
(sing and Moore-Penrose Pseudoinverse ) s
5 549 M
(- Conflicts - 6 March 2018 - related to 517) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(-------------------------------------------------) s
5 516 M
(Approximate CNF SAT Solver has been updated to invoke Moore-Penrose Pseudoinverse function to ) s
5 505 M
(compute approximate inverse of random 3SAT matrix and is multiplied as A^-1*b to find assignme) s
5 494 M
(nts x. Compressed Sensing implementation already uses pseudoinverse to decompress image from s) s
5 483 M
(ketch which is similar to this SAT solver. Performance is almost similar to LSMR and MAXSAT ap) s
5 472 M
(proximation ratio hovers around 97-98% for 306 random 3SAT instances of 21 variables and 21 cl) s
5 461 M
(auses. Randomized rounding threshold has been increased to 0.5 from 0.1 \(a literal is set to 0) s
5 450 M
( if it is < 0.5 and to 1 if >= 0.5\). Observed per literal probabilities are equal to random ma) s
5 439 M
(trix expected probability 1/sqrt\(m*n\). This reduces SAT solving to Compressed Sensing. There a) s
5 428 M
(re some conflicts between the findings of SAT Solver and Hardness of Majority:) s
5 417 M
(        \(#\) Hardness of Majority+Voter Boolean Function Composition in both directions - botto) s
5 406 M
(m-up Voter-Majority and top-down MajorityInverse-VoterInverse have been described earlier \(bot) s
5 395 M
(tom-up hardness has been derived\) and top-down inversion is considerably harder \(#P-complete c) s
5 384 M
(ounting problem\) and a likely choice for an one-way function and strong pseudorandom generator) s
5 373 M
( implying P != NP \(or does it imply something more than P != NP because top-down inversion is ) s
5 362 M
(in #P?\).In oracle notation, top-down inversion is #P^#P assuming VoterInverse\(\) assignments ar) s
5 351 M
(e #P oracles to MajorityInverse\(\) #P problem. Toda's theorem implies PH is in P^#P. If P^#P is) s
5 340 M
( in #P^#P, then top-down inversion is harder than PH and hardness of top-down inversion implie) s
5 329 M
(s more than just P != NP.) s
5 318 M
(        \(#\) SAT Solver random matrix analysis per-literal probability agrees with observed fin) s
5 307 M
(dings so far in small number of variables and clauses and MAXSAT approximation ratio for \(21,2) s
5 296 M
(1\) and less number of variables-clauses combinations is almost 97% in most of the Solver execu) s
5 285 M
(tions - SAT solver solves the equal number of clause-variable instances exceeding 7/8-approxim) s
5 274 M
(ation similar to Karloff-Zwick semidefinite programming randomized algorithm but in determinis) s
5 263 M
(tic polynomial time. Solving unequal clause-variables requires choice in a non-uniform distrib) s
5 252 M
(ution. Solving large number of variables-clauses in the order of millions might further confir) s
5 241 M
(m this trend but is cpu-intensive. So it still remains open if this more than 7/8-approximatio) s
5 230 M
(n implies P=NP. It is unusual that a simple rounding of real solutions to 0 or 1 from linear s) s
5 219 M
(ystem of \(boolean\) equations, is able to solve most number of clauses per random SAT which is ) s
5 208 M
(more obvious compared to other Randomized Rounding/Relaxation techniques like Semi-definite pr) s
5 197 M
(ogramming.) s
5 186 M
(        \(#\) If Hardness of Majority implies something stronger than P != NP e.g an one-way fun) s
5 175 M
(ction or PRG in #P^#P then there is no conflict from SAT Solver >7/8-approximation in determin) s
5 164 M
(istic Polynomial time and P=NP.) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(------------------------------------------------) s
5 120 M
(519. \(THEORY and FEATURE-DONE\) SAT Solver Update - pinv2\(\) - 1000 variables and 1000 clauses -) s
5 109 M
( 6 March 2018) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(------------------------------------------------) s
5 76 M
(SAT Solver has been updated to use pinv2\(\) pseudoinverse function which has been documented to) s
5 65 M
( be faster. After removing some code causing) s
5 54 M
(redundant bottleneck, 1000 variables-1000 clauses random SATs have been solved by pinv2\(\) and ) s
5 43 M
(matrix multiplication to find real assignments which have been rounded. This means solving a m) s
5 32 M
(illion entry matrix \(1000*1000\). MAXSAT approximation ratio is 97%-98% again. Probability per ) s
5 21 M
(literal average observed coincides with theoretical value of 1/sqrt\(m*n\). It has to be noted t) s
5 10 M
(hat Random matrix expectation for solving SAT translated to linear system of equations is an a) s
_R
S
%%Page: (342) 342
%%BeginPageSetup
_S
18 36 translate
/pagenum 342 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (342) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(verage case solution and is not worst case. This >7/8 approximation could imply AverageP=Avera) s
5 681 M
(geNP or PromiseP=PromiseNP \(for equal number of variables-clauses\) if not P=NP. This is the li) s
5 670 M
(kely reason for observed per literal probability being 97% asymptotically less than theoretica) s
5 659 M
(l per literal probability 100%.) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(-----------------------------------------------) s
5 615 M
(520. \(THEORY and FEATURE-DONE\) SAT Solver Update - 2500 clauses and 2500 variables - LSMR,LSQR) s
5 604 M
( and PseudoInverse Benchmarks - related to 518) s
5 593 M
(- 9 March 2018) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(-----------------------------------------------) s
5 560 M
(1. SAT Solver class has been changed to accept the algorithm as parameter which can be functio) s
5 549 M
(n names for LSMR,LSQR,PseudoInverse,SPSOLVE,) s
5 538 M
(SOLVE etc.,) s
5 527 M
(2. 2500 variables and 2500 clauses combination of SAT instances have been benchmarked by invok) s
5 516 M
(ing LSMR, LSQR and PseudOInverse\(pinv2\) separately.) s
5 505 M
(3. LSMR benchmark has 405 random 3SAT instances and is the fastest, LSQR and PseudoInverse\(pin) s
5 494 M
(v2\) benchmarks have only few random 3SAT instances.) s
5 483 M
(4. LSQR and PseudoInverse\(pinv2\) are equally slower compared to LSMR by many orders of magnitu) s
5 472 M
(de.) s
5 461 M
(5. But approximation ratio for LSMR is 91-92% while LSQR and PseudoInverse trend at 96-97% tho) s
5 450 M
(ugh for small number of iterations. This probably) s
5 439 M
(implies an accuracy versus speed tradeoff: LSMR is less accurate but fast while LSQR and Pseud) s
5 428 M
(oInverse\(pinv2\) are more accurate but less fast.) s
5 417 M
(6. Observed probability per literal for all three coincide with random matrix 1/sqrt\(m*n\) unif) s
5 406 M
(orm distribution probability per literal) s
5 395 M
(7. These numbers are only representative figures and number of iterations for LSQR and PseudoI) s
5 384 M
(nverse\(pinv2\) are too meagre.) s
5 373 M
(8. Logs have been committed to:) s
5 362 M
(  python-src/testlogs/CNFSATSolver.2500clauses2500variables.LSMR.log.9March2018) s
5 351 M
(  python-src/testlogs/CNFSATSolver.2500clauses2500variables.LSQR.log.9March2018) s
5 340 M
(  python-src/testlogs/CNFSATSolver.2500clauses2500variables.PseudoInverse.log.9March2018) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(----------------------------------------------) s
5 296 M
(521. \(THEORY and FEATURE-DONE\) SAT Solver Update - Non-Uniform Choice - For both equal and une) s
5 285 M
(qual number of clauses and variables -) s
5 274 M
(related to 520 - 11 March 2018) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(----------------------------------------------) s
5 241 M
(SAT Solver has been updated to include a new Non-Uniform Choice function for creating random S) s
5 230 M
(AT instances by choosing a literal by) s
5 219 M
(probability = 1/sqrt\(m*n\) which works for both equal and unequal number of clauses. This new f) s
5 208 M
(unction chooses non-uniformly. This function creates a submatrix of dimension \(sqrt\(m\),sqrt\(n\)) s
5 197 M
(\) chosen uniformly from larger matrix of \(m clauses * n variables\) by invoking choice\(\) functi) s
5 186 M
(on to choose sqrt\(m\) rows from m rows and sqrt\(n\) columns from n columns. This uniformly choos) s
5 175 M
(es sqrt\(m\)*sqrt\(n\) entries from m*n entries of random matrix. This simulates the random matrix) s
5 164 M
( probability 1/sqrt\(m*n\) = sqrt\(m*n\)/m*n. From this submatrix 3 literals are chosen in success) s
5 153 M
(ion to create a random 3SAT clause. Replace flag in choice\(\) was set to False and True while c) s
5 142 M
(reating random clause and there was not much difference and has been set to True.Logs for foll) s
5 131 M
(owing 3 variables-clauses combinations have been committed to testlogs/ for ~100 random 3SAT i) s
5 120 M
(nstances each:) s
5 109 M
(        1000 variables, 1000 clauses - CNFSATSolver.1000variables1000clauses.NonUniformChoice.) s
5 98 M
(log.11March2018) s
5 87 M
(        1100 variables, 1200 clauses - CNFSATSolver.1100variables1200clauses.NonUniformChoice.) s
5 76 M
(log.11March2018) s
5 65 M
(        1200 variables, 1100 clauses - CNFSATSolver.1200variables1100clauses.NonUniformChoice.) s
5 54 M
(log.11March2018) s
5 43 M
(From logs it is evident non-uniform choice function defined as previously approximately simula) s
5 32 M
(tes the bias and almost matches theoretical 1/sqrt\(m*n\) random matrix expected per literal pro) s
5 21 M
(bability. LSMR algorithm has been chosen and MAXSAT approximation ratio is 91-93% for 100 iter) s
5 10 M
(ations for each of the 3 variable-clause combinations. For equal variable-clause combinations,) s
_R
S
%%Page: (343) 343
%%BeginPageSetup
_S
18 36 translate
/pagenum 343 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (343) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( non-uniform choice function is equivalent to choice\(\) and expected and observed probabilities) s
5 681 M
( per literal agree fully. Previous benchmarks have been done to verify the random matrix theor) s
5 670 M
(y for Satisfiability problem which is a probabilistic average case P?=NP problem mentioned in ) s
5 659 M
(hardness amplification conflicts previously. There is also a special case conflict with PARITY) s
5 648 M
(SAT Hastad-Linial-Mansour-Nisan Theorem circuit size counterexample mentioned in 53.15. Also u) s
5 637 M
(nequal variable-clause SATs can be simulated by equal variable-clause SATs by setting redundan) s
5 626 M
(t variables to 0 in disjunction of the literals in clauses or redundant clauses in conjunction) s
5 615 M
( to 1. Thus non-uniform choice may not be necessary.) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-------------------------------------------) s
5 571 M
(522. \(THEORY and FEATURE-DONE\) SAT Solver Update - Non-Uniform Choice - 3200 variables and 310) s
5 560 M
(0 clauses and Alpha=4.26 - related to 521 ) s
5 549 M
(- 12 March 2018) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(-------------------------------------------) s
5 516 M
(SAT Solver has been updated for some aesthetics - literal selection in non-uniform choice has ) s
5 505 M
(been parametrized: sequential or simultaneous) s
5 494 M
( based on how three random literals are chosen per random 3SAT clause - sequentially as 3*nP1 ) s
5 483 M
(or simultaneously as nP3. But no difference was) s
5 472 M
(observed between these two choices. Number of variables is set to 3200 and clauses to 3100. LS) s
5 461 M
(MR iteration has been increased to 5 and conlim) s
5 450 M
(reduced to 10. For few random 3SATs, observed MAXSAT approximation ratio average stands at ~95) s
5 439 M
(%. This accuracy has been observed to increase proportional to number of LSMR iterations. Comm) s
5 428 M
(ercial SAT solvers solve million variable-clause combinations in few seconds but in exponentia) s
5 417 M
(l time. Two other logs have been committed which solve the notorious Alpha=4.26 Clause/Variabl) s
5 406 M
(e ratio, which is known to be hardest subset of SAT and) s
5 395 M
(where a phase transition occurs from easy-to-hard. Number of unsatisfiable formulae increase f) s
5 384 M
(or alpha > 4.26. MAXSAT approximation ratio observed for few random 3SAT instances is ~91% for) s
5 373 M
( number of variables 300 and 1000 and alpha=4.26. Observed per literal probability is skewed a) s
5 362 M
(nd substituting it in random matrix MAXSAT approximation ratio m^2*n^2*p^4 shows an anomaly. A) s
5 351 M
(nother fact observed: per literal probability does not change at all for any number of iterati) s
5 340 M
(ons and stays put and because of this observed MAXSAT ratio converges within few iterations it) s
5 329 M
(self.) s
5 307 M
(References:) s
5 296 M
(-----------) s
5 285 M
(522.1 SAT Solvers and Phase Transition at Alpha=4.26 [Clause/Variable Ratio] - [Carla P. Gomes) s
5 274 M
(, Henry Kautz, Ashish Sabharwal, and Bart Selman] - https://www.cs.cornell.edu/gomes/pdf/2008_) s
5 263 M
(gomes_knowledge_satisfiability.pdf) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(---------------------------------------------) s
5 219 M
(523. \(THEORY and FEATURE-DONE\) SAT Solver Update - Non-uniform Choice 2 - 5000 variables and A) s
5 208 M
(lpha=4.267 and some intuition - related to 522 ) s
5 197 M
(- 15 March 2018) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(---------------------------------------------) s
5 164 M
(SAT Solver has been updated for a new nonuniform choice function nonuniform_choice2\(\) which ha) s
5 153 M
(s following algorithm:) s
5 142 M
(        - Each permutation nPn of length n is elongated to n*n*alpha length array by replicati) s
5 131 M
(ng a non-variable X of large index \(n*n\)) s
5 120 M
(        - Literals are chosen from this new array as \(n*n*alpha\)P1 or \(n*n*alpha\)P3 in a while) s
5 109 M
( loop till a valid literal which is not equal to n*n is found ) s
5 98 M
(        - This creates a probability of fraction n/\(n*n*alpha\)=1/\(n*alpha\) for per literal cho) s
5 87 M
(ice.) s
5 76 M
(But this implementation was found to be no different from nonuniform_choice\(\) which chooses a ) s
5 65 M
(submatrix in per literal probability and therefore has been commented at present. MAXSAT appro) s
5 54 M
(ximation ratio observed was 88% for nonuniform_choice2\(\) versus 90% for nonuniform_choice\(\). 5) s
5 43 M
(000 variables and Alpha=4.267 have been solved for few iterations and MAXSAT approximation rat) s
5 32 M
(ion is 90-91%. In all the benchmarks done so far, it has been observed that equal variables-cl) s
5 21 M
(ause combinations almost always converge to ~95% MAXSAT approximation ratio and  Alpha=4.267 a) s
5 10 M
(lmost always converge to ~90-91%. Though these numbers are not conclusive and comprehensive, p) s
_R
S
%%Page: (344) 344
%%BeginPageSetup
_S
18 36 translate
/pagenum 344 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (344) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(revious emerging pattern is too striking. ) s
5 670 M
(Here the intuition on how LSMR/LSQR works has to be mooted - Each binary assignment string can) s
5 659 M
( be thought of as a step function plotted as binary value versus variables. For example, assig) s
5 648 M
(nment 001101 is plotted as:) s
5 637 M
(                        ----  -) s
5 626 M
(                        |  | |) s
5 615 M
(                      ---  ---) s
5 604 M
(where troughs represent 0s and peaks 1s. LSMR/LSQR finds a set of real valued points on a sinu) s
5 593 M
(soidal polynomial which approximates this step function by minimizing sum of distances/errors ) s
5 582 M
(between troughs-peaks of polynomial and those of step function. By rounding the peaks and trou) s
5 571 M
(ghs of this LSMR polynomial to 1s and 0s thus converts the sinusoid to a step function. Minimi) s
5 560 M
(zing the sum of squares distance error implies, this polynomial is almost unique\(though there ) s
5 549 M
(can be multiple satisfying assignments\) and is able to extract atleast one satisfying assignme) s
5 538 M
(nt.) s
5 516 M
(Probability of an LSMR/LSQR real-to-binary round off assignment failing to satisfy a random 3S) s
5 505 M
(AT:) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(---) s
5 472 M
(For each binary variable xi, LSMR/LSQR creates a real value which is rounded off as:) s
5 461 M
(        xi   -    0  if  xi < 0.5) s
5 450 M
(        xi   -    1  if  xi > 0.5) s
5 439 M
(This round off can fail if:) s
5 428 M
(        xi   -    1  if  xi < 0.5) s
5 417 M
(        xi   -    0  if  xi > 0.5) s
5 395 M
(Lovasz Local Lemma Analyses described earlier further explain the clause-variable dependency g) s
5 384 M
(raph\(Factor graph\) scenarios but only lowerbound the MAXSAT approximation ratio for various va) s
5 373 M
(lues of dependency. But Random Matrix Least Squares Error Partial Derivative Analysis forbids ) s
5 362 M
(values of assignments which cause such large deviations of real solutions from 0s and 1s to ma) s
5 351 M
(ximum possible extent,by providing a mechanism on how to choose a literal - 1/sqrt\(m*n\) probab) s
5 340 M
(ility - reverse-engineered a posteriori probability. In other words, real solutions are almost) s
5 329 M
( in proximity to 0 or 1 - sinusoid approximates step-function near-perfectly. Any other probab) s
5 318 M
(ility distribution of per literal choice is theoretically inferior.) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(----------------------------------------------) s
5 274 M
(524. \(THEORY and FEATURE-DONE\) SAT Solver Update - Variables and Alpha as parameters and two A) s
5 263 M
(lpha Versus MAXSAT ratio graph plots -) s
5 252 M
(related to 523 - 16 March 2018) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(----------------------------------------------) s
5 219 M
(SAT Solver has been updated to accept commandline parameters of number of variables and Alpha ) s
5 208 M
(\(Clause/Variable ratio\) as:) s
5 197 M
(                $python CNFSATSolver.py <number_of_variables> <alpha>) s
5 186 M
(Some debug prints have been changed. Following sets of SATs were solved and variation of MAXSA) s
5 175 M
(T approximation ratio versus Alpha has been) s
5 164 M
(captured as graph \(for nonuniform_choice\(\)\):) s
5 153 M
(-----------------------------------------------------------) s
5 142 M
(Number of Variables - 600 \(after atleast 15 random 3SAT iterations\)) s
5 131 M
(-----------------------------------------------------------) s
5 120 M
(Alpha                           Observed MAXSAT Approximation Ratio) s
5 109 M
(-------                         -----------------------------------) s
5 98 M
(1                               94.5%) s
5 87 M
(2                               92.7%) s
5 76 M
(3                               91.5%) s
5 65 M
(4                               90.74%) s
5 54 M
(4.267                           90.45%) s
5 43 M
(5                               90.28%) s
5 32 M
(6                               90.25%) s
5 21 M
(-----------------------------------------------------------) s
5 10 M
(Number of Variables - 300 \(after atleast 15 random 3SAT iterations\)) s
_R
S
%%Page: (345) 345
%%BeginPageSetup
_S
18 36 translate
/pagenum 345 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (345) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-----------------------------------------------------------) s
5 681 M
(Alpha                           Observed MAXSAT Approximation Ratio) s
5 670 M
(------                          -----------------------------------) s
5 659 M
(1                               95%) s
5 648 M
(2                               93%) s
5 637 M
(3                               92%) s
5 626 M
(4                               90.6%) s
5 615 M
(4.267                           90.6%) s
5 604 M
(5                               90.49%) s
5 593 M
(6                               90.73%) s
5 571 M
(Logs for an iteration of 5000 variables and Alpha=4.267 has been committed to python-src/testl) s
5 560 M
(ogs/CNFSATSolver.5000variablesAlpha4.267.log.16March2017 which also has MAXSAT approximation r) s
5 549 M
(atio of 90-91%. Gradual nosedive of MAXSAT approximation ratio as Alpha increases is notable a) s
5 538 M
(nd it stabilizes to 90-91% after Alpha >= 4 for both 300 and 600 variables implying phase tran) s
5 527 M
(sition.) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(--) s
5 494 M
(SAT Solver has been updated for a new nonuniform_choice3\(\) function based on an Epsilon Bias T) s
5 483 M
(est Snippet EpsilonBiasNonUniformChoice.py which has been added to repository. This is similar) s
5 472 M
( to nonuniform_choice2\(\) but Probabilities of nonuniformly chosen literals are computed separa) s
5 461 M
(tely and updated within the while loops also. Algorithm is similar to nonuniform_choice2\(\) whi) s
5 450 M
(ch elongates a permutation by replicating a skew variable. Average probabilities of all variab) s
5 439 M
(les other than skew variable almost match the random matrix 1/sqrt\(m*n\) probability. Logs whic) s
5 428 M
(h print these probabilities for 1000 variables and Alpha=1/Alpha=4.267 have been committed to ) s
5 417 M
(testlogs/CNFSATSolver.1000variablesAlpha1.log.16March2018 and testlogs/CNFSATSolver.1000variab) s
5 406 M
(lesAlpha4.267.log.16March2018.) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(-------------------------------------------) s
5 362 M
(525. \(FEATURE-DONE\) SAT Solver Update - nonuniform_choice3\(\) updated for constant multiple in ) s
5 351 M
(expansion of the variables array) s
5 340 M
(- 19 March 2018 - related to 524) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-------------------------------------------) s
5 307 M
(1. CNFSATSolver.py nonuniform_choice3\(\) has been changed to expand the variables array by foll) s
5 296 M
(owing relation:) s
5 285 M
(        n + x = n*sqrt\(alpha\)) s
5 274 M
(        x = n*\(sqrt\(alpha\)-1\)) s
5 263 M
(        => array of n variables is expanded to array of size n*\(sqrt\(alpha\)-damp\) for alpha = ) s
5 252 M
(number_of_clauses/number_of_variables) s
5 241 M
(2. damp variable has been hardcoded to 2 than 1 which approximates theoretical 1/sqrt\(m*n\) pro) s
5 230 M
(bability well because of round-off.) s
5 219 M
(3. This expansion creates an approximate nonuniform probability 1/n*sqrt\(alpha\) per literal ex) s
5 208 M
(cluding replicated skew variable which is) s
5 197 M
(filtered in the while loops) s
5 186 M
(4. Example SAT Solver logs for 1000 variables and Alpha=4.267 has been committed to python-src) s
5 175 M
(/testlogs/CNFSATSolver.1000variablesAlpha4.267.log.19March2018) s
5 164 M
(5. MAXSAT Approximation ratio again is 90-91% for 20+ random 3SATs and nonuniform per literal ) s
5 153 M
(probability almost matches 1/sqrt\(m*n\)) s
5 142 M
(\(till penultimate decimal\)) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(---------------------------------------------) s
5 98 M
(526. \(THEORY\) Counterexample in Majority Voting, Timeline Evolution of Belief Propagation, Int) s
5 87 M
(rinsic Merit - related to 507 - 20 March 2018) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(---------------------------------------------) s
5 54 M
(Previous sections described a counterexample in Majority Voting for a question:) s
5 43 M
(        "Did an artefact exist millenia ago?") s
5 32 M
(There are two possible answers: Yes and No which depend on intrinsically determining truth of ) s
5 21 M
(answer to this question. Both possible answers are belief propagated as trees which evolve ove) s
5 10 M
(r time following a gossip protocol. Root of either of the trees propagates its belief to its c) s
_R
S
%%Page: (346) 346
%%BeginPageSetup
_S
18 36 translate
/pagenum 346 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (346) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(hildren and so on recursively for all other internal nodes. Each edge in either of the trees h) s
5 681 M
(as a belief potential for "Yes" and "No". Parent node propagates its belief to the children pr) s
5 670 M
(oportional to this potential. If potential is below a threshold, belief propagation stops and ) s
5 659 M
(trees are pruned.  Thus there are two trees which correspond to two sets of people who believe) s
5 648 M
( "Yes" and "No" by potentials percolated from Roots. Only the root node has most authentic dir) s
5 637 M
(ect intrinsic evidence to either Yes or No truth value to the question. Question is: How can i) s
5 626 M
(ntrinsic absolute truth of answer be determined? Does size of the trees imply truth i.e Can Ma) s
5 615 M
(jority Voting determine intrinsic truth value at the root? This problem becomes all the more n) s
5 604 M
(on-trivial when a chronologically ancient portion of tree \(e.g Root is extinct\) is not availab) s
5 593 M
(le and only nodes closer to leaves remain. Value of belief potential is a function of intrinsi) s
5 582 M
(c truth viewed by the roots of either tree.) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(----------------------------------------------) s
5 538 M
(527. \(THEORY and FEATURE-DONE\) Hardy-Ramanujan Approximate Ray Shooting Queries for Factors - ) s
5 527 M
(Optimization in Computational Geometric) s
5 516 M
(Factorization - 21 March 2018 - related to 486) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(----------------------------------------------) s
5 483 M
(1. Ray Shooting Queries based on Hardy-Ramanujan Theorem for Normal Order of number of factors) s
5 472 M
( of an integer has been implemented as a) s
5 461 M
(new function.) s
5 450 M
(2. Each approximate factor is queried by a ray from origin of slope tan\(m*pi/\(2*k*loglogN\)\) in) s
5 439 M
(tersecting hyperbolic arc bow and approximate factors are:) s
5 428 M
(                sqrt\(N/[tan\(m*pi/\(2*k*loglogN\)\)]\)-1 for m=1,2,3,...,kloglogN) s
5 417 M
(3. Two integers have been factorized using local tile search and comparison between approximat) s
5 406 M
(e factors and actual factors have been logged in:) s
5 395 M
(        python-src/testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.Har) s
5 384 M
(dyRamanujanRayShootingQueries.log.21March2018) s
5 373 M
(        python-src/testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.Har) s
5 362 M
(dyRamanujanRayShootingQueries2.log.21March2018) s
5 351 M
(4. Approximate Ray Shooting could be useful for integers having large value of factor multipli) s
5 340 M
(city BigOmega \(sum of prime factor powers\)) s
5 329 M
(5. Constant k has been hardcoded presently and has to be heuristically found.) s
5 318 M
(6. Approximate Factors are helpful for sieving huge integers and binary search can be localize) s
5 307 M
(d based on these approximate factors as beacons.It is not necessary to search the entire pixel) s
5 296 M
(ated hyperbolic arc.) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(------------------------------------------------) s
5 252 M
(528. \(FEATURE-DONE\) Unsorted Search Update - Streaming Abstract Generator File Datasource Supp) s
5 241 M
(ort, Prefix-Suffix substrings hashtables ) s
5 230 M
(- 23 March 2018) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(------------------------------------------------) s
5 197 M
(1. Hardcoded File name in Streaming Abstract Generator has been replaced by a file name variab) s
5 186 M
(le and file contents are tokenized and) s
5 175 M
(stripped of leading and trailing whitespaces and yielded.) s
5 164 M
(2. Padding of '#' in Unsorted Search has been replaced by '0'. Revised Unsorted Search Algorit) s
5 153 M
(hm in https://github.com/shrinivaasanka/Grafit/blob/master/course_material/ComputerScienceMisc) s
5 142 M
(ellaneous/ComputerScienceMiscellaneous_CourseNotes.txt has been implemented by creating hash t) s
5 131 M
(ables for all integer-string prefixes and suffixes \(though not for all substrings\) than just f) s
5 120 M
(or single digits.) s
5 109 M
(3.New function to print contents of all hashtables has been added.) s
5 98 M
(4.Function create_prefix_suffix_hashtables\(\) initializes prefix and suffix hashtables for stri) s
5 87 M
(ngs from Streaming Abstract Generator ) s
5 76 M
(5.search_number\(\) function has been rewritten to search for all prefixes and suffixes hashtabl) s
5 65 M
(es and match True/False is written) s
5 54 M
(6.New input file First100Primes.txt has been created. ) s
5 43 M
(7.Primes and Non-Primes are lookedup and logs has been committed to testlogs/UnsortedSearch.lo) s
5 32 M
(g.23March2018) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (347) 347
%%BeginPageSetup
_S
18 36 translate
/pagenum 347 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (347) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-----------------------------------------------) s
5 681 M
(529. \(THEORY\) Consensus, Pareto Optimality, Intrinsic-Perceived Value/Merit Equilibrium, Fair ) s
5 670 M
(Division, Nultiple Agent Resource Allocation\(MARA\),MAXSAT ranking of texts - related to 432,44) s
5 659 M
(0,513,526 and all Intrinsic Fitness/Merit sections - 26 March 2018,27 March 2018) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(-----------------------------------------------) s
5 626 M
(Intrinsic Fitness/Merit and Perceived Merit Equilibrium has been described earlier as an appro) s
5 615 M
(ximate consensus measure for agreeing on value or) s
5 604 M
(merit of an entity. Consensus problem for absolute intrinsic merit arises in the following con) s
5 593 M
(text of Fair Division where set of resources have) s
5 582 M
(to be allocated amongst multiple agents fairly \(also known as MARA-Multi Agent Resource Alloca) s
5 571 M
(tion\). Fairness in allocation is usually expressed by Pareto Optimality which is defined as:) s
5 560 M
(For a utility function u:\(Good,Agent\)->Happiness, set of agents \(x1,x2,x3,...,xn\) and goods/se) s
5 549 M
(rvices/resources \(r1,r2,r3,...,rm\) allocated by u  with a Happiness Vector V=\(a1,a2,a3,...,an\)) s
5 538 M
( , there is no other alternative allocation Happiness Vector V'=\(a1',a2',a3',...,an'\) for whic) s
5 527 M
(h u\(ai'\) >= u\(ai\) for all i=1,2,3,...,n and there exists an agent i such that u\(ai'\) > u\(ai\).) s
5 516 M
(Most obvious application of Pareto Optimality is Pricing or Determining Value of Goods. Alloca) s
5 505 M
(tion is Envy-Free if no agent feels its own resource allocation as inferior to others. Equatin) s
5 494 M
(g Intrinsic Value and Intrinsic Merit reduces the Multi Agent Resource Allocation or Fair Divi) s
5 483 M
(sion problem to Fair Judgement of Intrinsic Merit. Preferences or Desires of an agent are spec) s
5 472 M
(ified by Logic clauses - Ceteris Paribus - all others being equal agent prefers \(P1 /\\ !P2\) to) s
5 461 M
( \(!P1 /\\ P2\). Translating the Intrinsic Value MARA problems to Intrinsic Merit MARA problem is) s
5 450 M
( non-trivial. For example, if the agents are web URLs and merit has to be fairly apportioned t) s
5 439 M
(o the Web URLs \(Ranking\), to ensure no URL feels envious requires defining per URL preferences) s
5 428 M
(. This is precisely where MAXSAT representation of per text/URL preferences finds its utility ) s
5 417 M
(- number of clauses satisfied per text/URL determines its merit i.e text/URL prefers some clau) s
5 406 M
(ses over others or it has certain special qualities not in others. Pareto Optimality is NP-Com) s
5 395 M
(plete by reduction from Set Packing problem\(Problem of finding disjoint subsets from a collect) s
5 384 M
(ion of subsets\).) s
5 362 M
(Traditional Ranking methodology followed is to compute ranking scores per website URL independ) s
5 351 M
(ent of other URLs i.e envy is not accounted for which vitiates fairness. By MARA based ranking) s
5 340 M
(, Ranking Fairness is strengthened and Total Cumulative Intrinsic Merit = 1.0, is viewed as Pi) s
5 329 M
(e/Cake cutting problem and websites are allocated pareto-optimal fractional merit by an envy-f) s
5 318 M
(ree protocol. Thus Sum\(rank\(url\)\)=1.) s
5 296 M
(An example envy-free cake cutting algorithm is a hash function which distributes the values ne) s
5 285 M
(arly equally onto the per-key buckets of the hash table - all buckets have equal number of val) s
5 274 M
(ues or resources are equidistributed. Varying the hash functions changes the per-key bucket nu) s
5 263 M
(mber of values. Each key is an agent requiring certain number of values in its bucket and Choo) s
5 252 M
(sing a hash function which satisfies this constraint is a MARA protocol.) s
5 230 M
(There exists a bijection between a discrete probability distribution and per-bucket sizes of h) s
5 219 M
(ashtables \(or\) parts in a set partition. If each discrete random variable xi has probability p) s
5 208 M
(\(xi\), sum\(p\(xi\)\) = 1. Similarly, if each bucket xi of a hash table \(part in a set partition/ex) s
5 197 M
(act cover\) has size b\(xi\), sum\(b\(xi\)\) = N \(total number of values\). Choosing an apt probabilit) s
5 186 M
(y distribution does fair allocation e.g If fair allocation constraint is a gaussian, mapping d) s
5 175 M
(iscrete points in normal probability distribution \(p\(xi\)\) to size of hash table buckets fairly) s
5 164 M
( allocates. Expressing the fair allocation constraints as 3SAT and solving it by Random Matrix) s
5 153 M
( LSMR/LSQR Approximate SAT Solver yields real solutions to the constraint variables if roundin) s
5 142 M
(g is overlooked. As described earlier, this random matrix SAT solver approximates the assignme) s
5 131 M
(nt step function by a polynomial traversing these real assignment points. Riemann Sum Discrete) s
5 120 M
( Integral of points on this polynomial should be theoretically equal or close to parity of the) s
5 109 M
( binary assignment extracted by LSMR/LSQR.) s
5 87 M
(References:) s
5 76 M
(-----------) s
5 65 M
(529.1 MARA Survey - https://staff.science.uva.nl/u.endriss/MARA/mara-survey.pdf ) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(---------------------------------------------) s
5 21 M
(530. \(THEORY and FEATURE-DONE\)  Recursive Lambda Function Growth - Graph Tensor Neuron Network) s
5 10 M
( Intrinsic Merit for Random Walks ) s
_R
S
%%Page: (348) 348
%%BeginPageSetup
_S
18 36 translate
/pagenum 348 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (348) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- Analysis for different text - 26 March 2018) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(---------------------------------------------) s
5 659 M
(1. Text input for Recursive Lambda Function Growth has been updated) s
5 648 M
(2. Graph Tensor Neuron Network Intrinsic Merit for Lambda Function Composition of Random Walks) s
5 637 M
( of Definition Graph have been captured in) s
5 626 M
(log testlogs/RecursiveLambdaFunctionGrowth.log.GraphTensorNeuronNetwork.26March2018) s
5 615 M
(3. Maximum Graph Tensor Neuron Network Intrinsic Merit occurs for Random Walk Composition:) s
5 604 M
(grow_lambda_function3\(\): Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Merit :) s
5 593 M
(\(u'\(housing\(protective,\(certain\(zone,\(something\(target,\(part\(include,\(urban\(area,\(Chennai\(city) s
5 582 M
(,formerly\)\)\)\)\)\)\)\)\)\)\)\)', 6.023684210526316\)) s
5 571 M
(4.Top percentile Unsupervised Classes of this text by Dense Subgraph Discovery \(Core Numbers\) ) s
5 560 M
(are:) s
5 549 M
(==============================================================================================) s
5 538 M
(===============) s
5 527 M
(Unsupervised Classification based on top percentile Core numbers of the definition graph\(subgr) s
5 516 M
(aph of WordNet\)) s
5 505 M
(==============================================================================================) s
5 494 M
(===============) s
5 483 M
(This document belongs to class: arsenic ,core number= 16) s
5 472 M
(This document belongs to class: Greenwich_Village ,core number= 14) s
5 461 M
(This document belongs to class: state_of_matter ,core number= 14) s
5 450 M
(This document belongs to class: order ,core number= 14) s
5 439 M
(This document belongs to class: include ,core number= 10) s
5 428 M
(This document belongs to class: part ,core number= 10) s
5 417 M
(This document belongs to class: exploitation ,core number= 9) s
5 406 M
(This document belongs to class: area ,core number= 9) s
5 395 M
(This document belongs to class: three ,core number= 9) s
5 384 M
(This document belongs to class: collector ,core number= 8) s
5 373 M
(This document belongs to class: housing ,core number= 8) s
5 362 M
(This document belongs to class: January ,core number= 8) s
5 351 M
(This document belongs to class: trey ,core number= 8) s
5 340 M
(This document belongs to class: Chennai ,core number= 7) s
5 329 M
(This document belongs to class: urban ,core number= 7) s
5 318 M
(This document belongs to class: planning ,core number= 6) s
5 307 M
(This document belongs to class: zone ,core number= 6) s
5 296 M
(This document belongs to class: free-base ,core number= 6) s
5 285 M
(This document belongs to class: travel ,core number= 6) s
5 274 M
(This document belongs to class: one ,core number= 6) s
5 263 M
(This document belongs to class: target ,core number= 6) s
5 252 M
(This document belongs to class: something ,core number= 6) s
5 241 M
(This document belongs to class: republic ,core number= 6) s
5 230 M
(This document belongs to class: government ,core number= 5) s
5 219 M
(This document belongs to class: legal_power ,core number= 5) s
5 208 M
(----------------------------------------------------------------------) s
5 197 M
(which reasonably coincide with the vertices of the maximum intrinsic merit random walk and cap) s
5 186 M
(ture the Legal/Gubernatorial/Urban planning nature) s
5 175 M
(of the text though there are WordNet anomalies printing 'arsenic' etc., as classes. These anom) s
5 164 M
(alies are caused because usually Urban planning is related to exploitation and Solid Waste Man) s
5 153 M
(agement which in turn are connected to Toxic substances and Pollutants. WordNet contains all t) s
5 142 M
(hese relations.  Some other Net like ConceptNet5 might probably do better which are word2vec b) s
5 131 M
(ased.) s
5 109 M
(Essence:) s
5 98 M
(--------) s
5 87 M
(Meaning of a text is approximated as:) s
5 76 M
(        - Create a Definition Graph Representation of Text from some Ontology) s
5 65 M
(        - Do random walks/Hamiltonian on the graph to simulate the human text comprehension) s
5 54 M
(        - Get classes of the text from Recursive Gloss Overlap Unsupervised Classifier) s
5 43 M
(        - Compute Lambda Composition Trees for all random walks in definition graph) s
5 32 M
(        - These random walk lambda composition trees are approximations of all possible meanin) s
5 21 M
(gs of the text) s
5 10 M
(        - Compute Graph Tensor Neuron Network Intrinsic Merit for all random walk lambda compo) s
_R
S
%%Page: (349) 349
%%BeginPageSetup
_S
18 36 translate
/pagenum 349 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (349) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sition trees) s
5 681 M
(        - Lambda Composition Tree of Maximum Graph Tensor Neuron Network Intrinsic Merit is th) s
5 670 M
(e most likely approximate meaning of the text) s
5 659 M
(        - This is obvious because this maximum merit tree has Neuron Tensor Network Relations ) s
5 648 M
(of maximum similarity/truth value and) s
5 637 M
(these similarities are composed and belief propagated) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(-------------------------------------------) s
5 593 M
(531. \(FEATURE-DONE\) Recursive Lambda Function Growth - Simple Cycles and Rich Club Coefficient) s
5 582 M
( - 27 March 2018) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(-------------------------------------------) s
5 549 M
(1.Recursive Lambda Function Growth implementation has been updated to loop through cycles in t) s
5 538 M
(he definition graph of text and to choose) s
5 527 M
(between Cycles and Random Walks by a boolean flag ClosedPaths.) s
5 516 M
(2.Closed Paths or Cycles simulate the meaning better and the tree lambda composition obtained ) s
5 505 M
(from cycle vertices has been experimentally) s
5 494 M
(found to approximate meaning more closely.) s
5 483 M
(3.Logs for this has been committed to testlogs/RecursiveLambdaFunctionGrowth.log.GraphTensorNe) s
5 472 M
(uronNetwork.27March2018) s
5 461 M
(4.Rich Club Coefficients of the Definition Graph has been printed for each degree as a measure) s
5 450 M
( of connectivity of high degree vertices\(rich club\):) s
5 439 M
(Rich Club Coefficient of the Recursive Gloss Overlap Definition Graph: {0: 0.00486559107248762) s
5 428 M
(4, 1: 0.016526610644257703, 2: 0.018738738738738738, 3: 0.02396259497369959, 4: 0.024154589371) s
5 417 M
(980676, 5: 0.023809523809523808, 6: 0.028985507246376812, 7: 0.032679738562091505, 8: 0.022222) s
5 406 M
(222222222223, 9: 0.0, 10: 0.0}) s
5 395 M
(5.Top core number classes from Unsupervised Recursive Gloss Overlap Classifier:) s
5 384 M
(==============================================================================================) s
5 373 M
(===============) s
5 362 M
(Unsupervised Classification based on top percentile Core numbers of the definition graph\(subgr) s
5 351 M
(aph of WordNet\)) s
5 340 M
(==============================================================================================) s
5 329 M
(===============) s
5 318 M
(This document belongs to class: incorporate ,core number= 4) s
5 307 M
(This document belongs to class: environment ,core number= 4) s
5 296 M
(This document belongs to class: regional ,core number= 4) s
5 285 M
(This document belongs to class: `in ,core number= 4) s
5 274 M
(This document belongs to class: component ,core number= 4) s
5 263 M
(This document belongs to class: exploitation ,core number= 4) s
5 252 M
(This document belongs to class: useful ,core number= 4) s
5 241 M
(This document belongs to class: relating ,core number= 4) s
5 230 M
(This document belongs to class: unit ,core number= 4) s
5 219 M
(This document belongs to class: particular ,core number= 4) s
5 208 M
(This document belongs to class: making ,core number= 4) s
5 197 M
(This document belongs to class: process ,core number= 4) s
5 186 M
(This document belongs to class: sphere ,core number= 4) s
5 175 M
(This document belongs to class: something ,core number= 4) s
5 164 M
(This document belongs to class: goal ,core number= 4) s
5 153 M
(This document belongs to class: farm ,core number= 4) s
5 142 M
(This document belongs to class: urbanization ,core number= 4) s
5 131 M
(This document belongs to class: strategic ,core number= 4) s
5 120 M
(This document belongs to class: ' ,core number= 4) s
5 109 M
(This document belongs to class: increase ,core number= 4) s
5 98 M
(This document belongs to class: comforts ,core number= 4) s
5 87 M
(This document belongs to class: city ,core number= 4) s
5 76 M
(This document belongs to class: district ,core number= 4) s
5 65 M
(This document belongs to class: farming ,core number= 4) s
5 54 M
(This document belongs to class: urban ,core number= 4) s
5 43 M
(This document belongs to class: way ,core number= 4) s
5 32 M
(This document belongs to class: plan ,core number= 4) s
5 21 M
(This document belongs to class: do ,core number= 4) s
5 10 M
(This document belongs to class: contain ,core number= 4) s
_R
S
%%Page: (350) 350
%%BeginPageSetup
_S
18 36 translate
/pagenum 350 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (350) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(This document belongs to class: see ,core number= 4) s
5 681 M
(This document belongs to class: state ,core number= 4) s
5 670 M
(This document belongs to class: region ,core number= 4) s
5 659 M
(This document belongs to class: proposal ,core number= 4) s
5 648 M
(This document belongs to class: life ,core number= 4) s
5 637 M
(This document belongs to class: decisiveness ,core number= 4) s
5 626 M
(This document belongs to class: lives ,core number= 4) s
5 615 M
(This document belongs to class: metropolitan ,core number= 4) s
5 604 M
(-------------------------------------------------------------------------------------------) s
5 593 M
(coincide reasonably well to the Maximum Merit Cycle as below and the meaning of the text can b) s
5 582 M
(e inferred from the composition tree of the word chain and the composed tensor potential is pr) s
5 571 M
(inted for this maximum merit cycle:) s
5 560 M
(-------------------------------------------------------------------------------------------) s
5 549 M
(Cycle : [u'particular', u'regional', u'region', u'something', u'see', u'make', u'plan', u'goal) s
5 538 M
(', u'state', u'city', u'urban', u'area', u'exploitation', u'land', u'farm', u'unit', u'assembl) s
5 527 M
(y', u'parts', u'environment', u'sphere']) s
5 516 M
(Cycle Composition Tree for this cycle : \(u'particular\(\(region\(regional,\(see\(something,\(plan\(ma) s
5 505 M
(ke,\(state\(goal,\(urban\(city,\(exploitation\(area,\(farm\(land,\(assembly\(unit,\(environment\(parts,sph) s
5 494 M
(ere\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)', 7.250082923612336\)) s
5 483 M
(maximum_per_random_walk_graph_tensor_neuron_network_intrinsic_merit= \(u'\(regional\(particular,\() s
5 472 M
(`in\(region,\(pronounce\(way,\(see\(certain,\(add\(make,\(important\(increase,\(plan\(strategic,\(state\(go) s
5 461 M
(al,\(urban\(city,\(administrative\(relating,\(unit\(agency,\(land\(farm,\(useful\(exploitation,\(proper\(n) s
5 450 M
(ecessitate,\(metropolitan\(person,\(environment\(lives,sphere\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)', 14) s
5 439 M
(.322488296017706\)) s
5 428 M
(===================================================================) s
5 417 M
(grow_lambda_function3\(\): Graph Tensor Neuron Network Intrinsic Merit for this text: 3804.34147) s
5 406 M
(246) s
5 395 M
(6.NetworkX library has been upgraded to recently released version 2.1) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(-------------------------------------------------) s
5 351 M
(532. \(THEORY-FEATURE-DONE\) Least Squares SAT Solver Benchmarks - 1000 variables - Non-uniform ) s
5 340 M
(choice 3 - different values of Alpha - 29 March 2018 - related to 524) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-------------------------------------------------) s
5 307 M
(1. SAT Solver \(LSMR\) has been benchmarked for 1000 variables and for varying values of Alpha a) s
5 296 M
(s below. MAXSAT approximation ratio after) s
5 285 M
(atleast 20 iterations of random 3SAT for nonuniform_choice3\(\) are:) s
5 274 M
(Alpha = 1 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses per C) s
5 263 M
(NF satisfied so far: 94.3032258065) s
5 252 M
(Alpha = 2 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses per C) s
5 241 M
(NF satisfied so far: 92.2115384615) s
5 230 M
(Alpha = 3 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses per C) s
5 219 M
(NF satisfied so far: 91.1458333333) s
5 208 M
(Alpha = 4.267 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses p) s
5 197 M
(er CNF satisfied so far: 90.196679346) s
5 186 M
(Alpha = 5 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses per C) s
5 175 M
(NF satisfied so far: 89.7233333333) s
5 164 M
(Alpha = 6 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses per C) s
5 153 M
(NF satisfied so far: 89.8702898551) s
5 142 M
(Alpha = 7 - Observed - MAXSAT-APPROXIMATION Ratio - Moving Average Percentage of Clauses per C) s
5 131 M
(NF satisfied so far: 89.8266233766) s
5 109 M
(2.As usual for equal variable-clauses MAXSAT ratio is the maximum at 94-95% and decreases for ) s
5 98 M
(increasing alpha. For Alpha=4.267, MAXSAT ratio is 90-91% similar to previous benchmarks\(which) s
5 87 M
( were done on nonuniform_choice\(\)\).) s
5 65 M
(3.Log excerpts have been captured in testlogs/CNFSATSolver.1000variablesDifferentAlphasBenchma) s
5 54 M
(rks.29March2018) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(------------------) s
5 10 M
(533. \(THEORY\) Packing/Filling/Tiling problems, Complement Functions/Diophantine Equations, Ram) s
_R
S
%%Page: (351) 351
%%BeginPageSetup
_S
18 36 translate
/pagenum 351 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (351) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(sey Coloring, ) s
5 681 M
(Exact Cover, Matiyasevich-Robinson-Davis-Putnam Theorem  - related to 461,462,490 - 19 April 2) s
5 670 M
(018) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(------------------) s
5 637 M
(As mentioned in previous sections, complement functions are subsets of set of Diophantine Equa) s
5 626 M
(tions defining) s
5 615 M
(each diophantine set in an exact cover - this generalizes definition of complement functions t) s
5 604 M
(o exact cover of size greater than 2. Exact Cover is a special scenario of Bin Packing/Space F) s
5 593 M
(illing/Tiling plane \(e.g Pentominoes tiling of a Chess board, N-Queens Problem etc.,\). Complem) s
5 582 M
(ent Diophantine Equations for sets in an exact cover uniquely determine each element in tiling) s
5 571 M
( and thus create a bijective map between Diophantines and Tiles\(i.e sets in exact cover\).) s
5 549 M
(Reference:) s
5 538 M
(----------) s
5 527 M
(533.1 Pentominoes Tiling Exact Cover for Chess board - https://en.wikipedia.org/wiki/Exact_cov) s
5 516 M
(er - Each pentomino tile can be defined by a Diophantine Equation because Exact Cover is NP-co) s
5 505 M
(mplete recursive set, from MRDP theorem. These diophantine equations for tiles are complement ) s
5 494 M
(functions of the exact cover.) s
5 483 M
(533.2 Euclidean Ramsey Theory - http://www.math.ucsd.edu/~ronspubs/pre_Euclidean.pdf - [RL Gra) s
5 472 M
(ham] - Euclidean Ramsey Theory pertains to the coloring/partitioning of euclidean plane E into) s
5 461 M
( tiles Ci i.e E = U Ci and there exists set of subsets E' of E such that for every x in E', x ) s
5 450 M
(is exactly contained in one Ci.) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(-----------------) s
5 406 M
(534. \(THEORY and FEATURE-DONE\) Complement Diophantine and Factorization - Pell Equation Solver) s
5 395 M
( Update - ) s
5 384 M
(20 April 2018) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(-----------------) s
5 351 M
(1. Complement Function Implementation has been updated to invoke sympy Pell Equation solver fo) s
5 340 M
(r some N and D) s
5 329 M
(in x^2 - D*y^2 = N) s
5 318 M
(2. Factorization reduces to integer solutions of Pell Equation but the converse is harder - fa) s
5 307 M
(ctors must be known) s
5 296 M
(a priori as pq = N from some factoring algorithm. Then following equations can be solved:) s
5 285 M
(        x + sqrt\(D\)*y = p) s
5 274 M
(        x - sqrt\(D\)*y = q) s
5 263 M
(for x and y.) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(-----------------) s
5 219 M
(535. \(THEORY and FEATURE-DONE\) Complement Diophantine and Factorization - Pell Equation Solver) s
5 208 M
( Update 2 -) s
5 197 M
(20 April 2018) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(-----------------) s
5 164 M
(1. Complement Function Implementation has been updated to invoke sympy Pell Equation solver fo) s
5 153 M
(r some N and D) s
5 142 M
(in x^2 - D*y^2 = N for D=1) s
5 131 M
(2. Following are the factors p,q of N:) s
5 120 M
(  x + y = p) s
5 109 M
(  x - y = q) s
5 98 M
(for Pell equation solutions x and y. This is exponential in number of bits of N and equivalent) s
5 87 M
( to most) s
5 76 M
(Number Field Sieve algorithms for Factorization in vogue. Computational Geometric Factorizatio) s
5 65 M
(n in NC) s
5 54 M
(implies x and y can be found in parallel polynomial time \(which is quite surprising given the ) s
5 43 M
(antiquity and) s
5 32 M
(notorious difficulty of this ~1500 year old problem\).) s
5 21 M
(3. Pell's Equation for Factoring and Prime polynomials \(e.g Matiyasevich, Jones-Sato-Wada-Wien) s
5 10 M
(s\) are thus) s
_R
S
%%Page: (352) 352
%%BeginPageSetup
_S
18 36 translate
/pagenum 352 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (352) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(complement diophantines representing the exact cover {Primes,Composites} of the Set of Natural) s
5 681 M
( Numbers ) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(----------------) s
5 637 M
(536. \(THEORY\) Complement Functions, Complement Graphs, Ramsey coloring, Intrinsic Merit of Tex) s
5 626 M
(t-Graph - ) s
5 615 M
(related to 2,338 - 21 April 2018, 25 April 2018) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(----------------) s
5 582 M
(Relations between the concept of complement functions and complement graphs have been describe) s
5 571 M
(d earlier in the) s
5 560 M
(context of Perfect Graph Theorem. This notion of complement graphs has direct application in g) s
5 549 M
(raph representation of texts \(text-graph\) and resulting Intrinsic Merit qualities of the text-) s
5 538 M
(graph. For example, complement graph dual of a text-graph has edges amongst word vertices abse) s
5 527 M
(nt in its primal. Also cliques in primal graph G become independent sets in complement dual gr) s
5 516 M
(aph G' and vice-versa. Complement graphs have spawned vast literature of theoretical results f) s
5 505 M
(oremost being Perfect Graph Theorem. Recursive Gloss Overlap and Recursive Lambda Function Gro) s
5 494 M
(wth algorithms map text to Graph of word vertices and composition of Lambda Functions - a lang) s
5 483 M
(uage between Context Free Grammar and Context Sensitive Grammar. Composition of lambda functio) s
5 472 M
(ns by random walks/cycles/girth in text graphs makes it a Church-Turing-equivalent model which) s
5 461 M
( is an overlap of two fields - Formal Languages Theory and Graph Theory. It is an open questio) s
5 450 M
(n as to what Complements of text-graph and their Chromatic number imply: Does a complement of ) s
5 439 M
(text-graph negate the meaning of text? As opposed to Coloring a linear sentence by Part-of-spe) s
5 428 M
(ech tagging, what does coloring of text-graph imply? E.g The sentence "It rained heavily today) s
5 417 M
(" is colored by PoS tags as Pronoun-Verb-Adjective-Object which is a Ramsey coloring of text c) s
5 406 M
(onstrued as a sequence of words. Alphabet coloring and arithmetic progressions of alphabet pos) s
5 395 M
(itions in text has been already described in 2.10,2.11 and 2.12. In text-graphs coloring is us) s
5 384 M
(ually edge coloring and not vertex coloring where each edge color corresponds to a relation \(I) s
5 373 M
(s-a, Has-a, Is-part-of etc.,\) between word vertices. All theorems related to Edge Coloring the) s
5 362 M
(refore apply to text graphs. Thus Complement Functions/Complement Graphs are useful in deep st) s
5 351 M
(ructure analysis of text graphs. If the text-graph is complete, Ramsey Theorem for edge k-colo) s
5 340 M
(ring applies \(relations are colors\), order emerges and there exists a c-homogeneous subgraph e) s
5 329 M
(dge-colored by same relation c.) s
5 307 M
(There is a known theorem which states that if a graph G is disconnected its complement G's is ) s
5 296 M
(connected and vice-versa. This can be proved by elementary arguments. If x-y is not an edge in) s
5 285 M
( G, x-y have an edge in G'. If x-y is an edge in G, x and y are in same component in G. If z i) s
5 274 M
(s a vertex in some other disconnected component of G, then there are no x-z and y-z vertices i) s
5 263 M
(n G but they exist in G' and there is x-z-y path in G' and G' is connected. In the context of ) s
5 252 M
(WordNet relations, variant of this theorem has been proved as condition for meaningfulness and) s
5 241 M
( Intrinsic Merit in Section 5.16 of https://tac.nist.gov/publications/2010/participant.papers/) s
5 230 M
(CMI_IIT.proceedings.pdf . This qualitatively answers the previous question on meaningfulness o) s
5 219 M
(f text-graph complement. If text-graph G is disconnected \(i.e less meaningful\) its complement ) s
5 208 M
(G' is connected \(i.e more meaningful\). Here two meanings of primal and its complement text gra) s
5 197 M
(ph need not negate each other. Meaning of complement could be totally different from primal an) s
5 186 M
(d may be in some other class.) s
5 164 M
(WordNet Synsets for words have noun,verb etc., suffixes \(.n,.v,...\) which is tantamount to ver) s
5 153 M
(tex coloring of the text-graph as nouns,verbs,adjectives etc.,. Set of vertices of same color ) s
5 142 M
(class constitute independent sets or partition the word vertices into monochromatic independen) s
5 131 M
(t sets. Perfect Graph Theorem applies if text-graph G and its complement G' are perfect \(i.e i) s
5 120 M
(f every induced subgraph of G or G' has its Chromatic Number equal to Maximal Clique Number\).) s
5 98 M
(References:) s
5 87 M
(----------) s
5 76 M
(536.1 Introduction to Graph Theory - [Douglas B.West] - Perfect Graph Theorem for complement g) s
5 65 M
(raphs, Ramsey Theorem for Graphs - Pages 226,380) s
5 54 M
(536.2 A New Measure of Word Semantic Similarity based on WordNet Hierarchy and DAG Theory - ht) s
5 43 M
(tps://pdfs.semanticscholar.org/d3a0/c2a70d3d39a5b41b4ef8c4890a481307259f.pdf) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(---------------) s
_R
S
%%Page: (353) 353
%%BeginPageSetup
_S
18 36 translate
/pagenum 353 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (353) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(537. \(FEATURE-DONE\) ConceptNet Client Upgrade to 5.6 - REST endpoints for Emoticons - 23 April) s
5 681 M
( 2018) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(---------------) s
5 648 M
(1. ConceptNet Client has been updated for new REST endpoints in ConceptNet 5.6) s
5 637 M
(2. Function for querying emotions has been added for new emoji endpoints in ConceptNet 5.6) s
5 626 M
(3. logs for this have been committed to testlogs/ConceptNet5Client.log.23April2018) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(---------------) s
5 582 M
(538. \(THEORY\) Shell Turing Machines, Word2Vec and Intrinsic Merit - 24 April 2018, 25 April 20) s
5 571 M
(18 - related to 42) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(---------------) s
5 538 M
(Shell Turing Machines described earlier are experimental enhancements to Turing Machine defini) s
5 527 M
(tion which) s
5 516 M
(introduces dimension as a parameter in addition to tapes, alphabets, head etc., Adding dimensi) s
5 505 M
(on to Turing) s
5 494 M
(Machines has immense applications and simulates lot of real world computations which span acro) s
5 483 M
(ss multiple) s
5 472 M
(dimensions. For example a Turing Machine defined in dimension d+1 has more computational power) s
5 461 M
( than a machine) s
5 450 M
(defined in dimension d i.e L\(T\(d\)\) is in L\(T\(d+1\)\). This is a dimensional hierarchy as opposed) s
5 439 M
( to Time and Space) s
5 428 M
(hierarchies of Turing Machines. This has striking applications in graph representation of text) s
5 417 M
(s. Each word) s
5 406 M
(vertex in a definition graph G1 can be represented as a vector in a space of dimension d. Word) s
5 395 M
(2Vec embeddings) s
5 384 M
(\(e.g ConceptNet\) already implement this by mapping each word to a vector in space of some dime) s
5 373 M
(nsion.) s
5 362 M
(Then another definition graph G2 of words defined on a vector space of dimension d+1 can elici) s
5 351 M
(t more meaning) s
5 340 M
(from text than G1. Recursive Lambda Composition Trees for G1 and G2 are two Turing-equivalent ) s
5 329 M
(computation models) s
5 318 M
( approximating the meaning - G2 approximates better than G1. Essentially a Turing Machine/Lamb) s
5 307 M
(da Function is ) s
5 296 M
(extracted from natural language text by growing Lambda Function by recursive composition. In o) s
5 285 M
(ther words intrinsic merit computed for G2 is more accurate than G1 for same text. Present alg) s
5 274 M
(orithms for Recursive Gloss Overlap and Recursive Lambda Function Growth do not affix dimensio) s
5 263 M
(n information for word vertices.) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(-----------------) s
5 219 M
(539. \(THEORY\) Recursive Lambda Function Growth for sentences - related to 385,412,530,536 - 26) s
5 208 M
( April 2018) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(-----------------) s
5 175 M
(Recursive Lambda Function Growth algorithm described so far depends on a text graph and walks/) s
5 164 M
(cycles in the text) s
5 153 M
(graph are deemed as sentences of word vertices connected by WordNet/ConceptNet/Ontology relati) s
5 142 M
(ons which are converted to lambda function composition tree. This section explains how to cons) s
5 131 M
(truct a lambda function composition from linear sentences with no text-graph representation.) s
5 109 M
(Approximate algorithm to create a lambda composition tree from sentence:) s
5 98 M
(-------------------------------------------------------------------------) s
5 87 M
(*\) PoS/NER tag the sentence into Nouns,Verbs,Adjectives,Adverbs,Pronouns etc.,) s
5 76 M
(*\) Make all words tagged as verbs into lambda functions and noun/object for the verb as respec) s
5 65 M
(tive arguments) s
5 54 M
(for the lambda function. This is a thumbrule because verbs in the sentences are the crux/actio) s
5 43 M
(ns on the nouns and objects.) s
5 32 M
(*\) Most natural languages are self-similar in the sense, the simple sentence template Noun-Pro) s
5 21 M
(noun-Adverb-Verb-Adjective-Object is recursively substituted to create large sentences. For ex) s
5 10 M
(ample Object in Noun-Verb-Object template can itself be another template of the form Noun-Verb) s
_R
S
%%Page: (354) 354
%%BeginPageSetup
_S
18 36 translate
/pagenum 354 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (354) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-Object.) s
5 681 M
(*\) Adjectives/Adverbs qualifying nouns/verbs/objects are created as wrapper lambda functions f) s
5 670 M
(or nouns/verbs/objects.) s
5 659 M
(*\) This algorithm for extracting Lambda functions/Turing Machines from Natural Language Texts ) s
5 648 M
(is the maximum theoretical limit attainable if Church-Turing Thesis is true. In other words, t) s
5 637 M
(his algorithm creates Turing machines recognizing Recursively Enumerable sets.) s
5 615 M
(Example sentence: "It rained heavily today") s
5 604 M
(The example sentence is PoS tagged as Pronoun-Verb-Adjective-Object. Verb "rained" is marked a) s
5 593 M
(s lambda function \(after normalizing to "rain" if preferred.\). Adjective "heavily" qualifying ) s
5 582 M
(Object "today" is the wrapper function "heavily\(today\)". "It" is a separate lambda function fo) s
5 571 M
(r pronoun. Verb function "rained" thus accepts "It" and "heavily\(today\)" as arguments creating) s
5 560 M
( the tree:) s
5 549 M
(        rained\(It, heavily\(today\)\)) s
5 538 M
(This algorithm is independent of natural language of the text. Lacuna in this composition from) s
5 527 M
( flat sentence is the deep structure - connections/paths between words - is not exploited whic) s
5 516 M
(h is remedied by the random walks/cycle traversal in text-graph and maximum merit composition ) s
5 505 M
(is chosen.) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(-----------------) s
5 461 M
(540. \(THEORY and FEATURE-DONE\) Recursive Lambda Function Growth - Update - WordNet Relations D) s
5 450 M
(eep Structure) s
5 439 M
(- 1 May 2018) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(-----------------) s
5 406 M
(1. Recursive Lambda Function Growth python implementation has been updated to define a new fun) s
5 395 M
(ction to expand the) s
5 384 M
(Random Walks and Simple Cycles in Recursive Gloss Overlap graph to include the deep structure ) s
5 373 M
(relations between the pairs of words.) s
5 362 M
(2. This invokes path_between\(\) function implemented in WordNetPath.py which is python alternat) s
5 351 M
(ive implemented in NeuronRain to WordNet::Similarity in Perl CPAN) s
5 340 M
(3. Logs for this have been committed to testlogs/RecursiveLambdaFunctionGrowth.log.GraphTensor) s
5 329 M
(NeuronNetworkDeepStructure.1May2018) s
5 318 M
(4. This is the deepest possible graph structure which can be extracted from a Natural Language) s
5 307 M
( Text for an ontology.) s
5 296 M
(5. Maximum merit lambda function composition printed abstracts the concept of expansion of a M) s
5 285 M
(egapolis as Hyponyms/Hypernyms "event","geographic area","region","definite quantitty","land" ) s
5 274 M
(etc.,:) s
5 263 M
(grow_lambda_function3\(\): Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Merit :) s
5 252 M
( \(u'event\(\(social_event\(affair,\(property\(abstraction,\(property\(abstraction,\(property\(abstracti) s
5 241 M
(on,\(property\(abstraction,\(resource\(abstraction,\(resource\(abstraction,\(kind\(abstraction,\(abstra) s
5 230 M
(ction\(concept,\(concept\(kind,\(information\(abstraction,\(abstraction\(evidence,\(evidence\(informati) s
5 219 M
(on,\(entity\(abstraction,\(entity\(measure,\(abstraction\(plan,\(abstraction\(abstraction,\(district\(en) s
5 208 M
(tity,\(region\(location,\(entity\(physical_entity,\(municipality\(district,\(municipality\(district,\(r) s
5 197 M
(egion\(district,\(region\(district,\(physical_entity\(location,\(event\(entity,\(exploitation\(abstract) s
5 186 M
(ion,\(use\(activity,\(entity\(psychological_feature,\(abstraction\(event,\(property\(land,\(land\(abstra) s
5 175 M
(ction,\(abstraction\(property,\(point\(entity,\(farm\(location,\(entity\(physical_entity,\(location\(poi) s
5 164 M
(nt,\(physical_entity\(farm,\(definite_quantity\(entity,\(definite_quantity\(entity,\(assembly\(entity,) s
5 153 M
(\(artifact\(physical_entity,\(assembly\(entity,\(geographical_area\(physical_entity,\(region\(location) s
5 142 M
(,\(geographical_area\(physical_entity,\(region\(location,\(entity\(physical_entity,\(situation\(abstra) s
5 131 M
(ction,entity\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)) s
5 120 M
(\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)', 36.399953525147026\)) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(---------------) s
5 76 M
(541. \(THEORY and FEATURE-DONE\) Recursive Lambda Function Growth - Update - Postorder Traversal) s
5 65 M
( of AVL Lambda Composition Tree - 2 May 2018) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(---------------) s
5 32 M
(1. Text file extracting lambda function composition tree has been updated to increase the size) s
5 21 M
( of the text) s
5 10 M
(and more precisely represent the concept of "Expansion of Chennai Metropolitan Area".) s
_R
S
%%Page: (355) 355
%%BeginPageSetup
_S
18 36 translate
/pagenum 355 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (355) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(2. Lambda Function Composition AVL Tree is evaluated as a Postfix expression \(Postorder Traver) s
5 681 M
(sal of AVL tree\)) s
5 670 M
(3. Maximum Merit composition from logs:) s
5 659 M
(grow_lambda_function3\(\): Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Merit :) s
5 648 M
( \(u'physical_entity\(\(artifact\(road,\(object\(event,\(entity\(way,\(abstraction\(living_thing,\(entity) s
5 637 M
(\(causal_agent,\(entity\(planner,\(physical_entity\(means,\(abstraction\(property,\(entity\(entity,\(ent) s
5 626 M
(ity\(entity,\(abstraction\(definite_quantity,\(abstraction\(one,\(entity\(auditory_communication,\(mus) s
5 615 M
(ic\(measure,\(digit\(property,\(relation\(abstraction,\(part\(part,\(event\(abstraction,\(relation\(entit) s
5 604 M
(y,\(event\(abstraction,\(entity\(relation,\(politics\(investigation,\(investigation\(politics,\(entity\() s
5 593 M
(relation,\(entity\(Security_Service,\(abstraction\(abstraction,\(group\(abstraction,\(international_i) s
5 582 M
(ntelligence_agency\(intelligence,\(international_intelligence_agency\(group,\(Security_Service\(int) s
5 571 M
(elligence,\(entity\(abstraction,\(unit\(region,\(entity\(location,\(entity\(physical_entity,\(district\() s
5 560 M
(district,\(physical_entity\(location,\(grasping\(control,\(event\(entity,\(region\(embrace,\(activity\(a) s
5 549 M
(bstraction,\(entity\(event,\(grasping\(psychological_feature,\(clasp\(abstraction,\(embrace\(abstracti) s
5 538 M
(on,\(abstraction\(group,\(abstraction\(control,\(clasp\(abstraction,\(unit\(division,\(clergyman\(leader) s
5 527 M
(,\(living_thing\(entity,\(causal_agent\(entity,\(object\(living_thing,\(curate\(leader,\(clergyman\(cura) s
5 516 M
(te,\(object\(person,\(entity\(physical_entity,\(thing\(physical_entity,\(physical_entity\(external_bod) s
5 505 M
(y_part,\(abstraction\(entity,\(abstraction\(district,\(entity\(entity,\(head\(causal_agent,\(group\(regi) s
5 494 M
(on,\(entity\(physical_entity,\(abstraction\(abstraction,\(entity\(event,\(abstraction\(increase,\(event) s
5 483 M
(\(action,\(event\(abstraction,\(expansion\(entity,\(expansion\(abstraction,\(action\(fact,\(proposal\(abs) s
5 472 M
(traction,\(information\(abstraction,\(abstraction\(plan,\(abstraction\(entity,\(event\(plan,\(entity\(in) s
5 461 M
(crease,\(mathematical_relation\(abstraction,\(relation\(entity,\(location\(region,\(function\(entity,\() s
5 450 M
(location\(region,\(entity\(concept,\(given\(physical_entity,\(physical_entity\(idea,\(given\(entity,\(ab) s
5 439 M
(straction\(abstraction,\(people\(entity,\(concept\(abstraction,\(abstraction\(location,abstraction\)\)\)) s
5 428 M
(\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)) s
5 417 M
(\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)\)', 63.80) s
5 406 M
(089169516415\)) s
5 395 M
(4. This maximum merit lambda function composition has lambda functions "expansion", "mathemati) s
5 384 M
(cal_relation","region" which grasps the leitmotif of the text: "Expansion" is a "mathematical ) s
5 373 M
(relation" on the "region" implying numeric increase in area from 1189 sqkms to 8848 sqkms) s
5 362 M
(5. logs have been committed to testlogs/RecursiveLambdaFunctionGrowth.log.GraphTensorNeuronNet) s
5 351 M
(workDeepStructurePostFix.2May2018) s
5 340 M
(6. Classifier Core number for "expansion" is also maximum at 4.) s
5 329 M
(7. Text for this is a mix of news articles from following websites:) s
5 318 M
(        https://ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Chennai_Metro) s
5 307 M
(politan_Area.html) s
5 296 M
(        https://en.wikipedia.org/wiki/Chennai_metropolitan_area) s
5 285 M
(        http://www.thehindu.com/todays-paper/tp-national/tp-tamilnadu/metropolitan-planning-ar) s
5 274 M
(ea-expanded/article22639607.ece) s
5 263 M
(        https://www.newstodaynet.com/index.php/2018/02/06/chennai-to-grow-from-metropolis-to-m) s
5 252 M
(egapolis/) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(----------------) s
5 208 M
(542. \(THEORY and FEATURE-DONE\) SAT Solver Update - Parity of the Assignment - 3 May 2018) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(----------------) s
5 175 M
(1. solve_SAT2\(\) function of CNFSATSolver.py has been changed to compute binary parity \(sum of ) s
5 164 M
(1s\) after rounding) s
5 153 M
(and real parity \(sum of real values for variables before rounding\)) s
5 142 M
(2. Rationale is both the parities should be approximately close enough which is another measur) s
5 131 M
(e of efficiency) s
5 120 M
(of MAXSAT approximation. Real parity is nothing but Riemann Sum Discrete Integral of the polyn) s
5 109 M
(omial through) s
5 98 M
(real assignment points.) s
5 87 M
(3. Notion of real parities is non-conventional and is introduced as proprietary NeuronRain SAT) s
5 76 M
( Solver feature.) s
5 65 M
(4. This instance solves 1000 variables and Alpha=1.0 and MAXSAT approximation ratio is ~97%. L) s
5 54 M
(SQR solver) s
5 43 M
(has been invoked instead of LSMR because of absence of LSMR in SciPy 0.9.0) s
5 32 M
(5. Logs for this have been committed to testlogs/CNFSATSolver.1000variablesAlpha1AssignmentPar) s
5 21 M
(ity.3May2018) s
_R
S
%%Page: (356) 356
%%BeginPageSetup
_S
18 36 translate
/pagenum 356 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (356) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(-----------------) s
5 670 M
(543. \(FEATURE-DONE\) SAT Solver Update - SciPy Upgrade to 1.1 for restoring LSMR - 1000 clauses) s
5 659 M
( and Alpha=1.0) s
5 648 M
(- 16 May 2018) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(-----------------) s
5 615 M
(1. SciPy has been upgraded to SciPy 1.1 by installing scipy 1.1 wheel file as "easy_install sc) s
5 604 M
(ipy==1.1") s
5 593 M
(2. LSMR invocation has been uncommented and invoked restoring status quo ante) s
5 582 M
(3. Almost 150, 1000 variables and 1000 clauses random SAT instances have been solved and MAXSA) s
5 571 M
(T approximation) s
5 560 M
(ratio is > 94 pegged at 94.5% which coincides with Alpha=1.0 pattern of ~95% for all execution) s
5 549 M
(s so far.) s
5 538 M
(4. Logs for this have been committed to testlogs/) s
5 527 M
(5. Scipy 1.1 has initial guess parameter for x \(SAT assignment\) for faster convergence which c) s
5 516 M
(an be utilized in) s
5 505 M
(future versions of SAT Solver.) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(-----------------) s
5 461 M
(544. \(FEATURE-DONE\) Computational Geometric Factorization - Spark 2.3 Upgrade - Single Core - ) s
5 450 M
(30-bit integer) s
5 439 M
(- 17 May 2018) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(-----------------) s
5 406 M
(1.Spark has been upgraded to 2.3 \(oracle jdk 1.8\) and Hyperbolic local tile search optimizatio) s
5 395 M
(n for Computational) s
5 384 M
(Geometric Factorization has been executed for a 30-bit integer on Single Core Processor.) s
5 373 M
(2.Parallelism wont be perceptible in Single Core. This is just a dependency upgrade.) s
5 362 M
(3.Logs have been committed to testlogs/) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(---------------) s
5 318 M
(545. \(FEATURE-DONE\) SAT Solver Update - Initial Guess for LSMR - 1000 variables and Alpha=4.26) s
5 307 M
(7 and 1.0) s
5 296 M
(- 18 May 2018) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(---------------) s
5 263 M
(1. SAT Solver has been updated to invoke lsmr\(\) function with an initial guess assignment vect) s
5 252 M
(or - hardcoded) s
5 241 M
(to a decimal value < 1 and close to 0 for all variables.) s
5 230 M
(2. Binary and Real parities \(Riemann Discrete Integral Sum\) are printed along side the assignm) s
5 219 M
(ent vector for each random SAT) s
5 208 M
(3. SAT Solver has been executed for 1000 variables - Alpha=1.0 and 1000 variables - Alpha=4.26) s
5 197 M
(7 for this) s
5 186 M
(initial guess and logs have been captured in testlogs/CNFSATSolver.1000variablesAlpha1.0.log.i) s
5 175 M
(nitial_guess.18May2018 and testlogs/CNFSATSolver.1000variablesAlpha4.267.log.initial_guess.18M) s
5 164 M
(ay2018) s
5 153 M
(4. As usual Alpha=1.0 converges to ~95% and Alpha=4.267 to ~90% for 150 and 20 random SAT iter) s
5 142 M
(ations respectively.) s
5 131 M
(5. Non-uniform choice probability for Alpha=4.267 is alomst close to theoretical random matrix) s
5 120 M
( probability 1/sqrt\(m*n\)) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(------------------) s
5 76 M
(546. \(THEORY\) Depth-2 Recursive Majority Circuit and a Contradiction - related to 14,319,430 -) s
5 65 M
( 20 May 2018) s
5 54 M
(- Updates to https://sites.google.com/site/kuja27/IndepthAnalysisOfVariantOfMajorityVotingwith) s
5 43 M
(ZFAOC_2014.pdf) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(------------------) s
5 10 M
(Depth-2 Recursive Majority Circuit consists of two levels of Majority circuits composed as:) s
_R
S
%%Page: (357) 357
%%BeginPageSetup
_S
18 36 translate
/pagenum 357 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (357) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        Maj\(Maj1,Maj2,Maj3,...,Majn\)) s
5 681 M
(for majority functions Maj1,Maj2,...Majn for each constituencies c1,c2,c3,...,cn respectively.) s
5 670 M
(This kind of social) s
5 659 M
( choice function is followed by most real world democracies. For Multiway Contests binary indi) s
5 648 M
(ces 0,1 for candidates are replaced by large integers. Following is a schematic for hash table) s
5 637 M
( representation of depth-2 Majority voting function for 2 candidates:) s
5 615 M
(        c1:     ########################################) s
5 604 M
(                @@@@@@@@@@@@@@@@@@@) s
5 582 M
(        c2:     ####################) s
5 571 M
(                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@) s
5 549 M
(        c3:     ################################) s
5 538 M
(                @@@@@@@@@@@@@@@@@@@@) s
5 527 M
(                ...) s
5 505 M
(for constituencies c1,c2,c3,... and for candidate0 and candidate1. Votes for Candidate0 are co) s
5 494 M
(llated in bucket marked # and Votes for Candidate1 are collated in bucket marked @ per constit) s
5 483 M
(uency by a theoretical electronic voting machine using Locality Sensitive Hashing. Winners are) s
5 472 M
(: ) s
5 461 M
(        For c1, Candidate0 \(#\)) s
5 450 M
(        For c2, Candidate1 \(@\)) s
5 439 M
(        For c3, Candidate0 \(#\)) s
5 428 M
(and in 2 of 3 constituencies, Candidate0 wins and therefore attains depth-2 majority. But if t) s
5 417 M
(he constituency gerrymandering vanishes and votes in all constituencies for Candidate0 and Can) s
5 406 M
(didate1 are summed up, Candidate1 wins- Total @\(s\) outnumber Total #\(s\). Previous hash table r) s
5 395 M
(epresentation of depth-2 Majority function can be translated to depth-2 Majority circuit compo) s
5 384 M
(sition Maj\(Maj1,Maj2,...,Majn\). In terms of Majority depth-2 composition circuit this can be w) s
5 373 M
(ritten as:) s
5 362 M
(        leaf: Sum\(parity\(c1,0\),parity\(c2,0\),...\) > Sum\(parity\(c1,1\),parity\(c2,1\),...\)) s
5 351 M
(        depth-1: Sum\(parity\(c1,0\),parity\(c2,0\),...\) < Sum\(parity\(c1,1\),parity\(c2,1\),...\)) s
5 340 M
(In other words, Total number of 0s > Total number of 1s at leaf of the Majority depth-2 circui) s
5 329 M
(t but Total number of 0s < Total number of 1s at depth 1 of the composition. Depth-2 majority ) s
5 318 M
(is a direct consequence and application of Axiom of Choice in ZF Set Theory which states that ) s
5 307 M
(there exists a choice function which chooses an element from each set in a set of sets possibl) s
5 296 M
(y infinite.) s
5 274 M
(References:) s
5 263 M
(----------) s
5 252 M
(546.1 Boots and Socks Metaphor for Axiom of Choice - [Bertrand Russell] - https://en.wikipedia) s
5 241 M
(.org/wiki/Axiom_of_choice#cite_note-30 - AoC is necessary to choose a sock but not to choose a) s
5 230 M
( shoe.) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(----------------) s
5 186 M
(547. \(FEATURE-DONE\) Graph Mining - GSpan Algorithm Implementation Update - for mining patterns) s
5 175 M
( in EventNet ) s
5 164 M
(DOT files - 21 May 2018) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(----------------) s
5 131 M
(1.GSpan GraphMining implementation has been updated to read EventNet DOT file as input) s
5 120 M
(2.This enables mining EventNet Event-Partakers Graph for patterns) s
5 109 M
(3.EventNet has been implemented in NeuronRain AsFer in C++ and Python for persisting general p) s
5 98 M
(urpose Cloud Event-Actors conversations as Graph.) s
5 87 M
(4.EventNet is also an Economic Trading Network/Money Flow Market for KingCobra Fictitious Neur) s
5 76 M
(o Electronic Currency and Buyer-Seller networks in Neuro Money Flow Markets e.g AsFer-KingCobr) s
5 65 M
(a Cloud Move of Neuro Currency writes out an EventNet edge in a DOT file from Buyers to Seller) s
5 54 M
(s) s
5 43 M
(5.Mining this Economic Network EventNet requires Frequent SubGraph Mining\(GSpan\)) s
5 32 M
(6.log for this has been committed to testlogs/GraphMining_GSpan.log.21May2018) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (358) 358
%%BeginPageSetup
_S
18 36 translate
/pagenum 358 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (358) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-----------------) s
5 681 M
(548. \(FEATURE-DONE\) ThoughtNet - Contextual Multi Armed Bandit Evocation - Update - 21 May 201) s
5 670 M
(8) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(-----------------) s
5 637 M
(1.Python implementation DeepLearning_ReinforcementLearningThoughtNet.py has been updated to Cl) s
5 626 M
(assify the input) s
5 615 M
(text by Recursive Gloss Overlap Definition Graph Core Number Classifier and lookup the classes) s
5 604 M
( in the ThoughtNet) s
5 593 M
(Hypergraph) s
5 582 M
(2.ThoughtNet Hypergraph has been recreated having classes mostly belonging to terrorism, econo) s
5 571 M
(mics, social progress etc.,) s
5 560 M
( extracted from chronologically older thought edges.) s
5 549 M
(3.Input to ThoughtNet Reinforcement Learning has been updated to have recent events/thoughts/s) s
5 538 M
(timuli) s
5 527 M
(4.Logs for the evocation of the new thoughts on the ThoughtNet hypergraph is in ThoughtNet/Tho) s
5 516 M
(ughtNet_Hypergraph_Generated.txt) s
5 505 M
(5.Logs show a recent terrorist event evoking an older event of similar class among others.) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(----------------) s
5 461 M
(549. \(FEATURE-DONE\) ThoughtNet Reinforcement Learning - Contextual Multi Armed Bandit Evocatio) s
5 450 M
(n Update) s
5 439 M
(- 22 May 2018) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(----------------) s
5 406 M
(1. RecursiveGlossOverlap_Classifier.py has been updated to return both the definition graph Ne) s
5 395 M
(tworkX object) s
5 384 M
(and Recursive Gloss Overlap Intrinsic Merit) s
5 373 M
(2. RecursiveLambdaFunctionGrowth.py has been updated to return all intrinsic merits from grow_) s
5 362 M
(lambda_function3\(\):) s
5 351 M
(        2.1 Korner Entropy of Definition Graph) s
5 340 M
(        2.2 Bose Einstein Intrinsic Fitness) s
5 329 M
(        2.3 Graph Tensor Neuron Network Instrinsic Merit) s
5 318 M
(        2.4 Definition Graph Density) s
5 307 M
(        2.5 Definition Graph Recursive Gloss Overlap Intrinsic Merit) s
5 296 M
(        2.6 Maximum Per Random Walk Graph Tensor Neuron Network Intrinsic Merit) s
5 285 M
(3.ThoughtNet/Create_ThoughtNet_Hypergraph.py has been updated to make a choice for merit crite) s
5 274 M
(rion by choosing between) s
5 263 M
(sentiment scoring and graph tensor neuron network intrinsic merit for ThoughtNet HyperGraph ed) s
5 252 M
(ges) s
5 241 M
(4.ThoughtNet/ThoughtNet_Hypergraph_Generated.txt has been recreated based on Graph Tensor Neur) s
5 230 M
(on Network Intrinsic Merit and the sorted order of hyperedges for most vertices is different c) s
5 219 M
(ompared to) s
5 208 M
(sentiment scoring earlier) s
5 197 M
(5.Logs for previous ThoughtNet creation has been committed to ThoughtNet/testlogs/Create_Thoug) s
5 186 M
(htNet_Hypergraph.GraphTensorNeuronNetwork.log.22May2018) s
5 175 M
(6.Logs for ThoughtNet Contextual Multi Armed Bandit Evocation has been committed to testlogs/D) s
5 164 M
(eepLearning_ReinforcementLearningThoughtNet.log.22May2018) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(-----------------) s
5 120 M
(550. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Single Core - Hardy-Ram) s
5 109 M
(anujan Ray Shooting Queries - 23 May 2018) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-----------------) s
5 76 M
(1. Hard-Ramanujan Approximate Ray Shooting Queries function has been refactored to compute the) s
5 65 M
( angle and tangent) s
5 54 M
(of the ray simply as functions of multiples of N/k*loglogN.) s
5 43 M
(2. Precisely angle between the rays must be a function of spacing/gap between prime factors of) s
5 32 M
( N which is) s
5 21 M
(at present assumed to be equal.) s
5 10 M
(3. Cramer's bound for Spacing between primes is O\(sqrt\(p\)*log\(p\)\) assuming Riemann Hypothesis ) s
_R
S
%%Page: (359) 359
%%BeginPageSetup
_S
18 36 translate
/pagenum 359 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (359) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(is true while) s
5 681 M
( the best known modern bound proved in 1995 and 2001 by [Baker-Harman-Pintz] is p^\(0.525\) whic) s
5 670 M
(h is unconditional.) s
5 659 M
(4. Prime number theorem implies prime counting function ~ N/logN. Probability that a prime bel) s
5 648 M
(ow N is a prime factor of N is roughly: \(loglogN*logN\)/N - ratio of Hardy-Ramanujan estimate a) s
5 637 M
(nd Prime Counting Function.) s
5 626 M
(5. Even with this equal spacing between prime factors, two experimental logs committed herewit) s
5 615 M
(h show) s
5 604 M
(previous approximate ray shooting is exact, passing through an exact factor found by tile bina) s
5 593 M
(ry search. Both logs have an exact match for one factor - approximate and exact ray shooting c) s
5 582 M
(oincide.) s
5 571 M
(6. By replacing equal spacing by a function of Cramer and Baker-Harman-Pintz Prime Gap estimat) s
5 560 M
(e might accurately fine tune the location of a factor further.) s
5 538 M
(References:) s
5 527 M
(-----------) s
5 516 M
(550.1 Gaps between Consecutive Primes - [Harald Cramer] - http://matwbn.icm.edu.pl/ksiazki/aa/) s
5 505 M
(aa2/aa212.pdf) s
5 494 M
(550.2 Gaps between Integers with Same Prime Factors - [Cochrane-Dressler] - https://pdfs.seman) s
5 483 M
(ticscholar.org/0dea/870aecd2513323c6f7df6b27fc31660b215c.pdf) s
5 472 M
(550.3 Gaps between Consecutive Primes - [Baker-Harman-Pintz] - https://academic.oup.com/plms/a) s
5 461 M
(rticle-abstract/83/3/532/1479119) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(------------------) s
5 417 M
(551. \(THEORY\) Computational Geometric Factorization - Hardy-Ramanujan and Prime Number Theorem) s
5 406 M
(s, Gap between) s
5 395 M
(consecutive prime factors of an integer, Ray shooting queries based on these - 24 May 2018) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(------------------) s
5 362 M
(From [Baker-Harman-Pintz] estimate Gap between primes p\(n\) and p\(n+1\) is approximately \(p\(n\)\)^) s
5 351 M
(0.525. Combining) s
5 340 M
(Hardy-Ramanujan and Prime Number Theorem following estimate of number of primes between two pr) s
5 329 M
(ime factors of an) s
5 318 M
(integer N can be found:) s
5 296 M
(Approximate number of primes between 2 prime factors of N = \(Number of primes less than N\) / \() s
5 285 M
(Number of prime factors of N\) ~ N/\(\(logN\)*\(loglogN\)\)) s
5 263 M
(If pf\(n\) and pf\(n+1\) are two consecutive prime factors of N, then from Prime Number Theorem nu) s
5 252 M
(mber of primes between pf\(n\) and pf\(n+1\) = \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\) which is ) s
5 241 M
(equivalent to Hardy-Ramanujan and Prime Number Theorem estimate N/\(\(logN\)*\(loglogN\)\)) s
5 219 M
(=> pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\) = N/\(\(logN\)*\(loglogN\)\)) s
5 208 M
(=> pf\(n+1\)/log\(pf\(n+1\)\) = pf\(n\)/log\(pf\(n\)\) + N/\(\(logN\)*\(loglogN\)\)) s
5 186 M
(Previous relation finds the next prime factor pf\(n+1\) in terms of pf\(n\) as a logarithmic ratio) s
5 175 M
(. Similar recurrence can be arrived at based on [Baker-Harman-Pintz] estimate too. If p1,p2,p3) s
5 164 M
(,...,pm are primes between pf\(n\) and pf\(n+1\):) s
5 153 M
(        p1 = pf\(n\) + \(pf\(n\)\)^0.525) s
5 142 M
(        p2 = p1 + p1^0.525) s
5 131 M
(        p3 = p2 + p2^0.525) s
5 120 M
(        ...) s
5 109 M
(        pf\(n+1\) = pm + pm^0.525) s
5 87 M
(Expanding this recurrence yields a continued nested exponentiation of 0.525 for pf\(n+1\) in ter) s
5 76 M
(ms of pf\(n\) which must be equal to Hardy-Ramanujan-Prime Number Theorem estimate N/\(\(logN\)*\(lo) s
5 65 M
(glogN\)\). This estimate for gap between two consecutive prime factors of an integer can be subs) s
5 54 M
(tituted for computing angles for prime factor points ray shooting queries in Computational Geo) s
5 43 M
(metric Factorization in lieu of equal spacing.) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(---------------) s
_R
S
%%Page: (360) 360
%%BeginPageSetup
_S
18 36 translate
/pagenum 360 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (360) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(552. \(FEATURE-DONE\) Computational Geometric Factorization - Ray Shooting Queries - Hardy-Raman) s
5 681 M
(ujan-Prime Number Theorem and Baker-Harman-Pintz Gap between Prime Numbers - 24 May 2018) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(---------------) s
5 648 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to includ) s
5 637 M
(e two new) s
5 626 M
(functions for ray shooting queries - 1\) based on Hardy-Ramanujan-Prime Number Theorem estimate) s
5 615 M
( for number) s
5 604 M
(of primes between two prime factors 2\) based on Baker-Harman-Pintz Gap between prime numbers.) s
5 593 M
(2.These two functions are quite nascent and might be refined in next commits.) s
5 582 M
(3.Two numbers have been factored and all three ray shooting query algorithms print the approxi) s
5 571 M
(mate location of) s
5 560 M
(factors.) s
5 549 M
(4.Of the three, Hardy-Ramanujan query is very simple and finds the factor exactly in most exec) s
5 538 M
(utions \(logs show an exact match for one factor in both integers\).) s
5 527 M
(Hardy-Ramanujan-Prime Number Theorem and Baker-Harman-Pintz estimates are too skewed. But theo) s
5 516 M
(retically latter two estimates are tighter approximations compared to Hardy-Ramanujan ray shoo) s
5 505 M
(ting.) s
5 494 M
(5.Logs for these two integer factorizations have been committed to testlogs/) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(----------------) s
5 450 M
(553. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Ray Shooting Queries an) s
5 439 M
(d Cramer Prime Gap Updates - 29 May 2018) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(----------------) s
5 406 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to includ) s
5 395 M
(e a new ray shooting query function for Cramer Prime Gaps \(sqrt\(p\)*log\(p\)\)) s
5 384 M
(2.All Four Ray Shooting Query functions have been executed on two integers and factorization l) s
5 373 M
(ogs have been) s
5 362 M
(captured in testlogs/ \(Single Core - Spark 2.3\)) s
5 351 M
(3.Both logs don't show an exact shoot \(but are sufficiently close\)) s
5 340 M
(4.Of the Four, Hardy-Ramanujan ray shooting is still the best and estimates are close to exact) s
5 329 M
( factors and sometimes exact.) s
5 318 M
(5.Baker-Harman-Pintz, Hardy-Ramanujan-PrimeNumberTheorem Ray Shooting functions have been slig) s
5 307 M
(htly changed for) s
5 296 M
(initial prime factor, constant for Prime Counting Function normal order etc.,) s
5 285 M
(----------) s
5 274 M
(6.Analysis:) s
5 263 M
(----------) s
5 252 M
(These ray shooting queries are Monte Carlo algorithms with an error bounded by the spacing bet) s
5 241 M
(ween two prime) s
5 230 M
(factors. Ray shooting to find a prime factor by Hardy-Ramanujan succeeds with a probability lo) s
5 219 M
(glogN/N which is) s
5 208 M
( loglogN/2^logN=loglogN/\(2^\(2^loglogN\)\) which is exponentially small. But real benefit of ray ) s
5 197 M
(shooting queries is in the following factorization algorithm:) s
5 186 M
(        - Sequentially ray shoot O\(loglogN\) queries in O\(loglogN\) time to create beacons) s
5 175 M
(        - Distance between any two such beacon in the hyperbolic arc bow is O\(N/loglogN\)) s
5 164 M
(        - This creates O\(loglogN\) hyperbolic pixelated segments of length O\(N/loglogN\)) s
5 153 M
(        - Pixelation of O\(N/loglogN\) sized segment requires Parallel RAM sorting \(e.g. Using C) s
5 142 M
(ole's Parallel Sort each pixelated segment of length O\(N/loglogN\) can be sorted in O\(log\(N/log) s
5 131 M
(logN\)\) on PRAMs.\)) s
5 120 M
(        - Each pixelated segment can be binary searched in log\(N/loglogN\) time) s
5 109 M
(        - Sequentially this requires O\(loglogN\)*O\(log\(N/loglogN\)\) time for all segments) s
5 98 M
(        - Total factorization time = O\(loglogN\) + O\(loglogN\)*O\(log\(N/loglogN\)\) + O\(loglogN\)*O\() s
5 87 M
(log\(N/loglogN\)\) < O\(loglogN\) * O\(logN\)) s
5 76 M
(        - This PRAM algorithm does factorization in at most O\(loglogN*logN\) time compared to O) s
5 65 M
(\(\(logN\)^2\) or O\(\(logN\)^3\) PRAM time algorithms using segment trees and sorting described earli) s
5 54 M
(er.) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(----------------) s
5 10 M
(554. \(FEATURE-DONE\) Scheduler Analytics Update - Rewrite of scheduler analytics webserver func) s
_R
S
%%Page: (361) 361
%%BeginPageSetup
_S
18 36 translate
/pagenum 361 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (361) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(tionality and Spark log mapreduce of "perf sched script" - 30 May 2018) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(----------------) s
5 659 M
(1.SparkKernelLogMapReduceParser.py has been rewritten to remove hardcoded filenames and patter) s
5 648 M
(ns - new function log_mapreducer\(\) has been defined for passing log file name and pattern as a) s
5 637 M
(rguments.) s
5 626 M
(2.software_analytics/DeepLearning_SchedulerAnalytics.py and software_analytics/SchedulerAnalyt) s
5 615 M
(ics_WebServer.py h$) s
5 604 M
(been refactored and get_stream_data\(\) \(@Generic Socket Web Server\) decorated function has been) s
5 593 M
( moved to software$) s
5 582 M
(3.software_analytics/DeepLearning_SchedulerAnalytics.py invokes log_mapreducer\(\) defined in Sp) s
5 571 M
(arkKernelLogMapRed$) s
5 560 M
( for new scheduler performance file perf.data.schedscript and pattern sched_stat_runtime.) s
5 549 M
(4.New perf.data file has been created from perf utility by "perf sched record" commandline) s
5 538 M
(5.New perf.data.schedscript has been created from perf.data by "perf sched script" commandline) s
5 527 M
( for printing) s
5 516 M
(scheduler context switches and runtime in nanoseconds) s
5 505 M
(6.logs for both have been committed to software_analytics/testlogs/DeepLearning_SchedulerAnaly) s
5 494 M
(tics.log.30May2018 and software_analytics/testlogs/SchedulerAnalytics_WebServer.log.30May2018) s
5 483 M
(7.Perf utility support has been added for potential clockticks-to-processes dynamic hash table) s
5 472 M
( creation later.) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(-----------------) s
5 428 M
(555. \(THEORY\) Non-majority social choice, Majority social choice - Boolean Composition of Majo) s
5 417 M
(rity+SAT Versus SAT Oracles, Margulis-Russo Threshold , KRW Conjecture, Condorcet Jury Theorem) s
5 406 M
( and a conflict - 4 June 2018 - related to 129, 317, 355, 358, 400, 429 and all other Majority) s
5 395 M
( Voting related sections) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(-----------------) s
5 362 M
(In the theoretical drafts in this document, relativizing proofs involving oracle access to Vot) s
5 351 M
(er SAT have been) s
5 340 M
(neglected in favour of boolean function composition/communication complexity proofs based on c) s
5 329 M
(omposition of ) s
5 318 M
(Majority and Voter SAT boolean functions. But a recent result has proved BQP^A is not containe) s
5 307 M
(d in PH^A relative) s
5 296 M
(to some oracle A. This has direct relation to Condorcet Jury Theorem circuit for Majority Voti) s
5 285 M
(ng having SAT oracle access. P\(Good\) binomial series \(or Condorcet Jury Theorem\) equates Non-m) s
5 274 M
(ajority and Majority social choice based on correctness of electorate group decision vis-a-vis) s
5 263 M
( individual decision correctness. This is tantamount to equating goodness of following two alg) s
5 252 M
(orithms in different complexity classes:) s
5 241 M
(        *\) LHS: An algorithm having access to PRG making a random choice of a boolean function) s
5 230 M
(\(voter\) - could be in BPP/BQP/RP/BPNC/RNC) s
5 219 M
(        *\) RHS: An algorithm which does majority voting by composing Majority function and Ind) s
5 208 M
(ividual voter SATs - could be in PH \(DC-uniform\) if the number of variables m, per Voter SAT a) s
5 197 M
(re same for all and size of the electorate is n=2^m - exponential fanin - and depth restricted) s
5 186 M
( \(unrestricted is in EXP\).) s
5 164 M
(Assuming both LHS and RHS have equal goodness \(1-error\) of 0.5 \(by Margulis-Russo Threshold an) s
5 153 M
(d Condorcet Jury Theorem\), which happens when each individual votes with correctness p=0.5 \(ho) s
5 142 M
(mogeneous voters\), Oracle version of the previous equality is \(for some oracle Voter SAT A whi) s
5 131 M
(ch has goodness p=0.5\):) s
5 120 M
(        *\) LHS: BPP^A / BQP^A / RNC^A / BPNC^A) s
5 109 M
(        *\) RHS: PH^A / EXP^A / Other larger classes) s
5 87 M
(Caveat: This assumes equal error/goodness implies lowerbounds and there are complete problems ) s
5 76 M
(for respective classes.) s
5 54 M
(Since goodness/error is equal, if one side of the equality is a C-complete problem, the other ) s
5 43 M
(side devours class C. E.g:) s
5 32 M
(        *\) if LHS is BQP^A-complete and RHS is PH^A, BQP^A is in PH^A - this is in direct conf) s
5 21 M
(lict with 555.1 which separates BQP and PH relative to some oracle A.) s
5 10 M
(        *\) if RHS is PH^A-complete and LHS is BQP^A, PH^A is in BQP^A) s
_R
S
%%Page: (362) 362
%%BeginPageSetup
_S
18 36 translate
/pagenum 362 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (362) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(Resolving this conflict requires:) s
5 670 M
(        *\) LHS and RHS have different Oracles \(Pseudorandom Oracle A1 for LHS and SAT Oracle A) s
5 659 M
(2 for all voters in RHS\) - but in real-world voting nothing prohibits all voters from making a) s
5 648 M
( random choice and thus there is always a possibility electorate votes at random \(Therefore Bo) s
5 637 M
(th Oracles are Pseudorandom Generators and A1=A2. This is exactly Balls-and-Bins problem descr) s
5 626 M
(ibed in sections on theoretical EVMs based on LSH and separate chaining hashtables elsewhere i) s
5 615 M
(n this draft\).) s
5 604 M
(        *\) ruling out existence of BPQ^A-complete problems for Voter SAT oracle A separating P) s
5 593 M
(H and BPQ.) s
5 582 M
(        *\) assumption of equal goodnesses of LHS and RHS implying lowerbounds is wrong.) s
5 571 M
(        *\) Oracle A which separates \(BQP^A is not in PH^A\) has goodness > 0.5 or < 0.5 violati) s
5 560 M
(ng Margulis-Russo threshold.) s
5 538 M
(But if LHS is Promise-BPP-Complete which are known to exist and RHS is PH^A, Promise-BPP is in) s
5 527 M
( PH^A.) s
5 505 M
(References:) s
5 494 M
(-----------) s
5 483 M
(555.1 Oracle Separation of BQP and PH - [AvishayTal-Raz] - https://eccc.weizmann.ac.il/report/) s
5 472 M
(2018/107/download) s
5 461 M
(555.2 Margulis-Russo Threshold for Majority at p=0.5 - [RyanODonnell] - Pages 224-225 - http:/) s
5 450 M
(/www.cs.tau.ac.il/~amnon/Classes/2016-PRG/Analysis-Of-Boolean-Functions.pdf) s
5 439 M
(555.3 Promise-BPP-Complete problems - [OdedGoldreich] - http://www.wisdom.weizmann.ac.il/~oded) s
5 428 M
(/PSX/prpr-r.pdf) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(----------------) s
5 384 M
(556. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Ray Shooting Queries - ) s
5 373 M
(Yitang Zhang Prime Gap Estimate - 5 June 2018) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(----------------) s
5 340 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to includ) s
5 329 M
(e a new function) s
5 318 M
(for ray shooting queries which implements recent breakthrough result in Prime Gap estimation -) s
5 307 M
( there are) s
5 296 M
(infinitely many twin primes separated by gap < 70000000 - by [Yitang Zhang] which refines) s
5 285 M
([Goldston-Pintz-Yildirim] Sieve. This might have effect only for finding primes between prime ) s
5 274 M
(factors of) s
5 263 M
(large integers and summing up the gap for spacing between any two prime factors.) s
5 252 M
(2.Constants k and l for multiplying estimation bounds have been changed slightly.) s
5 241 M
(3.logs for this have been committed to testlogs/ for an 8-digit 26-bit integer.) s
5 230 M
(4.None of the five ray shooting queries in the bouquet shoot exactly. But Hardy-Ramanujan is s) s
5 219 M
(till the best and) s
5 208 M
(Baker-Harman-Pintz estimate is also close enough to actual factors.) s
5 197 M
(5.Ray Shooting's success rate depends on the number and multiplicity of the prime factors - In) s
5 186 M
(tegers of large Big Omega and Small Omega would have lot of prime factors taking a point-blank) s
5 175 M
( hit. In other words large multiplicative partition \(Factorisatio Numerorum\) number of an inte) s
5 164 M
(ger is a pre-requisite for exact ray shooting. Finding the values of the constants for estimat) s
5 153 M
(ion functions which are normal orders, is presently done by trial and error.  Correct values f) s
5 142 M
(or these constants are also crucial for exact shooting.) s
5 131 M
(6.Another weird observation is the convergence of the Hardy-Ramanujan-PrimeNumberTheorem log r) s
5 120 M
(atio \(p/log\(p\), also known as Merit\) estimate after some iterations and this converged integer) s
5 109 M
( sometimes matches closely with actual factors. This has happened in earlier logs too.) s
5 87 M
(References:) s
5 76 M
(-----------) s
5 65 M
(556.1 Bounded Gaps between Primes - [Yitang Zhang] - http://citeseerx.ist.psu.edu/viewdoc/down) s
5 54 M
(load?doi=10.1.1.308.998&rep=rep1&type=pdf) s
5 43 M
(556.2 Goldston-Pintz-Yildirim Sieve - [K.Soundararajan] - https://arxiv.org/pdf/math/0605696.p) s
5 32 M
(df - there are infinitely many twin primes such that lim sup \(p\(n+1\) - pn\) / log\(pn\) ~ 0 - the) s
5 21 M
(re exist prime tuples which are arbitrarily close apart) s
5 10 M
(556.3 Primes in Tuples - [Goldston-Pintz-Yildirim] - https://arxiv.org/pdf/math/0508185.pdf ) s
_R
S
%%Page: (363) 363
%%BeginPageSetup
_S
18 36 translate
/pagenum 363 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (363) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(---------------) s
5 659 M
(557. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Ray shooting queries - ) s
5 648 M
(correction) s
5 637 M
(- 6 June 2018) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(---------------) s
5 604 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to correc) s
5 593 M
(t the) s
5 582 M
(number of primes estimate between two factors - constant for prime counting function \(merit\) O) s
5 571 M
(\(p/logp\) has been) s
5 560 M
(moved to numerator which was earlier in denominator incorrectly.) s
5 549 M
(2.Two integers have been factored and logs have been committed to testlogs/. Both show exact r) s
5 538 M
(ay shoot finding) s
5 527 M
(factors correctly matching with actual factors. These are on Single Core + Spark 2.3 with loca) s
5 516 M
(l[4]. This) s
5 505 M
(simulates quadcore on single core and some factors are printed out of order probably because o) s
5 494 M
(f Spark Driver) s
5 483 M
(Executor Threads.) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(----------------) s
5 439 M
(558. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Hardy-Ramanujan-PNT Ray) s
5 428 M
( Shooting - Correction - 7 June 2018) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(----------------) s
5 395 M
(1. Mysterious convergence of merit p/logp has been investigated.) s
5 384 M
(2. This estimate equates the Prime number theorem merit difference between 2 prime factors and) s
5 373 M
( ratio of Prime) s
5 362 M
(counting function and Hardy-Ramanujan prime factors estimate as below:) s
5 351 M
(        l*pf\(n+1\)/log\(pf\(n+1\)\) - l*pf\(n\)/log\(pf\(n\)\) = l*N/\(logN * k*loglogN\)) s
5 340 M
(3. Earlier the constant multiples k and l were missing in some places which has been rectified) s
5 329 M
(.) s
5 318 M
(4. Even after this, previous ratio converges after lot of iterations for l=10 and k=6. So suit) s
5 307 M
(able value of l) s
5 296 M
(is still elusive.) s
5 285 M
(5. Two integers with large Omega \(usually numbers ending in 5 have lot of factors\) have been f) s
5 274 M
(actored. While) s
5 263 M
(one integer has exact shoot from Hardy-Ramanujan, the other has close shave, but approximate f) s
5 252 M
(actors are quite) s
5 241 M
(in proximity to actual factors.) s
5 230 M
(6. This establishes utility of ray shooting queries as an Oracle access implementation which c) s
5 219 M
(an be used both) s
5 208 M
(by classical P and quantum period-finding BQP \(P^A versus BQP^A\) Factoring Turing Machines whi) s
5 197 M
(ch at most requires) s
5 186 M
(O\(loglogN\) queries.) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(------------------) s
5 142 M
(559. \(THEORY and FEATURE-DONE\) Computational Geometric Factorization - Ray Shooting Queries - ) s
5 131 M
(Constant Changes) s
5 120 M
(- 8 June 2018) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(------------------) s
5 87 M
(1.Constants in all ray shooting query functions have been changed so that gaps are reduced and) s
5 76 M
( possibility) s
5 65 M
(of exact hit increases. Specifically constant l for Cramer, Baker-Harman-Pintz, Zhang has been) s
5 54 M
( made small to) s
5 43 M
(widen xrange\(\).) s
5 32 M
(2.2 integers have been factored and approximate factors for all 5 queries are printed after th) s
5 21 M
(ese new constant values. Zhang and Cramer queries were overshooting previously beyond N. None ) s
5 10 M
(of the queries exactly shoot but are quite close to actual factors.) s
_R
S
%%Page: (364) 364
%%BeginPageSetup
_S
18 36 translate
/pagenum 364 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (364) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(------------) s
5 659 M
(560. \(THEORY and FEATURE-DONE\) SAT Solver Update - nonuniform_choice3\(\) damp - 2000 variables ) s
5 648 M
(and Alpha=4.267) s
5 637 M
(- 12 June 2018) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(------------) s
5 604 M
(1.CNFSATSolver.py - damp variable in nonuniform_choice3\(\) function has been fine tuned to matc) s
5 593 M
(h the) s
5 582 M
(theoretical probability of 1/sqrt\(m*n\) - observed probability almost matches with theoretical) s
5 571 M
(2.random 3SAT instances for Number of variables=100,200,300,400,500,600,700,800,900,1000,1100,) s
5 560 M
(1200,1300,1400,1500 and 2000 for alpha=4.267) s
5 549 M
(have been solved and observed probability closely matches the random matrix probability) s
5 538 M
(3.Logs for 2000 variables and Alpha=4.267 have been committed to) s
5 527 M
( testlogs/CNFSATSolver.2000clausesAlpha4.267.log.12June2018.) s
5 516 M
(4.Observed MAXSAT approximation ratio for first few iterations hovers around 90-91-92% for all) s
5 505 M
( previous) s
5 494 M
(variable combinations.) s
5 483 M
(5.Theoretically, if damp variable is perfectly tuned to create required bias in nonuniform cho) s
5 472 M
(ice, then MAXSAT) s
5 461 M
(ratio observed for unequal variable-clause combinations should also be in the range of 94-95% ) s
5 450 M
(if not 100%.) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(-----------------) s
5 406 M
(561. \(FEATURE-DONE\) Scheduler Analytics Update - New Convolution Network for analyzing stream ) s
5 395 M
(of 2-dimensional graphics performance image data - 14 June 2018) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(-----------------) s
5 362 M
(Pictorial Performance Pattern Mining by Convolution Network:) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-----------------) s
5 329 M
(Input to this Convolution Network is an image bitmap matrix obtained from some standard graphi) s
5 318 M
(c) s
5 307 M
(performance analyzers - runqueuelat, BPF/bcc-tools, perf etc., Following example image is crea) s
5 296 M
(ted) s
5 285 M
(by "perf timechart" on perf.data which captures the state,timeslice etc., information of list ) s
5 274 M
(of) s
5 263 M
(processes in scheduler at any instant in the form of a gantt chart. Backpropagation-Convolutio) s
5 252 M
(n is) s
5 241 M
(then applied to this performance snapshot and convolution, maxpooling, final neuron layers are) s
5 230 M
(computed as usual. This convolution is iterated periodically for stream of performance snapsho) s
5 219 M
(t bitmaps.) s
5 208 M
(Advantages of mining graphic images of performances captured periodically are:) s
5 197 M
(       - number of dimensions of a performance snapshot image is 2 while psutils creates 1 dim) s
5 186 M
(ensional) s
5 175 M
(       array stream of data per process id.) s
5 164 M
(       - 2 dimensional performance snapshots are system wide and capture all process id\(s\) at ) s
5 153 M
(a time) s
5 142 M
(       and not process id specific.) s
5 131 M
(       - Recent advanced performance analyzers like BPF/bcc-tools provide a histogram equivale) s
5 120 M
(nt of) s
5 109 M
(       timechart in perf \(runqueuelat\) which is also an image bitmap. So support for graphic p) s
5 98 M
(erformance) s
5 87 M
(       data analytics is futuristic.) s
5 76 M
(       - Processing stream of performance snapshot image bitmaps by convolution to extract pat) s
5 65 M
(terns is) s
5 54 M
(       more universal/holistic than applying convolution to stream of process structure data) s
5 43 M
(       - Specifically if remaining_clockticks-to-processes dynamic hash tables are available a) s
5 32 M
(s) s
5 21 M
(       stream of histogram images, applying convolution on this stream creates frequent recurr) s
5 10 M
(ing) s
_R
S
%%Page: (365) 365
%%BeginPageSetup
_S
18 36 translate
/pagenum 365 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (365) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(       patterns of queueing in OS Scheduler \(Described in GRAFIT course material:) s
5 681 M
(                - https://github.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronR) s
5 670 M
(ain/AdvancedComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt,) s
5 659 M
(                - https://gitlab.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronR) s
5 648 M
(ain/AdvancedComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt) s
5 637 M
(        \)) s
5 615 M
(NOTE on linux kernel versions: All the NeuronRain commits being done \(in SourceForge and GitHu) s
5 604 M
(b\) for the past 2 months since April 2018 are based on executions/tests on linux kernel 3.x.x ) s
5 593 M
(+ Single Core. Berkeley Packet Filtering\(BPF\)/bcc-tools performance analyzer which includes ru) s
5 582 M
(nqlat is recent addition to mainstream linux kernel from version 4.x.x onwards. Commits prior ) s
5 571 M
(to April 2018 were done on a linux kernel 4.13.3 + Dual Core development environment which was) s
5 560 M
( sabotaged by a probable severe Cybercrime in first week of April 2018 causing catastrophic da) s
5 549 M
(mage to partitions and hardware failure too making recovery impossible. This incident caused t) s
5 538 M
(otal destruction of all dev and build setups necessitating full checkouts from GitHub and Sour) s
5 527 M
(ceForge repositories and continued development on another base linux kernel of lesser version ) s
5 516 M
(which does not support BPF/bcc-tools. Previous provision for graphic performance data pattern ) s
5 505 M
(recognition is mainly targeted towards supporting BPF/bcc-tools in future.) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(----------------) s
5 461 M
(562. \(THEORY\) Computational Geometric PRAM-NC Factorization, Ray Shooting Query Oracles, Quant) s
5 450 M
(um NC, Quantum ) s
5 439 M
(Factorization, Classical-Quantum Transition and Knot Theory - related to 34,351,555 - 15 June ) s
5 428 M
(2018 and) s
5 417 M
(18 June 2018) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(-----------------) s
5 384 M
(Earlier sections define various Ray Shooting Query functions on Hyperbolic curve to find appro) s
5 373 M
(ximate factors - ) s
5 362 M
(Hardy-Ramanujan, Prime Number Theorem, Baker-Harman-Pintz, Zhang, Cramer etc.,These Ray shooti) s
5 351 M
(ng functions are) s
5 340 M
(utilized as supporting preprocessing oracles to k-mergesort, local tile search, segment trees ) s
5 329 M
(based PRAM factorization algorithms - oracles locate prime factors approximately and sometimes) s
5 318 M
( exactly in sequential time of O\(loglogN\). If an oracle ray shooting query succeeds, factoriza) s
5 307 M
(tion is over in O\(loglogN\) steps with no necessity for further pixelation of hyperbolic curve ) s
5 296 M
(and mergesort/search for factors in PRAM-NC - of parallel time O\(\(logN\)^2\) or O\(\(logN\)^3\). If ) s
5 285 M
(an oracle ray shooting query is approximate, PRAM k-mergesort/search phase of factorization is) s
5 274 M
( taken up using the approximate factors queried by ray shooting as beacons - search in vicinit) s
5 263 M
(y of approximate factor should easily locate the exact factor. Therefore a factorization invol) s
5 252 M
(ving both ray shooting queries and k-mergesort/segment trees/tile search is a problem in compl) s
5 241 M
(exity class NC^A where A is a ray shooting query oracle in P or NC \(if O\(loglogN\) parallel ray) s
5 230 M
( shooting queries are made on O\(loglogN\) PRAMs in O\(1\) time\). Similar to classical NC, Quantum) s
5 219 M
( NC is the class of problems solvable in polynomial size quantum circuits \(controlled-U gates,) s
5 208 M
( controlled-not gates, Hadamard gates\) in polylogarithmic time. There exists an oracle A such ) s
5 197 M
(that P^A=BQP^A and NC^A is contained in P^A. Also BQP is contained in AWPP i.e. any quantum co) s
5 186 M
(mputation can be simulated by a GapP function f\(x\) computed by a NPTIME Turing Machine \(= numb) s
5 175 M
(er of accepting paths of x - number of rejecting paths of x\) such that:) s
5 164 M
(        Pr\(M\(x\) accepts] = f\(x\)/5^\(2*t\(x\)\)) s
5 153 M
(for a Turing Machine M\(x\) in BQP. Since NC is contained in QNC, PRAMs in NC Factorization can ) s
5 142 M
(be termed as decohered quantum gates in corresponding QNC algorithm. Since Every quantum compu) s
5 131 M
(tation can be transformed into a braid evaluated by Jones Polynomial, an oracle A of Jones Pol) s
5 120 M
(ynomial can be non-constructively shown to exist such that quantum part in a BQP Turing Machin) s
5 109 M
(e is mapped to a deterministic computation. Theorem 6.1 in reference 562.4 defines such a Jone) s
5 98 M
(s polynomial PTIME braid oracle A so that BQP is contained in P^A.) s
5 76 M
(Computational Geometric Factorization involves both Parallel and Sequential phases - Pixelatin) s
5 65 M
(g hyperbolic arc bow and k-mergesorting/segment-tree them requires parallel RAMs whereas binar) s
5 54 M
(y search of k-mergesorted/segment-tree tiles can be done by sequential binary search with no n) s
5 43 M
(ecessity for PRAMs. If each PRAM is replaced by a Quantum Gate, computational geometric factor) s
5 32 M
(ization can be done in QNC instead of NC which is contained in BQP. Following algorithm maps t) s
5 21 M
(he mergesort and search of hyperbolic tiles as below and does away with sorting and searching.) s
_R
S
%%Page: (366) 366
%%BeginPageSetup
_S
18 36 translate
/pagenum 366 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (366) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(---------------------------------------------------------------------------------) s
5 681 M
(Pixelated Hyperbolic arc bow as superposition of quantum state pixels) s
5 670 M
(---------------------------------------------------------------------------------) s
5 659 M
(Set of pixel coordinates in pixelated hyperbolic arc bow can be construed as superposed pixel ) s
5 648 M
(quantum states each of some amplitude:) s
5 637 M
(        |\(p,q\)> = B1|\(x1,y1\)> + B2|\(x2,y2\)| + ... + Bn|\(xO\(N\),yO\(N\)\)>) s
5 626 M
(for complex amplitudes Bi of O\(N\) coordinate states in pixelated hyperbolic arc. This superpos) s
5 615 M
(ition implies all the coordinates of hyperbolic arc simultaneously have certain probability of) s
5 604 M
( being the factor of N. Factorization reduces to maximizing probability of decoherence of this) s
5 593 M
( superposition to correct classical factor state |\(xl,yl\)> i.e xl*yl=N.) s
5 571 M
(Number of distinct prime factors of N = kloglogN for some constant k from Hardy-Ramanujan Theo) s
5 560 M
(rem. Set of all factors = Set of all multiplicative partitions of N. Average Probability of a ) s
5 549 M
(coordinate in pixelated hyperbolic arc to be the factor of N = O\(\(Multiplicative Partition Num) s
5 538 M
(ber of N\) / N\). But square of complex amplitude Bi^2 is the classical probability of a pixel c) s
5 527 M
(oordinate state |\(xi,yi\)>. Each state |\(xi,yi\)> is created by a quantum toffoli multiplication) s
5 516 M
( gate and requires 2*logN qubits. Amplitude Bi for each state |\(xi,yi\)> can be defined as the ) s
5 505 M
(complex number function of coordinate:) s
5 494 M
(        Bi = f\(xi,yi\) + i*g\(xi,yi\)) s
5 483 M
(Classical probability of being a factor of N = Bi^2 which is 1 for factor points. Solving Bi^2) s
5 472 M
( = 1, yields f and g. ) s
5 450 M
(Classical probability \( \(modulus\(Bi\)\)^2 \) of pixel coordinate state |\(xi,yi\)> - assumed to be ) s
5 439 M
(normalized so that) s
5 428 M
(Sum\(Bi^2\) = 1 - can be defined as below:) s
5 417 M
(        \(modulus\(Bi\)\)^2 = f\(xi,yi\)^2 + g\(xi,yi\)^2 = floor\(1 - abs\(xi*yi/N - 1\)\)) s
5 406 M
(which is 1 only if xi*yi = N, the factor point, and is 0 if xi*yi/N > 1 or xi*yi/N < 1 , the n) s
5 395 M
(on-factor points on pixelated hyperbolic arc bow, because floor\(\) makes the enclosing fraction) s
5 384 M
( to 0.) s
5 362 M
(---------------------------------------------------------------------------------) s
5 351 M
(Quantum NC equivalent of Classical PRAM-NC Computational Geometric Factorization:) s
5 340 M
(---------------------------------------------------------------------------------) s
5 329 M
(        - Input to the quantum NC circuit is the equation for hyperbola, xy=N) s
5 318 M
(        - Length of pixelated hyperbolic arc bow is O\(N\) or approximately 1.5N-1) s
5 307 M
(        - For factorization it suffices if each pixel \(p,q\) in the pixelated hyperbola is inpu) s
5 296 M
(t to a ) s
5 285 M
(        quantum gate and it is verified by all gates in parallel if pq=N) s
5 274 M
(        - Succeeding multiplication gates with pq=N find factors p,q in parallel. This is simi) s
5 263 M
(lar to) s
5 252 M
(        multiplication in modular exponentiation subroutine of Shor Factorization \(or\) a quant) s
5 241 M
(um) s
5 230 M
(        multiplication circuit similar to reference 562.7) s
5 219 M
(        - Pixelated Tiles and their pixel coordinates are found in parallel by tiling equation) s
5 208 M
( N/\(x\(x+1\)\)) s
5 197 M
(        - Each multiplication gate for p,q has 2*logN bits inputs - |p| + |q|) s
5 186 M
(        - Number of multiplication gates required < 1.5N-1 \(adheres to QNC definition if input) s
5 175 M
( size is N and) s
5 164 M
(        not logN\)) s
5 153 M
(        - No sorting and search is necessary ) s
5 142 M
(        - Modular multiplication of pixel coordinates \(p,q\) = pq mod N and verifying it to be ) s
5 131 M
(0 is sufficient to conclude p,q are divisors/factors of N. Succeeding Quantum Modular Multipli) s
5 120 M
(cation Gates have pq mod N = 0 and each modular multiplication gate is of polylogarithmic dept) s
5 109 M
(h) s
5 98 M
(        - Exact sum of tiles of pixelated hyperbolic arc bow:) s
5 87 M
(        N/\(1.2\) + N/\(2.3\) + ... N/\(\(N-k\)\(N-k+1\)\) = N*{1/1 - 1/2 + 1/2 - 1/3 + 1/3 - 1/4 + ... ) s
5 76 M
(+ 1/\(N-k\) - 1/\(N-k+1\)}) s
5 65 M
(        = N*\(1 - 1/\(N-k+1\)\) = N*\(N-k\)/\(N-k+1\)) s
5 54 M
(        But tiling ends when N=\(N-k\)\(N-k+1\) or N=N^2 - 2Nk + N + k^2 - k) s
5 43 M
(        => k^2 - k\(2N+1\) + N^2 = 0) s
5 32 M
(        \(or\) k = [\(2N+1\) +/- sqrt\(4N^2 + 4N + 1 - 4N^2\)]/2) s
5 21 M
(        => k = [\(2N+1\) +/- sqrt\(4N + 1\)]/2 ) s
5 10 M
(        => k ~ N - sqrt\(N\) + 0.5 = Approximate Number of tiles\(arrays of pixels\)) s
_R
S
%%Page: (367) 367
%%BeginPageSetup
_S
18 36 translate
/pagenum 367 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (367) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        => Sum of tile lengths = N*\(N-N+sqrt\(N\)-0.5\)/\(N-N+sqrt\(N\)+0.5\) ) s
5 681 M
(        => Sum of tile lengths = N*\(sqrt\(N\)-0.5\)/\(sqrt\(N\)+0.5\) ~ 0.999999...*N for large N) s
5 670 M
(        - Tiling phase also requires Quantum multiplication gates e.g Division in N/\(x\(x+1\)\) i) s
5 659 M
(s converted to a multiplication circuit \([BeameCookHoover] - division reduces to multiplicatio) s
5 648 M
(n\)) s
5 626 M
(References:) s
5 615 M
(-----------) s
5 604 M
(562.1 Quantum NC - https://arxiv.org/pdf/quant-ph/9808027.pdf) s
5 593 M
(562.2 Shor's Factorization simulated on GPUs \(comparison to Microsoft LIQuiD Quantum simulator) s
5 582 M
(\) - https://arxiv.org/pdf/quant-ph/9808027.pdf) s
5 571 M
(562.3 Complexity limitations on Classical Computation - [Fortnow-Rogers] - https://arxiv.org/p) s
5 560 M
(df/cs/9811023.pdf - BQP is in AWPP \(Lemma 3.2\) and P^A=BQP^A \(Theorem 4.1\)) s
5 549 M
(562.4 Approximate Counting and Quantum Computation - [M. Bordewich, M. Freedman, L. Lovasz, D.) s
5 538 M
( Welsh] - http://web.cs.elte.hu/~lovasz/morepapers/additive1.pdf - "...A classical polynomial ) s
5 527 M
(time algorithm can convert a quantum circuit for an instance of such a problem, into a braid, ) s
5 516 M
(such that the probability that the output of the quantum computation is zero, is a simple \(pol) s
5 505 M
(ynomial time\) function of the Jones polynomial of the braid at a 5th root of unity. For an exa) s
5 494 M
(ct statement of this see Freedman, Kitaev, Larsen and Wang [5], or the more detailed papers by) s
5 483 M
( Freedman, Kitaev and Wang [6], and Freedman, Larsen and Wang [7, 8]. ..." and "...The Kitaev-) s
5 472 M
(Solvay theorem, [K, S] together with the density theorem ,Freedman, Larsen and Wang [7, 8], yi) s
5 461 M
(elds an algorithm for an approximation of any gate by a braid of length polylog \(1/e\) under a ) s
5 450 M
(Jones representation. We take the number of strings m, as the size of the input, however the n) s
5 439 M
(umber of crossings in the link is the same as the number of gates in the BQP computer, which i) s
5 428 M
(s bounded by a polynomial in the input size, hence an algorithm will be polynomial with respec) s
5 417 M
(t to both measures \(or neither\)..." -  Theorem 6.1 - "Let A\(L\) be an oracle that returns the s) s
5 406 M
(ign of the Jones polynomial of the link L evaluated at e^2\317\\200i/5 . Then BQP \342\\212\\206 P^A") s
5 395 M
(562.5 Jones Polynomial, Knot Theory and Equivalence of Quantum and Classical Computation - htt) s
5 384 M
(ps://en.wikipedia.org/wiki/Jones_polynomial - related to 562.4 - Quantum part of any computati) s
5 373 M
(on can be replaced by approximate evaluation of Jones Polynomial of certain braid under a Jone) s
5 362 M
(s representation.) s
5 351 M
(562.6 Shor Quantum Factorization - [Peter Shor] - \(1995\) and \(1996\) - https://arxiv.org/abs/qu) s
5 340 M
(ant-ph/9508027 - modular exponentiation and Quantum Fourier Transform of an integer state |a>) s
5 329 M
(562.7 Quantum Karatsuba Integer Multiplication - https://arxiv.org/pdf/1706.03419.pdf) s
5 318 M
(562.8 Quantum Multiplication Modulo N Gate Example - https://www.math.ksu.edu/reu/sumar/Quantu) s
5 307 M
(mAlgorithms.pdf - Depth of multiplication gates is polylogarithmic in N.) s
5 296 M
(562.9 Log Depth Circuits for Division and Related Problems - [BeameCookHoover] - https://pdfs.) s
5 285 M
(semanticscholar.org/29c6/f0ade6de6c926538be6420b61ee9ad71165e.pdf) s
5 274 M
(562.10 Quantum Machine Learning - HHL Algorithm - https://www.scottaaronson.com/papers/qml.pdf) s
5 263 M
( - HHL solves system of linear equations Ax=B in quantum logarithmic time. Quantum RAM loads t) s
5 252 M
(he classical amplitudes of all states - Quoted excerpts - "...If the HHL algorithm could be ad) s
5 241 M
(apted to the case where \(say\) a single bi is 1 and all the others are 0, then it would contrad) s
5 230 M
(ict the impossibility of an exponential speedup for black-box quantum search, which was proved) s
5 219 M
( by Bennett, Bernstein, Brassard, and Vazirani...". This is relevant in the context of pixel s) s
5 208 M
(tate superposition above i.e if exactly one Bi corresponding to a factor point is made to 1 an) s
5 197 M
(d all others are 0, factorization immediately follows. HHL algorithm fits well in the context ) s
5 186 M
(of least squares SAT solver also which maps 3SAT clauses to system of linear equations and fin) s
5 175 M
(ds assignments approximately by solving random matrix equation, Ax=B.) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(-------------) s
5 131 M
(563. \(THEORY and FEATURE-DONE\) Random 3SAT Approximate LSQR/LSMR Solver update - Increase in A) s
5 120 M
(ccuracy) s
5 109 M
(- 19 June 2018) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-------------) s
5 76 M
(1.CNFSATSolver.py has been updated to increase the accuracy of least squares approximation of ) s
5 65 M
(SAT assignments) s
5 54 M
(by setting atol=btol=conlim=0 as prescribed by SciPy documentation in :) s
5 43 M
(https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.sparse.linalg.lsmr.html) s
5 32 M
(Also set the damp to a low value close to zero to solve the 3SAT as regularized least squares ) s
5 21 M
(problem which is) s
5 10 M
(a generalization of least squares.) s
_R
S
%%Page: (368) 368
%%BeginPageSetup
_S
18 36 translate
/pagenum 368 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (368) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(2.Random 3SAT instances of 1000 variables and Alpha=1.0 have been solved and MAXSAT approximat) s
5 681 M
(ion ratio for this) s
5 670 M
(converge to ~97% for few iterationsA) s
5 659 M
(3.This increase in accuracy slows down LSMR. But by better least squares optimization which is) s
5 648 M
( parallelizable on cloud viz., LSRN - http://web.stanford.edu/group/SOL/software/lsrn/ which i) s
5 637 M
(s recent parallel algorithm for) s
5 626 M
(solving least squares \(LSRN paper - http://web.stanford.edu/group/SOL/papers/lsrn-sisc-2014.pd) s
5 615 M
(f\) this slow down can be remedied. Invoking LSRN instead of LSMR implies SAT Solver can be exe) s
5 604 M
(cuted on cloud.) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(---------------) s
5 560 M
(564. \(THEORY and FEATURE-DONE\) SAT Solver Update - Randomized Rounding and other linear system) s
5 549 M
( of equation solvers - 21 June 2018) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(---------------) s
5 516 M
(1.SAT Solver has been updated to include a special if condition to check if Alpha=1 and direct) s
5 505 M
(ly invoke) s
5 494 M
(linear system of equations solvers instead of least squares regression solvers. Various system) s
5 483 M
( of equations) s
5 472 M
(solvers like minres,cg,solve and their variants in ScipPy were tried for number_of_clauses==nu) s
5 461 M
(mber_of_variables) s
5 450 M
( and minres was found to be the best equalling lsmr's accuracy. But they have been commented a) s
5 439 M
(nd lsmr\(\) is) s
5 428 M
(invoked with no regularization damp for Alpha=1) s
5 417 M
(2.Randomized Rounding of the fractional real assignments computed from least squares has been ) s
5 406 M
(refined. Earlier) s
5 395 M
(the rounding threshold was set to 0.5 which has been generalized to the midpoint of the assign) s
5 384 M
(ment array \(\(min + max\)/2\)) s
5 373 M
(3. This midpoint computation is important because it finds the halfway inflexion point of the ) s
5 362 M
(polynomial traversing the real assignment points. This polynomial is approximated to a step fu) s
5 351 M
(nction of 1s and 0s based on whether the assignment for a variable is above or below half-way ) s
5 340 M
(mark.) s
5 329 M
(4. Polynomial through the fractional assignment points is sinusoidal and it crosses this midpo) s
5 318 M
(int in as many places as there are 0-to-1 and 1-to-0 inflexions.) s
5 307 M
(5. Another randomized rounding scheme is also implemented by computing a pseudorandom fraction) s
5 296 M
( between 0 and 1 as) s
5 285 M
(threshold. Midpoint threshold is quite accourate and is mostly 0.5 which is on the expected li) s
5 274 M
(nes, while values) s
5 263 M
(other than 0.5 are caused because of negative values to some variables in least squares. This ) s
5 252 M
(follows the usual) s
5 241 M
(randomized rounding convention \(e.g for Set Cover\).) s
5 230 M
(6. Few Random SAT instances of 1000 variables and Alpha=1 have been computed and MAXSAT approx) s
5 219 M
(imation ratio has been found to be 97-98% which is captured in logs. In some other executions,) s
5 208 M
( this ratio touched even 98.5%) s
5 197 M
(7. Accuracy of randomized rounding threshold is crucial to maximizing MAXSAT ratio.) s
5 186 M
(8. Quantum HHL algorithm solves system of equations Ax=B in logarithmic time while previous cl) s
5 175 M
(assical solvers) s
5 164 M
(are polynomial in clauses-variables. Theoretically this SAT Solver invoking HHL on a quantum c) s
5 153 M
(omputer should be) s
5 142 M
(able to solve SAT NP-Complete problem approximately in logtime and thus in BQ-P \(or BQ-NC\).) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(-------------) s
5 98 M
(565. \(FEATURE-DONE\) Query Index and Ranking - Sorting by merit - 22 June 2018) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(-------------) s
5 65 M
(1.QueryIndexAndRank.py has been changed to sort the results queried from LSH and ThoughtNet in) s
5 54 M
(dices by) s
5 43 M
(descending order of Graph Tensor Neuron Network Intrinsic Merit. Earlier sorting was missing. ) s
5 32 M
(Two) s
5 21 M
(dictionaries have been created for LSH and ThoughtNet index rankings and are sorted descending) s
5 10 M
(.) s
_R
S
%%Page: (369) 369
%%BeginPageSetup
_S
18 36 translate
/pagenum 369 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (369) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(2.Locations of ThoughtNet Hypergraph have been updated in Indexing/) s
5 681 M
(3.Logs for the ranking have been captured in testlogs/QueryIndexAndRank.log.22June2018) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(-----------------) s
5 637 M
(566. \(THEORY\) Exact Learning of Boolean Functions\(e.g absolute CNF\) and Intrinisic Merit - 22 ) s
5 626 M
(June 2018) s
5 615 M
(- related to 529) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(-----------------) s
5 582 M
(Intrinsic Merit problem has been defined as MAXSAT problem earlier assuming there exists an ab) s
5 571 M
(solute universal) s
5 560 M
(CNF which accepts merit variable values from texts/AVs. Merit variables in this universal CNF ) s
5 549 M
(are boolean) s
5 538 M
( based on threshold: if a merit value > threshold, merit variable is 1 and 0 otherwise. For ex) s
5 527 M
(ample if graph) s
5 516 M
(tensor neuron network intrinsic merit of a text exceeds a threshold, corresponding variable "i) s
5 505 M
(ntrinsic_merit") s
5 494 M
(in universal CNF is set to 1. Texts/AVs are ranked by descending order of percentage of clause) s
5 483 M
(s satisfied in this) s
5 472 M
(universal CNF which is MAXSAT problem. Problem is how to learn this universal CNF if it exists) s
5 461 M
(. There are ) s
5 450 M
(approximate learning algorithms like PAC learning which can learn a concept class approximatel) s
5 439 M
(y correctly) s
5 428 M
(with a bounded error. Traditional exact learning model uses halving algorithm based on members) s
5 417 M
(hip and ) s
5 406 M
(equivalence queries to gradually shrink the concept class to 1 element. Number of queries requ) s
5 395 M
(ired are log|C|.) s
5 384 M
(Membership queries ask an oracle if x is in C and equivalence queries ask an oracle if f\(x\)=h\() s
5 373 M
(x\). This halving) s
5 362 M
(algorithm is analogous to interval halving proof of Bolzano-Weierstrass Theorem which states t) s
5 351 M
(hat every infinite sequence has a convergent monotone subsequence. Applying this halving proce) s
5 340 M
(dure to set of all texts and AVs couldexactly learn a universal CNF in logarithmic number of A) s
5 329 M
(ngluin model membership and counterexample/equivalence ) s
5 318 M
(queries.) s
5 296 M
(References:) s
5 285 M
(-----------) s
5 274 M
(566.1 Oracles and Queries That Are Sufficient for Exact Learning - [Nader H. Bshouty, Richard ) s
5 263 M
(Cleve, Ricard Gavaldah, Sampath Kannan and Christino Tamon] - https://ac.els-cdn.com/S00220000) s
5 252 M
(9690032X/1-s2.0-S002200009690032X-main.pdf?_tid=735940ad-7047-40d2-a9a7-2575422672c3&acdnat=15) s
5 241 M
(29665709_798fd8cba3f740826f4c3ce299cdb6c1) s
5 230 M
(566.2 Bolzano-Weierstrass theorem and its application to MARA - https://en.wikipedia.org/wiki/) s
5 219 M
(Bolzano%E2%80%93Weierstrass_theorem) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(----------------) s
5 175 M
(567. \(FEATURE-DONE\) Streaming Analytics - Facebook Graph API - Python 3.4 and facebook-sdk - 2) s
5 164 M
(9 June 2018) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(----------------) s
5 131 M
(1.Similar to Streaming_<datasource>.py for LinkedIn and Twitter, Streaming_FacebookData.py has) s
5 120 M
( been added to) s
5 109 M
(NeuronRain AsFer repositories in SourceForge,GitHub and GitLab.) s
5 98 M
(2.This imports facebook-sdk for python 3.4. This is the first python implementation on python ) s
5 87 M
(3.4.) s
5 76 M
(3.This upgrade to python 3.4 from python 2.7 is necessitated because:) s
5 65 M
(        3.1 facebook-sdk on python 2.7 requires python 2.7.9) s
5 54 M
(        3.2 But importing facebook-sdk on Python 2.7.9 raises errors related to _ssl and _hash) s
5 43 M
(lib \(md5,sha etc.,\)) s
5 32 M
(which are not by default supported by python 2.7.9) s
5 21 M
(        3.3 Enabling SSL flags in Modules/Setup.dist for python 2.7.9 non-system builds also d) s
5 10 M
(oes not resolve this error and ssl is not built along with python) s
_R
S
%%Page: (370) 370
%%BeginPageSetup
_S
18 36 translate
/pagenum 370 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (370) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        3.4 Facebook sdk supports only python 3.4 and 3.7 in 3.x) s
5 681 M
(        3.5 Python3.4 has been installed from a non standard PPA) s
5 670 M
(        3.6 VirtualEnv, EasyInstall3, PIP also do not solve the above SSL import issue) s
5 659 M
(        3.7 In python3.4 too, lot of facebook-sdk dependencies have to be git-cloned,built and) s
5 648 M
( installed \(requests, idna, certifi, chardet etc.,\) for facebook import to work) s
5 637 M
(4. Example temporary access token has been created from from https://developers.facebook.com/t) s
5 626 M
(ools/explorer/) s
5 615 M
(5. Simple name and id REST query has been done using requests and logs committed to testlogs/) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(--------------) s
5 571 M
(568. \(FEATURE-DONE\) Streaming Analytics - Facebook Graph - 2 July 2018) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(--------------) s
5 538 M
(1.Streaming_FacebookData.py has been parametrized to accept user name as commandline argument) s
5 527 M
(        $python3.4 Streaming_FacebookData.py <facebook_user>) s
5 516 M
(2.Wall Posts and Friends of a user are obtained by facebook-sdk REST) s
5 505 M
(3.Friends generator object is iterated and printed) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(---------) s
5 461 M
(569. \(THEORY and FEATURE\) SAT Solver - Discrete Fourier Transform \(FFT\) of the real assignment) s
5 450 M
(,) s
5 439 M
(Parseval/Plancherel Theorems, Semidefinite Programming Approximation and Least Squares - 3 Jul) s
5 428 M
(y 2018) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(---------) s
5 395 M
(1. SAT Solver has been updated to compute Fast Fourier Transform of the real assignment points) s
5 384 M
( for each) s
5 373 M
(random 3SAT.) s
5 362 M
(2. Discrete Fourier Transform of set of points is:) s
5 351 M
(        X\(N\) = Sum\(x\(n\) * e^\(2*pi*n*k/N\)\), k=0,1,2,...,N-1) s
5 340 M
(X\(i\) are frequencies and x\(i\) are discrete points in real assignment vector computed from Leas) s
5 329 M
(t Squares) s
5 318 M
(3. Mapping the real assignment points to frequency domain enables finding periodicity within t) s
5 307 M
(he real assignments and) s
5 296 M
(applying Parseval/Plancherel Theorems \(https://en.wikipedia.org/wiki/Discrete_Fourier_transfor) s
5 285 M
(m\)) s
5 274 M
(4. Parseval Theorem equates the inner product of two vectors to inner product of Fourier Trans) s
5 263 M
(form Frequencies.) s
5 252 M
(5. Inner product of two assignment vectors \(exact binary and real approximate - for values of ) s
5 241 M
(variables\)) s
5 230 M
(is a measure of distance between the exact \(if known\) and approximate assignments) s
5 219 M
(6. Least Square Approximation solves the system of linear equations AX = B for random 3SAT whi) s
5 208 M
(le Semidefinite) s
5 197 M
(Programming \(SDP\) solves the Convex Optimization Problem:) s
5 186 M
(                maximize/minimize: Double_Summation\(a\(i,k\)*xi * yk\)) s
5 175 M
(                Subject to Constraints: Double_Summation\(cl*xi*yk\) < bl) s
5 164 M
(7. In other words, SDP solves:) s
5 153 M
(                maximize/minimize: A*X) s
5 142 M
(                Subject to Constraints: C*X < B) s
5 131 M
(                X is a Positive Semidefinite Gramian Matrix having entries from inner product ) s
5 120 M
(space of vectors) s
5 109 M
(                \(or v*X*v^T is non-zero for real vectors v\)) s
5 98 M
(8. [Goemans-Williamson] MAXCUT Approximation algorithm - http://www-math.mit.edu/~goemans/PAPE) s
5 87 M
(RS/maxcut-jacm.pdf -Journal of the Association for Computing Machinery,vol. 42, No.6, November) s
5 76 M
(1995 - solves) s
5 65 M
(MAXCUT in ~88% by SDP.) s
5 54 M
(9. Any symmetric matrix can be approximated to nearest positive semidefinite matrix \(e.g cov_n) s
5 43 M
(earest - http://www.statsmodels.org/dev/generated/statsmodels.stats.correlation_tools.cov_near) s
5 32 M
(est.html\)) s
5 21 M
(10. There is an SDP variation of least squares, Semidefinite Least Squares, which solves the c) s
5 10 M
(onvex program:) s
_R
S
%%Page: (371) 371
%%BeginPageSetup
_S
18 36 translate
/pagenum 371 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (371) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(                minimize: |X-C|^2) s
5 681 M
(                Subject to: AX=B for positive semidefinite matrix X.) s
5 670 M
(which is similar to least squares solution for variable vector X. X is positive semidefinite b) s
5 659 M
(ecause for any real) s
5 648 M
(vector v and some assignment to X, v*X*vT is positive. Minimizing |X-C|^2 for some binary assi) s
5 637 M
(gnment C) s
5 626 M
(finds closest approximation of X to binary step function characterized by C. \(Example: https:/) s
5 615 M
(/ljk.imag.fr/membres/Jerome.Malick/Talks/08-louvain.pdf\)) s
5 604 M
(11.logs for 2000 variables and alpha=1 have been committed to testlogs/ which show usual MAXSA) s
5 593 M
(T approximation) s
5 582 M
(ratio convergence to >= 97%) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(----------------) s
5 538 M
(570. \(THEORY and FEATURE\) Computational Geometric Factorization, Ray Shooting Query Oracles, A) s
5 527 M
(BC Conjecture) s
5 516 M
(- related to 486, 527, 550, 558 and all other sections on factorization - 6 July 2018) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(----------------) s
5 483 M
(ABC Conjecture implies there exist finite number of coprime integer triples a,b,c as solutions) s
5 472 M
( to diophantine ) s
5 461 M
(equation c=a+b constrained by:) s
5 450 M
(                        log\(c\)) s
5 439 M
(        quality =       ------          < 1 + epsilon for all epsilon > 0) s
5 428 M
(                        log\(rad\(abc\)\) ) s
5 417 M
(radical\(N\) or rad\(N\) is the product of distinct prime factors of N \(square-free\).) s
5 395 M
(Gap between numbers c and a having same prime factors has been conjectured in reference 570.1 ) s
5 384 M
(as: ) s
5 373 M
(c - a > C\(epsilon\)a^\(0.5-epsilon\) which is derived from ABC Conjecture. This is contrasted aga) s
5 362 M
(inst the observed) s
5 351 M
(convergence of merit difference in Hardy-Ramanujan-PrimeNumberTheorem ray shooting query oracl) s
5 340 M
(e:) s
5 329 M
(        l*pf\(n+1\)/log\(pf\(n+1\)\) - l*pf\(n\)/log\(pf\(n\)\) = l*N/\(logN * k*loglogN\)) s
5 318 M
(which is the approximate gap between merit of n-th and \(n+1\)st prime factors pf\(n\) and pf\(n+1\)) s
5 307 M
( of an integer N.) s
5 296 M
(An example factorization and ray shooting query log has been committed which shows actual and ) s
5 285 M
(ray shooting estimates of factors in 4 of 5 algorithms \(Hardy-Ramanujan, Hardy-Ramanujan-PNT, ) s
5 274 M
(Cramer, Baker-Harman-Pintz\) which are in close agreement \(off by small distance for most facto) s
5 263 M
(rs\) and Hardy-Ramanujan-PNT estimate converges. If c=N1 and a=N2 are two integers having same ) s
5 252 M
(prime factors, previous Hardy-Ramanujan-PNT ray shooting estimate of gap between prime factors) s
5 241 M
( for N1 and N2 is:) s
5 230 M
(        l1*pf\(n+1\)/log\(pf\(n+1\)\) - l1*pf\(n\)/log\(pf\(n\)\) = l1*N1/\(logN1 * k1*loglogN1\)) s
5 219 M
(        l2*pf\(n+1\)/log\(pf\(n+1\)\) - l2*pf\(n\)/log\(pf\(n\)\) = l2*N2/\(logN2 * k2*loglogN2\)) s
5 208 M
(rewriting N1 and N2 in terms of merit difference of prime factors:) s
5 197 M
(        \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\)*logN1*k1*loglogN1 = N1 = pf1^s1 * pf2^s2 * .) s
5 186 M
(.. * pfn^sn) s
5 175 M
(        \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\)*logN2*k2*loglogN2 = N2 = pf1^t1 * pf2^t2 * .) s
5 164 M
(.. * pfn^tn) s
5 153 M
(        => N1 - N2 = c - a > C\(epsilon\)*N2^\(0.5-epsilon\) if ABC conjecture is true) s
5 142 M
(=> \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\)*\(logN1*k1*loglogN1 - logN2*k2*loglogN2\) = N1 - N2) s
5 131 M
( > C\(epsilon\)*N2^\(0.5-epsilon\)) s
5 120 M
(=> \(pf\(n+1\)/log\(pf\(n+1\)\) - pf\(n\)/log\(pf\(n\)\)\) > C\(epsilon\)*N2^\(0.5-epsilon\)/\(logN1*k1*loglogN1 ) s
5 109 M
(- logN2*k2*loglogN2\)) s
5 98 M
(which is the approximate lower bound on number of primes between two prime factors of N1 and N) s
5 87 M
(2 having same prime factors if ABC conjecture is true.) s
5 65 M
(References:) s
5 54 M
(-----------) s
5 43 M
(570.1 Gaps between integers having same prime factors - [Cochrane-Dressler] - http://www.ams.o) s
5 32 M
(rg/journals/mcom/1999-68-225/S0025-5718-99-01024-8/S0025-5718-99-01024-8.pdf - Conjecture 2 an) s
5 21 M
(d Theorem 1 - "...Conjecture 2. For any epsilon > 0 there exists a constant C\(epsilon\) such th) s
5 10 M
(at if a<c are positive integers having the same prime factors, then c \342\\210\\222 a \342\\211\245 C\(eps) s
_R
S
%%Page: (372) 372
%%BeginPageSetup
_S
18 36 translate
/pagenum 372 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (372) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ilon\)\(a^\(0.5-epsilon\)\)..." and "...Theorem 1. The abc conjecture implies Conjecture 2...."  ) s
5 681 M
(570.2 Pillai's Conjecture and ABC Conjecture - [Subbayya Sivasankaranarayana Pillai] - https:/) s
5 670 M
(/webusers.imj-prg.fr/~michel.waldschmidt/articles/pdf/abcEnVI.pdf - Difference of consecutive ) s
5 659 M
(perfect powers tends to infinity - Pillai\342\\200\\231s conjecture as a consequence of the abc Con) s
5 648 M
(jecture : if x^p != y^q, then |x^p - y^q| >= c\(e\)*max{x^p , y^q}^\(k-e\) with k = 1 - 1/p - 1/q\302) s
5 637 M
(\267 Factoring Perfect powers is special case of factorization and in previous ray shooting algor) s
5 626 M
(ithm N1=x^p and N2=x^q and both N1 and N2 have same prime factors. ) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(---------------) s
5 582 M
(571. \(FEATURE\) Streaming Facebook Analytics - Exhaustively print all wall posts of a user - 6 ) s
5 571 M
(July 2018) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(---------------) s
5 538 M
(1. Loop has been added to Streaming_FacebookData.py for printing all pages of user wall posts ) s
5 527 M
(in json) s
5 516 M
(2. logs for this have been committed to testlogs/Streaming_FacebookData.log.6July2018) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(---------------) s
5 472 M
(572. \(THEORY\) Merit Versus Fame, an example definition of Intrinsic Fitness/Merit in social ne) s
5 461 M
(tworks, some) s
5 450 M
(contradictions - 9 July 2018) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(---------------) s
5 417 M
(Intrinsic Merit-Versus-Fame/Image discrepancy is a well-studied problem in social networks and) s
5 406 M
( is the leitmotif of Intrinsic/Absolute Choice versus Majority voting theoretical complexities) s
5 395 M
( discussed at length in many sections of this draft. The populist engineering facet of this in) s
5 384 M
(cludes various definitions of intrinsic merit and fame in different disciplines\(sports,science) s
5 373 M
( etc.,\). Bianconi-Barabasi Bose-Einstein condensation phenomenon in social networks occurs whe) s
5 362 M
(n links \(particles\) accrue in some prominent fittest hub vertices \(least energy levels\). Defin) s
5 351 M
(ing what least energy implies in social networks is still an open problem. An example definiti) s
5 340 M
(on of Intrinsic Merit function for Bianconi-Barabasi least energy social network profile is de) s
5 329 M
(scribed:) s
5 307 M
(Most link-attractive social profiles fall into three disjoint categories:) s
5 296 M
(        -  Wealthy: Affluent/Businesses/Political \(W\), ) s
5 285 M
(        -  Educative: Oratory/Academic/Science/Research \(E\),) s
5 274 M
(        -  Valorous: Media/Entertainment/Sportspersons/Heroics \(V\)) s
5 252 M
(Log-Normal Fitness Attachment \(LNFA\) Function of previous three, f\(W,E,V\) = g\(W\)*h\(E\)*l\(V\) for) s
5 241 M
(med by multiplication of individual merits in three categories. When a social profile has over) s
5 230 M
(laps with 2 or all 3 of these categories, its ability to attract link increases manifold imply) s
5 219 M
(ing protean all-round nature of profile. E.g Superheroes in fiction/history were versatile and) s
5 208 M
( had two or all three. Log Normal distribution is a sum of these random variables and tends to) s
5 197 M
( Gaussian by Central Limit Theorem. It remains to define merits in individual categories:) s
5 186 M
(        -  Wealth: Income, Gravity Model based on GDP) s
5 175 M
(        -  Education: Publications, Citations, Degrees, Awards) s
5 164 M
(        -  Valour: Elo Rating, IPR ) s
5 153 M
(Metrics like HDI and SPI already incorporate mixture of these variables. ) s
5 131 M
(Log Normal summation of these three quantities therefore is factor causing links to gravitate ) s
5 120 M
(towards a vertex thereby relating to least energy as:) s
5 109 M
(        Energy of a Social Profile Vertex ~ 1/\(logW + logE + logV\) ) s
5 98 M
(=> When the log normal sum of merit random variables tends to maximum/infinity, energy of a ve) s
5 87 M
(rtex is at its nadir. On a side note, these three quantities are interdependent:) s
5 76 M
(        - Education causes Wealth i.e W is a function of E mostly though there are exceptions) s
5 65 M
(        - Valour causes Wealth i.e W is a function of V mostly though there are exceptions) s
5 43 M
(In references below, it is surmised that Fame increases linearly or exponentially with merit. ) s
5 32 M
(The two contrarian cases when 1\) Fame occurs with no merit 2\) Merit does not cause Fame, compl) s
5 21 M
(ement this educated guess and is equivalent to group decision correctness probability \(p\) defi) s
5 10 M
(ned by Condorcet Jury Theorem and Margulis-Russo Threshold when majority function has a sharp ) s
_R
S
%%Page: (373) 373
%%BeginPageSetup
_S
18 36 translate
/pagenum 373 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (373) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(transition at p=0.5. For majority to decide correctly \(or\) for Fame to coincide with merit p h) s
5 681 M
(as to be atleast 0.5. Margulis-Russo Formula equates derivative of expected value of boolean f) s
5 670 M
(unction for bias p to the Ratio of Sum of Influences of individual variables \(voters\) and Stan) s
5 659 M
(dard Deviation. In simple terms, this theoretical bound implies Fame or Majority Voting opinio) s
5 648 M
(n depends on how influential the voters are \(i.e how flipping individual preference affects gr) s
5 637 M
(oup decision outcome\). For majority voting function, this first derivative of Pr[MajorityDecis) s
5 626 M
(ion\(N\) == Good] or influence is O\(sqrt\(number_of_voters\)\) at p=0.5. Both of the previous contr) s
5 615 M
(ary scenarios occur when bias p < 0.5 which is obvious because the group is prejudiced because) s
5 604 M
( all its constituents are prejudiced. Therefore probability of this bias being less than 0.5 h) s
5 593 M
(as to be quantified:) s
5 582 M
(Probability of per voter bias p < 0.5 for all N voters = \(0.5\)^N because random variable for p) s
5 571 M
( has two values\(p >= 0.5 and p < 0.5 both equally probable\) and voting is uncorrelated which i) s
5 560 M
(s exponentially meagre though not impossible. This implies previous Fame-Merit mismatch error ) s
5 549 M
(occurs with \(0.5\)^N probability and is infact a converse of Margulis-Russo.) s
5 527 M
(References:) s
5 516 M
(-----------) s
5 505 M
(572.1 The quantitative measure and statistical distribution of fame - [Ramirez-Hagen] - https:) s
5 494 M
(//arxiv.org/pdf/1804.09196.pdf - Fame is measured by Google Hits, Google News references, Wiki) s
5 483 M
(pedia edits, Wikipedia views.) s
5 472 M
(572.2 How Famous is a Scientist - Famous to those who know us - [James P. Bagrow, Hern\302\264an D. ) s
5 461 M
(Rozenfeld, Erik M. Bollt, and Daniel ben-Avraham ] - http://people.clarkson.edu/~dbenavra/pape) s
5 450 M
(r/118.pdf - Fame increases near-exponentially with achievement/merit i.e Fame = c\(Achievement\)) s
5 439 M
(^\(epsilon\). Achievement or Intrinsic merit in science is defined as number of publications.) s
5 428 M
(572.3 Untangling Performance from Success - [Burcu Yucesoy and Albert-L\303\241szl\303\263 Barab\303\241si] - ht) s
5 417 M
(tp://barabasi.com/f/908.pdf - defines a least square fit of wikipedia references to a tennis p) s
5 406 M
(layer versus a function of his/her ATP rank, Tournament value, number of matches, rank of the ) s
5 395 M
(best opponent, Career length. - "...For example, only $\357\\230\274.\357\\230\272 million of Roger Federer\342) s
5 384 M
(\\200\\231s $\357\\230\275\357\\230\276.\357\\230\272 million reported \357\\230\272\357\\230\271\357\\233\\234\357\\230\274 income was from to) s
5 373 M
(urnament prizes [\357\\230\274\357\\233\\234], the rest came from endorsements tied to the public recognit) s
5 362 M
(ion of the athlete. Yet, Novak Djokovic, who was better ranked than Federer during \357\\230\272\357\\230) s
5 351 M
(\271\357\\233\\234\357\\230\274, received over $\357\\233\\234\357\\230\272.\357\\233\\234 million prize money but only $\357\\230) s
5 340 M
(\272\357\\233\\234 million via endorsements, about a third of Federer\342\\200\\231s purse ...") s
5 329 M
(572.4 Chess Players' Fame Versus Their Merit - [M.V. Simkin and V.P. Roychowdhury] - https://a) s
5 318 M
(rxiv.org/pdf/1505.00055.pdf -  defines a linear and exponential fit of Fame versus Elo IPR sco) s
5 307 M
(re of a Chess player. - "...This suggests that fame grows exponentially with Elo rating rather) s
5 296 M
( than linearly. ...") s
5 285 M
(572.5 Only 15 Minutes? The Social Stratification of Fame in Printed Media - [Arnout van de Rij) s
5 274 M
(t, Eran Shor, Charles Ward, and Steven Skiena] -  http://citeseerx.ist.psu.edu/viewdoc/downloa) s
5 263 M
(d?doi=10.1.1.888.1629&rep=rep1&type=pdf - "...  We measure a person\342\\200\\231s fame as the numb) s
5 252 M
(er of appearances of that person\342\\200\\231s name in newspaper records. More precisely, for ever) s
5 241 M
(y day, we count the number of distinct newspaper articles in which a name appeared ...") s
5 230 M
(572.6 Log Normal Fitness Attachment - [Shilpa Ghadgea, Timothy Killingback, Bala Sundaram and ) s
5 219 M
(Duc A. Tran] - https://www.cs.umb.edu/~duc/www/research/publications/papers/ijpeds10.pdf - "..) s
5 208 M
(.we consider it reasonable that in many complex networks each node will have associated to it ) s
5 197 M
(a quantity, which represents the property of the node to attract links, and this quantity will) s
5 186 M
( be formed multiplicatively from a number of factors....") s
5 175 M
(572.7 p-biased boolean functions analysis, Margulis-Russo Formula - http://www.cs.tau.ac.il/~a) s
5 164 M
(mnon/Classes/2016-PRG/Analysis-Of-Boolean-Functions.pdf - Section 8.4 - Equation 8.8 - Page 22) s
5 153 M
(5 - Example 8.49 and Question 8.23 \(Condorcet Jury Theorem\)) s
5 142 M
(572.8 Sybils,Collusions and Reputations - GRAFIT course material - https://gitlab.com/shriniva) s
5 131 M
(asanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComputerScienceAndMachineLearning) s
5 120 M
(/AdvancedComputerScienceAndMachineLearning.txt - PageRank majority function which is non-boole) s
5 109 M
(an peer-to-peer converged markov chain random walk voting is a generalization of Boolean Major) s
5 98 M
(ity function Margulis-Russo Threshold. Boolean majority function is equivalent to PageRank com) s
5 87 M
(puted for 2 candidate websites on \(n+2\)-vertex graph \(n user websites choose between 2 candida) s
5 76 M
(te websites - Good\(1\) and Bad\(0\), choice is fraction of outdegree from a user website\) normali) s
5 65 M
(zed to 0 \(smaller pagerank\) and 1 \(bigger pagerank\). Margulis-Russo threshold d\(Pr\(Choice=Good) s
5 54 M
(=1\)\)/dp on this PageRank version of Majority function is ratio of sum of influences of variabl) s
5 43 M
(es \(user websites\) to standard deviation which has a phase transition to Good\(1\) at per-voter ) s
5 32 M
(website bias p >= 0.5. It is obvious that bias p is inversely proportional to probability of a) s
5 21 M
( website being a Sybil - increased bias implies user votes more correctly and probability of i) s
5 10 M
(t being a Sybil decreases.) s
_R
S
%%Page: (374) 374
%%BeginPageSetup
_S
18 36 translate
/pagenum 374 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (374) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(572.9 Cascading and Thresholds in Social Networks - Chapter 8 - Six Degrees - [Duncan J.Watts]) s
5 681 M
( - Cascading is the phenomenon of deluge of acceptance of new concept/innovation in Social Net) s
5 670 M
(works. Every social profile has a threshold above which he/she accepts an innovation spread as) s
5 659 M
( a meme/fad. Probability of a user acceptance/voting for A increases sharply after more than a) s
5 648 M
( threshold of its neighbours accept/vote for A implying Herding.) s
5 637 M
(572.10 Bradley Effect and Noelle-Neumann Spiral of Silence - https://en.wikipedia.org/wiki/Spi) s
5 626 M
(ral_of_silence - Minority opinion is silenced by Majority - "...which stipulates that individu) s
5 615 M
(als have a fear of isolation ... social group or the society in general might isolate, neglect) s
5 604 M
(, or exclude members due to the members' opinions. This fear of isolation consequently leads t) s
5 593 M
(o remaining silent instead of voicing opinions...". Bradley effect in psephology is problem of) s
5 582 M
( opinion/exit polls going wrong because of this spiral of silence.) s
5 571 M
(572.11 Achievement of a Nobel Laureate defined in terms of Fame - https://www.tandfonline.com/) s
5 560 M
(doi/full/10.1080/13504851.2016.1200176) s
5 549 M
(572.12 Fame Versus Merit in Economic Networks - CPI\(Corruption Perception Index\)/Global Integr) s
5 538 M
(ity Versus Real Gross Domestic Product - https://arxiv.org/pdf/0705.0161.pdf, https://arxiv.or) s
5 527 M
(g/pdf/0710.1995.pdf - CPI\(Transparency International\) which ranks perceived corruption \(not ab) s
5 516 M
(solute\) in countries based on various surveys \(WEF etc.,\) is the counterpart of Fame/Reputatio) s
5 505 M
(n ranking for countries similar to WWW/Social Networks. GDP has been accepted as intrinsic sta) s
5 494 M
(ndard to measure wealth of a nation. These articles describe a power law distribution between ) s
5 483 M
(CPI and Foreign Direct Investment/GDP.) s
5 472 M
(572.13 Methodology of TI Corruption Perception Index - https://www.stt.lt/documents/soc_tyrima) s
5 461 M
(i/KSI_methodology_2007.pdf - Density Function for each Normalized Variable - Matching Percenti) s
5 450 M
(les and Beta Transformation - Samples, Perception and Reality - an example of Fame/Infamy corr) s
5 439 M
(elating to Merit/Demerit.) s
5 428 M
(572.14 Strength of Weak Ties - [Mark Granovetter] - https://www.cs.cmu.edu/~jure/pub/papers/gr) s
5 417 M
(anovetter73ties.pdf - Social Networks have clusters of strong ties among themseleves \(Cliques\)) s
5 406 M
( and Strength of weak tie between individuals in two separate groups determines diffusion of i) s
5 395 M
(nfluence.) s
5 384 M
(572.15 Linked - Chapter 10 - Viruses and Fads - Viruses \(Biological and Computational\), Pandem) s
5 373 M
(ics, Epidemics, Memes/Fads, Scale Free Topology \(few nodes have high degree - number_of_nodes\() s
5 362 M
(degree x\) is proportional to 1/\(\(constant\)^x\)\) ) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(----) s
5 318 M
(573. \(FEATURE\) Streaming Facebook Analytics - Comments - 10 July 2018) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(----) s
5 285 M
(For each wall post, comments object is retrieved by requests and printed) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(-----------------) s
5 241 M
(574. \(FEATURE\) DeepLearning - Reinforcement Learning - Recommender Systems - Recursive Lambda ) s
5 230 M
(Function Growth Merit - 12 July 2018) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(-----------------) s
5 197 M
(1.RecommenderSystems/Create_RecommenderSystems_Hypergraph.py has been changed similar to Thoug) s
5 186 M
(htNet/ to rank the) s
5 175 M
(hypergraph edges by both Sentiment and Graph Tensor Neuron Network Intrinsic Merit) s
5 164 M
(2.RecommenderSystems/RecommenderSystems_Hypergraph_Generated.shoppingcart3.txt has been recrea) s
5 153 M
(ted and rankings for hyperedges through hypergraph stack vertices is different from sentiment ) s
5 142 M
(scoring) s
5 131 M
(3.DeepLearning_ReinforcementLearningRecommenderSystems.py has been changed to remove creamy la) s
5 120 M
(yer computation for) s
5 109 M
(classes and all classes are lookedup in hypergraph) s
5 98 M
(4.Logs for these have been committed to RecommenderSystems/testlogs/Create_RecommenderSystems_) s
5 87 M
(Hypergraph.GraphTensorNeuronNetworkMerit.log.12July2018 and testlogs/DeepLearning_Reinforcemen) s
5 76 M
(tLearningRecommenderSystems.shoppingcart3.log.12July2018) s
5 65 M
(5.Example input is a book on quantum physics and is lookedup in Recommender Systems Hypergraph) s
5 54 M
( and matches return lot of books on quantum mechanics and physics) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(-----------------) s
5 10 M
(575. \(THEORY\) Computational Geometric Factorization and Parallel Construction of Wavelet Trees) s
_R
S
%%Page: (375) 375
%%BeginPageSetup
_S
18 36 translate
/pagenum 375 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (375) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( - 13 July 2018) s
5 681 M
(- related to 34, 486) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(-----------------) s
5 648 M
(Classical algorithm for Computational Geometric Factorization described earlier is based on st) s
5 637 M
(oring the pixelatedhyperbolic tile segments in parallelly constructed Interval Trees/Segment T) s
5 626 M
(rees and doing stabbing query for factor point N=\(p,q\) or by k-mergesort of locally sorted til) s
5 615 M
(e segments and doing binary search which are O\(logN*logN\) parallel time. Wavelet Trees are rec) s
5 604 M
(ently gaining prominence as succinct binary search tree data structure for bigdata algorithms ) s
5 593 M
(like string search, indexing etc., Wavelet Trees are binary search trees having following trai) s
5 582 M
(ts:) s
5 571 M
(        \(*\) Prerequisite is a set of symbols \(alphabets\) and sequence of symbols \(string\)) s
5 560 M
(        \(*\) Alphabets are divided into two equal sized sets encoded as 0 and 1 ) s
5 549 M
(        \(*\) At root full string is encoded as 0-1 bitmap by previous set encoding for symbols) s
5 538 M
(        \(*\) Left subtree contains first half of the parent alphabets and Right subtree the sec) s
5 527 M
(ond half and encoded as 0-1 by dividing into two sets again) s
5 516 M
(        \(*\) Previous subdivision of alphabets in each node is recursed encoded as 0 and 1 till) s
5 505 M
( single element per node is reached at leaves. ) s
5 494 M
(        \(*\) Wavelet trees have two operators: rank\(c,S,i\) and select\(c,S,j\)) s
5 483 M
(        \(*\) rank\(c,S,i\) queries number of occurrences of symbol c in string sequence S till po) s
5 472 M
(sition i. ) s
5 461 M
(        \(*\) select\(c,S,j\) queries position of j-th occurrence of symbol c in string sequence S) s
5 450 M
(.) s
5 439 M
(        \(*\) Both rank\(\) and select\(\) are logarithmic time operations traversing the tree from ) s
5 428 M
(root to leaf.) s
5 406 M
(Binary Search for Factor points N=\(p,q\) on hyperbolic tile segments can be mapped to wavelet t) s
5 395 M
(ree:) s
5 384 M
(        \(*\) Set of all segments of length N/x\(x+1\) of y-axis endpoints \(N/x, N/\(x+1\)\) are conc) s
5 373 M
(atenated into) s
5 362 M
(a single String sequence in ascending order of y-axis unsorted) s
5 351 M
(        \(*\) Each element of this unsorted concatenated string is an integer some of which coul) s
5 340 M
(d be factor points) s
5 329 M
(        \(*\) Alphabets of this string are integers in the vicinity of N in the interval [N-epsi) s
5 318 M
(lon,N+epsilon] and size of this alphabet is 2*epsilon << N ) s
5 307 M
(        \(*\) select\(N,S,j\) queries index k of j-th occurrence of N in this concatenated string ) s
5 296 M
(which is nothing but a factor point N=\(k,N/k\) and maximum of value of j = number of factors of) s
5 285 M
( N. This selection finds factor in logarithmic time.) s
5 274 M
(        \(*\) But previous algorithm requires Wavelet Tree construction on PRAMs or Multicores t) s
5 263 M
(o be in NC and there have been many parallel algorithms for wavelet tree construction mentione) s
5 252 M
(d in references.) s
5 230 M
(LevelWT parallel wavelet tree construction algorithm in 575.7 requires O\(NlogS\) work and O\(log) s
5 219 M
(S*logN\) depth \(S is the size of the alphabet and N is size of input\). For Computational Geomet) s
5 208 M
(ric Factorization by select\(\) on concatenated unsorted hyperbolic tile segments into one huge ) s
5 197 M
(string, Parallel Wavelet Tree construction requires O\(log\(Epsilon\)*logN\) depth and O\(Nlog\(Epsi) s
5 186 M
(lon\)\) work which implies requiring O\(N/logN\) PRAM processors. This is far better polylogarithm) s
5 175 M
(ic depth bound than parallel k-mergesort/interval tree/segment tree which require O\(logN*logN\)) s
5 164 M
( parallel time \(depth\) minimum. No necessity for sorting the hyperbolic segments is another ad) s
5 153 M
(vantage and Wavelets can store huge strings suitable for factoring very large integers - Each ) s
5 142 M
(concatenated unsorted hyperbolic segments string is O\(N\).) s
5 120 M
(References:) s
5 109 M
(-----------) s
5 98 M
(575.1 Parellel Construction of Wavelet Trees on Multicore Architectures - [Sepulveda \302\267 Erick ) s
5 87 M
(Elejalde \302\267 Leo Ferres \302\267 Diego Seco] - https://arxiv.org/pdf/1610.05994.pdf) s
5 76 M
(575.2 Parallel lightweight wavelet tree, suffix array and FM-Index construction - [Labeit et a) s
5 65 M
(l] - https://people.csail.mit.edu/jshun/JDA2017.pdf - Parallel Cilkplus Implementation : https) s
5 54 M
(://github.com/jlabeit/wavelet-suffix-fm-index) s
5 43 M
(575.3 Wavelet Trees for All - [Navarro] - https://www.dcc.uchile.cl/~gnavarro/ps/cpm12.pdf) s
5 32 M
(575.4 Improved Parallel Construction of Wavelet Trees and Rank/Select - [Julian Shun] - https:) s
5 21 M
(//arxiv.org/pdf/1610.03524.pdf) s
5 10 M
(575.5 Wavelet Trees and RRR Succinct Data Structure for O\(1\) rank\(\) - http://alexbowe.com/wave) s
_R
S
%%Page: (376) 376
%%BeginPageSetup
_S
18 36 translate
/pagenum 376 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (376) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(let-trees/ - Each node in Wavelet Tree invokes RRR for O\(1\) rank computation per node) s
5 681 M
(575.6 RRR - Succinct Indexable Dictionaries with Applications to Encoding k-ary Trees, Prefix ) s
5 670 M
(Sums and Multisets - [Rajeev Raman, Venkatesh Raman, S. Srinivasa Rao] - https://arxiv.org/pdf) s
5 659 M
(/0705.0552.pdf - Succinct Data Structure for computing rank\(\) and select\(\) of a bitmap in O\(1\)) s
5 648 M
( time. Bitmap is divided into blocks and sets of blocks\(superblocks\). For each block, rank is ) s
5 637 M
(computed and stored in a class-offset two level lookup dictionary where class is the rank of t) s
5 626 M
(he block and offset is index into set of permutations for that block. Superblocks add the rank) s
5 615 M
(s of the blocks. ) s
5 604 M
(575.7 Shared Memory Parallelism Can Be Simple, Fast and Scalable - [Julian Shun] - http://repo) s
5 593 M
(rts-archive.adm.cs.cmu.edu/anon/2015/CMU-CS-15-108.pdf - Theorem 34 - Section 14.4.1 and Page ) s
5 582 M
(10 footnote 6 on NC - "...Polylogarithmic-depth algorithms are also desirable for computationa) s
5 571 M
(l complexity reasons, as they fall in the class NC \(Nick\342\\200\\231s Class\) containing problems ) s
5 560 M
(that can be solved on circuits with polylogarithmic depth and polynomial size [15] ...") s
5 549 M
(575.8 Wavelet Tree in Computational Geometry - [Meng He] - Planar Point Location - https://pdf) s
5 538 M
(s.semanticscholar.org/f32b/bece8f1cd11e5c50acab532b41aaac34f8e0.pdf - "...M\303\244kinen et al. [54]) s
5 527 M
( showed that a wavelet tree can be used to support orthogonal range counting and reporting for) s
5 516 M
( n points on an n \303\\227 n grid, when the points have distinct x-coordinates \(this restriction ) s
5 505 M
(can be removed through a reduction [14]\). To construct a wavelet tree for such a point set, we) s
5 494 M
( conceptually treat it as a string S of length n over alphabet [n], in which S[i] stores the y) s
5 483 M
(-coordinate of the point whose x-coordinate is i. Thus Figure 1 can also be considered as a wa) s
5 472 M
(velet tree constructed for 8 points on an 8 by 8 grid, and this point set is given in the capt) s
5 461 M
(ion of the figure ..." - "... Fig. 1. A wavelet tree constructed for the string 35841484 over ) s
5 450 M
(an alphabet of size 8.This is also a wavelet tree constructed for the following point set on a) s
5 439 M
(n 8 by 8 grid:{1, 3}, {2, 5}, {3, 8}, {4, 4}, {5, 1}, {6, 4}, {7, 8}, {8, 4}..." - Previous Co) s
5 428 M
(mputational Geometric Factorization algorithm exactly applies this and construes set of points) s
5 417 M
( of hyperbolic arc on 2 dimensional plane as single huge string.) s
5 406 M
(575.9 Wavelet Tree for Computational Geometric Planar Range Search in 2 dimensions - https://w) s
5 395 M
(ww.researchgate.net/profile/Christos_Makris2/publication/266871959_Wavelet_trees_A_survey/link) s
5 384 M
(s/5729c5f708ae057b0a05a885/Wavelet-trees-A-survey.pdf?origin=publication_detail - "... Therefo) s
5 373 M
(re,  consider  a  set  of  points  in  the  xy-plane  with  the  x- and  y-coordinates taking ) s
5 362 M
(values in {1,\342\\200\246,n}; assume without loss of generality that no two points share the same x-) s
5 351 M
( and  y-coordinates, and that each value in {1,\342\\200\246,n} appears as a x- and y- coordinate.  W) s
5 340 M
(e need a data structure in order to count the points that are in a range [lx, rx]  \303\\227  [by,) s
5 329 M
( uy] in time O\(logn\), and permits the  retrieval of each of these points in  O\(logn\) time. ...) s
5 318 M
( this structure is essentially equivalent to the wavelet tree. The structure is a perfect bina) s
5 307 M
(ry tree, according to the x\342\\200\\223coordinates of the search points,  with each node of  the ) s
5 296 M
(tree storing its  corresponding set  of points ordered according to the y-coordinate. In this ) s
5 285 M
(way the tree mimics the distinct phases of a mergesort procedure that sorts the points accordi) s
5 274 M
(ng to the  y-coordinate,  assuming  that  the  initial  order  was  given  by  the  x-coordina) s
5 263 M
(te. ..." - In the PRAM k-mergesort version of computational geometric factorization \(http://so) s
5 252 M
(urceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveForIntegerFacto) s
5 241 M
(rization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.tex/download\) 2 dimensio) s
5 230 M
(nal plane which has the hyperbolic curve is divided into logN rectangles of length N/logN and ) s
5 219 M
(hyperbolic point-sets in each of these rectangles are sorted and searched for factor points. W) s
5 208 M
(avelet tree exactly applies to this rectangular range search and can retrieve a factor point f) s
5 197 M
(rom hyperbolic arc point set in O\(logN\) time per rectangle. For logN rectangles, time to find ) s
5 186 M
(factors is O\(logN*logN\). As mentioned in the reference, Wavelet Tree mimics sorting the points) s
5 175 M
(. But this 2-dimensional Wavelet tree requires parallel multicore construction NC algorithms m) s
5 164 M
(entioned earlier for logarithmic depth.) s
5 153 M
(575.10 Wavelet Tree in Computational Geometry - Range Report - [Travis Gagie, Gonzalo Navarro,) s
5 142 M
( Simon J. Puglisi] - https://ac.els-cdn.com/S0304397511009625/1-s2.0-S0304397511009625-main.pd) s
5 131 M
(f?_tid=bb9ebcde-9e40-41b4-8327-4b9ed4e2fb57&acdnat=1536661119_222f9c6a5423840eec8e09f8107d3f71) s
5 120 M
( - report points in a rectangular area in logarithmic time. As mentioned in previous reference) s
5 109 M
(, point in each rectangle bounding a pixelated hyperbolic point-set can be retrieved in logari) s
5 98 M
(thmic time e.g query factor point N=\(p,q\) on the point-set.) s
5 87 M
(575.11 Functional Approach to Data Structures and their use in Multi-dimensional Searching - [) s
5 76 M
(Bernard Chazelle] -) s
5 65 M
( https://www.cs.princeton.edu/~chazelle/pubs/FunctionalDataStructures.pdf - Data structure whi) s
5 54 M
(ch inspired wavelet) s
5 43 M
( tree in geometric search - M-Structures \(Mergesort-Structures\)) s
5 32 M
(575.12 Space Efficient Data Analysis Queries on Grids - [Gonzalo Navarro, Yakov Nekrich, Lu\303\255s) s
5 21 M
( M.S. Russo] - https://ac.els-cdn.com/S0304397512010742/1-s2.0-S0304397512010742-main.pdf?_tid) s
5 10 M
(=fa66c1a6-518d-4fd1-b6f3-59720d2736fa&acdnat=1537341599_ebf10ba8401e952f49aa06f5168192ba - Spa) s
_R
S
%%Page: (377) 377
%%BeginPageSetup
_S
18 36 translate
/pagenum 377 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (377) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ce efficient representation of point-sets on 2-dimensional grid) s
5 681 M
(575.13 Succinct Orthogonal Range Search Structures on a Grid with Applications to Text Indexin) s
5 670 M
(g - [Prosenjit Bose, Meng He, Anil Maheshwari, and Pat Morin] - https://pdfs.semanticscholar.o) s
5 659 M
(rg/3d28/169f7c1524cf87c9215b61d536939ae5841a.pdf - Orthogonal range reporting of points in a r) s
5 648 M
(ectangle - "Lemma 8. Let N be a set of points from the universe M = [1..n]\303\\227[1..n], where n) s
5 637 M
( = |N|. N can be represented using n lg n + o\(n lg n\) bits to support orthogonal range reporti) s
5 626 M
(ng in O\(k lg n/ lg lg n\) time, where k is the size of the output....". This implies each hyper) s
5 615 M
(bolic point in rectangle of width N/logN in http://sourceforge.net/projects/acadpdrafts/files/) s
5 604 M
(DiscreteHyperbolicPolylogarithmicSieveForIntegerFactorization_PRAM_TileMergeAndSearch_And_Stir) s
5 593 M
(ling_Upperbound_updateddraft.pdf/download containing pixelated hyperbolic point-sets can be re) s
5 582 M
(ported in sub-logarithmic time \(k=1\) independent of other rectangles thereby obviating k-merge) s
5 571 M
(sort of the tile segments \(or mimicking it\). ) s
5 560 M
(575.14 Succinct Datastructure for Multidimensional Orthogonal Range Searching - [Ishiyama-Sada) s
5 549 M
(kane] - https://www.computer.org/csdl/proceedings/dcc/2017/6721/00/07921922.pdf - kd-tree exam) s
5 538 M
(ple for orthogonal range reporting - Figure 1.) s
5 527 M
(  ) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(------------------) s
5 494 M
(576. \(FEATURE\) Spark Streaming - Java 1.8 - Spark Java Upgrade to 2.3 and Some Structured Stre) s
5 483 M
(aming ) s
5 472 M
(Enhancements - 17 July 2018) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(------------------) s
5 439 M
(1. Spark Generic Streaming Java Implementation has been compiled on Spark 2.3 upgraded from Sp) s
5 428 M
(ark 2.1 and sparkgenericstreaming.jar has been repackaged ) s
5 417 M
(2. JavaPairDStream code which was commented earlier has been uncommented to return Word Count ) s
5 406 M
(instead of Words) s
5 395 M
(3. Structured Streaming usecase example in https://spark.apache.org/docs/latest/structured-str) s
5 384 M
(eaming-programming-guide.html for website advertisement analytics has been implemented by comp) s
5 373 M
(uting timestamp of each word occurrence along with its count) s
5 362 M
(4. Word.java has been changed for doing get/set of Time,Count and Word) s
5 351 M
(5. DataFrame schema has been changed to Word, Count and Timestamp instead of just Word.) s
5 340 M
(6. This Structured Streaming DataFrame prints periodically changing tables of word occurrences) s
5 329 M
(, frequencies and timestamp as a tabular column.) s
5 318 M
(7. JavaPairDStream still does not have Java Pair support but only scala.Tuple2.) s
5 296 M
(8. Commandline for spark-submit has been changed for jsoup: /home/kashrinivaasan/spark-2.3.0-b) s
5 285 M
(in-hadoop2.7/bin/spark-submit --jars /home/kashrinivaasan/jdk1.8.0_171/lib/jsoup-1.11.3.jar --) s
5 274 M
(class SparkGenericStreaming --master local[2] sparkgenericstreaming.jar  "https://twitter.com/) s
5 263 M
(search?f=tweets&vertical=news&q=Chennai&src=typd") s
5 241 M
(9. CLASSPATH for spark 2.3 has been changed as for catalyst, scala-reflect: /home/kashrinivaas) s
5 230 M
(an/spark-2.3.0-bin-hadoop2.7/jars/spark-streaming_2.11-2.3.0.jar:.:/home/kashrinivaasan/spark-) s
5 219 M
(2.3.0-bin-hadoop2.7/jars/scala-library-2.11.8.jar:/home/kashrinivaasan/spark-2.3.0-bin-hadoop2) s
5 208 M
(.7/jars/spark-sql_2.11-2.3.0.jar:/home/kashrinivaasan/spark-2.3.0-bin-hadoop2.7/jars/spark-cor) s
5 197 M
(e_2.11-2.3.0.jar:/home/kashrinivaasan/jdk1.8.0_171/lib/jsoup-1.11.3.jar:/home/kashrinivaasan/s) s
5 186 M
(park-2.3.0-bin-hadoop2.7/jars/spark-catalyst_2.11-2.3.0.jar:/home/kashrinivaasan/spark-2.3.0-b) s
5 175 M
(in-hadoop2.7/jars/scala-reflect-2.11.8.jar:/home/kashrinivaasan/jdk1.8.0_171/bin:/usr/local/sb) s
5 164 M
(in:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin) s
5 142 M
(10. Example logs for streamed news analysis has been committed to testlogs/) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(----------------) s
5 98 M
(577. \(THEORY and FEATURE\) Computational Geometric Factorization and its Pell Diophantine \(Comp) s
5 87 M
(lement Diophantine of Prime Valued Polynomials\) - Updates - 18 July 2018) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(----------------) s
5 54 M
(1. DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been updated to persi) s
5 43 M
(st the factors) s
5 32 M
(found to a JSON file \(json.dump\(\) and json.load\(\)\).) s
5 21 M
(2. Aggregating factors found by multiple Spark executors requires defining a new Spark Broadca) s
5 10 M
(st Accumulator) s
_R
S
%%Page: (378) 378
%%BeginPageSetup
_S
18 36 translate
/pagenum 378 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (378) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(class which appends a factor to already existing accumulator value globally) s
5 681 M
(3. complement.py has been updated for solving both directions of Pell-Factoring \(for D=1 and N) s
5 670 M
( > 1\):) s
5 659 M
(        3.1 Pell Equation to Factoring: Solves Pell equation x^2-y^2=N for D=1 and finds facto) s
5 648 M
(rs \(x+y\) and \(x-y\) in exponential time \(or between polynomial and exponential - http://www.mat) s
5 637 M
(h.leidenuniv.nl/~psh/ANTproc/01lenstra.pdf\)) s
5 626 M
(        3.2 Factoring to Pell Equation: Computes all factors \(p,q\) of N by PRAM Computational ) s
5 615 M
(Geometric Factorization and finds x and y in Pell Equation as: x=\(p+q\)/2 and y=\(p-q\)/2. This s) s
5 604 M
(olves a special case of Pell Equation in classical NC for D=1 \(for generic, only quantum polyn) s
5 593 M
(omial time algorithms are known so far\)) s
5 582 M
(4. Logs for these have been committed to testlogs/DiscreteHyperbolicFactorizationUpperbound_Ti) s
5 571 M
(leSearch_Optimized.JSONPersistence.18July2018 and testlogs/complement.PellEquation.SolvedByPRA) s
5 560 M
(MNCFactoring.18July2018) s
5 549 M
(5. Ray Shooting Oracle shows some exact and close ray shooting of factors. For simple Hardy-Ra) s
5 538 M
(manujan ray shooting factorization requires only O\(loglogN\) + O\(log\(N/loglogN\)*log\(N/loglogN\)\)) s
5 527 M
( + O\(log\(N/loglogN\)\) time to find a factor because prime factors are O\(loglogN\) and distance b) s
5 516 M
(etween any two prime factors is O\(N/loglogN\).) s
5 505 M
(6. Hyperbolic arc bow for this x-axis distance is sufficient to locate a factor. K-mergesort/S) s
5 494 M
(egment-tree of this subset is O\(log\(N/loglogN\)*log\(N/loglogN\)\) and binary search is O\(log\(N/lo) s
5 483 M
(glogN\)\).) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(------------) s
5 439 M
(578. \(FEATURE\) ConceptNet 5.6 Client Update - Common Ancestor Algorithm rewrite for path betwe) s
5 428 M
(en concepts) s
5 417 M
(- 19 July 2018) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(------------) s
5 384 M
(1. ConceptNet 5.6 provides a REST endpoint /query for finding connections between two concepts) s
5 373 M
( which has been) s
5 362 M
(wrapped by a new function conceptnet_path\(\)) s
5 351 M
(2. Common Ancestor Algorithm for finding distance betwen two concepts has been rewritten to cr) s
5 340 M
(eate a NetworkX) s
5 329 M
(subgraph from the edges connecting two concepts. Function conceptnet_distance\(\) has been renam) s
5 318 M
(ed to conceptnet_least_common_ancestor_distance\(\)) s
5 307 M
(3. Loop iterating over cartesian product has been split into 2 loops which grow from two oppos) s
5 296 M
(ite directions) s
5 285 M
(\(concept1, --- \) and \(--- ,concept2\) and intersect at common ancestors.) s
5 274 M
(4. Edges recursively seen by /related REST query are collected in a list and a NetworkX DiGrap) s
5 263 M
(h is created from) s
5 252 M
(it which has all paths between concept1 and concept2) s
5 241 M
(5. Shortest path on this subgraph yields the shortest distance and path between concept1 and c) s
5 230 M
(oncept2 and thus passes via the least common ancestor between two concepts) s
5 219 M
(6. Logs for this have been captured in testlogs/ConceptNet5Client.log.19July2018 which show co) s
5 208 M
(nceptnet_least_common_ancestor_distance\(\) computes deeper paths than /query) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(---------------) s
5 164 M
(579. \(THEORY and FEATURE\) SAT Solver Update - some refactoring, and replace=True - 20 July 201) s
5 153 M
(8) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(---------------) s
5 120 M
(1.CNFSATSolver.py has been refactored for invoking Uniform and Non-uniform choice based on Var) s
5 109 M
(iables==Clauses) s
5 98 M
( or Variables != Clauses and lsmr\(\) invocation has been changed to remove regularized LSQR) s
5 87 M
(2.replace=False has been set to replace=True in np.random.choice\(\) for Uniform choice of rando) s
5 76 M
(m 3SAT variables) s
5 65 M
(\(and everywhere else\). For very long time replace was set to False) s
5 54 M
(3.logs for this have been committed to testlogs/CNFSATSolver.2000VariablesAlpha1.0.log.20July2) s
5 43 M
(018 and) s
5 32 M
(MAXSAT approximation ratio for few iterations ranges from ~95% to ~99% \(logs for 98.25% have n) s
5 21 M
(ot been committed\)) s
_R
S
%%Page: (379) 379
%%BeginPageSetup
_S
18 36 translate
/pagenum 379 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (379) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(---------------) s
5 670 M
(580. \(THEORY\) Random Matrix Least Square SAT Solver, kSAT Sharp Threshold and Friedgut Theorem) s
5 659 M
(, ThoughtNet ) s
5 648 M
(Hypergraph as k-SAT problem, TextGraph and Social Network Property Testing - 26 July 2018 - re) s
5 637 M
(lated to 453) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(---------------) s
5 604 M
(Margulis-Russo Threshold and Condorcet Jury Theorem in the context of Sharp Threshold of Major) s
5 593 M
(ity Function have) s
5 582 M
(been extensively described earlier. Random Matrix Least Squares SAT Solver has been analyzed a) s
5 571 M
(nd distribution for) s
5 560 M
(choosing a literal has been derived as 1/sqrt\(m*n\). Similar to Majority Function Sharp Thresho) s
5 549 M
(lds exist for) s
5 538 M
(kSAT formulae from Friedgut's Theorem which is stated as:) s
5 527 M
(        The satisfiability property for random k-CNF has a sharp threshold, i.e. there exists ) s
5 516 M
(p' such that for any epsilon > 0, ) s
5 505 M
(        \302\265p\(A\) \342\\206\\222 \( 1 if p \342\\211\244 \(1 \342\\210\\222 epsilon\)p', 0 if p \342\\211\245 \(1 + epsilon\)p) s
5 494 M
(' \)) s
5 483 M
(        where p' = alpha\(n\)*n/N.) s
5 472 M
(probability of choosing a clause p is \(M=Number of clauses in a random kSAT\)/\(N=All possible c) s
5 461 M
(lauses in a random kSAT\). Number of all possible clauses in a random kSAT = N = nCk*2^k and al) s
5 450 M
(pha = M/n \(n is number of variables\) => p = \(alpha*n\)/N.) s
5 428 M
(Probability of choosing a random 3SAT clause in Random Matrix SAT Solver p = [1/sqrt\(mn\)]^3 = ) s
5 417 M
(1/\(\(mn\)^1.5\). From Friedgut's Theorem number of satisfied clauses increase if p <= \(1-epsilon\)) s
5 406 M
(p'. This leads to inequality:) s
5 395 M
(        1/\(mn\)^1.5 <= \(\(1-epsilon\)alpha\(n\)*n\)/N) s
5 384 M
(        => 1/\(mn\)^1.5 <= [\(\(1-epsilon\)alpha\(n\)*n\)*6*\(n-3\)!]/\(8*n!\) from N = nC3*2^3) s
5 373 M
(        Simplifying reduces to:) s
5 362 M
(        1/\(mn\)^1.5 <= [\(\(1-epsilon\)alpha\(n\)\)*0.75*]/\(\(n-1\)\(n-2\)\) from N = nC3*2^3) s
5 340 M
(But mn=alpha\(n\)*n^2 substituting which reduces the previous inequality to:) s
5 329 M
(        [\(n-1\)\(n-2\)/\(n^3*\(1-epsilon\)*0.75\)]^0.4 <= alpha\(n\)) s
5 307 M
(Example - For n=10 and alpha\(n\)=4.267 previous inequality becomes:) s
5 296 M
(        0.39165/\(1-epsilon\)^0.4 <= alpha\(n\)) s
5 285 M
(        => epsilon <= 0.6154) s
5 274 M
(implying a sharp thresold to increased number of satisfied clauses.) s
5 252 M
(Related note: Sharp Thresholds in k-SAT have some applications in graph representation of text) s
5 241 M
(s e.g Definition graphs, ThoughtNet Hypergraph. Any random k-SAT formula can be represented as) s
5 230 M
( a hypergraph \(Factor graph\) of variables as vertices and clauses as hyperedges. ThoughtNet hy) s
5 219 M
(pergraph is a Factor graph for some k-SAT and extracting the k-SAT from ThoughtNet translates ) s
5 208 M
(the Contextual Multi Armed Bandit ThoughtNet to a random kSAT instance. Graph representation o) s
5 197 M
(f texts can be queried for various properties e.g number of matchings, triangles, connected co) s
5 186 M
(mponents which extract pattern in the meaning of text. For example, Margulis-Russo threshold i) s
5 175 M
(s a graph property threshold of atleast n\(n-1\)/2 random edges between n vertices in a random g) s
5 164 M
(raph where each edge is created with probability p. Similar threshold holds for Social Network) s
5 153 M
( Random graphs.) s
5 131 M
(References:) s
5 120 M
(-----------) s
5 109 M
(580.1 Thresholds in Random Graphs and k-SAT - [Emmanuel Abbe] - https://pdfs.semanticscholar.o) s
5 98 M
(rg/d862/14a9e02c3749ca92515b592f2fdb38710b45.pdf - Proof of Margulis-Russo Threshold \(Lemma 2\)) s
5 87 M
(, Sharp Threshold of k-SAT and Friedgut Theorem \(Section 6 - Theorem 7\) ) s
5 76 M
(580.2 Hunting for Sharp Thresholds - [Ehud Friedgut] - http://www.ma.huji.ac.il/~ehudf/docs/su) s
5 65 M
(rvey.ps - "...Much like water that freezes abruptly as its temperature drops below zero the st) s
5 54 M
(ructure of the random graph quickly changes from a primordial soup of small tree-like connecte) s
5 43 M
(d components to a graph in which the giant component, one of linear size, captures a constant ) s
5 32 M
(proportion of the vertices...." - Erdos-Renyi edge probability threshold in random graphs has ) s
5 21 M
(close resemblance to Bose-Einstein condensation in networks.) s
_R
S
%%Page: (380) 380
%%BeginPageSetup
_S
18 36 translate
/pagenum 380 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (380) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(-----------------) s
5 670 M
(581. \(THEORY\) Rice Theorem, Complement Diophantines, Program Analysis, SAT Solver and Undecida) s
5 659 M
(bility of ) s
5 648 M
(Non-trivial properties of Turing Machines - 30 July 2018 - related to 166, 471) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(----------------- ) s
5 615 M
(Draft updates to:) s
5 604 M
(-----------------) s
5 593 M
(1. Decidability of Complement Functions \(2011\) - Section on Rice Theorem - https://arxiv.org/a) s
5 582 M
(bs/1106.4102v1) s
5 571 M
(-------------------------------) s
5 560 M
(Rice Theorem implies every non-trivial property of Turing Machines are undecidable. Non-trivia) s
5 549 M
(l property is defined as below.) s
5 527 M
(For a non-trivial subset S of recursively enumerable languages which is a non-empty proper sub) s
5 516 M
(set of all recursively enumerable languages RE\(trivial subsets are empty-set and RE\):) s
5 505 M
(        581.1 Turing Machine M which accepts a language in S) s
5 494 M
(        581.2 Turing Machine M' which accepts a language in complement of S \(RE \\ S\) ) s
5 472 M
(Previous proofs of undecidability of complement diophantines by Post Correspondence Problem an) s
5 461 M
(d MRDP theorem are devoted only to the question of existence of a complement function. Since a) s
5 450 M
(ll languages in RE are diophantine, languages which are recursively enumerable but not recursi) s
5 439 M
(ve do not have accept/reject halting Turing Machine to decide diophantine polynomial represent) s
5 428 M
(ation. But Rice Theorem applies in a different setting: Once the set S and its complement RE \\) s
5 417 M
( S are known, it is undecidable if an arbitrary Turing Machine M accepts a language in S or RE) s
5 406 M
( \\ S. In terms of equivalence of RE and Diophantine Equations, it is undecidable if an arbitra) s
5 395 M
(ry Diophantine Equation represents a set in S or its complement in RE \\ S i.e. Given a \(comple) s
5 384 M
(ment\) diophantine D and 2 complementary sets in RE \(disjoint set cover of RE\) it is undecidabl) s
5 373 M
(e to decide which set in S or RE \\ S are values of diophantine D which is the converse directi) s
5 362 M
(on of existence of complement diophantine. ) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(----------------) s
5 318 M
(PhD Thesis Proposal \(2011\) - Sections on Program Comprehension - https://sites.google.com/site) s
5 307 M
(/kuja27/PhDThesisProposal.pdf - Theoretical Answers to some questions in it:) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(----------------) s
5 274 M
(For the same reason, Comprehending a Program behaviour is a non-trivial property X which asks ) s
5 263 M
("Does the Code do X?". Translating Code to Boolean Formula and applying a SAT Solver \(as done ) s
5 252 M
(in SATURN Program Analyzer\) is also a non-trivial property: "Does the Code Satisfy the 3SAT?".) s
5 241 M
( Similarly automated debug analytics of code is undecidable too. Software solutions to these a) s
5 230 M
(re only approximations.) s
5 208 M
(A circular timerwheel hashmap of dynamic sets of timeout clockticks to queues of processes - S) s
5 197 M
(urvival Index Timeout - has been applied to OS Scheduler in https://github.com/shrinivaasanka/) s
5 186 M
(Grafit/blob/master/course_material/NeuronRain/AdvancedComputerScienceAndMachineLearning/Advanc) s
5 175 M
(edComputerScienceAndMachineLearning.txt which estimates a non-trivial undecidable property app) s
5 164 M
(roximately - Worst Case Execution Time of a process.) s
5 142 M
(Licensing Violation is a great problem in Open Source Software \(advertently or inadvertently\) ) s
5 131 M
(and Software Similarity Detection provides solutions to identify similar source codes. Mostly ) s
5 120 M
(available Similarity Detectors parse function and variable names in two source trees and compa) s
5 109 M
(re similarity but rarely compare the control flow graphs.But Frequent Subgraph Mining of SATUR) s
5 98 M
(N Control Flow Graphs \(static\) and Valgrind/Callgrind/KCachegrind Call Graphs \(dynamic\) in Neu) s
5 87 M
(ronRain AsFer takes it further solving similarity detection holistically. Third-party Graph Is) s
5 76 M
(omorphism Detectors can also be applied on these compiletime and runtime graphs. NeuronRain As) s
5 65 M
(Fer also provides indexing of source code and pairwise similarity by Latent Semantic Analysis.) s
5 54 M
( ) s
5 32 M
(References:) s
5 21 M
(----------) s
5 10 M
(581.3 Rice Theorem applications in Programming - http://ai.cs.unibas.ch/_files/teaching/fs16/t) s
_R
S
%%Page: (381) 381
%%BeginPageSetup
_S
18 36 translate
/pagenum 381 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (381) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(heo/slides/theory-d08.pdf - Every question on comprehending Programs is undecidable) s
5 681 M
(581.4 Mortality Problem/Halting Problem Undecidability Proof of Rice Theorem - http://people.s) s
5 670 M
(eas.harvard.edu/~cs125/fall14/lec17.pdf ) s
5 659 M
(581.5 Approximate Program Analysis - https://cs.au.dk/~amoeller/spa/1%20-%20TIP.pdf - Exact Pr) s
5 648 M
(ogram Analysis is undecidable) s
5 637 M
(581.6 OSSPolice - Identifying Open-Source License Violation and 1-day Security Risk at Large S) s
5 626 M
(cale - [Ruian Duan, Ashish Bijlani, Meng Xu, Taesoo Kim, Wenke Lee] - https://acmccs.github.io) s
5 615 M
(/papers/p2169-duanA.pdf) s
5 604 M
(581.7 OSSPolice - https://github.com/osssanitizer/osspolice) s
5 593 M
(581.8 Bliss - Graph Isomorphism Detector - http://www.tcs.hut.fi/Software/bliss/) s
5 582 M
(581.9 Program Analysis - Analysis of Control Statements - expected and variance of execution t) s
5 571 M
(imes and laplace transforms - Appendix E - Probability and Statistics, Queueing, Reliability a) s
5 560 M
(nd Computer Science - [Kishore Shridharbhai Trivedi, Duke University]) s
5 549 M
(581.10 Program Analysis - JRF self-study - 2008 Course Notes - [Madhavan Mukund, CMI and Srira) s
5 538 M
(m Rajamani, Microsoft Research] - Pointer Analysis - Andersen and Steensgaard algorithms creat) s
5 527 M
(ing points-to graphs - https://www.cs.cmu.edu/~aldrich/courses/15-819O-13sp/resources/pointer.) s
5 516 M
(pdf - Graph Mining algorithms can be applied to points-to graphs \(static\)) s
5 505 M
(581.11 Comparing Call Graphs - [Lohtak] - https://plg.uwaterloo.ca/~olhotak/pubs/paste07.pdf) s
5 494 M
(581.12 Principles of Program Analysis - [Flemming Nielsen-Hanne Riis Nielsen-Chris Hankin] - h) s
5 483 M
(ttps://books.google.co.in/books?id=YseqCAAAQBAJ&printsec=frontcover&dq=nielsen+nielsen+hankin&) s
5 472 M
(hl=en&sa=X&ved=0ahUKEwiki_-gsOXfAhUPeysKHWpmA1gQ6AEIKjAA#v=onepage&q&f=false - Interprocedural) s
5 461 M
( Analysis - Section 2.5.4 Call Strings as Context and Examples 2.33 and 2.37 - function call s) s
5 450 M
(tacks or paths in dynamic call graphs can be formalized as unbounded call strings which are de) s
5 439 M
(fined by concatenation of values of transfer functions for each entry and exit\(return\) of func) s
5 428 M
(tions invoked along a path in call graph.) s
5 417 M
(581.13 Survey of Tools for estimation of Worst Case Execution Time of a program - Fig. 5 Bound) s
5 406 M
( Calculation - CFG, Path based, IPET, Transformation rules, Structure based - http://moss.csc.) s
5 395 M
(ncsu.edu/~mueller/ftp/pub/mueller/papers/1257.pdf) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(-----------------) s
5 351 M
(582. \(THEORY\) Cloud, Autonomous Vehicles, EventNet Logical Clock, Relativity, Lorentz Transfor) s
5 340 M
(m, Lamport's Clock) s
5 329 M
( - related to 70-86 - 2 August 2018, 3 August 2018) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(-----------------) s
5 296 M
(Cloud of autonomus vehicles\(e.g drones\) in a wireless network are mostly not stationary and ea) s
5 285 M
(ch node has a velocity. This relative motion between nodes of a cloud fits in the realm of rel) s
5 274 M
(ativistic time dilation. Lorentz Transform for a stationary and a moving observer with respect) s
5 263 M
( to a frame of reference is derived as below:) s
5 252 M
(                ) s
5 241 M
(                        x1) s
5 230 M
(                        |  \\ ) s
5 219 M
(                        |       \\) s
5 208 M
(                        V            \\) s
5 197 M
(                        x2 -----------> x3) s
5 175 M
(Node x1 in vehicle cloud transmits an information with speed of light c \(which is fixed for al) s
5 164 M
(l observers by Maxwell Equations as 3 * 10^5 km/s\) as electromagnetic signal, which is receive) s
5 153 M
(d by both x2 and x3. x2 is stationary and x3 is moving with velocity v. Each node has its own ) s
5 142 M
(clock t\(xi\). For x2, information from x1 reaches in t\(x2\)*c and for x3 information from x1 rea) s
5 131 M
(ches in t\(x3\)*c. By this time x3 has travelled t\(x3\)*v distance from x2. This leads to Lorentz) s
5 120 M
( transform below:) s
5 109 M
(                \(t\(x2\)*c\)^2 + \(t\(x3\)*v\)^2 = \(t\(x3\)*c\)^2) s
5 98 M
(                \(t\(x2\)*c\)^2 = \(t\(x3\)*c\)^2 - \(t\(x3\)*v\)^2) s
5 87 M
(                => \(t\(x2\)*c\)^2 = t\(x3\)^2*\(c^2 - v^2\)) s
5 76 M
(                => t\(x2\)^2 = t\(x3\)^2*\(1 - \(v/c\)^2\)) s
5 65 M
(                => t\(x2\) = t\(x3\)*sqrt\(1 - \(v/c\)^2\)) s
5 54 M
(                i.e clock of vehicle x3 slows down compared to x2's clock as x3 moves faster. ) s
5 43 M
(Though autonomus vehicles could have speed less than light, if event timestamps are in nanosec) s
5 32 M
(onds \(C++ provides nanosecond resolution in std::chrono::duration_cast<std::chrono::nanosecond) s
5 21 M
(s>\), relativistic time dilation could be non-trivial. Lamport's Logical Clock has the causatio) s
5 10 M
(n protocol \(s,r\):) s
_R
S
%%Page: (382) 382
%%BeginPageSetup
_S
18 36 translate
/pagenum 382 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (382) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(                sender\(s\) - transmits timestamp to receiver) s
5 681 M
(                receiver\(r\) - finds maximum of local timestamp and received timestamp and incr) s
5 670 M
(ements by 1) s
5 659 M
(which is valid only for stationary nodes in cloud and has to be augmented by previous relativi) s
5 648 M
(stic time dilation transform for moving nodes in cloud. ) s
5 626 M
(Previous time dilation is because of Special Relativity where as General Relativity predicts c) s
5 615 M
(locks in objects closer to a heavier mass tick slower. This causes onboard clocks in GPS satel) s
5 604 M
(lites to tick faster than those on earth slowed down by its mass and corrections are applied. ) s
5 593 M
(Drones using GPS navigation are directly affected by this. EventNet is a partial ordered direc) s
5 582 M
(ted acyclic graph \(infinite\) and causality in EventNet Logical Clock \(for wireless clouds\) is ) s
5 571 M
(defined by light cone i.e an expanding circular region travelled by light plotted against arro) s
5 560 M
(w of time - two events P and Q are causally related if Q is in past lightcone or future lightc) s
5 549 M
(one of P and viceversa. ) s
5 527 M
(References:) s
5 516 M
(----------) s
5 505 M
(582.1 On the Relativistic Structure of Logical Time in Distributed Systems - https://www.vs.in) s
5 494 M
(f.ethz.ch/publ/papers/relativistic_time.pdf - Section 5 - Minkowski Spacetime of \(n-1\) space a) s
5 483 M
(nd 1 time dimensions and Light Cone Causality - Time is a partial order and not linear - Causa) s
5 472 M
(l ordering between two spacetime points U and V) s
5 461 M
(582.2 Atomic Clocks, Satellite GPS and Special/General Relativity - http://www.astronomy.ohio-) s
5 450 M
(state.edu/~pogge/Ast162/Unit5/gps.html) s
5 439 M
(582.3 Feynman's Lectures on Physics - [Richard Feynman] - Volume 1 - Chapter 15 - Lorentz Tran) s
5 428 M
(sformation and Special Relativity) s
5 417 M
(582.4 CAP Theorem,Spanner Database,TrueTime clock - [Breuer] - https://storage.googleapis.com/) s
5 406 M
(pub-tools-public-publication-data/pdf/45855.pdf - Spanner achieves almost all three \(Consisten) s
5 395 M
(cy, Availability, Partition Tolerance\) - "...The short answer is \342\\200\\234no\342\\200\\235 technica) s
5 384 M
(lly, but \342\\200\\234yes\342\\200\\235 in effect and its users can and do assume CA.  The purist answe) s
5 373 M
(r is \342\\200\\234no\342\\200\\235 because partitions can happen and in fact have happened at Google, a) s
5 362 M
(nd during \(some\) partitions, Spanner chooses C and forfeits A. It is technically a CP system. ) s
5 351 M
(We explore the impact of partitions below...") s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-------------) s
5 307 M
(583. \(FEATURE\) *\) Sentiment Analyzer - Empath word embeddings - multipolar sentiment analysis) s
5 296 M
(*\) Factorization - JSON - 6 August 2018) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(--------------) s
5 263 M
(1.SentimentAnalyzer.py has been changed to invoke Empath lexical analyzer for various signals ) s
5 252 M
(\(sentiments\)) s
5 241 M
(in Markov Random Fields Belief Propagation Sentiment Analysis function.) s
5 230 M
(2.Empath invocation computes objective maximum score from the dictionary returned by lexical a) s
5 219 M
(nalyzer for) s
5 208 M
(each vertex in a clique) s
5 197 M
(3.RecursiveLambdaFunctionGrowth.py invokes Markov Random Fields Belief Propagation Sentiment A) s
5 186 M
(nalyzer function) s
5 175 M
(for the text graph and returns the sentiment score in intrinsic_merit_dict["empath_sentiment"]) s
5 164 M
(4.Logs for this have been committed to testlogs/RecursiveLambdaFunctionGrowth.log.Empath_Belie) s
5 153 M
(fPropagation_RGO_M) s
5 142 M
(-----) s
5 131 M
(5.JSON for a sample factorization execution has also been committed) s
5 109 M
(References:) s
5 98 M
(-----------) s
5 87 M
(583.1. Analyzing Right Wing YouTube Channels - [Raphael Ottoni,Evandro Cunha,Gabriel Magno,Ped) s
5 76 M
(ro Bernardina,) s
5 65 M
(Wagner Meira Jr.,Virgilio Almeida,Berkman Klein] - https://arxiv.org/pdf/1804.04096.pdf) s
5 54 M
(583.2. Empath - http://empath.stanford.edu/) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(--------------) s
5 10 M
(584. \(FEATURE\) Latent Semantic Analysis/Indexing \(LSA/LSI\) Implementation - 7 August 2018) s
_R
S
%%Page: (383) 383
%%BeginPageSetup
_S
18 36 translate
/pagenum 383 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (383) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(--------------) s
5 670 M
(1. Latent Semantic Analysis/Indexing has been implemented as python class in LatentSemanticAna) s
5 659 M
(lysis.py) s
5 648 M
(2. This reads list of filenames from LatentSemanticAnalysis.txt and converts into term-documen) s
5 637 M
(t matrix) s
5 626 M
(by invoking Pandas DataFrame and ScikitLearn Vector libraries) s
5 615 M
(3. Pandas DataFrame is converted to NumPy array and Singular Value Decomposition \(SVD\) is done) s
5 604 M
( on) s
5 593 M
(term-document matrix to arrive at UEV^T decomposition.) s
5 582 M
(4. Documents are represented by U and terms by V. E is matrix of singular values.) s
5 571 M
(5. Cosine similarity of pairs of documents in U is computed for all pairs of documents and pri) s
5 560 M
(nted in log:) s
5 549 M
(testlogs/LatentSemanticAnalysis.log.7August2018) s
5 538 M
(6. This class is multipurpose and can be used for variety of applications including Program An) s
5 527 M
(alysis.) s
5 516 M
(7. Corpus for this execution is list of python files and similarity between python code is evi) s
5 505 M
(denced by) s
5 494 M
(cosine similarity) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(-----------------) s
5 450 M
(585. \(FEATURE\) SAT Solver - CVXOPT LAPACK gels\(\) least squares - 9 August 2018) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(-----------------) s
5 417 M
(1. SAT Solver has been changed to invoke LAPACK gels\(\) least squares from CVXOPT) s
5 406 M
(2. For this NumPy array is cast to CVXOPT real matrix object) s
5 395 M
(3. CVXOPT gels\(\) works only if the matrix is full-rank \(number of linearly independent rows is) s
5 384 M
( equal to number of rows and similarly for columns\) and throws ArithmeticError exception other) s
5 373 M
(wise) s
5 362 M
(4. Approximately 1040 random 3SAT instances for 10 variables - 10 clauses have been executed a) s
5 351 M
(nd MAXSAT) s
5 340 M
(approximation ratio converges to ~97%. For larger values of variables, finding full rank matri) s
5 329 M
(x needs lot of) s
5 318 M
(iterations but still for 20 variables - 20 clauses similar convergence to ~96% was observed.) s
5 307 M
(5. Support for CVXOPT is crucial because of wide range of functionalities \(including Convex pr) s
5 296 M
(ograms, SDPs\) present in CVXOPT) s
5 285 M
(6. logs for this have been committed to testlogs/CNFSATSolver.10variablesAlpha1.0.CVXOPT.log.9) s
5 274 M
(August2018) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(---------) s
5 230 M
(586. \(FEATURE\) Latent Semantic Analysis - Low Rank Approximation - 9 August 2018) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(---------) s
5 197 M
(1. New function for computing low rank approximation of term-document matrix has been included) s
5 186 M
(2. For SVD of td = UEV^T, few least singular values \(square root of eigen values of td\) are se) s
5 175 M
(t to zero) s
5 164 M
(\(hardcoded to 10, because matrix_rank\(\) computation is quite slow for large term-document matr) s
5 153 M
(ices\)) s
5 142 M
(3. Low rank approximation of td is computed from matrix product of U * rankreduced\(E\) * V^T) s
5 131 M
(4. logs for this have been committed to testlogs/LatentSemanticAnalysis.log.9August2018) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(---------) s
5 87 M
(587. \(THEORY\) ImageNet, EventNet and Recursive Lambda Function Growth and Merit of Large Scale) s
5 76 M
( Visuals ) s
5 65 M
( - ImageGraph Algorithm - related to 249,410 - 10 August 2018) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(---------) s
5 32 M
(ImageNet is the pictorial WordNet and has received lot of attention in Computer Vision and Lar) s
5 21 M
(ge Scale) s
5 10 M
(Visual Recognition \(LSVR\) from Images/Videos. Deciding merit of a Video intrinsically with no ) s
_R
S
%%Page: (384) 384
%%BeginPageSetup
_S
18 36 translate
/pagenum 384 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (384) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(reputation rankings) s
5 681 M
(has been an open problem \(in Fame versus Merit\). Recursive Lambda Function Growth algorithm wh) s
5 670 M
(ich generalizes) s
5 659 M
(Recursive Gloss Overlap for text-graph creation has been so far restricted only to text analys) s
5 648 M
(is. ImageNet) s
5 637 M
(has been applied for Object recognition/tracking based on Convolution Networks in Video datase) s
5 626 M
(ts \(e.g VID\). ) s
5 615 M
(This section describes an algorithm to map a video to ImageNet graph of visuals and infer meri) s
5 604 M
(t from this ) s
5 593 M
(image-graph:) s
5 582 M
(----------------------------------------------) s
5 571 M
(ImageNet-EventNet ImageGraph Algorithm:) s
5 560 M
(----------------------------------------------) s
5 549 M
(        \(*\) Every Video is set of frames of Images continuously played out in time. ) s
5 538 M
(        \(*\) Some image frames in the past causally relate to some frames in future in the Vide) s
5 527 M
(o.) s
5 516 M
(        \(*\) For each image frame:) s
5 505 M
(        {) s
5 494 M
(                \(*\) Each frame is recognized by a standard LSVR algorithm \(e.g ConvNet\) and ob) s
5 483 M
(jects are annotated by bounding boxes.) s
5 472 M
(                \(*\) Each bounded recognized object in a frame is lookedup in ImageNet and an I) s
5 461 M
(mageGraph is constructed per frame by computing ImageNet path between every pair of recognized) s
5 450 M
( objects and unifying the paths to create an ImageGraph for the frame, similar to WordNet Path) s
5 439 M
( s-t connectivity algorithm mentioned earlier for TextGraphs. ) s
5 428 M
(                \(*\) Merit of Video in human judgement is more than mere connectedness of infor) s
5 417 M
(mation conveyed - it also depends on visual appeal e.g object attributes like Angle, Resolutio) s
5 406 M
(n, Lighting, Texture, Aesthetics etc., Edge weights in frame ImageGraph has to reckon these fa) s
5 395 M
(ctors.) s
5 384 M
(        }) s
5 373 M
(        \(*\) Previous loop creates a huge set of ImageGraphs for frames in Video.) s
5 362 M
(        \(*\) Following EventNet convention, every frame is an Event vertex of set of actors \(pa) s
5 351 M
(rtakers\) in EventNet. Causation between two Event ImageGraphs for chronologically ordered fram) s
5 340 M
(es F1 and F2 \(E\(F1\) and E\(F2\)\) is determined by causal similarity of the graphs E\(F1\) and E\(F2) s
5 329 M
(\) i.e if there exist ImageNet paths from vertices of E\(F1\) to vertices of E\(F2\) then F1 "cause) s
5 318 M
(s" F2.) s
5 307 M
(        \(*\) Example: If frame F1 has recognized visual ImageGraph of a birthday party and F2 h) s
5 296 M
(as recognized visual ImageGraph of cake-cutting, and if there exists an ImageNet path "birthda) s
5 285 M
(y - celebration - cake - cutting " ,then E\(F1\) causes E\(F2\).) s
5 274 M
(        \(*\) Previous algorithm converts a Video into a Graph of Graphs \(or\) Tensor which is a ) s
5 263 M
(matrix having matriix entries. Size of this video tensor is O\(number_of_frames\).) s
5 252 M
(        \(*\) If Audio is also annotated by a Speech Recognition algorithm to text, it catalyses) s
5 241 M
( in deciphering causation amongst sets of frames \(by creating AudioGraph per set of frames fro) s
5 230 M
(m WordNet and connecting AudioGraphs by WordNet distances and this creates an audio tensor\). ) s
5 219 M
(        \(*\) Once these tensors for video and audio are created, merit is computed by how causa) s
5 208 M
(lly connected these tensors are from standard Graph complexity measures already defined for Te) s
5 197 M
(xtGraphs.) s
5 175 M
(------------------------------------------) s
5 164 M
(ImageGraph Merit as Tensor Products:) s
5 153 M
(------------------------------------------) s
5 142 M
(        \(*\) Two causally related \(having ImageNet path between their vertices\) ImageGraphs E\(F) s
5 131 M
(1\) and E\(F2\) for frames F1 and F2 can be multiplied by Tensor Product which is a cartesian/kro) s
5 120 M
(necker product of two adjacency matrices of each ImageGraph per frame - resulting tensor produ) s
5 109 M
(ct graph has:) s
5 98 M
(                \(*\) ImageNet vertex gh for g in V\(E\(F1\)\) and h in V\(E\(F2\)\) ) s
5 87 M
(                \(*\) ImageNet edge \(a,b\)-\(c,d\) iff edge \(a,c\) in E\(F1\) and \(b,d\) in E\(F2\)) s
5 76 M
(        \(*\) the tensor product for two frame ImageGraphs in the Video \(which are connected cau) s
5 65 M
(sally by ImageNet\) as E\(F1\) * E\(F2\) yields a semantic similarity measure between successive ch) s
5 54 M
(ronologically causative frames. e.g edges \(birthday, congregation\) in E\(F1\) and \(cake, serving) s
5 43 M
(\) in E\(F2\) are mapped to edge \(birthday-cake, congregation-serving\) in the product graph.) s
5 32 M
(        \(*\) EventNet Causality of ImageGraphs in a Video is represented by an adjacency matrix) s
5 21 M
( defined as:) s
5 10 M
(                \(*\) EventNet matrix EN for a video of N image frames has N rows and N columns) s
_R
S
%%Page: (385) 385
%%BeginPageSetup
_S
18 36 translate
/pagenum 385 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (385) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(                \(*\) entry EN\(i,j\) = tensor product of Event ImageGraph for frame i and Event I) s
5 681 M
(mageGraph for frame j if there is an ImageNet path between ImageGraphs for Frame i and j, else) s
5 670 M
(, 0) s
5 659 M
(        \(*\) This EventNet adjacency matrix represents a graph of causality between frames in t) s
5 648 M
(he video. ) s
5 637 M
(        \(*\) Weight of every edge \(a,b\)-\(c,d\) \(or\) \(ab\)-\(cd\) in tensor product of ImageGraphs f) s
5 626 M
(or frames F1 and F2, E\(F1\)*E\(F2\) \(i.e \(a,c\) in E\(F1\) and \(b,d\) in E\(F2\)\) = 1/\(d\(a,b\)*d\(c,d\)\) f) s
5 615 M
(or ImageNet distance d between two vertices in different ImageGraphs E\(F1\) and E\(F2\).) s
5 604 M
(        \(*\) Previous Inverse Weight implies an edge has more weight in Tensor Product graph if) s
5 593 M
( distance between endpoints of edges in two different ImageGraphs are close enough in ImageNet) s
5 582 M
(. When either of the endpoints in two different ImageGraphs are not related by ImageNet, d is ) s
5 571 M
(infinity and respective adjacency matrix entry for tensor product graph is 0.) s
5 560 M
(        \(*\) Applicability of EventNet to Large Scale Visual Recognition is quite unusual. Nece) s
5 549 M
(ssity of tensor product entries as edge weights in Video EventNet adjacency matrix, than simpl) s
5 538 M
(e scalar weights is because of necessity of capturing distance between every pair of vertices ) s
5 527 M
(among 2 causally related ImageGraphs - one vertex is in E\(F1\) and other in E\(F2\) ) s
5 505 M
(------------------------------------------) s
5 494 M
(Gist and Intuition of previous algorithm) s
5 483 M
(------------------------------------------) s
5 472 M
(Every Video \(set of frames\) can be mapped to 1\) a causation graph of image frame event vertice) s
5 461 M
(s and 2\) each frame event itself is a subgraph of ImageNet - depth 2 graph-of-graphs creation.) s
5 450 M
( Causality between frame events is determined by ImageNet distances between vertices in ImageG) s
5 439 M
(raphs of the frames represented as tensor product.) s
5 417 M
(References:) s
5 406 M
(-----------) s
5 395 M
(587.1 ImageNet Large Scale Visual Recognition Challenge - [Olga Russakovsky* \302\267 Jia Deng* \302\267 H) s
5 384 M
(ao Su \302\267 Jonathan Krause \302\267 Sanjeev Satheesh \302\267 Sean Ma \302\267 Zhiheng Huang \302\267 Andrej Karpathy \302\267) s
5 373 M
( Aditya Khosla \302\267 Michael Bernstein \302\267 Alexander C. Berg \302\267 Li Fei-Fei] - https://arxiv.org/pd) s
5 362 M
(f/1409.0575.pdf) s
5 351 M
(587.2 Zig-Zag Product - [Reingold, O.; Vadhan, S.; Wigderson, A. \(2000\)], "Entropy waves, the ) s
5 340 M
(zig-zag graph product, and new constant-degree expanders and extractors", Proc. 41st IEEE Symp) s
5 329 M
(osium on Foundations of Computer Science \(FOCS\), pp. 3\342\\200\\22313 - https://arxiv.org/abs/math) s
5 318 M
(/0406038 - Graph product of large graph G and small graph H in which each vertex in G is repla) s
5 307 M
(ced by copy of H. In ImageGraph EventNet Tensor above, each vertex in EventNet G is replaced b) s
5 296 M
(y ImageGraph of Frame Event.) s
5 285 M
(587.3 Tensor Product of Graphs - https://en.wikipedia.org/wiki/Tensor_product_of_graphs) s
5 274 M
(587.4 ImageNet publications - http://image-net.org/about-publication) s
5 263 M
(587.5 ImageNet VID dataset - https://www.kaggle.com/c/imagenet-object-detection-from-video-cha) s
5 252 M
(llenge) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(-----------------) s
5 208 M
(588. \(THEORY\) Analyzing Youtube Videos, Ranking Movies and ImageGraph Tensor Products Algorith) s
5 197 M
(m for ) s
5 186 M
(Merit of Large Scale Visuals - 14 August 2018, 15 August 2018 - related to 587) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(-----------------) s
5 153 M
(Analyzing Videos in public domain and Ranking Movies based on merit as opposed to usual human ) s
5 142 M
(review/reputation ) s
5 131 M
(based rankings is one of the hardest Large Scale Visual Recognition Challenge. Algorithm for M) s
5 120 M
(apping Video or Movie to EventNet Graph of frame ImageGraphs and representing EventNet edge we) s
5 109 M
(ights as Tensor Products has been described earlier.  This algorithm just elicits the graph co) s
5 98 M
(mplexity of visual information contained in the Video overlooking sentimental polarities and p) s
5 87 M
(sychological impact. Language Inquiry and Word Count \(LIWC\) is a dictionary of human voted wor) s
5 76 M
(ds categorized by their human psychological emotions. Classifying the objects in Video or Movi) s
5 65 M
(e of human viewership therefore demands emotional categories of words. Following changes are m) s
5 54 M
(ade to previous algorithm for quantifying emotions:) s
5 43 M
(        \(*\) Emotions are mostly verbal and Speech Recognition annotated AudioGraph of Video or) s
5 32 M
( Movie Dialogue Transcript are created per frame/scene by union of WordNet paths for all pairs) s
5 21 M
( of words in Transcript per frame/scene) s
5 10 M
(        \(*\) Word Vertices of Each ImageGraph and AudioGraph per frame in Video or Movie are al) s
_R
S
%%Page: (386) 386
%%BeginPageSetup
_S
18 36 translate
/pagenum 386 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (386) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(so annotated by the psychological polarity of the Word Vertex in LWIC ) s
5 681 M
(        \(*\) Weight of every edge \(a,b\)-\(c,d\) \(or\) \(ab\)-\(cd\) in tensor product of AudioGraphs a) s
5 670 M
(nd ImageGraphs for frames F1 and F2, E\(F1\)*E\(F2\) \(i.e \(a,c\) in E\(F1\) and \(b,d\) in E\(F2\)\) is th) s
5 659 M
(e ordered pair of inverse distance similarity and majority LIWC polarity = \(1/\(dist\(a,b\)*dist\() s
5 648 M
(c,d\)\), majority_LIWC_polarity_of\(a,b,c,d\)\) for ImageNet distance dist between two vertices in ) s
5 637 M
(different ImageGraphs or AudioGraphs E\(F1\) and E\(F2\).) s
5 626 M
(        \(*\) Merit of the Video or Movie in toto is the ordered pair = \(Tensor Rank of the Audi) s
5 615 M
(oGraph and ImageGraph EventNet Tensors, Sorted list of top percentile LIWC polarity of edge we) s
5 604 M
(ights in ImageGraph and AudioGraph Tensor Products\) ) s
5 593 M
(        \(*\) Computing Tensor Rank is NP-Complete for Finite Fields and NP-hard for Rationals.) s
5 582 M
(        \(*\) Previous Merit captures both the complexity and emotional content of the Large Sca) s
5 571 M
(le Visual.) s
5 560 M
(        \(*\) Tensor Rank is the generalization of Matrix Rank \(number of linearly independent r) s
5 549 M
(ows\) = Dimension of Tensor = Minimum number of Tensors Ti to linearly express Tensor T = Sigma) s
5 538 M
(\(Ti\) ) s
5 527 M
(        \(*\) Most algorithms for Video analysis are caption and statistics based whereas the pr) s
5 516 M
(evious algorithm is a graph theoretic formulation of a machine learning computer vision proble) s
5 505 M
(m.) s
5 494 M
(        \(*\) There are recent other alternatives to LIWC e.g Empath.) s
5 483 M
(        \(*\) Intuition for choice of Tensor Rank as Merit of Large Scale Visuals:) s
5 472 M
(                \(*\) Tensor Rank of EventNet is the number of Independent n-rows/n-columns of E) s
5 461 M
(vents in the Video) s
5 450 M
(                where n-columns and n-rows are hypercubes considering Tensor as multidimension) s
5 439 M
(al array) s
5 428 M
(                \(*\) Increased Tensor Rank implies the Events in the Video are more disconnecte) s
5 417 M
(d/independent) s
5 406 M
(                while decreased Tensor Rank implies the Events are more connected/dependent) s
5 395 M
(                \(*\) Therefore Video of Low Tensor Rank is heavily connected.) s
5 384 M
(        \(*\) Though applied to Video EventNet, tensor rank has wider philosophical ramification) s
5 373 M
(s because EventNet formalizes flow of time logically and has weird implication - EventNet Logi) s
5 362 M
(cal Time Tensor can be written as linear sum of independent tensors and therefore Time tensor ) s
5 351 M
(essentially is a linear function of finer time subdivision tensors.) s
5 340 M
(        \(*\) An important difference between Videos and Theoretical EventNet is: Event vertices) s
5 329 M
( and participants/actors within an Event vertex can be created in parallel independent of othe) s
5 318 M
(r event vertices in theoretical eventnet \(and causality edges between event vertices could be ) s
5 307 M
(established later in parallel too\) while a video \(youtube, movie etc.,\) is always a serialized) s
5 296 M
( set of frames \(events\) though it could depict concurrent events - video is non-parallel unles) s
5 285 M
(s more than one video source is simultaneously streamed. EventNet can be formally defined by s) s
5 274 M
(ome Process calculi.) s
5 263 M
(        \(*\) Usually Like-ing Versus Merit of Videos has the following conflict: Videos or movi) s
5 252 M
(es which induce viewers to repetitively watch them, garner huge popular support which is not n) s
5 241 M
(ecessarily a reflection of their merit. Music/Audio has an equivalent of this phenomenon known) s
5 230 M
( as "Earworm") s
5 208 M
(References:) s
5 197 M
(----------) s
5 186 M
(588.1 Language Inquiry and Word Count - LIWC - http://liwc.wpengine.com/wp-content/uploads/201) s
5 175 M
(5/11/LIWC2015_LanguageManual.pdf) s
5 164 M
(588.2 Exploring Tensor Rank - http://www.its.caltech.edu/~matilde/WeitzMa10Abstract.pdf) s
5 153 M
(588.3 Tensor Rank is NP-Complete - [Hastad] - http://www.nada.kth.se/~johanh/tensorrank.pdf ) s
5 142 M
(588.4 Computational Complexity of Tensor Problems - https://www.stat.uchicago.edu/~lekheng/mee) s
5 131 M
(tings/agtd/hillar13.pdf) s
5 120 M
(588.5 Tensor Rank as Measure of its Complexity - http://web.math.unifi.it/users/ottavian/collo) s
5 109 M
(quium_kias.pdf) s
5 98 M
(588.6 Process Calculi - https://en.wikipedia.org/wiki/Process_calculus) s
5 87 M
(588.7 Actor Model and Process Calculi - https://en.wikipedia.org/wiki/Actor_model_and_process_) s
5 76 M
(calculi_history) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(--------------) s
5 32 M
(589. \(THEORY and FEATURE\) SAT Solver - CVXOPT - gesv\(\) least squares - 16 August 2018 - relate) s
5 21 M
(d to 424) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (387) 387
%%BeginPageSetup
_S
18 36 translate
/pagenum 387 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (387) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(--------------) s
5 681 M
(1. CNFSATSolver.py has been changed to import gesv, getrs, sysv functions for least squares in) s
5 670 M
( cvxopt) s
5 659 M
(2. Each of these were tried for 10 variables and 10 clauses combinations and gesv\(\) has the hi) s
5 648 M
(ghest accuracy) s
5 637 M
(observed so far \(~99% to 100%\) in any of the least squares algorithms.) s
5 626 M
(3. logs for 500 random 3SAT instances have been committed to testlogs/CNFSATSolver.10variables) s
5 615 M
(Alpha1.0.CVXOPT.log.16August2018) s
5 604 M
(4. Caveat: Though the number of variables/clauses are less which could cause repetitive choice) s
5 593 M
( of same 3SAT similar randomness did not attain 99% accuracy for other least squares algorithm) s
5 582 M
(s earlier for similar variable-clause combination.) s
5 571 M
(5. gesv\(\) also throws ArithmeticError for non full-rank matrices and logs for gesv\(\) are filte) s
5 560 M
(red-out random 3SAT instances which are full rank. This leaves some random 3SAT instances unso) s
5 549 M
(lved.) s
5 538 M
(6. try...except has been changed to print exception stacktrace for ArithmeticError) s
5 516 M
(CVXOPT gesv\(\) has breached the accuracy barrier to large extent from 95-97% to > 99% coincidin) s
5 505 M
(g with Random Matrix Analysis for 3SAT. But problem is with high number of variables and claus) s
5 494 M
(es which do not churn out full rank matrices for 3SAT and lot of instances are left out. So th) s
5 483 M
(e average is only for full-rank random 3SATs. If this implies P=NP, Polynomial Hierarchy PH co) s
5 472 M
(llapses to P implying existence of PH-complete problems.) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(---------------) s
5 428 M
(590. \(FEATURE\) Program Analysis + Software Analytics - Valgrind/Callgrind/KCachegrind Call Gra) s
5 417 M
(ph DOT file ) s
5 406 M
(creation and its Cyclomatic Complexity - 18 August 2018) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(---------------) s
5 373 M
(1. Valgrind/Callgrind are the standard tools for call graph profiling and memory leak check of) s
5 362 M
( userspace code.) s
5 351 M
(2. Cyclomatic Complexity is already computed for DOT files created by SATURN Program Analyzer ) s
5 340 M
(for Linux Kernel ) s
5 329 M
(by VIRGO SATURN Program Analysis Driver. For userspace call graph DOT files are created by Kca) s
5 318 M
(chegrind complementing SATURN in userspace.\(https://github.com/shrinivaasanka/virgo64-linux-gi) s
5 307 M
(thub-code/blob/master/virgo-docs/VIRGO_SATURN_Program_Analysis_Integration.txt\)) s
5 296 M
(3. Valgrind for an example Spark program \(Factorization\) is invoked as:) s
5 285 M
(valgrind --tool=callgrind -v --dump-every-bb=10000000 /media/Ubuntu2/spark-2.3.1-bin-hadoop2.7) s
5 274 M
(/bin/spark-submit ../DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py 819289) s
5 263 M
(4. callgrind.out files are written to:) s
5 252 M
(        callgrind.DiscreteHyperbolicFactorization_TileSearch_Optimized.out.14531) s
5 241 M
(suffixed by process id.) s
5 230 M
(5. callgrind.out file is viewed by kcachegrind \(requires KDE\) and call graph is exported as DO) s
5 219 M
(T and image files in:) s
5 208 M
(        5.1 kcachegrind_callgraph_DiscreteHyperbolicFactorization_TileSearch_Optimized.png ) s
5 197 M
(        5.2 kcachegrind_callgraph_DiscreteHyperbolicFactorization_TileSearch_Optimized.dot) s
5 186 M
(6. CyclomaticComplexitySparkMapReducer.py has been updated for doing Spark wordcount of both S) s
5 175 M
(ATURN and Valgrind/Callgrind/KCachegrind DOT Control Flow Graph / call graph files and print C) s
5 164 M
(yclomatic Complexity.) s
5 153 M
(7. This leverages on already implemented Convolution Net Deep Learning of Graphic Performance ) s
5 142 M
(Patterns by Perf and FlameGraph.) s
5 131 M
(8. Essentially Program Behaviour Analysis in userspace+kernelspace reduces to Graph Mining of ) s
5 120 M
(these DOT graphs.) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(---------------) s
5 76 M
(591. \(FEATURE\) Program Analysis + Software Analytics - Graph Mining of Call graph and CFG DOT ) s
5 65 M
(files ) s
5 54 M
(- 20 August 2018) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(---------------) s
5 21 M
(1.GraphMining_GSpan.py has been changed to check for an error condition of number of vertices ) s
5 10 M
(per edge) s
_R
S
%%Page: (388) 388
%%BeginPageSetup
_S
18 36 translate
/pagenum 388 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (388) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(2.New function graph_mining\(\) has been included in software_analytics/CyclomaticComplexitySpar) s
5 681 M
(kMapReducer.py for) s
5 670 M
(invocation of Graph Mining GSpan implementation to print frequent subgraph patterns in SATURN ) s
5 659 M
(CFG and Valgrind/Callgrind/KCachegrind graph DOT files) s
5 648 M
(3.logs for this have been committed to software_analytics/testlogs/CyclomaticComplexitySparkMa) s
5 637 M
(pReducer.log.GraphMining.20August2018) s
5 626 M
(4.This formally unifies the two ends: Program Analysis and Software Analytics \(Deep Learning a) s
5 615 M
(nd Graph Mining\)) s
5 604 M
(5.Frequent Subgraphs in DOT files of Call graph and Control Flow Graph\(CFG\) extract static pat) s
5 593 M
(terns in underlying software running on a system while the FlameGraph/Perf Graphics DeepLearni) s
5 582 M
(ng Analytics extract runtime patterns) s
5 571 M
(6.Theoretically, if SAT for a Program is created by SATURN, Least Square SAT Solver in NeuronR) s
5 560 M
(ain could be model checker for the Program) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(---------------) s
5 516 M
(592. \(THEORY and FEATURE\) SAT Solver - CVXOPT - L1-norm Regularized Least Squares Quadratic Pr) s
5 505 M
(ogram l1regls\(\) ) s
5 494 M
(and gesv\(\) - 22 August 2018) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(---------------) s
5 461 M
(1.This commit includes a special SAT Solver in CVXOPT documentation example l1regls\(\) [https:/) s
5 450 M
(/cvxopt.org/examples/mlbook/l1regls.html] which solves the L1-norm regularized Least Squares Q) s
5 439 M
(uadratic Program\(QP\):) s
5 428 M
(        minimize error |AX-B|^2 + L1Norm\(|X|\)) s
5 417 M
(which is the most accurate Least Square Solution. Geometric intuition and preference of L1 nor) s
5 406 M
(m for least squares is depicted in Q&A: https://www.quora.com/Why-is-L1-regularization-better-) s
5 395 M
(than-L2-regularization-provided-that-all-Norms-are-equivalent) s
5 373 M
(2. In the context of SAT, previous minimization implies, the polynomial approximating the bina) s
5 362 M
(ry assignment) s
5 351 M
(heaviside step function is as close as possible to satisfying each clause \(because B is unit v) s
5 340 M
(ector of 1s for) s
5 329 M
(each clause\) and sum of real fractional assignments \(real parity\) is minimum. This can be visu) s
5 318 M
(alized as a) s
5 307 M
(sinusoidal string pulled on both directions and string settles at an equilibrium curvature whi) s
5 296 M
(ch minimizes the) s
5 285 M
(QP above.) s
5 263 M
(3. Prerequisite l1regls from https://cvxopt.org/_downloads/l1regls.py has to be downloaded and) s
5 252 M
( PYTHONPATH must be set to it.) s
5 230 M
(4. CNFSATSolver.py has been refactored with if clauses for the least square algorithm invoked.) s
5 219 M
( For equal variable-clause "lapack\(\)" invokes gesv\(\) and for unequal variable-clause gels\(\) is) s
5 208 M
( invoked) s
5 186 M
(5. Few 1000 variables * 1000 clauses random 3SAT instances have been solved for l1regls\(\) with) s
5 175 M
( MAXSAT approximation ratio 96%-97%) s
5 153 M
(6. CVXOPT gesv\(\) has been tested again for 10 variables * 10 clauses and similar MAXSAT approx) s
5 142 M
(imation ratio of 99%-100% has been observed.  gesv\(\) throws ArithmeticError if A is singular \() s
5 131 M
(not invertible, determinant 0\) while gels\(\) throws ArithmeticError if A is not full-rank - ges) s
5 120 M
(v\(\) is exact solver and gels\(\) is least square solver. \(NumPy solve\(\) internally uses lapack g) s
5 109 M
(esv\). So the logs filter out singular random 3SAT matrices.) s
5 87 M
(References:) s
5 76 M
(-----------) s
5 65 M
(592.1 Advanced Engineering Mathematics - Tenth Edition - [Erwin Kreyszig] - https://www.safari) s
5 54 M
(booksonline.com/library/view/advanced-engineering-mathematics/9780470458365/Chapter006.html#ch) s
5 43 M
(006-sec003 - Many Unit Heavyside step function and Laplace Transforms. Randomized Rounding of ) s
5 32 M
(real assignments creates a many unit Heavyside step function.) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (389) 389
%%BeginPageSetup
_S
18 36 translate
/pagenum 389 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (389) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-----------------) s
5 681 M
(593. \(FEATURE\) Audio/Music Pattern Mining - Audio to Time Series - 24 August 2018) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(-----------------) s
5 648 M
(1.Similar to image_pattern_mining/ImageToBitMatrix.py, new file AudioToBitMatrix.py has been c) s
5 637 M
(ommitted to) s
5 626 M
(repository for converting an audio file \(e.g MP3, .wav\) to time series array) s
5 615 M
(2.AudioToBitMatrix.py imports librosa \(audioread\) Python library which returns waveform time s) s
5 604 M
(eries floating point array and sampling rate.) s
5 593 M
(3.audio-to-bitmatrix function has optional arguments to specify if the time series is binary o) s
5 582 M
(r float \(defaults to float\) and duration of the timeseries \(defaults to full\)) s
5 571 M
(4.Binary time series invokes bin\(\) on each time series point) s
5 560 M
(5.An example audio MP3 file has been converted to time series and logs have been committed to ) s
5 549 M
(testlogs/AudioToBitMatrix.log.24August2018) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(-----------------) s
5 505 M
(594. \(THEORY\) Horn3SAT and Least Squares Approximate SAT Solver - 7 September 2018) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-----------------) s
5 472 M
(Horn3SAT is the special case of 3SAT in which each clause is Horn clause having single positiv) s
5 461 M
(e literal known) s
5 450 M
(as Head and all other literals are negative. Horn3SAT is P-complete and is solved by unit prop) s
5 439 M
(agation algorithm in polynomial time. Unit propagation algorithm has 2 repetitive phases: *\) R) s
5 428 M
(emove all unit clauses having single literal *\) Remove negated literal in all clauses. Horn3SA) s
5 417 M
(T can be solved by Least Squares Approximate Solver by creating random Horn3SAT matrix similar) s
5 406 M
( to random 3SAT matrix. This random Horn3SAT matrix is very sparse and has only one 1 per row ) s
5 395 M
(for head literal and all other columns are 0s. Since Horn3SAT is P-complete, there exists a de) s
5 384 M
(terministic \(and possibly parallel because P-completeness implies NC\) algorithm to solve it on) s
5 373 M
(e of which is unit propagation. Solution to this Horn3SAT random matrix Linear system of equat) s
5 362 M
(ions for equal variable-clause is deterministic polynomial time \(gesv\(\) solver can be applied ) s
5 351 M
(for non-singular instances\) while unequal variable-clauses are least squares solvable by algor) s
5 340 M
(ithms - lsmr/gels/lsqr etc., Cloud algorithms like lsrn can solve Horn3SAT random matrix insta) s
5 329 M
(nce in NC if number of parallel processors are logdepth and polynomial size.) s
5 307 M
(References:) s
5 296 M
(----------) s
5 285 M
(594.1 Unit Propagation Horn3SAT Solver - https://en.wikipedia.org/wiki/Unit_propagation) s
5 274 M
(594.2 Binary Least Squares and SAT Solver - http://www.mirlab.org/conference_papers/Internatio) s
5 263 M
(nal_Conference/ICASSP%202011/pdfs/0003780.pdf - Binary Least Squares Solution to AX=B for bool) s
5 252 M
(ean X is NP-Hard - Semidefinite Relaxation of Least Squares - Gaussian Randomization for obtai) s
5 241 M
(ning binary values for X from feasible Semidefinite solution - Section 3 - Page 3782) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(--------------) s
5 197 M
(595. \(FEATURE\) Music/Audio Pattern Mining - Histogram and Probability Distribution Function ex) s
5 186 M
(traction \(PDF\)) s
5 175 M
(- 7 September 2018) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(--------------) s
5 142 M
(1.New function audio_features\(\) has been added for analyzing features in audio/music signal) s
5 131 M
(2.Considering audio as time series there are 2 standard ways to extract probability distributi) s
5 120 M
(on from) s
5 109 M
(time series: 1\) Histogram 2\) Bandt and Pompe - [Andres M. Kowalski,Maria Teresa Martin,Angelo ) s
5 98 M
(Plastino and George Judge] - www.mdpi.com/1099-4300/14/10/1829/pdf) s
5 87 M
(3.audio_features\(\) invokes histogram\(\) function and extracts PDF from NumPy by setting density) s
5 76 M
(=True) s
5 65 M
(4.Comparing two music signals amounts to finding Jensen-Shannon Divergence of two probability ) s
5 54 M
(distributions) s
5 43 M
(5.Histogram for an example audio signal is printed in testlogs/AudioToBitMatrix.log.7September) s
5 32 M
(2018) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (390) 390
%%BeginPageSetup
_S
18 36 translate
/pagenum 390 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (390) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(---------------) s
5 681 M
(596. \(FEATURE\) Music/Audio Pattern Mining - Jensen-Shannon Divergence of Probability Distribut) s
5 670 M
(ions of two ) s
5 659 M
(audio signals - 8 September 2018) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(---------------) s
5 626 M
(1.audio_features\(\) in AudioToBitMatrix.py returns the probability histogram and bins in a tupl) s
5 615 M
(e) s
5 604 M
(2.JensenShannonDivergence.py has been rewritten to compute normalization inline \(normalize\(\) f) s
5 593 M
(unction has been) s
5 582 M
(removed\), import audio functions from AudioToBitMatrix.py and compute probability histograms f) s
5 571 M
(or two) s
5 560 M
(different audio files.) s
5 549 M
(3.logs for Jensen-Shannon Divergence distance between two audio files have been committed to t) s
5 538 M
(estlogs/JensenShannonDivergence.log.8September2018 \(For same audio, distance is zero\)) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(----------------) s
5 494 M
(597. \(THEORY\) Computational Geometric Sequential Factorization Optimization by Wavelet Trees, ) s
5 483 M
(Tile Summation ) s
5 472 M
(Ray Shooting Queries and Error Probability - related to 506, 575 - 14 September 2018, 15 Septe) s
5 461 M
(mber 2018,) s
5 450 M
(16 September 2018) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(----------------) s
5 417 M
(Sequential Factorization Optimization by Tile Summation Ray Shooting Queries and searching the) s
5 406 M
( epsilon radius) s
5 395 M
(in the vicinity of approximate factors described earlier have the following error probability ) s
5 384 M
(in failing to) s
5 373 M
(find a factor:) s
5 351 M
(If epsilon radius is O\(\(logN\)^l\) around an approximate factor, probability of not finding a fa) s
5 340 M
(ctor =) s
5 329 M
(        distance between periphery of 2 epsilon radius circles surrounding an approximate fact) s
5 318 M
(or) s
5 307 M
(        --------------------------------------------------------------------------------------) s
5 296 M
(--) s
5 285 M
(                        N/kloglogN) s
5 263 M
(        = [N\(m+1\) - Nm] / kloglogN - 2q\(logN\)^l ) s
5 252 M
(        ---------------------------------------) s
5 241 M
(                        N/kloglogN  ) s
5 219 M
(        = N/kloglogN - 2q\(logN\)^l) s
5 208 M
(        --------------------------) s
5 197 M
(                N/kloglogN) s
5 175 M
(For low error probability, numerator tends to 0:) s
5 164 M
(        N/kloglogN = 2q\(logN\)^l) s
5 153 M
(        => l = log\(N/2kqloglogN\)/loglogN = O\(log\(N/loglogN\)/loglogN\) which is exponential.) s
5 142 M
( ) s
5 131 M
(For constant l, probability of error is non-trivial. This epsilon radius vicinity search appli) s
5 120 M
(es to other ray shooting algorithms too \(by replacing Hardy-Ramanujan estimate with the corres) s
5 109 M
(ponding ray shooting algorithm and equating to tile summation\). Advantage of tile summation is) s
5 98 M
( it always results in an integral value and coincides with some factor point on xy-plane. ) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(------------------) s
5 54 M
(598. \(THEORY\) Hastad Switching Lemma, Least Squares Approximate SAT Solver, Random Restriction) s
5 43 M
(s, CNFSAT) s
5 32 M
(to DNFSAT - 18 September 2018) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(------------------) s
_R
S
%%Page: (391) 391
%%BeginPageSetup
_S
18 36 translate
/pagenum 391 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (391) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Least Squares Approximation by Random 3SAT matrix analysis previously has so far solved almost) s
5 681 M
( 99%-100% clauses) s
5 670 M
(\(observed\) excluding singular random 3SAT matrix instances. This implies binary assignments to) s
5 659 M
( some variables ) s
5 648 M
(are not right by randomized rounding of real assignments, falsifying some of the clauses. Hast) s
5 637 M
(ad Switching Lemma) s
5 626 M
(implies setting values to alpha fraction of variables \(restriction\) in a CNF\(or DNF\) formula a) s
5 615 M
(nd evaluating the restricted formula by switching it to DNF\(or CNF\) and computing its decision) s
5 604 M
( tree abides by the inequality:) s
5 593 M
(        Pr[DTdepth\(f/alpha\) > d] <= \(10*alpha*w\)^d) s
5 582 M
(for s = sigma*n <= n/5, d >= 0, w is formula width. Least Squares Approximation thus can be co) s
5 571 M
(nstrued as restriction generator by following algorithm:) s
5 560 M
(        \(*\) Solve a random 3SAT matrix by Least Squares \(e.g gesv\(\)\) ) s
5 549 M
(        \(*\) Variables in all satisfied clauses in least squares solution form a random restric) s
5 538 M
(tion - set variables) s
5 527 M
(        \(*\) Variables in all unsatisfied clauses in least squares solution \(excluding variable) s
5 516 M
(s in satisfied clauses\) are made unset variables ) s
5 505 M
(        \(*\) Switch the restricted CNF3SAT to a DNF3SAT in unset variables) s
5 494 M
(        \(*\) DNF3SAT is solvable in polynomial time \(linear\)) s
5 472 M
(References:) s
5 461 M
(-----------) s
5 450 M
(598.1 Hastad Switching Lemma - [Johan Hastad] - PhD Thesis - Chapter 4 - Lemma 4.1 - "Let G be) s
5 439 M
( an AND of ORs all of size <= t and rho a random restriction from R\(p\). Then the probability t) s
5 428 M
(hat G/rho cannot be written as an OR of ANDs all of size < s is bounded by alpha^s where alpha) s
5 417 M
( is the unique positive root to the equation:) s
5 406 M
(        \(1 + 4p/\(1+p\)*\(1/alpha\)\)^t = \(1 + 2p/\(1+p\)*\(1/alpha\)\)^t + 1" and Stronger Switching Le) s
5 395 M
(mma - Lemma 4.2 - "Let G = /\\ Gi where Gi are ORs of fanin <= t. Let F be an arbitrary functio) s
5 384 M
(n and p, a random restriction in R\(p\).Then Pr[min\(G\) >= s/Fp = 1] <= \(alpha\)^s" - https://www.) s
5 373 M
(nada.kth.se/~johanh/thesis.pdf) s
5 362 M
(598.2 Hastad Switching Lemma - [Vikraman Arvind] - JRF Course Notes - Complexity 2 - August-De) s
5 351 M
(cember 2010 - Institute of Mathematical Sciences, Chennai.) s
5 340 M
(598.3 Randomized Rounding of Set Cover - [CR Subramanian] - JRF Course Notes - Randomized Algo) s
5 329 M
(rithms - August-December 2010 - Institute of Mathematical Sciences, Chennai. Least Squares SAT) s
5 318 M
( Solver rounds real assignment by midpoint of max-min values in assignment vector. Alternative) s
5 307 M
(ly, each variable x* in real assignment vector can be rounded with respect to maximum value f ) s
5 296 M
(in real assignment as: x = 0 if x* < 1/f else x = 1.) s
5 285 M
(598.4 Hastad Switching Lemma - Course Notes - [Jonathan Katz] - Corollary 3 - "Let f:{0,1}^n -) s
5 274 M
( {0,1} be computed by a DNF formula \(resp. CNF formula\) of width at most w. Let alpha be a ran) s
5 263 M
(dom s-restriction with s <= n/5. Then f/alpha can be computed by a CNF formula \(resp. DNF form) s
5 252 M
(ula\) of width w except with probability at most \(10sw/n\)^w => Pr[DT\(f/alpha\) >= s] < \(10sw/n\)^) s
5 241 M
(w \(or\) Pr[DTdepth\(f/alpha\) > d] <= \(10*sigma*w\)^d for s=sigma*n <= n/5 and d>= 0." - http://ww) s
5 230 M
(w.cs.umd.edu/~jkatz/complexity/f05/switching-lemma.pdf) s
5 219 M
(598.5 Switching Lemma - https://en.wikipedia.org/wiki/Switching_lemma - "...The switching lemm) s
5 208 M
(a says that depth-2 circuits in which some fraction of the variables have been set randomly de) s
5 197 M
(pend with high probability only on very few variables after the restriction. The name of the s) s
5 186 M
(witching lemma stems from the following observation: Take an arbitrary formula in conjunctive ) s
5 175 M
(normal form, which is in particular a depth-2 circuit. Now the switching lemma guarantees that) s
5 164 M
( after setting some variables randomly, we end up with a Boolean function that depends only on) s
5 153 M
( few variables, i.e., it can be computed by a decision tree of some small depth d. This allows) s
5 142 M
( us to write the restricted function as a small formula in disjunctive normal form. A formula ) s
5 131 M
(in conjunctive normal form hit by a random restriction of the variables can therefore be "swit) s
5 120 M
(ched" to a small formula in disjunctive normal form....") s
5 109 M
(598.6 Cutting Planes - Gomory Cut - https://ocw.mit.edu/courses/sloan-school-of-management/15-) s
5 98 M
(053-optimization-methods-in-management-science-spring-2013/tutorials/MIT15_053S13_tut11.pdf - ) s
5 87 M
(for Integer Linear Programs.) s
5 76 M
(598.7 Chapter 14 - Cutting planes - Combinatorial Optimization - [Stiglitz-Papadimitriou]) s
5 65 M
(598.8 Randomized Rounding Survey - [Aravind Srinivasan] - http://homepage.divms.uiowa.edu/~sri) s
5 54 M
(ram/196/fall08/rr-final.pdf - Pr[Clause is satisfied] > 0.75*\(sum of relaxed fractional assign) s
5 43 M
(ments\) - "...One intuitive justification for this is that if x\342\\210\\227\(j\) were \342\\200\\234high\342) s
5 32 M
(\\200\\235, i.e., close to 1, it may be taken as an indication by the LP that it is better to se) s
5 21 M
(t variable j to True; similarly for the case where x\(j\) is close to 0. ..." - Least Squares SA) s
5 10 M
(T Solver applies this intuition for rounding.) s
_R
S
%%Page: (392) 392
%%BeginPageSetup
_S
18 36 translate
/pagenum 392 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (392) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(598.9 Randomized Rounding - Randomized Algorithms - [Motwani-Raghavan] - Pages 81,96,105,106 -) s
5 681 M
( optimized wiring nets.) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(----------------) s
5 637 M
(599. \(FEATURE\) Streaming Algorithms - Approximate Counting and Distinct Elements - 21 Septembe) s
5 626 M
(r 2018) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(----------------) s
5 593 M
(599.1. Two new python implementations for Streaming Approximate Counting and Distinct Elements) s
5 582 M
( in a random subset) s
5 571 M
(have been committed to repository) s
5 560 M
(599.2. These are implementations of two algorithms from JRF presentation notes \(on 28-29/10/20) s
5 549 M
(10\) for course - Topics in Datamining - during August-December 2010, Chennai Mathematical Inst) s
5 538 M
(itute, Chennai.) s
5 527 M
(599.3. They have been implemented because of their importance for processing Streaming Dataset) s
5 516 M
(s e.g Spark Streaming) s
5 494 M
(References:) s
5 483 M
(-----------) s
5 472 M
(599.4. Approximate Counting Algorithm - [Morris-Flajolet] - http://algo.inria.fr/flajolet/Publ) s
5 461 M
(ications/Slides/aofa07.pdf) s
5 450 M
(599.5. Distinct Elements algorithm - [BarYossef] - https://slideplayer.com/slide/4943252/) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(---------------) s
5 406 M
(600. \(FEATURE\) Streaming Abstract Generator - Absolute paths to Relative paths - 21 September ) s
5 395 M
(2018) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(---------------) s
5 362 M
(File Datasource paths have been changed from absolute to relative paths) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(---------------) s
5 318 M
(601. \(THEORY\) Algebraic Geometry and Computational Geometric Factorization - some definitions ) s
5 307 M
(- 24 September 2018) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(---------------) s
5 274 M
(Euclidean Rings are defined as: ) s
5 263 M
(For a,b in ring R, both non-zero, there exist t,r in R such that a=tb + r) s
5 252 M
(where r >= 0. Unique Factorization Theorem is defined on Euclidean Rings. ) s
5 241 M
(Set of Integers are examples of Euclidean Rings.) s
5 219 M
(Let R be a Ring. An Ideal I of R is a subgroup of \(R,+\) and for all x in I and for all r in R,) s
5 208 M
( x.r and r.x in I.) s
5 197 M
(Set of all Integers Z divisible by an integer n is an ideal denoted by nZ. Ideals can be gener) s
5 186 M
(ated by a subset X) s
5 175 M
(of Z. Special case is when X is a singleton X={a} for some a in Z, named Principal Ideal:) s
5 164 M
(        => aZ = {ar | r in Z}) s
5 153 M
(        and Za = {ra | r in Z}) s
5 142 M
(These ideals are left and right principal ideals generated by X={a} i.e multiples of a.) s
5 120 M
(Every hyperbolic tile segment in Computational Geometric Factorization is the union of interse) s
5 109 M
(ctions of principalideals - one infinite ideal y1*Z parallel to x-axis and other k infinite id) s
5 98 M
(eals xi*Z parallel to y-axis in xy-grid \(each intersection is a pixel in xy-grid\) for xi and y) s
5 87 M
(1 in Z - this intersection of principal ideals is finite:) s
5 76 M
(        y1*Z = {y1, y1*2, y1*3,...}) s
5 65 M
(        x1*Z = {x1, x1*2, x1*3,...}) s
5 54 M
(        x2*Z = {x2, x2*2, x2*3,...}) s
5 43 M
(        x3*Z = {x3, x3*2, x3*3,...}) s
5 32 M
(        ...) s
5 21 M
(        xk*Z = {xk, xk*2, xk*3,...}) s
_R
S
%%Page: (393) 393
%%BeginPageSetup
_S
18 36 translate
/pagenum 393 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (393) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        Tile segment = \(x1*Z /\\ y1*Z\) \\/ \(x2*Z /\\ y1*Z\) \\/ ... \(xk*Z /\\ y1*Z\)) s
5 670 M
(In Algebraic Geometric terms, a hyperbolic pixelation is union of tile segments \(union of unio) s
5 659 M
(n of intersections of principal ideals\). Sum of lengths of first n tile segments of pixelated ) s
5 648 M
(hyperbolic curve:) s
5 637 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] = Nn/\(n+1\)) s
5 626 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] <= N/1^2 + N/2^2 + N/3^2 + N/4^2 + ... ) s
5 615 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] <= \(RiemannZetaFunction\(s=2\)\)*N) s
5 604 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] <= 1.6449*N) s
5 582 M
(An algebraic subset of Z^2 for hyperbolic variety is defined as \(N is number to factorize\):) s
5 571 M
(        V\(S\) = { \(x1,y1\) in Z^2 | x1*y1 - N = 0 }) s
5 560 M
(which is the point-set on the hyperbolic tile segments \(equivalent to previous definition base) s
5 549 M
(d on principal ideals\).) s
5 527 M
(-------------------------------------------------------------------------------------------) s
5 516 M
(Computational Geometric Hyperbolic tile segments pixelation as Variety over Finite Fields:) s
5 505 M
(-------------------------------------------------------------------------------------------) s
5 494 M
(Algebraic Varieties are defined as set of zeros of polynomial equations. If K is a Field and N) s
5 483 M
( is a positive integer, an affine N-Space over K is defined as:) s
5 472 M
(        A^N\(K\) = {\(a1,a2,...,aN\)| a1,a2,...,aN in K}) s
5 461 M
(A subset of affine N-Space is an affine Algebraic Variety over K defined as:) s
5 450 M
(        X\(K\) = {a in A^N\(K\)| f1\(a\) = 0,f2\(a\) = 0,...,fr\(a\)=0}) s
5 439 M
(if there are polynomials f1,f2,...,fr having coefficients from K[T1,T2,...,Tn]. In Computation) s
5 428 M
(al Geometric Factorization, Hyperbolic tile segment pixelation is an affine Algebraic Variety ) s
5 417 M
(defined over a finite field or Galois Field K of order p^n >> N \(p^n is a prime power\) satisfy) s
5 406 M
(ing polynomial x1*y1 - N = 0 for \(x1,y1\) in affine 2-Space A^2\(K\). Counting number of elements) s
5 395 M
( in finite algebraic variety is non-trivial problem - in the context of geometric factorizatio) s
5 384 M
(n, this is tantamount to finding number of points in hyperbolic tile segments.) s
5 362 M
(References:) s
5 351 M
(-----------) s
5 340 M
(601.1 Algebraic Geometry - Chapters 1 and 2 - [JS Milne] - https://www.jmilne.org/math/CourseN) s
5 329 M
(otes/AG.pdf ) s
5 318 M
(601.2 Principal Ideal - https://en.wikipedia.org/wiki/Ideal_\(ring_theory\)) s
5 307 M
(601.3 Topics in Algebra - [Israel N. Herstein] - Pages 143-144 - Euclidean Rings) s
5 296 M
(601.4 Value of Riemann Zeta Function at s=2 - https://en.wikipedia.org/wiki/Particular_values_) s
5 285 M
(of_the_Riemann_zeta_function - pi^2/6=1.6449...) s
5 274 M
(601.5 Counting Points of Varieties over Finite Fields - [Sudhir Ghorpade, IIT Bombay, Mumbai] ) s
5 263 M
(- http://www.math.iitb.ac.in/~srg/Talks/IRCCAwardLecture_Ghorpade_29Aug2012.pdf) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(------------) s
5 219 M
(602. \(THEORY\) Software Analytics - GraphFrames - GraphX - Parallel Graph Algorithms for CallGr) s
5 208 M
(aph/CFG/SATURN Graph DOT files - 27 September 2018) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(------------) s
5 175 M
(1.NeuronRain till now has a native implementation of parallelized graph processing \(e.g defini) s
5 164 M
(tion graph growth) s
5 153 M
(implementation in InterviewAlgorithm/ for texts\) and sequential NetworkX Graph objects) s
5 142 M
(2.Spark has parallel graph library GraphX and a separate repository GraphFrames which internal) s
5 131 M
(ly wraps GraphX) s
5 120 M
(\(http://graphframes.github.io/api/python/graphframes.html\)) s
5 109 M
(3.This commit introduces an option to choose GraphFrames in analyzing Software Analytics CallG) s
5 98 M
(raph/CFG/SATURN DOT files in CyclomaticComplexitySparkMapReducer.py and invokes few parallel a) s
5 87 M
(lgorithm functions for indegrees, strongly connected components, triangle counting.) s
5 76 M
(4.Number of strongly connected components, degrees, triangles in CallGraph/CFG/SATURN graphs a) s
5 65 M
(re cyclomatic measures of code complexity \(both static and dynamic\)) s
5 54 M
(5.logs for GraphFrames is committed to testlogs/CyclomaticComplexitySparkMapReducer.log.GraphX) s
5 43 M
(Frames.27September2018) s
5 32 M
(6.GraphFrames can be applied not just to Program Analysis DOT files but to any other source \(T) s
5 21 M
(extGraph, Social Networks etc.,\)`) s
5 10 M
(7.Spark Commandline for GraphFrames package: /media/Ubuntu2/spark-2.3.1-bin-hadoop2.7/bin/spar) s
_R
S
%%Page: (394) 394
%%BeginPageSetup
_S
18 36 translate
/pagenum 394 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (394) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(k-submit --packages graphframes:graphframes:0.6.0-spark2.3-s_2.11 CyclomaticComplexitySparkMap) s
5 681 M
(Reducer.py) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(---------------) s
5 637 M
(603. \(THEORY and FEATURE\) ImageGraph creation from an Image - Keras-Theano - related to 587 an) s
5 626 M
(d 588 -) s
5 615 M
(EventNet Tensor Products Algorithm for Merit of Large Scale Visuals - 30 September 2018) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(---------------) s
5 582 M
(1.This commit introduces a primitive but crucial implementation of EventNet Tensor Products Al) s
5 571 M
(gorithm ) s
5 560 M
(for Large Scale Visuals which creates a text graph from information gained from processing of ) s
5 549 M
(a visual \(.jpg\).) s
5 538 M
(2.Keras is a framework for Computer Vision which supports pre-trained ImageNet datasets \(VGG, ) s
5 527 M
(ResNet\) annotated) s
5 516 M
(to ImageNet vertices by Convolution Neural Networks.ImageNet presently has 14 million vertices) s
5 505 M
(.) s
5 494 M
(3.Keras has support for TensorFlow, Theano, CNTK backends. A python implementation which impor) s
5 483 M
(ts Keras and sets) s
5 472 M
(the backend to Theano and predicts objects in an image from ImageNet has been committed to ima) s
5 461 M
(ge_pattern_mining/ImageNet/ImageGraph_Keras_Theano.py) s
5 450 M
(4.This script loads an image in keras-theano, converts it to an image array, expands its dimen) s
5 439 M
(sions and predicts the objects in the image by ResNet50 pre-trained ImageNet dataset. ) s
5 428 M
(5.Predictions for objects in image are decoded into array of tuples of the form \(id, imagenet_) s
5 417 M
(vertex, probability\).) s
5 406 M
(6.An example prediction for few images is described in : https://www.pyimagesearch.com/2016/08) s
5 395 M
(/10/imagenet-classification-with-python-and-keras/ along with probabilities for objects annota) s
5 384 M
(ted.) s
5 373 M
(7.These predicted ImageNet vertices are concatenated into a text and passed on to RecursiveGlo) s
5 362 M
(ssOverlap_Classifier.py which creates a Text Graph - ImageGraph - by invoking RecursiveGlossOv) s
5 351 M
(erlapGraph\(\) on this text.) s
5 340 M
(8.This algorithm essentially maps an Image to a TextGraph. Presently only still images are sup) s
5 329 M
(ported - extending to Video is straightforward by getting all frames in a video and computing ) s
5 318 M
(ImageGraphs for all frames and Tensor Products of the causally related ImageGraphs.) s
5 307 M
(9.logs for few images \(one of which is courtesy: https://www.aazp.in/live-streaming/ - WhiteTi) s
5 296 M
(ger_1.jpg\) have been committed to image_pattern_mining/ImageNet/testlogs/) s
5 285 M
(10.Graphs printed in logs show fairly reasonable inference of prominent entities in image. ) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(---------------) s
5 241 M
(604. \(FEATURE\) Music Pattern Mining - Onset of Notes Detection - 1 October 2018 - related to 6) s
5 230 M
(7,68,69) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(---------------) s
5 197 M
(1. audio_features\(\) function in AudioToBitMatrix.py has been updated to compute notes onset fr) s
5 186 M
(om audio signal) s
5 175 M
(2. Notes Onset Detection involves finding peaks in onset strength of the signal time series.) s
5 164 M
(3. Extracting notes from signal converts the music time series to a string from a language of ) s
5 153 M
(notes alphabets.) s
5 142 M
(4. Most algorithms for audio analysis are time-series \(fft,statistics etc.,\) based. Considerin) s
5 131 M
(g music as a Formal language opens new vistas into theoretical analysis of music. For example,) s
5 120 M
( finding a deterministic finite state automaton for sequence of notes in a music signal is mea) s
5 109 M
(sure of complexity in music. ) s
5 98 M
(5. Not just automata, variety of string complexity measures \(e.g Kolmogorov complexity - MDL\) ) s
5 87 M
(can effectively) s
5 76 M
(describe music notes strings. ) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(---------------) s
5 32 M
(605. \(THEORY\) Computational Geometric Factorization, Parallel Planar Point Location, Ray Shoot) s
5 21 M
(ing Queries,) s
5 10 M
(Multisearch, PRAM and BSP models - 2 October 2018 - related to 34, 506, 575, 597) s
_R
S
%%Page: (395) 395
%%BeginPageSetup
_S
18 36 translate
/pagenum 395 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (395) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(---------------) s
5 670 M
(Factorization by Computational Geometric algorithms - k-mergesort, segment trees, wavelet tree) s
5 659 M
(s, ray shooting) s
5 648 M
(queries - described earlier implement a generic idiom of Planar Point Location which locates f) s
5 637 M
(actor points ) s
5 626 M
(inside some of the polygons in the planar subdivision created by the hyperbolic pixel array se) s
5 615 M
(gments. Planar) s
5 604 M
(Point Location is a special problem in Multisearch which is defined as: Given a set of query p) s
5 593 M
(oints and set of) s
5 582 M
(line segments in 2D plane, multisearch returns the line segments containing the query points w) s
5 571 M
(hich is exactly) s
5 560 M
(what is required in factorization. There are lot of parallel planar point location algorithms ) s
5 549 M
(for PRAM and BSP) s
5 538 M
(model and thus in NC \(references in 34\). After locating a pixel array polygon by parallel plan) s
5 527 M
(ar point location, factor can be found by binary search of the segment polygon containing the ) s
5 516 M
(factor because each hyperbolic segment is implicitly sorted - one of the ordinate axes is cons) s
5 505 M
(tant and other increases i.e each tile is an arithmetic progression. Parallel Planar Point Loc) s
5 494 M
(ation algorithm in reference 34.83 can locate a polygon containing factor point in O\(\(logN\)^2\)) s
5 483 M
( PRAM time with additional O\(logN\) sequential time for binary search to locate the factor with) s
5 472 M
(in polygon. ) s
5 450 M
(Ray shooting query algorithms described earlier reduce the necessity of parallelism to great e) s
5 439 M
(xtent by making an) s
5 428 M
(educated guess of approximate location of factor points by applying number theory results and ) s
5 417 M
(search their circular vicinity for exact factors by k-mergesort, segment trees or wavelet tree) s
5 406 M
(s. Probability of error in ray shooting has been derived earlier. Planar Point Location and Ra) s
5 395 M
(y Shooting queries can be combined into one by following) s
5 384 M
(algorithm for multisearch:) s
5 373 M
(        \(*\) Sequentially shoot ray queries for O\(loglogN\) approximate prime factors with avera) s
5 362 M
(ge spacing O\(N/loglogN\) between rays shot from origin. This is O\(loglogN\) sequential time \(ass) s
5 351 M
(uming Hardy-Ramanujan estimate\)) s
5 340 M
(        \(*\) Locate the segments \(pixel array polygons\) containing each of the approximate fact) s
5 329 M
(ors by Parallel Planar Point Location. This returns O\(loglogN\) segments in O\(\(logN\)^2*loglogN\)) s
5 318 M
( parallel time. With high probability a segment containing approximate factor might also conta) s
5 307 M
(in exact factor:) s
5 296 M
(                \(*\) Each tile segment is of variable length N/[x\(x+1\)] but spacing between pri) s
5 285 M
(me factors is equalkN/loglogN for some constant k) s
5 274 M
(                \(*\) Error occurs if  N/[x\(x+1\)] < kN/loglogN \(or\) loglogN < k\(x\(x+1\)\)) s
5 263 M
(                \(*\) Solving for x in x^2 + x - \(loglogN/k\) > 0:) s
5 252 M
(                        x > -0.5 + 0.5*sqrt\(1 + 4loglogN/k\)) s
5 241 M
(        \(*\) Each O\(loglogN\) segment\(polygon\) can be binary searched in O\(logN*loglogN\) sequent) s
5 230 M
(ial time. ) s
5 219 M
(        \(*\) Total Parallel and Sequential time of previous 3 steps = O\(loglogN + \(logN\)^2*logl) s
5 208 M
(ogN + logN*loglogN\)) s
5 197 M
(        \(*\) This is just another sequential optimization which makes some parallel computation) s
5 186 M
( sequential. ) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(--------------) s
5 142 M
(An average case sequential optimization for removing parallelism in Computational Geometric Fa) s
5 131 M
(ctorization:) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(--------------) s
5 98 M
(\(*\) Average number of tiles between two approximate prime factors m and \(m+1\) found by ray sho) s
5 87 M
(oting:) s
5 76 M
(                = \(m+1\)/[kloglogN - m - 1] - m/[kloglogN - m]) s
5 65 M
(because number of tiles till m-th prime factor = n = m/[kloglogN - m] for m=1,2,3,...,kloglogN) s
5 54 M
(\(*\) Polygon \(hyperbolic tile segment\) containing the ray shot approximate factor can be found ) s
5 43 M
(by equation in 2-level binary search sequential optimization described previously - Tile conta) s
5 32 M
(ining approximate factor point x can be expressed by inequality:) s
5 21 M
(        Nk/\(k+1\) < x < N\(k+1\)/\(k+2\)) s
5 10 M
(        k < x/\(N-x\)) s
_R
S
%%Page: (396) 396
%%BeginPageSetup
_S
18 36 translate
/pagenum 396 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (396) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(integer round-off of k is the index of tile interval containing x. This a simple sequential pl) s
5 681 M
(anar point location identity in elementary arithmetic with no necessity for PRAMs or BSP.) s
5 670 M
(\(*\) Each consecutive tile in N/kloglogN spacing between approximate factors can be found by ti) s
5 659 M
(ling equation N/[x\(x+1\)] - subtract y coordinate by N/[x\(x+1\)] and increment x coordinate by 1) s
5 648 M
( or vice versa - and each of these tiles in N/kloglogN spacing can be individually binary sear) s
5 637 M
(ched in O\(logN\).) s
5 626 M
(\(*\) Thus total average sequential time to sweep binary search tiles in N/kloglogN spacing betw) s
5 615 M
(een 2 consecutive approximate factors found by ray shooting:) s
5 604 M
(        = O\([\(m+1\)/[kloglogN - m - 1] - m/[kloglogN - m]] * logN\)) s
5 593 M
(\(*\) Maximum number of tiles in N/kloglogN spacing occurs by setting m=kloglogN - 2 \(because of) s
5 582 M
( geometric intuition of hyperbolic tiling, most tiles occur within an interval in topmost or r) s
5 571 M
(ightmost extreme of hyperbolic arc which contains kloglogN-th factor on either axes\):) s
5 560 M
(        = O\([\(kloglogN - 2 + 1\)/[kloglogN - kloglogN + 2 - 1] - \(kloglogN - 2\)/[kloglogN - klo) s
5 549 M
(glogN + 2]]\)) s
5 538 M
(        = O\(kloglogN - 1 - \(kloglogN - 2\)/2\)) s
5 527 M
(        = O\(kloglogN\)) s
5 516 M
(=> Maximum time to binary search tiles in N/kloglogN spacing = O\(loglogN * logN\)) s
5 505 M
(=> Each of O\(loglogN\) spacings between approximate factors can be searched in: ) s
5 494 M
(        O\(loglogN*loglogN*logN\)) s
5 483 M
(average case sequential time with no necessity for parallel processing.) s
5 461 M
(References:) s
5 450 M
(-----------) s
5 439 M
(605.1 Truly efficient parallel algorithms: 1-optimal multisearch for an extension of the BSP m) s
5 428 M
(odel - [Armin Baumker, Wolfgang Dittrich, Friedhelm Meyer auf der Heide] - Elsevier Theoretica) s
5 417 M
(l Computer Science - https://core.ac.uk/download/pdf/81931675.pdf - Parallel Planar Point Loca) s
5 406 M
(tion by Multisearch in BSP* model - Section 1.1.) s
5 395 M
(605.2 Communication Effcient Deterministic Parallel Algorithms for Planar Point Location and 2) s
5 384 M
(d Voronoi Diagram - [Mohamadou Diallo , Afonso Ferreira and Andrew Rau-Chaplin] - Section 2 - ) s
5 373 M
(Hyperbolic pixelation is in a sense a Voronoi tessellation in which factor points are ensconce) s
5 362 M
(d by the pixel array polygons. ) s
5 351 M
(605.3 Computational Geometric Planar Point Location on Arrangements - Section 9.9.1 - Randomiz) s
5 340 M
(ed Algorithms - [Motwani-Raghavan] - Pixelated Hyperbolic tile segments are adjacent arrangeme) s
5 329 M
(nts) s
5 318 M
(605.4 Rectifiable Curves - Principles of Mathematical Analysis - [Walter Rudin] - Pages 136-13) s
5 307 M
(7 - Section 6.26 and Theorem 6.27 - Pixelation of Hyperbolic arc is exactly rectification - ma) s
5 296 M
(p is defined by y = N/x and interval [1,N] is partitioned into tile segments of lengths N/[x\(x) s
5 285 M
(+1\)] and sum of lengths of tile segments is the length of polygonal path.) s
5 274 M
(605.5 Rectification of Curves and Bresenham Line Drawing Algorithm - https://en.wikipedia.org/) s
5 263 M
(wiki/Arc_length and https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm - Rectification) s
5 252 M
( also called as Arc Length finds length of a curve by approximating it with line segments whic) s
5 241 M
(h) s
5 230 M
(may not be axis parallel whereas Computational Geometric Factorization approximates hyperbola ) s
5 219 M
(by only axis parallel straightline segments which is exactly similar to Bresenham line drawing) s
5 208 M
( algorithm - line is replaced by hyperbolic arc \(illustrated in https://en.wikipedia.org/wiki/) s
5 197 M
(Bresenham%27s_line_algorithm#/media/File:Bresenham.svg\).) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(----------------) s
5 153 M
(606. \(THEORY and FEATURE\) VideoGraph EventNet Tensor Product Merit for Large Scale Visuals - 3) s
5 142 M
( October 2018) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(----------------) s
5 109 M
(1. Two new functions have been committed to ImageGraph_Keras_Theano.py for reading a Video fil) s
5 98 M
(e, extracting) s
5 87 M
(frames from the video upto certain number and extract object information by Keras-Theano Image) s
5 76 M
(Net predictions) s
5 65 M
(for each frame.) s
5 54 M
(2. imagenet_videograph\(\) function depends on OpenCV 3.4.3 \(cv2\) Python for reading Videos and ) s
5 43 M
(writing Frame) s
5 32 M
(JPEG files suffixed by unique id. Each frame is mapped to a TextGraph - ImageGraph - by imagen) s
5 21 M
(et_imagegraph\(\)) s
5 10 M
(3. videograph_eventnet_tensor_product\(\) function computes tensor products of pairs of Frame Im) s
_R
S
%%Page: (397) 397
%%BeginPageSetup
_S
18 36 translate
/pagenum 397 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (397) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ageGraphs and) s
5 681 M
(returns an EventNet Tensor from NetworkX. ) s
5 670 M
(4. logs, an example Video \(MP4\) and 2 sample extracted frames \(JPEG\) for EventNet Tensor repre) s
5 659 M
(sentation of) s
5 648 M
(a video have been committed to testlogs/ImageGraph_Keras_Theano.log.3October2018 ) s
5 637 M
(5. From this EventNet Tensor any kind of intrinsic merit can be computed - e.g previously desc) s
5 626 M
(ribed ImageNet based inverse weights, Graph Edit Distance between two Frame ImageGraphs, Tenso) s
5 615 M
(r Rank for connectedness etc.,) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(--------------) s
5 571 M
(607. \(THEORY and FEATURE\) Video EventNet Tensor Products - Inverse Distance Merit of Large Sca) s
5 560 M
(le Visuals) s
5 549 M
(- 4 October 2018) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(--------------) s
5 516 M
(1.New function inverse_distance_intrinsic_merit\(\) has been included in ImageGraph_Keras_Theano) s
5 505 M
(.py. It) s
5 494 M
(iterates through each tensor product entry of Video EventNet Tensor Products matrix and for ev) s
5 483 M
(ery edge) s
5 472 M
(\(a,b\)-\(c,d\) in tensor product computes inverse wordnet distance \(which is basis for ImageNet\):) s
5 461 M
(        1/dist\(a,b\)*1/dist\(c,d\)) s
5 450 M
(and populates a weights matrix per tensor product graph.) s
5 439 M
(2.Each tensor product in EventNet Tensor corresponds to causality between any 2 frames in the ) s
5 428 M
(video.) s
5 417 M
(3.An example merit computation log has been committed to testlogs/ImageGraph_Keras_Theano.log.) s
5 406 M
(4October2018) s
5 395 M
(which shows merits for 4 tensor products \(2 frames * 2 frames\).) s
5 384 M
(4.Lot of weights in merit matrix in logs have huge values implying high causality between two ) s
5 373 M
(frame events.) s
5 362 M
(5.EventNet Tensor Product Algorithm is computationally intensive. Each ImageGraph per frame en) s
5 351 M
(codes relationship) s
5 340 M
(between objects \(actors\) in the frame event.) s
5 329 M
(6.Size of the EventNet Tensor is O\(number_of_frames * number_of_frames * average_number_of_act) s
5 318 M
(ors_per_frame * average_number_of_actors_per_frame\) and memory intensive too.) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(--------------) s
5 274 M
(608. \(THEORY and FEATURE\) Video EventNet Tensor Products - Emotional Merit of Large Scale Visu) s
5 263 M
(als ) s
5 252 M
(- 15 October 2018) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(--------------) s
5 219 M
(1. EventNet Tensor Product representation of a Large Scale Visual just infers the connectednes) s
5 208 M
(s of the) s
5 197 M
(information in the video with no emotional or sentiment scoring.) s
5 186 M
(2. To redress this, new function has been included in ImageGraph_Keras_Theano.py to lookup the) s
5 175 M
( edges of) s
5 164 M
(tensor product graph in empath and aggregate the sentiments of the vertices as a tuple which i) s
5 153 M
(s qualitative emotive merit of the video.) s
5 142 M
(3. Two new example visuals have been added: ExampleImage_1.jpg and ExampleVideo_2.mp4 in addit) s
5 131 M
(ion to earlier) s
5 120 M
(ExampleVideo_1.mp4 and images.) s
5 109 M
(4. Keras has mistook ExampleImage_1.jpg to be a theatre audience which is indeed a classroom p) s
5 98 M
(hoto and annotated) s
5 87 M
(it accordingly \(probably because seating and ambience are similar in both\). Also Empath has mi) s
5 76 M
(sjudged the alumni website content in ExampleVideo_2.mp4 to large extent excluding "college" a) s
5 65 M
(s emotional annotation. Logs have been committed to testlogs/ImageGraph_Keras_Theano.log.15Oct) s
5 54 M
(ober2018 ) s
5 43 M
(5. These Photo and Videos are courtesy \(and related to self\):  ) s
5 32 M
(\(*\) ExampleVideo_1.mp4 - https://www.cmi.ac.in/people/fac-profile.php?id=shrinivas - Chennai M) s
5 21 M
(athematical Institute - Research Scholar website - 2010-11) s
5 10 M
(\(*\) ExampleImage_1.jpg - http://www.angelfire.com/id/95cse/album.html - PSG College of Technol) s
_R
S
%%Page: (398) 398
%%BeginPageSetup
_S
18 36 translate
/pagenum 398 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (398) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ogy - 1995-99 CSE batch alumni website album - Classroom Photo \(class1.jpg\)) s
5 681 M
(\(*\) ExampleVideo_2.mp4 - https://alumni.psgtech.ac.in/profile/view/srinivasan-kannan-1 - PSG C) s
5 670 M
(ollege of Technology Official Alumni website ) s
5 659 M
(6. Frames captured by OpenCV2 are prefixed by the Video file name.) s
5 648 M
(7. THEANO_FLAGS have been set as: declare -x THEANO_FLAGS="cxx=/usr/bin/g++-6") s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(------------) s
5 604 M
(609. \(THEORY\) EventNet Tensor Products - Example for Movie and Youtube Merit - 16 October 2018) s
5 593 M
(- related to 608) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(------------) s
5 560 M
(Previous videos were proof-of-concept implementations for utility of EventNet Tensor. Followin) s
5 549 M
(g is stated just as a theoretical example with no testcases because computation involved is ma) s
5 538 M
(ssive requiring millions of frames and their EventNet Tensor Product - EventNet Tensor Product) s
5 527 M
(s Algorithm can be applied to set of movie/youtube datasets to deduce the connectedness and em) s
5 516 M
(otions in the videos. Since most movie and youtube channels are emotions oriented which are ex) s
5 505 M
(pressed visually, comparing the emotion annotated tuples \(e.g by Empath previously described\) ) s
5 494 M
(of any pair of movies/youtube videos, could rank them by emotional quotient approximately. Als) s
5 483 M
(o the previous Empath emotion annotation creates a set of emotions and not a hashmap of emotio) s
5 472 M
(n annotations to their number of occurrences in the Audio-Visual which is yet another indicato) s
5 461 M
(r. Comparing emotions occurrence hashmaps of two Audio-Visuals is a ranking measure - requires) s
5 450 M
( sorting two hashmaps by emotions occurrence values, comparing top percentile emotions in two ) s
5 439 M
(Audio-Visual hashmaps and finding correlation coefficient between the two probability distribu) s
5 428 M
(tions. Added advantage could be speech recognition in the AV frame-by-frame or for set of fram) s
5 417 M
(es which is not done by previous Keras-Theano implementation and creating AudioGraph from it \() s
5 406 M
(there is no AudioNet library so far\).) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(---------------) s
5 362 M
(610. \(THEORY\) Summary of Large Scale Visuals and EventNet Subgraphs - related to 158,423 - 19 ) s
5 351 M
(October 2018) s
5 340 M
(and 20 October 2018) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(---------------) s
5 307 M
(Guessing/Discovering a Larger EventNet causality Graph from Subgraphs of EventNet has been men) s
5 296 M
(tioned earlier.) s
5 285 M
(An opposite of it is to summarize a huge EventNet Graph into a small summary EventNet subgraph) s
5 274 M
( without much) s
5 263 M
(loss of causality information. Text Summarization is text analysis application of Graph Summar) s
5 252 M
(ization which has been earlier described and implemented by Recursive Lambda Function Growth a) s
5 241 M
(lgorithm. Realworld application of ) s
5 230 M
(Graph Summary is Video Summarization by EventNet Tensor Products representation e.g a movie or) s
5 219 M
( a youtube video is a small duration summary \(minutes or hours\) of real life events \(and their) s
5 208 M
( causalities\) enacted by set of people over many years - this involves sampling an EventNet Te) s
5 197 M
(nsor Product Graph of a Video at relevant vertices and induce a summary subgraph on it which p) s
5 186 M
(reserves meaning. Similar to Text Summarization, Video Summary could also be approximated by c) s
5 175 M
(hoosing dense subgraphs \(or high core number vertices\) of Video EventNet Tensor Products. Topo) s
5 164 M
(logical Sort of Dense Subgraph of Video EventNet Tensor Product Graph gives a flattened summar) s
5 153 M
(y of the video by some ordering \(a gist of important frames\).) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(--------------) s
5 109 M
(611. \(THEORY and FEATURE\) Video Emotions Hashmap, Video Core Topological Sort Summary - 25 Oct) s
5 98 M
(ober 2018) s
5 87 M
(- related to 611) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(--------------) s
5 54 M
(\(*\) Empath emotions of the Video EventNet Tensor Products Graph have been aggregated in a hash) s
5 43 M
(map. This facilitates quantitative emotional scoring of the video. Hashmap correlates the empa) s
5 32 M
(th emotion and its cumulative score. ) s
5 21 M
(\(*\) Core \(Main core\) of the Video EventNet Tensor Product Graph has been computed and is sorte) s
5 10 M
(d topologically for creating some ordering for the summary. ) s
_R
S
%%Page: (399) 399
%%BeginPageSetup
_S
18 36 translate
/pagenum 399 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (399) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\(*\) New example MP4 video has been created from 6 JPEG photos \(in which I was present\) and goo) s
5 681 M
(gle search related to self \(ExampleVideo_3.mp4\) : ) s
5 670 M
(        Frame 1 - Self - Mahabalipuram, Chennai - 2012 \(Copyright: Self\)) s
5 659 M
(        Frame 2 - Self - photo \(Copyright: Self\)) s
5 648 M
(        Frame 3 - Self - VISA photo \(Copyright: Self\)) s
5 637 M
(        Frame 4 - Self - Family photo \(Copyright: Self\)) s
5 626 M
(        Frame 5 - Self - IEC Sun Microsystems - Bengaluru - 2004 \(Copyright: Ex-Colleagues at ) s
5 615 M
(Sun Microsystems\) ) s
5 604 M
(        Frame 6 - Self - IEC Sun Microsystems - Bengaluru - 2000 \(Copyright: Sun Microsystems/) s
5 593 M
(Oracle\)) s
5 582 M
(        Frame 7 and 8 - Google Search of Self) s
5 571 M
(\(*\) Previous recording is a mix of photos of varied genre. Sentiment hashmap for this video pr) s
5 560 M
(ints \(excerpts\):) s
5 549 M
(Sentiment Analysis of the Video: [\('work', 1484.0\), \('toy', 424.0\), \('tool', 848.0\), \('technol) s
5 538 M
(ogy', 3180.0\), \('social_media', 1060.0\), \('shopping', 424.0\), \('science', 1060.0\), \('restauran) s
5 527 M
(t', 848.0\), \('reading', 424.0\), \('programming', 2544.0\), \('play', 424.0\), \('phone', 1696.0\), \() s
5 516 M
('office', 1060.0\), \('negative_emotion', 0.0\), \('musical', 424.0\), \('music', 424.0\), \('messagin) s
5 505 M
(g', 1272.0\), \('meeting', 424.0\), \('internet', 2968.0\), \('hiking', 424.0\), \('furniture', 212.0\)) s
5 494 M
(,  \('dance', 212.0\),  \('computer', 5088.0\), ...]. This is a remarkable inference of the Video ) s
5 483 M
(content by Keras-Theano ImageNet giving high weightage to office and technology as emotional a) s
5 472 M
(nnotations.) s
5 461 M
(\(*\) Logs for this have been committed to testlogs/ImageGraph_Keras_Theano.log.25October2018) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(--------------) s
5 417 M
(612. \(FEATURE\) Video EventNet Core Topological Sort Summary - Bugfixes - 28 October 2018 ) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(--------------) s
5 384 M
(\(*\) Some errors in inverse distance merit computation of the Video EventNet Tensor have been c) s
5 373 M
(orrected which) s
5 362 M
(was earlier a 2-dimensional tensor and has been made 3-dimensional in this commit.) s
5 351 M
(\(*\) Core Summary of the Video has also been changed to compute maximum merit for each tensor p) s
5 340 M
(roduct inverse) s
5 329 M
(distance merit vector and apply a threshold filter for the distance merit.) s
5 318 M
(\(*\) Three dimensional EventNet Tensor is mapped to NetworkX Graph after previous threshold fil) s
5 307 M
(ter.) s
5 296 M
(\(*\) Only causal frames above inverse distance threshold are included in the NetworkX graph and) s
5 285 M
( main core is computed on this graph ) s
5 274 M
(\(*\) self loops and parallel edges are removed and topological sorting is performed on main cor) s
5 263 M
(e.) s
5 252 M
(\(*\) logs for this have been committed to testlogs/ImageGraph_Keras_Theano.log.28October2018) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(------------) s
5 208 M
(613. \(FEATURE\) People Analytics - HR Analytics Implementation and Least Energy Intrinsic Merit) s
5 197 M
( of a ) s
5 186 M
(social profile - 9 November 2018 - related to 365, 443, 572) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(------------) s
5 153 M
(\(*\) People Analytics is the generalized version of HR Analytics for analyzing any social profi) s
5 142 M
(le vertex.) s
5 131 M
(\(*\) This commit adds SocialNetworkAnalysis_PeopleAnalytics.py python implementation to reposit) s
5 120 M
(ory which) s
5 109 M
(at present analyzes LinkedIn profiles and computes:) s
5 98 M
(        \(*\) Graph Tensor Neuron Network Intrinsic Merit of the profile text with no field pars) s
5 87 M
(ing - this treats) s
5 76 M
(the social profile as an en masse text with no delineations and applies Recursive Lambda Funct) s
5 65 M
(ion Growth algorithm to create lambda function composition tree of the resume text. Core class) s
5 54 M
(ification and Centrality measures throw some interesting insights:) s
5 43 M
(                \(*\) Core number 4 identifies the class of the social profile ) s
5 32 M
(                \(*\) Maximum merit random walk of the lambda composition tree approximately gue) s
5 21 M
(sses the purport) s
5 10 M
(of the text in the social profile) s
_R
S
%%Page: (400) 400
%%BeginPageSetup
_S
18 36 translate
/pagenum 400 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (400) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(                \(*\) Betweenness and Closeness Centralities estimate the top-ranked classes acc) s
5 681 M
(urately compared to Degree and PageRank Centralities) s
5 670 M
(        \(*\) Log Normal Fitness of the social profile after parsing the total work experience a) s
5 659 M
(nd academic) s
5 648 M
(stints of the profile - for linkedin this inverse log normal least energy fitness is 1/\(logE +) s
5 637 M
( logV\) with no Wealth estimates - Wealth is caused by E\(Education\) and V\(Work/Valour\) as far a) s
5 626 M
(s professional profiles are concerned. Lowest Value of Least Energy Fitness implies Highest Fi) s
5 615 M
(tness. Parsing is done by parse_profile\(\) function which implements a switch design pattern - ) s
5 604 M
(stint polymorphs from work to academic tenures.) s
5 593 M
(        \(*\) Log Normal Experiential Intrinsic Fitness of the social profile \(by applying mista) s
5 582 M
(ke bound learning differential equation for recursive mistake correction tree described earlie) s
5 571 M
(r\) - log normalized because of huge exponents) s
5 560 M
(\(*\) Because of limitations due to Updated LinkedIn Scraping Policy \(https://www.forbes.com/sit) s
5 549 M
(es/forbestechcouncil/2017/09/20/linkedin-vs-hiq-ruling-casts-a-long-shadow-over-the-tech-indus) s
5 538 M
(try/#19f535f35e6c\), this is only implemented as a non-crawled example for LinkedIn profile of ) s
5 527 M
(self: https://www.linkedin.com/comm/in/srinivasan-kannan-608a671 \(pdf and text version of pdf ) s
5 516 M
(by pdf2txt\)) s
5 505 M
(\(*\) datetime python package is used to compute timedelta\(s\) and a regex matcher isdaterange\(\) ) s
5 494 M
(function has been implemented for parsing date ranges in the profile:) s
5 483 M
(        \(*\) Work Experience Date Ranges have the Regex: <Month> <Year> - <Month> <Year>) s
5 472 M
(        \(*\) Academic Date Ranges have the Regex: <Year> - <Year> and months are implicit) s
5 461 M
(\(*\) This implementation does not assume a Web Crawler and Social Profile Datasource and only r) s
5 450 M
(equires a file input \(datasource, file type and file name are passed in as arguments to parse_) s
5 439 M
(profile\(\)\) - optionally, crawled social profiles can be invoked as file arguments to parse_pro) s
5 428 M
(file\(\). Presently only linkedin datasource, text file types are supported. PDF parsing has bee) s
5 417 M
(n implemented by PyPDF2 but there are IndirectObject related errors.) s
5 395 M
(-------) s
5 384 M
(Theory:) s
5 373 M
(-------) s
5 362 M
(An obvious application of HR analytics is feasibility of automatic recruitment of people by pr) s
5 351 M
(ofile analytics. Usual Interview and Written Test based process of recruitment measures Intrin) s
5 340 M
(sic Merit \(approximately subject to error\) of people. Analytics of Professional Networks is Fa) s
5 329 M
(me \(Degree etc.,\) based. From 572.8 \("...Boolean majority function is equivalent to PageRank c) s
5 318 M
(omputed for 2 candidate websites on \(n+2\)-vertex graph \(n user websites choose between 2 candi) s
5 307 M
(date websites - Good\(1\) and Bad\(0\), choice is fraction of outdegree from a user website\) norma) s
5 296 M
(lized to 0 \(smaller pagerank\) and 1 \(bigger pagerank\). Margulis-Russo threshold d\(Pr\(Choice=Go) s
5 285 M
(od=1\)\)/dp on this PageRank version of Majority function is ratio of sum of influences of varia) s
5 274 M
(bles \(user websites\) to standard deviation which has a phase transition to Good\(1\) at per-vote) s
5 263 M
(r website bias p >= 0.5..."\). Majority Voting/PageRank or any other Fame/Degree measure is kno) s
5 252 M
(wn to have phase transition from Low accuracy to High accuracy for per voter p-bias > 0.5 impl) s
5 241 M
(ying automatic recruiting is feasible if Fame lowerbounds Intrinsic Merit \(Intrinsic Merit >= ) s
5 230 M
(Fame\). Stability or Resilience of Interview as LTF vis-a-vis Majority Function has been analyz) s
5 219 M
(ed earlier in 365. Problematic condition for rendering automatic crowdsourced recruitment infe) s
5 208 M
(asible is: Intrinsic Merit << Fame. Comparison of Intrinsic Merit to Fame by correlation coeff) s
5 197 M
(icients requires normalization of fame and merit rankings e.g fame and merit probability distr) s
5 186 M
(ibutions and distance between these two distributions for same dataset. From references in 572) s
5 175 M
(, most experimental results in sports\(e.g Elo rating\), science \(e.g research published\) etc., ) s
5 164 M
(show fame grows exponentially to merit implying merit is quantitatively proportional to log\(Fa) s
5 153 M
(me\). For example, if PageRank/Degree centrality is computed on Professional Network Vertices a) s
5 142 M
(nd dynamic experiential intrinsic merit E of a profile at time point t is computed by previous) s
5 131 M
( implementation:) s
5 120 M
(                E = M*e^\(kMt\) = log\(dv\(t\)\) * e^\(klog\(dv\(t\)\)*t/clogt\) / clogt for evolving degr) s
5 109 M
(ee dv\(t\)) s
5 98 M
(crowdsourcing infeasibility condition reduces to:) s
5 87 M
(                log\(dv\(t\)\) * e^\(klog\(dv\(t\)\)*t/clogt\) / clogt << dv\(t\)) s
5 76 M
(                \(klog\(dv\(t\)\)*t/clogt\) << log\(clogt * dv\(t\) / log\(dv\(t\)\)\)) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(----------------) s
5 32 M
(614. \(FEATURE\) Social Network Analysis - People Analytics - Another example and Unicode correc) s
5 21 M
(tions - ) s
5 10 M
(12 November 2018 - related to 613) s
_R
S
%%Page: (401) 401
%%BeginPageSetup
_S
18 36 translate
/pagenum 401 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (401) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(----------------) s
5 670 M
(1. RecursiveGlossOverlap_Classifier.py has been changed to ignore unicode errors in text strin) s
5 659 M
(gs) s
5 648 M
(2. New example Curriculum Vitae TeX \(self\) has been analyzed by Recursive Lambda Function Grow) s
5 637 M
(th Algorithm) s
5 626 M
(for various intrinsic merit measure it prints.) s
5 615 M
(3. Core classifier shows high relevance to human judgement and again Closeness and Betweenness) s
5 604 M
( centralities are) s
5 593 M
( better than Degree and PageRank centralities \(classes like "Silver" are probably produced bec) s
5 582 M
(ause of relevance of "Silver" to "Hyderabad"\)) s
5 571 M
(4. RecursiveLambdaFunctionGrowth.dot file has been recreated.) s
5 560 M
(5. logs for this have been committed to testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.12N) s
5 549 M
(ovember2018) s
5 538 M
(6. Textual analysis of a CV is quite open-ended and unstructured - Nonetheless the classificat) s
5 527 M
(ion by TextGraph core numbers gives reasonable estimate of crucial aspects in the resume) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(----------------) s
5 483 M
(615. \(THEORY\) Hash Table Chaining, Locality Sensitive Hashing and Frequently occurring pattern) s
5 472 M
(s - 13 November) s
5 461 M
(2018 - related to all sections on LSH partitions, Majority Voting, Theoretical EVMs, Streaming) s
5 450 M
(, ) s
5 439 M
(Audio-Visual Pattern Mining, Bigdata Analytics) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(----------------) s
5 406 M
(Locality Sensitive Hashing is a collision-supportive hash chaining which as described earlier ) s
5 395 M
(has multitude) s
5 384 M
(of applications in clustering similar elements of a set which can be votes for candidates\(EVMs) s
5 373 M
( which colocate votes for a candidate in same bucket\), bigdata or audio-visual spectrogram-his) s
5 362 M
(togram representation. Essentially, every chained hash table or LSH partition of a set is a hi) s
5 351 M
(stogram of probability distribution when viewed pictorially - e.g audio signals represented as) s
5 340 M
( series of animated histograms. Assuming dataset is a stream of these LSH partitions, problem ) s
5 329 M
(is to decipher patterns underlying these histograms. There are LSH algorithms like Nilsimsa ha) s
5 318 M
(sh, Minhash etc., which find similarities of two sets \(texts for example in Nilsimsa\) by Jacca) s
5 307 M
(rd, Hamming and other distance coefficients. If each element in the stream of histograms/LSH p) s
5 296 M
(artition/Chained Hashtable are considered as set of buckets, comparing two such histograms is ) s
5 285 M
(tantamount to computing similarity of 2 consecutive sets of buckets by some hash metric e.g Mi) s
5 274 M
(nhash. It is worthwhile to mention that this histogram \(set of buckets\) pattern is ubiquitous ) s
5 263 M
(across any algorithm doing an LSH partition or hash table bucket chaining. In the People Analy) s
5 252 M
(tics example previously, LSH partition of People and Professional Profiles splits them into bu) s
5 241 M
(ckets of similar traits.) s
5 219 M
(Distributed Hash Tables which geographically decentralize chunks of a huge table realise theor) s
5 208 M
(etical Electronic Voting Machines which have been defined earlier in terms of LSH partitions o) s
5 197 M
(r Separate Chaining Hash tables in distributed/cloud setting - buckets of votes for candidates) s
5 186 M
( are distributed on cloud nodes. CAP Theorem applies to Theoretical EVMs implying only 2 of 3 ) s
5 175 M
(\(Consistency-serialization, Availability-readwrites are 100% reflected and Partition Tolerance) s
5 164 M
(-resilience to node/network failures\) are feasible on an internet EVM based on LSH Partition/S) s
5 153 M
(eparate Chaining. Real world EVMs are most vulnerable to network, sabotage or power failure \(p) s
5 142 M
(artition\) making it a CA system.This limitation is less visible if number of candidates is sma) s
5 131 M
(ll and table is local but serious if number of candidates \(buckets\) are huge and requires dist) s
5 120 M
(ribution. Even if partitions are assumed to be nil, there is always a tradeoff between consist) s
5 109 M
(ency and latency i.e a distributed system has to compromise on speed for greater consistency. ) s
5 98 M
(This has been formalized as extension of CAP Theorem - PACELC theorem.) s
5 76 M
(Example:) s
5 65 M
(If profiles are represented as TextGraphs as in previous implementation of HR Analytics, edges) s
5 54 M
( between vertices of the textgraph encodes the temporal information because most social profil) s
5 43 M
(es contain chronologically ordered timeline history of events - similarity measure for any two) s
5 32 M
( profiles could be the temporal cause-effect similarity between two profiles and thus Social P) s
5 21 M
(rofile TextGraph is an EventNet too.) s
_R
S
%%Page: (402) 402
%%BeginPageSetup
_S
18 36 translate
/pagenum 402 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (402) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(References:) s
5 681 M
(----------) s
5 670 M
(615.1 PACELC Theorem extension of CAP - [Daniel Abadi] - http://cs-www.cs.yale.edu/homes/dna/p) s
5 659 M
(apers/abadi-pacelc.pdf) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(------------------) s
5 615 M
(616. \(FEATURE\) Software Analytics - Cyclomatic Complexity - Rewrite for merging two clauses - ) s
5 604 M
(14 November 2018) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(------------------) s
5 571 M
(1. CyclomaticComplexitySparkMapReducer.py has been changed to merge True and False clauses for) s
5 560 M
( GraphFrames) s
5 549 M
(2. Cyclomatic Complexity \(Zeroth Betti Number\) has been computed from GraphFrames stronglyConn) s
5 538 M
(ectedComponents\(\)) s
5 527 M
(as per definition of Cyclomatic Number in Topological Graph Theory) s
5 516 M
(3. Cyclomatic Complexity \(First Betti Number\) has been computed as E-V+[Zeroth Betti Number]) s
5 505 M
(4. New callgrind and kcachegrind DOT files for execution of command "ls" have been committed a) s
5 494 M
(nd included for) s
5 483 M
(Cyclomatic Complexity and Call graph GSpan mining:) s
5 472 M
(        callgrind.ls.out.3104) s
5 461 M
(        kcachegrind_callgraph_ls.dot) s
5 450 M
(5. logs for this have been committed to CyclomaticComplexitySparkMapReducer.log.GraphXFrames.1) s
5 439 M
(4November2018) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(-----------------) s
5 395 M
(617. \(THEORY\) Beatty Sequences and Complement Diophantines - related to all sections on Comple) s
5 384 M
(mentary Sets) s
5 373 M
(,Ramsey 2-coloring and their Diophantine/Function representations - 16 November 2018, 18 Novem) s
5 362 M
(ber 2018 - draft updates to ) s
5 351 M
(https://arxiv.org/pdf/1106.4102v1) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(-----------------) s
5 318 M
(Complement Functions have been defined for arbitrary complementary sets \(Integers/Rationals/Re) s
5 307 M
(als\) in https://arxiv.org/pdf/1106.4102v1 and their relevance to Ramsey Coloring of Sequences ) s
5 296 M
(and decidability of Diophantine representation of complementary sets \(MRDP Theorem\) have been ) s
5 285 M
(expounded in detail earlier. Special Case of Complementary Sets of Integers is a well-studied ) s
5 274 M
(problem and a classic result due to Beatty defines 2 complementary sets of integers based on s) s
5 263 M
(olutions to equation 1/a + 1/b = 1 for irrationals a and b. Thus terminologies - Complement Fu) s
5 252 M
(nctions, Complement Diophantines, Ramsey 2-Coloring of Sequences and Beatty Complementary Sequ) s
5 241 M
(ences - are synonymous with respect to set of Integers Z. Notion of Complementation generalize) s
5 230 M
(s it to any sets Boolean, Integer, Real or Rational. Integer and Real Complementation have sol) s
5 219 M
(vable algorithms in the form of Diophantine equations subject to MRDP theorem and Tarski/Sturm) s
5 208 M
(, but complementation over rationals is open problem for the direction N to Q - mapping Q to N) s
5 197 M
( is straightforward. ) s
5 175 M
(ABC Conjecture and Complement Diophantines:) s
5 164 M
(-------------------------------------------) s
5 153 M
(ABC conjecture states there are finite coprime triples a,b,c such that a+b=c and quality\(q\)=lo) s
5 142 M
(g\(c\)/log\(rad\(abc\)\) > 1 + epsilon for every epsilon > 0. Though there are infinitely many copri) s
5 131 M
(me triples a,b,c \(a+b=c\) having quality > 1, this conjecture predicts there are only finite nu) s
5 120 M
(mber of coprime triples cluttered between every real value of epsilon. Complementary version o) s
5 109 M
(f ABC conjecture is defined as:) s
5 98 M
(        \(*\) T = set of all coprime triples \(a,b,a+b=c\)) s
5 87 M
(        \(*\) Q1 = set of all coprime triples of quality > 1) s
5 76 M
(        \(*\) Q0 = set of all coprime triples of quality < 1) s
5 65 M
(        \(*\) Q0 U Q1 = T and Q0 /\\ Q1 = Empty i.e sets Q0 and Q1 are complementary infinite set) s
5 54 M
(s \(creates Beatty sequences equivalent for triples\).) s
5 43 M
(        \(*\) Complementary Sets Version of ABC Conjecture: Infinite set of triples Q1 is the di) s
5 32 M
(sjoint set cover or exact cover of finite sets of triples of quality 1+epsilon for every real ) s
5 21 M
(epsilon.) s
5 10 M
(        \(*\) Previous complementary sets can be picturised as:) s
_R
S
%%Page: (403) 403
%%BeginPageSetup
_S
18 36 translate
/pagenum 403 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (403) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(                \(*\) T is a Rubik's cube in which each ordinate is a coprime triple \(a,b,c\) ) s
5 681 M
(                \(*\) Q0 and Q1 partition T into two disjoint sets of qualities less than 1 and ) s
5 670 M
(greater than 1.) s
5 659 M
(                \(*\) Q1 is the 3 dimensional half-space of Cube tiled by finite sets of triples) s
5 648 M
( of quality 1+epsilon for every real epsilon. As mentioned earlier, Pentominoes tiling is an e) s
5 637 M
(xact cover problem for 2 dimensions.) s
5 615 M
(References:) s
5 604 M
(-----------) s
5 593 M
(617.1 Beatty functions and Complementary Sets - http://citeseerx.ist.psu.edu/viewdoc/download?) s
5 582 M
(doi=10.1.1.514.2119&rep=rep1&type=pdf - "...Let U be a subset of Z. We call two non-empty sets) s
5 571 M
( A, B complementary with respect to U if A \342\\210\251 B = \342\\210\\205 and A \342\\210\252 B = U. A classica) s
5 560 M
(l result of 1926 due to S.  Beatty [1] states that if \316\261 and \316\262 are positive irrational number) s
5 549 M
(s with 1/\316\261 + 1/\316\262 = 1, then {floor\(n\316\261\)} and {floor\(n\316\262\)} \(n \342\\210\\210 N\) are complementary w) s
5 538 M
(ith respect to N, where floor\(x\) denotes the greatest integer function of real x. This result ) s
5 527 M
(has since then been generalized by a number of authors, see e.g., [2], [4], [5], [6] and [7]. ) s
5 516 M
(...") s
5 505 M
(617.2 Diophantine Equations over Rationals and Reals - Section 3.1 - http://wwwmayr.in.tum.de/) s
5 494 M
(konferenzen/Jass07/courses/1/Sadovnikov/Sadovnikov_Paper.pdf - Solving in Q\(multiplication by ) s
5 483 M
(integers\), Solving in R \(Tarski and Sturm methods\)) s
5 472 M
(617.3 Three Dimensional Visualization of ABC Conjecture - http://www.lactamme.polytechnique.fr) s
5 461 M
(/images/CABC.21.20.1.M.D/display.html - visual intuition of the finite sets of coprime triples) s
5 450 M
( for every real epsilon > 0 for quality > 1 + epsilon.) s
5 439 M
(617.4 Fraenkel Conjecture for exact cover decomposition of Z - https://core.ac.uk/download/pdf) s
5 428 M
(/82382652.pdf) s
5 417 M
(617.5 Diophantines for 2D Pentominoes Tiling - https://did.mat.uni-bayreuth.de/~alfred/home/pe) s
5 406 M
(ntominoes.ps.gz - Locations of Tiles in 9*10 rectangle are specified by linear diophantines.) s
5 395 M
(617.6 Kummer Theorem for Universal Diophantine Equation representation of arbitrary recursivel) s
5 384 M
(y enumerable set - Hilbert Tenth Problem and Two-way bridge between Number Theory and Computer) s
5 373 M
( Science - [Yuri Matiyasevich] - http://www.cs.auckland.ac.nz/~cristian/tcspi/ch9.ps - Diophan) s
5 362 M
(tine Hierarchy - 9 Unknowns - Best known bound of number of unknowns \(u\) and degree \(d\) for Di) s
5 351 M
(ophantine representation of an RE Set \(in other words complement diophantine in the context of) s
5 340 M
( complementary sets\) is \(d,u\) = \(1.6 * 10^45, 9\). Kummer theorem equates a binomial coefficien) s
5 329 M
(t \(a+b, b\) to its exponential prime factorization 2^a2*3^a3*... where a2,a3,... are defined by) s
5 318 M
( Kummer Theorem: If integers a and b are written in p-adic \(prime radix p\) notation and are ad) s
5 307 M
(ded the number of carries during this addition is given by ap. Because set of integers in bina) s
5 296 M
(ry notations can be expressed by binomial coefficients \(a is number of 1s and b is number of 0) s
5 285 M
(s, a+b is the length of the binary integer string, \(a+b,b\) is the number of all possible integ) s
5 274 M
(ers having b 0s in binary representation\), Kummer's theorem is widely used for exponential dio) s
5 263 M
(phantine representation of arbitrary recursively enumerable sets. Word concatenations also hav) s
5 252 M
(e diophantine representation \(related to 2.11 and 2.12 - Ramsey 255-coloring texts by alphabet) s
5 241 M
(s\) implying natural language texts can be represented by a diophantine equation which is helpf) s
5 230 M
(ul in text compression.) s
5 219 M
(617.7 Further results on Hilbert Tenth Problem - [Zhi Wei Sun] - https://arxiv.org/pdf/1704.03) s
5 208 M
(504.pdf - Solving Diophantines in 11 unknowns over Z is undecidable.) s
5 197 M
(617.8 Hilbert Tenth Problem for Rational Functions over Finite Fields is Undecidable - [Pheida) s
5 186 M
(s] - https://link.springer.com/article/10.1007/BF01239506 - related to previous problem of fin) s
5 175 M
(ite sets tile cover but finite fields require size of tiles to be power of prime \(characterist) s
5 164 M
(ic\)) s
5 153 M
(617.9 Decision method for elementary algebra and geometry - [Alfred Tarski] - Rand Corporation) s
5 142 M
( - https://www.rand.org/content/dam/rand/pubs/reports/2008/R109.pdf - decision procedure for r) s
5 131 M
(eal diophantines) s
5 120 M
(617.10 Chaos Theory, Diophantines, Chaitin Theorem, Minimum Descriptive Complexity\(Kolmogorov\)) s
5 109 M
( - [Matiyasevich] - ftp://ftp.pdmi.ras.ru/pub/publicat/znsl/v377/p078.pdf - Computational Chao) s
5 98 M
(s Theory implies disorder in large sets arising from order \(e.g.Logistic Map x\(n+1\) = kxn\(xn-1) s
5 87 M
(\)\) - Chaitin theorem constructs a Diophantine set S which is chaotic and an exponential diopha) s
5 76 M
(ntine for it and its kolmogorov complexity for an initial finite fragment of S is O\(log|S|\).) s
5 65 M
(617.11 Rayleigh Theorem or Beatty Theorem - https://en.wikipedia.org/wiki/Beatty_sequence - ".) s
5 54 M
(..The Rayleigh theorem \(also known as Beatty's theorem\) states that given an irrational number) s
5 43 M
( r > 1, there exists s > 1 so that the Beatty sequences {B}_{r} and {B}_{s} partition the set ) s
5 32 M
(of positive integers: each positive integer belongs to exactly one of the two sequences...." -) s
5 21 M
( Examples - Upper and Lower Wythoff Sequences [nr] and [ns] generated by Golden ratio r and s=) s
5 10 M
(r+1) s
_R
S
%%Page: (404) 404
%%BeginPageSetup
_S
18 36 translate
/pagenum 404 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (404) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(617.12 Generalization of Beatty Theorem for Complementary Continuous functions over reals - ht) s
5 681 M
(tps://web.archive.org/web/20140419091400/http://math.uncc.edu/sites/math.uncc.edu/files/2002_1) s
5 670 M
(7_0.pdf - "...Main Theorem: Let F and G be real, continuous, strictly increasing, functions) s
5 659 M
(with domains [0,\342\\210\\236\) satisfying F\(0\) = G\(0\) = 0 and limx\342\\206\\222\342\\210\\236\(F\(x\) + G\(x\)\) ) s
5 648 M
(= \342\\210\\236.For all t > 0, let Pt = {0,\(F + G\)\342\\210\\2221\(t\),\(F + G\)\342\\210\\2221\(2t\),\(F + G\)\342\\210) s
5 637 M
(\\2221\(3t\), . . .}, and P+t = Pt\\{0}. Then the two sequences At and Bt defined by At = {c\(F\342) s
5 626 M
(\\210\\2221\)\342\\210\\2221\(n\)b Pt:n \342\\210\\210 N+t } and Bt = {b\(G\342\\210\\2221\)\342\\210\\2221\(n\)c  Pt: n \342) s
5 615 M
(\\210\\210 N+t } partition P+tfor all t > 0. Also, the elements of At are distinct and the eleme) s
5 604 M
(nts of Bt are distinct ...") s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(-------------------) s
5 560 M
(618. \(FEATURE\) People Analytics - Experiential Intrinsic Merit - LinkedIn Profile Connections ) s
5 549 M
(- 20 November 2018) s
5 538 M
(- related to 443) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(-------------------) s
5 505 M
(1.SocialNetworkAnalysis_PeopleAnalytics.py has been changed to parse connections of a linkedin) s
5 494 M
( profile) s
5 483 M
(2.Number of connections of a profile is then used to compute experiential intrinsic merit base) s
5 472 M
(d on degree of) s
5 461 M
(a vertex as:) s
5 450 M
(    E = M*e^\(kMt\) = log\(dv\(t\)\) * e^\(klog\(dv\(t\)\)*t/clogt\) / clogt for evolving degree dv\(t\)) s
5 439 M
(3.This identity is derived from exponential relation between Fame \(Degree\) and Merit \(Intrinsi) s
5 428 M
(c fitness\) of a) s
5 417 M
(social profile - in https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/First-) s
5 406 M
(to-Market-is-not-Everything-an-Analysis-of-Preferential-Attachment-with-Fitness.pdf \(described) s
5 395 M
( earlier\)) s
5 384 M
(4.Previous relation is anachronistic in the sense merit is defined in terms of fame when it ha) s
5 373 M
(s to be other way around. Function for experiential_intrinsic_merit\(\) takes number of connecti) s
5 362 M
(ons as a parameter and branches off into two clauses for least enery log normal merit if degre) s
5 351 M
(e is 0 and degree based merit for degree > 0.) s
5 340 M
(5.Example LinkedIn Profile Connections \(committed in pdf and txt\) have been analyzed for previ) s
5 329 M
(ous degree based) s
5 318 M
(experiential merit and Recursive Lambda Function Growth merit. Example linkedin Connection pdf) s
5 307 M
( and text file have been committed to:) s
5 296 M
(        ConnectionsLinkedIn_KSrinivasan.pdf) s
5 285 M
(        ConnectionsLinkedIn_KSrinivasan.txt) s
5 274 M
(6.Definition TextGraph of connections \(.txt\) extracts essence of the aura surrounding a social) s
5 263 M
( profile.) s
5 252 M
(7.Dense subgraph \(core\) of this connections textgraph is a clustering coefficient measure i.e ) s
5 241 M
(how well the neighbours of a vertex have semantic connections among themselves. ) s
5 230 M
(8.Though social profiles are prone to Sybil links for artificially bumping up popularity, prev) s
5 219 M
(ious analysis is) s
5 208 M
(based on the assumption that humans do not link to another human unless they are trusted/befri) s
5 197 M
(ended.) s
5 186 M
(9.logs for this have been committed to:) s
5 175 M
(        SocialNetworkAnalysis_PeopleAnalytics.log.20November2018 \(degree experiential merit\)) s
5 164 M
(        SocialNetworkAnalysis_PeopleAnalytics.log2.20November2018 \(recursive lambda function g) s
5 153 M
(rowth merit\)) s
5 142 M
(10.Recursive Lambda Function Growth merit logs have been truncated because of following recurs) s
5 131 M
(ion depth error in bintrees AVL Tree:) s
5 120 M
(        RuntimeError: maximum recursion depth exceeded) s
5 109 M
(but the logs show few erratic cycles having "missiles" which are inferred from random walk pat) s
5 98 M
(hs printed in the logs. Also Names of the connections have not been filtered which misleads th) s
5 87 M
(e WordNet. Previous error impedes full analysis based on core number. But there are some relev) s
5 76 M
(ant cycles related to "head hunter","Ph.D","dissertation","entrepreneur","engineer","managers") s
5 65 M
(,"information_technology" etc., giving a glimpse of the social circle's nature.) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(------------------) s
5 21 M
(619. \(THEORY and FEATURE\) Software Analytics - Cyclomatic Complexity - FTrace call graphs - 28) s
5 10 M
( November 2018) s
_R
S
%%Page: (405) 405
%%BeginPageSetup
_S
18 36 translate
/pagenum 405 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (405) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(- related to 581) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(------------------) s
5 659 M
(1. FTrace kernel function call graph shell script \(asfer_ftrace.sh\) already in USBmd and USBmd) s
5 648 M
(64 have been included as part of AsFer Cyclomatic Software Analytics for analyzing what happen) s
5 637 M
(s in kernel within while executing a userspace code.) s
5 626 M
(2. Example ftrace.log for Computational Geometric Factorization has been recorded in ftrace.Di) s
5 615 M
(screteHyperbolicFactorization_TileSearch_Optimized.log ) s
5 604 M
(3. DOT graph creation function for parsing ftrace call graph log has been added in CyclomaticC) s
5 593 M
(omplexitySparkMapReducer.py) s
5 582 M
(4. FTrace call graph DOT file is written to CyclomaticComplexitySparkMapReducer.ftrace_callgra) s
5 571 M
(ph.dot) s
5 560 M
(5. logs for Cyclomatic Analysis of kernel callgraph for previous factorization example have be) s
5 549 M
(en committed to:) s
5 538 M
(        testlogs/CyclomaticComplexitySparkMapReducer.log.FTrace.28November2018) s
5 527 M
(        testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.factors) s
5 516 M
(        testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.ftrace.log.28N) s
5 505 M
(ovember2018) s
5 494 M
(6. PageRank, Degree Centrality, Cycles and Longest Path of Call graph are printed.) s
5 483 M
(7. Least pageranked kernel functions are:) s
5 472 M
(        ... \('unix_release\\n', 0.0006824636787772093\), \('nf_ct_get_tuple\\n', 0.000682463678777) s
5 461 M
(2093\), \('insert_work\\n', 0.0006824636787772093\), \('wake_up_worker\\n', 0.0006824636787772093\), ) s
5 450 M
(\('__tcp_push_pending_frames\\n', 0.0006824636787772093\), \('bictcp_cong_avoid\\n', 0.000682463678) s
5 439 M
(7772093\), \('fsnotify_clear_marks_by_inode\\n', 0.0006824636787772093\), \('tcp_timewait_state_pro) s
5 428 M
(cess\\n', 0.0006824636787772093\), \('ktime_get\\n', 0.0006824636787772093\), \('free_page_and_swap_) s
5 417 M
(cache\\n', 0.0006824636787772093\), \('update_page_reclaim_stat\\n', 0.0006824636787772093\), \('__c) s
5 406 M
(ond_resched\\n', 0.0006824636787772093\), \('unlink_anon_vmas\\n', 0.0006824636787772093\), \('timer) s
5 395 M
(_interrupt\\n', 0.0006824636787772093\), \('inet_put_port\\n', 0.0006824636787772093\), \('update_pr) s
5 384 M
(ocess_times\\n', 0.0006824636787772093\), \('tcp_v4_send_ack\\n', 0.0006824636787772093\), \('ext4_g) s
5 373 M
(et_inode_loc\\n', 0.0006824636787772093\), \('enable_8259A_irq\\n', 0.0006824636787772093\), \('__pa) s
5 362 M
(gevec_free\\n', 0.0006824636787772093\), \('getnstimeofday\\n', 0.0006824636787772093\), \('dequeue_) s
5 351 M
(task\\n', 0.0006824636787772093\), \('__jbd2_journal_file_buffer\\n', 0.0006824636787772093\), \('fu) s
5 340 M
(se_prepare_release\\n', 0.0006824636787772093\), \('tcp_established_options\\n', 0.000682463678777) s
5 329 M
(2093\), \('fuse_release_common\\n', 0.0006824636787772093\) ) s
5 318 M
(...) s
5 307 M
(which are top level invocations closest to userspace arising out of TCP traffic in Spark Execu) s
5 296 M
(tor Driver \(TCP in kernel: http://vger.kernel.org/~davem/tcp_output.html\)) s
5 285 M
(8. It is worthy to note lot of ----exit\(\) kernel functions related to VMA paging \(e.g.do_exit\() s
5 274 M
(\)\) which release virtual memory pages \(possibly by GC\) and TCP \(tcp_write_xmit\(\), tcp_transmit) s
5 263 M
(_skb\(\), etc.,\) having high degree centrality showing heavy TCP traffic.) s
5 241 M
(Comparing call graphs by Graph Isomorphism or Graph Non-Isomorphism deduces code similarities.) s
5 230 M
( This is somewhat counterintuitive surprise to Program Equivalence Problem which is undecidabl) s
5 219 M
(e implying isomorphism detection is only an approximation. Program Equivalence essentially ask) s
5 208 M
(s if two Turing machines accept same language \(equivalent\).) s
5 186 M
(References:) s
5 175 M
(-----------) s
5 164 M
(619.1 Program Equivalence Problem is Undecidable - [Nancy Lynch] - Mapping Reduction to/from H) s
5 153 M
(alting Problem - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-045) s
5 142 M
(j-automata-computability-and-complexity-spring-2011/lecture-notes/MIT6_045JS11_lec09.pdf - two) s
5 131 M
( Turing machines M1 and M2 are contrived and hypothetical Turing Machine M compares the M1 and) s
5 120 M
( M2. Reduction: M halts on x <=> <M1,M2> are not equivalent \(EQ'\). M1 always rejects while M2 ) s
5 109 M
(accepts if M accepts x else rejects. There are two possibilities:) s
5 98 M
(        \(*\) M1 rejects and M2 accepts \(because M accepts x => M1 != M2\)) s
5 87 M
(        \(*\) M1 rejects and M2 rejects \(because M rejects x => M1 == M2\)) s
5 76 M
(        \(*\) But LHS is undecidable Mortality problem => M1 and M2 are not equivalent is undeci) s
5 65 M
(dable) s
5 54 M
(        \(*\) Complement of the previous is hence undecidable) s
5 43 M
(619.2 Call Graphs for Multilingual Software Analysis - [Anne Marie Bogar, Damian Lyons, David ) s
5 32 M
(Baird] - https://arxiv.org/pdf/1808.01213.pdf - NeuronRain Call Graphs are dynamic and multili) s
5 21 M
(ngual - KCachegrind for userspace C/C++/Java and SATURN/FTrace for kernelspace C code.) s
_R
S
%%Page: (406) 406
%%BeginPageSetup
_S
18 36 translate
/pagenum 406 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (406) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(------------------) s
5 670 M
(620. \(THEORY\) Space Filling, Separate Chaining Hash Tables, Theoretical EVMs, Timeout, Balls-a) s
5 659 M
(nd-Bins, Linear) s
5 648 M
( Programming, Program Analysis, Cellular Automata, Majority Hardness Amplification Lemma - 30 ) s
5 637 M
(November 2018, 1 December 2018, 2 December 2018, 28 January 2019 - related to 135, 517, 615) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(------------------) s
5 604 M
(Space Filling has been defined in terms of Linear Program in https://sites.google.com/site/kuj) s
5 593 M
(a27/Analysis%20of%20a%20Randomized%20Space%20Filling%20Algorithm%20and%20its%20Linear%20Progra) s
5 582 M
(m%20Formulation.pdf and its cellular automaton algorithm version has been described earlier. T) s
5 571 M
(his linear program with constraint that every variable is non-zero:) s
5 560 M
(                x1 + x2 + ... + xn = N, for all xi > 0) s
5 549 M
(is isomorphic to an LSH set partition, Integer Partition or Separate Chaining hash table parti) s
5 538 M
(tion of n parts of a set of N items. In most scenarios this is a restricted partition. Separat) s
5 527 M
(e Chaining and Balls-Bins problems are equivalent if buckets are filled at random. Following a) s
5 516 M
(re some of the probability estimates for Balls-and-Bins problem:) s
5 505 M
(620.1 Average number of balls in a bin = n/b \(n balls and b bins\)) s
5 494 M
(620.2 Number of balls to toss till a bin contains a ball:) s
5 483 M
(        probability of ball/item landing in a bin/bucket q=1/b, p=1-q) s
5 472 M
(        Number of tosses till success is Bernoulli trial geometric distribution) s
5 461 M
(        For success after kth ball toss, bernoulli probability: p^\(k-1\)q) s
5 450 M
(        Since k is a random variable, E\(k\) = Sum over k*p^\(k-1\)q = b) s
5 439 M
(620.3 Number of balls tossed till every bin has a ball:) s
5 428 M
(        Total number of bins = b) s
5 417 M
(        Number of balls n is partitioned as n1 + n2 + n3 + ... + nk = N for each stage of toss) s
5 406 M
(ing.) s
5 395 M
(        After ith stage, number of bins having atleast one ball = i-1) s
5 384 M
(        Number of remaining buckets = b-i+1) s
5 373 M
(        Probability of a toss landing in remaining buckets in ith stage = \(b-i+1\)/b) s
5 362 M
(        Each ni is a random variable of probability = b/\(b-i+1\)) s
5 351 M
(        Sum of E\(ni\) < O\(blnb\) before every bin has a ball.) s
5 340 M
(Balls and Bins have histogram representation and previous bounds apply to histogram patterns t) s
5 329 M
(oo. In the context of theoretical EVMs if every voter votes perfectly at random with no prejud) s
5 318 M
(ice to a candidate, number of) s
5 307 M
(voters required  for every candidate to have atleast 1 vote = O\(blnb\) for b candidates. Course) s
5 296 M
( material in \(https://github.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/) s
5 285 M
(AdvancedComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt\) descr) s
5 274 M
(ibe a separate chaining hashtable timeout based OS scheduler pattern and similar bounds apply ) s
5 263 M
(- Number of processes required for atleast one process per timeout value = O\(blnb\). Previous l) s
5 252 M
(inear program version of separate chaining if solved by Balls-and-Bins has similar bounds - O\() s
5 241 M
(n*ln\(n\)\) for solving LP of n variables.) s
5 219 M
(To ensure secrecy of balloting, every vote appended to a candidate bucket in Theoretical Separ) s
5 208 M
(ate Chaining EVM has to be mapped to a unique one time randomly generated numeric id obfuscati) s
5 197 M
(ng the voter identity \(and each bucket is encrypted\). Mining patterns in this anonymous dictio) s
5 186 M
(nary elicits only voting patterns and not voter patterns. Majority version of hardness amplifi) s
5 175 M
(cation lemma described earlier envisages a MajorityInverse\(\) function which inverts Majority+V) s
5 164 M
(oterSAT Boolean function composition for 2 candidates and obtains voters voting for a candidat) s
5 153 M
(e and per voter SAT assignments top-down. Hardness of this MajorityInverse\(\) is crucial to pro) s
5 142 M
(ve amplification. Theoretical EVM for 2 candidates is exactly separate chaining/LSH version of) s
5 131 M
( Majority gate of binary inputs 0 and 1 and Majority\(\) and MajorityInverse\(\) are defined as: ) s
5 120 M
(        - Majority\(\): candidate of maximum sized voters bucket) s
5 109 M
(        - MajorityInverse\(\): voters bucket for a candidate) s
5 98 M
(Intriguingly, MajorityInverse\(\) is palpably easier in this separate chaining/LSH version of ma) s
5 87 M
(jority gate but previous anonymizer rules out easy inversion. Voter is issued a receipt contai) s
5 76 M
(ning the encrypted ciphertext of the candidate bucket index his/her vote is appended to. Encry) s
5 65 M
(pted receipt of vote issued to voter is more reliable than VVPAT which is in plaintext and not) s
5 54 M
( voter-received. Ballot secrecy is not compromised because this encryption is as secure as any) s
5 43 M
( other ciphertext transmitted over the network by public key infrastructure. Only authority ac) s
5 32 M
(countable for conduct of voting can decrypt the receipt in case of disputes.) s
5 10 M
(References:) s
_R
S
%%Page: (407) 407
%%BeginPageSetup
_S
18 36 translate
/pagenum 407 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (407) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-----------) s
5 681 M
(620.4 Introduction to Algorithms - [Cormen-Leiserson-Rivest-Stein] - Coupon Collector Problem/) s
5 670 M
(Balls and Bins Problem - Page 134 \(5.4.2\), Page 1201 \(C.4\)) s
5 659 M
(620.5 Analysis of Electronic Voting System - John Hopkins Paper - [TADAYOSHI KOHNO, ADAM STUBB) s
5 648 M
(LEFIELD, AVIEL D. RUBIN,DAN S. WALLACH] - https://homes.cs.washington.edu/~yoshi/papers/eVotin) s
5 637 M
(g/vote.pdf - Analyzes C++ Source Code of Diebold AccuVote EVM and stresses VVPAT. Vulnerabilit) s
5 626 M
(ies include unencrypted ballot definition file tamper, Safety of Protective Counter storing nu) s
5 615 M
(mber of votes polled, Party Affiliation tamper etc., - "...On a potentially much larger scale,) s
5 604 M
( if the voting terminals download the ballot definition over a network connection, then an adv) s
5 593 M
(ersary could tamper with the ballot definition file en-route from the back-end server to the v) s
5 582 M
(oting terminal; of course, additional poll-worker procedures could be put in place to check th) s
5 571 M
(e contents of the file after downloading, but we prefer a technological solution. With respect) s
5 560 M
( to modifying the file as it is sent over a network, we point out that the adversary need not ) s
5 549 M
(be an election insider; the adversary could, for example, be someone working at the local ISP.) s
5 538 M
( If the adversary knows the structure of the ballot definition, then the adversary can interce) s
5 527 M
(pt and modify the ballot definition while it is being transmitted. Even if the adversary does ) s
5 516 M
(not know the precise structure of the ballot definition, many of the fields inside are easy to) s
5 505 M
( identify and change, including the candidates\342\\200\\231 names, which appear as plain ASCII tex) s
5 494 M
(t...". In the context of theoretical EVMs on cloud defined previously based on LSH/Separate ch) s
5 483 M
(aining, these encryption prerequisites are relevant in addition to CAP theorem limitations and) s
5 472 M
( PACELC theorem consistency versus speed trade-off. Per-candidate vote counters are replaced b) s
5 461 M
(y hash table buckets which have to be secured. History preserving VVPAT audit trails require l) s
5 450 M
(inking voters to votes which is obviously evident from per-candidate vote buckets. Frequent it) s
5 439 M
(em set mining \(e.g FPGrowth\) of EVM buckets could point to malicious and suspicious voting pat) s
5 428 M
(terns which is not feasible in counter increment.) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(-----------------) s
5 384 M
(621. \(FEATURE\) Social Network Analysis - People Analytics - Dictionary filter for names - 4 De) s
5 373 M
(cember 2018) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(-----------------) s
5 340 M
(1.RecursiveGlossOverlap_Classifier.py has been changed to define a new function nondictionaryw) s
5 329 M
(ord\(\) for filtering nondictionary words. This is necessary for parsing text of Social Profiles) s
5 318 M
( which contain names in SocialNetworkAnalysis_PeopleAnalytics.py. Finding names in text is an ) s
5 307 M
(open AI problem which comes under the purview of Named Entity Recognition \(NER\) which often re) s
5 296 M
(quires CRF or Neural Network Training models.) s
5 285 M
(2.As an alternative to statistical learning, if a word in text is not in a language Dictionary) s
5 274 M
( it is assumed to have exited any semantic network \(WordNet for English etc.,\) which could be ) s
5 263 M
(names of people, places etc., But there are some exceptions to this and countably few names ar) s
5 252 M
(e in language dictionaries and encyclopedia.) s
5 241 M
(3.Function nondictionaryword\(\) looksup a word in PyDictionary which is based on WordNet, Googl) s
5 230 M
(e Translation, Thesaurus.com and returns true or false based on language dictionary. If for a ) s
5 219 M
(word lookup null meaning is returned, it is outside Semantic Network and nondictionaryword\(\) r) s
5 208 M
(eturns true.) s
5 197 M
(4.Depth of the Recursive Gloss Overlap recursion has been parametrized in RecursiveGlossOverla) s
5 186 M
(p_Classifier.py and RecursiveLambdaFunctionGrowth.py and invoked in SocialNetworkAnalysis_Peop) s
5 175 M
(leAnalytics.py for depth 2.) s
5 164 M
(5.WordNet and ConceptNet consist of network of concepts than textual words. PyDictionary has a) s
5 153 M
(dditional support for other datasources - Google Translation and Thesaurus - specific to langu) s
5 142 M
(age words.) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(-----------------) s
5 98 M
(622. \(THEORY and FEATURE\) Text \(De\)Compression by HMM on Vowelless texts - Prefix and Suffix P) s
5 87 M
(robabilities from English Dictionary - 6 December 2018) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(-----------------) s
5 54 M
(1.Python implementation for Decompressing vowelless compressed text TextCompression.py has bee) s
5 43 M
(n updated to invoke Prefixes and Suffixes probability priors computed from English Dictionary ) s
5 32 M
(instead of hardcoded priors.) s
5 21 M
(2.New source file WordSubstringProbabilities.py for computing word prefixes and suffixes proba) s
5 10 M
(bilities by FreqDist has been committed which parses English Wordlist from Dictionary.txt into) s
_R
S
%%Page: (408) 408
%%BeginPageSetup
_S
18 36 translate
/pagenum 408 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (408) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( two probability distribution dictionaries for prefixes and suffixes.) s
5 681 M
(3.Function wordprefixsuffixprobdist\(\) in WordSubstringProbabilities.py called in TextCompressi) s
5 670 M
(on.py has been  nominal because of computationally intensive Maximum Likelyhood Estimator in H) s
5 659 M
(idden Markov Model \(likelydict\) and hardcoded priors are used.) s
5 648 M
(4.Logs for this commit have been committed to WordSubstringProbabilities.log.6December2018 and) s
5 637 M
( TextCompression.log.6December2018.gz) s
5 626 M
(5.compressedtext.txt and decompressedtext.txt have been updated) s
5 615 M
(6.MLE likelydict is O\(prefixes*suffixes\) = O\(number_of_words^2*length_of_longest_word^2\) is co) s
5 604 M
(stly one time disk read and might require some memcache-ing during initialization.) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(------------------) s
5 560 M
(623.\(THEORY\) Arithmetic Circuit Complexity, Diophantine Complexity, Universal Diophantine Equa) s
5 549 M
(tion, ABC) s
5 538 M
(Conjecture, Complementary Sets, Diophantine Representation of Complementary Sets, Proof Comple) s
5 527 M
(xity - 7 December 2018, 8 December 2018 - related to 617) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(------------------) s
5 494 M
(Arithmetic Circuits are directed acyclic graphs of operands +\(sum\),*\(product\) as internal circ) s
5 483 M
(uit elements \(gates\) and variable or numeric constant inputs as leaves. There is one output ga) s
5 472 M
(te at root. Arithmetic circuits formalize computation of polynomials over a coefficient field.) s
5 461 M
( Some prominent upper bound \(Big-O\) results in arithmetic complexity include Matrix Multiplica) s
5 450 M
(tion and lower bound \(Omega\) results include size of arithmetic cicruit computing exponential ) s
5 439 M
(polynomials. It has to be noted that solving Diophantine equations and computing polynomials a) s
5 428 M
(re two opposite inverse directions - solving diophantines involves searching for a solution sp) s
5 417 M
(ace while computing polynomials is circuit value problem and involves substituting solution va) s
5 406 M
(lues in arithmetic circuit input variables and evaluating the root gate. Algebraic Complexity ) s
5 395 M
(classes VP and VNP define the arithmetic hierarchy of polynomials - VP contains polynomials wh) s
5 384 M
(ich have polynomial size arithmetic circuits while VNP has polynomials such that coefficient o) s
5 373 M
(f every monomial in it can be found efficiently. Permanent of a matrix has been shown to be co) s
5 362 M
(mplete for the class VNP by [Valiant]. If Permanent has polynomial size circuits, VP=VNP. From) s
5 351 M
( MRDP theorem, every recursively enumerable set is known to have a diophantine equation repres) s
5 340 M
(entation. There exists a universal diophantine equation which represents every recursively enu) s
5 329 M
(merable set \([Jones] theorem\). Present state-of-the-art is universal diophantine of 9 unknowns) s
5 318 M
( of huge degree 1.6 * 10^45. It is open if Diophantine complexity class D \([Adleman-Manders]\) ) s
5 307 M
(is in NP \(or D in VNP in algebraic complexity because P in NP implies VP in VNP?\). Complementa) s
5 296 M
(ry Sets \(Beatty Sequences\) and their relevance to ABC Conjecture have been described earlier. ) s
5 285 M
(By universal diophantine equation of 9 unknowns but huge degree, every subset of quality 1+eps) s
5 274 M
(ilon for every real epsilon > 0 predicted by ABC conjecture can be represented. Complexity of ) s
5 263 M
(a Diophantine Equation is also expressed by proof complexity notion of number of additions, mu) s
5 252 M
(ltiplications required for verifying a solution. For universal diophantine equation, current k) s
5 241 M
(nown proof complexity bound is 100.) s
5 219 M
(References:) s
5 208 M
(-----------) s
5 197 M
(623.1 Arithmetic Circuit Complexity - https://en.wikipedia.org/wiki/Arithmetic_circuit_complex) s
5 186 M
(ity) s
5 175 M
(623.2 Circuit Complexity - [Heribert Vollmer] - Chapter 5 - Arithmetic Circuits and Straightli) s
5 164 M
(ne Programs - https://books.google.co.in/books?id=qOepCAAAQBAJ&pg=PA172&lpg=PA172&dq=arithmeti) s
5 153 M
(c+circuits+heribert+vollmer&source=bl&ots=KiFHOVH3kh&sig=Q5PaW5rJEHI8LBU0iYfNSrRXrwk&hl=en&sa=) s
5 142 M
(X&ved=2ahUKEwivu8GZo43fAhXLTn0KHek8BWI4ChDoATAJegQIABAB#v=onepage&q=arithmetic%20circuits%20he) s
5 131 M
(ribert%20vollmer&f=false) s
5 120 M
(623.3 Undecidable Diophantine Equations - [James P Jones] - https://pdfs.semanticscholar.org/7) s
5 109 M
(f96/11e582cf4a2efb1155c2fde9c891c6fc7be3.pdf - Universal Diophantine Equation for representing) s
5 98 M
( every recursively enumerable set which applies Kummer's Theorem for factoring Binomial Coeffi) s
5 87 M
(cients.) s
5 76 M
(623.4 Arithmetization of 3SAT - Randomized Algorithms - [Rajeev Motwani - Prabhakar Raghavan] ) s
5 65 M
(- Page 177 \(Section 7.7\) - 3SAT can be arithmetized to a multilinear diophantine polynomial by) s
5 54 M
( replacing each clause of the form \(x1 V x2 V x3\) to \(1-\(1-x1\)\(1-x2\)\(1-x3\)\) which can be solve) s
5 43 M
(d for integer or real solutions. Number of unknowns in diophantine equals number of variables ) s
5 32 M
(of 3SAT. This reduction implies diophantine class D is in NP. Real solutions to this SAT dioph) s
5 21 M
(antine \(e.g by Tarski method\) is another kind of relaxation similar to least squares approxima) s
5 10 M
(te MAXSAT Solver. But an added advantage is there exists a universal diophantine equation in 9) s
_R
S
%%Page: (409) 409
%%BeginPageSetup
_S
18 36 translate
/pagenum 409 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (409) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( unknowns for any 3SAT diophantine though number of variables in 3SAT could be unlimited.) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(------------------) s
5 648 M
(624. \(THEORY\) Shell Turing Machines, MRDP Theorem, Category Theory, Diophantine Equations, Tur) s
5 637 M
(ing Degrees, Embedding Formal Languages in Vector Space - 10 December 2018, 21 August 2019 - r) s
5 626 M
(elated to 538) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(------------------) s
5 593 M
(Intuition for Shell Turing Machines defined in https://5d99cf42-a-62cb3a1a-s-sites.googlegroup) s
5 582 M
(s.com/site/kuja27/UndecidabilityOfFewNonTrivialQuestions.pdf has been explained in NeuronRain ) s
5 571 M
(FAQ https://neuronrain-documentation.readthedocs.io/en/latest/ . Dimension of a Shell Turing M) s
5 560 M
(achine parallels Turing Degree of a Turing Machine which is a measure of unsolvability of a se) s
5 549 M
(t. Every Shell Turing Machine is defined on a vector space and all Shell Turing machines of si) s
5 538 M
(milar dimension create an equivalence class. Partial Order Semi-Lattice is induced by this vec) s
5 527 M
(tor space dimensional hierarchy of Shell Turing Machines. Following example Shell Turing Machi) s
5 516 M
(nes defined over two different vector spaces of dimensions d1 and d2 motivate solvability hier) s
5 505 M
(archy:) s
5 483 M
(Turing Machines Td1 and Td2 find the lexicographically longest tuple \(word\) in languages L\(Td1) s
5 472 M
(\) and L\(Td2\). Tuples in L\(Td1\) and L\(Td2\) are of the form [x1,x2,x3,...,xd1] and [x1,x2,x3,...) s
5 461 M
(,xd2] respectively. Though both Td1 and Td2 are computationally similar, words in L\(Td1\) and L) s
5 450 M
(\(Td2\) belong to two different vector spaces of dimensions d1 and d2 therefore returning differ) s
5 439 M
(ent results of lengths d1 and d2. This implies Turing degrees of Td1 and Td2 are different and) s
5 428 M
( the two machines solve varied difficulties.) s
5 406 M
(In this sense, Shell Turing Machines generalize the notion of word embeddings of natural langu) s
5 395 M
(ages \(e.g Word2Vec\) in a vector space to any formal language - Regular, Context-Free, Context-) s
5 384 M
(Sensitive or Natural, Recursive, Recursively Enumerable - and formal languages become algebrai) s
5 373 M
(c sets \(similarity to VP and VNP is intriguing\). MRDP Theorem implies Goedel's First Incomplet) s
5 362 M
(eness Theorem. MRDP Theorem implies there are recursively enumerable sets having Diophantine r) s
5 351 M
(epresentation but not recursive \(there are no halting accept/reject Turing machines and theref) s
5 340 M
(ore H10 is undecidable for set of integers\). For Shell Turing Machines, MRDP theorem applies t) s
5 329 M
(oo but there is an additional fine structure \(Dimension hieararchy partial order\) introduced b) s
5 318 M
(y vector space dimensions similar to Turing Degrees. Another relevant question arises: How She) s
5 307 M
(ll Turing Machines map to Diophantine representations i.e What is the relation between \(number) s
5 296 M
( of unknowns, degree\) of a diophantine equation of an RE set to the vector space dimension of ) s
5 285 M
(Shell Turing Machine accepting it.) s
5 263 M
(Example embedding of natural language text sentence in a Shell Turing Machine defined over vec) s
5 252 M
(tor space:) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(----------) s
5 219 M
(Sentence: "This is bigger than the biggest" is an oxymoron if read flat with no dimensional de) s
5 208 M
(pth. Assuming) s
5 197 M
(there exists set of Shell Turing Machines defined on a vector space of dimension d+x having or) s
5 186 M
(acle access to) s
5 175 M
(Shell Turing Machine defined on a vector space of dimension d \(Turing Jump\), following dimensi) s
5 164 M
(on subscripted sentence is an example sentence in a Shell Turing Machine of dimension d+x havi) s
5 153 M
(ng oracle access to lower dimensional \(d\) Shell Turing Machine and transcends two vector space) s
5 142 M
(s of varied dimensions:) s
5 131 M
(        This \(d+x\) is bigger \(d+x\) than the biggest\(d\)) s
5 120 M
(Vector Space for a Shell Turing Machine can be any arbitrary topological space in real analysi) s
5 109 M
(s e.g Baire Space, Cantor Space \(sets homeomorphic to Cantor Set Fractal obtained by removing ) s
5 98 M
(midsegment of a line indefinitely\)) s
5 76 M
(Set of Recursively Enumerable Languages can be written as disjoint union/exact cover of recurs) s
5 65 M
(ively enumerable languages of Shell Turing Machines embedded in vector spaces of all possible ) s
5 54 M
(dimensions:) s
5 43 M
(        RE = RE\(d1\) U RE\(d2\) U RE\(d3\) ... U RE\(dn\)) s
5 32 M
(Since each dimension corresponds to a Turing Degree \(measure of unsolvability\), Partial Order ) s
5 21 M
(Semi Lattice of all Shell Turing Machines has a Lowest Upper Bound dimension - There exists a ) s
5 10 M
(maximal dimension Turing Machine dm accepting some RE\(dm\) language. Shell Turing Machines are ) s
_R
S
%%Page: (410) 410
%%BeginPageSetup
_S
18 36 translate
/pagenum 410 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (410) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(most befitting in formalizing Computational Physics problems e.g Quantum and Relativistic Phys) s
5 681 M
(ics, String Theory/M-Theory, Branes, Multiverses.) s
5 659 M
(An adaptation of Halting Problem to Shell Turing Machines) s
5 648 M
(----------------------------------------------------------) s
5 637 M
(Undecidability of Halting Problem is proved by following gadget \(oversimplified\):) s
5 626 M
(Turing Machine M' accepts an encoding of another Turing Machine M and an input x - M'\(M,x\). ) s
5 615 M
(                M' rejects and halts if M accepts and halts on x) s
5 604 M
(                M' accepts and halts if M rejects and halts on x) s
5 593 M
(Turing Machine M'' accepts if M' rejects and rejects if M' accepts which detects M has halted ) s
5 582 M
(either way - M''\(M'\(M,x\)\)) s
5 560 M
(Contradiction is established by changing the Turing machine encoding to M' from M as M'\(M',x\):) s
5 549 M
(                M' rejects and halts if M' accepts and halts on x) s
5 538 M
(                M' accepts and halts if M' rejects and halts on x) s
5 527 M
(which is crucial to undecidability of halting. Previous encoding has no dimensional informatio) s
5 516 M
(n. If M' and M are) s
5 505 M
(Shell Turing Machines of varied dimensions d1 and d2, Halting Problem is rephrased as - M''\(M') s
5 494 M
([d1]\(M[d2],x[d2]\)\) - Turing Machine M' defined in space of dimension d1 accepts encoding of Tu) s
5 483 M
(ring Machine M and an input x defined in space of dimension d2 \(d1 > d2\)) s
5 461 M
(Following diagonalization proof of halting problem undecidability extends to Shell Turing Mach) s
5 450 M
(ines:) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(-----) s
5 417 M
(Let f\(x,i\) be a function defined as:) s
5 406 M
(        f\(x,i\) = 1 if Turing Machine x halts on input i, 0 if Turing Machine x does not halt o) s
5 395 M
(n input i.) s
5 384 M
(Let g\(y\) be another function defined as:) s
5 373 M
(        g\(y\) = 0 if f\(y,y\)=0, else undefined \(if f\(y,y\)=1\)) s
5 351 M
(Diagonalization is an infinite two dimensional matrix D defined as:) s
5 340 M
(        D\(x,y\)  = 1 if Turing Machine x halts on input y, 0  if Turing Machine x does not halt) s
5 329 M
( on y) s
5 318 M
(Proof is by showing function f\(x,i\) is partial and not total \(not defined for all inputs\) and ) s
5 307 M
(thus not recursive but recursively enumerable.) s
5 285 M
(Nothing prevents asking what is g\(g\):) s
5 274 M
(        g\(g\) = if f\(g,g\)=0 then 0, else undefined \(if f\(g,g\) = 1\)) s
5 252 M
(=> f\(g,g\) = 1 if Machine g halts on encoding of g, 0 if Machine g does not halt on encoding of) s
5 241 M
( g \(Diagonal of the Diagonalization Matrix D\)) s
5 219 M
(But from previous definition of g\(g\):) s
5 208 M
(        g\(g\) = if f\(g,g\)=0 \(if Machine g does not halt on g\) then g\(g\) halts returning 0 and) s
5 197 M
(                if f\(g,g\)=1 \(if Machine g halts on g\) then g\(g\) is undefined) s
5 186 M
(which is a contradiction.) s
5 164 M
(The fact that there exists atleast one Turing Machine g whose halting is not decidable makes f) s
5 153 M
(\(x,i\) partial and not a total recursive function and therefore Halting problem is undecidable.) s
5 142 M
( It has to be noted that function g has oracle access to Halting problem function f\(x,i\) thus ) s
5 131 M
(defining a Turing jump \(0'\). But Recursively Enumerable set has been previously expressed as d) s
5 120 M
(isjoint union of languages of Shell Turing Machines defined on all possible vector spaces. Thi) s
5 109 M
(s implies there are Shell Turing Machines which are not recursive \(but represented by a Diopha) s
5 98 M
(ntine equation\). Implications of this for problems in Quantum computation and Relativistic Phy) s
5 87 M
(sics defined for example on Hilbert Spaces are huge - There are Shell Turing Machines defined ) s
5 76 M
(on certain vector spaces which are not recursive \(or\) there are no physics experiments for ver) s
5 65 M
(ifying truths of physical realities represented by these Hilbert Machines. ) s
5 43 M
(Problem of relevance to Shell Turing Machines is: What happens to halting problem if functions) s
5 32 M
( f and g are defined on two different vector spaces of unequal dimensions. If f\(x,i\) is embedd) s
5 21 M
(ed on a Hilbert space S1 which contains all other vector spaces and g\(y\) on another Hilbert sp) s
5 10 M
(ace S2 \(S1 contains S2\), truth value of a logical statement in two quantifiers:) s
_R
S
%%Page: (411) 411
%%BeginPageSetup
_S
18 36 translate
/pagenum 411 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (411) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(For all Shell Turing Machines x defined in Hilbert space S\(d\) of dimension d, there exists inp) s
5 670 M
(ut i defined in S\(d\) such that x halts on i \(True or False\)) s
5 648 M
(has to be exported to f\(x,i\) defined on Hilbert space S1 containing S\(d\)) s
5 626 M
(This lifting/export of logical statements between Hilbert Spaces of 2 different dimensions is ) s
5 615 M
(accomplished by Linear Transformations between Hilbert Spaces. Section 4.2 of Reference 624.5 ) s
5 604 M
(describes some example definitions of logical formulas \(conjunctive normal form\) in Hilbert Sp) s
5 593 M
(aces. Conjunctive Clauses of the formulas are represented as vectors of a Hilbert Space. It is) s
5 582 M
( not necessary that all transformations are possible. Computational Physics example: Assuming ) s
5 571 M
(logical statements inside a blackhole singularity are defined in some Hilbert Space, existence) s
5 560 M
( of all possible linear transformations implies information \(truths of logical formulas\) oozes) s
5 549 M
( out of the blackhole space into observable space \(e.g Hawking Radiation, Blackholes are not B) s
5 538 M
(lack, Blackhole information paradox\)) s
5 516 M
(Traditional results on homomorphisms between Vector Spaces apply to Shell Turing Machines defi) s
5 505 M
(ned on any two vector spaces one of which is a subspace of the other: ) s
5 494 M
(        \(*\) If T is a homomorphism defined from vectorspace U to vectorspace V of kernel W, th) s
5 483 M
(en V is isomorphic to U/W. Conversely, if U is a vectorspace and W is a subspace of U, then th) s
5 472 M
(ere is a homomorphism of U onto U/W.) s
5 461 M
(        \(*\) If U is a vectorspace defined over field F, and W is a subspace of V then V/W is a) s
5 450 M
( quotient vectorspace over F if for v1, v2 in V and v1 + W in V/W, v2 + W in V/W:) s
5 439 M
(        \(v1 + W\) + \(v2 + W\) = \(v1+v2\) + W) s
5 428 M
(                \(and\)) s
5 417 M
(        For a in F, a\(v1 + W\) = av1 + W) s
5 395 M
(If Shell Turing Machines S1\(U\) and S2\(W\) are defined over vector spaces V and W and W is subsp) s
5 384 M
(ace of V and there is a homomorphism T\(defined by relation "bigger than"\) from V to V/W, previ) s
5 373 M
(ous example oxymoron sentence - "This is bigger than the biggest" - is logically defined in qu) s
5 362 M
(otient space V/W in first order logic quantifiers as \(annotated by square parentheses]:) s
5 351 M
(        This is [There exists v1 in V] bigger than [T\(v1,identity + w1\):v1 > identity + w1] th) s
5 340 M
(e biggest [there exists w1 in W such that for all w in W, w1 > w]) s
5 318 M
(Shell Turing Machines can be defined in terms of Category Theory too:) s
5 307 M
(---------------------------------------------------------------------) s
5 296 M
(Category Theory of [Eilenberg-MacLane] abstracts whole of mathematics into following:) s
5 285 M
(        \(*\) Category C is a Set of Objects associated with a topological space) s
5 274 M
(        \(*\) Every Category has set of morphisms f:a-b defined on objects a,b in Category C - m) s
5 263 M
(orphisms are maps between objects on topological spaces - every morphism f:a-b on objects a,b ) s
5 252 M
(in topological spaces can be a Shell Turing Machine defined on topological spaces of a and b ) s
5 241 M
(        \(*\) Functors F are maps between two Categories C1 and C2 - for each object x in C1, F\() s
5 230 M
(x\) is in C2 and for each morphism f:a-b in C1) s
5 219 M
(morphism, F\(f\):F\(a\)-F\(b\) is in C2 - every functor F can be a Shell Turing Machine defined on t) s
5 208 M
(opological spaces of F\(a\) and F\(b\)) s
5 197 M
(        ) s
5 186 M
(References:) s
5 175 M
(----------) s
5 164 M
(624.1 Turing Jump, Priority Method of Emil Post, Injury - https://en.wikipedia.org/wiki/Turing) s
5 153 M
(_degree#Post's_problem_and_the_priority_method - Turing jump of a Turing Machine X is the set ) s
5 142 M
(X' of Turing machines which halt by having oracle access to X or in other words, X' is set of ) s
5 131 M
(harder problems than X. Priority method is applied to prove existence or otherwise of intermed) s
5 120 M
(iate degrees between two turing machines of different jumps e.g Turing Degree 0 \(halting probl) s
5 109 M
(em\) and Turing Degree 0' \(problems having oracle access to halting problem\). Priority method t) s
5 98 M
(abulates requirements Ae and Be for an oracle  machine e where Ae stipulates e does not comput) s
5 87 M
(e 0' from X and Be implies non-oracle machine e does not compute X. Dimensional Hierarchy of u) s
5 76 M
(nsolvability follows from Turing Jump.) s
5 65 M
(624.2 Embedding Turing Machines on Hilbert Space - https://mathoverflow.net/questions/313343/e) s
5 54 M
(mbedding-turing-machine - Counts Functions \(for languages of Turing Machines\) by number of sta) s
5 43 M
(tes and searches for the Turing Machines for these languages - This is the opposite direction ) s
5 32 M
(of Shell Turing Machine definition which has an intrinsic dimensional parameter in addition to) s
5 21 M
( state.) s
5 10 M
(624.3 Definability of Turing Jump - [Shore-Slaman] - https://math.berkeley.edu/~slaman/papers/) s
_R
S
%%Page: (412) 412
%%BeginPageSetup
_S
18 36 translate
/pagenum 412 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (412) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(jump.pdf - relation between Turing Machines A and B, A <T B implies A is recursive in B or A i) s
5 681 M
(s Turing-computable by oracle access to B. A =T B \(A <T B and B <T A\) is the Turing Degree, an) s
5 670 M
( equivalence class of machines solving sets of similar difficulties. Turing Jump A'={e| Machin) s
5 659 M
(e e halts on oracle access to A}) s
5 648 M
(624.4 Aspects of Turing Jump - [Slaman] - https://math.berkeley.edu/~slaman/papers/lc2000.pdf) s
5 637 M
(624.5 Hilbert Machines - Turing Machines in Complex Inner Product Spaces and Applications to Q) s
5 626 M
(uantum Computation - http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.36.73&rep=rep1&t) s
5 615 M
(ype=pdf - has close resemblance to definition of Shell Turing Machines. Linear Machines are co) s
5 604 M
(nventional Turing Machines defined over input vector space, output vector space and a state ve) s
5 593 M
(ctor space. Concrete Hilbert Machines are Linear Machines defined over a Hilbert Complex Vecto) s
5 582 M
(r Space and a linear Complex Operator - Theorem 8 - Any finite automata can be represented in ) s
5 571 M
(a finite dimensional Hilbert Space by a Hilbert Machine - Examples of Hilbert Machines - Quant) s
5 560 M
(um Computation: Input and Output to a Quantum Computer are represented by vectors on Hilbert S) s
5 549 M
(pace and computation \(state transition\) is performed by Unitary Operator H on Hilbert Spaces \() s
5 538 M
(Operator HH*=H*H=I, H* is infinite dimensional conjugate transpose of H\) - Expected Value of S) s
5 527 M
(tate\(at time t\) = e^\(-iHt\). Shell Turing Machines go beyond just embedding a Turing Machine in) s
5 516 M
( vector space - As the name "Shell" suggests inspired by Unix shells, truths of logical statem) s
5 505 M
(ents in lower dimensional vector spaces are allowed to be exported to higher dimensions.) s
5 494 M
(624.6 The Elegant Universe: Superstrings, Hidden Dimensions, and the Quest for the Ultimate Th) s
5 483 M
(eory - [Brian Greene] ) s
5 472 M
(624.7 Turing Degrees of Diophantine Sets - Computably Enumerable Turing Degrees - Hilbert Tent) s
5 461 M
(h Problem - Sixth Asian Logic Conference - https://books.google.co.in/books?id=7IbVCgAAQBAJ&pg) s
5 450 M
(=PA152&lpg=PA152&dq=diophantine+equations+turing+degree&source=bl&ots=q9HomH3o-9&sig=rHKb81u6m) s
5 439 M
(ifJvOX_-kjKv4YRdUY&hl=en&sa=X&ved=2ahUKEwjMpLvsur3fAhVNeisKHd_MA-U4ChDoATABegQIBRAB#v=onepage&) s
5 428 M
(q=diophantine%20equations%20turing%20degree&f=false) s
5 417 M
(624.8 Degrees of Unsolvability: Tutorial - https://pdfs.semanticscholar.org/acae/fe1907be68d35) s
5 406 M
(7700f0690519251fc948fdb.pdf - Mass Problems, Muchnik Degrees, Turing Degrees) s
5 395 M
(624.9 Linear Transformations in Hilbert Space - [Stone] - https://www.ams.org/journals/bull/19) s
5 384 M
(34-40-11/S0002-9904-1934-05973-1/S0002-9904-1934-05973-1.pdf - Transform points on one Hilbert) s
5 373 M
( Space to points on another Hilbert Space) s
5 362 M
(624.10 Geometry of Interaction and Linear Logic - [Girard] - https://en.wikipedia.org/wiki/Geo) s
5 351 M
(metry_of_interaction - Proofs are represented as Networks of Logical Statement implications th) s
5 340 M
(an trees in Sequent Calculus. This has some resemblance to Implication Graph Convex Hulls defi) s
5 329 M
(ned in http://sourceforge.net/projects/acadpdrafts/files/ImplicationGraphsPGoodEquationAndPNot) s
5 318 M
(EqualToNPQuestion_excerpts.pdf/download, https://sites.google.com/site/kuja27/NotesOnConceptHy) s
5 307 M
(pergraphHMM_and_ImplicationGraphConvexHulls_2013-12-30.pdf?attredirects=0&d=1, https://sites.g) s
5 296 M
(oogle.com/site/kuja27/ImplicationRandomGraphConvexHullsAndPerfectVoterProblem_2014-01-11.pdf?a) s
5 285 M
(ttredirects=0&d=1) s
5 274 M
(624.11 Searle's Chinese Room Argument, Turing Test and AI - https://en.wikipedia.org/wiki/Chin) s
5 263 M
(ese_room - Turing test differentiates a human from a machine by question-answering \(e.g reCAPT) s
5 252 M
(CHA\). If there is a machine translation turing machine translating English to Chinese, it does) s
5 241 M
( not necessarily imply machine understands English and Chinese\(strong AI\), but only simulates ) s
5 230 M
(it \(weak AI\) - Human equivalent of a Turing machine in a room can exactly mimick Turing Machin) s
5 219 M
(e by executing the translation algorithm churning out Chinese from English with no knowledge o) s
5 208 M
(f English or Chinese whatsoever. Chinese room example demarcates measure of difficulties of tw) s
5 197 M
(o sets - understandability/consciousness and simulatability - and thus a Turing jump - human h) s
5 186 M
(as oracle access to a translation turing machine.) s
5 175 M
(624.12 Definability of Logical Formulas - http://www.math.wisc.edu/~msoskova/talks/MadisonColl) s
5 164 M
(oquium.pdf) s
5 153 M
(624.13 Topics in Algebra - [Israel N.Herstein] - Chapter 4 - Vector Spaces and Modules - Page ) s
5 142 M
(174 - Theorem 4.1.1 and Lemma 4.1.2 - Quotient Spaces) s
5 131 M
(624.14 Reproducing Kernel Hilbert Space - https://en.wikipedia.org/wiki/Reproducing_kernel_Hil) s
5 120 M
(bert_space - Mathematical Functions are embedded on Hilbert Space and have distance metric def) s
5 109 M
(ined on them. Every Function can be defined by a Turing Machine from Church-Turing Thesis.) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(---------------) s
5 65 M
(625. \(THEORY\) Recursive Lambda Function Growth - TextGraph Machine Translation - 10 December 2) s
5 54 M
(018 - related) s
5 43 M
(to 178) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(---------------) s
5 10 M
(1. RecursiveLambdaFunctionGrowth python implementation has a new function to do machine transl) s
_R
S
%%Page: (413) 413
%%BeginPageSetup
_S
18 36 translate
/pagenum 413 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (413) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ation of Text) s
5 681 M
(Graph english word vertices to another natural language. It uses PyDictionary Google Translate) s
5 670 M
( REST API service internally.) s
5 659 M
(2. An example Text Graph from Recursive Lambda Function Growth has been translated from Englis) s
5 648 M
(h to Kannada \(an Indian language\).) s
5 637 M
(3. This is just a primitive implementation without sentences creation which can be done throug) s
5 626 M
(h usual graph traversal or random walks. ) s
5 615 M
(4. Logs have been committed to testlogs/RecursiveLambdaFunctionGrowth.log.MachineTranslation.1) s
5 604 M
(0December2018 ) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(---------------) s
5 560 M
(626. \(THEORY\) Partial Ordered Rankings, Intrinsic Merit Vectors, Galois Connections and Though) s
5 549 M
(tNet - related) s
5 538 M
(to all sections expanding https://tac.nist.gov//publications/2010/participant.papers/CMI_IIT.p) s
5 527 M
(roceedings.pdf) s
5 516 M
(and https://arxiv.org/abs/1006.4458 and ThoughtNet - 21 December 2018) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(---------------) s
5 483 M
(Search Engines usually rank results as linear total order. Alternatively for each query ranked) s
5 472 M
( set of results) s
5 461 M
(can be a partial order and not necessarily total. This has been mentioned as a passing referen) s
5 450 M
(ce in ArXiv and) s
5 439 M
(NIST TAC articles previously. Traditionally Intrinsic Merit/Fitness is a scalar quantity which) s
5 428 M
( can be vectorized) s
5 417 M
(based on feature dimensions. Consequently, two URLs may not be comparable by a total ordering ) s
5 406 M
(< relation. Following example intrinsic merit vector partial ordered rankings of websites intu) s
5 395 M
(it this:) s
5 373 M
(\(1\) Subset partial ordered ranking - set of subsets ordered by containment:) s
5 362 M
(        [1,2,3,4]) s
5 351 M
(        |       \\) s
5 340 M
(        [1,2,3] [2,3,4]) s
5 329 M
(        |        |) s
5 318 M
(        [1,2]   [2,3]) s
5 296 M
(\(2\) Less Than or Equal To Ranking - Each tuple has elements of value less than or equal to ele) s
5 285 M
(ments of predecessor tuple:) s
5 274 M
(        [1,2,3,4]       [2,3,2,5]) s
5 263 M
(        |                       |) s
5 252 M
(        [1,1,2,3] ----- [2,2,3,4]) s
5 241 M
(        |) s
5 230 M
(        [1,1,1,2]) s
5 208 M
(Search Results for any two different queries thus create two partial ordered tuple sets of ran) s
5 197 M
(kings. Galois ) s
5 186 M
(connections define maps F and G between elements of two posets A and B subject to conditions:) s
5 175 M
(        a in A, b in B) s
5 164 M
(        F\(a\)=c in B, G\(b\)=d in A) s
5 153 M
(        F\(a\) <= b if and only if a <= G\(b\)) s
5 142 M
(Previous Galois Connections provide an alternative spectacle to perceive ThoughtNet - ThoughtN) s
5 131 M
(et as defined) s
5 120 M
(elsewhere earlier is a hypergraph of sentence hyperedges on evocative hypervertices motivated ) s
5 109 M
(by Psycho-and-Neurolinguistics. Search engine queries can be construed as evocatives returning) s
5 98 M
( results evoked by the query) s
5 87 M
(and thus search engine results are hyperedges of a ThoughtNet \(Internet itself as a ThoughtNet) s
5 76 M
(\) and queries are evocative hypervertices - same search result URL can appear in more than two) s
5 65 M
( queries creating the hyperedge across these query hypervertices.Previous partial ordered rank) s
5 54 M
(ings of search results bring an additional application of Galois connections amongst search re) s
5 43 M
(sult posets - if URLs a,b,c,d are such that a=c and b=d aforementioned Galois connections are ) s
5 32 M
(equivalent to hyperedges between ranked search query result posets in ThoughtNet and evocative) s
5 21 M
( hypervertices are search queries => ThoughtNet is a giant transitive Galois Connection which ) s
5 10 M
(is different from Contextual Multi Armed Bandit formulation of ThoughtNet earlier. Various res) s
_R
S
%%Page: (414) 414
%%BeginPageSetup
_S
18 36 translate
/pagenum 414 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (414) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ults and theorems applicable to ThoughtNet Hypergraphs \(and its stripped down version of Survi) s
5 681 M
(val Index Timeout pattern\) have been mentioned in:) s
5 670 M
(https://github.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComput) s
5 659 M
(erScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt) s
5 637 M
(References:) s
5 626 M
(-----------) s
5 615 M
(626.1 Galois Connections - https://en.wikipedia.org/wiki/Galois_connection) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-----------------) s
5 571 M
(627. \(FEATURE\) Vowelless Text \(De\)Compression - simplified likelydict MLE for HMM - 3 January ) s
5 560 M
(2019) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(-----------------) s
5 527 M
(1. TextCompression.py has been classified to new class VowellessText and all functions have be) s
5 516 M
(en made its members.) s
5 505 M
(2. One time Likelyhood Dictionary computation of prefixes,suffixes and substrings has been shi) s
5 494 M
(fted to WordSubstringProbabilities.py - wordlikelydict\(\) and wordprefixsuffixsubstringsprobdis) s
5 483 M
(t\(\)) s
5 472 M
(3. All precomputed prefix and suffix priors are initialized in TextCompression.py __init__\(\)) s
5 461 M
(4. Costly loop in HiddenMarkovModel_MLE\(\) of TextCompression.py has been done away with and in) s
5 450 M
(stead wordlikelydict\(\) has been changed to choose between costly exhaustive search and substri) s
5 439 M
(ngsdict list comprehension.) s
5 428 M
(5. Hardcoded priors for HMM have been removed and replaced by previous likelihood computation.) s
5 417 M
(6. Logs for this have been committed to testlogs/TextCompression.log.3January2019) s
5 406 M
(7. likelydict is created on demand once per compressed word than earlier heavy initialization ) s
5 395 M
(for all possible likelihoods.) s
5 384 M
(8. Regular Expressions are used in list comprehension for matching strings - "_" are treated a) s
5 373 M
(s alphabets in lower or upper case.) s
5 362 M
(9. For Exhaustive Search. following line is crucial which computes the conditional probability) s
5 351 M
( of a prefix for a suffix:) s
5 340 M
(                likelydict[k3[:-1]+k3[len\(k3\)-1]+k4[1:]] = v3 * v4) s
5 329 M
(10. The else clause, generalizes it and applies precomputed frequency probabilities of concate) s
5 318 M
(nated substrings circumventing the following conditional probability:) s
5 307 M
(                likelydict[substring1 + substring2 + ... + substringN] = Pr\(substring1\) * Pr\(s) s
5 296 M
(ubstring2\) * ... * Pr\(substringN\)) s
5 285 M
(by:) s
5 274 M
(                likelydict[substring1 + substring2 + ... + substringN] = Pr\(substring1 + subst) s
5 263 M
(ring2 + ... + substringN\)) s
5 252 M
(11. Both should be almost equal if substring random variables are independent and identically ) s
5 241 M
(distributed.) s
5 230 M
(12. An example English text from https://www.valmikiramayan.net/utf8/yuddha/sarga128/yuddha_12) s
5 219 M
(8_frame.htm - Verse 120 has been compressed and decompressed.) s
5 208 M
(13. Decompressed text has almost more than 50% accuracy and most priors are equal misleading t) s
5 197 M
(he decipherment.) s
5 186 M
(14. Previous HMM based probabilistic decompression can be compared to List decoding Berlekamp-) s
5 175 M
(Welch implementation which maps text to a polynomial ) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(-----------------) s
5 131 M
(628. \(FEATURE\) Software Analytics - Hardcoded inputlayer replaced by Psutils - 8 January 2019 ) s
5 120 M
(- Usecase) s
5 109 M
(in 399 implemented) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-----------------) s
5 76 M
(1.DeepLearning_SoftwareAnalytics.py in software_analytics/ has been updated and hardcoded proc) s
5 65 M
(ess statistics) s
5 54 M
(for input layer of BackPropagation have been replaced by Psutil systemwide load percentages) s
5 43 M
(2.This implements the usecase for software analytics mentioned earlier and finds the weights f) s
5 32 M
(or) s
5 21 M
(input layer, hidden layer and output layer of BackPropagation multilayered perceptron.) s
5 10 M
(3.Psutil provides cpu_percentage\(\), memory_percentage\(\) and disk_usage\(\) functions fields from) s
_R
S
%%Page: (415) 415
%%BeginPageSetup
_S
18 36 translate
/pagenum 415 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (415) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( which have been used as input layer of the perceptron.) s
5 681 M
(4.Sampling loop has been limited to 2 but it can be any number. For each value of instantaneou) s
5 670 M
(s system load \(cpu, memory, disk IO\) backpropagation iterates for sometime \(limited to 10000\) ) s
5 659 M
(and finds the weights.) s
5 648 M
(5.For any two successive load values of input layer at two time points t and t+delta, the weig) s
5 637 M
(hts of the perceptron fluctuate and should theoretically stabilize for significant number of l) s
5 626 M
(oad samples \(which is presently 2\)) s
5 615 M
(6.Output layer has been set to a high value of 99% implying heavily thrashed system and input ) s
5 604 M
(percentage values are divided by 10000 instead of 100 for probabilities to prevent overflow er) s
5 593 M
(rors \(NaN and Inf\).) s
5 582 M
(7.Logs have been committed to testlogs/DeepLearning_SoftwareAnalytics.log.8January2019) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(----------) s
5 538 M
(629. \(THEORY\) Complement Diophantine Equations over Complex Numbers and Algebraic/Arithmetic C) s
5 527 M
(ircuits for them, Blum-Shub-Smale Turing Machines, Thue and Siegel Equations, Elliptic Curves,) s
5 516 M
( Mordell Conjecture and Theorem, ABC Conjecture, Riemann Zeta Function - 9 January 2019 - rela) s
5 505 M
(ted to 24,490,617) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(----------) s
5 472 M
(As mentioned in previous sections, finding Diophantine representation of a complementary set r) s
5 461 M
(educes to creating a map f from diophantine set a={a1,a2,...,an} such that f\(x,b\)=0 for unknow) s
5 450 M
(n x in {Integers/Reals/Rationals/Complex} and parameter b in a. Discussions previously have be) s
5 439 M
(en mostly restricted to Integers, Reals and Rationals and terminology "complement function" is) s
5 428 M
( applied to a diophantine of integer solutions to x and is totally defined for all x\(recursive) s
5 417 M
(\) throughout all sections of this draft. Extension to Complex Diophantine Sets involves applyi) s
5 406 M
(ng a converse of Thue's Equation which exactly solves a known homogenous bivariate diophantine) s
5 395 M
( f:) s
5 384 M
(        f\(x,y\)=m, m is non-zero integer.) s
5 373 M
(f\(x,y\) is factorized as:) s
5 362 M
(        f\(x,y\)=a\(d\)*product_r=1_to_d\(x-alpha\(r\)*y\)) s
5 351 M
(where alpha\(r\) are complex roots of f\(t,1\)=a0+a1*t+a2*t^2+...a\(d\)*t^d=0.) s
5 329 M
(But f is assumed to be unknown for a complementary diophantine set and has to be represented b) s
5 318 M
(y reversing the factorization to an interpolation:) s
5 307 M
(        f\(x,y\)=a\(d\)*product_r=1_to_d\(x-alpha\(r\)*y\)) s
5 296 M
(for all alpha\(r\) in a complex complementary diophantine set CDS={alpha1,alpha2,...,alphad} whi) s
5 285 M
(ch yields f\(x,y\) for integer values of x,y. Assumption here is CDS is the set of complex roots) s
5 274 M
( of f\(t,1\)=a0+a1*t+a2*t^2+...a\(d\)*t^d=0.) s
5 252 M
(Siegel Equation generalizes Thue's Theorem for arbitrary diphantine equations in integer coeff) s
5 241 M
(ients. f\(x,y\) is decomposed as:) s
5 230 M
(        f\(x,y\) = h\(x,y\) + k\(x,y\) ) s
5 219 M
(where h\(x,y\) is homogenous and Thue's equation applies. Set of complex solutions of f\(x,y\) adj) s
5 208 M
(oined by set of distinct {alpha\(r\)} form a Riemann compact surface of singularities or an alge) s
5 197 M
(braic curve which is the required Complement Diophantine Surface over Complex Numbers. Mordell) s
5 186 M
(-Weil Theorem is a classic result which states diophantine elliptic curves of the form:) s
5 175 M
(        y^2 = x^3 + ax^2 + bx + c ) s
5 164 M
(have finitely many rational solutions which can be obtained by a chord-tangent algorithm and c) s
5 153 M
(reate an abelian group. Elliptic curve diophantines of finite rational solutions are suitable ) s
5 142 M
(candidates for formalizing finite sets of triples in complement diophantine version of ABC con) s
5 131 M
(jecture mentioned in 617 - "...Q1 is the 3 dimensional half-space of Cube tiled by finite sets) s
5 120 M
( of triples of quality 1+epsilon for every real epsilon. As mentioned earlier, Pentominoes til) s
5 109 M
(ing is an exact cover problem for 2 dimensions...".) s
5 87 M
(Algebraic or Arithmetic circuits for Diophantines over Complex Numbers can be defined by compl) s
5 76 M
(exity classes over complex numbers \(classes Pc, Npc,...\). Blum-Shub-Smale Turing Machine model) s
5 65 M
( generalizes Turing Machines over Z]2] to any Field Real,Complex,Rationals etc.,For example, H) s
5 54 M
(ilbert Nullstellensatz) s
5 43 M
(problem decides if set of polynomials have common root and is in algebraic complexity class HN) s
5 32 M
(c over complex numbers. Riemann Zeta Function can be represented as a disjunctive clauses or n) s
5 21 M
(on-uniform Hilbert Nullstellensatz algebraic circuit in 0-1-HNc \(0 if s is a non-trivial zero ) s
5 10 M
(else 1\) of product polynomials having complex roots \(non-trivial zeros\): ) s
_R
S
%%Page: (416) 416
%%BeginPageSetup
_S
18 36 translate
/pagenum 416 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (416) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        RZF=product_of\(1/[1-prime\(k\)^\(-s\)]\) for all primes 2,3,5,7,...) s
5 681 M
(Algebraic computation is defined by a binary tree - Algebraic Computation Tree over +,-.%,*,sq) s
5 670 M
(rt\(\).From Koiran's Theorem 0-1-NPc \(variables are binary but polynomial size certificates are ) s
5 659 M
(complex\) is in AM[2]=BP.NP if Riemann Hypothesis is True which equates conventional complexity) s
5 648 M
( classes over Z[2] and algebraic classes. 0-1-HNc is 0-1-NPc-complete and 0-1-HNc is in PSPACE) s
5 637 M
(. This is an alternative circuit formulation to Euler-Fourier polynomial mentioned in 24 for R) s
5 626 M
(iemann Zeta Function. Number of solutions \(non-trivial zeros\) to previous RZF circuit can be c) s
5 615 M
(haracterized by counting class equivalent Sharp-0-1-HNc \(not in literature\). From Riemann Hypo) s
5 604 M
(thesis, all these solutions must have Re\(s\) = 0.5.) s
5 582 M
(References:) s
5 571 M
(-----------) s
5 560 M
(629.1 Diophantine Equations - Survey - [V Srinivas, Tata Institute of Fundamental Research] - ) s
5 549 M
(https://www.currentscience.ac.in/Downloads/article_id_059_12_0589_0594_0.pdf) s
5 538 M
(629.2 Exploring Number Theory via Diophantine Equations - https://www.csbsju.edu/Documents/Mat) s
5 527 M
(h/Sunil-CC-2009-B1.pdf - Gaussian Intgers, Pythagorean Triples) s
5 516 M
(629.3 Fermat's Last Theorem - [Amir D.Aczel] - Shimura-Taniyama Conjecture: Elliptic Curves ar) s
5 505 M
(e Modular Forms and proof of Fermat's Last Theorem by [Andrew Wiles]) s
5 494 M
(629.4 Algebraic Complexity - [Arora-Barak] - Blum-Shub-Smale Model - http://theory.cs.princeto) s
5 483 M
(n.edu/complexity/algebraicchap.pdf) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(-----------) s
5 439 M
(630. \(THEORY and FEATURE\) Music Pattern Mining - Audio to Notes - Intrinsic Merit of Music - 1) s
5 428 M
(2 January 2019, 21 January 2019 - related to all sections on Intrinsic Merit and Fame - relate) s
5 417 M
(d to 67,68,69,593) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(-----------) s
5 384 M
(1. Implementations in NeuronRain on Intrinsic Merit Versus Fame previously have so far concent) s
5 373 M
(rated only on Merit of Text \(TextGraphs\), Large Scale Visuals \(Videos and Images - LSVR\) and P) s
5 362 M
(eople \(Interview/Examination/Contest based merit, Analytics of Social Network Profile Vertices) s
5 351 M
(\). Merit of Audio or Complexity of Music has been defined theoretically earlier as a minimum s) s
5 340 M
(ize DFA or Turing Machine accepting musical notes as language which is a minimum description l) s
5 329 M
(ength measure similar to Kolmogorov complexity.) s
5 318 M
(2.To this effect music_pattern_mining/AudioToBitMatrix.py has been changed to include a new fu) s
5 307 M
(nction which converts an audio waveform to frequency domain by FFT. These frequencies are in t) s
5 296 M
(urn mapped to a string of musical notes over octave alphabet - C,D,E,F,G,A,B,C \(12 including f) s
5 285 M
(ine divisions of notes denoted by #\) - librosa API are invoked.) s
5 274 M
(3.Essentially by mapping music to huge strings over octave alphabets the problem of music mini) s
5 263 M
(ng is made easier and all algorithms implemented for string mining in NeuronRain apply to musi) s
5 252 M
(c as well.) s
5 241 M
(4.Since music is often related to creative genius, complexity of string of notes is an approxi) s
5 230 M
(mation of merit.) s
5 219 M
(5.String of musical notes differ from usual text strings because of an inherent periodicity in) s
5 208 M
( music \(self-similar fractal-like ascending and descending sequence of notes\)) s
5 197 M
(6.logs for an example audio to notes string has been committed to python-src/music_pattern_min) s
5 186 M
(ing/testlogs/AudioToBitMatrix.log.AudioToNotes.12January2019) s
5 175 M
(7.State machine diagrams for Minimum Turing Machine or DFA accepting languages of strings of o) s
5 164 M
(ctave notes) s
5 153 M
(are directed graphs possibly having lots of cycles implying inherent periodicity in music. All) s
5 142 M
( directed graph complexity measures and algorithms therefore could quantify merit of audio or ) s
5 131 M
(music.) s
5 120 M
(8.Emphasis is laid more on music patterns than audio patterns because audio is simply some tex) s
5 109 M
(tual content extractable by speech recognition and spelt out in flat notes of similar frequenc) s
5 98 M
(y mostly without modulation excluding emotives.) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(----------) s
5 54 M
(631. \(THEORY\) Computational Geometric Factorization, Alternative Ray Shooting Algorithm, BQP a) s
5 43 M
(nd QNC, Pythagorean Triples, Possibility of decoherence from Quantum NC to Classical PRAMs, No) s
5 32 M
( cloning theorem - related to 562 and all other sections on factorization - 21 January 2019) s
5 21 M
(----------------------------------------------------------------------------------------------) s
5 10 M
(----------) s
_R
S
%%Page: (417) 417
%%BeginPageSetup
_S
18 36 translate
/pagenum 417 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (417) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(Pythagorean triples are integers of the form a^2 + b^2 = c^2 which can be factorized into prod) s
5 681 M
(uct of) s
5 670 M
(Gaussian Integers \(Z[i]\) as c = \(a+ib\)\(a-ib\) which is a hyperbolic curve defined on complex nu) s
5 659 M
(mber field \(C^2\). This extends integer factorization to complex Gaussian Integers factorizatio) s
5 648 M
(n of Pythagorean triples. Blum-Shub-Smale Turing Machines can factorize Pythagoren triples to ) s
5 637 M
(Gaussian Integers. Ray Shooting Query Algorithms so far described previously depend on rays fr) s
5 626 M
(om origin \(0,0\) and piercing hyperbolic arc bow at different spacings. Instead of ray shooting) s
5 615 M
( from origin \(0,0\), end points of the hyperbolic arc can be connected by a chord \(line between) s
5 604 M
( \(0,N\) and \(N,0\)\) and midpoint of this chord is an alternative origin for ray shooting queries) s
5 593 M
(. This inverts the sweepline direction of rays from \(0,0\) to \(N,N\) to \(N,N\) to \(0,0\). ) s
5 571 M
(From QNC Computational Geometric Factorization described earlier, hyperbolic pixelated arc bow) s
5 560 M
( can be specified as a Hilbert Space vector superposition of factor/product states \(ket notati) s
5 549 M
(on\) over complex amplitudes Bi:) s
5 538 M
(        |\(p,q\)> = B1|\(x1,y1\)> + B2|\(x2,y2\)> + ... + Bn|\(xO\(N\),yO\(N\)\)>) s
5 527 M
(and Bi^2 is the classical probability of a state |\(xi,yi\)>. QNC contains polynomial size quant) s
5 516 M
(um multiplication logdepth toffoli gates while NC has polynomial size logdepth PRAM processors) s
5 505 M
( and containment NC in QNC in BQP is known. Quoting reference 562.10 - "...If the HHL algorith) s
5 494 M
(m could be adapted to the case where \(say\) a single bi is 1 and all the others are 0, then it ) s
5 483 M
(would contradict the impossibility of an exponential speedup for black-box quantum search, whi) s
5 472 M
(ch was proved by Bennett, Bernstein, Brassard, and Vazirani...", if classical probability Bi^2) s
5 461 M
( of some state |\(xi,yi\)> is 1:) s
5 450 M
(                Bi^2 = \(a+ib\)^2 = \(a^2 - b^2\) + i\(2ab\) = 1) s
5 439 M
(                implying b=0 and |a| = 1) s
5 428 M
(Zero imaginary part in previous sceanario implies a possibility of decoherence from quantum to) s
5 417 M
(ffoli gates in QNC to PRAMs in NC. No cloning theorem implies quantum state cannot be replicat) s
5 406 M
(ed. But since NC is contained in QNC, every PRAM algorithm in NC can be translated to a quantu) s
5 395 M
(m algorithm in QNC. For example any two toffoli multiplication gates in QNC algorithm for two ) s
5 384 M
(PRAMs in NC algorithm \(e.g for previous factorization problem allowing decoherence\), must have) s
5 373 M
( different state superposition vectors v1 and v2 such that v1 has some factor state amplitude ) s
5 362 M
(Bi\(v1\) and v2 has other factor state amplitude Bk\(v2\) of classical probabilities 1: Bi\(v1\)^2 =) s
5 351 M
( Bk\(v2\)^2 = 1 which does not violate No cloning theorem.) s
5 329 M
(Even if classical probability Bi^2 of some factor state Bi=|\(xi,yi\)> is not 1 but close to 1 i) s
5 318 M
(n previous superposition of factor/product states, implying amplitudes of other factor states ) s
5 307 M
(are non-zero, QNC factorization collapses to a classical BPNC factorization \(e.g. a randomized) s
5 296 M
( PRAM factorization algorithm\) despite no derandomization to NC. Derandomizing BPNC to NC has ) s
5 285 M
(been mentioned previously in references 53.12.1 and 53.12.4 \(Hitting Set Generators\) which doe) s
5 274 M
(s not rule out possibility of a complete collapse of QNC all the way upto NC via BPNC.) s
5 252 M
(References:) s
5 241 M
(-----------) s
5 230 M
(631.1 Wave Function Collapse and Various Interpretations of QM - https://en.wikipedia.org/wiki) s
5 219 M
(/Wave_function_collapse - Quantum Decoherence is one of the ways to interpret collapse of wave) s
5 208 M
( function to a classical state) s
5 197 M
(631.2 Computational Meaning of Quantum Gates and Measurement Gates - https://www.fi.muni.cz/us) s
5 186 M
(r/gruska/quantum10f/qc1004.pdf - [Bernstein-Vazirani] Theorem implies for universal quantum ga) s
5 175 M
(tes it is sufficient to have real amplitudes) s
5 164 M
(631.3 Measurement Principles of Quantum Gates - http://www-inst.eecs.berkeley.edu/~cs191/sp12/) s
5 153 M
(notes/chap1&2.pdf - Measurement by Phases) s
5 142 M
(631.4 BQP is contained in PP - https://www.cs.cmu.edu/~odonnell/quantum15/lecture23.pdf - Boun) s
5 131 M
(ded Error Quantum Polynomial Time computation is contained in Classical Probabilistic Polynomi) s
5 120 M
(al Time computation - Theorem 4.1 - [Adleman-DeMarrais-Huang]. But derandomizing PP to P or PP) s
5 109 M
( success amplification does not seem to have a parallel to that of BPP success amplification. ) s
5 98 M
(As a special case, hypothetical PP factoring algorithm can be made bounded error by invoking r) s
5 87 M
(ay shooting query oracles to find approximate factors which bound the failure probability and ) s
5 76 M
(thus bringing factorization to BPP or BPNC \(by parallel ray shooting\) which can then be derand) s
5 65 M
(omized to NC.) s
5 54 M
(631.5 BPP is contained in BQP and Feynman Path Integral Proof of BQP in PP - https://www.scott) s
5 43 M
(aaronson.com/democritus/lec10.html - classical coin flip is a quantum Hadamard Gate mapping qu) s
5 32 M
(bit |0> to 1/sqrt\(2\)\(|0> + |1>\) and qubit |1> to 1/sqrt\(2\)\(|0> - |1>\). Hadamard Gate is a Univ) s
5 21 M
(ersal Quantum Computation Gate. Combined together Bounded Error Quantum Computation lies betwe) s
5 10 M
(en bounded classical 2-sided error and unbounded classical 2-sided error complexity classes) s
_R
S
%%Page: (418) 418
%%BeginPageSetup
_S
18 36 translate
/pagenum 418 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (418) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(631.6 Quantum Hadamard Gate - https://en.wikipedia.org/wiki/Quantum_logic_gate#Hadamard_\(H\)_ga) s
5 681 M
(te) s
5 670 M
(631.7 Is Factoring really in BQP? really? - https://rjlipton.wordpress.com/2011/01/23/is-facto) s
5 659 M
(ring-really-in-bqp-really/ - "...The problem is that if we press the button again at time {i+1) s
5 648 M
(}, we may get a bit that pertains to some other value {y_{i+1}} that is not the same as {y_i}.) s
5 637 M
( If we could guarantee that repeated taps on {B_1} would stay focused on {y_i} then we could a) s
5 626 M
(pply search-to-decision and recover the function value {y_i}...") s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(---------) s
5 582 M
(632. \(FEATURE and THEORY\) Intrinsic Merit of Music, Exact Learning of DFAs, Minimum Descriptio) s
5 571 M
(n Length) s
5 560 M
(Merit - 29 January 2019 - related to all sections on Intrinsic Merit and Fame - related to 67,) s
5 549 M
(68,69,593,) s
5 538 M
(630) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(---------) s
5 505 M
(1. New function audio_merit\(\) has been defined in AudioToBitMatrix.py which invokes minimum_de) s
5 494 M
(scriptive_complexity\(\) to compute MDL for string of octave notes for a musical clip.) s
5 483 M
(2.Source files MinimumDescLength.py and Entropy.py have been changed to include __main__ and r) s
5 472 M
(ewritten) s
5 461 M
(to define member function minimum_descriptive_complexity\(\) and some other error checks for flo) s
5 450 M
(ating point overflow.) s
5 439 M
(3.An example musical MP4 clip excerpt of JS Bach has been analyzed. This masterpiece is featur) s
5 428 M
(ed in Douglas Hofstadter's Godel-Escher-Bach:An Eternal Golden Braid for its self-similar stra) s
5 417 M
(nge loops of notes \(a mandelbrot fractal set\)) s
5 406 M
(4.This implementation thus is a culmination of 4 classes of intrinsic merits on Internet and W) s
5 395 M
(WW - Text, Video, Audio and People - defined in this draft.) s
5 384 M
(5. Following are intrinsic merit implementations in this draft which expand on publications ht) s
5 373 M
(tp://arxiv.org/abs/1006.4458, http://www.nist.gov/tac/publications/2010/participant.papers/CMI) s
5 362 M
(_IIT.proceedings.pdf and http://arxiv.org/abs/1106.4102 \(Complement Diophantines are intrinsic) s
5 351 M
( merit measures too because text obtained by word concatenations can be represented by word di) s
5 340 M
(ophantine equations and can be Ramsey 255-colored by alphabet locations thereby creating arith) s
5 329 M
(metic progressions\):) s
5 318 M
(        5.1.Textual merit is analyzed by Recursive Gloss Overlap and Recursive Lambda Function) s
5 307 M
( Growth algorithms - Graph Tensor Neuron Network Merit. ) s
5 296 M
(        5.2 People Merit is analyzed by a mixture model of Intrinsic\(Academic/Work/Interview/C) s
5 285 M
(ontest/Examinations\) and Experiential Mistake Bound Merit by a recursive mistake correction tr) s
5 274 M
(ee differential equation. ) s
5 263 M
(        5.3 Video Merit is analyzed by EventNet/ImageNet Tensor Products Algorithm. ) s
5 252 M
(        5.4 Audio Merit is defined theoretically as complexity of exact learning of DFAs on st) s
5 241 M
(rings of notes and their minimization in [Dana Angluin] L* Algorithm Model and implemented by ) s
5 230 M
(a less intensive Minimum Description Length merit on string of notes in this commit. Implement) s
5 219 M
(ation of L* could be exponential and there are PAC learning approximate DFA learning algorithm) s
5 208 M
(s.) s
5 197 M
(6.Previous algorithms for 4 classes of intrinsic merit are theoretical approximations based on) s
5 186 M
( algorithmic graph theory, causality and logical time in clouds, learning theory and connectom) s
5 175 M
(es with no invocation of statistical tool and by no means the only way to analyze merit but on) s
5 164 M
(e of them.) s
5 142 M
(References:) s
5 131 M
(-----------) s
5 120 M
(632.1 Hilbert Tenth Problem: What was done and What is to be done - [Yuri Matiyasevich] - http) s
5 109 M
(s://books.google.co.in/books?id=qWYbCAAAQBAJ&pg=PA11&lpg=PA11&dq=word+concatenation+diophantin) s
5 98 M
(e&source=bl&ots=zQDO7Jy-kK&sig=ACfU3U1CeZ4WvshXDu62TEIOmb0bofrcbg&hl=en&sa=X&ved=2ahUKEwjItsyO) s
5 87 M
(5JLgAhUSfSsKHZ-NAx8Q6AEwAnoECAQQAQ#v=onepage&q=word%20concatenation%20diophantine&f=false - ".) s
5 76 M
(..Under this representation of matrices, concatenation words corresponds to matrix multiplicat) s
5 65 M
(ion and thus can be easily expressed by a system of diophantine equations ...") s
5 54 M
(632.2 The Musical Offering - JS Bach - https://en.wikipedia.org/wiki/The_Musical_Offering) s
5 43 M
(632.3 Godel Escher Bach: An Eternal Golden Braid - [Hofstadter] - Endlessly rising canon - "..) s
5 32 M
(.In this canon, Bach has given us our first example of the notion of Strange Loops. The) s
5 21 M
("Strange Loop" phenomenon occurs whenever, by moving upwards \(or downwards\)) s
5 10 M
(through the levels of some hierarchical system, we unexpectedly find ourselves right) s
_R
S
%%Page: (419) 419
%%BeginPageSetup
_S
18 36 translate
/pagenum 419 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (419) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(back where we started...") s
5 681 M
(632.3 Exact Learning of DFA - Angluin's L* Algorithm - teacher/learner model of membership and) s
5 670 M
( equivalence queries - http://www.cs.ox.ac.uk/james.worrell/DFA-learning.pdf) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(-----------) s
5 626 M
(633. \(THEORY and FEATURE\) GIS and Urban Planning Analytics, Convex Hull - 31 January 2019) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(-----------) s
5 593 M
(1. ImageGraph_KerasTheano.py has been changed to include a new function for finding convex hul) s
5 582 M
(l of set of) s
5 571 M
(points/pixels in an image) s
5 560 M
(2. QHull ConvexHull\(\) function from SciPy Spatial library - https://docs.scipy.org/doc/scipy/r) s
5 549 M
(eference/generated/scipy.spatial.ConvexHull.html - has been invoked in the new convex_hull\(\) f) s
5 538 M
(unction defined for this purpose.) s
5 527 M
(3. An example demographic GIS satellite image of Chennai Megapolis \(Population density of Urba) s
5 516 M
(n Agglomeration\) from SEDAC website - http://sedac.ciesin.columbia.edu/mapping/popest/gpw-v4/ ) s
5 505 M
(- has been analyzed to draw a convex hull around thickly populated regions and convex hull ver) s
5 494 M
(tices are printed in terms of some area units \(not sqkm or sqmiles\).) s
5 483 M
(4. OpenCV2 provides api for convex hull too - https://docs.opencv.org/2.4/doc/tutorials/imgpro) s
5 472 M
(c/shapedescriptors/hull/hull.html) s
5 461 M
(5. Convex Hull analytics of GIS imagery is helpful for Urban planners and sustainable developm) s
5 450 M
(ent.) s
5 428 M
(----------------------------------------------------------------------------------------------) s
5 417 M
(-----------) s
5 406 M
(634. \(FEATURE\) Software Analytics and Scheduler Analytics - Backpropagation correction - 9 Feb) s
5 395 M
(ruary 2019) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(-----------) s
5 362 M
(1.DeepLearning_SchedulerAnalytics.py and DeepLearning_SoftwareAnalytics.py have been updated f) s
5 351 M
(or) s
5 340 M
(correction to a serious bug in BackPropagation computation.) s
5 329 M
(2.Earlier, BackPropagation Neural Network \(BPNN\) object for Software and Scheduler Analytics w) s
5 318 M
(as getting created for every input training dataset element erroneously.) s
5 307 M
(3.This has been remedied by instantiating BackPropagation class only once outside the loop and) s
5 296 M
( updating only the input layer and/or expected output layer for each element in input dataset ) s
5 285 M
(iteration.) s
5 274 M
(4.Iterations have been curtailed for concise logs.) s
5 263 M
(5.By this change, weights are updated for every psutil per process proc object \(Scheduler Anal) s
5 252 M
(ytics\) or systemwide process statistics info \(Software Analytics\) thus learning weights of the) s
5 241 M
( multilayer perceptron from system performance.) s
5 230 M
(6.logs for this have been committed to testlogs/DeepLearning_SchedulerAnalytics.log.9February2) s
5 219 M
(019 and testlogs/DeepLearning_SoftwareAnalytics.log.9January2019 \(Timestamped wrongly - must b) s
5 208 M
(e read DeepLearning_SoftwareAnalytics.log.9February2019\)) s
5 197 M
(7.After sufficiently large number of input training data, hopefully this BPNN would be able to) s
5 186 M
( predict outputs from input per-process and systemwide performance statistics data e.g 99% loa) s
5 175 M
(d average.) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(---------) s
5 131 M
(635. \(THEORY and FEATURE\) Intrinsic Merit of Texts, Ramsey Theory, Complement Diophantines - R) s
5 120 M
(amsey) s
5 109 M
(number of text graph - related to 2,617,630,632 and all sections on Fame and Merit - 11 Februa) s
5 98 M
(ry 2019) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(---------) s
5 65 M
(1.It has been mentioned earlier that texts which are concatenations of words can be represente) s
5 54 M
(d by) s
5 43 M
(*\) Matrix Diophantine Equations *\) and \(255 or 511\) coloring of texts by ASCII/Unicode alphabe) s
5 32 M
(ts \(excluding space\) which give rise to ramsey ordering by Van Der Waerden Theorem assuming te) s
5 21 M
(xts of size N are integer sequences of locations 1-to-N colored by alphabets containing monoch) s
5 10 M
(romatic arithmetic progressions of alphabet\(color\) locations.) s
_R
S
%%Page: (420) 420
%%BeginPageSetup
_S
18 36 translate
/pagenum 420 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (420) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(2.Best known upper bound for Van Der Waerden Number for a least length sequence of N integers ) s
5 681 M
(= W\(r,k\) for r-coloring of an integer sequence and arithmetic progression of least length k <=) s
5 670 M
( 2^2^\(r^2^2^\(k+9\)\) by [Timothy Gowers]) s
5 659 M
(3.Previous upperbound for texts colored by alphabets of size 255 implies size N of a natural l) s
5 648 M
(anguage text to have length k arithmetic progressions on alphabet locations <= 2^2^\(255^2^2^\(k) s
5 637 M
(+9\)\) which is huge even for small k.) s
5 626 M
(4.Ramsey coloring R\(r,s\) of graphs is equivalent of Van Der Waerden sequence coloring which de) s
5 615 M
(fines emergence of monochromatic cliques r or independent sets s \(also known as Friends and St) s
5 604 M
(rangers theorem\).) s
5 593 M
(5.By definition of complementation in generic sense, k-coloring partitions a set into k disjoi) s
5 582 M
(nt subsets which can be represented by some diophantine \(e.g Beatty functions\) - Complementati) s
5 571 M
(on is a size 2 partition.) s
5 560 M
(5.In this commit, Ramsey R2 function is invoked from NetworkX API on textgraphs of natural lan) s
5 549 M
(guage texts and maxclique-maxindependentset pairs are computed.) s
5 538 M
(7.This is a less intensive intrinsic merit measure for a text and Van Der Waerden number compu) s
5 527 M
(tation has no mention in python libraries presently and is daunting too - SAT solvers are used) s
5 516 M
( to compute Van Der Waerden Numbers in some algorithms.) s
5 505 M
(8.Following this reasoning, strings of octave alphabets in music can be construed as 12-colori) s
5 494 M
(ng \(and more including majors and minors\) of music as sequence and indicates inevitable emerge) s
5 483 M
(nce of order from chaos.) s
5 461 M
(References:) s
5 450 M
(-----------) s
5 439 M
(635.1 SAT Solver for Van Der Waerden number 1132 = V\(2,6\) - https://www.cs.umd.edu/~gasarch/TO) s
5 428 M
(PICS/vdw/1132.pdf) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(---------) s
5 384 M
(636. \(THEORY\) Computational Geometric Factorization - Parallel Planar Point Location of factor) s
5 373 M
(s in Monotone Subdivision formed by Hyperbolic Arc Pixel Polygons with no necessity for Ray Sh) s
5 362 M
(ooting Queries, Van Der Waerden Ramsey Coloring of Sequences) s
5 351 M
(- related to 506,605 and other sections on factorization - 12 February 2019, 18 February 2019,) s
5 340 M
( 20 February 2019, 22 September 2019) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(---------) s
5 307 M
(In previous sections on computational geometric factorization, various parallel algorithms bas) s
5 296 M
(ed on k-mergesort,segment tree, wavelet tree,sorting networks,planar point location and ray sh) s
5 285 M
(ooting were described to locate factors on the hyperbolic arc tile segments \(or\) pixel array p) s
5 274 M
(olygons. A continuous hyperbolic curve is "rectified" to a chain of non-intersecting polygons ) s
5 263 M
(\(juxtaposed\) by considering each tile segment \(x, N/x, x+1, N/x\) of hyperbola obtained by diff) s
5 252 M
(erential calculus identity delta=N/[x\(x+1\)] as a rectangular polygon of dimension 1 * N/[x\(x+1) s
5 241 M
(\)] which is an array of pixels of dimension 1 * 1 containing the product of x and y ordinates ) s
5 230 M
(in arithmetic progression and thus implicitly sorted. These adjoining rectangular polygons whi) s
5 219 M
(ch meet at endpoints, create a plain simple line graph formed by their vertices and edges whic) s
5 208 M
(h is strongly connected. This set of polygons partition the 2 dimensional plane of area \(1,N\)*) s
5 197 M
(\(1,N\) into 3 planar subdivisions - space above hyperbolic polygons, space within the hyperboli) s
5 186 M
(c polygons and space below hyperbolic polygons. Earlier algorithms assumed arbitrary subdivisi) s
5 175 M
(ons and had ray shooting to find a polygon containing approximate factor as a prerequisite whi) s
5 164 M
(ch is then binary searched. But this chain of hyperbolic tile polygons is monotone because y-a) s
5 153 M
(xis is strictly decreasing or non-increasing for any path along the plain simple line graph \(P) s
5 142 M
(SLG\) formed by hyperbolic polygonal planar subdivision. There are efficient algorithms for PRA) s
5 131 M
(M geometric searching of monotone subdivisions mentioned in references below. Thus locating a ) s
5 120 M
(hyperbolic pixel array polygon containing factor point can be done in O\(logN\) PRAM time and fi) s
5 109 M
(nding the factor in this polygon by sequential binary search in additional O\(logN\) sequential ) s
5 98 M
(time. Thus factorization by planar point location in monotone subdivision of hyperbolic pixel ) s
5 87 M
(array polygons is in O\(logN\) parallel + O\(logN\) sequential time - and thus in Nick's class - w) s
5 76 M
(ithout requirement of approximate factoring by ray shooting queries.) s
5 54 M
(Arithmetic Progression of points as product of ordinates within each Hyperbolic pixel array po) s
5 43 M
(lygon brings Ramsey/Van Der Waerden coloring of sequences into the realm of factorization - by) s
5 32 M
( k-mergesort the tile segement polygons are unified into single totally ordered integer sequen) s
5 21 M
(ce of length N*N/\(N+1\). If each arithmetic progression polygon is colored uniquely, the sorted) s
5 10 M
( sequence is a union of set of k-colored arithmetic progressions of some minimum length \(or\) N) s
_R
S
%%Page: (421) 421
%%BeginPageSetup
_S
18 36 translate
/pagenum 421 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (421) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(*N/\(N+1\) = VanDerWaerden\(k, minimum length of a segment\)) s
5 670 M
(In all sections related to factorization in this draft, factoring only one integer at a time h) s
5 659 M
(as been the focus. Geometric intuition of hyperbolic tile/polygon segmentation allows storing ) s
5 648 M
(segments or polygons for hyperbolic curves of multiple integers in same datastructure which co) s
5 637 M
(uld be segment tree, wavelet tree, or point location tree. For example two rectified hyperboli) s
5 626 M
(c polygons/segments for xy=N1 and xy=N2 for factoring N1 and N2 can be stored in single search) s
5 615 M
( tree which can be queried for factor points of N1 and N2 independently. This optimization sav) s
5 604 M
(es lot of parallel tree construction time and space.) s
5 582 M
(References:) s
5 571 M
(----------) s
5 560 M
(636.1 Parallel Planar Point Location for Monotone Subdivisions - https://www.csun.edu/~ctoth/H) s
5 549 M
(andbook/chap46.pdf - Table 46.5.1 - Parallel Point location in monotone subdivision by EREW PR) s
5 538 M
(AM in O\(log n\) time, O\(n\) parallel work - Reference [TV91] in 636.2) s
5 527 M
(636.2 Parallel transitive closure and point location in planar structures - Lemma 4.8 - [Tamas) s
5 516 M
(sia-Vitter] - http://www.ittc.ku.edu/~jsv/Papers/TaV91.transclosure.ps.gz) s
5 505 M
(636.3 Computational Geometry - [Preparata-Shamos] - Point Location - Section 2.2 - https://boo) s
5 494 M
(ks.google.co.in/books?id=_p3eBwAAQBAJ&printsec=frontcover#v=onepage&q=point%20location&f=false) s
5 483 M
(636.4 Point Location in Successive Convex Hulls - [Greenlaw-Hoover-Ruzzo] - List of P-Complete) s
5 472 M
( Parallel RAM Problems - A.9.5 - https://homes.cs.washington.edu/~ruzzo/papers/limits.pdf - Gi) s
5 461 M
(ven a point on 2D Plane, is the point in k-th remaining convex hull after finding and removing) s
5 450 M
( convex hulls repetitively? - Previous monotone chain of hyperbolic pixel array polygons are s) s
5 439 M
(uccessive convex hulls containing respective tile segment points) s
5 428 M
(636.5 CREW Parallel RAM Version of Kirkpatrick's Planar Point Location - Chapter 5 - Some Para) s
5 417 M
(llel Geometric Algorithms - Section 3 - https://books.google.co.in/books?id=ThBR22HOjMcC&pg=PA) s
5 406 M
(85&lpg=PA85&dq=parallel+planar+point+location&source=bl&ots=jFBpEv60Ab&sig=ACfU3U1fffe1j5o-w6G) s
5 395 M
(WnZHKxAsW0iaU_A&hl=en&sa=X&ved=2ahUKEwik4uHr9cTgAhUDBIgKHRDlAwc4FBDoATAFegQICRAB#v=onepage&q=p) s
5 384 M
(arallel%20planar%20point%20location&f=false - Kirkpatrick's decomposition triangulates a Plana) s
5 373 M
(r Straight Line Graph \(plain simple line graph or PSLG\) e.g PSLG of Hyperbolic arc pixel array) s
5 362 M
( polygons previously described for factorization. CREW PRAM Version of this triangulation algo) s
5 351 M
(rithm is O\(\(logN\)^k\) parallel time and O\(logN\) sequential query time but requires O\(N\) process) s
5 340 M
(ors.) s
5 329 M
(636.6 Parallel Planar Point Location by Parallel Construction of Subdivision Hierarchies - [N.) s
5 318 M
( DADOUN AND D. G. KIRKPATRICK] -https://ac.els-cdn.com/0022000089900421/1-s2.0-002200008990042) s
5 307 M
(1-main.pdf?_tid=c9b3fe06-f5de-4038-a511-1e201f91edc8&acdnat=1550480942_c4eea646a5bb64a5444edc1) s
5 296 M
(95ca6743d - "...It is worth noting that Atallah and Goodrich [AG] use the parallel plane sweep) s
5 285 M
( technique to perform planar point location with O\(log n log log n\) parallel preprocessing, O\() s
5 274 M
(n log n\) space and O\(log n\) sequential query time. The subdivision hierarchy technique uses 0\() s
5 263 M
(\(log n\)^2\) parallel preprocessing \(O\(log n log* n\) for convex subdivisions\), O\(n\) space and O\() s
5 252 M
(log n\) sequential query time. ...") s
5 241 M
(636.7 Parallel Planar Point Location by Parallel Construction of Plane Sweep Tree - [Atallah a) s
5 230 M
(nd Goodrich] - https://docs.lib.purdue.edu/cgi/viewcontent.cgi?referer=https://www.google.com/) s
5 219 M
(&httpsredir=1&article=1481&context=cstech - Theorem 3.12 and Table 1 - Summary of Results in t) s
5 208 M
(he end - "...Given a planar subdivision S consisting of n edges, we can construct in parallel) s
5 197 M
(a data structure which, once constructed, enables one processor to determine for any query poi) s
5 186 M
(nt) s
5 175 M
(p the face in S containing p in O\(logn\) time. The construction takes O\(lognloglogn\) time and) s
5 164 M
(O\(nlogn\) space using O\(n\) processors on a CREW PRAM...." - It has to be observed that PSLG fro) s
5 153 M
(m Hyperbolic arc pixel array polygonal rectification is the simplest form of its kind containi) s
5 142 M
(ng O\(N\) rectangular faces and <= 4*N edges, 4 per rectangle.) s
5 131 M
(636.8 List of Problems in NC and Drawbacks of NC Theory - http://pages.cs.wisc.edu/~tvrdik/3/h) s
5 120 M
(tml/Section3.html - Parallel sorting and most of Computational Geometric Problems are in NC - ) s
5 109 M
("...The class NC may include some algorithms which are not efficiently parallelizable. The mos) s
5 98 M
(t infamous example is parallel binary search...NC theory assumes situations where a huge machi) s
5 87 M
(ne \(polynomial number of processors, e.g., millions\) solves very quickly \(polylogarithmic time) s
5 76 M
(, e.g., seconds\) moderately sized problems \(e.g., hundred of thousands input items\). In practi) s
5 65 M
(ce, however, moderately sized machines \(hundreds, at most thousands of processors\) are used to) s
5 54 M
( solve large problems \(e.g., millions of input items\). So that the number of processors tends ) s
5 43 M
(to be subpolynomial, even sublinear...." - This practical limitation of NC applies to computat) s
5 32 M
(ional geometric factorization by planar point location especially when huge integers e.g semip) s
5 21 M
(rimes of the order of 1024 bits or more in public key infrastructure have to be factorized. Th) s
5 10 M
(is requires huge number of processors \(PRAMs\) but yet theoretically highly parallelly feasible) s
_R
S
%%Page: (422) 422
%%BeginPageSetup
_S
18 36 translate
/pagenum 422 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (422) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(. Precision ray shooting queries optimization like tile-summation ray shooting sieves out lot ) s
5 681 M
(of factorless segments of hyperbolic arc bow finding approximate factors which are in proximit) s
5 670 M
(y to exact factors and with high probability in same polygon/segment facilitating binary searc) s
5 659 M
(h of arithmetic progression.If a ray shooting query followed by binary search fails to find ex) s
5 648 M
(act factor, angle of the ray can be altered in either direction and shot again covering unswep) s
5 637 M
(t areas of the plane. Ray shooting partitions the hyperbolic arc into O\(N/loglogN\) segments fo) s
5 626 M
(r O\(loglogN\) prime factor ray queries.) s
5 615 M
(636.9 NC1 and L - Theorem 3.5 - https://cse.buffalo.edu/~regan/papers/pdf/ALRch27.pdf - [Eric ) s
5 604 M
(Allender,Rutgers University,Michael C. Loui,University of Illinois at Urbana-Champaign,Kenneth) s
5 593 M
( W. Regan,State University of New York at Buffalo] - O\(logN\) Parallel Planar Point Location ti) s
5 582 M
(me implies complexity class NC^1 which is contained in deterministic logspace class L. This is) s
5 571 M
( quite counterintuitive because despite prohibitively high number of PRAMs even if simulated b) s
5 560 M
(y BSP, space required for computational geometric factorization is logarithmic.) s
5 549 M
(636.10 Generalized Planar Point Location - [Chazelle-Sharir] - Collins Decidability Theorem \(r) s
5 538 M
(efinement of Tarski Decidability\) based point location on arbitrary set of polynomials defined) s
5 527 M
( over euclidean plane - https://www.sciencedirect.com/science/article/pii/S074771710880065X/pd) s
5 516 M
(f?md5=1abc953f7893218fefbad2e9bb83d68c&pid=1-s2.0-S074771710880065X-main.pdf&_valck=1 - Factor) s
5 505 M
(ization is limited to locating integer points on hyperbola xy-N=0) s
5 494 M
(636.11 Union of Arithmetic Progressions - [Newman] - http://inis.jinr.ru/sl/M_Mathematics/MT_N) s
5 483 M
(umber%20theory/Newman%20D.J.%20Analytic%20Number%20Theory%20\(GTM%20177,%20Springer,1998\)\(ISBN%) s
5 472 M
(200387983082\)\(81s\)_MT_.pdf - Page 14 - Every tile segment in rectified hyperbola \(which is a m) s
5 461 M
(onotone subdivision formed by juxtaposed line segments decreasing or non-increasing in one coo) s
5 450 M
(rdinate and thus is a plain simple straightline graph\) is an arithmetic progression. By analyt) s
5 439 M
(ic number theory every tile segment arithmetic progression an + b can be written as a generati) s
5 428 M
(ng function z^b/\(1 - z^a\). It is natural to ask if union of tile segment arithmetic progressio) s
5 417 M
(ns can be written as single generating function. Answer is no by contradiction. Generating fun) s
5 406 M
(ctions based arithmetic progression exact cover of set of natural numbers is a special case of) s
5 395 M
( complement diophantines and complementary equations - "...Thus the dissection into evens and ) s
5 384 M
(odds corresponds to the identity \\004\342\\210\\236 n\\0050 z^n = \\004\342\\210\\236 n\\0050 z^2n + \\004\342) s
5 373 M
(\\210\\236 n\\0050 z*2n+1, and the dissection into 2n, 4n + 1, 4n + 3 corresponds to \\004\342\\210) s
5 362 M
(\\236 n\\0050 z^n = \342\\210\\236 n\\0050 z^2n + \\004\342\\210\\236  n\\0050 z*4n+1 +\\004\342\\210\\236 n\\0050 z) s
5 351 M
(*4n+3, ....") s
5 340 M
(636.12 Van Heuraets Rectification of Curves - https://www.maa.org/press/periodicals/convergenc) s
5 329 M
(e/mathematical-treasures-van-heuraets-rectification-of-curves) s
5 318 M
(636.13 Numerical Rectification of Curves - [B. P. Acharya, M. Acharya and S. B. Sahoo - ITER,S) s
5 307 M
(\342\\200\\231O\342\\200\\231A University, Bhubaneswar, India] - http://www.m-hikari.com/ams/ams-2014/am) s
5 296 M
(s-17-20-2014/acharyaAMS17-20-2014.pdf) s
5 285 M
(636.14 Exact Rasterization of Algebraic Curves - [Stussak] - https://opendata.uni-halle.de/bit) s
5 274 M
(stream/1981185920/7892/1/Dissertation%20-%20Christian%20Stussak%20-%20On%20reliable%20visualiz) s
5 263 M
(ation%20algorithms%20for%20real%20algebraic%20curves%20and%20surfaces.pdf - Figure 3.2 - Corre) s
5 252 M
(ct and wrong rasterizations of the curve y^2 + x^2*\(x + 1\) = 0 - Rasterization of an algebraic) s
5 241 M
( curve in Computer Graphics is the Computational Geometry equivalent of rectification - curve ) s
5 230 M
(is approximated by pixels. Bresenham Line Rasterization is limited to approximating straightli) s
5 219 M
(nes by pixels - "...we solve the task of rasterizing a real algebraic plane curve VR\(F\) define) s
5 208 M
(d by a polynomial F \342\\210\\210 Z[x, y]. Although many algorithms exist for rendering such a cur) s
5 197 M
(ve, only a few of them guarantee the correctness of the output. The term correctness is often ) s
5 186 M
(interpreted as topological correctness, i.e. the graph induced by the rendering is isotopic to) s
5 175 M
( VR\(F\)...." - "...Real algebraic space curves are visualized by determining a line strip appro) s
5 164 M
(ximation to their segments using a projection and lifting approach..." - Computational Geometr) s
5 153 M
(ic Factorization rasterizes hyperbola by axis-parallel line segments which are juxtaposed pixe) s
5 142 M
(l-array polygons. Finding a polygon containing factor point can be done in polylog time and se) s
5 131 M
(arching the polygon is logarithmic because of \(arithmetic progression\) implicit sortedness of ) s
5 120 M
(pixels.) s
5 109 M
(636.15 Graphics Computation in PRAMs - Parallel Rasterization - XMT-GPU - http://users.umiacs.) s
5 98 M
(umd.edu/~vishkin/XMT/ICPP08version.pdf - [Thomas DuBois University of Maryland College Park, M) s
5 87 M
(D tdubois@cs.umd.edu,Bryant Lee Carnegie Mellon University Pittsburgh, PA bryantl@cs.umd.edu,Y) s
5 76 M
(i Wang Virginia Polytechnic Institute Blacksburg, VA samywang@vt.edu, Marc Olano University of) s
5 65 M
( Maryland, Baltimore County Baltimore, MD olano@umbc.edu,Uzi Vishkin University of Maryland Co) s
5 54 M
(llege Park, MD vishkin@umiacs.umd.edu]  - Draft sections on Computational Geometric Factorizat) s
5 43 M
(ion in this design document assume that total number of O\(N\) hyperbolic arc tile segments of e) s
5 32 M
(ndpoints \(x, N/x, x+1, N/x\) are axis-parallel rectified by differential calculus identity delt) s
5 21 M
(a=N/[x\(x+1\)] which is length of each segment and N/\(logN\)^k processors are work-optimally allo) s
5 10 M
(cated \(logN\)^k segments each \(from section 477 on Local Tile Search\). Each of N/\(logN\)^k PRAM ) s
_R
S
%%Page: (423) 423
%%BeginPageSetup
_S
18 36 translate
/pagenum 423 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (423) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(processors binary searches \(logN\)^k segments allocated to it in \(logN\)^k * logN = \(logN\)^\(k+1\)) s
5 681 M
( parallel time. Instead, Rasterizing hyperbolic arc by Parallel RAMs approximates hyperbola on) s
5 670 M
( pixel grid which may not be axis-parallel.) s
5 659 M
(636.16 Rasterization of Conic Sections - Efficient Integer algorithms for drawing Ellipse,Hype) s
5 648 M
(rbola,Parabola - refinement of Bresenham,Pitteway,Kappel conic sections and line drawing algor) s
5 637 M
(ithms - https://alexanderagathos.com/publications/CAG98.pdf - Section 4.1) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(----------) s
5 593 M
(637. \(FEATURE\) NeuronRain Usecases - Analytics Piloted Drone Online Shopping Delivery - 25 Feb) s
5 582 M
(ruary 2019) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(----------) s
5 549 M
(1.This commit creates a new NeuronRainApps/ directory in python-src/ for illustrating usecases) s
5 538 M
( defined in asfer-docs/NeuronRainUsecases.txt) s
5 527 M
(2.An unmanned aerial vehicle usecase is implemented by a pseudocode in NeuronRainApps/Drones/O) s
5 516 M
(nlineShoppingDelivery.py) s
5 505 M
(3.Following static mission plan example from DronecodeSDK has been changed to OnlineShoppingDe) s
5 494 M
(livery.py:) s
5 483 M
(        3.1 Example Drone Mission - https://github.com/Dronecode/DronecodeSDK-Python/blob/mast) s
5 472 M
(er/examples/mission.py) s
5 461 M
(        3.2 Drone MissionItem Proto - https://github.com/Dronecode/DronecodeSDK-Proto/blob/a54) s
5 450 M
(b353d73ff8d6e36c716b5278990e0f8cb770c/protos/mission/mission.proto) s
5 439 M
(4.Dynamic Mission Plan: Autopilots the UAV drone based on GIS analytics navigation variables ) s
5 428 M
(- e.g. longitude, latitude, altitude, speed, camera action etc., -) s
5 417 M
(read by Streaming Abstract Generator socket streaming and appends MissionItems to) s
5 406 M
(flight plan dynamically restricted by ordinates convex hull. Convex Hull for a terrain image i) s
5 395 M
(s obtained from ImageNet/ImageGraph_Keras_Theano.py. When drone is within convex hull airspace) s
5 384 M
(, its altitude is set to 0 \(or minimal value\) and landed) s
5 373 M
(5.Dynamic flight trajectory remote-controlled by analytics are applicable to online shopping d) s
5 362 M
(eliveries  when multiple courier items have to be delivered en route which is NP-Hard Hamilton) s
5 351 M
(ian problem - Finding most optimal shortest tour from origin, through intermediate delivery po) s
5 340 M
(int vertices and back to origin) s
5 329 M
(6.This is not compileable, executable code but only a pseudocode and has not been tested on a ) s
5 318 M
(drone because of lack of it and aviation licensing requirements) s
5 296 M
(References:) s
5 285 M
(----------) s
5 274 M
(637.1 GIS and Drones - https://www.itu.int/en/ITU-D/Regional-Presence/AsiaPacific/SiteAssets/P) s
5 263 M
(ages/Events/2018/Drones-in-agriculture/asptraining/A_Session1_Intro-to-Drones-RS-GIS.pdf - GIS) s
5 252 M
( Image Classification, Rasters and Layers) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(----------) s
5 208 M
(638.\(FEATURE\) Software Analytics - Scheduler Analytics - /etc/sysctl.conf kernel.sched_* optio) s
5 197 M
(nal) s
5 186 M
(clause - 25 February 2019) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(----------) s
5 153 M
(1.DeepLearning_SchedulerAnalytics.py has been changed to include new clause for writing sysctl) s
5 142 M
(.conf kernel.sched_* variables instead of scheduler classes within learnt_scheduler_class\(\) ba) s
5 131 M
(sed on output layer of BackPropagation Neural Network\(BPNN\)) s
5 120 M
(2.These variables are documented in:) s
5 109 M
(        2.1 https://www.kernel.org/doc/Documentation/scheduler/) s
5 98 M
(        2.2 https://doc.opensuse.org/documentation/leap/tuning/html/book.sle.tuning/cha.tuning) s
5 87 M
(.taskscheduler.html) s
5 76 M
(3.Different values of kernel.sched_* are returned based on numpy mean of output layer of BPNN.) s
5 65 M
( For example:) s
5 54 M
(["kernel.sched_latency_ns=9000000",) s
5 43 M
( "kernel.sched_migration_cost_ns=100000",) s
5 32 M
( "kernel.sched_wakeup_granularity_ns=2000000",) s
5 21 M
( "kernel.rr_timeslice_ms=10",) s
5 10 M
( "sched_rt_runtime_us=990000",) s
_R
S
%%Page: (424) 424
%%BeginPageSetup
_S
18 36 translate
/pagenum 424 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (424) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( "sched_nr_migrate=12",) s
5 681 M
( "sched_time_avg_ms=100"]) s
5 670 M
(which increase CPU affinity of a process, its timeslice quantum and reduce cost of CPU loadbal) s
5 659 M
(ancing and migration if it is CPU-intensive.) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(---------) s
5 615 M
(639.\(FEATURE\) Software Analytics - Scheduler Analytics - /proc/sched_debug support - 27 Februa) s
5 604 M
(ry 2019) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(---------) s
5 571 M
(1.Missing kernel prefix for some of the /etc/sysctl.conf variables have been included in retur) s
5 560 M
(n array.) s
5 549 M
(2./proc/sched_debug support has been included by defining a new function to read /proc/sched_d) s
5 538 M
(ebug and) s
5 527 M
(print the red-black tree of the Complete Fair Scheduler \(CFS\) [https://elixir.bootlin.com/linu) s
5 516 M
(x/v3.2/source/kernel/sched_fair.c] runqueue for user defined iterations in a loop - reads the ) s
5 505 M
(/proc/sched_debug periodically, reverses the list of lines to print the tail.) s
5 494 M
(3./proc/sched_debug is a convenient alternative to BCC tools runqlat) s
5 483 M
(4.Kernel CFS chooses the root of the red-black tree which has least virtual runtime to schedul) s
5 472 M
(e it to run on CPU thereby prioritizing and fairly treating starved processes.) s
5 461 M
(5.Tree Key field is the virtual runtime of the process id - Example below prints runqueue at a) s
5 450 M
(ny instant for a CPU:) s
5 428 M
(runnable tasks:) s
5 417 M
(            task   PID         tree-key  switches  prio     exec-runtime         sum-exec     ) s
5 406 M
(   sum-sleep) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(------------) s
5 373 M
(        metacity  2709   2070924.605059   1155243   120   2070924.605059    104482.007672  137) s
5 362 M
(23394.606366 /autogroup-149) s
5 351 M
(  unity-2d-panel  2724   2070927.500112    232355   120   2070927.500112     58204.926440  142) s
5 340 M
(29127.111319 /autogroup-149) s
5 329 M
(  gnome-terminal  3049   2070927.622210     59498   120   2070927.622210     22064.526687  142) s
5 318 M
(85212.740904 /autogroup-149) s
5 307 M
(R            cat  7834    612871.102038         1   120    612871.102038         2.269097     ) s
5 296 M
(    0.000000 /autogroup-153) s
5 274 M
(6.Logs for this have been committed to testlogs/DeepLearning_SchedulerAnalytics.log.27February) s
5 263 M
(2019) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(----------) s
5 219 M
(640.\(FEATUE\) Software Analytics - Streaming Analytics + Scheduler Analytics - /proc/sched_debu) s
5 208 M
(g -) s
5 197 M
(28 February 2019) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(----------) s
5 164 M
(1.DeepLearning_SchedulerAnalytics.py - sched_debug_runqueue\(\) has been changed to return a dic) s
5 153 M
(tionary) s
5 142 M
(of process runqueue and loop has been removed) s
5 131 M
(2.Streaming Analytics support has been provided for Operating System performance statistics \(e) s
5 120 M
(.g runqueue\) by adding new data_storage "OperatingSystem" and data_source "SchedulerRunQueue" ) s
5 109 M
(to Streaming_AbstractGenerator.py) s
5 98 M
(3.New clause for previous Scheduler Analytics streaming has been added in __iter__\(\) which inv) s
5 87 M
(okes) s
5 76 M
(sched_debug_runqueue\(\) in a loop and yields the scheduler runqueue dictionaries.) s
5 65 M
(4.This integrates Streaming and Software Analytics seamlessly and any Streaming or other machi) s
5 54 M
(ne learning algorithm can process Operating System Stats Dictionary Stream like a bigdata sour) s
5 43 M
(ce. ) s
5 32 M
(5.DeepLearning_SchedulerAnalytics.py imports this Streaming Abstract Generator by "OperatingSy) s
5 21 M
(stem" and "SchedulerRunQueue" parameters and reads the scheduler stats as input stream.) s
5 10 M
(6.In future, any operating system data source other than scheduler runqueue can be plugged int) s
_R
S
%%Page: (425) 425
%%BeginPageSetup
_S
18 36 translate
/pagenum 425 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (425) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(o Streaming Abstract Generator iterable and fulfils the foremost requirement for real time sof) s
5 681 M
(tware streaming analytics.) s
5 659 M
(References:) s
5 648 M
(-----------) s
5 637 M
(640.1 Load Averages - /proc/loadavg versus /proc/sched_debug - http://www.brendangregg.com/blo) s
5 626 M
(g/2017-08-08/linux-load-averages.html - Linux load averages include uninterrutible IO tasks to) s
5 615 M
(o apart from CPU load.) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(----------) s
5 571 M
(641.\(THEORY\) Word Diophantine Equations, Intrinsic Merit defined by Word Equations - 4 March 2) s
5 560 M
(019 -) s
5 549 M
(related to 635 and all sections on Merit and Complement Diophantines) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(----------) s
5 516 M
(Throughout this draft intrinsic merit of text has been analyzed by results from algorithmic gr) s
5 505 M
(aph theory and dense subgraph complexity measures. Renowned Word Problem in computability enco) s
5 494 M
(des every word from an alphabet into an equation. In the context of World Wide Web, Concatenat) s
5 483 M
(ions of words form a text. This leads to concatenation representation of word equations of tex) s
5 472 M
(t by Diophantines. This kind of word equation representation is not just limited to text but t) s
5 461 M
(o other genre of merits - audio/music, video, social profiles of people encoded as words over ) s
5 450 M
(binary alphabet - as well. Thus Diophantine representation unifies all 4 classes of merit - te) s
5 439 M
(xt, audio/music, video, people - into one thereby facilitating number theoretic analysis of me) s
5 428 M
(rit drastically different from graph theoretic perspective earlier:) s
5 417 M
(        \(*\) Text - Text Graphs -> Text Word Equation Diophantines) s
5 406 M
(        \(*\) Video - EventNet Tensor Products -> Binary encoded Video Word Equation Diophantine) s
5 395 M
(s) s
5 384 M
(        \(*\) Audio/Music - DFA Learning -> Binary encoded Audio/Music Word Equation Diophantine) s
5 373 M
(s) s
5 362 M
(        \(*\) People - Mistake Bound Experiential Learning Merit and Social Profile Analytics ->) s
5 351 M
( Binary encoded social profile Word Equation Diophantines) s
5 329 M
(Decidability of Hilbert's Tenth Problem is still open for solutions to Word Diophantine Equati) s
5 318 M
(ons. Diophantine Word Equations can enforce arbitrary number of conditions on the solutions e.) s
5 307 M
(g length of words.Solutions to a Word Diophantine Equation - text, audio/music, video, people ) s
5 296 M
(- are kind of unsupervised classifiers which cluster similar texts, audio/music, video and peo) s
5 285 M
(ple. For example, Complement Word Equation Diophantines bifurcate the set of texts, audio/musi) s
5 274 M
(c, video and people.) s
5 252 M
(References:) s
5 241 M
(------------) s
5 230 M
(641.1 Word Equations, Fibonacci Numbers, and Hilbert\342\\200\\231s Tenth Problem - [Yuri Matiyasev) s
5 219 M
(ich] - Steklov Institute of Mathematics at Saint-Petersburg, 27 Fontanka, Saint-Petersburg, 19) s
5 208 M
(1023, Russia - URL: http://logic.pdmi.ras.ru/~yumat - https://logic.pdmi.ras.ru/~yumat/talks/t) s
5 197 M
(urku2006/FibonacciWordsAbstract.pdf.gz - "...Every word X = \317\\207n \317\\207n\342\\210\\2221 . . . \317) s
5 186 M
(\\2071 in the alphabet B can be viewed as the number x = \317\\207n un + \317\\207n\342\\210\\2221 un\342\\210) s
5 175 M
(\\2221 + \302\267 \302\267 \302\267 + \317\\2071 u1 \(1\) written in positional system with weights of digits being the) s
5 164 M
( Fibonacci numbers u1 = 1, u2 = 1, u3 = 2, u4 = 3, u5 = 5, . . . \(rather than traditional 1, 2) s
5 153 M
(,) s
5 142 M
(4, 8, 16, . . . \)....") s
5 131 M
(641.2 Collected works of Richard J.Buchi - https://books.google.co.in/books?id=9BfvAAAAMAAJ&q=) s
5 120 M
(inauthor:%22J.+Richard+B%C3%BCchi%22&dq=inauthor:%22J.+Richard+B%C3%BCchi%22&hl=en&sa=X&ved=0a) s
5 109 M
(hUKEwio19KMhejgAhXEfXAKHW6tB7oQ6AEIKjAA - Every existential formula in concatenation is Diopha) s
5 98 M
(ntine) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(---------) s
5 54 M
(642. \(FEATURE\) Merit of Audio/Music - Music Synthesizer from Random samples and State Machine ) s
5 43 M
(- 5 March 2019) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(---------) s
5 10 M
(1.New function notes_to_audio\(\) has been implemented in music_pattern_mining/AudioToBitMatrix.) s
_R
S
%%Page: (426) 426
%%BeginPageSetup
_S
18 36 translate
/pagenum 426 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (426) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(py) s
5 681 M
(2.It creates a .wav file from random Scipy array or traverses a finite state machine to create) s
5 670 M
( a stream of notes in CDEFGABC notation which are translated to integer array of frequencies i) s
5 659 M
(n hertz) s
5 648 M
(3.Scipy.io.wavefile.write\(\) is invoked to write out this ndarray to a .wav file of sampling ra) s
5 637 M
(te 44100) s
5 626 M
(4.Finite state machine has been implemented simply in a dictionary and supports quasi-non-dete) s
5 615 M
(rminism \(array of possible previous states\)) s
5 604 M
(5.Two .wav files automaton_synthesized_music.wav and notes_synthesized_music.wav are written f) s
5 593 M
(or the two clauses: automaton or notes array) s
5 582 M
(6.logs for synthesizer have been committed to testlogs/AudioToBitMatrix.log.MusicSynthesizer.5) s
5 571 M
(March2019) s
5 560 M
(7.It is pertinent to mention here that Stanford Music Information Retrieval at https://musicin) s
5 549 M
(formationretrieval.com/genre_recognition.html does a statistical genre recognition of music as) s
5 538 M
( opposed to automata theoretic analysis in NeuronRain) s
5 527 M
(8.State machine has been hardcoded presently which have to be read from file and literal_eval\() s
5 516 M
(\)-ed.) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(----------) s
5 472 M
(643. \(FEATURE\) Merit of Audio/Music - Music Synthesizer - Music from mathematical functions - ) s
5 461 M
(6 March 2019) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(----------) s
5 428 M
(1.New clause has been added to notes_to_audio\(\) for synthesizing music from values of any math) s
5 417 M
(ematical function ) s
5 406 M
(2.Function expression string is eval\(\)-ed in a lambda function and applied to a list of range ) s
5 395 M
(values of variable x by map\(\) and a wave file function_synthesized_music.wav is written to.) s
5 384 M
(3.Error in prevstates has been corrected by prevprevstates and resetting prevstates for each s) s
5 373 M
(tate transition for an alphabet.) s
5 362 M
(4.Logs for this have been committed to testlogs/AudioToBitMatrix.log.MusicSynthesizer.6March20) s
5 351 M
(19) s
5 340 M
(5.The wave files do not play any human palatable music and are representative only.) s
5 329 M
(6.Infact learning the right DFA \(or in general a mathematical function\) for language of music ) s
5 318 M
(is the exact opposite of the previous and is measure of merit.) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(---------) s
5 274 M
(644. \(FEATURE\) Intrinsic Merit of Audio/Music - Mel Frequency Cepstral Coefficients - 11 March) s
5 263 M
( 2019) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(---------) s
5 230 M
(1.New function for Mel Frequency Cepstral Coefficients \(MFCCs\) of a music audio clip \(invokes ) s
5 219 M
(librosa\) has been added in this commit. ) s
5 208 M
(2.MFCCs are kind of spectra of spectra of an audio waveform and have been widely used for spee) s
5 197 M
(ch recognition and music genre identification.) s
5 186 M
(3.logs for example MFCCs of a music file are committed to testlogs/AudioToBitMatrix.log.MFCC.1) s
5 175 M
(1March2019) s
5 153 M
(References:) s
5 142 M
(-----------) s
5 131 M
(644.1 Stanford MIR - https://musicinformationretrieval.com/mfcc.html) s
5 120 M
(644.2 MFCCs for Music Modelling - http://musicweb.ucsd.edu/~sdubnov/CATbox/Reader/logan00mel.p) s
5 109 M
(df) s
5 98 M
(644.3 Music Emotion Recognition \(MER\): The combined evidence of MFCC and residual phase - [NJ ) s
5 87 M
(Nalini , S Palanivel] - Dept of Computer Science and Engineering, Annamalai University, Tamil ) s
5 76 M
(Nadu 608002, India - https://www.sciencedirect.com/science/article/pii/S1110866515000419) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(----------) s
5 32 M
(645. \(THEORY\) Comparing Partitions - Related to 620 and all sections on Majority Voting, Theor) s
5 21 M
(etical EVMs, Separate Chaining Hashtable/LSH Set Partitions, Integer Partitions, Complementary) s
5 10 M
( Sets and Diophantines, Streaming Histogram/Dictionary Analytics, People Analytics, Software A) s
_R
S
%%Page: (427) 427
%%BeginPageSetup
_S
18 36 translate
/pagenum 427 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (427) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(nalytics, Business Analytics - 15 March 2019) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(----------) s
5 659 M
(Previous sections deeply delve into the ubiquitous isomorphism between integer/set partitions ) s
5 648 M
(and set partitions, particularly those induced by hash table separate chaining buckets. A Theo) s
5 637 M
(retical EVM has been formulated having separate chaining partition as basis which is an encryp) s
5 626 M
(ted set partition of electorate into candidate buckets. Drawing analytic inferences from strea) s
5 615 M
(m of set partitions has been hitherto a far less researched bigdata topic and applies to whole) s
5 604 M
( gamut of theory and analytics - For example:) s
5 593 M
(        \(*\) Business Analytics - Customer base intelligence is often represented as dynamic st) s
5 582 M
(ream of histogram set partitions or probability distributions of product influences. Hashtable) s
5 571 M
( separate chaining can be picturised as histogram of buckets of hashed items) s
5 560 M
(        \(*\) People Analytics - Stream of voting patterns in Theoretical EVMs are dynamically c) s
5 549 M
(hanging set partitions of electorate - vote shares in Psephology) s
5 538 M
(        \(*\) Scheduler Queuing Analytics in Operating Systems - an example hashtable based time) s
5 527 M
(out is described in https://github.com/shrinivaasanka/Grafit/blob/master/course_material/Neuro) s
5 516 M
(nRain/AdvancedComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt ) s
5 505 M
(- finding patterns in stream of scheduler timeout hashtable queues) s
5 494 M
(        \(*\) Music Spectrograms are streams of Histograms) s
5 483 M
(        \(*\) Theoretically set partitions are complementary sets or exact cover of a universal ) s
5 472 M
(set.) s
5 450 M
(Comparing any two set partitions thus far has few standard measures \(rooted in comparing two c) s
5 439 M
(luster partitions created by supervised or unsupervised classifiers\) like Rand Index \(RI\), Adj) s
5 428 M
(usted Rand Index etc., \(ARI\) which compute distance between partitions as ratio of agreements ) s
5 417 M
(to disagreements by measuring overlaps. For a stream of set partitions \(which could be any of ) s
5 406 M
(the above\), Rand Index or Adjusted Rand Index between two consecutive partitions in the stream) s
5 395 M
( themselves create another stream of scalar indices which are easier to interpret. In people a) s
5 384 M
(nalytics or business analytics example above, highly fluctuating stream of rand indices for vo) s
5 373 M
(ting or customer histogram patterns is a measure of disarray in voting and consumers and point) s
5 362 M
(s to a state of flux whereas a periodic or steady state of stream of rand indices indicates vo) s
5 351 M
(ters and consumers have limited options or are content with status quo. Similarly a chaotic st) s
5 340 M
(ream of rand indices for Scheduler implies a heavily thrashed system.) s
5 318 M
(Theoretically, rand indices define distance metric between two complementary sets and therefor) s
5 307 M
(e diophantines \(e.g beatty functions for size two partition\) defined on them - in other words,) s
5 296 M
( diophantines are embedded in a metric space by rand index distance metric \(similar to Reprodu) s
5 285 M
(cing Kernel Hilbert Space of Functions mentioned in 624.14\).) s
5 263 M
(References:) s
5 252 M
(-----------) s
5 241 M
(645.1 Comparing Partitions - Journal of Classification 2:193-218 \(1985\) - Springer-Verlag New ) s
5 230 M
(York Inc. ) s
5 219 M
(- [Lawrence Hubert ,The University of California, Santa Barbara - Phipps Arabie, University of) s
5 208 M
( Illinois at Champaign] - https://link.springer.com/article/10.1007/BF01908075) s
5 197 M
(645.2 Adjusted Rand Index - https://en.wikipedia.org/wiki/Rand_index#Adjusted_Rand_index) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(-----------) s
5 153 M
(646. \(THEORY\) Complementary Equations, Spectra of Numbers, Complementary Integer Sequences - r) s
5 142 M
(elated to 645 and all sections on Complement Functions, Complementary Sets and Diophantines - ) s
5 131 M
(16 March 2019) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(-----------) s
5 98 M
(Increasing sequences which partition set of natural integers are known as complementary sequen) s
5 87 M
(ces and equations which define both of them are complementary equations. This definition of co) s
5 76 M
(mplementary equations differs technically from complement functions which are diophantine equa) s
5 65 M
(tion representations of either a set or its complement and not both at once. OEIS sequences b\() s
5 54 M
(n\)=A005228 and a\(n\)=A030124 are complementary and both are defined simultaneously by complemen) s
5 43 M
(tary equation b\(n\) = a\(n \342\\210\\222 1\) + b\(n \342\\210\\222 1\)) s
5 21 M
(Spectra of numbers are integer sequences and defined in terms of rounding off set of real mult) s
5 10 M
(iples to nearest integers. For example:) s
_R
S
%%Page: (428) 428
%%BeginPageSetup
_S
18 36 translate
/pagenum 428 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (428) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        If r is a positive real number, spectra of r = S\(r\) = { [r],[2r],[3r],...} and [x] is ) s
5 681 M
(the nearest) s
5 670 M
(integer <= x.) s
5 648 M
(There are some special qualities of Spectra of integers - e.g. Spectra of any three real numbe) s
5 637 M
(rs S[r1],S[r2],S[r3] have some pairs which have infinitely many elements in common and thus ca) s
5 626 M
(nnot be complementary and thus is a prima facie condition for feasibility of complementation.) s
5 604 M
(References:) s
5 593 M
(----------) s
5 582 M
(646.1 Complementary Equations - Example 3 - [Journal of Integer Sequences, Vol. 10 \(2007\),Clar) s
5 571 M
(k Kimberling,Department of Mathematics,University of Evansville,1800 Lincoln Avenue,Evansville) s
5 560 M
(, IN 47722,USA] - https://cs.uwaterloo.ca/journals/JIS/VOL10/Kimberling/kimberling26.pdf) s
5 549 M
(646.2 Complementarity in Philosophy - Dualism - Taichi - Yin-Yang \(Dark-Bright\) - https://en.w) s
5 538 M
(ikipedia.org/wiki/Yin_and_yang) s
5 527 M
(646.3 OEIS - Hofstadter Sequence - https://oeis.org/A005228) s
5 516 M
(646.4 OEIS - Complement of Hofstadter Sequence - https://oeis.org/A030124) s
5 505 M
(646.5 Spectra of Integers - [Graham-Lin-Lin] - https://www.jstor.org/stable/2689998?seq=1#page) s
5 494 M
(_scan_tab_contents) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(-----------) s
5 450 M
(647. \(THEORY and FEATURE\) Bounded Error Factorization \(Approximate Factors\), Ray Shooting Quer) s
5 439 M
(ies, Transition from Quantum to Classical Computation, Derandomization - related to 597,631 - ) s
5 428 M
(21 March 2019, 2 August 2019) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(-----------) s
5 395 M
(In Computational Geometric Factorization algorithms described previously, Approximate Factors ) s
5 384 M
(are found by prime factor estimation involving various number theoretic results which narrow d) s
5 373 M
(own the location of exact factor to large extent. By searching a circular radius vicinity surr) s
5 362 M
(ounding an approximate factor, probability of finding a factor is amplified. Error probability) s
5 351 M
( of not finding an exact factor by ray queries has been derived previously as:) s
5 329 M
(        N/kloglogN - 2q\(logN\)^l) s
5 318 M
(        --------------------------) s
5 307 M
(                N/kloglogN) s
5 285 M
(for integer-to-factorize N and constants k,q and l. This error probability though exponential ) s
5 274 M
(can be brought down to a desired bound by suitable choice of radius and values for constants k) s
5 263 M
(,q and l or by precision tile summation ray shooting. Shor's BQP factoring algorithm can be ma) s
5 252 M
(de a PP classical probabilitstic polytime algorithm by [Adleman-DeMarrais-Huang] theorem - BQP) s
5 241 M
( in PP. By invocation of Ray Shooting Oracles as subroutines in this PP factoring algorithm, P) s
5 230 M
(P is error-bounded to a BPP or BPNC algorithm \(by doing ray shooting queries on parallel RAMs\)) s
5 219 M
(. Derandomization of BPP to P has known Hitting Set Generator algorithms. BPNC derandomization) s
5 208 M
( has some restrictions - only derandomizing BPNC1 is known. But this could be sufficient becau) s
5 197 M
(se classical PRAM computational geometric factorization is achievable by Parallel Planar Point) s
5 186 M
( Location NC1 algorithms of O\(logN\) parallel time. This pipelined derandomization of BQP throu) s
5 175 M
(gh BQP-PP-BPP\(or BPNC\)-P\(or NC\) points to prima facie feasibility of wave function superpositi) s
5 164 M
(on collapse \(a quantum universal gate\) to some classical eigenstate \(PRAM\).) s
5 142 M
(References:) s
5 131 M
(-----------) s
5 120 M
(647.1 Nisan's PRG and Derandomization of BPNC1 - [Periklis Papakonstantinou] - Section 3.4 - ") s
5 109 M
(...We consider logspace machines without a stack, and we parametrize on the number of passes o) s
5 98 M
(ver the random tape. This defines a hierarchy of classes between LogSpace and BP\342\\210\\227LogSp) s
5 87 M
(ace \342\\212\\207 BPNC1 [Nis93b]. Therefore a full derandomization of this hierarchy derandomizes ) s
5 76 M
(BPNC1 ..." - Section 3.4.1 - http://papakonstantinou.org/periklis/pdfs/phd_thesis.pdf - "...Ob) s
5 65 M
(serve that a PRG that fools logspace machines with two-way access over the input, also fools N) s
5 54 M
(C1 circuits. The classical PRG of Nisan [Nis92] is shown to fool logspace machines that make r) s
5 43 M
(\(n\) = 1 pass over the random or pseudorandom input. Using a simple analysis, we show that for ) s
5 32 M
(every k > 0 there exists k' such that for seeds of length log^k'\(n\) the original Nisan\342\\200) s
5 21 M
(\\231s PRG is also secure against logspace machines with r\(n\) = log^k\(n\) passes...") s
5 10 M
(647.2 Simplified Derandomization of BPP by Hitting Set Generator - [Goldreich-Vadhan-Wigderson) s
_R
S
%%Page: (429) 429
%%BeginPageSetup
_S
18 36 translate
/pagenum 429 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (429) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(] - http://www.wisdom.weizmann.ac.il/~oded/COL/gvw.pdf) s
5 681 M
(647.3 Quantum Factorization and Decoherence - https://arxiv.org/pdf/quant-ph/9503007.pdf - [I.) s
5 670 M
( L. Chuang, R. Laflamme, P. Shor and W. H.Zurek] - "...As a quantum system evolves, informatio) s
5 659 M
(n about its states leaks out into the environment, causing them to loose their purity, and, co) s
5 648 M
(nsequently, their ability to interfere....The decoherence process has been proposed as a mecha) s
5 637 M
(nism for enforcing classical behavior) s
5 626 M
(in the macroscopic realm. Decoherence results in environment-induced superselection[5, 6, 7] w) s
5 615 M
(hich destroys superpositions between the states of preferred pointer basis[6]. Classical compu) s
5 604 M
(ters are already decohered \342\\200\\223 ") s
5 593 M
(647.4 Proof of Ambainis-Aaronson Conjecture - "Quantum Speedups need structure" - "...Let f : ) s
5 582 M
({\342\\210\\2221, 1}^n \342\\206\\222 [\342\\210\\2221, 1] be a multilinear polynomial of degree d. Then ther) s
5 571 M
(e exists a variable xi whose influence on f is at least poly\(Var\(f\)/d\)...." - [Nathan Keller\342) s
5 560 M
(\\210\\227 and Ohad Klein\342\\200\240] - https://arxiv.org/pdf/1911.03748.pdf - "... Let Q be a quantu) s
5 549 M
(m algorithm that makes T queries to a Boolean input and let \307\253, \316\264 > 0. Then there exists a de) s
5 538 M
(terministic classical algorithm that makes poly\(T, 1/\307\253, 1/\316\264\) queries to the input and that a) s
5 527 M
(pproximates Q\342\\200\\231s acceptance probability to within an additive error \307\253 on a 1 \342\\210\\222) s
5 516 M
( \316\264 fraction of inputs. In other words, any quantum algorithm can be simulated on most inputs ) s
5 505 M
(by a classical algorithm which is only polynomially slower, in terms of query complexity...." ) s
5 494 M
(- proof of this conjecture lends credence to the pipelined decoherence of BQP factorization to) s
5 483 M
( BPP or BPNC mentioned earlier, in terms of query complexity - BQP-PP-BPP/BPNC - effectively i) s
5 472 M
(mplying decohered reduction from quantum error to classical error while classical error still ) s
5 461 M
(depends on success of derandomization from BPP or BPNC to P or NC. ) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(---------) s
5 417 M
(648. \(THEORY\) Voting in Knot Theory, Gordion Knot, One-Way Functions, Hardness Amplification L) s
5 406 M
(emma for Majority + VoterSAT Boolean Function Composition, Separate Chaining or LSH Partition ) s
5 395 M
(based Theoretical EVMs - related to 318, 517, 620 - 21 MArch 2019) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(---------) s
5 362 M
(Knot theoretic formulation of One-Way-Functions \(as a Gordion Knot\) has been mentioned in http) s
5 351 M
(s://github.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComputerSc) s
5 340 M
(ienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt. Previous sections descr) s
5 329 M
(ibe a hard-to-invert MajorityInverse\(\) function which extracts the identity of the voters who ) s
5 318 M
(voted for or against a candidate \(for simplicity binary 0 or 1\). Majority function can be form) s
5 307 M
(ulated as a knot polynomial by following example procedure:) s
5 296 M
(        \(*\) Electorate are points on a straightline string ) s
5 285 M
(        \(*\) Each voter has a decision function or VoterSAT of arbitrary complexity class) s
5 274 M
(        \(*\) Knot on this string of voters maps each voter to a point on locus of a knot polyno) s
5 263 M
(mial in) s
5 252 M
(3 dimensional space. This mapping obfuscates the identity of the voter and vouchsafes secrecy.) s
5 241 M
(        \(*\) Knot polynomial is defined on 3 variable axes - Voters, Candidates, VoterSATs) s
5 230 M
(        \(*\) Each point on the knot is a tuple \(obfuscated_voter_id, obfuscated_VoterSAT, candi) s
5 219 M
(date_id\) denoting an anonymous vote in ballot) s
5 208 M
(        \(*\) MajorityInverse\(\) for this Knot ballot is defined as:) s
5 197 M
(                MajorityInverse\(obfuscated_voter_id, obfuscated_VoterSAT, candidate_id\) = vote) s
5 186 M
(r_id) s
5 175 M
(        \(*\) Previous example in 3-dimensions is only for illustrative purposes \(Obfuscated Vot) s
5 164 M
(erSAT in the vote tuple may not be necessary\) and knot ballot polynomial can be embedded in ar) s
5 153 M
(bitrary topological space other than R^3.) s
5 142 M
(        \(*\) Hardness of previous knot version of MajorityInverse\(\) depends on difficulty in un) s
5 131 M
(ravelling the knot \(to retrieve voter who voted for a candidate\) so that secret ballot is not ) s
5 120 M
(compromised.) s
5 109 M
(        \(*\) Thus a Gordion Knot Ballot is hard-to-invert MajorityInverse\(\) function.) s
5 98 M
(        \(*\) Number of votes for a candidate is determined by the number of points on the knot ) s
5 87 M
(polynomial intersecting the 2-dimensional plane for a candidate axis point.) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(----------) s
5 43 M
(649. \(THEORY\) Planar Graph Theoretic Circle Packing, Space Filling/Grid Filling, CSP/Linear Pr) s
5 32 M
(ogramming, Tile Cover and LSH/Separate Chaining Partitions - related to 135 - 25 March 2019, 1) s
5 21 M
( April 2019) s
5 10 M
(----------------------------------------------------------------------------------------------) s
_R
S
%%Page: (430) 430
%%BeginPageSetup
_S
18 36 translate
/pagenum 430 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (430) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------) s
5 681 M
(Previous algorithms for packing/filling space by circular solids/fluids were based on solving ) s
5 670 M
(Linear Program and Cellular Automata by a Parallel Pseudorandom Generator. In this section a r) s
5 659 M
(andom graph theoretic circle packing algorithm is described:) s
5 637 M
(Circle Packing problem is defined as filling a grid with non-overlapping circles of maximum po) s
5 626 M
(ssible radii. In other words, sum of radii of the non-overlapping tangential circles are maxim) s
5 615 M
(ized by a constraint satisfaction problem\(CSP\) or LP. Rectangular grid is mapped to a linear p) s
5 604 M
(rogram x11 + x12 + ... + xmn for each ordinate x\(ij\) of the grid. Points on the grid are rando) s
5 593 M
(mly filled by a Parallel Pseudorandom Generator and these points are centroids of circles of a) s
5 582 M
(rbitrary radius which intersect the grid. All grid ordinates intersected by or within the circ) s
5 571 M
(les are set to 1. Circle Packing Theorem implies this set of tangential circles draw a planar ) s
5 560 M
(intersection graph or coin graph. Conversely for every planar graph, a set of tangential circl) s
5 549 M
(es can be demarcated which are solutions to a CSP/LP. This version of circle packing has an ad) s
5 538 M
(ded parallel randomness ingredient and therefore is a Parallel Random Graph Circle Packing:) s
5 527 M
(        while \(there are unfilled grid ordinates\)) s
5 516 M
(        {) s
5 505 M
(                \(*\) Centroids of tangential circles \(which are vertices of random intersection) s
5 494 M
( graph\) are chosen by a PRG in parallel) s
5 483 M
(                \(*\) edges are created at random amongst centroid vertices which simulate tange) s
5 472 M
(ntial circles and have length equal to sum of radii of two tangential circles) s
5 461 M
(                \(*\) any overlap of circles is avoided by shrinking the sum of radii as necessa) s
5 450 M
(ry.) s
5 439 M
(                \(*\) all ordinate variables within random tangential circles are set to 1. ) s
5 428 M
(                \(*\) Grid ordinates are stored in a hashmap and an ordinate is removed from map) s
5 417 M
( after being set to 1. ) s
5 406 M
(                \(*\) At any instant, Parallel PRG choooses only from remaining ordinates in the) s
5 395 M
( hashmap which is exhausted when grid is completely filled by circles.) s
5 384 M
(        }) s
5 362 M
(Previous Parallel Random Graph Circle Packing is in BPNC/RNC and indirectly probabilistically ) s
5 351 M
(solves the constraint satisfaction problem for sum of radii in parallel and is an online algor) s
5 340 M
(ithm \( whereas sequential CSP/LP solution guarantees that the tangential osculating circles ha) s
5 329 M
(ve maximum radius possible apriori\).) s
5 307 M
(Circle Packing is also an exact cover set partition of 2-D space \(e.g infinite number of circl) s
5 296 M
(es in Apollonian Gasket\). Set partition and space filling \(by Circle packing, Tile cover etc.,) s
5 285 M
(\) have an isomorphism. Separate Chaining Hashtable and LSH partitions are isomorphic to exact ) s
5 274 M
(tile cover of a rectangular 2-D region and there exists a connection to factorization if Numbe) s
5 263 M
(r of elements of a set S is composite and size of every bucket in set partition of S is compos) s
5 252 M
(ite i.e every bucket in histogram is mapped to a rectangular tile in tile cover of S plotted a) s
5 241 M
(s a rectangle. Size of every bucket can be written as sum of four squares by Lagrange Four Squ) s
5 230 M
(ares Theorem and thus every set in a set partition can be mapped to 4 juxtaposed squares which) s
5 219 M
( reduces Balls-Bins/Set partition problems to Tile Packing.) s
5 197 M
(References:) s
5 186 M
(-----------) s
5 175 M
(649.1 Cicle Packing Survey - Apollonian Gasket - Computational Effort in finding radii - Figur) s
5 164 M
(e 2 - Packing and Simplicial Complexes -  Discrete Riemann Mapping Theorem - Maximal Packing -) s
5 153 M
( http://www.math.utk.edu/~kens/Notices_article.pdf - Previous algorithm for Circle Triangulati) s
5 142 M
(on Packing in Apollonian Gasket is a greedy algorithm where maximum possible radii are chosen ) s
5 131 M
(initially which are fractally reduced) s
5 120 M
(649.2 Descartes Circle Theorem - https://en.wikipedia.org/wiki/Descartes%27_theorem - Every fo) s
5 109 M
(ur kissing quadratic circles satisfy the quadratic equation - \(b1 + b2 + b3 + b4\)^2 = 2\(b1^2 +) s
5 98 M
( b2^2 + b3^2 + b4^2\) where bi are bends or curvatures \(radii\) of the four circles. Quite usefu) s
5 87 M
(l in previous randomized parallel algorithm in finding the radius of inscribed fourth circle.) s
5 76 M
(649.3 An example Constraint Satisfaction Problem for unequal Circle Packing in rectangle by 0-) s
5 65 M
(1 Integer Linear Programming - Integer Programming Formulations for Approximate Packing Circle) s
5 54 M
(s in a Rectangular Container - https://www.hindawi.com/journals/mpe/2014/317697/) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(----------) s
5 10 M
(650. \(THEORY and FEATURE\) Streaming Set Partition \(Histogram\) Analytics - 28 March 2019) s
_R
S
%%Page: (431) 431
%%BeginPageSetup
_S
18 36 translate
/pagenum 431 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (431) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(----------) s
5 670 M
(1.New Python implementation for multipurpose analytics of streamed set partitions \(histograms\)) s
5 659 M
( has been committed - Streaming_SetPartitionAnalytics.py) s
5 648 M
(2.Two new bigdata sources have been defined in Streaming_AbstractGenerator.py - "TextHistogram) s
5 637 M
(Partition" and "DictionaryHistogramPartition" which respectively:) s
5 626 M
(        \(*\) Map a list of textfiles to list of histograms by finding word frequency in the tex) s
5 615 M
(t and yield partition datastructure as iterable which is a dictionary of words to buckets in h) s
5 604 M
(istograms \(occurrences are mapped to array of 1s e.g occurence 5 for word "word" is mapped to ) s
5 593 M
(binned bucket \('word',[1,1,1,1,1]\)\)) s
5 582 M
(        \(*\) Read a text file - Streaming_SetPartitionAnalytics.txt - containing list of dictio) s
5 571 M
(naries, literal_eval\(\) it and yield the elements as iterable) s
5 560 M
(3.TextHistogramPartition is a fancy datasource which facilitates an alternative measure of str) s
5 549 M
(eaming text analytics and text similarity) s
5 538 M
(4.DictionaryHistogramPartition is the conventional datasource for succinctly representing a se) s
5 527 M
(t partition which could be anything ranging from LSH partition, Exact Cover, Balls-Bins, Separ) s
5 516 M
(ate Chained Hashtables, Electronic Voting Machines based on LSH and Separate Chaining, Busines) s
5 505 M
(s Intelligence Histograms, SMS voting histograms, Music Spectrograms etc.,.) s
5 494 M
(5.adjusted_rand_index\(\) in Streaming_SetPartitionAnalytics.py instantiates both these datasour) s
5 483 M
(ce iterators and computes Adjusted Rand Index for two consecutive partitions in the stream by ) s
5 472 M
(SciKitLearn adjusted_rand_score\(\)) s
5 461 M
(6.Because of the fact that every set partition is set of class labels in some classifier, vari) s
5 450 M
(ous other clustering performance measures - mutual information, silhouette etc., \(https://scik) s
5 439 M
(it-learn.org/stable/modules/clustering.html#clustering-evaluation\) could compare partitions to) s
5 428 M
(o.) s
5 417 M
(7.tocluster\(\) in Streaming_SetPartitionAnalytics.py maps a partition to an array of labelled e) s
5 406 M
(lements in scikitlearn format) s
5 395 M
(8.An example streaming set partition analytics for linux kernel logs \(TextHistogramPartition\) ) s
5 384 M
(and list of dictionaries \(DictionaryHistogramPartition\) is committed to Streaming_SetPartition) s
5 373 M
(Analytics.log.28March2019 which show how Adjusted Rand Index works for similar and dissimilar ) s
5 362 M
(partitions.) s
5 351 M
(9.For circumventing sklearn exception two compared partitions are truncated to minimum size of) s
5 340 M
( the two) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(----------) s
5 296 M
(651. \(THEORY and FEATURE\) Reduction from Set Partition to Exact Square Tiles Cover of Rectangu) s
5 285 M
(lar Region,) s
5 274 M
(Lagrange Four Square Theorem, Complementary Sets, Computational Geometric Factorization, Space) s
5 263 M
( Filling, Tile Cover, Packing, Set Partition/Histogram Analytics, LSH Partitions, Separate Cha) s
5 252 M
(ining Hashtables - 3 April 2019, 17 November 2019 - related to 649 and 650) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(----------) s
5 219 M
(1.Python implementation for Set Partition Analytics \(Streaming_SetPartitionAnalytics.py\) has b) s
5 208 M
(een updated for a new function which reduces a histogram set partition to exact square tiles c) s
5 197 M
(over of rectangular region which has area equal to number of elements in the histogram.) s
5 186 M
(2.Function setpartition_to_tilecover\(\) loops through histogram buckets \(set partition\) and map) s
5 175 M
(s each bucket size to sum of four squares by Lagrange Four Square Theorem essentially mapping ) s
5 164 M
(each 1-dimensional bucket to 4 2-dimensional square tiles.) s
5 153 M
(3.Collection of these sets of 4 square tiles covers the rectangular region of area equal to nu) s
5 142 M
(mber of elements partitioned by histogram/LSH/Separate Chaining.) s
5 131 M
(4.Example logs in testlogs/Streaming_SetPartitionAnalytics.log.3April2019 demonstrate reductio) s
5 120 M
(n of histogram buckets [11,12,13,14,15] of total number of 65 elements to tile cover of rectan) s
5 109 M
(gular region which has composite area 13*5=65:) s
5 98 M
(square tiles for partition  11 : set\([\(0, 1, 1, 3\)]\)) s
5 87 M
(square tiles for partition  12 : set\([\(1, 1, 1, 3\)]\)) s
5 76 M
(square tiles for partition  13 : set\([\(1, 2, 2, 2\)]\)) s
5 65 M
(square tiles for partition  14 : set\([\(0, 1, 2, 3\)]\)) s
5 54 M
(square tiles for partition  15 : set\([\(1, 1, 2, 3\)]\)) s
5 43 M
(Lagrange Four Square Tiles Cover reduction of Set Partition  [11, 12, 13, 14, 15] : [0, 1, 1, ) s
5 32 M
(9, 1, 1, 1, 9, 1, 4, 4, 4, 0, 1, 4, 9, 1, 1, 4, 9]) s
5 21 M
(5.This reduction indirectly solves factorization problem \(complexity depends on sum of four sq) s
5 10 M
(uares\) geometrically by following square tiles cover algorithm:) s
_R
S
%%Page: (432) 432
%%BeginPageSetup
_S
18 36 translate
/pagenum 432 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (432) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(        5.1 Number to factorize N is partitioned arbitrarily by some integer partition and is ) s
5 681 M
(isomorphic to a histogram) s
5 670 M
(        5.2 Square tiles are obtained from partition by previous Lagrange Four Square reductio) s
5 659 M
(n ) s
5 648 M
(        5.3 Square tiles are geometrically juxtaposed/arranged to create a tiled rectangle sid) s
5 637 M
(es of which are factors of N) s
5 626 M
(        5.4 Finding an arrangement of tiles on a rectangular region can be formulated as a non) s
5 615 M
(-linear \(quadratic\) convex-concave optimization problem. If x1,x2,x3,...,xn are sides of squar) s
5 604 M
(e tiles:) s
5 593 M
(        N = area of rectangle = sum of areas of square tiles = x1^2 + x2^2 + x3^2 + ... + xn^2) s
5 582 M
(        = product of sum of sides of peripheral tiles) s
5 571 M
(        = \(c1*x1 + c2*x2 + ... + cn*xn\)*\(d1*x1 + d2*x2 + ... + dn*xn\) for ci = 0 or 1, di = 0 ) s
5 560 M
(or 1) s
5 549 M
(        5.5 Solving N = x1^2 + x2^2 + x3^2 + ... + xn^2 = \(c1*x1 + c2*x2 + ... + ck*xk + cn*xn) s
5 538 M
(\)*\(\(1-c1\)*x1 + \(1-c2\)*x2 + ... + ck*xk + \(1-cn\)*xn\) by Integer Programming for binary ci amoun) s
5 527 M
(ts to factorizing N \(because tiles of the sides have to be mutually exclusive save corner tile) s
5 516 M
(\)) s
5 505 M
(        5.6 The corner square tile is common to both sides and ck = dk for exactly one square ) s
5 494 M
(tile xk.) s
5 483 M
(        ) s
5 472 M
(If Factorization is doable in PRAMs \(and therefore in Nick's Class\) as per previous sections o) s
5 461 M
(n various parallel RAM polylogarithmic time algorithms for factoring \(e.g Parallel Planar Poin) s
5 450 M
(t Location\), geometric arrangement of square tiles in a rectangle is of polynomial time - find) s
5 439 M
( factors which are sides of rectangle, successively tile the rectangle by choosing largest squ) s
5 428 M
(are remaining. Many randomized algorithms are available for finding Lagrange Sum of squares. I) s
5 417 M
(f the factors of N = p*q are known in polylogarithmic time finding the tile arrangement is by ) s
5 406 M
(solving two linear programs:) s
5 395 M
(        c1*x1 + c2*x2 + ... + ck*xk + ... + cn*xn = p) s
5 384 M
(        \(1-c1\)*x1 + \(1-c2\)*x2 + ... + ck*xk + ... + \(1-cn\)*xn = q) s
5 362 M
(which are underdetermined linear equations \(n variables and 2 equations\) and constraints are s) s
5 351 M
(pecified by complemented binary coefficients ci and 1-ci and ck=dk in the two equations for mu) s
5 340 M
(tually excluding tiles in the sides of the rectangle except corner tile. This boolean coeffici) s
5 329 M
(ent complement constraint can be ignored if two sides of the rectangle can have tiles of simil) s
5 318 M
(ar squares. Another relaxation: Number of tiles can be unequal in either sides. Equations then) s
5 307 M
( are easier to interpret as:) s
5 296 M
(        c1*x1 + c2*x2 + ... + ck*xk + ... + cm*xm = p) s
5 285 M
(        d1*x1 + d2*x2 + ... + dk*xk + ... + dn*xn = q) s
5 274 M
(subject to one constraint for corner tile ck=dk and number of variables m and n could be unequ) s
5 263 M
(al. Number of variables m and n can be equated by additional |m-n| slack variables of zero coe) s
5 252 M
(fficients in equation of lesser variables. From Rouche-Capelli theorem number of solutions to ) s
5 241 M
(underdetermined system of equations is Infinite because rank of augmented matrix is < rank of ) s
5 230 M
(coefficient matrix for underdetermined system of equations. Solutions can be found by many alg) s
5 219 M
(orithms prominent being Gauss-Jordan elimination \(Gaussian Elimination by Partial Pivoting-GEP) s
5 208 M
(P\). GEPP has been proved to be P-complete problem. Previous system of equations are solved by ) s
5 197 M
(GEPP post-factorization \(sides of rectangle p,q are factors of N found by PRAM computational g) s
5 186 M
(eometric factorization\). If NC=P, both sides of rectangle and arrangement of square tiles on t) s
5 175 M
(he sides of the rectangle can be done in NC by PRAM GEPP which is a depth-two parallelism. Wit) s
5 164 M
(hout knowledge of factors, previous product \(c1*x1 + c2*x2 + ... + cm*xm\)*\(d1*x1 + d2*x2 + ...) s
5 153 M
( + dn*xn\) = pq = N is a quadratic program solving which is NP-Hard.) s
5 131 M
(Point location by parallel construction of wavelet trees has been described in previous sectio) s
5 120 M
(ns,which consider the set of points of a geometric variety \(e.g points on rectified hyperbolic) s
5 109 M
( arc\) on the plane as a string of points represented as a wavelet tree. Point Location by Para) s
5 98 M
(llel Wavelet Tree construction is more obvious than Parallel Point Location by Kirkpatrick Tri) s
5 87 M
(angulation, Planar subdivision, Bridge Separator Trees etc.,. The string of points formed from) s
5 76 M
( rectified hyperbolic arc are concatenated straightline segments each of which is an arithmeti) s
5 65 M
(c progression. Query select\(B, N, i\) returns the position p of the i-th occurrence of N in con) s
5 54 M
(catenated hyperbolic line segments string B from which i-th factors of N=\(p, N/p\) are obtained) s
5 43 M
(.) s
5 21 M
(Previous reduction from set partition to tile cover by Lagrange Four Square Theorem is restric) s
5 10 M
(ted to tiling 2-dimensional space. It can be generalized to filling/tiling arbitrary dimension) s
_R
S
%%Page: (433) 433
%%BeginPageSetup
_S
18 36 translate
/pagenum 433 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (433) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(al space by Chinese Remainder Theorem as follows:) s
5 681 M
(        \(*\) Chinese Remainder Theorem states that there is a ring isomorphism between x mod N ) s
5 670 M
(and \(x mod n1, x mod n2, ..., x mod nk\) for pairwise coprime integers n1,n2,...,nk and N = n1*) s
5 659 M
(n2*n3*...*nk \(or\) x mod N <=> \(x mod n1, x mod n2, ..., x mod nk\) which is an isomorphism betw) s
5 648 M
(een ring of integers mod N and direct product space of rings of integers modulo nk) s
5 637 M
(        \(*\) By Chinese Remainder Theorem, there is a bucket of size x < N \(so that x mod N = x) s
5 626 M
(\) of the set partition which can be mapped isomorphically to a k-dimensional hypercube of side) s
5 615 M
(s \(x mod n1, x mod n2, ..., x mod nk\) modulo an integer N=n1*n2*...*nk \(requires solving for x) s
5 604 M
(\).) s
5 593 M
(        \(*\) This Chinese Remaindering Reduction reduces 1-dimensional set partition to tiling ) s
5 582 M
(arbitrary dimensional space) s
5 571 M
(        ) s
5 560 M
(References:) s
5 549 M
(-----------) s
5 538 M
(651.1 Wang Tiling - https://en.wikipedia.org/wiki/Wang_tile - Previous Lagrangian Tiling can b) s
5 527 M
(e contrasted to Wang Tiles which is about feasibility of tiling a 2-D plane by multicolored sq) s
5 516 M
(uare tiles by matching colors of adjacent tiles.) s
5 505 M
(651.2 Alternative partition distance measures - https://arxiv.org/pdf/1106.4579.pdf) s
5 494 M
(651.3 Clustering for set partitioning - k-set partitioning and centroid clustering are equival) s
5 483 M
(ent - https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/OPT2015_paper_32.pdf) s
5 472 M
(651.4 Sage Set Partitions Implementation - http://doc.sagemath.org/html/en/reference/combinat/) s
5 461 M
(sage/combinat/set_partition.html#sage.combinat.set_partition.SetPartition) s
5 450 M
(651.5 Sage Ordered Set Partitions Implementation - complement of a partition - http://doc.sage) s
5 439 M
(math.org/html/en/reference/combinat/sage/combinat/set_partition_ordered.html) s
5 428 M
(651.6 Jacobi Sum of Four Squares Theorem - https://en.wikipedia.org/wiki/Jacobi%27s_four-squar) s
5 417 M
(e_theorem - "...The number of ways to represent n as the sum of four squares is eight times th) s
5 406 M
(e sum of the divisors of n if n is odd and 24 times the sum of the odd divisors of n if n is e) s
5 395 M
(ven ...") s
5 384 M
(651.7 Succinct and Implicit Data Structures for Computational Geometry - [Meng He,Faculty of C) s
5 373 M
(omputer Science, Dalhousie University, Halifax, NS, B3H 4R2, Canada,mhe@cs.dal.ca] - Figure 1 ) s
5 362 M
(- "A wavelet tree constructed for the string 35841484 over an alphabet of size 8.This is also ) s
5 351 M
(a wavelet tree constructed for the following point set on an 8 by 8 grid:{1, 3}, {2, 5}, {3, 8) s
5 340 M
(}, {4, 4}, {5, 1}, {6, 4}, {7, 8}, {8, 4}" and Section 3 - Planar Point Location - https://web) s
5 329 M
(.cs.dal.ca/~mhe/publications/ianfest66_succinctgeometry.pdf) s
5 318 M
(651.8 Simple,Fast and Lightweight Parallel Wavelet Tree Construction - [Fischer-Kurpicz-Lobel]) s
5 307 M
( - https://arxiv.org/pdf/1702.07578.pdf - Comparison to Domain Decomposition Parallel Wavelet ) s
5 296 M
(Tree Construction and Variant of Wavelet Tree \(Wavelet Matrix\) - In the context of Computation) s
5 285 M
(al Geometric Parallel Planar Point Location, size of the alphabet for wavelet tree is very sma) s
5 274 M
(ll in the range [N-delta, N+delta] because hyperbolic tile segments have product of ordinates ) s
5 263 M
(which are more or less equal to N. ) s
5 252 M
(651.9 Planar Point Location - Algorithms - https://cw.fel.cvut.cz/b181/_media/courses/cg/lectu) s
5 241 M
(res/02-pointloc.pdf) s
5 230 M
(651.10 Segment Trees and Point Location Query - http://www.cs.umd.edu/class/fall2016/cmsc754/L) s
5 219 M
(ects/cmsc754-fall16-lects.pdf) s
5 208 M
(651.11 Rouche-Capelli Theorem for Underdetermined system of equations - https://en.wikipedia.o) s
5 197 M
(rg/wiki/Underdetermined_system#Solutions_of_underdetermined_systems, https://en.wikipedia.org/) s
5 186 M
(wiki/Rouch%C3%A9%E2%80%93Capelli_theorem) s
5 175 M
(651.12 Parallel Complexity of Gaussian Elimination by Partial Pivoting - https://algo.ing.unim) s
5 164 M
(o.it/people/mauro/strict.ps) s
5 153 M
(651.13 CGAL 5.0 Planar Point Location implementation - https://doc.cgal.org/latest/Arrangement) s
5 142 M
(_on_surface_2/index.html#title14) s
5 131 M
(651.14 Parallel CGAL - Multicore parallelism in CGAL is achieved by Intel TBB - https://github) s
5 120 M
(.com/CGAL/cgal/wiki/Concurrency-in-CGAL) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(----------) s
5 76 M
(652. \(FEATURE\) Histogram-Set Partition Analytics - Adjusted Mutual Information - 3 April 2019) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(----------) s
5 43 M
(1.adjusted_mutual_info_score\(\) from sklearn.metrics has been invoked in adjusted_rand_index\(\) ) s
5 32 M
(for comparing two set partitions.) s
5 21 M
(2.Logs in testlogs/Streaming_SetPartitionAnalytics.log2.3April2019 show the difference between) s
5 10 M
( two measures - adjusted rand index and adjusted mutual information) s
_R
S
%%Page: (434) 434
%%BeginPageSetup
_S
18 36 translate
/pagenum 434 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (434) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(----------) s
5 659 M
(653. \(FEATURE and THEORY\) Computational Geometric Factorization - Tile Search - Spark 2.4 -Spa) s
5 648 M
(rkContext) s
5 637 M
(range\(\) - 16 April 2019) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(----------) s
5 604 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been changed to replac) s
5 593 M
(e xrange\(\) by Spark Context range\(\) function in Spark 2.4.) s
5 582 M
(2.Python xrange\(\) is sequential and local while Spark range\(\) is resilient distributed dataset) s
5 571 M
( which can be computed on cloud in parallel) s
5 560 M
(3.Some ray query functions have also been transitioned to Spark Context range\(\).) s
5 549 M
(4.An example integer is factorized and logs in testlogs/DiscreteHyperbolicFactorizationUpperbo) s
5 538 M
(und_TileSearch_Optimized.log.16April2019 show some accurate ray shooting by Hardy-Ramanujan ap) s
5 527 M
(proximate factoring and exact factors.) s
5 516 M
(5.Spark 2.4 has Barrier Synchronization feature \(mentioned experimental\) which is BSP model \(l) s
5 505 M
(ike Pregel\) than PRAM - https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.B) s
5 494 M
(arrierTaskContext.get) s
5 483 M
(6.Greenwich Mean Time \(gmtime\(\)\) is printed after every factor is found for duration analysis ) s
5 472 M
(of finding all factors.) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(--------) s
5 428 M
(654. \(THEORY and FEATURE\) EventNet creation from Video, Actor Model, PetriNets, Video EventNet) s
5 417 M
( Tensor Products Intrinsic Merit - 19 April 2019 - related to all sections on Causality-Logica) s
5 406 M
(l Time and Merit) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(--------) s
5 373 M
(1.ImageNet Keras-Theano Python implementation has been changed to write EventNet Vertices and ) s
5 362 M
(Edges ) s
5 351 M
(files from causally related frame events of the video which can be read by GraphViz or NeuronR) s
5 340 M
(ain EventNet Python implementation) s
5 329 M
(2.EventNet differs from traditional PetriNet in following respects:) s
5 318 M
(        2.1 PetriNets have vertices having tokens called "Places" while EventNet has vertices ) s
5 307 M
(having "actors" or "participants" in an event \(Actor-Event Model\)) s
5 296 M
(        2.2 PetriNets have transitions which move the tokens from Place-a to Place-b while Eve) s
5 285 M
(ntNet has directed edges which connect a causing event vertex to an effect event vertex which ) s
5 274 M
(is akin to flow of tokens.) s
5 263 M
(        2.3 EventNet is an Actor Model where actors interact in an event, modify local states ) s
5 252 M
(and send messages to other actors.) s
5 241 M
(3.Video EventNet vertices and edges are written to Video_EventNetEdges.txt and Video_EventNetV) s
5 230 M
(ertices.txt) s
5 208 M
(References:) s
5 197 M
(-----------) s
5 186 M
(654.1 Actor Model - https://en.wikipedia.org/wiki/Actor_model) s
5 175 M
(654.2 PetriNets - https://www.techfak.uni-bielefeld.de/~mchen/BioPNML/Intro/pnfaq.html) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(----------) s
5 131 M
(655. \(THEORY and FEATURE-BUGFIX\) EventNet creation from Video - bug resolutions, corrections t) s
5 120 M
(o EventNet vertices and edges text files - 21 April 2019) s
5 109 M
(----------------------------------------------------------------------------------------------) s
5 98 M
(----------) s
5 87 M
(1.ImageNet Keras Theano Python Implementation had some bugs in creating EventNet vertices and ) s
5 76 M
(edges text) s
5 65 M
(files which have been resolved in this commit.) s
5 54 M
(2.Frame prevfix has been included in EventNet edges text file.) s
5 43 M
(3.Extracting EventNet from video facilitates computing usual dense subgraph complexity measure) s
5 32 M
(s for Video) s
5 21 M
(similar to TextGraphs - e.g k-core, cycles, strongly connected components, algebraic connectiv) s
5 10 M
(ity etc.,) s
_R
S
%%Page: (435) 435
%%BeginPageSetup
_S
18 36 translate
/pagenum 435 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (435) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(----------) s
5 659 M
(656. \(FEATURE\) Medical Imageing Analytics - ElectroCardioGram \(ECG\), EventNet from Video - 23 ) s
5 648 M
(April 2019) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(----------) s
5 615 M
(1.Extracting patterns in medical imagery \(ECG, MRI, Echo Cardio Gram Scans etc.,\) is one of th) s
5 604 M
(e most obvious analytics that can be performed on a Medical Image dataset which has widespread) s
5 593 M
( requirement in healthcare.) s
5 582 M
(2.ImageNet Keras-Theano Python implementation has been augmented with a medical_imageing\(\) fun) s
5 571 M
(ction which takes an image source \(presently ECG\) and thresholds the image to retrieve contour) s
5 560 M
(s from it by CV2 findContours\(\).) s
5 549 M
(3.Image Contours are prominent features in an image which are more pronounced and distinguish ) s
5 538 M
(it from other images.) s
5 527 M
(4.Two example ECG images \(Normal and Infarction\) are compared by creating contours \(i.e extrac) s
5 516 M
(t the ECG waveform from image\) and computing the hausdorff distance between the two image cont) s
5 505 M
(ours:) s
5 494 M
(5.Example comparison from logs in testlogs/ImageGraph_Keras_Theano.log.MedicalImageing.23April) s
5 483 M
(2019:) s
5 472 M
(Distance between Normal ECG and Normal ECG: \(0.0, 0, 0\)) s
5 461 M
(Distance between Normal ECG and Infarction ECG: \(1741.9586677071302, 0, 0\)) s
5 450 M
(6.EventNet edges and vertices numbering in text files Video_EventNetEdges.txt and Video_EventN) s
5 439 M
(etVertices.txt has been corrected.) s
5 417 M
(References:) s
5 406 M
(-----------) s
5 395 M
(656,1 Medical Imageing Analysis - https://www.pyimagesearch.com/2018/12/03/deep-learning-and-m) s
5 384 M
(edical-image-analysis-with-keras/) s
5 373 M
(656.2 ECG Library - https://ecglibrary.com/ecghome.php) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(-----------) s
5 329 M
(657. \(THEORY\) Depth-2 Majority Function, Theoretical EVMs, Set Partitions, People Analytics, A) s
5 318 M
(xiom of Choice - related to 546,490 and all sections on majority voting - 25 April 2019) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(-----------) s
5 285 M
(It has been mentioned in earlier sections on set partitions that every theoretical majority vo) s
5 274 M
(ting partitions the population into subsets or buckets indexed by the candidate voted for. Mos) s
5 263 M
(t realworld democracies follow the depth-2 majority voting division convention below:) s
5 252 M
(                                        \(Depth-0\)) s
5 241 M
(                                 Winning affiliation) s
5 230 M
(                                        /\\) s
5 219 M
(                                        ||) s
5 208 M
(        \(Depth-1\) {Segment1          Segment2   ....                SegmentP}) s
5 197 M
(                        /\\              /\\                              /\\) s
5 186 M
(                        ||              ||                              ||) s
5 175 M
(\(Depth-2\) {EVM11 EVM12 ... EVM1N}  {EVM21 EVM22 ... EVM2N}      {EVMP1 EVMP2 ... EVMPN}) s
5 153 M
(and each EVM is defined by the hiearachy of partitions\( candidates per segment might vary as n) s
5 142 M
(\(1\),n\(2\),...,n\(P\)\) - votes per candidate k in q-th EVM of p-th segment \(EVMpq\) is denoted by c) s
5 131 M
(kpq :) s
5 109 M
(        EVM11 = c111 + c211 + c311 + ... + cn\(1\)11 ) s
5 98 M
(        EVM12 = c112 + c212 + c312 + ... + cn\(1\)12) s
5 87 M
(        ...) s
5 76 M
(        EVM21 = c121 + c221 + c321 + ... + cn\(2\)21) s
5 65 M
(        ...) s
5 54 M
(        EVMP1 = c1P1 + c2P1 + c3P1 + ... + cn\(P\)P1) s
5 43 M
(        ...) s
5 32 M
(Previous partition tree of depth-2 \(i.e a tree whose nodes are set partitions\) generalizes dep) s
5 21 M
(th-2 boolean majority function to non-boolean setting and is an arithmetic circuit. At Depth-2) s
5 10 M
( EVM set partitions per segment are summed up partwise \(because all partitions within a segmen) s
_R
S
%%Page: (436) 436
%%BeginPageSetup
_S
18 36 translate
/pagenum 436 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (436) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(t should have equal number of parts which is the number of candidates per segment\) and passed ) s
5 681 M
(on to Depth-1 - in previous per segment partition identities summing vertically columnwise yie) s
5 670 M
(lds Depth-1 partition per segment. At Depth-1 index for candidate of maximum part/bucket size ) s
5 659 M
(in segmentwise partition sum is computed and passed on to Depth-0. At Depth-0, single set part) s
5 648 M
(ition is created which contains buckets per affiliation of the candidates. Maximum size part i) s
5 637 M
(n Depth-0 set partition is the winning affiliation.) s
5 615 M
(Whole depth-2 majority voting democratic process rests on the correctness of Axiom of Choice w) s
5 604 M
(hich avers: For a collection X of subsets, there always exists a choice function f such that f) s
5 593 M
(or every set A in X, f\(A\) is an element of A. In previous example, at Depth-1, maximum\(\) is th) s
5 582 M
(e choice function applied across the board for all segment set partitions for choosing the win) s
5 571 M
(ning candidate per segment \(ruling out ties\). It is readily obvious that each segment is a clu) s
5 560 M
(ster of partitions and empirically distance between majority of EVM partitions of same segment) s
5 549 M
( \(partition rank, rand index, mutual info\) should not be abnormally high and reflects trend pe) s
5 538 M
(r segment.) s
5 516 M
(By Berry-Esseen Central Limit Theorem, if vote for each candidate \(ckpq\) is a random variable,) s
5 505 M
( normalized sum of the votes for all candidates or average number of votes per candidate tends) s
5 494 M
( to normal distribution. In other words, every part in each of the EVM partitions previously i) s
5 483 M
(s a random variable which are summed up. This implies distances between any two EVM partitions) s
5 472 M
( \(which is the function of distance between individual parts in two voting partitions\) also te) s
5 461 M
(nd to distance between two normal distributions \(i.e almost a constant on the average\). Most i) s
5 450 M
(mportantly, columnwise sum of parts leading to per segment partition in Depth-1 is also an ave) s
5 439 M
(raged normal distribution.) s
5 417 M
(Ramanujan's Congruences for EVM partitions imply, for certain size of electorate \(5k + 4, 7k +) s
5 406 M
( 5, 11k + 6\) number of possible voting patterns \(partition number or number of possible partit) s
5 395 M
(ions\) abides by following congruences:) s
5 384 M
(        p\(5k + 4\) mod 5 = 0) s
5 373 M
(        p\(7k + 5\) mod 7 = 0) s
5 362 M
(        p\(11k + 6\) mod 11 = 0) s
5 340 M
(References:) s
5 329 M
(-----------) s
5 318 M
(657.1 Ramanujan Congruences - https://en.wikipedia.org/wiki/Ramanujan%27s_congruences) s
5 307 M
(657.2 Distance measures between partitions - Hamming Distance, Maximum Matching Distance, Vari) s
5 296 M
(ation of Information - https://pdfs.semanticscholar.org/d8a2/936cc4bcb8bda106e3b307104c3ee824b) s
5 285 M
(4a8.pdf) s
5 274 M
(657.3 Microsoft ElectionGuard OpenSource EVM - https://blogs.microsoft.com/on-the-issues/2019/) s
5 263 M
(05/06/protecting-democratic-elections-through-secure-verifiable-voting/ - "...First, ElectionG) s
5 252 M
(uard provides each voter a tracker with a unique code that can be used to follow an encrypted ) s
5 241 M
(version of the vote through the entire election process via a web portal provided by election ) s
5 230 M
(authorities. During the process of vote-casting, voters have an optional step that allows them) s
5 219 M
( to confirm that their trackers and encrypted votes accurately reflect their selections....") s
5 208 M
(657.4 Ballot Marking Devices Cannot assure the will of voters - [Appel-DiMello-Stark] - https:) s
5 197 M
(//papers.ssrn.com/sol3/papers.cfm?abstract_id=3375755) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(---------) s
5 153 M
(658. \(THEORY and FEATURE\) Video EventNet Causality Graph Complexity Measures, Graph Minors, Me) s
5 142 M
(rit of) s
5 131 M
(Large Scale Visuals - 29 April 2019) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(---------) s
5 98 M
(1.This commit invokes networkx Graph API and creates NetworkX EventNet causality graph object ) s
5 87 M
(for an example video. Connectivity of the Video EventNet is printed.) s
5 76 M
(2.Example video in matrovska format which records the facebook profile of the author https://w) s
5 65 M
(ww.facebook.com/shrinivaasan.ka \(containing NeuronRain commits twitter feeds\) is comverted to ) s
5 54 M
(mp4 by ffmpeg:) s
5 43 M
(ffmpeg -i ExampleVideo_Facebook_GRAFIT_29April2019.mkv -strict experimental ExampleVideo_Faceb) s
5 32 M
(ook_GRAFIT_29April2019.mp4) s
5 21 M
(3.Usually most videos have set of frames which are consecutive and closely related. These fram) s
5 10 M
(es create straightline linear paths of vertices of degree 2 in the EventNet Graph underneath i) s
_R
S
%%Page: (437) 437
%%BeginPageSetup
_S
18 36 translate
/pagenum 437 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (437) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(t.) s
5 681 M
(4.These straightline paths can be coalesced or edge-contracted to single vertex forming Graph ) s
5 670 M
(Minors of EventNet.) s
5 659 M
(5.Connectivity of a Video is a necessary but not sufficient condition for merit.) s
5 648 M
(6.Rationale for Video EventNet Connectivity as Merit Measure: Video of disconnected underlying) s
5 637 M
( EventNet causality has scattered non-coherent information which is not appealing to viewer.) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(----------) s
5 593 M
(659. \(FEATURE\) Music Pattern Mining - Music Synthesis by Automaton - Read from textfile - 30 A) s
5 582 M
(pril 2019) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(----------) s
5 549 M
(1.Hardcoded states2notes DFA has been removed and DFA is read from a textfile NotesStateMachin) s
5 538 M
(e.txt and) s
5 527 M
(ast.literal_eval\(\)-ed to a dictionary.) s
5 516 M
(2.Scaling of notes have been commented and note values are magnified \(multiplied by 1000\). Wav) s
5 505 M
(eform timeseries can be visually analyzed by loading .wav file to a player and displaying wave) s
5 494 M
(form oscilloscope in visual effects.) s
5 483 M
(3.Logs for this have been committed to testlogs/AudioToBitMatrix.log.MusicSynthesizer.30April2) s
5 472 M
(019) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(--------------------------) s
5 428 M
(660. \(THEORY and FEATURE\) DeepLearning Convolution BackPropagation - handwriting recognition -) s
5 417 M
( utility function - 5 May 2019, 9 May 2019) s
5 406 M
(- related to 159 ) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(--------------------------) s
5 373 M
(1.DeepLearning_ConvolutionNetwork_BackPropagation.py has been changed to define a new utility ) s
5 362 M
(function handwriting_recognition\(\) which) s
5 351 M
(loads two images of handwritings by CV2, thresholds them, finds contours of the two images and) s
5 340 M
( approximates the contours by Douglas-Peucker Polynomial \(DP\) and computes the hausdorff dista) s
5 329 M
(nce between the two DP approximate polynomials of the handwritten images.) s
5 318 M
(2.testlogs/DeepLearning_ConvolutionNetwork_BackPropagation.log.5May2019 shows how 2 pairs of h) s
5 307 M
(andwritten digits fare against hausdorff distance measure - 2 pictures of handwritten digit 1 ) s
5 296 M
(\(similar\), 2 pictures of handwritten digits 1 and 8 \(dissimilar\)) s
5 285 M
(3.Logs show DP polynomials of contours of 1 and 1 are close enough while DP polynomials of con) s
5 274 M
(tours of 1 and 8 are far apart:) s
5 263 M
(#############################################) s
5 252 M
(Handwriting Recognition) s
5 241 M
(#############################################) s
5 230 M
([[[1279  719]]]) s
5 219 M
([[[1276  719]]) s
5 197 M
( [[1279  719]]]) s
5 186 M
(Distance between DP polynomials approximating two handwriting contours: \(3.0, 0, 0\)) s
5 175 M
([[[1279  719]]]) s
5 164 M
([[[  0 564]]]) s
5 153 M
(Distance between DP polynomials approximating two handwriting contours: \(1288.3578695378083, 0) s
5 142 M
(, 0\)) s
5 120 M
(4.Though image Contours and DP approximation are not traditional deep learning, previous conto) s
5 109 M
(uring and DP approximation could as well be performed on convolution layers and maxpooling map) s
5 98 M
( layers of the two images as against images themselves.) s
5 87 M
(5.Function handwriting_recognition\(\) is supervised learner and takes two arguments - training ) s
5 76 M
(\(labelled\) and test \(unlabelled\) images - and compares the unlabelled image to training image ) s
5 65 M
(\(printed or handwritten\)) s
5 54 M
(6.In the topological sense, each approximate DP polynomial for handwriting contours of same al) s
5 43 M
(phabet or digit are equivalent homeomorphic deformations in R^2. Handwritings of same person f) s
5 32 M
(or similar text create a cluster of deformations which are close enough and create outliers fo) s
5 21 M
(r different persons.) s
5 10 M
(7.Pattern grammars described earlier define grammatical rules similar to context free grammars) s
_R
S
%%Page: (438) 438
%%BeginPageSetup
_S
18 36 translate
/pagenum 438 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (438) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( for shape description. For example handwritten alphanumeric 'b' is defined as:) s
5 681 M
(        <b> := <|> <operator> <o>) s
5 670 M
(where <operator> could be <prefix> which tangentially attaches <|> before <o>. Following the c) s
5 659 M
(onvention above, a family or cluster of close-enough DP approximate polynomials fit in as oper) s
5 648 M
(ands within <> - e.g Coffee mug in 2 dimensions is homeomorphic to the letters 'D' and 'O' and) s
5 637 M
( all three \(Mug, D, O\) have close-enough DP Approximate polynomials of small hausdorff distanc) s
5 626 M
(es amongst them. Alternatively, Mug can be written as pattern grammar:) s
5 615 M
(        <Mug> := <I> <prefix> <\)> ) s
5 604 M
(and <I> and <\)> are defined by DP polynomials.) s
5 582 M
(References:) s
5 571 M
(-----------) s
5 560 M
(660.1 Ramer-Douglas-Peucker Curve Decimation Algorithm - approxPolyDP\(\) - https://docs.opencv.) s
5 549 M
(org/2.4/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html) s
5 538 M
(660.2 Coffee Mug is homeomorphic to Donut Torus - Graphic illustration - https://en.wikipedia.) s
5 527 M
(org/wiki/Homeomorphism) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(-------------------------------------------------) s
5 483 M
(661.\(THEORY and FEATURE\) Music Pattern Mining - Weighted Automaton Learning from Music - 11 Ma) s
5 472 M
(y 2019 - related to all sections on) s
5 461 M
(Intrinsic Merit of Music) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(-------------------------------------------------) s
5 428 M
(1.Previous sections described ascertaining merit of music by various analyses of waveforms e.g) s
5 417 M
( MFCC, learning DFA from music notes. Apart from these there are standard measures viz., zero ) s
5 406 M
(crossings, chroma which quantify genre or merit of music \(https://librosa.github.io/librosa/fe) s
5 395 M
(ature.html\).) s
5 384 M
(2.Of these learning a deterministic finite automaton from strings of music notes is a qualitat) s
5 373 M
(ive intrinsic merit measure of music which does not involve any statistical processing.) s
5 362 M
(3.Learning DFA is a computational learning theoretic problem \(PAC Learning, Angluin Model etc.) s
5 351 M
(,\). Weighted Deterministic Finite State Automata are generalizations of DFA in which state tra) s
5 340 M
(nsitions have an associated numeric weightage in addition to alphabets from a language.) s
5 329 M
(4.For example, weighted DFA below has the weighted transitions:) s
5 318 M
(        \(state1, a, state2\) - transition from state1 to state2 on symbol a of weight 1) s
5 307 M
(        \(state2, 2b, state3\) - transition from state2 to state3 on symbol b of weight 2) s
5 296 M
(5.Weighted automata are apt formalisms to represent music notes strings as DFA because notes h) s
5 285 M
(ave subdivisions - sharp and flat - which can be likened to weightage for state transitions \(h) s
5 274 M
(ttps://en.wikipedia.org/wiki/Musical_note - CDEFGABC - ascending and descending graphic\).) s
5 263 M
(6.For example string of music notes - "CD\(sharp\)DEEGAF\(flat\)F\(sharp\)" - and its accepting weig) s
5 252 M
(hted music automaton could be:) s
5 241 M
(        state1, C, state2) s
5 230 M
(        state2, Dsharp, state3) s
5 219 M
(        ...) s
5 208 M
(        state10, Fflat, state5) s
5 197 M
(        state6, Fsharp, state2) s
5 186 M
(        ...) s
5 175 M
(where sharp and flat are weights for the transition symbol.) s
5 164 M
(7.Scikit Learn SPLearn \(scikit-splearn\) provides a weighted automaton learning framework based) s
5 153 M
( on Spectral Theory.) s
5 142 M
(8.This commit implements a Music Weighted Automaton python code in MusicWeightedAutomaton.py w) s
5 131 M
(hich accepts a set of training string of music notes and fits them to a weighted automaton usi) s
5 120 M
(ng scikit-splearn. It makes predictions later based on training data.) s
5 109 M
(9.Learnt weighted automaton for music notes string is drawn as DOT graph file by graphviz in M) s
5 98 M
(usicWeightedAutomaton.gv and is rendered to a pdf - MusicWeightedAutomaton.gv.pdf) s
5 87 M
(10.Weighting the transition in music notes has an another advantage: Some portions of the musi) s
5 76 M
(c waveform are more impressive and catchy which makes them to be listened again - https://en.w) s
5 65 M
(ikipedia.org/wiki/Earworm - and transitions for these could have heavy weights.) s
5 54 M
(11.Alphabets in sample music notes strings for scikit-splearn are numeric encoded as - A:0,B:1) s
5 43 M
(,C:2,D:3,E:4,F:5,G:6) s
5 21 M
(References:) s
5 10 M
(-----------) s
_R
S
%%Page: (439) 439
%%BeginPageSetup
_S
18 36 translate
/pagenum 439 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (439) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(661.1 Weighted Automata Theory - https://perso.telecom-paristech.fr/jsaka/CONF/Files/IWAT.pdf) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(-----------------------------------------------) s
5 648 M
(662. \(FEATURE\) Intrinsic Merit of Music - Learning Weighted Automata from Music - Example - 14) s
5 637 M
( May 2019) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(-----------------------------------------------) s
5 604 M
(1.MusicWeightedAutomaton.py has been updated to define a new function audio_notes_to_samples\(\)) s
5 593 M
( to read a music clip of certain duration by librosa, convert the waveform to notes, create no) s
5 582 M
(tes string samples from them and return samples as word frequency dictionary and numeric encod) s
5 571 M
(ed sample notes strings) s
5 560 M
(2.SplearnArray is instantiated from encoded notes strings of variable size equal to number of ) s
5 549 M
(columns in the notes matrix) s
5 538 M
(3.Weighted automaton is learnt from these Sample dictionary and numeric encoded notes strings) s
5 527 M
(4.automaton graph drawn in MusicWeightedAutomaton.gv.pdf shows a condensed weighted automata f) s
5 516 M
(or an example music clip) s
5 505 M
(5.Logs for this are committed to testlogs/MusicWeightedAutomaton.log.14May2019) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(--------------------------------------------) s
5 461 M
(663. \(FEATURE\) Named Entity Recognition - Conditional Random Fields - Update - 16 May 2019) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(--------------------------------------------) s
5 428 M
(1.NamedEntityRecognition_HMMViterbi_CRF.py has been changed to removed hardcoded PoS tagged se) s
5 417 M
(ntences and instead to read states and observations from two files: NamedEntityRecognition_HMM) s
5 406 M
(Viterbi_CRF.states and NamedEntityRecognition_HMMViterbi_CRF.observations which have the semi-) s
5 395 M
(PoS tagged sentence PoS states and sentence word observations respectively.) s
5 384 M
(2.Emission Probabilities for each state are computed by a skew normal distribution which moves) s
5 373 M
( the mean from left to right of the sentence as states progress.) s
5 362 M
(3.This skew normal distribution gives more weightage to respective state than others while eac) s
5 351 M
(h state is observed.) s
5 340 M
(4.An example log in testlogs/NamedEntityRecognition_HMMViterbi_CRF.log.16May2019 shows the ske) s
5 329 M
(wing of probability weights from left to right of the sentence ) s
5 318 M
(5.For example, Name-Verb-Object PoS tag is weighted as : First 1/3 of sentence has more weight) s
5 307 M
(age for emission probabilities of "Name",second 1/3 of sentence has more weightage for emissio) s
5 296 M
(n probabilities of "Verb" and third 1/3 of sentence has more weightage for emission probabilit) s
5 285 M
(ies of "Object") s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(---------) s
5 241 M
(664. \(FEATURE\) Spark 2.4 Structured Streaming - Windowed Stream - 21 May 2019) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(---------) s
5 208 M
(1.SparkGenericStreaming.java in java-src/bigdata_analytics/spark_streaming has been changed to) s
5 197 M
( do windowed structured stream if URL socket is false i.e data is read from plain socket strea) s
5 186 M
(m.) s
5 175 M
(2.New boolean flag "windowed" has been added to the java class as static member based on which) s
5 164 M
( Windowed streaming spark code is executed.) s
5 153 M
(3.Windowed streaming spark code fragment uses readStream\(\)/writeStream\(\) facility in Spark to ) s
5 142 M
(read data written over socket.) s
5 131 M
(4.Netcat utility creates the socket server in port 8080.) s
5 120 M
(5.Java lambda functions in FlatMapFunction tokenize the incoming stream of lines to words and ) s
5 109 M
(organize them as word-timestamp rows dataset.) s
5 98 M
(6.Next groupBy\(\) parses word-timestamp dataset from previous lambda invocation and creates str) s
5 87 M
(uctured stream of tables of columns slidingwindow_timestamp-word-count.) s
5 76 M
(7.Logs in testlogs/SparkGenericStreaming.log.21May2019 show dataframe tables for both urlsocke) s
5 65 M
(t=false\(windowed=true\) and urlsocket=true boolean option settings.) s
5 54 M
(8.CLASSPATH for compilation of SparkGenericStreaming.java \(javac SparkGenericStreaming.java\) h) s
5 43 M
(as been updated to:) s
5 32 M
(CLASSPATH=/media/Ubuntu2/spark-2.4.0-bin-hadoop2.7/jars/spark-streaming_2.11-2.4.0.jar:.:/medi) s
5 21 M
(a/Ubuntu2/spark-2.4.0-bin-hadoop2.7/jars/scala-library-2.11.12.jar:/media/Ubuntu2/spark-2.4.0-) s
5 10 M
(bin-hadoop2.7/jars/spark-sql_2.11-2.4.0.jar:/media/Ubuntu2/spark-2.4.0-bin-hadoop2.7/jars/spar) s
_R
S
%%Page: (440) 440
%%BeginPageSetup
_S
18 36 translate
/pagenum 440 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (440) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(k-core_2.11-2.4.0.jar:/media/Ubuntu2/jdk1.8.0_171/lib/jsoup-1.11.3.jar:/media/Ubuntu2/spark-2.) s
5 681 M
(4.0-bin-hadoop2.7/jars/spark-catalyst_2.11-2.4.0.jar:/media/Ubuntu2/spark-2.4.0-bin-hadoop2.7/) s
5 670 M
(jars/scala-reflect-2.11.12.jar:/media/Ubuntu2/jdk1.8.0_171/bin:/usr/local/sbin:/usr/local/bin:) s
5 659 M
(/usr/sbin:/usr/bin:/sbin:/bin) s
5 648 M
(9.sparkgenericstreaming.jar is packaged as bin/jar cvf sparkgenericstreaming.jar *.class) s
5 637 M
(10.SparkGenericStreaming is executed as:) s
5 626 M
(/media/Ubuntu2/spark-2.4.0-bin-hadoop2.7/bin/spark-submit --jars /media/Ubuntu2/jdk1.8.0_171/l) s
5 615 M
(ib/jsoup-1.11.3.jar --class SparkGenericStreaming --master local[2] sparkgenericstreaming.jar ) s
5 604 M
( "https://twitter.com/search?f=tweets&vertical=news&q=Chennai&src=typd") s
5 582 M
(/media/Ubuntu2/spark-2.4.0-bin-hadoop2.7/bin/spark-submit --jars /media/Ubuntu2/jdk1.8.0_171/l) s
5 571 M
(ib/jsoup-1.11.3.jar --class SparkGenericStreaming --master local[2] sparkgenericstreaming.jar ) s
5 560 M
( "localhost" "8080" ) s
5 538 M
(for URLSocket and Windowed streaming respectively) s
5 527 M
(11.Reference: Spark Structured Streaming Example in https://github.com/apache/spark/blob/v2.4.) s
5 516 M
(3/examples/src/main/java/org/apache/spark/examples/sql/streaming/JavaStructuredNetworkWordCoun) s
5 505 M
(tWindowed.java) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(----------------------------------------------) s
5 461 M
(665. \(FEATURE\) Named Entity Recognition - Conditional Random Fields - Skew Normal Distribution) s
5 450 M
( Update - 29 May 2019) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(----------------------------------------------) s
5 417 M
(1.Miscellaneous changes in NamedEntityRecognition_HMMViterbi_CRF.py for corrections to skew no) s
5 406 M
(rmal distribution which shifts mean of the distribution for each part of speech to the right b) s
5 395 M
(y some constant multiples.) s
5 384 M
(2.Skew normal distribution mean shift for each state \(part of speech\) is shown in NamedEntityR) s
5 373 M
(ecognition_HMMViterbi_CRF.29May2019.png) s
5 362 M
(3.Motivation for skew normal distribution mean shift from left to right for emission probabili) s
5 351 M
(ties is: For some part of speech state, successive word observations in the sentence receive m) s
5 340 M
(ore weightage corresponding to the peak value at mean i.e one word in the sentence peaks at me) s
5 329 M
(an and is more likely candidate observation emitted for respective Part of Speech state.) s
5 318 M
(4.In this example 5 words in the sentence peak for 5 part of speech states.) s
5 307 M
(5.logs for this commit have been committed to testlogs/NamedEntityRecognition_HMMViterbi_CRF.l) s
5 296 M
(og.29May2019 ) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(----------------------------------------------) s
5 252 M
(666. \(THEORY\) Approximation of Majority Voting, Streaming majority, Forecasts, Bertrand Ballot) s
5 241 M
( Theorem, Theoretical EVMs, Set Partitions - 4 June 2019) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(----------------------------------------------) s
5 208 M
(Bertrand Ballot Theorem states: In a majority voting involving 2 candidates A and B receiving ) s
5 197 M
(p and q votes respectively of total electorate p+q,probability of candidate A always being ahe) s
5 186 M
(ad of candidate B in counting of votes is \(p-q\)/\(p+q\). Approximation of Majority voting has im) s
5 175 M
(portant applications in psephological forecast \(pre-poll and post-poll surveys\) which samples ) s
5 164 M
(electorate to predict the winner. In pure complexity theoretic perspective, as has been mentio) s
5 153 M
(ned earlier, boolean majority gate can be alternatively represented by a set partition of 2 ca) s
5 142 M
(ndidate buckets indexed 0 and 1 and maximum size candidate bucket index is the output of set p) s
5 131 M
(artition boolean majority gate. It is also worth mentioning here that approximating a majority) s
5 120 M
( gate of n inputs by a much smaller gate of m inputs \(m << n\) is the complexity theoretic equi) s
5 109 M
(valent of forecasting a real-world majority voting of 2 candidates by sampling m voters from a) s
5 98 M
(n electorate of size n. It is obvious that process of counting of votes creates instantaneous ) s
5 87 M
(snapshots of the electorate set partition and any m sized \(less than n\) voter set partition sn) s
5 76 M
(apshot is equivalent to a sampling of total electorate. In terms of set partition definition o) s
5 65 M
(f majority gate, both buckets of voter set partition 0 and 1 grow over time and at any instant) s
5 54 M
( the set partition of total size m is a sampling of n voters.Votes for 2 candidates 1 and 0 ca) s
5 43 M
(n be drawn as timeseries polynomial curves \(votes versus time\) and intersection points of 2 cu) s
5 32 M
(rves are trend reversals contributing to the probability \(p-q\)/\(p+q\). Complexity theoretic maj) s
5 21 M
(ority gate assumes all the inputs at the leaves are immediately available which is not possibl) s
5 10 M
(e in approximation in which only m of n votes are known. Majority approximation gate predicts ) s
_R
S
%%Page: (441) 441
%%BeginPageSetup
_S
18 36 translate
/pagenum 441 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (441) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(output of majority gate of n inputs by a majority gate of m inputs for m << n with some error ) s
5 681 M
(probability. By Bertrand Ballot Theorem probability that a majority approximation gate of m in) s
5 670 M
(puts \(snapshot at some time point\) has the same output as an exact majority gate of n inputs i) s
5 659 M
(s \(p-q\)/\(p+q\) for total electorate p+q=n and p voters for 0 or 1 and q voters for 1 or 0. If m) s
5 648 M
(=a+b for a voters for 0 or 1 and b voters for 1 or 0 in the sample approximation, sample betra) s
5 637 M
(nd probability is assumed to be proportional to bertrand probability of total electorate:) s
5 626 M
(        \(p-q\)/\(p+q\) = k*\(a-b\)/\(a+b\)) s
5 615 M
(        \(p-q\)/n = k*\(a-b\)/m) s
5 604 M
(        \(p-q\) = n*k*\(a-b\)/m) s
5 593 M
(which extrapolates the sample to the entire electorate.) s
5 571 M
(References:) s
5 560 M
(-----------) s
5 549 M
(666.1 Bertrand Ballot Theorem - https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) s
5 527 M
(----------------------------------------------------------------------------------------------) s
5 516 M
(-----------------------------------------------) s
5 505 M
(667. \(FEATURE\) Social Network Analysis, People Analytics, PDF file parsing - 13 June 2019) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-----------------------------------------------) s
5 472 M
(1. Changed SocialNetworkAnalysis_PeopleAnalytics.py to parse PDF files of social network profi) s
5 461 M
(les by PyPDF2 which was not working earlier.) s
5 450 M
(2. PyPDF2 expects PDF files to be written by PDF writer or otherwise blank text is extracted) s
5 439 M
(3. As example CV of self written by LaTeX2PDF has been parsed to print profile text to testlog) s
5 428 M
(s/SocialNetworkAnalysis_PeopleAnalytics.log.13June2019) s
5 417 M
(4. Recursive Lambda Function Growth import has been commented because of WordNet error:) s
5 406 M
(Traceback \(most recent call last\):) s
5 395 M
(  File "<stdin>", line 1, in <module>) s
5 384 M
(  File "/usr/local/lib/python2.7/dist-packages/wn/__init__.py", line 11, in <module>) s
5 373 M
(    from wn.info import InformationContentSimilarities) s
5 362 M
(  File "/usr/local/lib/python2.7/dist-packages/wn/info.py", line 7, in <module>) s
5 351 M
(    from wn.reader import parse_wordnet_ic_line) s
5 340 M
(  File "/usr/local/lib/python2.7/dist-packages/wn/reader.py", line 22) s
5 329 M
(    offset, lexname_index, pos, n_lemmas, *the_rest = columns_str.split\(\)) s
5 318 M
(                                          ) s
5 307 M
(SyntaxError: invalid syntax) s
5 296 M
(5.LinkedIn PDF Profile has been updated by linkedin pdf export) s
5 274 M
(----------------------------------------------------------------------------------------------) s
5 263 M
(-------------------------------------------) s
5 252 M
(668. \(THEORY\) Computational Geometric Factorization - Average case Sequential Optimization, St) s
5 241 M
(irling Approximation of Gamma Function, ) s
5 230 M
(Sum of binary search times of each tile and some observations - related to 605 - 14 June 2019) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(-------------------------------------------) s
5 197 M
(\(*\) Average number of tiles between two approximate prime factors m and \(m+1\) found by tile su) s
5 186 M
(mmation ray shooting:) s
5 175 M
(                = \(m+1\)/[kloglogN - m - 1] - m/[kloglogN - m]) s
5 164 M
(because number of tiles till m-th prime factor = n = m/[kloglogN - m] for m=1,2,3,...,kloglogN) s
5 153 M
(\(*\) Thus total average sequential time to sweep binary search tiles in N/kloglogN spacing betw) s
5 142 M
(een 2 consecutive approximate factors found by ray shooting:) s
5 131 M
(        = O\([\(m+1\)/[kloglogN - m - 1] - m/[kloglogN - m]] * logN\)) s
5 120 M
(\(*\) Maximum number of tiles in N/kloglogN spacing occurs by minimizing denominator and setting) s
5 109 M
( m=kloglogN - 2:) s
5 98 M
(        = O\([\(kloglogN - 2 + 1\)/[kloglogN - kloglogN + 2 - 1] - \(kloglogN - 2\)/[kloglogN - klo) s
5 87 M
(glogN + 2]]\)) s
5 76 M
(        = O\(kloglogN - 1 - \(kloglogN - 2\)/2\)) s
5 65 M
(        = O\(kloglogN\)) s
5 54 M
(=> Maximum time to binary search tiles in N/kloglogN spacing = O\(loglogN * logN\)) s
5 43 M
(=> Each of O\(loglogN\) spacings between approximate factors can be searched in: ) s
5 32 M
(        O\(\(loglogN\)^2*logN\)) s
5 21 M
(average case sequential time with no necessity for parallel processing.) s
5 10 M
(\(*\) If each tile segment arithmetic progression is searched individually and sequentially, sum) s
_R
S
%%Page: (442) 442
%%BeginPageSetup
_S
18 36 translate
/pagenum 442 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (442) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( of binary search times for first k adjacent tile segments is:) s
5 681 M
(        log N/\(1*2\) + log N/\(2*3\) + log N/\(3*4\) + ... + log N/\(k*\(k+1\)\)) s
5 670 M
(which can be written as:) s
5 659 M
(        log N - \(log 1 + log 2\) +) s
5 648 M
(        log N - \(log 2 + log 3\) +) s
5 637 M
(        ...) s
5 626 M
(        log N - \(log k + log \(k+1\)\)) s
5 615 M
(by logarithmic identities and becomes:) s
5 604 M
(        k log N - \(log 1 + log \(k+1\) + 2 log k!\)) s
5 593 M
(But Gamma function is:) s
5 582 M
(        Gamma\(x+1\) = x!) s
5 571 M
(and by Stirling approximation:) s
5 560 M
(        log k! ~= log Gamma\(k+1\) = \(k+0.5\)*log k - k -1 + 0.5*log 2*pi) s
5 549 M
(Substituting in the summation:) s
5 538 M
(Total time for binary searching k adjacent tile segment arithmetic progressions = k log N - lo) s
5 527 M
(g \(k+1\) - \(2k + 1\)log k + 2\(k+1\) - log \(2*pi\)) s
5 505 M
(A variant approximation of this search time summation has been described in section 5 of http:) s
5 494 M
(//sourceforge.net/projects/acadpdrafts/files/DiscreteHyperbolicPolylogarithmicSieveForIntegerF) s
5 483 M
(actorization_PRAM_TileMergeAndSearch_And_Stirling_Upperbound_updateddraft.pdf/download) s
5 461 M
(if k is O\(loglogN\) from previous derivation of maximum number of tiles between 2 approximate p) s
5 450 M
(rime factors, in average case atleast one factor can be found in average time:) s
5 439 M
(        loglogN * log N - log \(loglogN + 1\) - \(2loglogN + 1\)logloglogN + 2\(loglogN+1\) - log \(2) s
5 428 M
(*pi\)) s
5 417 M
(        <= O\(logN * loglogN\)) s
5 395 M
(References:) s
5 384 M
(----------) s
5 373 M
(668.1 Stirling Approximation of Factorial and Gamma Function - https://en.wikipedia.org/wiki/S) s
5 362 M
(tirling%27s_approximation#Stirling's_formula_for_the_gamma_function) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(-----------------------------------------------) s
5 318 M
(669. \(THEORY\) Computational Geometric Factorization, Ramsey Coloring and Arithmetic Progressio) s
5 307 M
(ns in the Tile Segments, Van Der Waerden) s
5 296 M
(Numbers - related to 636 - 19 June 2019) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(-----------------------------------------------) s
5 263 M
(By Van Der Waerden theorem, for any positive integers r and k there is number N such that if t) s
5 252 M
(he numbers {1,2,3,...,N} are colored, each with) s
5 241 M
(one of the r different colors then there are atleast k integers in arithmetic progression whos) s
5 230 M
(e elements are of same color. Computational) s
5 219 M
(Geometric Factorization is based on rectification of hyperbolic curve into straightline or rec) s
5 208 M
(tangular polygonal tile segments \(of dimensions 1 * length_of_segment\) and reducing the factor) s
5 197 M
(ization problem to parallel RAM planar point location of factor points \(i.e hyperbolic curve i) s
5 186 M
(s rectified to a polygon containing arithmetic progression of products of ordinates as its rec) s
5 175 M
(tangular faces, parallel planar point location finds a rectangular face of the polygon having ) s
5 164 M
(the factor point N=pq in polylogarithmic time and the rectangular face arithmetic progression ) s
5 153 M
(having factor point is binary searched in logarithmic time - thus in NC\) in this rectified pol) s
5 142 M
(ygon. Each hyperbolic tile segment obtained by rectification are construed to be arrays of pro) s
5 131 M
(ducts of ordinates or arrays of ordered pair of ordinates in x-axis and y-axis. Unsorted Conca) s
5 120 M
(tenation of these tile segments of ordered pair of ordinates has the x-axis or y-axis sorted a) s
5 109 M
(scending from 1 to N \(or sqrt\(N\) to N\). Since arrays of product or ordered pair of ordinates i) s
5 98 M
(n each tile segment have one of the ordinates constant, each tile segment array is an arithmet) s
5 87 M
(ic progression of ordinate products elements of which are colored monochromatically. Factor po) s
5 76 M
(int location by parallel RAM sorting based on product of ordinates of ordered pairs in tile se) s
5 65 M
(gments sorts the product of ordinates but shuffles the x-axis ordinate in ordered pair notatio) s
5 54 M
(n which was strictly ascending in unsorted concatenation. Sorted concatenation of tile segment) s
5 43 M
(s of product of ordinates is the union of subsets of elements in each monochromatic arithmetic) s
5 32 M
( progression and creates a \(pseudo\)random coloring of sorted sequence of integers in the range) s
5 21 M
( {N-delta,N+delta}. In other words rectification of hyperbolic curve just inverts the Van Der ) s
5 10 M
(Waerden theorem - instead of finding monochromatic arithmetic progressions in a colored sequen) s
_R
S
%%Page: (443) 443
%%BeginPageSetup
_S
18 36 translate
/pagenum 443 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (443) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ce, it forms a mergesorted sequence from monochromatic arithmetic progressions in tile segment) s
5 681 M
(s. Since rectification of hyperbolic curve for every integer creates unique set of tile segmen) s
5 670 M
(ts, previous inverse of Van Der Waerden coloring is also unique.) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(-----------------------------------------------) s
5 626 M
(670. \(THEORY\) Computational Geometric NC-PRAM Factorization, Tile Summation Ray Shooting Queri) s
5 615 M
(es and Gamma approximation, Iterated addition for sum of tile segment lengths - 27 June 2019 -) s
5 604 M
( related to 506, 668) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-----------------------------------------------) s
5 571 M
(Tile summation ray shooting queries:) s
5 560 M
(------------------------------------) s
5 549 M
(Sum of lengths of first n tile segments of pixelated hyperbolic curve derived previously:) s
5 538 M
(        N/[1*2] + N/[2*3] + ... + N/[n*\(n+1\)] = Nn/\(n+1\)) s
5 527 M
(which can be equated to sum of distances between first m prime factors by Hardy-Ramanujan Theo) s
5 516 M
(rem:) s
5 505 M
(        Nn/\(n+1\) = mN/kloglogN) s
5 483 M
(=> n = m/\(kloglogN - m\) = number of tiles till m-th prime factor. ) s
5 461 M
(Gamma approximated tile summation ray shooting queries:) s
5 450 M
(-------------------------------------------------------) s
5 439 M
(Alternatively, sum of lengths of tiles obtained approximately from sum of binary search times ) s
5 428 M
(by Gamma function previously can be equated to Hardy-Ramanujan normal order estimate:) s
5 417 M
(        2^\(n log N - log \(n+1\) - \(2n + 1\)log n + 2\(n+1\) + log \(2*pi\)\) = mN/kloglogN) s
5 406 M
(        \(or\) \(n log N - log \(n+1\) - \(2n + 1\)log n + 2\(n+1\) + log \(2*pi\)\) = log\(mN/kloglogN\)) s
5 395 M
(and solved for number of tiles n that have to be summed till m-th prime factor. Total Binary S) s
5 384 M
(earch time has been raised to exponent to get approximate total length searched. Solving logar) s
5 373 M
(ithmic equation previously might require some logarithmic series approximation resulting in a ) s
5 362 M
(cubic equation or higher degree in n depending on number of terms chosen from logarithmic seri) s
5 351 M
(es. ) s
5 329 M
(An important fact ignored so far is the summing of tile lengths while doing ray shooting queri) s
5 318 M
(es which has to be parallelized too. But tile summation is an iterated addition of O\(N\) logN b) s
5 307 M
(it integers \(tile lengths are rounded off\) which is in NC1. Thus Computational Geometric NC-PR) s
5 296 M
(AM planar point location factorization invoking tile summation ray shooting query oracles is i) s
5 285 M
(n NC again. It can be noted that most other ray shooting query algorithms do not have this ite) s
5 274 M
(rated addition of tile lengths requirement.) s
5 252 M
(References:) s
5 241 M
(----------) s
5 230 M
(670.1 Iterated addition of n n-bit integers is in NC1 - Theorem 8.9 - https://courses.cs.washi) s
5 219 M
(ngton.edu/courses/cse532/08sp/lect08.pdf) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(--------------------------------------------) s
5 175 M
(671. \(THEORY and FEATURE\) Intrinsic Merit of Music - MFCC analysis and zero crossing rate - 27) s
5 164 M
( June 2019) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(--------------------------------------------) s
5 131 M
(1.AudioToBitMatrix.py MFCC function has been updated to scale MFCCs by sklearn and print mean ) s
5 120 M
(and variance of MFCCs of an audio/music waveform) s
5 109 M
(2.zero crossing rate of waveform is also printed which is measure of modulations in music.) s
5 98 M
(3.One of the ways to measure Music merit and Music Genre or Emotion Classification is by clust) s
5 87 M
(ering music waveforms by distance similarity of MFCCs.) s
5 76 M
(4.MFCC similarity can be used as recommender system where a listener is recommended music of s) s
5 65 M
(imilar MFCCs based on historic listening habits.) s
5 54 M
(5.MFCCs of music waveform drawn as images \(e.g by librosa.display.specshow\(\)\) can be compared ) s
5 43 M
(for similarities.) s
5 21 M
(Reference:) s
5 10 M
(----------) s
_R
S
%%Page: (444) 444
%%BeginPageSetup
_S
18 36 translate
/pagenum 444 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (444) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(671.1 Music Information Retrieval and MFCCs - https://musicinformationretrieval.com/mfcc.html) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(--------------------------------------------) s
5 648 M
(672. \(FEATURE and THEORY\) Intrinsic Merit of People/Professional Profiles - People Analytics -) s
5 637 M
( Tenure Histogram - 28 June 2019) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(--------------------------------------------) s
5 604 M
(1.People Analytics implementation has been updated to print Work and Academic Tenure stints as) s
5 593 M
( array \(histogram or integer partition\)) s
5 582 M
(2.This essentially makes tenures as a set partition analytics problem because job and academic) s
5 571 M
( stint time durations can be picturized as) s
5 560 M
(histograms.) s
5 549 M
(3.Tenures represented as Set Partitions can be quantified by set partition measure of partitio) s
5 538 M
(n rank:) s
5 527 M
(        Length of largest part in  partition - Number of parts in partition ) s
5 516 M
(4.In the context of People Analytics, previous rank measure is quite applicable practically as) s
5 505 M
( attrition metric because:) s
5 494 M
(        4.1 High partition rank implies the professional profile has spent large duration in a) s
5 483 M
(n organization or number of tenure switches are less \(number of parts\)) s
5 472 M
(        4.2 Low Partition rank implies the professional profile has low duration per organizat) s
5 461 M
(ion or high number of tenure switches) s
5 450 M
(5.Tenure Partition can be printed as Ferrer or Young Diagram and size of Durfee Square of this) s
5 439 M
( tenure partition is also a measure of average time spent per organization and thus an attriti) s
5 428 M
(on metric) s
5 417 M
(6.Recursive Lambda Function Growth wordnet error has been resolved \(pywsd is not used\) and imp) s
5 406 M
(ort uncommented.) s
5 395 M
(7.logs for this have been committed to testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.28Ju) s
5 384 M
(ne2019) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(----------------------------------------------) s
5 340 M
(673. \(FEATURE\) People Analytics - Partition Rank Attrition Metric of Tenure Histogram - 29 Jun) s
5 329 M
(e 2019) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(----------------------------------------------) s
5 296 M
(1.People Analytics implementation has been updated to compute partition rank described previou) s
5 285 M
(sly \(Crank of a Partition - Freeman Dyson - https://en.wikipedia.org/wiki/Crank_of_a_partition) s
5 274 M
(\) of tenure histogram set partition of a person's professional and academic profile.) s
5 263 M
(2.Recursive Lambda Function Growth algorithm has been applied to text of the profile again.Clo) s
5 252 M
(seness and Betweenness Centralities rankings are quite relevant than other Centrality measures) s
5 241 M
(.) s
5 230 M
(3.Logs for this have been committed to testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.29Ju) s
5 219 M
(ne2019) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(-----------------------------------------------) s
5 175 M
(674. \(FEATURE\) People Analytics - Rank Correlation based Attrition Model of Tenure Histogram -) s
5 164 M
( 1 July 2019) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(-----------------------------------------------) s
5 131 M
(1. People Analytics implementation has been updated to include a function to compute Correlati) s
5 120 M
(on Coefficients of Statistical Dependence between vectors of Tenure Histograms.) s
5 109 M
(2. Tenure Histogram is deemed as a set of vectors of the form \(organization/designation, incom) s
5 98 M
(e, duration\) which captures the crucial factors of a tenure) s
5 87 M
(3. New function tenure_partition_rank_correlation\(\) has been implemented to compute rank corre) s
5 76 M
(lations between each pair of variables of a tenure:) s
5 65 M
(        3.1 Designations versus Remunerations) s
5 54 M
(        3.2 Designations versus Durations) s
5 43 M
(        3.3 Remunerations versus Durations) s
5 32 M
(4.An example tenure histogram vectors of previous format has been analyzed \(presently not pars) s
5 21 M
(ed from profiles\) for Kendall-Tau Rank correlation coefficient and logs are in testlogs/Social) s
5 10 M
(NetworkAnalysis_PeopleAnalytics.log.1July2019) s
_R
S
%%Page: (445) 445
%%BeginPageSetup
_S
18 36 translate
/pagenum 445 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (445) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(5.Previous correlations can be interpreted as below:) s
5 681 M
(        5.1 Designations versus Remunerations - If positive or high, professional profile has ) s
5 670 M
(increasing career graph along with increasing remunerations \(expected\). If negative or low, pr) s
5 659 M
(ofessional profile has increasing career graph vis-a-vis reduced remunerations \(not expected -) s
5 648 M
( implies profile preferred more challenging roles than remuneration\) and vice-versa \(not expec) s
5 637 M
(ted - implies profile preferred better remuneration than designations\)) s
5 626 M
(        5.2 Designations versus Durations - If positive or high, profile has increasing career) s
5 615 M
( graph vis-a-vis durations of tenure \(expected\). If negative or low profile has increasing car) s
5 604 M
(eer graph vis-a-vis decreasing durations per tenure \(not quite expected - increased designatio) s
5 593 M
(ns  were not appealing to profile and person decided to leave\) and vice-versa \(not quite expec) s
5 582 M
(ted - decreasing responsibilities of the role were preferred by the profile which decided to s) s
5 571 M
(tay longer\) ) s
5 560 M
(        5.3 Remunerations versus Durations - If positive or high, profile has increasing emolu) s
5 549 M
(ments versus increasing durations per tenure \(expected\). If negative or low profile has increa) s
5 538 M
(sing remunerations against decreasing durations per tenure \(not quite expected - profile was m) s
5 527 M
(ore inclined to salary\) and vice-versa \(not quite expected - profile stayed longer per tenure ) s
5 516 M
(despite decreasing benefits\). ) s
5 505 M
(6. Previous interpretations facilitate inferences \(in parentheses\) of why attritions could hav) s
5 494 M
(e happened.) s
5 483 M
(7. From logs following positive and negative correlations are found and can be interpreted bas) s
5 472 M
(ed on \(5\):) s
5 461 M
(        Kendall Tau Rank Correlations - Designations and Remunerations: tau= 0.714285714285714) s
5 450 M
(3 , pvalue= 0.0301587301587) s
5 439 M
(        Kendall Tau Rank Correlations - Designations and Durations: tau= -0.09759000729485331 ) s
5 428 M
(, pvalue= 0.7612636496364197) s
5 417 M
(        Kendall Tau Rank Correlations - Durations and Remunerations: tau= -0.19518001458970663) s
5 406 M
( , pvalue= 0.5434238636256696) s
5 384 M
(----------------------------------------------------------------------------------------------) s
5 373 M
(-----------------------------------------------) s
5 362 M
(675. \(FEATURE\) Urban Planning Analytics - Analysis of Remote Sensing GIS Imagery of Urban Spra) s
5 351 M
(wls - 3 July 2019) s
5 340 M
(----------------------------------------------------------------------------------------------) s
5 329 M
(-----------------------------------------------) s
5 318 M
(1.Analyzing Builtup land, Water bodies etc., of an urban sprawl is crucial for urban planners ) s
5 307 M
(and is an apt application of image analysis. Urban sprawl is defined as expanse of urbanizatio) s
5 296 M
(n in suburbs and is not measured by governance limits. For example rankings of metropolitan ar) s
5 285 M
(eas in India is: https://en.wikipedia.org/wiki/List_of_metropolitan_areas_in_India \("...) s
5 274 M
(Rank    Metropolitan area       State/Territory Population) s
5 263 M
(Area) s
5 252 M
(\(in km2/sq mi\)) s
5 241 M
(1       Central National Capital Region Delhi, Haryana, Uttar Pradesh   25,735,000 \(2016\)[3]  ) s
5 230 M
(2,163 \(835\)[3]) s
5 219 M
(2       Mumbai Metropolitan Region      Maharashtra     20,800,000 \(2005\)[4]    4,354 \(1,681\)[) s
5 208 M
(5]) s
5 197 M
(3       Kolkata metropolitan area       West Bengal     14,720,000 \(2001\)[6]    1,851 \(715\)[7]) s
5 186 M
(4       Chennai metropolitan area       Tamil Nadu      13,300,253 \(2011\)       1,189 \(459\)...) s
5 175 M
("\)) s
5 164 M
(which is measure of urbanization.) s
5 142 M
(2.Convex Hull based on Scipy Spatial for urban sprawls has already been implemented in ImageGr) s
5 131 M
(aph_Keras_Theano.py for GIS images from SEDAC \(http://sedac.ciesin.columbia.edu/mapping/popest) s
5 120 M
(/gpw-v4/\) which is also invoked in Drone Online Shopping Delivery NeuronRain usecase) s
5 109 M
(3.A Machine Learning \(Random Forests\) and entropy based analysis of Chennai Urban Sprawl - htt) s
5 98 M
(ps://www.mdpi.com/1099-4300/19/4/163/pdf - studies the growth of built area and dwindling of w) s
5 87 M
(ater bodies from 1991 to 2016 and predicts scenario for 2027. Images referred to in this artic) s
5 76 M
(le are drawn from various Remote Sensing satellite sources \(LandSat, ISRO-Bhuvan Geo Platform ) s
5 65 M
(- https://bhuvan.nrsc.gov.in/bhuvan_links.php etc.,\) and are great references for Chennai Urba) s
5 54 M
(n Sprawl Land Usage,Water bodies,Greenery etc.,.) s
5 43 M
(4.Images from https://www.mdpi.com/1099-4300/19/4/163/pdf have been extracted and are analyzed) s
5 32 M
( for Red, Green and Blue Channels in this commit. New python function analyze_remotesensing_RG) s
5 21 M
(B_patches\(\) has been implemented for this which invokes OpenCV2 split\(\) of the image to Red,Gr) s
5 10 M
(een,Blue channels.) s
_R
S
%%Page: (446) 446
%%BeginPageSetup
_S
18 36 translate
/pagenum 446 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (446) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(5.Rationale for Red-Green-Blue Channel split of Urban Sprawl is most of the images are color c) s
5 681 M
(oded in Red, Green and Blue for Built Area, Greenery and Water bodies respectively and splitti) s
5 670 M
(ng to respective color channels layers the image.) s
5 659 M
(6.Each color channel - Red. Green and Blue - is a NumPy ndarray which is flattened and histogr) s
5 648 M
(ams are computed for each color channel.) s
5 637 M
(7.Color channel images are written to JPG files of respective suffixes and read again to compu) s
5 626 M
(te Numpy histogram) s
5 615 M
(8.Each color channgel image is grayscale only and percentage of white pixels of value 255 is t) s
5 604 M
(he sum total size of respective color patch in image.) s
5 593 M
(9.Scikit Learn Image has extract_patches_2d\(\) function - https://scikit-learn.org/stable/modul) s
5 582 M
(es/generated/sklearn.feature_extraction.image.extract_patches_2d.html - which can segment an i) s
5 571 M
(mage to patches or clusters of similar features. But a native implementation of patch extracti) s
5 560 M
(on has been preferred for color coded GIS Remote Sensing images.) s
5 549 M
(10.Ratio of white pixels to total number of pixels is computed from color channel image histog) s
5 538 M
(rams as:) s
5 527 M
(Size of 255 \(white\) bucket in image ndarray histogram / Sum of sizes of all buckets in image n) s
5 516 M
(darray histogram) s
5 505 M
(11.Images extracted from https://www.mdpi.com/1099-4300/19/4/163 and their color channel image) s
5 494 M
(s have been committed to ImageNet/testlogs/RemoteSensingGIS/) s
5 483 M
(12.Logs for this are committed to testlogs/ImageGraph_Keras_Theano.log.RemoteSensingGIS.3July2) s
5 472 M
(019 which print the percentage of water bodies \(blue\), built area \(red\) and greenery \(green\) i) s
5 461 M
(nferred from color channels) s
5 450 M
(13.Alternatively, image ndarray itself could have been mapped to histograms and ratio of respe) s
5 439 M
(ctive pixel color value buckets could have been computed. But exact color value for each color) s
5 428 M
( coding is not known and color channels grayscale the images and just number of white pixels \() s
5 417 M
(255\) have to be found.) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(--------------------------------------------) s
5 373 M
(676. \(FEATURE\) Image Analytics - ImageNet Keras-Theano - Random Forest Classification wrapper ) s
5 362 M
(for images - 4 July 2019) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(--------------------------------------------) s
5 329 M
(1.New wrapper function has been implemented which invokes scikit learn Random Forests - https:) s
5 318 M
(//scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklea) s
5 307 M
(rn.ensemble.RandomForestClassifier.predict to classify set of test images based on) s
5 296 M
(training images and training labels.) s
5 285 M
(2.This wrapper function random_forest_image_classification\(\) pre-processes the training and te) s
5 274 M
(st images by loading to CV2 and flattening the) s
5 263 M
(image ndarray and then reshaping and transposing it so that scikit learn accepts.) s
5 252 M
(3.First the random forest classifier which is a forest of lot of decision trees which vote to ) s
5 241 M
(decide the class label of a sample, is trained by fit\(\) for training images and then test imag) s
5 230 M
(es are labelled by predict\(\)) s
5 219 M
(4.Logs for this are committed to ImageGraph_Keras_Theano.log.RandomForests.4July2019) s
5 208 M
(5.Scikit learn provides train_test_split function which divides set of samples into training a) s
5 197 M
(nd test images based on which fit\(\) and predict\(\) are invoked.) s
5 186 M
(6.Alternative version without training and test split also follows the above as in logs.) s
5 164 M
(----------------------------------------------------------------------------------------------) s
5 153 M
(---------------------------------------------) s
5 142 M
(677. \(FEATURE\) Image Analytics - ImageNet Keras-Theano - Unsupervised Recursive Gloss Overlap ) s
5 131 M
(classifier based on ImageNet - 5 July 2019) s
5 120 M
(----------------------------------------------------------------------------------------------) s
5 109 M
(---------------------------------------------) s
5 98 M
(1.As opposed to Random Forest classifier implemented earlier based on scikit learn, NeuronRain) s
5 87 M
( unsupervised graph theoretic Recursive Gloss Overlap classifier has been applied for some tes) s
5 76 M
(t images) s
5 65 M
(2.Recursive Gloss Overlap classify\(\) function has been invoked from imagenet_imagegraph\(\) whic) s
5 54 M
(h was earlier only creating text graph from Keras) s
5 43 M
( predictions text for the image.) s
5 32 M
(3.Example Dense subgraph \(core number\) classifications for these images in the logs at testlog) s
5 21 M
(s/ImageGraph_Keras_Theano.log.ImageNetClassifier.5July2019 are reasonably accurate and classif) s
5 10 M
(y the images better. No training labelled data are required.) s
_R
S
%%Page: (447) 447
%%BeginPageSetup
_S
18 36 translate
/pagenum 447 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (447) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(-------------------------------------------) s
5 659 M
(678. \(THEORY\) Majority Hardness Amplification Lemma, Noise Sensitivity, Sensitivity, Block Sen) s
5 648 M
(sitivity, Condorcet Jury Theorem  - 6 July 2019, 6 October 2019 - related to 517 ) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(-------------------------------------------) s
5 615 M
(Hardness of a boolean function has been defined previously as how hard computationally it is t) s
5 604 M
(o compute the function with a circuit of size s:) s
5 593 M
(        if Pr\(C\(x\) != f\(x\)\) = delta where C\(x\) computes boolean function f\(x\), then f\(x\) delta) s
5 582 M
(-hard.) s
5 571 M
(Hardness amplification for Majority + VoterSAT boolean composition has been derived earlier as) s
5 560 M
(:) s
5 549 M
(        Hardness Amplification for Majority+Voter Composition <= 1/\(delta + or - error\)*\(1/2-1) s
5 538 M
(/3*pi\) + 1/pi + 6k*pi*\(delta + or - error\)^0.5) s
5 527 M
(for delta-hard voter SAT boolean functions \(i.e Probability of a circuit incorrectly computing) s
5 516 M
( a voter SAT = delta\)) s
5 494 M
(Noise Sensitivity of Majority function has been previously mentioned as O\(1/sqrt\(n*epsilon\)\) w) s
5 483 M
(here epsilon is probability of flip per bit. Therefore epsilon is nothing but probability that) s
5 472 M
( a voter boolean function is incorrectly computed and sent as input to Majority function. This) s
5 461 M
( implies Pr\(f\(x\) != C\(x\)\) = delta = epsilon = hardness of all voter functions.) s
5 439 M
(In all sections related to majority voting and majority+voterSAT boolean composition, measure ) s
5 428 M
(of sensitivity used is Noise Sensitivity which is Pr\(f\(x\) != f\(y\)\) for 2 correlated boolean st) s
5 417 M
(rings x and y in {0,1}^n and sensitivity and block sensitivity measures have been ignored. Lem) s
5 406 M
(ma 15 in reference 678.1 provides a simple boolean hypercube random walk proof of relation bet) s
5 395 M
(ween sensitivity and Noise sensitivity from which:) s
5 384 M
(        NoiseSensitivity\(f\) <= 2*delta*sensitivity for probability of a bit flip = delta = eps) s
5 373 M
(ilon) s
5 362 M
(        => NoiseSensitivity\(Majority\) = O\(1/sqrt\(n*epsilon\)\) <= 2*delta*sensitivity) s
5 340 M
(Since sensitivity conjecture \(block sensitivity <= poly\(sensitivity\)\) has been proved recently) s
5 329 M
(, sensitivity in previous inequality can be written as a function of block sensitivity. Majori) s
5 318 M
(ty Hardness Amplification ratio then can be written as:) s
5 296 M
( Hardness of Maj+voter composition       [c/sqrt\(n*delta\)] +/- randomerror) s
5 285 M
(-----------------------------------  =  ------------------------------    <= 2*delta*sensitivi) s
5 274 M
(ty/delta +/- error <= 2*sensitivity +/- error) s
5 263 M
(   Hardness of voter function                  delta) s
5 241 M
(which upperbounds the maximum hardness amplification of Majority+VoterSAT composition almost a) s
5 230 M
(s twice of sensitivity of majority function.) s
5 208 M
(Recent versions of Condorcet Jury Theorem by [Black] and [Ladha] lay emphasis on correlated vo) s
5 197 M
(ting in which voters are not independent but are statistically dependent and swayed by peer op) s
5 186 M
(inions en masse \(this is the most prevalent "Herding" phenomenon in real world voting and in s) s
5 175 M
(ocial networks\), and from [Ladha] performance of majority voting decreases as correlation incr) s
5 164 M
(eases. In boolean majority function this herding correlation of bits is formalized by Block se) s
5 153 M
(nsitivity and flipping a contiguous block of bit positions \(contiguous set of voters flip thei) s
5 142 M
(r decisions\) changes the outcome of the majority function. From [Ladha] more block sensitive \() s
5 131 M
(more correlated voters\) majority function is less effective it is and towards less goodness it) s
5 120 M
( tends to.) s
5 98 M
(NOTE: Throughout all sections on Majority Voting + VoterSAT boolean composition and its hardne) s
5 87 M
(ss amplification, Sensitivity measures have been assumed as main contributors to hardness beca) s
5 76 M
(use by definition a hard boolean function is not 100% correctly computable by a circuit and se) s
5 65 M
(nsitivity to input correlation \(flipped bits\) is the major factor preventing the correct compu) s
5 54 M
(tation by circuit. There could be other factors intrinsic to boolean function itself too apart) s
5 43 M
( from sensitivity measures which prevent a circuit from being perfect characterized by \(+/-\) e) s
5 32 M
(rror term above - randomized decision tree evaluation being one of them.) s
5 21 M
(        ) s
5 10 M
(References:) s
_R
S
%%Page: (448) 448
%%BeginPageSetup
_S
18 36 translate
/pagenum 448 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (448) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(-----------) s
5 681 M
(678.1 Smooth Boolean functions are easy - [Parikshit Gopalan,Noam Nisan,Rocco A.Servedio,Kunal) s
5 670 M
( Talwar,Avi Wigderson] - Lemma 15 - http://www.math.ias.edu/~avi/PUBLICATIONS/GopalanNSTW.pdf) s
5 659 M
(678.2 Proof of Sensitivity Conjecture - [Huang] - http://www.mathcs.emory.edu/~hhuan30/papers/) s
5 648 M
(sensitivity_1.pdf) s
5 637 M
(678.3 Journal of Economic Behavior & Organization Volume 26, Issue 3, May 1995, Pages 353-372,) s
5 626 M
( Information pooling through majority-rule voting: Condorcet's jury theorem with correlated vo) s
5 615 M
(tes - [Krishna K Ladha] - https://www.sciencedirect.com/science/article/pii/016726819400068P -) s
5 604 M
( "...Does majority-rule voting steer an imperfectly informed assembly of people towards the fu) s
5 593 M
(ll-information outcome? Condorcet's jury theorem provides an affirmative answer under certain ) s
5 582 M
(conditions. A key condition is that the votes be statistically independent; however, it is unr) s
5 571 M
(ealistic, and hence, unacceptable. This paper generalizes the jury theorem to certain general ) s
5 560 M
(models of correlated voting, viz., normal, hypergeometric and Polya distributions. The paper p) s
5 549 M
(roves that the effectiveness of majority-rule voting decreases as the correlation between vote) s
5 538 M
(s increases. Potential applications are indicated....") s
5 527 M
(678.4 The Theory of Committees and Elections. Cambridge University Press - [Duncan Black] - ht) s
5 516 M
(tps://www.springer.com/gp/book/9780792381105) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(----------------------------------------------) s
5 472 M
(679. \(FEATURE and THEORY\) Fraud Analytics - Principal Component Analysis and KMeans++ clusteri) s
5 461 M
(ng of an example Credit Card Transactions) s
5 450 M
(Dataset - 8 July 2019) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(----------------------------------------------) s
5 417 M
(1.This commit implements a rudimentary primitive fraud analytics Python class) s
5 406 M
(2.Fraud Analytics in the context of NeuronRain has already been implemented to some extent in ) s
5 395 M
(USBmd as wireless LAN traffic analytics and ftrace based analysis which is a low level intrusi) s
5 384 M
(on fraud analytics) s
5 373 M
(3.To broaden the purview new file FraudAnalytics.py has been added to AstroInfer repositories ) s
5 362 M
(and a basic fraud analysis function for credit card data set from https://www.kaggle.com/mlg-u) s
5 351 M
(lb/creditcardfraud/downloads/creditcardfraud.zip/3 has been implemented - creditcard_fraud_ana) s
5 340 M
(lytics\(\)) s
5 329 M
(4.Traditional algorithm to analyze frauds is to find the outliers in a dataset which are devia) s
5 318 M
(tions from the normal.) s
5 307 M
(5.This function applies kmeans++ clustering from scikit learn to classify the previous kaggle ) s
5 296 M
(creditcard transactions dataset into two clusters 0 \(normal\) and 1 \(potential fraud\).) s
5 285 M
(6.Kaggle dataset is in CSV format and first 500 rows of it are read by python CSV reader and a) s
5 274 M
( NumPy ndarrays are created from it which splits ) s
5 263 M
(the transactions into 150 rows training set and 350 rows test set.) s
5 252 M
(7.Columns of the CSV file are Time, 28 columns which obfuscate the identity of the cardholder,) s
5 241 M
( Amount, label 0 or 1 \(normal or fraud\) which are real transactions happened in 2013 and each ) s
5 230 M
(column is considered as a dimension for tranasaction vector) s
5 219 M
(8.Classifying high dimensional data has variety of clustering algorithms including kmeans++ \(h) s
5 208 M
(ttps://scikit-learn.org/stable/modules/clustering.html\)) s
5 197 M
(9.To simiplify high dimensional data, convention followed is to apply Principal component Anal) s
5 186 M
(ysis to reduce the number of dimensions and then do clustering. e.g https://scikit-learn.org/s) s
5 175 M
(table/modules/generated/sklearn.decomposition.PCA.html, https://scikit-learn.org/stable/auto_e) s
5 164 M
(xamples/cluster/plot_kmeans_digits.html#sphx-glr-auto-examples-cluster-plot-kmeans-digits-py) s
5 153 M
(10.Therefore previous credit card transactions vectors are clustered by fit\(\) of the train dat) s
5 142 M
(aset followed by predict\(\) for test dataset.) s
5 131 M
(11.Both predictions- with and without PCA - have been printed for 350 rows test dataset \(0 - n) s
5 120 M
(ormal,1 - fraud\):) s
5 109 M
(kmeans estimator pred\(\) labels: [1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0) s
5 98 M
( 0 0 0 0 0 0) s
5 87 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 76 M
( 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 65 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 54 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 43 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 32 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 21 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 10 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0) s
_R
S
%%Page: (449) 449
%%BeginPageSetup
_S
18 36 translate
/pagenum 449 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (449) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 681 M
(kmeans estimator pca pred\(\) labels: [1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0) s
5 670 M
( 0 0 0 0 0 0 0 0) s
5 659 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 648 M
( 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 637 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0) s
5 626 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 615 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 604 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 593 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) s
5 582 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0) s
5 571 M
( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]) s
5 560 M
(12.Another alternative is to consider the dataset as multiple concurrent timeseries and plot t) s
5 549 M
(he curves per cardholder identity. Spikes in timeseries are outliers which could be potentiall) s
5 538 M
(y fraudulent.) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(------------------------------------------------) s
5 494 M
(680. \(FEATURE\) Intrinsic Merit of Audio - Speech Recognition Integration and Graph Tensor Neur) s
5 483 M
(on Merit of the recognized speech text -) s
5 472 M
(9 July 2019) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(------------------------------------------------) s
5 439 M
(1.AudioToBitMatrix python implementation has been updated to include a new function which read) s
5 428 M
(s an audio WAV file of human speech and invokes speech recognizer \(PocketSphinx\) on the audio ) s
5 417 M
(to get speech text and finds the Recursive Lambda Function Growth intrinsic merit of the speec) s
5 406 M
(h) s
5 395 M
(text) s
5 384 M
(2.Audio merit is split into two - Speech and Music) s
5 373 M
(3.An example speech audio file \(voice of author - K.Srinivasan - explains the 6 types of intri) s
5 362 M
(nsic merit analytics implemented in NeuronRain AstroInfer - text,video,speech,music,people-exp) s
5 351 M
(eriential-intrinsic, people-attrition or HR analytics\) is used for speech recognition - music_) s
5 340 M
(pattern_mining/testlogs/AudioGraphExample_SpeechRecognition_2019-07-09-103018.wav) s
5 329 M
(4.Prerequisite packages to be installed are Python SpeechRecognition, PocketSphinx, Swig, ALSA) s
5 318 M
( development library, PulseAudio development library) s
5 307 M
(5.PocketSphinx recognized speech text is printed \(though not accurate\) and Recursive Lambda Fu) s
5 296 M
(nction Growth grow_lambda_function3\(\) is invoked on recognized speech text to create textgraph) s
5 285 M
(, grow lambda functions from textgraph random walks or cycles and print various merit quantiti) s
5 274 M
(es) s
5 263 M
(6.This assumes Speech Recognizer is accurate to large extent.) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(----------------------------------------------) s
5 219 M
(681. \(THEORY and FEATURE\) Intrinsic Merit of Music - MFCC Earth Mover Distance similarity base) s
5 208 M
(d Music Recommender - 12 July 2019) s
5 197 M
(----------------------------------------------------------------------------------------------) s
5 186 M
(----------------------------------------------) s
5 175 M
(1.Mel Frequency Cepstral Coefficients of a music waveform are concise measures of music genre ) s
5 164 M
(and have been included in AudioToBitMatrix implementation) s
5 153 M
(2.Music Similarity Measure based on MFCC spectral signatures is described in http://citeseerx.) s
5 142 M
(ist.psu.edu/viewdoc/download?doi=10.1.1.13.8524&rep=rep1&type=pdf which clusters music files b) s
5 131 M
(ased on earth mover distance between MFCCs of any two music files) s
5 120 M
(3.Earth Mover Distance also known as Wasserstein distance is a function in SciPy - https://doc) s
5 109 M
(s.scipy.org/doc/scipy/reference/generated/scipy.stats.wasserstein_distance.html) s
5 98 M
(4.Earth Mover Distance is the amount of work required to transform one distribution \(set parti) s
5 87 M
(tion or histogram\) to another distribution \(another set partition or histogram\) and thus is di) s
5 76 M
(stance measure between two set partitions.) s
5 65 M
(5.A miniature music recommender systems has been implemented based on MFCC earth mover distanc) s
5 54 M
(e which analyzes pair of music files for MFCCs and finds the earth mover similarity between th) s
5 43 M
(e mean of MFCCs of two music files.) s
5 32 M
(6.Pairwise earth mover distances \(EMD\) are sorted by values of similarity \(low EMD values impl) s
5 21 M
(y high similarity\)) s
5 10 M
(7.3 music files have been pairwise analyzed for MFCC EMD similarity for example \(2 files of Ba) s
_R
S
%%Page: (450) 450
%%BeginPageSetup
_S
18 36 translate
/pagenum 450 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (450) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ch Sonata and 1 file of Veena Instrumental - S.Balachander's Amritavarshini - respective copyr) s
5 681 M
(ights attributed\) ) s
5 670 M
(8.Though number of files analyzed is small, Bach Sonata files have high EMD similarities compa) s
5 659 M
(red to Bach and Veena Instrumental suggesting a clustering of oriental and western classical m) s
5 648 M
(usic in terms of spectral analysis.) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(-------------------------------------------) s
5 604 M
(682. \(THEORY\) KRW Conjecture, Majority + VoterSAT Boolean Function Composition, BKS Conjecture) s
5 593 M
(, Computing any function by Parity - 12 July 2019, 17 July 2019, 18 July 2019, 19 July 2019, 2) s
5 582 M
(2 July 2019 - related to 365, 368 and all sections on Majority Voting) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(-------------------------------------------) s
5 549 M
(Boolean function composition of Majority and any Voter boolean function and its relevance to K) s
5 538 M
(RW Conjecture \(Depth\(f+g\) ~= Depth\(f\) + Depth\(g\) or FormulaSize\(f+g\) ~= FormulaSize\(f\) * Formu) s
5 527 M
(laSize\(g\)\) and Communication Complexity - KW Relations - which is an open problem - have been ) s
5 516 M
(described in detail earlier and an inequality below for lower bound on depth of circuit comput) s
5 505 M
(ing Majority+VoterSAT composition has been derived assuming KRW conjecture:) s
5 494 M
(        D\(Maj + Voter\) = CommunicationComplexity\(R\(Maj,Voter\)\) >= 5.3*logm  + n - O\(m*logm/n\)) s
5 483 M
(for m voters having voter SATs of n variables per voter.) s
5 461 M
(KRW Conjecture for composing any boolean function f and parity has been proved by [Hastad] and) s
5 450 M
( [Dinur-OrMeir]. Proving the general case of KRW conjecture implies P != NC1 \(not all sequenti) s
5 439 M
(al polytime algorithms are logdepth parallelizable\). If every Voter boolean functions are comp) s
5 428 M
(utable by circuits of AND, OR and Parity function, previous composition of Majority + VoterSAT) s
5 417 M
( is reduced to Majority + function_of\(Parity\) composition replacing Voter SAT circuit by a cir) s
5 406 M
(cuit of AND, OR and parity gates. Recent result in reference 682.2 delves on upperbounds and l) s
5 395 M
(owerbounds for computing symmetric and threshold boolean functions by parity gates \(Razborov a) s
5 384 M
(pproximation of AND and OR by low degree polynomials on F[2] and composing them\). Voter decisi) s
5 373 M
(on function can also be thought of as a threshold function \(weighting the variables\). Stabilit) s
5 362 M
(y of Interview TQBF has been derived earlier in the context of BKS Conjecture by formalizing a) s
5 351 M
( question-answering in machine learning and learning theory as a weighted linear threshold fun) s
5 340 M
(ction on answers to questions and their respective weights. Generalizing proof of KRW Conjectu) s
5 329 M
(re for composing a function and parity to composition of a function and function_of\(parity\) pr) s
5 318 M
(oves the general case of KRW Conjecture. In reference 682.4 previous Communication Complexity ) s
5 307 M
(\(CC\) Lower bound of composition has been refined to CC\(KWf + Un\) \342\\211\245 log L\(f\) + n \342\\210\\222) s
5 296 M
( 2 log m \342\\210\\222 10 implying CC\(Majority+Voter\) \342\\211\245 5.3*log m + n \342\\210\\222 2*log m \342\\210) s
5 285 M
(\\222 10 assuming a universal Voter relation.) s
5 263 M
(Assuming Voter SATs are indeed Linear or Polynomial Threshold Functions by which each voter sc) s
5 252 M
(ores the candidate to vote \(0 or 1\) based on some variables \(e.g answers to questions\) and vot) s
5 241 M
(es for or against based on if the evaluated LTF or PTF exceed threshold or not, is a learning ) s
5 230 M
(theoretic perspective as opposed to SAT based decision making. An experimental proof of BKS Co) s
5 219 M
(njecture \(Majority is least stable\) previously is restricted to LTFs only. Polynomial Threshol) s
5 208 M
(d Functions have a circuit representation of depth 2 consisting of Parity and Threshold gates ) s
5 197 M
(- layer 1 of parity gates for each monomial and layer 2 of a single threshold gate. From class) s
5 186 M
(ic result of [Minsky-Papert], any computable function can be written in terms of threshold fun) s
5 175 M
(ction. Circuit representation of Polynomial Threshold Functions are thus helpful to compute an) s
5 164 M
(y Voter Decision Function in terms of Parity and Threshold gates. By Chow's Theorem for thresh) s
5 153 M
(old functions, any 2 functions f \(LTF\) and g \(any function\) are equivalent if the degree-0 and) s
5 142 M
( degree-1 Fourier coefficients in Fourier expansion of f and g are equal.) s
5 120 M
(Assuming KRW Conjecture, Formula Size of the Majority + VoterSAT boolean composition is:) s
5 109 M
(        FormulaSize\(Majority + VoterSAT\) ~= FormulaSize\(Majority\) * FormulaSize\(VoterSAT\)) s
5 98 M
(        => FormulaSize\(Majority + VoterSAT\) ~=  m^5.3 * FormulaSize\(VoterSAT\) ) s
5 87 M
(                \(Formula Size implies the circuit composition has fanout 1\)) s
5 76 M
(It is known that set of languages of Turing Machine deciding an input in time\(t\) is contained ) s
5 65 M
(in set of languages accepted by a circuit of size\(tlogt\). Combining this to the previous compo) s
5 54 M
(sition formula size bound assuming KRW Conjecture an estimated runtime of a Turing Machine equ) s
5 43 M
(ivalent to Majority + VoterSAT composition can be obtained by solving for t in the equality:) s
5 32 M
(        tlogt = m^5.3 * FormulaSize\(VoterSAT\)) s
5 21 M
(        \(or\) t^t = 2^\(m^5.3 * FormulaSize\(VoterSAT\)\)) s
_R
S
%%Page: (451) 451
%%BeginPageSetup
_S
18 36 translate
/pagenum 451 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (451) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(if t=O\(FormulaSize\(VoterSAT\)\):) s
5 681 M
(logt = k*m^5.3 \(or\) t = 2^\(k*m^5.3\) for some constant k which is an EXPTIME Turing Machine \(i.) s
5 670 M
(e exponential in number of voters\) for Majority Voting Circuit Composition, implying unbounded) s
5 659 M
( depth.) s
5 637 M
(PTF can encode a CNF MAX k-SAT - Example:) s
5 626 M
(\(x1 V !x3 V x4\) /\\ \(x2 V x3 V x5\) /\\ \(x1 V !x2 V x3\) can be encoded as 3-sparse PTF \(x1\)\(1-x3\)) s
5 615 M
(\(x4\) + \(x2\)\(x3\)\(x5\) + \(x1\)\(1-x2\)\(x3\) >= k) s
5 593 M
(References:) s
5 582 M
(-----------) s
5 571 M
(682.1 KRW Conjecture results survey - [OrMeir] - https://simons.berkeley.edu/sites/default/fil) s
5 560 M
(es/docs/10492/presentation.pdf) s
5 549 M
(682.2 Parity helps compute Majority - Theorem 4 and Theorem 8 on computing symmetric boolean f) s
5 538 M
(unctions and threshold functions by parity - [Igor C. Oliveira\342\\210\\227 Department of Computer) s
5 527 M
( Science University of Oxford, Rahul Santhanam\342\\200\240 Department of Computer Science University) s
5 516 M
( of Oxford, Srikanth Srinivasan\342\\200\241 Department of Mathematics IIT Bombay] - https://eccc.wei) s
5 505 M
(zmann.ac.il/report/2019/073/download) s
5 494 M
(682.3 Proof of KRW Conjecture for composing a function and parity - [Dinur] - http://drops.dag) s
5 483 M
(stuhl.de/opus/volltexte/2016/5841/) s
5 472 M
(682.4 Improved Composition Theorems for Functions and Relations - [Koroth-OrMeir] - Theorem 8 ) s
5 461 M
(- http://drops.dagstuhl.de/opus/volltexte/2018/9452/pdf/LIPIcs-APPROX-RANDOM-2018-48.pdf) s
5 450 M
(682.5 Toward Better Formula Lower Bounds: An Information Complexity Approach to the KRW Compos) s
5 439 M
(ition Conjecture\342\\210\\227 - [Dmitry Gavinsky\342\\200\240 Or Meir\342\\200\241 Omri Weinstein \302\247 Avi Wigders) s
5 428 M
(on\302\266] - http://www.math.ias.edu/~avi/PUBLICATIONS/GavinskyMeWeWi2016.pdf - Section 1.2.1 - For) s
5 417 M
(mula size of Composition of a function and Parity by [Andreev] and [Hastad] - "...L\(g \\005 \342) s
5 406 M
(\\212\\225n\) = L\(g\) \302\267 n^2/poly log m = L\(g\) \302\267 L\(\342\\212\\225n\)/ poly log\(m\),..") s
5 395 M
(682.6 Linear and Polynomial Threshold Functions - http://www.contrib.andrew.cmu.edu/~ryanod/ -) s
5 384 M
( Page 114-116 - Chapter 5 - Chow's Theorem 5.1 and Theorem 5.8, Threshold of Parities Circuit ) s
5 373 M
(\(depth 2 comprising parity gates in layer 1 and threshold gate at layer 2\) computing a Polynom) s
5 362 M
(ial Threshold Function) s
5 351 M
(682.7 Perceptrons - [Minsky-Papert] - \(1972:232\): "... a universal computer could be built ent) s
5 340 M
(irely out of linear threshold modules. This does not in any sense reduce the theory of computa) s
5 329 M
(tion and programming to the theory of perceptrons.") s
5 318 M
(682.8 Circuit Complexity Lecture Notes - http://www.cs.umd.edu/~jkatz/complexity/f05/lecture4.) s
5 307 M
(pdf - Section 1.2 - "Theorem 1 If t\(n\) \342\\211\245 n, then time\(t\) \342\\212\\206 size\(tlog t\)....") s
5 296 M
(682.9 Satisfiability and Derandomization for Small Polynomial Threshold Circuits - CircuitSAT ) s
5 285 M
(for circuits of PTF gates - https://eccc.weizmann.ac.il/report/2018/115/download/ - s-sparse P) s
5 274 M
(TFs having s monomials can encode MAXSAT of s clauses - Previous Boolean Composition of Majori) s
5 263 M
(ty and VoterSAT can alternatively be stated as a Circuit Composition of Majority and Voter PTF) s
5 252 M
( circuits - section 1.4 - "...for fixed sparsity s, much more expressive. For example, the pol) s
5 241 M
(ynomial p\(x1, . . . , xn\) = Qn i=1\(xi \342\\212\\2251\) = Qn i=1\(1\342\\210\\222xi\) has sparsity 1 by our) s
5 230 M
( definition, but sparsity 2^n by the usual definition. Sakai, Seto, Tamaki and Teruyama [SSTT1) s
5 219 M
(6] recently reported a faster-than-brute-force algorithm for MAX-kSAT for any constant k with ) s
5 208 M
(arbitrary weights \(which implies a satisfiability algorithm for degree-k PTFs\)...") s
5 197 M
(682.10 Bounded Depth Circuits with Weighted Symmetric Gates: Satisfiability, Lower Bounds and ) s
5 186 M
(Compression - [Sakai-Seto-Tamaki-Teruyama] - https://pdfs.semanticscholar.org/084f/27ca4981589) s
5 175 M
(92b5e5a5a61dbaf4161503b5c.pdf) s
5 164 M
(682.11 Learning DNF - [Klivans-Servedio] - https://pdf.sciencedirectassets.com/272574/1-s2.0-S) s
5 153 M
(0022000000X01572/1-s2.0-S0022000003001363/main.pdf?X-Amz-Security-Token=AgoJb3JpZ2luX2VjEJn%2F) s
5 142 M
(%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJIMEYCIQDpY%2BJ8ysvIVFtFSRPRVv6S2w42%2FtCoesbH0lj0) s
5 131 M
(MJMoawIhAKgdNj9DXXjJN1myHJPiU14ZKBUvHmphnWHLaGd%2F0LCFKtoDCBEQAhoMMDU5MDAzNTQ2ODY1Igwd1ipPK634) s
5 120 M
(MOjEQmcqtwPLCTvVsLs90BxtDUtf9IbmHo6ay73ITn2Thu7F%2F%2BdbUWumBXt4nTo%2FyRZle3Bz4V2GoWLCRjc6AEDJ) s
5 109 M
(1GaC4Enc3HMXOtC3PPiKo5DaQ9EH%2BaGSUqb1Nm1fu4OiohaH%2F7%2FqLSau0TqH5QbnoCzqb9F8cZwI4%2FNhIFdm6I) s
5 98 M
(bL3YhOiizEDKzd5tylsXH46lNIZNOcPouFRCZC%2B6korSB0yEhTzp%2BxlOBosz5%2BknhQOdJGsgog7aHP5O7iB2Aml3) s
5 87 M
(V%2BIwQAg8Pl%2BFZ9Dc8WyAtxiQU%2Bh%2BcdJh9faDjqDbjG7VkzSuhKfVH%2B6tQiwbSPyLSLvosFne65KYI%2FdPyt) s
5 76 M
(CJ5C7sHMuRot3V4JGJHhmcmyz5h8YeVK3eTwigD4j1cPzZQpifS33XIaca1do32RJNs9%2BaWCC6dKWlOl6s4wHxVQE%2B) s
5 65 M
(cJ6ixOSsbjKuRo%2FRS9dFJ5%2F%2FCfVBoHG2F%2B9rDDktiSZiegDoK7ndITZvPeymzrTbAVZqIHHx83sL3TfJiFLPPw) s
5 54 M
(rScwhLkfoF3I32griAkFIURzNWYF%2B6bzxsh1QxQUgNIdshGhmyRRca9ktj33sPdyvFDBEHLYHdAhMPHM5ekFOrMBR1vs) s
5 43 M
(5b47SxPOuk17oLpowsH6xCobvsX76f2ShEhvoQNLqNQis%2F6LYtV6QNLgUQj%2BjUobapU2SaT2pMqPrwMvshW06K5Kt1) s
5 32 M
(GQMWnF84OiPAxss85P45Za7aCwifUX1GCflCxtm%2FWFqmXuHDrq2uxze6LlzExKN0mglTcusR7rZXTolUTqXT2zZ1mjtR) s
5 21 M
(Xn3mWYIE5uoAS320ECsACejGBOtTCISfjA2GYNQl1Je%2FqASIPd2aM%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-) s
5 10 M
(Amz-Date=20190725T091916Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PH) s
_R
S
%%Page: (452) 452
%%BeginPageSetup
_S
18 36 translate
/pagenum 452 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (452) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(CVTYQWHGSGT4%2F20190725%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=b04a101db0c513928d4056) s
5 681 M
(5cf895dfc601324123b95c08e2938f461bd76c3490&hash=eb5b8aed06292daa7502dca41a62db9110c81a7c336d15) s
5 670 M
(43c86683f1bb58faa3&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S) s
5 659 M
(0022000003001363&tid=spdf-f4e32f52-621c-4768-8b49-b835a3261877&sid=31838a2e23fe724bb06b9d4-5a4) s
5 648 M
(c8715f5a8gxrqa&type=client - "...Using techniques from learning theory, we show that any s-ter) s
5 637 M
(m DNF over n variables can be computed by a polynomial threshold function of degree O\(n^\(0.33\)) s
5 626 M
(log s\): This upper bound matches, up to a logarithmic factor, the longstanding lower bound giv) s
5 615 M
(en by Minsky and Papert in their 1968 book Perceptrons....") s
5 604 M
(682.12 New Degree bounds for Polynomial Threshold Functions - [O'Donnell-Servedio] - https://k) s
5 593 M
(ilthub.cmu.edu/articles/New_degree_bounds_for_polynomial_threshold_functions/6607712/files/120) s
5 582 M
(98267.pdf - "...We prove that any Boolean formula of depth d and size s is computed by a polyn) s
5 571 M
(omial threshold function of degree \342\\210\\232s\(log s\)^O\(d\)....") s
5 560 M
(682.13 Block Composed Functions and Hardness Amplification - https://arxiv.org/pdf/1710.09079.) s
5 549 M
(pdf - "...The approximate degree of a Boolean function f : {\342\\210\\2221, 1}^n \342\\206\\222 {\342\\210) s
5 538 M
(\\2221, 1}, denoted deg g\(f\), is the least degree of a real polynomial p such that |p\(x\) \342\\210) s
5 527 M
(\\222 f\(x\)| \342\\211\244 1/3 for all x \342\\210\\210 {\342\\210\\2221, 1}^n ... Until very recently, the metho) s
5 516 M
(d of dual polynomials had been used exclusively to prove hardness amplification results for bl) s
5 505 M
(ock-composed functions. That is, the harder function g would be obtained by block-composing f ) s
5 494 M
(with another function h, i.e., g = h \342\\227\246 f. Here, a function g : {\342\\210\\2221, 1}^n\302\267m \342\\206) s
5 483 M
(\\222 {\342\\210\\2221, 1} is the block-composition of h: {\342\\210\\2221, 1}^n \342\\206\\222 {\342\\210\\2221, 1) s
5 472 M
(} and f : {\342\\210\\2221, 1}^m \342\\206\\222 {\342\\210\\2221, 1} if g interprets its input as a sequence ) s
5 461 M
(of n blocks, applies f to each block, and then feeds the n outputs into h...." - Majority+Vote) s
5 450 M
(rSAT boolean composition can be viewed as block composition by approximating Majority and Vote) s
5 439 M
(rSAT by low-degree polynomials h and f ) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(----------------------------------------------) s
5 395 M
(683.\(THEORY\) Proof of KRW Conjecture for Majority+VoterSAT/VoterPTF composition - related to 6) s
5 384 M
(82 - 23 July 2019) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(----------------------------------------------) s
5 351 M
(Caution: This section is experimental and subject to errors) s
5 329 M
(Previously a reduction from CNF MAX-k-SAT to PTFSAT was described with an example. Any Voter S) s
5 318 M
(AT can be encoded as a Polynomial Threshold Function g and any Polynomial Threshold Function c) s
5 307 M
(an be computed by a Threshold-of-Parities circuit of depth 2 described in previous section:) s
5 296 M
(        g = threshold + parity) s
5 285 M
(If Majority function is denoted by f, Majority + VoterSAT/VoterPTF composition can be written ) s
5 274 M
(in terms of parity as:) s
5 263 M
(        f + g = f + threshold + parity) s
5 252 M
(But composition is associative and therefore:) s
5 241 M
(        \(f + threshold\) + parity = f + \(threshold + parity\)) s
5 230 M
(But composition \(f + threshold\) previously can be any function h:) s
5 219 M
(        \(f + threshold\) + parity = h + parity) s
5 208 M
(which is composition of some function and parity and KRW conjecture for composing any function) s
5 197 M
( and parity has been already proved \([Hastad],[Andreev],[Dinur]\) and thus KRW Conjecture for M) s
5 186 M
(ajority + VoterSAT/VoterPTF composition is proved immediately because previous breakdown of an) s
5 175 M
(y function as threshold of parities reduces Majority + VoterSAT/VoterPTF composition to compos) s
5 164 M
(ition of any function to parity. ) s
5 142 M
(For a general case of composing any function f to another function g, applying previous thresh) s
5 131 M
(old of parities representation to both f and g:) s
5 120 M
(        f + g = \(threshold + parity\) + \(threshold + parity\)) s
5 109 M
(and applying associativity of composition:) s
5 98 M
(        f + g = \(threshold + parity + threshold\) + parity) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(---------------------------------------------) s
5 54 M
(684. \(FEATURE\) Urban Planning/GIS Image Analytics - scikit learn extract_patches_2d\(\) integrat) s
5 43 M
(ion - 25 July 2019) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(---------------------------------------------) s
5 10 M
(1. Scikit Learn extract_patches_2d\(\) has been invoked in a wrapper function analyze_remotesens) s
_R
S
%%Page: (453) 453
%%BeginPageSetup
_S
18 36 translate
/pagenum 453 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (453) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ing_2d_patches\(\) for patches analysis of) s
5 681 M
(Remote Sensing Imagery) s
5 670 M
(2. Patch ndarrays are flattened and pixel histogram is computed for each patch of an image) s
5 659 M
(3. Maximum pixel bucket in the patch histogram is an indicator of class of the patch.) s
5 648 M
(4. This is in addition to RGB patch analysis function implemented earlier for Red-Green-Blue c) s
5 637 M
(hannel classification of an image) s
5 626 M
(5. Logs of extract_patches_2d\(\) and the patch histograms for 2 example remote sensing images a) s
5 615 M
(re at ImageNet/testlogs/ImageGraph_Keras_Theano.log.RemoteSensingGIS.25July2019) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(----------------------------------------------) s
5 571 M
(685. \(FEATURE\) People Analytics - Kaggle LinkedIn Dataset Analysis - 26 July 2019) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(----------------------------------------------) s
5 538 M
(1. This commit introduces a new function in People Analytics implementation - linkedin_dataset) s
5 527 M
(_tenure_analytics\(\) - which parses Kaggle LinkedIn dataset from https://www.kaggle.com/killbot) s
5 516 M
(/linkedin and computes various correlation coefficients between column attributes.) s
5 505 M
(2. Following are the People Analytics field attributes in LinkedIn obfuscated dataset which ha) s
5 494 M
(s almost 15000 rows:) s
5 483 M
(['avg_n_pos_per_prev_tenure', 'avg_pos_len', 'avg_prev_tenure_len', 'c_name', 'm_urn', 'n_pos') s
5 472 M
(, 'n_prev_tenures', 'tenure_len', 'age', 'beauty', 'beauty_female', 'beauty_male', 'blur', 'bl) s
5 461 M
(ur_gaussian', 'blur_motion', 'emo_anger', 'emo_disgust', 'emo_fear', 'emo_happiness', 'emo_neu) s
5 450 M
(tral', 'emo_sadness', 'emo_surprise', 'ethnicity', 'face_quality', 'gender', 'glass', 'head_pi) s
5 439 M
(tch', 'head_roll', 'head_yaw', 'img', 'mouth_close', 'mouth_mask', 'mouth_open', 'mouth_other') s
5 428 M
(, 'skin_acne', 'skin_dark_circle', 'skin_health', 'skin_stain', 'smile', 'african', 'celtic_en) s
5 417 M
(glish', 'east_asian', 'european', 'greek', 'hispanic', 'jewish', 'muslim', 'nationality', 'nor) s
5 406 M
(dic', 'south_asian', 'n_followers'] which include average variables for tenure, positions or d) s
5 395 M
(esignations per tenure, number of previous tenures, tenure lengths etc.,) s
5 384 M
(3.Pairwise kendall-tau Correlation coefficients of 3 important variables are computed:) s
5 373 M
(        - average number of positions per previous tenure) s
5 362 M
(        - average length of a position) s
5 351 M
(        - average length of previous tenures) s
5 340 M
(4.Some preprocessing of the linkedin CSV dataset was required to cast the type to integer) s
5 329 M
(5.VectorAssembler is instantiated to create necessary subset projections of the linkedin datas) s
5 318 M
(et columns) s
5 307 M
(6.5 important columns of the Spark CSV dataframe are sliced by list comprehension to 5 arrays ) s
5 296 M
(for \(ethnic, emotional, physical and racial fields are ignored\):) s
5 285 M
(        - average number of positions per previous tenure) s
5 274 M
(        - average length of a position) s
5 263 M
(        - average length of previous tenures) s
5 252 M
(        - number of previous tenures) s
5 241 M
(        - tenure length ) s
5 230 M
(and mapped to a Pandas DataFrame which supports correlation matrix for all datatypes) s
5 219 M
(7.Pandas correlation matrix is printed for these 5 fields:) s
5 208 M
(                                avg_n_pos_per_prev_tenure  avg_pos_len  avg_prev_tenure_len  n) s
5 197 M
(_prev_tenures  tenure_len) s
5 186 M
(avg_n_pos_per_prev_tenure                   1.000000     0.804373             0.836112        ) s
5 175 M
(0.836637    0.832915) s
5 164 M
(avg_pos_len                                 0.804373     1.000000             0.983461        ) s
5 153 M
(0.978873    0.993264) s
5 142 M
(avg_prev_tenure_len                         0.836112     0.983461             1.000000        ) s
5 131 M
(0.968333    0.975659) s
5 120 M
(n_prev_tenures                              0.836637     0.978873             0.968333        ) s
5 109 M
(1.000000    0.981673) s
5 98 M
(tenure_len                                  0.832915     0.993264             0.975659        ) s
5 87 M
(0.981673    1.000000) s
5 65 M
(8.In addition to basic designation\(position\),remuneration, tenure duration correlations implem) s
5 54 M
(ented earlier previous variables provide fine grained pattern analysis.) s
5 43 M
(9,From previous correlation matrix, an obvious negative or low correlation is:) s
5 32 M
(         avg_n_pos_per_prev_tenure - versus - \(avg_prev_tenure_len, n_prev_tenures, tenure_len) s
5 21 M
(\)) s
5 10 M
(implying increased average number of designations\(positions\) in previous tenures implies low a) s
_R
S
%%Page: (454) 454
%%BeginPageSetup
_S
18 36 translate
/pagenum 454 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (454) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(verage previous tenure lengths, low number of previous tenures and low tenure length which \(ex) s
5 681 M
(luding low number of previous tenures\) is against what intuition suggests.) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(---------------------------------------------) s
5 637 M
(686. \(FEATURE\) People Analytics - Kaggle LinkedIn DataSet - Experiential and Degree Intrinsic ) s
5 626 M
(Merit - 27 July 2019) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(---------------------------------------------) s
5 593 M
(1.In continuation to previous commit for linkedin dataset analytics, this commit implements co) s
5 582 M
(mputation of lognormal experiential intrinsic merit and degree based experiential intrinsic me) s
5 571 M
(rit for all profiles in linkedin dataset.) s
5 560 M
(2.Pandas DataFrame has been expanded to include two new columns - lognormal_experiential_merit) s
5 549 M
(s and degree_experiential_merits - and correlation matrix is computed for this 7 rows * 7 colu) s
5 538 M
(mns.) s
5 527 M
(3.Experience of the n-th profile is derived from dataset columns as:) s
5 516 M
(          experience = avg_n_pos_per_prev_tenure[n] * avg_pos_len[n] * n_prev_tenures[n] + ten) s
5 505 M
(ure_len[n]) s
5 494 M
(4.Correlation coefficients for all pairs of 7 variables from logs:) s
5 472 M
(linkedin_dataset_tenure_analytics\(\): pandas correlation coefficient =                         ) s
5 461 M
(        avg_n_pos_per_prev_tenure  avg_pos_len  ...  lognormal_experiential_merits  degree_exp) s
5 450 M
(eriential_merits) s
5 439 M
(avg_n_pos_per_prev_tenure                       1.000000     0.804373  ...                    ) s
5 428 M
(   0.687246                    0.116707) s
5 417 M
(avg_pos_len                                     0.804373     1.000000  ...                    ) s
5 406 M
(   0.566021                    0.112341) s
5 395 M
(avg_prev_tenure_len                             0.836112     0.983461  ...                    ) s
5 384 M
(   0.673678                    0.156701) s
5 373 M
(n_prev_tenures                                  0.836637     0.978873  ...                    ) s
5 362 M
(   0.553288                    0.058373) s
5 351 M
(tenure_len                                      0.832915     0.993264  ...                    ) s
5 340 M
(   0.532364                    0.076770) s
5 329 M
(lognormal_experiential_merits                   0.687246     0.566021  ...                    ) s
5 318 M
(   1.000000                    0.426055) s
5 307 M
(degree_experiential_merits                      0.116707     0.112341  ...                    ) s
5 296 M
(   0.426055                    1.000000) s
5 274 M
([7 rows x 7 columns]) s
5 252 M
(5.Previous matrix shows highly negative or low correlation between first 3 tenure variables an) s
5 241 M
(d degree experiential merits and a medium correlation between first 3 variables and lognormal_) s
5 230 M
(experiential_merits.) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(----------------------------------------------) s
5 186 M
(687. \(THEORY\) Approximate Polynomials and Approximate Degree of Boolean Functions, Dual Polyno) s
5 175 M
(mials, Hardness Amplification, KRW Conjecture, Boolean Composition of Majority and VoterSAT/Vo) s
5 164 M
(terPTF, Communication Complexity, Linear Program Primal/Dual - related to 365, 368, 682 - ) s
5 153 M
(27 July 2019) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(---------------------------------------------- ) s
5 120 M
(From 682.13, the approximate degree of a Boolean function f : {\342\\210\\2221, 1}^n \342\\206\\222 {\342) s
5 109 M
(\\210\\2221, 1}, denoted deg g\(f\), is the least degree of a real polynomial p such that |p\(x\) \342) s
5 98 M
(\\210\\222 f\(x\)| \342\\211\244 1/3 for all x \342\\210\\210 {\342\\210\\2221, 1}^n. Existence of approximate poly) s
5 87 M
(nomials implies that the function is easy. Therefore non-existence of approximate polynomials ) s
5 76 M
(implies the function is hard. Fact that f can be approximated by a real polynomial is equivale) s
5 65 M
(nt to feasibility of a Linear Program on Fourier coefficients. Feasibility of dual of this lin) s
5 54 M
(ear program on Fourier Coefficients implies the primal boolean function is hard to approximate) s
5 43 M
( by a real polynomial and thus is an alternative way to prove hardness of boolean functions an) s
5 32 M
(d their compositions especially block-compositions and is quite relevant to Majority+VoterSAT ) s
5 21 M
(composition and KRW-Communication Complexity based size and depth lowerbounds of it previously) s
5 10 M
( derived based on Sensitivity measures. Approximate degree of t-threshold functions is sqrt\(t\() s
_R
S
%%Page: (455) 455
%%BeginPageSetup
_S
18 36 translate
/pagenum 455 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (455) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(n-t\)\) and approximate degree of Majority or Parity is Theta\(n\). From [Nisan-Szegedy], approxde) s
5 681 M
(gree\(f\) <= degree\(f\) <= DecisionTree\(f\) < 1296*degree\(f\)^8. From [Sherstov] theorem, approxdeg) s
5 670 M
(ree\(Majority + VoterSAT\) = approxdegree\(Majority\) * approxdegree\(VoterSAT\) <= DecisionTree\(Maj) s
5 659 M
(ority\)*DecisionTree\(VoterSAT\).) s
5 637 M
(References:) s
5 626 M
(-----------) s
5 615 M
(687.1 Dual Polynomial for OR function - [Robert Spalek, Google, Inc.] - http://www.ucw.cz/~rob) s
5 604 M
(ert/papers/dualor.pdf) s
5 593 M
(687.2 Degree of Polynomials Approximating Symmetric Boolean Functions - [Ramamohan Paturi] - h) s
5 582 M
(ttps://cseweb.ucsd.edu/~paturi/myPapers/pubs/Paturi_1992_stoc.pdf) s
5 571 M
(687.3 Approximate degree of composition of boolean functions - Theorem 8 - [Sherstov] - The Po) s
5 560 M
(lynomial Method Strikes Back:) s
5 549 M
(Tight Quantum Query Bounds via Dual Polynomials - [Mark Bun Princeton University mbun@cs.princ) s
5 538 M
(eton.edu, Robin Kothari Microsoft Research robin.kothari@microsoft.com,Justin Thaler Georgetow) s
5 527 M
(n University justin.thaler@georgetown.edu] - https://arxiv.org/pdf/1710.09079.pdf) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(------------------------------------------------) s
5 483 M
(688. \(THEORY\) Approximate Polynomials and Approximate Degree of Boolean Functions, Algebraic C) s
5 472 M
(ircuits and KRW Conjecture for Boolean) s
5 461 M
(composition of Majority and VoterSAT/VoterPTF - related to 365, 368, 682, 687 - 28 July 2019, ) s
5 450 M
(1 August 2019) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(------------------------------------------------) s
5 417 M
(Approximate Polynomial for Majority exists from 687.2 and has approximate degree theta\(n\) and ) s
5 406 M
(therefore has n roots from Fundamental Theorem of Algebra. This approximate polynomial for Maj) s
5 395 M
(ority can be written as factorized product \(assuming reducibile polynomials over field of real) s
5 384 M
(s\):) s
5 373 M
(        Product\(x-xi\) i=1,2,3,...,n) s
5 351 M
(Previous product for approximate polynomial for majority can be expressed by an Algebraic/Arit) s
5 340 M
(hmetic Circuit of depth-2 having 2n leaves \(2 leaves per factor\) and n intermediate minus gate) s
5 329 M
(s in depth-1. Root is a multiplication gate of fanin n:) s
5 318 M
(                                                        * \(multiplication operator - Root\)) s
5 296 M
(                                -       -       -       -       -       ... - \(minus operators) s
5 285 M
( - Depth 1\)) s
5 263 M
(                             x    x1  x   x2  x   x3  x   x4  x   x5      x   xn \(operands - D) s
5 252 M
(epth 2\)) s
5 230 M
(Similarly if there exists an approximate polynomial \(assuming reducible over field of reals\) f) s
5 219 M
(or an arbitrary VoterSAT/VoterPTF arithmetic circuit of approximate degree d it can be factori) s
5 208 M
(zed and represented by an Algebraic/Arithmetic circuit of depth-2 having 2d leaves, d intermed) s
5 197 M
(iate minus gates at depth-1 and multiplication gate at root. Since both arithmetic circuits fo) s
5 186 M
(r Majority and VoterSAT/VoterPTF have fanout 1, both can be termed arithmetic formulas. Thus a) s
5 175 M
(pproximate polynomials for Majority and VoterSAT/VoterPTF have arithmetic circuits of size O\(a) s
5 164 M
(pproxdegree\). Block Composing Majority arithmetic formula and VoterSAT/VoterPTF arithmetic for) s
5 153 M
(mula is fairly straightforward in this special setting and ArithmeticFormulaSize\(approxpoly\(Ma) s
5 142 M
(jority\)+approxpoly\(VoterSAT\)\) = ArithmeticFormulaSize\(approxpoly\(Majority\)\) * ArithmeticFormul) s
5 131 M
(aSize\(approxpoly\(VoterSAT\)\) = O\(n*d\). This is an approximate version of KRW conjecture and O\(n) s
5 120 M
(*d\) could be Theta\(n*d\) because factorization lowerbounds the number of arithmetic gates. Over) s
5 109 M
( field of reals, every irreducible polynomial has degree 1 or 2 at most. Previous algebraic ci) s
5 98 M
(rcuit assumes degree 1 irreducibility. For degree 2, instead of factors of the form \(x-xi\), fa) s
5 87 M
(ctors are ax^2 + bx + c which require arithmetic subcircuits as below increasing depth by 1 an) s
5 76 M
(d size multiplies by 4:) s
5 65 M
(                                                +) s
5 43 M
(                                        *       *       *) s
5 21 M
(                                  a   x   x   b   x   c    1) s
_R
S
%%Page: (456) 456
%%BeginPageSetup
_S
18 36 translate
/pagenum 456 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (456) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(An already known result in reference 688.4 implies intersection of set of polynomials computed) s
5 681 M
( by non-uniform arithmetic circuits of polynomial size and set of polynomials of constant degr) s
5 670 M
(ee is equal to intersection of set of polynomials computed by nonuniform arithmetic circuits o) s
5 659 M
(f polynomial size and logN*logN depth and set of polynomials of constant degree for all fields) s
5 648 M
( F. This implies each of the arithmetic circuit for approximate univariate polynomial over fie) s
5 637 M
(ld of reals of a boolean function is a logN * logN depth circuit. Assuming degree 1 irreducibl) s
5 626 M
(e factors throughout previously for approximate real polynomials of both functions f and g, an) s
5 615 M
( estimate of depth lowerbound of the block composition of f and g can be arrived at:) s
5 604 M
(        Depth\(f + g\) ~= Depth\(f\) + Depth\(g\) ~ 2*logN*logN) s
5 582 M
(References:) s
5 571 M
(-----------) s
5 560 M
(688.1 Algebraic Circuits - [Sanjeev Arora-Boaz Barak] - https://theory.cs.princeton.edu/comple) s
5 549 M
(xity/book.pdf - Section 14.1 and Example 14.3 \(Arithmetic circuits for determinants\)) s
5 538 M
(688.2 Fundamental Theorem of Algebra - https://en.wikipedia.org/wiki/Fundamental_theorem_of_al) s
5 527 M
(gebra - "... every non-zero, single-variable, degree n polynomial with complex coefficients ha) s
5 516 M
(s, counted with multiplicity, exactly n complex roots...") s
5 505 M
(688.3 Irreducible polynomials over reals have degree 1 or 2 - https://en.wikipedia.org/wiki/Ir) s
5 494 M
(reducible_polynomial) s
5 483 M
(688.4 Arithmetic Circuits versus Boolean Circuits - [Joachim von zur Gathen\342\\200\240 - Gadiel Ser) s
5 472 M
(oussi\342\\200\241] - Section 2 - https://www.sciencedirect.com/science/article/pii/089054019190078G) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(----------------------------------------------) s
5 428 M
(689. \(FEATURE\) Fraud Analytics - Credit Card Dataset - Pandas DataFrame Correlation Coefficien) s
5 417 M
(t Matrix - 28 July 2019) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(----------------------------------------------) s
5 384 M
(1.Fraud Analytics implementation has been updated to instantiate Pandas DataFrame from credit ) s
5 373 M
(card dataset and print Pandas) s
5 362 M
(Correlation matrix for all the columns.) s
5 351 M
(2.Columns V1-V28 are Obfuscated Names of the cardholders which are numeric unique id\(s\)) s
5 340 M
(3.Correlation between unique identities/names and amount drawn is a behavioural pattern and an) s
5 329 M
(y deviation is an alarm \(most swipes are periodic and personality oriented\).) s
5 318 M
(4.Correlation matrix logs are committed to testlogs/FraudAnalytics.log.28July2019) s
5 307 M
(5.Correlation between Timestamp and Amount drawn is also measure of fraud.) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(----------------------------------------------) s
5 263 M
(690. \(FEATURE\) Time Series Analysis - ARIMA implementation - 1 August 2019) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(----------------------------------------------) s
5 230 M
(1.Time Series implementation has been made to a new python source file containing time series ) s
5 219 M
(algorithms implementations for ARMA and ARIMA - Streaming_TimeSeriesData.py) s
5 208 M
(2.Auto Regressive Integrated Moving Averages \(ARIMA\) has been implemented as a function ARIMA ) s
5 197 M
(in Streaming_TimeSeriesData.py and factoring has been implemented for a parameter lag in autor) s
5 186 M
(egression_factored\(\)) s
5 175 M
(3.ARIMA differs from ARMA in factoring the autoregression polynomial into two factor polynomia) s
5 164 M
(ls one which is dependent on a lag operator.) s
5 153 M
(4.Because Yahoo finance and Google Finance stock data are no longer available, ystockquote doe) s
5 142 M
(s not work and throws urllib exception and hence a hardcoded array of timeseries stock close d) s
5 131 M
(ata has been used.) s
5 120 M
(5.ARMA and ARIMA functions from Streaming_TimeSeriesData.py are invoked in Streaming_StockMark) s
5 109 M
(etData.py.) s
5 98 M
(6.Logs for ARIMA and R+rpy2 graphics plot have been committed to DJIA_ARIMA_Time_Series.pdf an) s
5 87 M
(d testlogs/Streaming_StockMarketData.ARIMATimeSeries.log.1August2019) s
5 65 M
(----------------------------------------------------------------------------------------------) s
5 54 M
(----------------------------------------------) s
5 43 M
(691. \(FEATURE\) Time Series Analysis - ARMA and ARIMA implementations - Rewrite - 2 August 2019) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(----------------------------------------------) s
5 10 M
(1. ARMA and ARIMA related functions in Streaming_TimeSeriesData.py have been rewritten based o) s
_R
S
%%Page: (457) 457
%%BeginPageSetup
_S
18 36 translate
/pagenum 457 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (457) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(n ARMA and ARIMA polynomials in https://en.wikipedia.org/wiki/Autoregressive_integrated_moving) s
5 681 M
(_average) s
5 670 M
(2. Projection iterations have been removed and instead are done in the invoking source file e.) s
5 659 M
(g Streaming_StockMarketData.py for randomly chosen regression weights) s
5 648 M
(3. ARMA polynomial is computed as:) s
5 637 M
(    arma=timeseries[len\(timeseries\)-1] - autoregression\(time_series_data[pprime:]\) - moving_av) s
5 626 M
(erages\(time_series_data[q:], 5\)) s
5 615 M
(which subtracts the autoregression and moving averages from the latest timeseries point. ARMA ) s
5 604 M
(parameters pprime and q are sliced to be as distant from the latest timeseries point) s
5 593 M
(4. ARIMA polynomial is computed as:) s
5 582 M
(    arima=autoregression_factored\(time_series_data[len\(time_series_data\)-d:],p\) - moving_avera) s
5 571 M
(ges\(time_series_data[q:], 5\)) s
5 560 M
(which computes autoregression_factored differently as:) s
5 549 M
(5.Lag operator for lag d is applied to slice the timeseries data from latest point t to d as t) s
5 538 M
(-d and autoregression_factored\(\) is invoked to compute regressions from slice t-d-p to t-d ) s
5 527 M
(6.Finally the autoregression is subtracted from latest timeseries point Xt and moving averages) s
5 516 M
( is added to it) s
5 505 M
(7.Logs for rewrite are available for few iterations at testlogs/Streaming_StockMarketData.ARIM) s
5 494 M
(ATimeSeries.log.2August2019 ) s
5 483 M
(8.R+rpy2 function plots have been commented) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(-----------------------------------------------) s
5 439 M
(692. \(FEATURE\) Time Series Analysis - ARMA and ARIMA implementations - Rewrite 2 - 3 August 20) s
5 428 M
(19) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(-----------------------------------------------) s
5 395 M
(1. ARMA and ARIMA functions in Streaming_TimeSeriesData.py have been again refactored to imple) s
5 384 M
(ment lag operator and binomial expansion of) s
5 373 M
(lag factor in ARIMA polynomial) s
5 362 M
(2. autoregression_factored\(\) has been rewritten to invoke a new function lag_factor_binomial_e) s
5 351 M
(xpansion\(\) which in turn expands the factor power term in ARIMA polynomial by binomial series ) s
5 340 M
(expansion of \(1-L\)^d.) s
5 329 M
(3. lag_factor_binomial_expansion\(\) loop invokes functions binomial_term\(\) which computes the n) s
5 318 M
(umerator and denominator factorial of each binomial term and lag\(\) function for each binomial ) s
5 307 M
(term.) s
5 296 M
(4. Example logs for Stock quotes timeseries data is at Streaming_StockMarketData.ARIMATimeSeri) s
5 285 M
(es.log.3August2019 which has comparative projections of rewritten ARMA and ARIMA functions.) s
5 274 M
(5. ARIMA has been invoked by parameters \(2,2,2\)) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(-----------------------------------------------) s
5 230 M
(693. \(FEATURE\) Time Series Analysis and Fraud Analytics - Credit Card Transactions Dataset - 3) s
5 219 M
( August 2019) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(-----------------------------------------------) s
5 186 M
(1.FraudAnalytics.py has been updated to import TimeSeries ARMA and ARIMA functions from Stream) s
5 175 M
(ing_TimeSeriesData.py and compute ARMA and ARIMA polynomials on amounts withdrawn timeseries i) s
5 164 M
(n credit card transactions dataset.) s
5 153 M
(2.Logs for these projections are at testlogs/FraudAnalytics.log.3August2019) s
5 142 M
(3.Though timeseries is a perfect fit for analyzing credit card amounts withdrawn as timeseries) s
5 131 M
(, projection curves for ARMA and ARIMA in logs are skewed widely for multiple iterations of ra) s
5 120 M
(ndom weights in autoregression and moving averages but values of ARMA and ARIMA are uniformly ) s
5 109 M
(same almost.) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(-----------------------------------------------) s
5 65 M
(694. \(FEATURE\) Linear and Logistic Regressions - Rewrite - 4 August 2019, 6 August 2019) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(-----------------------------------------------) s
5 32 M
(1.LinearAndLogisticRegression.py has been rewritten to accept arbitrary number of weights and ) s
5 21 M
(variables for computing Linear and Logistic) s
5 10 M
(Regressions.) s
_R
S
%%Page: (458) 458
%%BeginPageSetup
_S
18 36 translate
/pagenum 458 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (458) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(2.Linear And Logistic Regressions are estimators of Intrinsic Economic Merit of Nations in Eco) s
5 681 M
(nomic Networks. Thus far following classes of intrinsic merit have been researched and impleme) s
5 670 M
(nted in NeuronRain:) s
5 659 M
(        1. Text) s
5 648 M
(        2. Audio - Speech) s
5 637 M
(        3. Audio - Music) s
5 626 M
(        4. Visuals - Images) s
5 615 M
(        5. Visuals - Videos) s
5 604 M
(        6. People - Professional Networks - Experiential Intrinsic Merit) s
5 593 M
(        7. People - Social Networks - Log Normal Least Energy Merit - Education/Wealth/Valour ) s
5 582 M
(e.g Rankings of Universities based on various factors including research output, Rankings of S) s
5 571 M
(tudents based on examinations/contests, Sports IPR \(Elo ratings in Chess, Player rankings in s) s
5 560 M
(ports\)) s
5 549 M
(        8. People - Professional Networks - HR Analytics - Attrition model) s
5 538 M
(and Economic merit of nations is the 9th class of intrinsic merit applicable to Economic Netwo) s
5 527 M
(rks. Regression is one amongst the set of econometric techniques for ascertaining growth of ec) s
5 516 M
(onomies:) s
5 505 M
(        9. Nations - GDP, HDI etc.,) s
5 494 M
(3. Logs for the previous are at testlogs/LinearAndLogisticRegression.log.4August2019) s
5 472 M
(References:) s
5 461 M
(-----------) s
5 450 M
(694.1 India\342\\200\\231s GDP Mis-estimation: Likelihood, Magnitudes, Mechanisms, and Implications) s
5 439 M
( - [Arvind Subramanian] - Working Paper - https://growthlab.cid.harvard.edu/files/growthlab/fi) s
5 428 M
(les/2019-06-cid-wp-354.pdf - "...We divide the sample into two periods, pre-and post-2011. For) s
5 417 M
( each period we estimate the following cross-country regression: \360\\235\\220\272\360\\235\\220\267\360\\235\\221) s
5 406 M
(\\203 \360\\235\\220\272\360\\235\\221\\237\360\\235\\221\\234\360\\235\\221\244\360\\235\\221\241\342\\204\\216\360\\235\\221\\226 = \360\\235) s
5 395 M
(\\233\2750 + \360\\235\\233\2751\360\\235\\220\266\360\\235\\221\\237\360\\235\\221\\222\360\\235\\221\\221\360\\235\\221\\226\360\\235\\221\241 \360) s
5 384 M
(\\235\\220\272\360\\235\\221\\237\360\\235\\221\\234\360\\235\\221\244\360\\235\\221\241\342\\204\\216\360\\235\\221\\226 + \360\\235\\233\2752\360) s
5 373 M
(\\235\\220\270\360\\235\\221\\231\360\\235\\221\\222\360\\235\\221\\220\360\\235\\221\241\360\\235\\221\\237\360\\235\\221\\226\360\\235\\221) s
5 362 M
(\\220\360\\235\\221\\226\360\\235\\221\241\360\\235\\221\246 \360\\235\\220\272\360\\235\\221\\237\360\\235\\221\\234\360\\235\\221\244\360\\235\\221\241) s
5 351 M
(\342\\204\\216\360\\235\\221\\226 + \360\\235\\233\2753\360\\235\\220\270\360\\235\\221\245\360\\235\\221\\235\360\\235\\221\\234\360\\235\\221) s
5 340 M
(\\237\360\\235\\221\241 \360\\235\\220\272\360\\235\\221\\237\360\\235\\221\\234\360\\235\\221\244\360\\235\\221\241\342\\204\\216\360\\235\\221\\226 ) s
5 329 M
(+\360\\235\\233\2754\360\\235\\220\274\360\\235\\221\\232\360\\235\\221\\235\360\\235\\221\\234\360\\235\\221\\237\360\\235\\221\241 \360\\235\\220) s
5 318 M
(\272\360\\235\\221\\237\360\\235\\221\\234\360\\235\\221\244\360\\235\\221\241\342\\204\\216\360\\235\\221\\226 + \360\\235\\233\2755\360\\235\\220\274\360) s
5 307 M
(\\235\\221\\233\360\\235\\221\\221\360\\235\\221\\226\360\\235\\221\\216 + \360\\235\\234\\200\357\277\275 ...") s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(----------------------------------------------) s
5 263 M
(695. \(FEATURE\) Gradient Ascent and Descent - Rewrite - 4 August 2019) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(----------------------------------------------) s
5 230 M
(1.PerceptronAndGradient.py has been rewritten for computing Gradient Ascent and Descent for ar) s
5 219 M
(bitrary number of variables.) s
5 208 M
(2.Earlier loop for partial derivative delta computation for just 2 variables has been generali) s
5 197 M
(zed for any number of variables ) s
5 186 M
(3.Gradient Ascent has also been added based on computed value of weight updated perceptron \(+ ) s
5 175 M
(instead of -\)) s
5 164 M
(4.Logs for Ascent and Descent are at testlogs/PerceptronAndGradient.log.4August2019) s
5 153 M
(5.Hardcoded variable,weights,bias,rho,output values have been removed and made as arguments.) s
5 131 M
(----------------------------------------------------------------------------------------------) s
5 120 M
(----------------------------------------------) s
5 109 M
(696. \(FEATURE\) Named Entity Recognition \(NER\)-HMM-Viterbi-CRF - Rewrite - 12 August 2019) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(----------------------------------------------) s
5 76 M
(1.Named Entity Recognition by Conditional Random Fields Hidden Markov Model has been updated s) s
5 65 M
(ignificantly for resolving some errors in Viterbi computation) s
5 54 M
(2.Prior Emission Probabilities computation by skew normal distribution has been updated to ren) s
5 43 M
(ormalize by dividing the skewnorm probability by sum of probabilities) s
5 32 M
(3.New part of speech "adverb" has been included in transition probabilities,emission probabili) s
5 21 M
(ties and states) s
5 10 M
(4.weighted sknorm has been done away with and replaced by previous renormalized skewnorm distr) s
_R
S
%%Page: (459) 459
%%BeginPageSetup
_S
18 36 translate
/pagenum 459 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (459) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ibution) s
5 681 M
(5.Error in argmax\(\) computation has been corrected - label and maximum are reset in the loop) s
5 670 M
(6.logs for this rewrite have been committed to testlogs/NamedEntityRecognition_HMMViterbi_CRF.) s
5 659 M
(log.12August2019) s
5 648 M
(7.Transition probabilities are updated as below:) s
5 637 M
(transition_probabilities={ 'noun':{'noun':0.0, 'verb':0.3, 'object':0.2, 'adjective':0.1, 'adv) s
5 626 M
(erb':0.1, 'conjunction':0.3},) s
5 615 M
(                          'verb':{'noun':0.1, 'verb':0.0, 'object':0.4, 'adjective':0.2, 'adve) s
5 604 M
(rb':0.1,'conjunction':0.3},) s
5 593 M
(                          'object':{'noun':0.0, 'verb':0.1, 'object':0.4, 'adjective':0.1, 'ad) s
5 582 M
(verb':0.1,'conjunction':0.3},) s
5 571 M
(                          'adjective':{'noun':0.4, 'verb':0.2, 'object':0.2, 'adjective':0.0, ) s
5 560 M
('adverb':0.1, 'conjunction':0.1},) s
5 549 M
(                          'adverb':{'noun':0.1, 'verb':0.4, 'object':0.1, 'adjective':0.0, 'ad) s
5 538 M
(verb':0.1, 'conjunction':0.3},) s
5 527 M
(                          'conjunction':{'noun':0.2, 'verb':0.4, 'object':0.1, 'adjective':0.1) s
5 516 M
(, 'adverb':0.1, 'conjunction':0.1}) s
5 505 M
(                         } ) s
5 494 M
(7.It has to be mentioned here that previous state transition probabilities priors are hardcode) s
5 483 M
(d heuristics and based on the following rationale:) s
5 472 M
(        7.1 verb follows nouns more often) s
5 461 M
(        7.2 object follows verb more often) s
5 450 M
(        7.3 object follows object more often) s
5 439 M
(        7.4 noun follows adjective more often) s
5 428 M
(        7.5 verb follows adverb more often) s
5 417 M
(        7.6 verb follows conjunction more often \(e.g infinitives\)) s
5 406 M
(8.Previous heuristics are minimal and could be replaced by more sophisticated probability dist) s
5 395 M
(ribution learnt from a training dataset once and loaded everytime.) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(------------------------------------------------) s
5 351 M
(697. \(THEORY-FEATURE\) Named Entity Recognition and Text Graph Algorithms in NeuronRain AstroIn) s
5 340 M
(fer - a non-statistical alternative - 12 August 2019) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(------------------------------------------------) s
5 307 M
(TextGraph algorithms in NeuronRain are two-fold:) s
5 296 M
(        697.1 Recursive Gloss Overlap - Project WordNet to a Subgraph by traversing the Synset) s
5 285 M
(s recursively) s
5 274 M
(        697.2 Recursive Lambda Function Growth - Project WordNet to a Subgraph by traversing t) s
5 263 M
(he Synsets recursively, learn AVL tree based Graph Tensor Neural Network and Lambda expression) s
5 252 M
(s from cycles and random walks of the WordNet subgraph - this is the maximum attainable theore) s
5 241 M
(tical limit of learning a formal language \(Turing Machine or a lambda function\) from natural l) s
5 230 M
(anguage) s
5 208 M
(Usual Named Entity Recognition algorithms are prior probabilities and Conditional Random Field) s
5 197 M
(s-HMM based which relies heavily on statistics ignoring linguistic deep structure. Instead if ) s
5 186 M
(missing Part-of-Speech tags could be inferred from a textgraph representation of a partially P) s
5 175 M
(oS annotated text, no language PoS priors are required. Following algorithm explores this alte) s
5 164 M
(rnative:) s
5 153 M
(        697.3 Partial PoS annoted text is mapped to a text graph by previous algorithms and ea) s
5 142 M
(ch word vertex in the partial annotated text is labelled by either a part of speech or ? for m) s
5 131 M
(issing PoS tag.) s
5 120 M
(        697.4 Resultant text graph thus has mixture of word vertices which have either PoS kno) s
5 109 M
(wn \(labelled by a PoS name\) or PoS unknown \(labelled by ?\)) s
5 98 M
(        697.5 WordNet has support for list of all possible PoS tags for a word vertex) s
5 87 M
(        697.6 It is then a problem of inferring most probable disambiguating PoS tag for a wor) s
5 76 M
(d vertex. ) s
5 65 M
(        697.7 Set of all wordnet paths between a PoS annotated word vertex and an adjacent PoS) s
5 54 M
( unannotated word vertex provide set of sequences) s
5 43 M
(of PoS tags for the paths.') s
5 32 M
(        697.8 For example phrase "can be called as a function" annotated as "conjunction conju) s
5 21 M
(nction verb conjunction conjunction ?" and unannotated "function" has three possible wordnet P) s
5 10 M
(oS tags which have to be disambiguated - Noun, Verb and Object and set of wordnet paths betwee) s
_R
S
%%Page: (460) 460
%%BeginPageSetup
_S
18 36 translate
/pagenum 460 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (460) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(n "as-a" and "function" could be - {"connective","entity","work"},{"article","entity","event"}) s
5 681 M
(,{"one","entity","happening"} having PoS sequences as {noun,noun,verb}, {noun,noun,noun} and {) s
5 670 M
(noun,noun,noun} if function has lemma synsets "work","event" or "happening") s
5 659 M
(        697.9.Of the three possible paths PoS "noun" for "function" wins by majority voting of) s
5 648 M
( 2 to 1 because 2 paths have a penultimate vertices which imply "function" is a noun.) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(-----------------------------------------------) s
5 604 M
(698. \(FEATURE\) GIS Remote Sensing Image Analytics - Image Segmentation - 13 August 2019) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-----------------------------------------------) s
5 571 M
(1.New function image_segmentation\(\) has been defined in ImageGraph_Keras_Theano.py which segme) s
5 560 M
(nts an image into similar regions or patches) s
5 549 M
(2.As opposed to RGB patches and extract_patches_2d\(\) of scikit learn, segmentation of an image) s
5 538 M
( is generic and segments/patches of arbitrary irregular shapes and containing similar pixels c) s
5 527 M
(an be extracted) s
5 516 M
(3.Example code in OpenCV2 documentation - https://opencv-python-tutroals.readthedocs.io/en/lat) s
5 505 M
(est/py_tutorials/py_imgproc/py_watershed/py_watershed.html - has been used as reference ) s
5 494 M
(4.This example filters the image into foreground and background by:) s
5 483 M
(        4.1 applying OTSU threshold filter) s
5 472 M
(        4.2 morphological opening for removal of noise) s
5 461 M
(        4.3 Background - Dilation to increase object boundary to background and demarcate back) s
5 450 M
(ground accurately) s
5 439 M
(        4.4 Foreground - Distance transform and then thresholding is applied to demarcate the ) s
5 428 M
(foreground ) s
5 417 M
(        4.5 Markers - Connected components are found from foreground of 4.4) s
5 406 M
(        4.6 Watershed - watershed segmentation algorithm is applied on the marked image to fin) s
5 395 M
(d segments.) s
5 384 M
(5.Watershed algorithm works by considering an image as topographic surface of valleys and dams) s
5 373 M
( between valleys. Valleys in image are filled with water till no two adjacent valleys merge cr) s
5 362 M
(eating "dams" or segments bounding the valleys.) s
5 351 M
(6.Watershed segmentation is graphically illustrated in http://www.cmm.mines-paristech.fr/~beuc) s
5 340 M
(her/wtshed.html) s
5 329 M
(7.EventNet Tensor Products Merit algorithm for visuals described earlier depends on bounding b) s
5 318 M
(ox segmentation which are squares. Instead segmentation could be the way to go if ImageNet and) s
5 307 M
( Keras support it.) s
5 296 M
(8.Two segmented satellite images of Chennai Metropolitan Area Urban Sprawl are committed at:) s
5 285 M
(        8.1 testlogs/RemoteSensingGIS/ChennaiUrbanSprawl_Page-10-Image-15_segmented.jpg) s
5 274 M
(        8.2 testlogs/RemoteSensingGIS/ChennaiUrbanSprawl_Page-9-Image-13_segmented.jpg) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(-----------------------------------------------) s
5 230 M
(699.\(THEORY-FEATURE\) Computational Geometric Factorization - Tile Search Optimization - Spark ) s
5 219 M
(2.4.3 and QuadCore benchmarks - 13 August 2019) s
5 208 M
(----------------------------------------------------------------------------------------------) s
5 197 M
(-----------------------------------------------) s
5 186 M
(1.This is the first genuine benchmark of Computational Geometric Factorization on Spark 2.4.3 ) s
5 175 M
(and QuadCore. Earlier execution on local[4] was a simulation of 4 spark executor threads on si) s
5 164 M
(ngle core) s
5 153 M
(2.SparkContext has been replaced by Spark context of SparkSession) s
5 142 M
(3.logs for factorization are at testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_) s
5 131 M
(Optimized.log.13August2019 which have some notable estimates of approximate factors by Hardy-R) s
5 120 M
(amanujan \(1 exact factor ray query\), Baker-Harman-Pintz and Cramer ray shooting queries ) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-----------------------------------------------) s
5 76 M
(700.\(THEORY\) Computational Geometric Factorization, Complement Diophantines, Covering a set by) s
5 65 M
( Arithmetic Progressions, Ramsey Coloring -) s
5 54 M
(related to 24,477,491,636 - 14 August 2019) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(-----------------------------------------------) s
5 21 M
(Computational geometric factorization works by parallel planar point location - rectification ) s
5 10 M
(of Hyperbolic arc bow into straightline segments which are then made to segment tree, wavelet ) s
_R
S
%%Page: (461) 461
%%BeginPageSetup
_S
18 36 translate
/pagenum 461 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (461) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(tree, interval tree etc., by parallel RAM construction or segments are parallel RAM mergesorte) s
5 681 M
(d and binary searched to find factors and thus factorization \(finding all factors of an intege) s
5 670 M
(r\) is in Nick's class. It has been mentioned earlier that each segment of rectified hyperbolic) s
5 659 M
( arc bow is an arithmetic progression which facilitates local binary search without necessity ) s
5 648 M
(for parallel mergesort. Thus set of all segments of rectified hyperbolic arc create an arithme) s
5 637 M
(tic progression cover of set of points on rectified hyperbolic curve. Finding a minimum size s) s
5 626 M
(et of arithmetic progressions covering a set of integers is a hard problem. Previous rectifica) s
5 615 M
(tion process for factorization solves a special case of arithmetic progression cover of a set.) s
5 604 M
( It has to be noted that finding an exact arithmetic progression cover of a set is the complem) s
5 593 M
(ent diophantine problem because the set of arithmetic progressions represents each of the diop) s
5 582 M
(hantine subset in the exact cover partition. Known result in 700.1 implies covering a set by a) s
5 571 M
(rithmetic progressions is NP-complete while the previous rectification for factorization solve) s
5 560 M
(s this special case of arithmetic progression cover of set of rectified hyperbolic points in N) s
5 549 M
(C.This also implies complement diophantine problem is NP-complete for the special case of arit) s
5 538 M
(hmetic progression diophantines for some partition of a set.) s
5 516 M
(References:) s
5 505 M
(----------) s
5 494 M
(700.1 Covering a set by arithmetic progressions is NP-complete - [Lenwood Heath - Virginia Tec) s
5 483 M
(h] - https://vtechworks.lib.vt.edu/bitstream/handle/10919/19566/TR-89-25.pdf?sequence=3&isAllo) s
5 472 M
(wed=y) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(----------------------------------------------) s
5 428 M
(701.\(THEORY\) Category Theory formulation of EventNet - Objects, Morphisms, Functors - related ) s
5 417 M
(to 582, 588, 654  - 21 August 2019, 22 September 2019, 29 October 2019,6 December 2019) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(----------------------------------------------) s
5 384 M
(Category Theory of [Eilenberg-MacLane] abstracts whole of mathematics into following:) s
5 373 M
(        701.1 Category C is a Set of Objects) s
5 362 M
(        701.2 Every Category has set of morphisms f:a-b defined on objects a,b in Category C) s
5 351 M
(        701.3 Functors F are maps between two Categories C1 and C2 - for each object x in C1, ) s
5 340 M
(F\(x\) is in C2 and for each morphism f:a-b in C1) s
5 329 M
(morphism, F\(f\):F\(a\)-F\(b\) is in C2) s
5 307 M
(EventNet Tensor Products defined and implemented in NeuronRain and applied as intrinsic merit ) s
5 296 M
(measure for large scale visuals can be formalised in terms of Category theory as follows:) s
5 285 M
(        701.4 Every Event vertex in EventNet is a category) s
5 274 M
(        701.5 Set of Actors in an Event Category are Objects of the Category) s
5 263 M
(        701.6 Every intra-event interaction between any two actor objects a,b of an event cate) s
5 252 M
(gory E is a Morphism - f:a-b) s
5 241 M
(        701.7 Every inter-event causation between two Event Categories E1 and E2 \(E1 causes E2) s
5 230 M
(\) is a Functor - for each actor object x in E1, F\(x\) is in E2 and for each morphism f:a-b in E) s
5 219 M
(1, morphism F\(f\):F\(a\)-F\(b\) is in E2) s
5 197 M
(As mentioned in previous sections on EventNet Tensor Product merit of Large Scale Visuals, Eve) s
5 186 M
(ntNet Tensor formalizes logical time and causation. Rank of a Tensor T is the minimum number o) s
5 175 M
(f Simple Tensors that sum to T where Simple Tensors are factorizable products of tensors. This) s
5 164 M
( implies Logical Time Tensor can be written as sum of products of Tensors implying seemingly l) s
5 153 M
(inear 1-dimensional time is decomposable to tensor components basis. This has implications for) s
5 142 M
( physical sciences and experiments involving spacetime - Time could be multidimensional and an) s
5 131 M
(y spatial object can be projected to any of the time tensor component axes similar to space. F) s
5 120 M
(rom previous Category Theory definition, EventNet Causality Functor Graph can also be written ) s
5 109 M
(as sum of products of Tensors. Tensor Decomposition of Video EventNet Tensor yields component ) s
5 98 M
(videos i.e video can be split into linearly independent component videos.) s
5 76 M
(Another theoretical implication of EventNet is the possibility of retrocausality - effect caus) s
5 65 M
(ing the cause and arrow of time can be bidirectional. EventNet DAG can be partitioned into pas) s
5 54 M
(t, present and future disjoint subgraph components by 2 cuts/vertex separators. To preclude th) s
5 43 M
(e possibility of retrocausality/time reversal, EventNet must be a directed acyclic graph devoi) s
5 32 M
(d of loops and backedges \(edges of right to left if Events flow left to right\). If logical tim) s
5 21 M
(e is unidirectional \(retrocausality is false\) following "future" functions f1 and f2 defined o) s
5 10 M
(n EventNet graph partition components \(past,present,future\) must be hard to invert implying on) s
_R
S
%%Page: (462) 462
%%BeginPageSetup
_S
18 36 translate
/pagenum 462 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (462) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(e-way functions, Pseudorandom Generators and P != NP \(left inverse does not exist for EventNet) s
5 681 M
( category\):) s
5 670 M
(        f1\(past\) = present) s
5 659 M
(        f2\(present\) = future) s
5 637 M
(Ramsey Theorem for Graphs implies any large graph G has a Ramsey number R\(s,t\) such that a gra) s
5 626 M
(ph G of R\(s,t\) vertices has an independent set of size s or a clique of size t. In the context) s
5 615 M
( of EventNet which is a huge causality graph, Ramsey Theorem implies there always exists a cli) s
5 604 M
(que of mutually dependent events or mutually independent set of events in EventNet of R\(s,t\) v) s
5 593 M
(ertices howsoever random the causality is.) s
5 571 M
(References:) s
5 560 M
(----------) s
5 549 M
(701.8 Category Theory - https://en.wikipedia.org/wiki/Category_theory) s
5 538 M
(701.9 Tensor Products as Functors - https://en.wikipedia.org/wiki/Functor - "... Tensor produc) s
5 527 M
(ts: If C denotes the category of vector spaces over a fixed field, with linear maps as morphis) s
5 516 M
(ms, then the tensor product {\\displaystyle V\\otimes W} V\\otimes W defines a functor C \303\\227 C ) s
5 505 M
(\342\\206\\222 C which is covariant in both arguments.[7] ...") s
5 494 M
(701.10 Tensor Decomposition in Python - Tensorly and Tensorlab - https://medium.com/yadb/tenso) s
5 483 M
(r-factorization-for-graph-analysis-in-python-590df44c9f6c - Graphic illustrations of Non-Negat) s
5 472 M
(ive Canonical Polyadic Decomposition \(NCPD\) of a 3-way tensor to sum of products of multiple r) s
5 461 M
(ank-1 tensors - Figure 1 \(3-way tensor\) decomposed as Figure 2 \(sum of products of rank-1 tens) s
5 450 M
(ors\) - "...The rank of a tensor T, denoted rank\(T\), is defined as the smallest number of rank-) s
5 439 M
(one tensors that generate T as their sum...") s
5 428 M
(701.11 Tensor Decomposition and its applications - [Tamara G. Kolda and Brett W. Bader] - http) s
5 417 M
(s://epubs.siam.org/doi/abs/10.1137/07070111X?journalCode=siread - "...A tensor is a multidimen) s
5 406 M
(sional or N-way array. Decompositions of higher-order tensors \(i.e., N-way arrays with N >= 3\)) s
5 395 M
( have applications in psycho-metrics, chemometrics, signal processing, numerical linear algebr) s
5 384 M
(a, computer vision, numerical analysis, data mining, neuroscience, graph analysis, and elsewhe) s
5 373 M
(re ... ") s
5 362 M
(701.12 Ramsey Theorem for Graphs - http://math.mit.edu/~fox/MAT307-lecture05.pdf - Complete di) s
5 351 M
(sorder is impossible - Theorem 1 - "...Theorem 1 \(Ramsey\342\\200\\231s theorem\). For any s, t \342) s
5 340 M
(\\211\245 1, there is R\(s, t\) < \342\\210\\236 such that any graph on R\(s, t\) vertices contains either ) s
5 329 M
(an independent set of size s or a clique of size t. In particular, R\(s, t\) \342\\211\244 \(s + t \342\\210) s
5 318 M
(\\222 2,s \342\\210\\222 1\) ...") s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(---------------------------------------------) s
5 274 M
(702.\(THEORY-FEATURE\) Non-statistical Ontology Semantic Paths based Named Entity Recognition - ) s
5 263 M
(related to 697 - 22 August 2019) s
5 252 M
(----------------------------------------------------------------------------------------------) s
5 241 M
(---------------------------------------------) s
5 230 M
(1.A non-statistical WordNet Paths based Named Entity Recognition alternative was theoretically) s
5 219 M
( described earlier which exploits linguistic deep structure.) s
5 208 M
(2.This alternative has been implemented in NamedEntityRecognition_HMMViterbi_CRF.py which work) s
5 197 M
(s as below:) s
5 186 M
(        2.1 find the semantic path between a PoS annotated word and unannotated adjacent word ) s
5 175 M
(in an ontology e.g WordNet - path_between\(\) from WordNetPath.py has been invoked \(instead the ) s
5 164 M
(text graph path between the words is also sufficient\)) s
5 153 M
(        2.2 for each vertex in the path find all possible PoS tags from WordNet Synsets which ) s
5 142 M
(is a 2 dimensional list - Words * Set-of-PoS-per-Word) s
5 131 M
(        2.3 find the cartesian product of the 2 dimensional list from 2.2 which enumerates all) s
5 120 M
( possible PoS paths between annotated and unannotated words - itertools product computes carte) s
5 109 M
(sian product of lists for all possible PoS paths which is a trellis) s
5 98 M
(        2.4 aggregate the penultimate vertices in PoS paths) s
5 87 M
(        2.5 find the majority PoS tag Synset of 2.4 which is the most likely PoS of the unanno) s
5 76 M
(tated word) s
5 65 M
(3.Logs in testlogs/NamedEntityRecognition_HMMViterbi_CRF.log.22August2019 demonstrate previous) s
5 54 M
( PoS paths majority voting for NER of an unannotated vertex.) s
5 43 M
(4.Some paths between annotated and unannotated words drew blank because path_between\(\) did not) s
5 32 M
( find a path) s
5 21 M
(5.In some respects, previous algorithm resembles a transformer which is an attention model neu) s
5 10 M
(ral network scoring a sequence pipeline in transduction - it maps a sequence of words to seque) s
_R
S
%%Page: (463) 463
%%BeginPageSetup
_S
18 36 translate
/pagenum 463 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (463) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(nce of PoS and attention context \(important annotated words influencing an unannotated word\) i) s
5 681 M
(s provided by the PoS paths between PoS annotated and unannotated words in the word sequence.) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(----------------------------------------------) s
5 637 M
(703.\(FEATURE\) Text Graph of a natural languge text from ConceptNet 5.7 - implementation - 23 A) s
5 626 M
(ugust 2019) s
5 615 M
(----------------------------------------------------------------------------------------------) s
5 604 M
(----------------------------------------------) s
5 593 M
(1.NeuronRain text graph implementations so far rely only on WordNet for deciphering intrinsic ) s
5 582 M
(deep structure merit of a text.) s
5 571 M
(2.This commit implements ConceptNet 5.7 text graph alternative which was long pending.) s
5 560 M
(3.New function conceptnet_text_graph\(\) invokes least_common_ancestor graph creating function a) s
5 549 M
(nd aggregates edges from paths between all pairs of words.) s
5 538 M
(4.ConceptNet5.7 Text Graph has been plotted by matplotlib at testlogs/ConceptNet5.7.TextGraph.) s
5 527 M
(23August2019) s
5 516 M
(5.Logs for ConceptNet text graph creation are at testlogs/ConceptNet5Client.log.23August2019) s
5 505 M
(6.Quality of Paths in ConceptNet is an open problem e.g https://arxiv.org/abs/1902.07831 ) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(----------------------------------------) s
5 461 M
(704.\(FEATURE\) ConceptNet 5.7 Text Graph - shortest path filter - 25 August 2019) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(----------------------------------------) s
5 428 M
(1.ConceptNet 5.7 Text Graph implementation has been updated to find shortest paths from least ) s
5 417 M
(common ancestor graph for each pair of) s
5 406 M
(words in the text and merge the shortest paths to create the graph by NetworkX add_path\(\)) s
5 395 M
(2.This filtering improves the path quality to some extent.) s
5 384 M
(3.Centrality measures and Dense Subgraph Classification \(Core Numbers\) are printed.) s
5 373 M
(4.logs for this commit are at testlogs/ConceptNet5Client.log.25August2019) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(----------------------------------------) s
5 329 M
(705.\(FEATURE\) ConceptNet 5.7 Text Graph - additional Graph Complexity Intrinsic Merit measures) s
5 318 M
( - 31 August 2019) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(----------------------------------------) s
5 285 M
(1.ConceptNet 5.7 Text Graph implementation has been updated to print a comprehensive dictionar) s
5 274 M
(y of graph complexity intrinsic merit) s
5 263 M
(measures of the ConceptNet text graph similar to WordNet text graph in RecursiveLambdaFunction) s
5 252 M
(Growth implementation) s
5 241 M
(2.grow_lambda_function3\(\) in RecursiveLambdaFunctionGrowth python implementation has been chan) s
5 230 M
(ged to accept a textgraph as argument in the absence of a text and directly grow lambda functi) s
5 219 M
(ons from argument textgraph without creating it.) s
5 208 M
(3.Text is read from a file ConceptNet5Client.txt and passed on as conceptnet textgraph functio) s
5 197 M
(n argument.) s
5 186 M
(4.logs for this commit are at testlogs/ConceptNet5Client.log.31August2019) s
5 175 M
(5.Special concept vertex '/c/en/\\xb0_c' is in all the paths found by least common ancestor alg) s
5 164 M
(orithm and therefore the graph has a hub-spoke star structure always. This node has been filte) s
5 153 M
(red by a new function remove_noise\(\) to avoid star graphs. To increase path quality more verti) s
5 142 M
(ces might be added whenever deemed necessary in remove_noise\(\)) s
5 131 M
(6.Exception handling for non-existent paths has been included.) s
5 120 M
(7.Resulting filtered textgraph has been drawn in testlogs/ConceptNet5Client5.7.TextGraph.31Aug) s
5 109 M
(ust2019.png and is more like a sunflower \(set of subsets of vertices having pairwise intersect) s
5 98 M
(ion forming petals\).) s
5 76 M
(----------------------------------------------------------------------------------------------) s
5 65 M
(-------------------------------------------) s
5 54 M
(706.\(FEATURE\) Recursive Lambda Function Growth - Machine Translation - updated implementation ) s
5 43 M
(- 5 September 2019) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(-------------------------------------------) s
5 10 M
(1.machine_translation\(\) function in RecursiveLambdaFunctionGrowth.py has been changed to creat) s
_R
S
%%Page: (464) 464
%%BeginPageSetup
_S
18 36 translate
/pagenum 464 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (464) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(e a summary text in the destination language) s
5 681 M
(similar to create_summary\(\)) s
5 670 M
(2.As done in create_summary\(\) summary translated text in target language is either created by ) s
5 659 M
(traversing the textgraph or without traversing the textgraph) s
5 648 M
(3.Presently translation creates only simple sentences. Complex sentences could be created in n) s
5 637 M
(ext iteration by compounding two neighbouring sentences.) s
5 626 M
(4.Goslate and googletrans python libraries have been imported for translation because of frequ) s
5 615 M
(ent Invalid Word errors in PyDictionary\(\)) s
5 604 M
(5.Clauses specific to Goslate, googletrans and PyDictionary have been created along with excep) s
5 593 M
(tion handlers) s
5 582 M
(6.Caveat is rate limitations of Google Translate REST API underlying all previous three transl) s
5 571 M
(ate libraries which might or might not work depending on load and requested time point.) s
5 560 M
(7.If there are exceptions, source language edges are populated in translation text graph) s
5 549 M
(8.logs for previous commit are at testlogs/RecursiveLambdaFunctionGrowth.log.MachineTranslatio) s
5 538 M
(n.5September2019 - because of Google translate REST API ratelimit translation textgraph could ) s
5 527 M
(not be created) s
5 516 M
(9.nondictionaryword\(\) filter has been commented in RecursiveGlossOverlap Classifier because of) s
5 505 M
( slowdown.) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(------------------------------------------------) s
5 461 M
(707.\(FEATURE\) Recursive Lambda Function Growth - Machine Translation - simplified - 6 Septembe) s
5 450 M
(r 2019) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(------------------------------------------------) s
5 417 M
(1.machine_translation\(\) function in RecursiveLambdaFunctionGrowth.py has been simplified to re) s
5 406 M
(move unnecessary arguments and clauses and do the graph traversal and create summary in target) s
5 395 M
( language from it by default. This is because relevance_to_text\(\) function which chooses sente) s
5 384 M
(nces from text based on some distance measure to create summary is not necessary during transl) s
5 373 M
(ation) s
5 362 M
(2.3 clauses for choice of translator - googletrans, goslate, PyDictionary - have been simplifi) s
5 351 M
(ed to translate the connectives "and" and "are" to respective target language.) s
5 340 M
(3.3 logs of translation for Hindi, Kannada and Telugu have been committed to testlogs:) s
5 329 M
(        testlogs/RecursiveLambdaFunctionGrowth.log.Telugu.MachineTranslation.6September2019) s
5 318 M
(        testlogs/RecursiveLambdaFunctionGrowth.log.Kannada.MachineTranslation.6September2019) s
5 307 M
(        testlogs/RecursiveLambdaFunctionGrowth.log.Hindi.MachineTranslation.6September2019) s
5 296 M
(4.Previous logs have some intermittent errors because of Google translate API ratelimit.) s
5 285 M
(5.ConceptNet is an alternative to Google Translate which is a multilingual ontology.) s
5 274 M
(5.Translated text printed has some weird words not relevant to the text subject because of enc) s
5 263 M
(oding/decoding problems of the language fonts.) s
5 252 M
(6.Normal english language summary of the text - from create_summary\(\) - is also printed) s
5 241 M
(7.Usual machine translations are rule based and recently transformers \(sequence attention neur) s
5 230 M
(al network\) are gaining traction.Main motivation of NeuronRain is to implement an alternative,) s
5 219 M
( non-statistical, formal languages theory based framework for analyzing texts exploiting deep ) s
5 208 M
(linguistic structure in them ) s
5 197 M
(8.This formal languages focussed approach to measure merit of texts - NER, translation, extrac) s
5 186 M
(ting lambda expression from a text etc., is superior to inferring a neural network from text b) s
5 175 M
(ecause text is approximated to a Turing machine indirectly by recursively grown lambda express) s
5 164 M
(ions which has strong cognitive psychology basis - Grounded Cognition - "phrasal structures ar) s
5 153 M
(e embedded recursively" ) s
5 142 M
(9.As far as machine translation is concerned, instead of sequence transducers, text graph of o) s
5 131 M
(ne language is mapped to text graph of another language bijectively thus preserving deep struc) s
5 120 M
(ture and meaning irrespective of language - minimizes "lost in translation".) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(------------------------------------------------) s
5 76 M
(708. \(FEATURE\) Social Network Analysis - People Analytics - PIPL.com python API integration - ) s
5 65 M
(Syllable based name clustering - 11 September 2019 and 14 September 2019) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(------------------------------------------------) s
5 32 M
(1.PIPL.com \(people dot com\) is a people search engine which tries to unqiuely identify a perso) s
5 21 M
(n based on name, email etc.,) s
5 10 M
(2.PIPL.com python API have been imported in SocialNetworkAnalysis_PeopleAnalytics.py and invok) s
_R
S
%%Page: (465) 465
%%BeginPageSetup
_S
18 36 translate
/pagenum 465 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (465) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ed in a newly defined function pipldotcom_analytics\(\) which has query parameters: first name, ) s
5 681 M
(last name and email) s
5 670 M
(3.pipldotcom_analytics\(\) has been invoked on 3 example emails and names and JSON response is p) s
5 659 M
(rinted in logs at testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.11September2019 which con) s
5 648 M
(tains identities, photos, followers and relationships sourced from multiple social networks \(l) s
5 637 M
(inkedin, twitter, facebook, google, outlook etc.,\)) s
5 626 M
(4.Example email queries are: ka.shrinivaasan@gmail.com, shrinivas.kannan@gmail.com, kashriniva) s
5 615 M
(asan@live.com for the name of the author - "Srinivasan Kannan") s
5 604 M
(5.Previous query is a perfect example of multiple english name spellings and online identities) s
5 593 M
( author has for the single Hindi/Tamizh/Sanskrit name of the author "Sri-Ni-Va-San": Shrinivas) s
5 582 M
( Kannan, Srinivasan Kannan, Shrinivaasan Kannan \(Shrinivaasan Ka\)) s
5 571 M
(6.This multiple name spelling problem arises in English because of multiple alphabets per syll) s
5 560 M
(able \(hyphenated previously\) and could easily cause identity confusion while in Tamizh, Hindi ) s
5 549 M
(and Sanskrit name syllables have single vowel+consonant compound alphabets) s
5 538 M
(7.Finding and clustering similarly named people and proving their uniqueness is a challenge in) s
5 527 M
( BigData because of spelling conflicts in English for similarly pronounced names.) s
5 516 M
(8.Syllable based \(acoustic\) linguistic clustering of names by hyphenation previously as oppose) s
5 505 M
(d to edit distance based clustering is thus a good model to classify similar names of differen) s
5 494 M
(t spellings.) s
5 483 M
(9.Apart from Syllables, the 3 name spellings in previous example have same meaning which requi) s
5 472 M
(res a Name ontology \(NameNet\) for semantically relating names of same meaning.) s
5 461 M
(10. Names are non-dictionary words and creating a NameNet could be exhaustive and daunting.) s
5 439 M
(References:) s
5 428 M
(----------) s
5 417 M
(708.1 Word Hy-phen-a-tion by Com-put-er - [Liang - Ph.D Dissertation] - http://www.tug.org/doc) s
5 406 M
(s/liang/liang-thesis.pdf - describes some difficult hyphenations and syllable boundaries in ty) s
5 395 M
(pesetting ) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(-------------------------------------------) s
5 351 M
(709. \(FEATURE\) Social Network Analysis - People Analytics - Contextual Name Parsing - 14 Septe) s
5 340 M
(mber 2019) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(-------------------------------------------) s
5 307 M
(1.Name Parsing is an open problem and there are many tools already available \(IBM Name Parser,) s
5 296 M
( Python Human Name Parser,...\) ) s
5 285 M
(2.In the context of People Analytics, it is often required to find the first name, second name) s
5 274 M
(, middle name, surname, last name etc., from full names in a BigData set and there are cultura) s
5 263 M
(l barriers e.g some countries have convention of <second name> <first name> and others have <f) s
5 252 M
(irst name> <second name> and <second name> is initial,surname or name of the parent/spouse.) s
5 241 M
(3.Because of cultural barriers across nations parsing first name or second name in the absence) s
5 230 M
( of some context \(e.g. an ID card\) is difficult and prone to error.) s
5 219 M
(4.New function nameparser\(\) has been defined in SocialNetworkAnalysis_PeopleAnalytics.py which) s
5 208 M
( accepts full name, a regular expression and an ID contextual text as arguments.) s
5 197 M
(5.nameparser\(\) searches for the regular expression pattern and the tokenized full name in the ) s
5 186 M
(ID contextual text and tries to infer First Name and Second Name.) s
5 175 M
(6.An example name parsing for the author and failure of Python Human Name Parser has been demo) s
5 164 M
(nstrated - Some past forum mails of the author from https://marc.info/?a=104547613400001&r=1&w) s
5 153 M
(=2 and https://marc.info/?l=apache-modules&m=105610024116012 sent from official mail id: Kanna) s
5 142 M
(n.Srinivasan@Sun.COM have wrong first \(Kannan\) and last \(Srinivasan\) names while final salutat) s
5 131 M
(ion in the emails contain the name per Indian convention as "K.Srinivasan" and Python Human Na) s
5 120 M
(me parser fails to parse the names correctly in the absence of this context.) s
5 109 M
(7.NeuronRain nameparser\(\) defined in this commit is passed the email texts as contexts and the) s
5 98 M
( nameparser\(\) searches for places in the emails containing the tokens of the full name by regu) s
5 87 M
(lar expression pattern. ) s
5 76 M
(8.Following lines define two named regex patterns which are searched in the email ID contexts ) s
5 65 M
(mentioned in \(6\) as per Indian Cultural Convention of Second Name or Initial followed by First) s
5 54 M
( Name:) s
5 43 M
(hranal.nameparser\("Kannan Srinivasan",r"\(?P<second_name>\\w+\).\(?P<first_name>\\w+\)",emailcontext) s
5 32 M
(_text\)) s
5 21 M
(hranal.nameparser\("Kannan Srinivasan",r"\(?P<second_name>\\w+\) \(?P<first_name>\\w+\)",emailcontext) s
5 10 M
(_text\)) s
_R
S
%%Page: (466) 466
%%BeginPageSetup
_S
18 36 translate
/pagenum 466 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (466) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(9.nameparser\(\) returns the regex groupdicts for the matched named-parentheses) s
5 681 M
(10.nameparser\(\) has been made generic to suit all kinds of regular expressions for names and I) s
5 670 M
(D contexts and can be invoked for any social or professional network names. ID Context could b) s
5 659 M
(e text from any source \(e.g emails, texts, ID card texts\) and regex pattern argument must comp) s
5 648 M
(ly with the ID context - if Context argument is an ID card text having Name, Address and Paren) s
5 637 M
(t Names, UniqueID etc., regex pattern must accordingly follow e.g "Parent Name:\(?P<parent_name) s
5 626 M
(>\\w+\)") s
5 615 M
(11.Logs for this commit are at testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.14September2) s
5 604 M
(019 and email ID contexts at testlogs/SocialNetworkAnalysis_PeopleAnalytics_NameParsing/) s
5 582 M
(References:) s
5 571 M
(----------) s
5 560 M
(709.1 Python nameparser - https://nameparser.readthedocs.io/en/latest/) s
5 549 M
(709.2 NameAPI - https://www.nameapi.org/en/demos/name-parser/ - REST API which supports cultur) s
5 538 M
(e specifics) s
5 527 M
(709.3 IBM Name Parser - https://www.ibm.com/support/knowledgecenter/en/SSEV5M_5.0.0/com.ibm.ii) s
5 516 M
(s.gnm.parsingnames.doc/topics/gnr_np_con_parsingnamesusingnameparser.html) s
5 494 M
(----------------------------------------------------------------------------------------------) s
5 483 M
(-----------------------------------------------) s
5 472 M
(710. \(THEORY and FEATURE\) Compressed Sensing for Texts - Syllable Vector Vowelless Text Compre) s
5 461 M
(ssion - 18 September 2019 - Related to 2, 708) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(-----------------------------------------------) s
5 428 M
(1.Compressed Sensing which is mostly restricted to digital signal and image processing, recons) s
5 417 M
(tructs original signal from lossy signal with high probability.\(https://en.wikipedia.org/wiki/) s
5 406 M
(Compressed_sensing\)) s
5 395 M
(2.Vowelless Text Compression which compresses english texts by stripping vowels also creates a) s
5 384 M
( lossy compressed signal from which actual text has to be recovered with high probability and ) s
5 373 M
(thus is a Text Compressed Sensing.) s
5 362 M
(3.Existing Vowelless Text Compression implementation in neuronRain relies on Hidden Markov Mod) s
5 351 M
(el estimation to infer maximum likely missing vowels.) s
5 340 M
(4.Syllables of a string in any language are phonetic divisions in the string.) s
5 329 M
(5.Syllable boundary name clustering for clustering similar Names differing in spellings mentio) s
5 318 M
(ned previously maps each string to a vector of syllables which is audio/linguistic representat) s
5 307 M
(ion of the string) s
5 296 M
(6.Thus every n-syllable string irrespective of languages can be represented in an n-dimensiona) s
5 285 M
(l syllable space as a syllable vector and distance between two strings is the L2 norm in this ) s
5 274 M
(syllable space - each syllable is phonetically represented than by a script. This is an altern) s
5 263 M
(ative word2vec embedding model and is a better distance measure than levenshtein edit distance) s
5 252 M
( because of language script independence - 2 strings of different natural languages can be com) s
5 241 M
(pared by phonetic syllable distance.) s
5 230 M
(7.Syllable space embedding for similarity of names in NeuronRain is different from Phonetic Ma) s
5 219 M
(tch Rating algorithm \(https://en.wikipedia.org/wiki/Match_rating_approach\) which also removes ) s
5 208 M
(vowels but does not consider syllable boundaries or hyphenations.) s
5 197 M
(8.CompressedSensing Python implementation has been changed to include a new function syllable_) s
5 186 M
(boundary_text_compression\(\) which invokes PyHyphen python hyphenator and gets syllable vector ) s
5 175 M
(of a string and compressed syllable vector by removevowels\(\) in TextCompression implementation) s
5 164 M
(. ) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(-------------------------------------------) s
5 120 M
(711. \(FEATURE\) Social Network Analysis - People Analytics - Contextual Name Parsing and Syllab) s
5 109 M
(le Vector Compression of Strings ) s
5 98 M
(- 18 September 2019) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(-------------------------------------------) s
5 65 M
(1.Regex Pattern Matching in nameparser\(\) has been changed to ignore case by flag re.IGNORECASE) s
5 54 M
(2.Few more ID context texts are being regex matched in nameparser\(\) which are parsed texts and) s
5 43 M
( OCRs \(by pdftotext and gocr\) from pdf and image IDs of the author uploaded in https://sourcef) s
5 32 M
(orge.net/projects/acadpdrafts/files/?source=navbar - Public Distribution System ID card linked) s
5 21 M
( to Unique Aadhaar IDs and Permanent Account Number \(PAN\) which is Aadhaar linked - https://so) s
5 10 M
(urceforge.net/projects/acadpdrafts/files/NewRationCard2.pdf/download, https://sourceforge.net/) s
_R
S
%%Page: (467) 467
%%BeginPageSetup
_S
18 36 translate
/pagenum 467 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (467) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(projects/acadpdrafts/files/NewRationCard1.pdf/download and https://sourceforge.net/projects/ac) s
5 681 M
(adpdrafts/files/PAN.jpg/download) s
5 670 M
(3.These three ID cards are examples of Both Indian convention of Second name followed by First) s
5 659 M
( name and International standard of First name followed by Second name. https://sourceforge.ne) s
5 648 M
(t/projects/acadpdrafts/files/NewRationCard2.pdf/download, https://sourceforge.net/projects/aca) s
5 637 M
(dpdrafts/files/NewRationCard1.pdf/download have Unique IDs linked to both formats but in diffe) s
5 626 M
(rent languages - Srinivasan Kannan \340\256\\225\340\256\243\340\257\\215\340\256\243\340\256\251 \340\256\\232\340\257\\200\340\256\251\340\256\277\340\256\265\340\256\276\340\256\\232\340\256\251) s
5 615 M
(4.nameparser\(\) is invoked on previous three ID contexts for full name "Kannan Srinivasan" and ) s
5 604 M
(first and second names are printed) s
5 593 M
(5.syllable_boundary_text_compression\(\) from CompressedSensing implementation is invoked for 3 ) s
5 582 M
(different spellings of same name "Shrinivaasan, Shrinivas, Srinivasan" and syllable vectors \(a) s
5 571 M
(nd their vowelless versions\) are printed:) s
5 560 M
(==============================================================================) s
5 549 M
(##############################################################################################) s
5 538 M
(#######) s
5 527 M
(Vowelless Syllable Vector Compression for text -  Shrinivaasan : \([u'Shrini', u'vaasan'], u'Sh) s
5 516 M
(r_n_-v__s_n'\)) s
5 505 M
(##############################################################################################) s
5 494 M
(#######) s
5 483 M
(Vowelless Syllable Vector Compression for text -  Shrinivas : \([u'Shrini', u'vas'], u'Shr_n_-v) s
5 472 M
(_s'\)) s
5 461 M
(##############################################################################################) s
5 450 M
(#######) s
5 439 M
(Vowelless Syllable Vector Compression for text -  Srinivasan : \([u'Srini', u'vasan'], u'Sr_n_-) s
5 428 M
(v_s_n'\)) s
5 417 M
(======================================================================) s
5 406 M
(6.Distance between these syllable vectors has to be phonetic by finding syllable-wise audio si) s
5 395 M
(milarity - every syllable is an audio waveform and two names are compared by syllable distance) s
5 384 M
(s between vectors of waveforms e.g ["Shrini","vas"] and ["Srini","vasan"]. This has been omitt) s
5 373 M
(ed presently because syllable-to-audio tools are required.) s
5 362 M
(7.Comparison to Match Rating Codex from JellyFish is also printed:) s
5 351 M
(Match ratings for same name of differing spellings - [Shrinivaasan,Shrinivas,Srinivasan]: [u'S) s
5 340 M
(HRVSN', u'SHRNVS', u'SRNVSN']) s
5 329 M
(8.logs for this commit and previous are at testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.) s
5 318 M
(18September2019) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(-----------------------------------------------) s
5 274 M
(712. \(THEORY\) Computational Geometric Factorization - Gamma Approximation of Sum of Binary Sea) s
5 263 M
(rch times - Summation for first sqrt\(N\) tiles and why non-average case sequential factorizatio) s
5 252 M
(n is difficult - related to 668 - 19 September 2019) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(-----------------------------------------------) s
5 219 M
(For sane binary search length of the tile must be > 1 => N/\(k^2 + k\) > 1 \(or\) k^2 + k < N) s
5 208 M
(=> k^2 + k - N < 0) s
5 197 M
(=> solving the quadratic, k = -1 + sqrt\(1 + 4N\) / 2) s
5 186 M
(=> k = -0.5 +/- 0.5*sqrt\(1 + 4N\)) s
5 175 M
(For large N, k < 0.5*sqrt\(4N\) \(or\) k < sqrt\(N\)) s
5 153 M
(Total time for binary searching k=sqrt\(N\) adjacent tile segment arithmetic progressions by gam) s
5 142 M
(ma approximation = sqrt\(N\)log N - log \(sqrt\(N\)+1\) - \(2sqrt\(N\) + 1\)log\(sqrt\(N\)\) + 2\(sqrt\(N\)+1\) ) s
5 131 M
(- log \(2*pi\)) s
5 120 M
(= sqrt\(N\)logN + 2sqrt\(N\) + 2 - log\(sqrt\(N\)+1\) - 2sqrt\(N\)log\(sqrt\(N\)\) - log\(sqrt\(N\)\) - log\(2*pi) s
5 109 M
(\)) s
5 98 M
(<= sqrt\(N\)logN + 2sqrt\(N\) + 2 - log\(sqrt\(N\)\) - 2sqrt\(N\)log\(sqrt\(N\)\) - log\(sqrt\(N\)\) -log\(2*pi\)) s
5 87 M
(<= 2sqrt\(N\)log\(sqrt\(N\)\) + 2sqrt\(N\) + 2 - log\(sqrt\(N\)\) - 2sqrt\(N\)log\(sqrt\(N\)\) - log\(sqrt\(N\)\) - ) s
5 76 M
(log\(2*pi\)) s
5 65 M
(<= 2sqrt\(N\) + 2 - 2log\(sqrt\(N\)\) - log\(2*pi\)) s
5 54 M
(<= 2*\(sqrt\(N\) - log\(sqrt\(N\)\) + 1\) - log\(2*pi\)) s
5 43 M
(<= 2*\(sqrt\(N\) - log\(sqrt\(N\)\)\)) s
5 32 M
(which is exponential in logN still shaving off only a logarithm from squareroot of N. This nec) s
5 21 M
(essitates finding approximate factors close to actual factors in average case sequential optim) s
5 10 M
(ization previously implying factorization \(finding atleast one factor\) is in average-P which i) s
_R
S
%%Page: (468) 468
%%BeginPageSetup
_S
18 36 translate
/pagenum 468 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (468) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(s an average lowerbound for all possible integers and different from P. Therefore deterministi) s
5 681 M
(c factorization to find one factor or all factors requires NC \(PRAM or BSP\) parallelism - Neur) s
5 670 M
(onRain Spark Factorization which is both a PRAM \(multicore\) and BSP\(cloud\) model finds all fac) s
5 659 M
(tors. It has to be noted previous average case sequential time is for finding atleast one fact) s
5 648 M
(or.) s
5 626 M
(----------------------------------------------------------------------------------------------) s
5 615 M
(---------------------------------------------) s
5 604 M
(713. \(THEORY and FEATURE\) People Analytics - Set Partition based Electronic Voting Machine imp) s
5 593 M
(lementation and a NeuronRainApps Drone usecase - 24 September 2019 - related to 620,648) s
5 582 M
(----------------------------------------------------------------------------------------------) s
5 571 M
(---------------------------------------------) s
5 560 M
(Voter Received Encrypted Paper Audit Trail \(VREPAT\) Theoretical Voting Machine based on Set Pa) s
5 549 M
(rtition Bucketing described previously is partially implemented as a futuristic drone usecase ) s
5 538 M
(\(Autonomous Delivery Usecases - https://syncedreview.com/2019/08/24/autonomous-delivery-moves-) s
5 527 M
(from-research-labs-to-the-streets/\) in this commit - this is not a full-fledged implementation) s
5 516 M
( but conceptual:) s
5 505 M
(        \(*\) Usual state-issued unique id\(s\) are singletons stored in centralized cloud and vul) s
5 494 M
(nerable to breaches/fakes creating identity disputes.) s
5 483 M
(        \(*\) To redress this an alternative dual unique id \(public id and private id\) similar t) s
5 472 M
(o public-key-infrastructure is assumed which is as strong as RSA and Diffie-Hellman protocols) s
5 461 M
(        \(*\) Public unique id is a hash digest of a string which uniquely identifies a person e) s
5 450 M
(.g concatenation of <VoterID><Full Name><Parent/Spouse Name><Permanent Address> is always a un) s
5 439 M
(ique public id. Private id is a password for a voter issued along with a Public unique id.) s
5 428 M
(        \(*\) Polling Station is a Drone - it contains a set partition bucketing voting machine ) s
5 417 M
(which based on addresses or public unique id\(s\) in the voter list automatically navigates to a) s
5 406 M
(n address and lands on a voter doorstep. Voter casts h\(is|er\) vote on the drone booth by publi) s
5 395 M
(c unique id card and private password and receives encrypted receipt of vote.) s
5 384 M
(        \(*\) This Dynamic Drone Polling Booth is inspired by Autonomous Online Shopping Deliver) s
5 373 M
(y and Mobile ATMs available already \(which work on smartcard and password authentication\) and ) s
5 362 M
(has many advantages over traditional static polling stations which satisfy constraints of John) s
5 351 M
( Hopkins Paper to some extent:) s
5 340 M
(                \(*\) Voting need not be limited to a day and can sprawl multiple days.) s
5 329 M
(                \(*\) Voter can do advanced booking for drone and it lands on demand making the ) s
5 318 M
(voting behaviour difficult to predict.) s
5 307 M
(                \(*\) All households are covered and thus maximizes polling percentage) s
5 296 M
(                \(*\) Completely automated election - Minimizes or obviates polling stations, co) s
5 285 M
(st, queueing and personnel and thus human tamper-proof - requires one drone per polling precin) s
5 274 M
(ct of few hundred voters) s
5 263 M
(                \(*\) Ensures privacy) s
5 252 M
(                \(*\) Reduces malpractices because of no crowding, each voter independently vote) s
5 241 M
(s, polling happens at doorstep at time of choosing which is unpredictable and unique demograph) s
5 230 M
(ic/geographic identity is electronically verified by drone navigation to unique address minimi) s
5 219 M
(zing bogus voting \(no voter is denied voting because it could not have been already cast in h\() s
5 208 M
(is|er\) name - GPS drone navigation is an additional geographic uniqueness\). ) s
5 197 M
(        \(*\) This commit defines a new minimal voting function electronic_voting_machine\(\) in S) s
5 186 M
(treaming_SetPartitionAnalytics.py which accepts voted_for, example voter id card contexts of t) s
5 175 M
(he author from testlogs/Streaming_SetPartitionAnalytics_EVM/ \(no text parsing is done\) and mak) s
5 164 M
(es ripemd160 hash digests from them. EVM is a dictionary set partition object mapping candidat) s
5 153 M
(e voted_for to list of voters' public uniqueid hash digests - does not use counters and privat) s
5 142 M
(e id authentication. ) s
5 131 M
(        \(*\) Complexity theoretically, drone voting is reducible to Motion planning \(A-Star alg) s
5 120 M
(orithm\) and travelling salesman problem \(TSP\) because drone has to efficiently navigate the vo) s
5 109 M
(ter vertices spread across geographically \(e.g hamiltonian\) and thus NP-complete.) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(------------------------------------------------) s
5 65 M
(714. \(THEORY and FEATURE\) Topological Handwriting Recognition - Product Homotopies - Related t) s
5 54 M
(o 159,660 - 30 September 2019) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(------------------------------------------------) s
5 21 M
(Pattern grammars for shape description for handwriting recognition previously as homeomorphic ) s
5 10 M
(deformations in R^2 preserving genus \(also defined by knots - https://github.com/shrinivaasank) s
_R
S
%%Page: (469) 469
%%BeginPageSetup
_S
18 36 translate
/pagenum 469 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (469) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(a/Grafit/blob/master/course_material/NeuronRain/AdvancedComputerScienceAndMachineLearning/Adva) s
5 681 M
(ncedComputerScienceAndMachineLearning.txt\) have an alternative topological definition in terms) s
5 670 M
( of Product of Path Homotopy classes: Two paths f and f' are homotopic if they have same initi) s
5 659 M
(al and final points x0 and x1 and there is a continuous map F:I * I ---> X for some topology s) s
5 648 M
(pace X such that F\(s,0\) = f\(s\) and F\(s,1\) = f'\(s\); F\(0,t\) = x0 and F\(1,t\) = x1. If f is a path) s
5 637 M
( in X from x0 to x1 of homotopy F and g is a path from x1 to x2 of homotopy G, product homotop) s
5 626 M
(y F*G by pasting lemma is the set of all continuous paths from x0 to x2 via x1. An example of ) s
5 615 M
(product homotopy is handwritten digit '8' which has a pattern grammar:) s
5 604 M
(        <8> := <o> pasted on <o>) s
5 593 M
(Set of closed paths \(all possible ways of writing 'o' - initial and end points are same\) for <) s
5 582 M
(o> form a path homotopy F and product homotopy F*F defines all possible ways of writing '8' by) s
5 571 M
( pasting together endpoints of two handwriting homotopies F and F \(also referred to as path co) s
5 560 M
(mposition\). Similarly every handwritten alphabet can be defined as product of homotopies by pa) s
5 549 M
(sting together path initial-end points. For example letter 'p' has pattern grammar: ) s
5 538 M
(        <p> := <|> pasted to the left of <o>) s
5 527 M
(In other words homotopy is a continous deformation of a path having end points fixed. It has t) s
5 516 M
(o be noted that previous homotopy definition does not distinguish handwritings of two humans -) s
5 505 M
( it just recognizes any written alphanumeric as a product homotopy. Distinguishing two humans ) s
5 494 M
(requires fine definition of homotopies within thresholds \(e.g handwritings of same person hard) s
5 483 M
(ly deviate from thresholds and some paths do not exist in handwriting homotopy of one person b) s
5 472 M
(ut do in other person's\). This topological information of handwritings can complement traditio) s
5 461 M
(nal neural network based recognitions. ) s
5 439 M
(References:) s
5 428 M
(-----------) s
5 417 M
(714.1 Topology - [James R.Munkres] - Second Edition - Page 108 - Theorem 18.3 - Pasting Lemma ) s
5 406 M
(- Pages 322-326 - Path Homotopy and Product Homotopy - Figures 51.1, 51.5) s
5 395 M
(714.2 Path Homotopy and Path composition - https://en.wikipedia.org/wiki/Path_\(topology\)#Homot) s
5 384 M
(opy_of_paths) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(---------------------------------------------) s
5 340 M
(715. \(THEORY\) People Analytics - Topological Face Recognition - Product Homotopies - related t) s
5 329 M
(o 714 - 2 October 2019) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(---------------------------------------------) s
5 296 M
(Previous section defined Handwriting recognition topologically by Product Homotopies. Face Rec) s
5 285 M
(ognition and Handwriting recognition are crucial for unique identification of a human in peopl) s
5 274 M
(e analytics. Extending Product Homotopies to Face Recognition is not straightforward because f) s
5 263 M
(acial features are not continuous functions which can be unified by pasting lemma. Possible so) s
5 252 M
(lution is to segment the image by either bounding boxes or watershed algorithm and find contou) s
5 241 M
(rs of facial features which are piecemeal discontinuous curves \(approximable by Douglas-Peucke) s
5 230 M
(r polynomial\). Each bounding box or segment containing only continuous curves have to be unifi) s
5 219 M
(ed by pasting lemma which define product homotopies of continuous deformations in 3-dimensions) s
5 208 M
( whereas handwriting homotopies are deformations in 2D. Example: set of images of all possible) s
5 197 M
( postures, expressions and facial distortions of a human face can be equated to union of produ) s
5 186 M
(ct homotopies of continuous contour curves in bounding boxes or segments in the image - Contou) s
5 175 M
(rs of Eyes, Nose, Mouth and Ears of a face cannot be a single continuous curve and can be in s) s
5 164 M
(eparate segments or bounding boxes of an image each defined by a product homotopy of continuou) s
5 153 M
(s contours. Union of product homotopies for Eyes, Nose, Mouth, Ears and any other feature reco) s
5 142 M
(gnizes a face including all possible facial deformations.) s
5 120 M
(Example Shape Grammar for Face Recognition - Union of Product Homotopies \(each <feature> defin) s
5 109 M
(es a product homotopy for one continuous segment of facial feature contour deformations\):) s
5 98 M
(                                                 <Hair>) s
5 87 M
(                                          <Ear><Eye><Eye><Ear>) s
5 76 M
(                                                 <Nose>) s
5 65 M
(                                                 <Mouth>) s
5 54 M
(                                ) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(---------------------------------------------) s
5 21 M
(716. \(THEORY and FEATURE\) Economic Intrinsic Merit - Gravity Model of Volume of Trade and GDP ) s
5 10 M
(as fitness measure - 2 October 2019) s
_R
S
%%Page: (470) 470
%%BeginPageSetup
_S
18 36 translate
/pagenum 470 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (470) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(---------------------------------------------) s
5 670 M
(1.Intrinsic Fitness or Intrinsic Merit has been traditionally applied to denote innate ability) s
5 659 M
( of a vertex in Social Networks. Fitness model is applicable in Economic Networks too e.g Inte) s
5 648 M
(rnational Trading Network\(ITN\), Production Networks\(https://economics.mit.edu/files/9790\).) s
5 637 M
(2.https://arxiv.org/pdf/1409.6649.pdf discusses various measures of Economic fitness including) s
5 626 M
( GDP and quantifying volume of trade between nations - Quoted excerpts: ) s
5 615 M
(        2.1 "...The standard model of non-zero trade flows, inferring the volume of bilateral ) s
5 604 M
(trade between any two countries from the knowledge of their Gross Domestic Product \(GDP\) and m) s
5 593 M
(utual geographic distance \(D\), is the so-called \342\\200\\230gravity model\342\\200\\231 of trade [21\342) s
5 582 M
(\\200\\22325]. In its simplest form, the gravity model predicts that the volume of trade between) s
5 571 M
( countries i and j is Fij = \316\261 GDP^\316\262i \302\267 GDP^\316\262j / Dij^k...") s
5 560 M
(        2.2 "...where zi \342\\211\241 e^\342\\210\\222\316\270i and pij \342\\211\241 zi*zj/\(1+zi*zj\). The latter repr) s
5 549 M
(esents the probability of forming a link between nodes i and j, which is also the expected val) s
5 538 M
(ue <aij>  = zi*zj/\(1 + zi*zj\)= pij . \(4\) ...") s
5 527 M
(        2.3 "...It should be noted that eq.\(4\) can be thought of as a particular case of the s) s
5 516 M
(o-called Fitness Model [41], which is) s
5 505 M
(a popular model of binary networks where the connection probability pij is assumed to be a fun) s
5 494 M
(ction of the values of some \342\\200\\230fitness\342\\200\\231 characterizing each vertex. Indeed, the ) s
5 483 M
(variables ~z\342\\210\\227 can be treated as fitness parameters [6, 37] which control the probabili) s
5 472 M
(ty of forming a link. A very interesting correlation between a fitness parameter of a country ) s
5 461 M
(\(assigned by the model\) and the GDP of the same country was found [37]. This relation is repli) s
5 450 M
(cated here in Fig. 2, where the rescaled GDP of each country \(gi \342\\211\241 GDPi/sum\(GDPi\)\) is com) s
5 439 M
(pared to the value of the fitness parameter z\342\\210\\227i obtained by solving eq.\(5\). The red li) s
5 428 M
(ne is a linear fit of the type zi = \342\\210\\232a \302\267 gi....") s
5 417 M
(3. This commit defines a new function EconomicMerit\(\) in LinearAndLogisticRegression.py which ) s
5 406 M
(computes trade link probabilities and gravity model between countries based on GDP as intrinsi) s
5 395 M
(c fitness measure and distances between countries. Reference 694.1 defines GDP fitness as a li) s
5 384 M
(near regression dependent on macroeconomic variables.) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(--------------------------------------------) s
5 340 M
(717. \(THEORY\) Cognitive Element in the context of Category theory, Factorization and Set Parti) s
5 329 M
(tions - related to 160 - 4 October 2019) s
5 318 M
(----------------------------------------------------------------------------------------------) s
5 307 M
(--------------------------------------------) s
5 296 M
(Notion of "Cognitive element" for the lack of better name was defined earlier as an element in) s
5 285 M
( an array, set partition, group, category or any algebraic structure which "knows" or has "inf) s
5 274 M
(ormation" about other peer elements - this is an experimental abstraction in Category theory w) s
5 263 M
(hich might have overlaps to existing algebraic concepts \(left inverse of a morphism - retracti) s
5 252 M
(on/section - https://en.wikipedia.org/wiki/Section_\(category_theory\)\). Information could be an) s
5 241 M
(y equivalence relation or morphism - "member-of","factor-of","subset-of" etc., defined in a Ca) s
5 230 M
(tegory. Examples:) s
5 219 M
(        717.1 117 = 13*9 is an element of ring of integers as category - 13,9 are "factors-of") s
5 208 M
( 117 or 13 "knows" about 9 by factorization. Factorization is a morphism relation defined on c) s
5 197 M
(ategory of integer objects - Inverse\([13,9]\)=117) s
5 186 M
(        717.2 Following set partition which maps timeout values to buckets of processes having) s
5 175 M
( that timeout value in an OS scheduler is a category\(Hashing Dynamic Sets - https://github.com) s
5 164 M
(/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComputerScienceAndMachin) s
5 153 M
(eLearning/AdvancedComputerScienceAndMachineLearning.txt\):) s
5 142 M
(                10 - 1,2,5) s
5 131 M
(                20 - 12,15,11) s
5 120 M
(                33 - 3,111) s
5 109 M
(                41 - 16) s
5 98 M
(                55 - 25,114) s
5 87 M
(and every bucket defines a timeout morphism relation between objects in the processes category) s
5 76 M
( - Timeout Bucket 55 has processes 25, 114 which know each other.) s
5 65 M
(        717.3 Every morphism equivalence relation on any Category defines equivalence classes ) s
5 54 M
(elements of which have "information" about peers.) s
5 43 M
(        717.4 Cognitive elements have useful applications in set partition equivalence relatio) s
5 32 M
(ns - in previous set partition example, question of inverse - finding a bucket containing an e) s
5 21 M
(lement - is non-trivial e.g find the bucket having element 111. This requires an exhaustive se) s
5 10 M
(arch because set partition is not a bijective map and reverse lookup is not possible \(but ther) s
_R
S
%%Page: (471) 471
%%BeginPageSetup
_S
18 36 translate
/pagenum 471 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (471) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(e are bidirectional dictionary implementations in Python which can retrieve a key from value -) s
5 681 M
( https://pypi.org/project/bidict/\). Elements 3,111 are cognitive peers by inverse morphism rel) s
5 670 M
(ation "in the bucket of 33" - Inverse\([111,3]\) = 33. Implementing such an inverse requires kno) s
5 659 M
(wledge of cognitive elements which are domains of the inverse morphism.) s
5 637 M
(----------------------------------------------------------------------------------------------) s
5 626 M
(-----------------------------------------------) s
5 615 M
(718. \(THEORY and FEATURE\) People Analytics - Set Partition Analytics based Drone Electronic Vo) s
5 604 M
(ting Machine - updated - 9 October 2019 - related to 713) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-----------------------------------------------) s
5 571 M
(1.Streaming_SetPartitionAnalytics.py has been changed to update electronic_voting_machine\(\) fu) s
5 560 M
(nction - New semaphore mutual exclusion synchronized primitive block \(BoundedSemaphore\) has be) s
5 549 M
(en added to guard the voting critical section. Maximum value of semaphore is set to 1 voter.) s
5 538 M
(2.Voting code has been updated to check if voter has already voted by Voted list and skip voti) s
5 527 M
(ng if yes. Voter id\(s\) are appended to Voted array after voting within synchronized block.) s
5 516 M
(3.Additional encryption has been introduced by invoking SHA256 Passlib encrypt on the ripemd16) s
5 505 M
(0 publicuniqueid hex hash digest and append the encrypted voter id to EVM bucket.) s
5 494 M
(4.This EVM assumes the function electronic_voting_machine\(\) is invoked from a Drone python cod) s
5 483 M
(e which should have already navigated to the voter address and done the user/password authenti) s
5 472 M
(cation by smartcard.) s
5 461 M
(5.Single Signon username/password authentication has already been implemented in NeuronRain GU) s
5 450 M
(I - python-src/webserver_rest_ui/NeuronRain_REST_WebServer.py - by passlib OAuth having MongoD) s
5 439 M
(B and Redis credential storage - which might as well be used as alternative caller for this EV) s
5 428 M
(M.) s
5 417 M
(6.logs for preventing repetitive voting and SHA256 buckets are at testlogs/Streaming_SetPartit) s
5 406 M
(ionAnalytics.EVM.log.9October2019) s
5 395 M
(7.This Set Partition EVM is also a Dynamic Graph Partition \(Similar Worst Case Execution Time ) s
5 384 M
(- Survival Index - Dynamic Graph Partition OS Scheduler is described in https://github.com/shr) s
5 373 M
(inivaasanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComputerScienceAndMachineLea) s
5 362 M
(rning/AdvancedComputerScienceAndMachineLearning.txt - Hashing Dynamic Sets\) because voting is ) s
5 351 M
(dynamic and voters related among themselves might vote for different candidates which creates ) s
5 340 M
(edges of dynamic people partition graph \(voter vertices related by edges are partitioned into ) s
5 329 M
(candidate buckets\)) s
5 318 M
(8.As mentioned in previous section, Left Inverse of Voter Bucket Objects is the Candidate vote) s
5 307 M
(d for connecting peer voters by an equivalence relation.) s
5 285 M
(----------------------------------------------------------------------------------------------) s
5 274 M
(-----------------------------------------------) s
5 263 M
(719. \(THEORY\) Complement Diophantines over Integers \(Z\), Polynomial Interpolation, Polynomial ) s
5 252 M
(Reconstruction Problem, Error Correcting Codes, MRDP theorem, Lagranges Four Square Theorem an) s
5 241 M
(d Decidability of Complementation, Ramsey 2-coloring of sequences, Set Partitions to Tile Cove) s
5 230 M
(r reduction, Factorization, Lagrangian tiling of 2-dimensional space, ZF and Axiom of Choice \() s
5 219 M
(AOC\) and Complement Choice functions, Depth-2 majority voting social choice circuits - an alte) s
5 208 M
(rnative interpretation based on diagonalization - 13 October 2019 - related to 345, 471, 617, ) s
5 197 M
(646, 651, 657) s
5 186 M
(----------------------------------------------------------------------------------------------) s
5 175 M
(-----------------------------------------------) s
5 164 M
(By MRDP theorem, every recursively enumerable \(RE\) set of Integers is diophantine representabl) s
5 153 M
(e and there are RE sets which are not recursive \(R\) = RE \\ R \(RE set difference R\). RE \\ R lan) s
5 142 M
(guages have diophantine representations but are not accepted/rejected by a halting turing mach) s
5 131 M
(ine \(without looping\) which includes a turing machine for finding the complement diophantine r) s
5 120 M
(epresentation of a language in RE \\ R. Such a halting turing machine \(TM1\) in RE \\ R or an alg) s
5 109 M
(orithmic equivalent for finding complement diophantine representation of other sets in RE \\ R ) s
5 98 M
(is a contradiction. This diagonalization proves undecidability of complement diophantine for R) s
5 87 M
(E \\ R \(diophantine representation exists but algorithm does not for RE \\ R\).) s
5 65 M
(For Recursive sets \(R\), there are algorithms available or there exists a halting turing machin) s
5 54 M
(e \(TM2\) in R for finding algorithmic equivalent of diophantine representation of other sets in) s
5 43 M
( R and diagonalization does not contradict e.g Polynomial Interpolation \(exact\), Polynomial Re) s
5 32 M
(construction Problem \(error correcting polynomial agreeing on most points - reference 345.2\), ) s
5 21 M
(Lagrange four square theorem. Lagrange four squre theorem maps tuples in 4-dimensional space t) s
5 10 M
(o points on recursive set \(or\) any integer can be written as sum of 4 squares. This 4-tuples t) s
_R
S
%%Page: (472) 472
%%BeginPageSetup
_S
18 36 translate
/pagenum 472 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (472) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(o integer map from Lagrange four square theorem is infact an interpolation by a polynomial ove) s
5 681 M
(r 4 variables - f\(x1,x2,x3,x4\) = x1^2 + x2^2 + x3^2 + x4^2 = y. Lagrange Four Square interpola) s
5 670 M
(tion indirectly solves factorization by solving an optimization problem - set partition is red) s
5 659 M
(uced to tile cover of a rectangular 2-dimensional space and factors are sides of the rectangle) s
5 648 M
( which have to be solved for by an integer program.\(Both diophantine representation and algori) s
5 637 M
(thm exist for R\). Chinese Remainder Theorem generalizes this as an isomorphic map in multiple ) s
5 626 M
(dimensions - x mod N <=> \(x mod n1, ..., x mod nk\) for coprime n1,n2,...,nk and N=n1*n2*...*nk) s
5 615 M
(. ) s
5 593 M
(This diagonal interpretation is more dichotomous than previous sections on complement diophant) s
5 582 M
(ine undecidability which in a nutshell implies: Any set is a complementary set of some other s) s
5 571 M
(et and thus any complementary set which is recursively enumerable but not recursive has a diop) s
5 560 M
(hantine representation and not decidable by an algorithm, while any recursive complementary se) s
5 549 M
(t is decidable by an algorithm and also has a diophantine representation.) s
5 527 M
(As a special example complement of Axiom of Choice for depth-2 majoriy boolean circuits is phr) s
5 516 M
(ased as: For set of electorate sets S={s1,s2,s3,...} there exists a choice function C'\(si\)=\(x1) s
5 505 M
(,x2...\) which flips a chosen majority \(0 or 1\) from every set si in S. Leaves are members of S) s
5 494 M
( \(electorate sets or constituencies\) while depth-1 are complemented/flipped bits from majority) s
5 483 M
( voting of leaves. This complements AOC democracy function as: "Who won" Vs "Who lost" \(altern) s
5 472 M
(atively can be complemented as "Who voted in favour" versus "Who did not vote in favour" which) s
5 461 M
( has hardness amplification ramifications for proving P != NP\). It is open if Complement AOC i) s
5 450 M
(s decidable. Traditional democracy is depth-2 majority circuit and abides by AOC.) s
5 428 M
(Complement Diophantines throughout this draft focus mainly on sets or sequences of Integers \(Z) s
5 417 M
(\) because MRDP theorem and Rayleigh-Beatty  sequences theorem are limited to Z while complemen) s
5 406 M
(tation over Rationals\(Q\) is open problem and complementation over Reals \(R\) is solvable by Tar) s
5 395 M
(ski/Sturm decidability.) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(------------------------------------------------) s
5 351 M
(720. \(THEORY and FEATURE\) People Analytics - Handwriting Recognition - Contour Homotopies - Ma) s
5 340 M
(tplotlib Rasterization - 16 October 2019 - related to 714 and 715) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(------------------------------------------------) s
5 307 M
(1.This commit updates handwriting_recognition\(\) in DeepLearning_ConvolutionNetwork_BackPropaga) s
5 296 M
(tion.py to additionally raster the contours extracted from the handwritten alphanumeric.) s
5 285 M
(2.Rasterization presently invokes matplotlib plot\(\) having parameter rasterized=True and prese) s
5 274 M
(ts dots-per-inch parameter to 100 in figure\(\) for restricting number of pixels.) s
5 263 M
(3.Contours from each recognized written alphanumeric are looped and plotted by matplotlib plot) s
5 252 M
(\(\) setting rasterized=True.) s
5 241 M
(4.There are better alternatives to this primitive rastering - rasterio \(https://rasterio.readt) s
5 230 M
(hedocs.io/en/stable/\) and wavelet-rasterization \(https://github.com/ufoym/wavelet-rasterizatio) s
5 219 M
(n/\) and desired rasterization is similar to illustrations in https://github.com/ufoym/wavelet-) s
5 208 M
(rasterization which is a coarse rectification required for hyperbolic arc in Computational Geo) s
5 197 M
(metric Factorization \(But there is a windows DLL build dependency\). Matplotlib dots-per-inch a) s
5 186 M
(nd rasterized=True creates fine grained rasterized curves.) s
5 175 M
(5.Each contour is approximable by a Bezier-like curve \(https://en.wikipedia.org/wiki/B%C3%A9zi) s
5 164 M
(er_curve\) which is an instance of homotopy because bezier curves have endpoints/control points) s
5 153 M
( unchanged and intermediate points on curve are puppet-animated \(most applicable in Graphics\).) s
5 142 M
( ) s
5 131 M
(6.Handwriting can be simulated by a Bezier curve having unchanged endpoints or control points ) s
5 120 M
(which is a homotopic continuous deformation.) s
5 109 M
(7.Original handwriting is reconstructible by homotopy and pasting lemma - by pasting together ) s
5 98 M
(polynomials for individual contours.) s
5 87 M
(8.Logs and images for this commit are at testlogs/ \(handwritten 1\(style 1\) and 1\(style 2\), 1 a) s
5 76 M
(nd 8 are contour-rasterized and compared\):) s
5 65 M
(DeepLearning_ConvolutionNetwork_BackPropagation.log.tar.xz) s
5 54 M
(DeepLearning_ConvolutionNetwork_BackPropagation.Raster.Homotopies_1_1.jpg) s
5 43 M
(DeepLearning_ConvolutionNetwork_BackPropagation.Raster.Homotopies_1_2.jpg) s
5 32 M
(DeepLearning_ConvolutionNetwork_BackPropagation.Raster.Homotopies_8_1.jpg) s
5 21 M
(DeepLearning_ConvolutionNetwork_BackPropagation.Raster.Homotopies.pdf) s
5 10 M
(9.Every contour can be fit to a bezier polynomial and two alphanumerics have to be verified if) s
_R
S
%%Page: (473) 473
%%BeginPageSetup
_S
18 36 translate
/pagenum 473 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (473) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( they are homotopic \(has a dependency on topology libraries\). This is non-trivial because ever) s
5 681 M
(y homotopically "similar" contour in two alphanumerics have to be pairwise compared) s
5 670 M
(and number of contours per alphanumeric could be in hundreds.) s
5 648 M
(----------------------------------------------------------------------------------------------) s
5 637 M
(-----------------------------------------------) s
5 626 M
(721. \(THEORY and FEATURE\) People Analytics - Handwriting Recognition - Inner Product Space of ) s
5 615 M
(Contour Interpolated Polynomials - 17 October 2019 - related to 714,715,720) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(-----------------------------------------------) s
5 582 M
(1.In continuation of the previous commit for drawing rasterized contour curves, handwriting co) s
5 571 M
(ntours are interpolated by SciPy.interpolate splprep\(\)) s
5 560 M
(2.Points on contour curves are stack\(\)-ed to 2 dimensional arrays and contours having more tha) s
5 549 M
(n 3 points are interpolated by spline polynomials of degree less than number of points per con) s
5 538 M
(tour.) s
5 527 M
(3.PdfPages "pdf damaged" error in DeepLearning_ConvolutionNetwork_BackPropagation.Raster.Homot) s
5 516 M
(opies.pdf has been resolved by PdfPages close\(\) which flushes the buffer.) s
5 505 M
(4.splprep \(https://docs.scipy.org/doc/scipy-1.2.1/reference/generated/scipy.interpolate.splpre) s
5 494 M
(p.html\) creates B-Spline curves which are exact but less smooth as opposed to Bezier curves wh) s
5 483 M
(ich are smoother, depend on control points and are approximate fit \(passes through most of the) s
5 472 M
( points\).) s
5 461 M
(5.Boolean flag TopologicalRecognition=True/False has been introduced in __main__ to choose top) s
5 450 M
(ological handwriting recognition instead of Convolution Neural Network Pattern Recognition.) s
5 439 M
(6.Logs and Pdf images for contour polynomials are at:) s
5 428 M
(testlogs/DeepLearning_ConvolutionNetwork_BackPropagation.log.17October2019) s
5 417 M
(testlogs/DeepLearning_ConvolutionNetwork_BackPropagation.Raster.Homotopies.pdf) s
5 406 M
(7.By defining an inner product space of contour polynomials <f,g>=DefiniteIntegral\(f\(x\)g\(x\)dx\)) s
5 395 M
(, distance function is obtained for verifying if 2 contours belonging to different handwritten) s
5 384 M
( alphanumerics are "similar" or "orthogonal" \(polynomials f and g are orthogonal if <f,g>=0\). ) s
5 373 M
(This is an algebraic but less topological similarity.) s
5 351 M
(References:) s
5 340 M
(-----------) s
5 329 M
(721.1 Orthogonal Polynomials - https://www.math.tamu.edu/~yvorobet/MATH304-503/Lect4-04web.pdf) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(-----------------------------------------------) s
5 285 M
(722. \(THEORY and FEATURE\) Update - Drone Electronic Voting Machine NeuronRainApps Usecase - 22) s
5 274 M
( October 2019 - related to 713) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(-----------------------------------------------) s
5 241 M
(722.1 ROS Drone Navigation Algorithms which depend on Google Maps for GPS geolocation have bee) s
5 230 M
(n cited as references in NeuronRain Documentation and Licensing: http://neuronrain-documentati) s
5 219 M
(on.readthedocs.io/en/latest/ - Distance is computed by geodesic geometric equations \(Bearing\).) s
5 208 M
( Following are quoted excerpts from https://journalofbigdata.springeropen.com/articles/10.1186) s
5 197 M
(/s40537-019-0214-3:) s
5 186 M
(        722.1.1 "...In the experiment that we did, the average of positional deviation of land) s
5 175 M
(ing position between the actual landing position and the desired landing position in the fligh) s
5 164 M
(t tests of flying from start to goal is 1.1125 m and for the tests that use the algorithm whic) s
5 153 M
(h uses course-over-ground, the positional deviation has average of 2.39 m....") s
5 142 M
(        722.1.2 "...The recent developments of drone for sprayer pesticide applications and us) s
5 131 M
(ed for delivering items, for example the Amazon Prime Air, where Amazon used an octocopter to ) s
5 120 M
(deliver items with weighs less than 5 lb or around 2.3 kg...") s
5 109 M
(722.2 Commercially experimented drone online shopping grocery delivery mechanisms have payload) s
5 98 M
( of few kilograms. ) s
5 87 M
(722.3 Drone Electronic Voting Machine has an accompanied Point-of-Voting handheld device for s) s
5 76 M
(martcard voter id authentication. ) s
5 65 M
(722.4 Drone navigates to an address by Google maps from a voter list \(powered by ROS or linux ) s
5 54 M
(kernel PXRC drivers\). ) s
5 43 M
(722.5 Once drone lands on doorstep, Voter authenticates in the Point-of-Voting machine with in) s
5 32 M
( drone by voter id smartcard. ) s
5 21 M
(722.6 Ballot is displayed in a touchscreen of the drone. At the end of the voting drone Point-) s
5 10 M
(of-Voting device issues a VREPAT encrypted receipt of the vote and retreats. ) s
_R
S
%%Page: (474) 474
%%BeginPageSetup
_S
18 36 translate
/pagenum 474 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (474) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(722.7 Drone EVM does not have payload like autonomous delivery - thus lightweight. ) s
5 681 M
(722.8 Landing deviation has to be specified upfront as config parameter.) s
5 659 M
(References:) s
5 648 M
(-----------) s
5 637 M
(722.9 UAV Theory, Design and Applications - [AR Jha] - https://content.taylorfrancis.com/books) s
5 626 M
(/download?dac=C2014-0-36678-5&isbn=9781498715430&format=googlePreviewPdf) s
5 604 M
(----------------------------------------------------------------------------------------------) s
5 593 M
(----------) s
5 582 M
(723. \(THEORY\) Update 2 - Drone Electronic Voting Machine - Voting Analytics - Set Partition Di) s
5 571 M
(stance Measures - 2 November 2019 - related to 722) s
5 560 M
(----------------------------------------------------------------------------------------------) s
5 549 M
(----------) s
5 538 M
(723.1 Drone Electronic Voting machine partial implementation \(depends on drone navigation\) in ) s
5 527 M
(NeuronRain is an obfuscated set partition of electorate \(voters identity per candidate bucket ) s
5 516 M
(is encrypted\)) s
5 505 M
(723.2 Analytics inferences can be drawn from a stream of previous encrypted set partition EVMs) s
5 494 M
( without compromising voter privacy.) s
5 483 M
(723.3 Variety of distance measures are available for comparing set partitions:) s
5 472 M
(        723.3.1 Earth Mover Distance or Wasserstein Distance \(OpenCV2 and SciPy\) - which is am) s
5 461 M
(ount of work necessary to move a mass of one shape to another - shape is a multidimensional ob) s
5 450 M
(ject and two set partition EVMs are of different shapes - https://docs.opencv.org/2.4/modules/) s
5 439 M
(imgproc/doc/histograms.html?highlight=emd#cv.CalcEMD2 and https://docs.scipy.org/doc/scipy/ref) s
5 428 M
(erence/generated/scipy.stats.wasserstein_distance.html - EMD2 in OpenCV2 is a sophisticated ve) s
5 417 M
(rsion of EMD for comparing two visuals by mapping images to histogram probability distribution) s
5 406 M
(s while EMD in SciPy is wasserstein distance) s
5 395 M
(        723.3.2 OpenCV2 provides many other measures for comparing image histograms - https://) s
5 384 M
(docs.opencv.org/2.4/modules/imgproc/doc/histograms.html - cvCompareHist\(\) by Correlation, Chi-) s
5 373 M
(Square, Intersection,Bhattacharyya,Hellinger distance measures) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(----------) s
5 329 M
(724. \(FEATURE\) Update 3 - Drone Electronic Voting Machine - JSON persistence of EVMs - Datasou) s
5 318 M
(rce for Voting Analytics - 2 November 2019 - related to 723) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(----------) s
5 285 M
(724.1 electronic_voting_machine\(\) function in Streaming_SetPartitionAnalytics.py has been upda) s
5 274 M
(ted to accept 3 arguments - voting machine set-partition obfuscated dictionary, unique id cont) s
5 263 M
(ext and candidate voted for - for removing hardcoded voting dictionary and being generic acros) s
5 252 M
(s polling stations.) s
5 241 M
(724.2 Voting machine dictionaries are iterated and mapped to histograms of Candidate to Votes ) s
5 230 M
(Counter \(size of bucket\)) s
5 219 M
(724.3 Voting machine dictionaries are JSON dumped to a file testlogs/Streaming_SetPartitionAna) s
5 208 M
(lytics.EVMs.json - this JSON persistence is only for analytics purposes and voting machine dic) s
5 197 M
(tionary is still an in-memory object per drone EVM supposed to be passed on from an already na) s
5 186 M
(vigated Drone python code which is lacking.) s
5 175 M
(724.4 This JSON file can be read as a stream by Streaming Abstract Generator Dictionary dataso) s
5 164 M
(urce -Streaming_AbstractGenerator.StreamAbsGen\("DictionaryHistogramPartition","testlogs/Stream) s
5 153 M
(ing_SetPartitionAnalytics.EVMs.json"\) and any histogram analytics function can be invoked on t) s
5 142 M
(he stream.) s
5 131 M
(724.5 electronic_voting_machine\(\) is invoked 9 times for 2 voting machines, 3 voter id context) s
5 120 M
(s and 3 candidates and electronic_voting_analytics\(\) function which implements the previous JS) s
5 109 M
(ON persistence is invoked after - logs at testlogs/Streaming_SetPartitionAnalytics.EVM.log.2No) s
5 98 M
(vember2019) s
5 87 M
(724.6 Streaming_AbstractGenerator.py "DictionaryHistogramPartition" __iter__\(\) clause has been) s
5 76 M
( updated to do JSON load\(\) of dictionaries instead of AST literal_eval\(\) and yield the diction) s
5 65 M
(aries as stream.) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(----------------------------------------------) s
5 21 M
(725. \(THEORY\) Drone Electronic Voting Machine, Voting Analytics and Forecasts, Bertrand Ballot) s
5 10 M
( Theorem, Money Changing Problem, Set Partitions, Depth-2 Boolean Majority Circuit - 3 Novembe) s
_R
S
%%Page: (475) 475
%%BeginPageSetup
_S
18 36 translate
/pagenum 475 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (475) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(r 2019 - related to 657, 666) s
5 681 M
(----------------------------------------------------------------------------------------------) s
5 670 M
(----------------------------------------------) s
5 659 M
(Drone Electronic Voting Machine partial implementation previously is only a majority voting si) s
5 648 M
(mulation - Voted dictionary hardcoded at present which prevents duplicate voting in Streaming_) s
5 637 M
(SetPartitionAnalytics.py \(if publicuniqueid not in Voted:\) has to be either in a centralized N) s
5 626 M
(oSQL store or localized per drone for global uniqueness so that no voter casts vote in 2 drone) s
5 615 M
( EVMs \(which is already guaranteed by geographic uniqueness - drone autonomously navigates to ) s
5 604 M
(an address and authenticates voter smartcard by point-of-voting device - in some aspects this ) s
5 593 M
(is similar to old tech postoffice protocol and a betterment of postal ballots: Sealed paper ma) s
5 582 M
(ils are delivered uniquely to a name and address which is a public unique id and there is no p) s
5 571 M
(assword. Tampering is easily verifiable if there is damage to courier seal\) - Localized Voted ) s
5 560 M
(dictionary requires voter lists per drone. Clustering of EVM Set partitions by either Earth Mo) s
5 549 M
(ver Distance or other aforementioned distance measures in OpenCV2 classifies EVMs of similar v) s
5 538 M
(oting patterns in single cluster \(non-invasive because histogram depends on per candidate coun) s
5 527 M
(ters alone\). This clustering of EVMs corresponds to depth-1 of depth-2 non-boolean Majority Vo) s
5 516 M
(ting Circuit described schematically in 657 and reflects per segment trend. In boolean setting) s
5 505 M
(, empirically EVMs might be clustered into 2 disjoint partitions for candidates 0 and 1. It ha) s
5 494 M
(s to be noted that set partition of votes is available only post-poll while prepoll numbers ar) s
5 483 M
(e only total votes - inferring post-poll votes set partition from pre-poll total votes is redu) s
5 472 M
(cible to function:) s
5 461 M
(        f\(n\) = c1 + c2 + ... + ck \(n votes partitioned to k candidates\)) s
5 450 M
(and has probability 1/p\(n,k\) where p\(n,k\) is restricted partition number of n for k parts - re) s
5 439 M
(stricted partition and money changing problem/coin problem are equivalent. Probability of cand) s
5 428 M
(idate of biggest part \(c0\) being always ahead in counting by Bertrand Ballot theorem is c0-c1/) s
5 417 M
(\(c0+c1\) if f\(n\) = c0 + c1 in boolean majority for candidates 0 and 1.) s
5 395 M
(----------------------------------------------------------------------------------------------) s
5 384 M
(------------------------------------------------) s
5 373 M
(726. \(THEORY and FEATURE\) Drone Electronic Voting Machine - Pseudorandom Majority Voting Balls) s
5 362 M
(-Bins Simulation and Voting Analytics - 3 November 2019 - related to 620,725) s
5 351 M
(----------------------------------------------------------------------------------------------) s
5 340 M
(------------------------------------------------) s
5 329 M
(726.1 electronic_voting_machine\(\) function in Streaming_SetPartitionAnalytics.py has been upda) s
5 318 M
(ted to import random, sklearn packages for histogram analytics.) s
5 307 M
(726.2 evm_histograms dictionary of EVM dictionaries has been made a list of EVM dictionaries w) s
5 296 M
(hich is dumped to JSON persistence. EVM stream is read from Streaming Abstract Generator - Dic) s
5 285 M
(tionaryHistogram JSON datasource testlogs/Streaming_SetPartitionAnalytics.EVMs.json and ARI\(ad) s
5 274 M
(justed rand index\), AMI\(adjusted mutual information index\) and EMD\(earth mover distance\) histo) s
5 263 M
(gram distance functions are invoked from sklearn and SciPy for every consecutive pair of EVM h) s
5 252 M
(istogram set partitions.) s
5 241 M
(726.3 Exceptions for dissimilar or empty histogram shapes in ARI,AMI and EMD have been handled) s
5 230 M
(.) s
5 219 M
(726.4 Majority Voting is simulated by a poll loop of 10 voters, 3 unique id contexts, 3 candid) s
5 208 M
(ates and 3 electronic voting machines - only 3 votes are allowed and others are discarded as ") s
5 197 M
(already voted".) s
5 186 M
(726.5 Majority Voting simulation is by python pseudorandom number function random\(\) for random) s
5 175 M
(ly choosing candidate to vote for - bounds for the balls and bins coupon collector problem des) s
5 164 M
(cribed in 620 apply.) s
5 153 M
(726.6 These 3 EVMs are analyzed pairwise by electronic_voting_analytics\(\) for ARI, AMI and EMD) s
5 142 M
(-Wasserstein distance.) s
5 131 M
(726.7 Logs and EVMs JSON for previous simulated election are at Streaming_SetPartitionAnalytic) s
5 120 M
(s.EVMs.json and Streaming_SetPartitionAnalytics.EVM.log.3November2019) s
5 109 M
(726.8 calcEMD2\(\) is not available on OpenCV2 Python \(error: no name found\) though recently rel) s
5 98 M
(eased OpenCV3 Gold has its C++ counterpart - OpenCV2 histogram comparison function compareHist) s
5 87 M
(\(\) requires UMat format.) s
5 76 M
(726.9 Streaming Abstract Generator - Dictionary Histogram __iter__\(\) clause yields dictionary ) s
5 65 M
(instead of entries, restoring status quo ante. ) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(----------------------------------------------) s
5 21 M
(727. \(THEORY\) Fame-Merit Equilibrium and Converging Markov Random Walk on World Wide Web, Cond) s
5 10 M
(orcet Jury Theorem, Bipartite Decomposition of World Wide Web, Margulis-Ruzzo Threshold - Conj) s
_R
S
%%Page: (476) 476
%%BeginPageSetup
_S
18 36 translate
/pagenum 476 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (476) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ecture - 12 November 2019 - related to 572 and all sections on Intrinsic Merit, Fame and Major) s
5 681 M
(ity Voting) s
5 670 M
(----------------------------------------------------------------------------------------------) s
5 659 M
(----------------------------------------------) s
5 648 M
(727.1 Page Rank is a converging markov random walk based Fame ranking for World Wide Web and i) s
5 637 M
(s a peer-to-peer markov chain voting mechanism.) s
5 626 M
(727.2 Fame-Merit Equilibrium mentioned theoretically earlier, is an alternative reputation ran) s
5 615 M
(king which tries to find an equilibrium approximation point between absolute intrinsic merit a) s
5 604 M
(nd perceived fame of an entity.) s
5 593 M
(727.3 Both Fame-Merit Equilibrium and PageRank are based on directed graph having weighted edg) s
5 582 M
(es between perceived and perceiver vertices and thus are two formats of Condorcet Jury Theorem) s
5 571 M
( and its derivatives\([Black],[KKLadha]\) or Margulis-Ruzzo Threshold for boolean majority CJT \() s
5 560 M
(Voters or Perceivers err in judging intrinsic merit of the perceived and error probability til) s
5 549 M
(ts the group decision either way beyond a threshold\) - mistake-minimized infinite voters/jury ) s
5 538 M
(implies Nash equilibrium is attainable in either variants of reputation rankings - PageRank an) s
5 527 M
(d Fame-Merit equilibrium are two sides of Condorcet Jury Theorem Coin.) s
5 516 M
(727.4 Fame-Merit equilibrium in the context of algorithmic economics finds Market Clearing Pri) s
5 505 M
(ces for commodities \(which are between intrinsic and perceived prices\) by Convex Programs and ) s
5 494 M
(is schematically drawn as bipartite graph of edges between two sets of vertices - Perceivers\(B) s
5 483 M
(uyers\) and Perceived\(Items\). Every perceiver has a total disposable price merit which has to b) s
5 472 M
(e apportioned amongst perceived items by the convex program \(Eisenberg-Gale, Fischer, Nash Equ) s
5 461 M
(ilibria\). Similar equilibria can be found for any Perception-Absolute \(Fame-Merit\) problem irr) s
5 450 M
(espective of entity being judged - Fame is an image possibly distorted while Merit is real.) s
5 439 M
(727.5 PageRank finds ranking of an entity by a converging markov random walk on peer-to-peer w) s
5 428 M
(orld-wide-web weighted directed graph of Perceiver-Perceived \(huge graph of few billion vertic) s
5 417 M
(es\)) s
5 406 M
(727.6 Equating PageRank and Fame-Merit equilibrium is of theoretical importance because the tw) s
5 395 M
(o are different mathematical gadgets - convex program and converging markov chain random walk.) s
5 384 M
(727.7 Fame-Merit equilibrium convex program for world wide web should also be a huge bipartite) s
5 373 M
( graph of few billion perceivers and perceived on the internet.) s
5 362 M
(727.8 Solutions to Fame-Merit equilibrium convex program strike an approximate midpoint betwee) s
5 351 M
(n absolute intrinsic merit and perceived fame.) s
5 340 M
(727.9 Natural question begotten by equating rankings from fame-merit convex program and PageRa) s
5 329 M
(nk markov chain is: Are two rankings equivalent? Answer to this question is conjectured as yes) s
5 318 M
( in 727.3 supra. Proof/Disproof of this conjecture might involve equating a generic convex pro) s
5 307 M
(gram for a huge bipartite graph of p perceivers and q perceived vertices and PageRank of the s) s
5 296 M
(ame graph of p+q vertices. Or Nash equilibria have to be found for both Fame-Merit and PageRan) s
5 285 M
(k and checked for equality.) s
5 274 M
(727.10 High Correlation coefficients between the two rankings prima facie might indicate coinc) s
5 263 M
(idence. Challenge is to conceive the world-wide web as a whole to be a bipartite graph of perc) s
5 252 M
(eivers-perceived though some components of the internet might be bipartite -  this might requi) s
5 241 M
(re algorithms for bipartite decomposition - world wide web directed graph is decomposed to bip) s
5 230 M
(artite subgraph components and fame-merit equilibrium is computed for each bipartisan componen) s
5 219 M
(t.) s
5 197 M
(References:) s
5 186 M
(-----------) s
5 175 M
(727.11 Bipartite Decomposition of Random Graphs - http://www.cs.tau.ac.il/~nogaa/PDFS/bipdec2.) s
5 164 M
(pdf - World Wide Web is theoretically modelled as a random graph. Its bipartite decomposition ) s
5 153 M
(leading to computing fame-merit equilibrium for every bipartite component is stated as conject) s
5 142 M
(ure previously vis-a-vis PageRank.) s
5 131 M
(727.12 Demand-Supply and Market Clearing Prices - Walrasian-Arrow-Debreu, Fisher Markets - [Yi) s
5 120 M
(shay Mansour] - https://m.tau.ac.il/~mansour/advanced-agt+ml/scribe-10-market-EQ.pdf - Market ) s
5 109 M
(Clearing Price Equilibria viz., Eisenberg-Gale apply to a market in which demand equals supply) s
5 98 M
( and all products are sold with no remaining demand. But actual scenario mostly is the inequal) s
5 87 M
(ity of demand and supply \(Demand-Supply curves - https://en.wikipedia.org/wiki/Supply_and_dema) s
5 76 M
(nd\) defined by equation Demand * Supply = constant \(Demand is inversely proportional to Supply) s
5 65 M
(\). Demand is also a perception and can be defined as perceived importance or utility of a comm) s
5 54 M
(odity and thus a function of perception/utility: ) s
5 43 M
(        utility = function_of\(demand\) or function_of\(1/supply\)) s
5 32 M
(Glut of any entity diminishes perceived importance and dearth increases it. Demand-Supply equi) s
5 21 M
(librium can be generalized to any entity - text,audio,video,people - merit of which has to be ) s
5 10 M
(judged e.g rare texts are more valued, rare visuals are more sought after,rare earths are cost) s
_R
S
%%Page: (477) 477
%%BeginPageSetup
_S
18 36 translate
/pagenum 477 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (477) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ly.) s
5 681 M
(727.13 Artificial Intelligence and Economic Theories - https://arxiv.org/pdf/1703.06597.pdf - ) s
5 670 M
(Individualized Supply-Demand curves for pricing in ecommerce platforms \(Amazon, EBay et al\), G) s
5 659 M
(ranger Causality - one economic time series causes the other with a lag - https://en.wikipedia) s
5 648 M
(.org/wiki/Granger_causality, Pricing - Ricardo labour theory of value - price is proportional ) s
5 637 M
(to labour went into manufacturing goods and services \(Neuro MAC Cryptocurrency, Pricing and Ma) s
5 626 M
(rket Equilibrium - https://github.com/shrinivaasanka/kingcobra64-github-code/blame/master/King) s
5 615 M
(CobraDesignNotes.txt\).) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(-----------------------------------------------) s
5 571 M
(728. \(THEORY and FEATURE\) Set Partition to Tile Cover Reduction by Computational Geometric Fac) s
5 560 M
(torization - Least Squares Approximate Solution) s
5 549 M
(for the underdetermined linear equations, Exact Money Changing Problem\(MCP\) Solution, Quadrati) s
5 538 M
(c Programs, Pell Equation, Shell Turing Machines\(Category of Topological Spaces\) - related to ) s
5 527 M
(577,624,651 - 19 November 2019, 20 November 2019,6 December 2019, 24 January 2020, 26 January ) s
5 516 M
(2020,27 January 2020) s
5 505 M
(----------------------------------------------------------------------------------------------) s
5 494 M
(-----------------------------------------------) s
5 483 M
(1.A random set is partitioned by SymPy set partition API and a partition of the set is chosen ) s
5 472 M
(at random. Random set partition is mapped to a) s
5 461 M
(histogram by map\(len,\) and setpartition_to_tilecover\(\) is invoked. New parameter for number to) s
5 450 M
( factorize has been added in setpartition_to_tilecover\(\).) s
5 439 M
(2.An integer is factorized by Spark Computational Geometric PRAM factorization by subprocess.c) s
5 428 M
(all\(\) invocation and factors of N=pq are read from JSON persistence.) s
5 417 M
(3.Following underdetermined system of equations is solved approximately by LSMR least squares ) s
5 406 M
(for finding arrangement of tiles on the periphery of the rectangle and the fractional solution) s
5 395 M
( vector is rounded off to 1 or 0 based on a threshold:) s
5 384 M
(        #c1*x1 + c2*x2 + ... + ck*xk + ... + cn*xn = p) s
5 373 M
(        #d1*x1 + d2*x2 + ... + dk*xk + ... + dn*xn = q) s
5 362 M
(        #solve AX=B:) s
5 351 M
(        #X = [c1 c2 ... cn] - unknowns \(boolean include or exclude of a tile\)) s
5 340 M
(        #A = [[x1 x2 ... xn]  - knowns \(sides of the square tiles\)) s
5 329 M
(        #     permutation_of[x1 x2 ... xn]]) s
5 318 M
(        #B = [p q] - factors - pq=N) s
5 307 M
(4.Solving underdetermined equations by most libraries including SciPy, NumPy, SymPy etc., yiel) s
5 296 M
(d only approximate solutions because of Rouche-Capelli theorem limitation. In the previous sys) s
5 285 M
(tem of equations coefficient matrix A has two rows of square tile sides from Lagrange four squ) s
5 274 M
(are theorem and one of the rows is permuted for randomness \(reverse\(\) is invoked\) and unknown ) s
5 263 M
(tile choice vector \(d1,d2,...,dn\) should also be  some permutation of \(c1,c2,...,cn\).) s
5 252 M
(5.This commit approximately solves the previous underdetermined linear equations by lsmr\(\) fun) s
5 241 M
(ction of scipy.sparse.linalg and rounds the real solution vector to binary vector. Mutual excl) s
5 230 M
(usion of tiles is by an if-else clause which chooses 1 tiles for side1 and 0 tiles for side2 o) s
5 219 M
(f rectangle. But product of sum of sides won't be equalling N always because of error allowed ) s
5 208 M
(in LSMR and rounding. Sophisticated PRAM GEPP implementations might do better at finding the t) s
5 197 M
(ile arrangment vector \(c1,c2,...,cn\)) s
5 186 M
(6.logs for this commit are at testlogs/Streaming_SetPartitionAnalytics.log.19November2019) s
5 175 M
(7.An example Lagranges Four Square reduction for integer 18 and its random partition=[4,10,4]:) s
5 164 M
(                18 <=> [4,10,4] <=> [1+1+1+1]+[1+4+4+1]+[1+1+1+1] ) s
5 153 M
(                18 <=> 2*9 <=> Solutions for previous tile arrangement system of equations for) s
5 142 M
( the rectangle periphery: [1+1]*[2+2+1+1+1+1+1]) s
5 131 M
(8.Each of the two linear equations can be interpreted as instance of Money Changing Problem\(MC) s
5 120 M
(P\) or Coin Problem. Sides of the square tiles are coins and following linear system:) s
5 109 M
(        c1*x1 + c2*x2 + ... + ck*xk + ... + cn*xn = p ) s
5 98 M
(        d1*x1 + d2*x2 + ... + dk*xk + ... + dn*xn = q) s
5 87 M
(equates factors of N=\(p,q\) to Linear Sum of sides of lagrangian square tiles \(1-dimensional\) f) s
5 76 M
(or the length and breadth of rectangular periphery. Both of the earlier MCP equations are NP-H) s
5 65 M
(ard \(Strongly or Weakly depending on encoding\) which involves finding the integer vector [c1,c) s
5 54 M
(2,c3,...,cn]. Equivalently, tile cover of the rectangle is the linear sum of lagrangian square) s
5 43 M
(s \(coins are 2-dimensional lagrangian tiles themselves\) and is a 2-dimensional Money Changing ) s
5 32 M
(Problem which is again NP-Hard. Product of the equations is a Quadratic Program which is also ) s
5 21 M
(NP-Hard. Solution vector [c1,c2,c3,...,cn] is the set of number of tiles for each lagrangian t) s
5 10 M
(ile square.MCP solves the tile arrangement in exact non-deterministic polynomial time while LS) s
_R
S
%%Page: (478) 478
%%BeginPageSetup
_S
18 36 translate
/pagenum 478 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (478) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(MR least squares is a deterministic polynomial time approximation. An example greedy algorithm) s
5 681 M
( for minimum coins change problem is described in GRAFIT course material repository: https://g) s
5 670 M
(ithub.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/AdvancedComputerScience) s
5 659 M
(AndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt) s
5 648 M
(9. Lagrangian Four Square reduction of a set partition to sum of squares can be equated to Pel) s
5 637 M
(l Equation written in terms of factors of N=pq:) s
5 626 M
(        integer or set partition of N = pq = n1^2 + n2^2 + n3^2 + ... + nk^2 = x^2 - y^2 = for) s
5 615 M
( x=\(p+q\)/2 and y=\(p-q/2\)) s
5 604 M
(which in effect shatters or demolishes an one-dimensional set to a set of k 2-dimensional squa) s
5 593 M
(re tiles and equates the sum of squares to difference of two squares.) s
5 582 M
(10. Shell Turing Machines defined in this draft can be formalized by Category Theory: Category) s
5 571 M
( S has various topological spaces of arbitrary dimensions as objects and morphisms are Conduit) s
5 560 M
( Turing Machines amongst these object spaces which act as linear transformations between one s) s
5 549 M
(pace to the other. Lagrangian set partition to tile cover reduction is an instance of such a C) s
5 538 M
(ategory of Topological Spaces \(TOP\) - For objects S1 and S2 in S, set partition defined in an ) s
5 527 M
(one dimensional space S1 is lifted to a 2 dimensional space of square tiles S2 by Lagrange Fou) s
5 516 M
(r Square Conduit Turing Machine Morphism between object spaces S1 and S2. Application of Shell) s
5 505 M
( Turing Machines to previous reduction is unusual \(NeuronRain Documentation,FAQ and Licensing:) s
5 494 M
( http://neuronrain-documentation.readthedocs.io/en/latest/ mentions some references on TOP\). T) s
5 483 M
(hus Shell Turing Machines \(Category of Topological Spaces\) perform a kind of kernel lifting - ) s
5 472 M
(Lagrangian Tiling Conduit Turing Machines are the kernels) s
5 461 M
(11. Nomenclature "Shell Turing Machines" is thus a universal mathematical abstraction which co) s
5 450 M
(nnects vector space embedding of alphabets and states transitions of Turing Machine and transf) s
5 439 M
(ormation of truth values of logical statements between spaces in many fields of STEM:) s
5 428 M
(        11.1 Hilbert Space Quantum Computation Machines - States and Alphabets of Quantum Turi) s
5 417 M
(ng Machine are embedded in a Hilbert Space \(Section 624\)) s
5 406 M
(        11.2 Linear Machines of Category theory - [Eilenberg-Maclane] - Categories \(Objects,Mo) s
5 395 M
(rphisms,Functors\) are embedded in a vector space \(Conceptual graph of NeuronRain theory drafts) s
5 384 M
( - http://neuronrain-documentation.readthedocs.io/en/latest/\)) s
5 373 M
(        11.3 Kernel Lifting in Support Vector Machines - dataset in smaller dimensional space ) s
5 362 M
(S1 is lifted to a higher dimensional space S2 by a kernel \(e.g Mercer polynomial kernel - http) s
5 351 M
(s://github.com/shrinivaasanka/Grafit/blob/master/course_material/ComputerScienceMiscellaneous/) s
5 340 M
(ComputerScienceMiscellaneous_CourseNotes.txt\) and decision hyperplane classifier is found in S) s
5 329 M
(2) s
5 318 M
(        11.4 Set Partition to Lagrange Tile Cover reduction - lifts an one dimensional set par) s
5 307 M
(tition to a 2 dimensional square tile cover of a rectangle by Lagrange Four Square Theorem \(si) s
5 296 M
(des of rectangle are found by Computational Geometric Factorization\)) s
5 285 M
(        11.5 Word Embedding of datasets in Machine Learning) s
5 274 M
(        11.6 Reproducing Kernel Hilbert Space \(RKHS\) - functions \(Turing machines\) are embedde) s
5 263 M
(d on a metric space and distance is defined between functions \(Section 624\).) s
5 252 M
(        11.7 Category of Topological Spaces - TOP - abstracts all the previous embeddings and ) s
5 241 M
(lifting by defining topological spaces \(e.g datasets embedded on vector space\) as objects of c) s
5 230 M
(ategory and morphisms amongst them. Morphisms between topological spaces are Conduit Turing Ma) s
5 219 M
(chines formalized by any of the previous computation models which lift data and truth values o) s
5 208 M
(f logical statements between spaces - Linear Machines, RKHS, linear transformations, kernels, ) s
5 197 M
(Lagranges four squares theorem, Word embedding. Examples:) s
5 186 M
(                11.7.1 TOP category T has two space objects S1 and S2. Conduit Turing Machine ) s
5 175 M
(morphisms are defined between S1 and S2. Logical statement Biggest\(\) which finds maximum of po) s
5 164 M
(ints in a toplogical space thus has two truth values in S1 and S2 - Biggest\(S1\) and Biggest\(S2) s
5 153 M
(\) - which might have to be teleported between spaces. ) s
5 142 M
(                11.7.2 Another Good software engineering example of such lifting is the Unix S) s
5 131 M
(hell Category where object shells are arbitrarily created and environment variables are privy ) s
5 120 M
(to a shell object unless otherwise communicated explicitly by EXPORT which acts as a Conduit T) s
5 109 M
(uring Machine Morphism between object shells. Outermost shell is the Root and a tree hierarchy) s
5 98 M
( of recursively created subshells forms a nested category of shell objects - S1 and S2 are two) s
5 87 M
( shell objects in this Shell Category theoretically embedded in some topological space, and EX) s
5 76 M
(PORT morphism EXPORT: S1 <=> S2 is a Conduit Turing Machine which exports environment variable) s
5 65 M
(s of S1 embedded in space X and S2 embedded in space Y bijectively between S1 and S2 except Ou) s
5 54 M
(termost shell which is unidirectional \(because nothing needs to be lifted out of outermost She) s
5 43 M
(ll but only to subshells\). Cutting across operating systems, such a Shell mechanism and EXPORT) s
5 32 M
( morphism has been universally implemented not just limited to Unix - any computation in STEM ) s
5 21 M
(\(Science-Technology-Engineering-Mathematics\) is on some OS which has shell TOP category implem) s
5 10 M
(entation.) s
_R
S
%%Page: (479) 479
%%BeginPageSetup
_S
18 36 translate
/pagenum 479 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (479) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(                11.7.3 Shell Turing Machines Category of Topological Spaces can be formulated ) s
5 681 M
(as a space filling problem - Category of hierarchically nested topological space shells are em) s
5 670 M
(bedded in and cover the outermost n-dimensional Shell topological space \(Outermost n-sphere\) a) s
5 659 M
(nd EXPORT morphisms are defined amongst these shell spaces. For 3-dimensions, this is akin to ) s
5 648 M
(filling an Outermost spherical bubble container shell by smaller nested spherical shell bubble) s
5 637 M
(s which is a 3-dimensional variant of Apollonian Gasket.) s
5 626 M
(        11.8 Turing Degree is the equivalence class of Turing machines solving sets of similar) s
5 615 M
( difficulty. Turing Jump A' of A is the set of Turing machines which halt having oracle access) s
5 604 M
( to A or set of problems harder than A. Previous Conduit Turing Machine morphisms in TOP abstr) s
5 593 M
(action define a Turing Jump between topological spaces of different Turing degree difficulties) s
5 582 M
( e.g Conduit Turing Machine Morphism might have an oracle access to a Turing machine defined i) s
5 571 M
(n a domain topological space of lower Turing Degree lifting to a range topological space of hi) s
5 560 M
(gher Turing Degree. Every computation in STEM can be abstracted as Category of Topological Spa) s
5 549 M
(ces and Turing Degree Hieararchy can be defined on them e.g Computational Physics problems in ) s
5 538 M
(Relativity, Quantum mechanics and String theory involving theoretical abstractions for microco) s
5 527 M
(sm and macrocosm.) s
5 505 M
(References:) s
5 494 M
(-----------) s
5 483 M
(728.1 Coin Problem, Frobenius Problem, Postage Stamp Problem - What This Country Needs is an 1) s
5 472 M
(8c Piece - https://cs.uwaterloo.ca/~shallit/Papers/change2.pdf) s
5 450 M
(----------------------------------------------------------------------------------------------) s
5 439 M
(----------------------------) s
5 428 M
(729. \(THEORY and FEATURE\) Drone Electronic Voting Machine - Streaming Boyer-Moore Majority vot) s
5 417 M
(ing - 27 November 2019) s
5 406 M
(----------------------------------------------------------------------------------------------) s
5 395 M
(----------------------------) s
5 384 M
(1.This commit updates already existing streaming majority implementation of Boyer-Moore algori) s
5 373 M
(thm to accept arbitrary datasources \(majority_voting\(\) in Streaming_BoyerMoore_MajorityVoting.) s
5 362 M
(py\)) s
5 351 M
(2.Drone electronic voting machine JSON persistence datastorage written by Streaming SetPartiti) s
5 340 M
(onAnalytics electronic_voting_analytics\(\) function \(Streaming_SetPartitionAnalytics.py\) is pas) s
5 329 M
(sed on to Boyer-Moore function as DictionaryHistogramPartition datasource.) s
5 318 M
(3.Persisted EVMs are looped through and majority candidate bucket per EVM is printed.) s
5 296 M
(----------------------------------------------------------------------------------------------) s
5 285 M
(----------------------------------------------) s
5 274 M
(730. \(THEORY and FEATURE\) Drone Electronic Voting Machine - Streaming Voting Analytics - Bertr) s
5 263 M
(and Ballot Theorem - Approximation of Majority Voting, Streaming majority, Forecasts, Theoreti) s
5 252 M
(cal EVMs, Set Partitions - related to 666 - 28 November 2019) s
5 241 M
(----------------------------------------------------------------------------------------------) s
5 230 M
(----------------------------------------------) s
5 219 M
(1.This commit implements the Betrand Ballot Theorem - probability p-q/p+q that one of the cand) s
5 208 M
(idate might win of two rival candidates getting p and q votes respectively during the process ) s
5 197 M
(of counting - as a live election analytics measure within electronic_voting_machine\(\) function) s
5 186 M
( of Streaming_SetPartitionAnalytics.py) s
5 175 M
(2.It assumes live counting of voting - votes are immediately counted after they are cast - is ) s
5 164 M
(allowed as against deferred counting convention usually followed in elections because secrecy ) s
5 153 M
(might be compromised.) s
5 142 M
(3.But this measure is also useful for post-poll analytics during the process of counting itsel) s
5 131 M
(f for extrapolating the result - before election is called.) s
5 120 M
(4.Random Majority voting is simulated on 3 fictitious candidates and probabilistic trend is pr) s
5 109 M
(inted while voting is underway.) s
5 98 M
(5.logs are at testlogs/Streaming_SetPartitionAnalytics.EVM.log.28November2019) s
5 87 M
(6.This measure applies only to binary election of 2 candidates - EVM dictionary is sorted and ) s
5 76 M
(votes of top 2 rivals are compared dynamically \(after each vote is cast\), to print the Bertran) s
5 65 M
(d probability.) s
5 43 M
(----------------------------------------------------------------------------------------------) s
5 32 M
(-----------------------------------------------) s
5 21 M
(731. \(FEATURE\) Astronomical Pattern Mining - Rule Search Script update for Maitreya Swiss Ephe) s
5 10 M
(meris text client maitreya8t - 4 December 2019) s
_R
S
%%Page: (480) 480
%%BeginPageSetup
_S
18 36 translate
/pagenum 480 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (480) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(----------------------------------------------------------------------------------------------) s
5 681 M
(-----------------------------------------------) s
5 670 M
(1.python-src/MaitreyaEncHoro_RuleSearch.py has been changed for updated chart summary table of) s
5 659 M
( maitreya swiss ephemeris text client which) s
5 648 M
(truncates the names of signs and planets to first 3 alphabets.) s
5 637 M
(2.New function prune_rule\(\) has been defined to prune the class association rules to be matche) s
5 626 M
(d from python-src/MinedClassAssociationRules.txt\(which contains already learnt rules from Sequ) s
5 615 M
(enceMining.py for various weather datasets\)) s
5 604 M
(3.SearchOption=2 has been updated for redefined signs-planets defaultdict to populate truncate) s
5 593 M
(d names.) s
5 582 M
(4.Encoded chart concatenation has been changed for lookup of truncated names) s
5 571 M
(5.Maitreya Text Client commandline has been changed to 64-bit deb package install /usr/bin/mai) s
5 560 M
(treya8t - text client is not built from Maitreya Dreams source.) s
5 549 M
(6.An example celestial 2-body pattern "Mercury,Jupiter" is searched on 26/12/2019 when a rare ) s
5 538 M
(7 planet conjunction of Sun,Moon,Mercury,Jupiter,Saturn,Nodal Points,Pluto \(8 planets includin) s
5 527 M
(g nodal axis\) occurs. This 7+1 body planetary system in Sagittarius-Gemini is significant in t) s
5 516 M
(he context of heightened correlation of weather events that might befall \(seismic,oceanic and ) s
5 505 M
(atmospheric\).) s
5 494 M
(7.logs for class association rule match are in python-src/testlogs/MaitreyaEncHoro_RuleSearch.) s
5 483 M
(maitreya8t.log.4December2019) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(------------------------------------------------) s
5 439 M
(732. \(FEATURE and THEORY\) Merit of Large Scale Visuals - Tensor Rank intrinsic merit of EventN) s
5 428 M
(et of a video - 7 December 2019 - related to 588) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(------------------------------------------------) s
5 395 M
(1.This commit upgrades ImageGraph_Keras_Theano.py to Python 3.6 from Python 2.7 and computes T) s
5 384 M
(ensor Rank of EventNet of a video by tensorly python library \(tensorly requires Python 3\) - au) s
5 373 M
(topep8 and 2to3 tools have been used for upgrade. Python 3.6 is many orders of magnitude faste) s
5 362 M
(r than Python 2.7 and EventNet Tensor Product and Tensor Rank is computationally intensive whi) s
5 351 M
(ch needs faster Python.) s
5 340 M
(2.Following dependent files have been upgraded to Python 3.6 by two tools - autopep8 and 2to3 ) s
5 329 M
(- which correct formatting issues to comply with PEP8 and convert a file written in python 2.7) s
5 318 M
( to python 3.6 \(Python 2.7 versions have been committed having .2.7 suffix\):) s
5 307 M
(        2.1 RecursiveGlossOverlap_Classifier.py ) s
5 296 M
(        2.2 WordNetPath.py) s
5 285 M
(        2.3 ImageGraph_Keras_Theano.py) s
5 274 M
(3.Note: all python 2.7 source files in NeuronRain can be upgraded to Python 3.6 in two simple ) s
5 263 M
(steps for better performance:) s
5 252 M
(        3.1 Execute autopep8 on the file for PEP8) s
5 241 M
(        3.2 Execute 2to3-2.7 on PEP8 formatted file) s
5 230 M
(4.ImageGraph_Keras_Theano.py - videograph_eventnet_tensor_product\(\) has been modified for prep) s
5 219 M
(rocessing \(slicing 100*100 square\) the tensor product of video EventNet and tensorly non_negat) s
5 208 M
(ive_parafac\(\) is invoked which decomposes the video EventNet tensor.) s
5 197 M
(5.logs have been committed to testlogs/ImageGraph_Keras_Theano.log.TensorRank1Decomposition.7D) s
5 186 M
(ecember2019) s
5 175 M
(6.Video EventNet Tensor is printed for debug purposes) s
5 164 M
(7.Rank-1 tensor factors from non_negative_parafac\(\) of Video EventNet Tensor are also printed) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(-------------------------------------------------) s
5 120 M
(733. \(FEATURE and THEORY\) Computational Geometric Factorization - Quadcore Python 3.6 Upgrade ) s
5 109 M
(Benchmarks - 11 December 2019 - related to all) s
5 98 M
(sections of Factorization) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(-------------------------------------------------) s
5 65 M
(1.This commit upgrades Spark Python Computational Geometric Factorization implementation Discr) s
5 54 M
(eteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py from Python 2.7 to Python 3.6 for) s
5 43 M
( performance and availing the better range\(\) utility in Python 3.x which breaches the maximum ) s
5 32 M
(range barrier limitation in Python 2.7. Python 3.6 range\(\) is a rewrite and supports huge inte) s
5 21 M
(gers \(of hundreds of digits\).) s
5 10 M
(2.Following Spark Python environment variables have been set to Python 3.6m binary for PySpark) s
_R
S
%%Page: (481) 481
%%BeginPageSetup
_S
18 36 translate
/pagenum 481 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (481) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
( upgrade to Python 3.6:) s
5 681 M
(        SPARK_PYTHON=/usr/bin/python3.6m) s
5 670 M
(        SPARK_DRIVER_PYTHON=/usr/bin/python3.6m) s
5 659 M
(3.Large Integer 999999999999999999 \(60 bits\) has been factorized which is by far the largest i) s
5 648 M
(nteger factorized in Spark BSP-NC-PRAM model. Larger integers throw a Spark Python error in Py) s
5 637 M
(Spark context.py \(File "spark-2.4.3-bin-hadoop2.7/python/lib/pyspark.zip/pyspark/context.py", ) s
5 626 M
(line 501, in parallelize, OverflowError: Python int too large to convert to C ssize_t\):) s
5 615 M
(        if isinstance\(c, xrange\):) s
5 604 M
(            size = len\(c\)) s
5 593 M
(because of len\(\) failure for larger integers) s
5 582 M
([) s
5 571 M
(Error can also be produced from commandline:) s
5 560 M
(>>> x=range\(9999999999999999999\)) s
5 549 M
(>>> len\(x\)) s
5 538 M
(Traceback \(most recent call last\):) s
5 527 M
(  File "<stdin>", line 1, in <module>) s
5 516 M
(OverflowError: Python int too large to convert to C ssize_t) s
5 505 M
(>>> x=range\(999999999999999999\)) s
5 494 M
(>>> len\(x\)) s
5 483 M
(999999999999999999) s
5 472 M
(]) s
5 461 M
(4.Previous error requires Spark rewrite of context.py parallelize\(\) to:) s
5 450 M
(        range\(\).stop - range\(\).start ) s
5 439 M
(replacing len\(\) specific to Python 3.x range\(\)) s
5 428 M
(5.Python 2.7 Spark Factorization implementation has been upgraded to Python 3.6 by autopep8 fo) s
5 417 M
(llowed by 2to3-2.7 utilities. Python 2.7 version has been marked as DiscreteHyperbolicFactoriz) s
5 406 M
(ationUpperbound_TileSearch_Optimized.py.2.7) s
5 395 M
(6.Spark Python version is printed by sys.version:) s
5 384 M
(        Spark Python version: 3.6.8 \(default, Oct  7 2019, 12:59:55\) ) s
5 373 M
(        [GCC 8.3.0]) s
5 362 M
(7.First few factors of 999999999999999999 are printed to testlogs/DiscreteHyperbolicFactorizat) s
5 351 M
(ionUpperbound_TileSearch_Optimized.Python3.6Upgrade.11December2019. Timestamp of each factor i) s
5 340 M
(s printed.) s
5 329 M
(8.Ray shooting queries excluding Hardy-Ramanujan and some imports have been commented.) s
5 307 M
(----------------------------------------------------------------------------------------------) s
5 296 M
(------------------------------------------------) s
5 285 M
(734. \(FEATURE\) Merit of Large Scale Visuals - Video EventNet Tensor Decomposition to Rank-1 Te) s
5 274 M
(nsors on Python 3.7.5 - slicing - 12 December 2019) s
5 263 M
(----------------------------------------------------------------------------------------------) s
5 252 M
(------------------------------------------------) s
5 241 M
(1.ImageNet_Keras_Theano.py videograph_eventnet_tensor_product\(\) has been changed to accept sid) s
5 230 M
(e of square slice per frame as an argument which is by default 100*100 pixels.) s
5 219 M
(2.Square slicing per frame is necessary when elements of video tensor product matrix are of un) s
5 208 M
(equal rectangular dimensions and tensorly stipulates equal dimensions.) s
5 197 M
(3.Usual videos have frames of equal dimensions but the example montage video footage in Neuron) s
5 186 M
(Rain has unequal frame sizes and minimum frame sides have to be found which are then used to s) s
5 175 M
(lice each frame. ) s
5 164 M
(4.Since a video can have arbitrarily large number of frames in millions, finding the minimum s) s
5 153 M
(ides of the frame rectangles could be daunting.) s
5 142 M
(5.Instead of finding minimum frame sides, square slicing has been made default and configurabl) s
5 131 M
(e by user in function argument "squareslice" which is by default 100.) s
5 120 M
(6.Python 3.6.8 for TensorLy has been upgraded to Python 3.7.5 which is the fastest python dist) s
5 109 M
(ribution.) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(------------------------------------------------) s
5 65 M
(735. \(THEORY and FEATURE\) Complement Diophantines - Least Squares Vandermonde Polynomial Fit L) s
5 54 M
(earning - related to all sections on ) s
5 43 M
(Complement Diophantines - Python 3.7.5 upgrade - 14 December 2019) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(------------------------------------------------) s
5 10 M
(1. complement.py complement diophantine learner has been updated to learn a degree 5 interpola) s
_R
S
%%Page: (482) 482
%%BeginPageSetup
_S
18 36 translate
/pagenum 482 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (482) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ted polynomial for a complementary set \(non-squares\)) s
5 681 M
(2. polyfit\(\) from numeric python has been invoked on a complementary set of non-squares \(https) s
5 670 M
(://docs.scipy.org/doc/numpy/reference/generated/numpy.polyfit.html\) which is a least squares s) s
5 659 M
(olution solver for Vandermonde coefficient matrix) s
5 648 M
(3. polyfit\(\) least square interpolation is an alternative to Lagrangian polynomial interpolati) s
5 637 M
(on \(https://en.wikipedia.org/wiki/Lagrange_polynomial\) mentioned in arXiv version \(https://arx) s
5 626 M
(iv.org/abs/1106.4102v1, https://scholar.google.com/citations?user=eLZY7CIAAAAJ&hl=en\).) s
5 615 M
(4. complement.py has been upgraded to Python 3.7.5 from Python 2.7 by autopep8 and 2to3 utilit) s
5 604 M
(ies. Python 2.7 version has been suffixed as .2.7) s
5 593 M
(5. polyfit\(\) least square interpolation is guaranteed to be unique - https://en.wikipedia.org/) s
5 582 M
(wiki/Polynomial_interpolation) s
5 571 M
(6. logs for polyfit\(\) are committed to testlogs/complement.PolyFitPython3.7.5.14December2019) s
5 560 M
(7. Least Squares and Lagrangian interpolations are total functions while Lagrange Four Square ) s
5 549 M
(Theorem complement map is a partial function \(not all domain tuples are mapped to a point in c) s
5 538 M
(omplementary set\)) s
5 516 M
(----------------------------------------------------------------------------------------------) s
5 505 M
(------------------------------------------------) s
5 494 M
(736. \(THEORY and FEATURE\) Computational Geometric PRAM-NC-BSP Factorization - Python 3.7.5 upg) s
5 483 M
(rade - Spark Quadcore benchmarks - 512 bit integer - related to 477,481 and all other sections) s
5 472 M
( on Factorization - 18 December 2019) s
5 461 M
(----------------------------------------------------------------------------------------------) s
5 450 M
(------------------------------------------------) s
5 439 M
(1.Computational Geometric Factorization Python-Spark implementation has been upgraded to Pytho) s
5 428 M
(n 3.7.5 and following local tile search algorithm mentioned in 477 and 481 has been implemente) s
5 417 M
(d which obviates parallel sorting and completely removes the maximum integer barrier altogethe) s
5 406 M
(r:) s
5 384 M
(while\(iterations <= O\(\(logN\)^k\)\)) s
5 373 M
({) s
5 362 M
(        *\) Assign N/\(logN\)^k tiles to N/\(logN\)^k PRAMs in parallel \(O\(1\) parallel time because) s
5 351 M
( each interval tile in a global shared memory array can be accessed by PRAM id as index\)) s
5 340 M
(        *\) Binary Search tile in each PRAM for factors \(O\(logN\) parallel time which can be red) s
5 329 M
(uced to O\(logN/logp\) by parallel binary search from Snir's Theorem\)) s
5 318 M
(}) s
5 296 M
(2.Number of PRAMs \(multicores\) is 4 and constant k in \(logN\)^k has been set to 50 which, thoug) s
5 285 M
(h not commensurate, is hardcoded for demonstrative reasons. Previous algorithm is work optimal) s
5 274 M
( NC because PRAM time * iterations = Sequential time) s
5 263 M
(3.Spark context parallelize\(\) has been refactored to following loop which circumvents the Spar) s
5 252 M
(k context ssize_t exception in pyspark context.py parallelize\(\) - maximum value of len\(\) is li) s
5 241 M
(mited to 64 bits per slice by suitable choice of exponent k:) s
5 230 M
(        normal_order_n = int\(math.pow\(math.log\(n, 2\),50\)\)) s
5 219 M
(        tiles_start = 1) s
5 208 M
(        tiles_end = int\(n/normal_order_n\)) s
5 197 M
(        for x in range\(normal_order_n\):) s
5 186 M
(            print\("tiles_start:", tiles_start\)) s
5 175 M
(            print\("tiles_end:", tiles_end\)) s
5 164 M
(            tiles = range\(tiles_start, tiles_end\)) s
5 153 M
(            print\(\("len\(tiles\):", len\(tiles\)\)\)) s
5 142 M
(            spcon.parallelize\(tiles\).foreach\() s
5 131 M
(                tilesearch_nonpersistent\)) s
5 120 M
(            tiles_start = tiles_end) s
5 109 M
(            tiles_end += int\(n/normal_order_n\)) s
5 98 M
(Previous loop of \(logN\)^k iterations slices the Python 3.7.5 range\(\) into multiples of N/\(logN) s
5 87 M
(\)^k and individually parallelizes each slice to RDDs.) s
5 76 M
(4.Because Python 3.7.5 range\(\) is unlimited, maximum number factorizable is arbitrary for all ) s
5 65 M
(practical purposes - previous benchmark for 60 bits has been bettered and a huge integer of 51) s
5 54 M
(2 bits which is ecommerce-grade - 999999999999999999999999999999999999999999999999999999999999) s
5 43 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 32 M
( - has been factorized to print all factors on single node cluster of 4 multicores. This is th) s
5 21 M
(e largest integer factorized thus far. Smoothness of this integer \(high omega and large number) s
5 10 M
( of small prime factors\) causes easy factorization.) s
_R
S
%%Page: (483) 483
%%BeginPageSetup
_S
18 36 translate
/pagenum 483 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (483) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(5.logs at testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.Python3.7.5U) s
5 681 M
(pgrade.512bits.18December2019 print a truncated list of factors of 999999999999999999999999999) s
5 670 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 659 M
(999999999999999999999999999999999  with in few seconds:) s
5 648 M
(=================================================) s
5 637 M
(\('Factor is = ', 3, '\(at ', 'Wed, 18 Dec 2019 05:28:26 GMT', '\)'\)) s
5 626 M
(=================================================) s
5 615 M
(=================================================) s
5 604 M
(\('Factor is = ', 9, '\(at ', 'Wed, 18 Dec 2019 05:28:26 GMT', '\)'\)) s
5 593 M
(=================================================) s
5 582 M
(=================================================) s
5 571 M
(\('Factor is = ', 11, '\(at ', 'Wed, 18 Dec 2019 05:28:26 GMT', '\)'\)) s
5 560 M
(=================================================) s
5 549 M
(=================================================) s
5 538 M
(\('Factor is = ', 23, '\(at ', 'Wed, 18 Dec 2019 05:28:26 GMT', '\)'\)) s
5 527 M
(=================================================) s
5 516 M
(=================================================) s
5 505 M
(\('Factor is = ', 33, '\(at ', 'Wed, 18 Dec 2019 05:28:26 GMT', '\)'\)) s
5 494 M
(=================================================) s
5 483 M
(=================================================) s
5 472 M
(\('Factor is = ', 69, '\(at ', 'Wed, 18 Dec 2019 05:28:26 GMT', '\)'\)) s
5 461 M
(=================================================) s
5 450 M
(=================================================) s
5 439 M
(\('Factor is = ', 207, '\(at ', 'Wed, 18 Dec 2019 05:28:27 GMT', '\)'\)) s
5 428 M
(=================================================) s
5 417 M
(=================================================) s
5 406 M
(\('Factor is = ', 239, '\(at ', 'Wed, 18 Dec 2019 05:28:27 GMT', '\)'\)) s
5 395 M
(=================================================) s
5 384 M
(=================================================) s
5 373 M
(\('Factor is = ', 253, '\(at ', 'Wed, 18 Dec 2019 05:28:27 GMT', '\)'\)) s
5 362 M
(=================================================) s
5 351 M
(=================================================) s
5 340 M
(\('Factor is = ', 463, '\(at ', 'Wed, 18 Dec 2019 05:28:28 GMT', '\)'\)) s
5 329 M
(=================================================) s
5 318 M
(=================================================) s
5 307 M
(\('Factor is = ', 759, '\(at ', 'Wed, 18 Dec 2019 05:28:28 GMT', '\)'\)) s
5 296 M
(=================================================) s
5 285 M
(=================================================) s
5 274 M
(\('Factor is = ', 2277, '\(at ', 'Wed, 18 Dec 2019 05:28:32 GMT', '\)'\)) s
5 263 M
(=================================================) s
5 252 M
(=================================================) s
5 241 M
(\('Factor is = ', 4167, '\(at ', 'Wed, 18 Dec 2019 05:28:37 GMT', '\)'\)) s
5 230 M
(=================================================) s
5 219 M
(=================================================) s
5 208 M
(\('Factor is = ', 4649, '\(at ', 'Wed, 18 Dec 2019 05:28:39 GMT', '\)'\)) s
5 197 M
(=================================================) s
5 186 M
(=================================================) s
5 175 M
(\('Factor is = ', 5237, '\(at ', 'Wed, 18 Dec 2019 05:28:40 GMT', '\)'\)) s
5 164 M
(=================================================) s
5 153 M
(=================================================) s
5 142 M
(\('Factor is = ', 5497, '\(at ', 'Wed, 18 Dec 2019 05:28:41 GMT', '\)'\)) s
5 131 M
(=================================================) s
5 120 M
(=================================================) s
5 109 M
(\('Factor is = ', 7887, '\(at ', 'Wed, 18 Dec 2019 05:28:47 GMT', '\)'\)) s
5 98 M
(=================================================) s
5 87 M
(=================================================) s
5 76 M
(\('Factor is = ', 8349, '\(at ', 'Wed, 18 Dec 2019 05:28:48 GMT', '\)'\)) s
5 65 M
(=================================================) s
5 54 M
(=================================================) s
5 43 M
(\('Factor is = ', 13947, '\(at ', 'Wed, 18 Dec 2019 05:29:02 GMT', '\)'\)) s
5 32 M
(=================================================) s
5 21 M
(=================================================) s
5 10 M
(\('Factor is = ', 16491, '\(at ', 'Wed, 18 Dec 2019 05:29:09 GMT', '\)'\)) s
_R
S
%%Page: (484) 484
%%BeginPageSetup
_S
18 36 translate
/pagenum 484 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (484) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(=================================================) s
5 681 M
(=================================================) s
5 670 M
(\('Factor is = ', 21649, '\(at ', 'Wed, 18 Dec 2019 05:29:22 GMT', '\)'\)) s
5 659 M
(=================================================) s
5 648 M
(=================================================) s
5 637 M
(\('Factor is = ', 23661, '\(at ', 'Wed, 18 Dec 2019 05:29:28 GMT', '\)'\)) s
5 626 M
(=================================================) s
5 615 M
([...truncated...]) s
5 593 M
(----------------------------------------------------------------------------------------------) s
5 582 M
(------------------------------------------------) s
5 571 M
(737. \(THEORY and FEATURE\) Spark NC-PRAM-BSP Computational Geometric Factorization quadcore Pyt) s
5 560 M
(hon 3.7.5 benchmarks - 1000+ bits non-smooth random integer of mixed digits - 22 December 2019) s
5 549 M
( - related to all sections on Computational Geometric Factorization) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(------------------------------------------------) s
5 516 M
(1.DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been changed to increa) s
5 505 M
(se k to 100 which factorizes a difficult 1000 bits integer of mixed digits \(low omega and less) s
5 494 M
( number of prime factors\) which is by far the largest integer factorized in NeuronRain - 99320) s
5 483 M
(9302039093029039092093023090293090290392038198218928912172881728717287187281728172871872817287) s
5 472 M
(1872817872817318361763793902930911288218943488989389829311298291899876767676756565654545534378) s
5 461 M
(7878787876767566565645454534434333878738728738278372243439848343884384983984989483849839483984) s
5 450 M
(983984983984977 - in O\(\(logN\)^100\) Parallel RAM time requiring O\(N/\(logN\)^100\) PRAM processors) s
5 439 M
( - first few factors are printed below within 20 seconds and 73 seconds respectively which inc) s
5 428 M
(ludes Spark-Python-Py4j-Java 8 bidirectional marshalling and VM bytecode interpretation overhe) s
5 417 M
(ad \(Cythonized C++ DLL version might be still faster\):) s
5 395 M
(spark-submit DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py 993209302039093) s
5 384 M
(0290390920930230902930902903920381982189289121728817287172871872817281728718728172871872817872) s
5 373 M
(8173183617637939029309112882189434889893898293112982918998767676767565656545455343787878787876) s
5 362 M
(7675665656454545344343338787387287382783722434398483438843849839849894838498394839849839849839) s
5 351 M
(84977) s
5 340 M
(19/12/22 13:10:08 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address) s
5 329 M
(19/12/22 13:10:09 WARN NativeCodeLoader: Unable to load native-hadoop library for your platfor) s
5 318 M
(m... using builtin-java classes where applicable) s
5 307 M
(\('Spark Python version:', '3.7.5 \(default, Nov  7 2019, 10:50:52\) \\n[GCC 8.3.0]'\)) s
5 296 M
(\('factors of ', 993209302039093029039092093023090293090290392038198218928912172881728717287187) s
5 285 M
(2817281728718728172871872817872817318361763793902930911288218943488989389829311298291899876767) s
5 274 M
(6767565656545455343787878787876767566565645454534434333878738728738278372243439848343884384983) s
5 263 M
(984989483849839483984983984983984977, '\(', 1003.212454334434, ' bits integer\) are:'\)) s
5 252 M
(=================================================) s
5 241 M
(\('Factor is = ', 249, '\(at ', 'Sun, 22 Dec 2019 07:40:29 GMT', '\)'\)) s
5 230 M
(=================================================) s
5 219 M
(=================================================) s
5 208 M
(\('Factor is = ', 4731, '\(at ', 'Sun, 22 Dec 2019 07:41:22 GMT', '\)'\)) s
5 197 M
(=================================================) s
5 186 M
([...truncated...]) s
5 164 M
(2.Previous complexity bounds imply O\(1000^100\) parallel time units \(polylog depth\) and O\(2^100) s
5 153 M
(0/1000^100\) processors ~= O\(2^1000/2^997\) = O\(8\) PRAMS \(multicores\) which is a meagre NC paral) s
5 142 M
(lelism required for factorizing such a huge number - seemingly prohibitive O\(N/\(logN\)^k\)\) PRAM) s
5 131 M
(s in definition of NC might not be a roadblock after all.) s
5 120 M
(3.Recursion limit has been increased to 3000 because of stack overflow in recursive binary sea) s
5 109 M
(rch and ray shooting queries have been commented.) s
5 98 M
(4.Spark factorization logs \(truncated\) have been uploaded at testlogs/DiscreteHyperbolicFactor) s
5 87 M
(izationUpperbound_TileSearch_Optimized.Python3.7.5Upgrade.1000bits.22December2019) s
5 76 M
(5.Change in the constant k depending on the input simulates non-uniform NC circuit for factori) s
5 65 M
(zation theoretically \(family of circuits depending on input\)) s
5 43 M
(References:) s
5 32 M
(----------) s
5 21 M
(737.6.Input Size and PRAMs - n and N defined - Geomblog - [Suresh Venkatasubramanian] - http:/) s
5 10 M
(/blog.geomblog.org/2008/05/p-vs-nc-part-i-preliminaries.html:) s
_R
S
%%Page: (485) 485
%%BeginPageSetup
_S
18 36 translate
/pagenum 485 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (485) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
("...It will be important to pay attention to input size. As always, the input size can either ) s
5 681 M
(be described by n, the cardinality of the input \(the quantity counting the number of "things"\)) s
5 670 M
(, or by N, the bitsize \(the quantity measuring the number of bits needed to write everything d) s
5 659 M
(own\). When we talk about polylogarithmic time and polynomial number of processors, unless spec) s
5 648 M
(ified otherwise, we will be referring to polynomials of n AND N. In the non-uniform setting, w) s
5 637 M
(e'll assume that we're presented with a PRAM that for fixed n, N, runs in time t\(n, N\) with p\() s
5 626 M
(n, N\) processors...." - In Computational Geometric Factorization NC definition, O\(\(logX\)^k\) is) s
5 615 M
( a polynomial t\(N\) and O\(X/\(logX\)^k\) PRAMs is a polynomial p\(n,N\) where N=logX and n=X.) s
5 604 M
(737.7 Definition of PRAM - Definition 2.2.1 - [RAYMOND GREENLAW,H. JAMES HOOVER,WALTER L. RUZZ) s
5 593 M
(O - OXFORD UNIVERSITY PRESS 1995] - https://homes.cs.washington.edu/~ruzzo/papers/limits.pdf) s
5 582 M
(737.8 Poster: Easy PRAM-based High-performance Parallel Programming with ICE - [Ghanim-Rajeev-) s
5 571 M
(Vishkin] - https://www.researchgate.net/publication/310824244_POSTER_Easy_PRAM-based_High-Perf) s
5 560 M
(ormance_Parallel_Programming_with_ICE - input size to Pointer jumping algorithm) s
5 538 M
(----------------------------------------------------------------------------------------------) s
5 527 M
(-------------------------------------------------) s
5 516 M
(738. \(THEORY and FEATURE\) Computational Geometric NC-PRAM-BSP Factorization - Python 3.7.5 Sin) s
5 505 M
(gle node cluster quadcore benchmarks - 1067 bits integer - some factcheck references on NC-PRA) s
5 494 M
(M equivalence and input size - 24 December 2019,31 December 2019,2 January 2020 - related to a) s
5 483 M
(ll sections on Factorization) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(-------------------------------------------------) s
5 450 M
(1.In continuation of previous benchmarks on 1000 bits integer another hard non-smooth random 1) s
5 439 M
(067 bits integer of randomly mixed digits - 93948384983949343848398948938498394893884398498398) s
5 428 M
(4983984938948348938499384928830928380289389283982983928398249748378478378738478738748729839289) s
5 417 M
(3892893829839829839289382983982983289382983982392748738748738749283382989382983928932983928938) s
5 406 M
(29839289382983928398298392839289382983928748738758374837483737481349384833499384979   - has be) s
5 395 M
(en factorized on single node cluster of quadcores and first few factors - mostly primes - are ) s
5 384 M
(printed from 18th second onwards: ) s
5 373 M
(=================================================) s
5 362 M
(\('Factor is = ', 11, '\(at ', 'Tue, 24 Dec 2019 08:21:47 GMT', '\)'\)) s
5 351 M
(=================================================) s
5 340 M
(=================================================) s
5 329 M
(\('Factor is = ', 17, '\(at ', 'Tue, 24 Dec 2019 08:21:47 GMT', '\)'\)) s
5 318 M
(=================================================) s
5 307 M
(=================================================) s
5 296 M
(\('Factor is = ', 47, '\(at ', 'Tue, 24 Dec 2019 08:21:49 GMT', '\)'\)) s
5 285 M
(=================================================) s
5 274 M
(=================================================) s
5 263 M
(\('Factor is = ', 51, '\(at ', 'Tue, 24 Dec 2019 08:21:49 GMT', '\)'\)) s
5 252 M
(=================================================) s
5 241 M
(=================================================) s
5 230 M
(\('Factor is = ', 141, '\(at ', 'Tue, 24 Dec 2019 08:21:53 GMT', '\)'\)) s
5 219 M
(=================================================) s
5 208 M
(=================================================) s
5 197 M
(\('Factor is = ', 187, '\(at ', 'Tue, 24 Dec 2019 08:21:55 GMT', '\)'\)) s
5 186 M
(=================================================) s
5 175 M
(=================================================) s
5 164 M
(\('Factor is = ', 289, '\(at ', 'Tue, 24 Dec 2019 08:22:00 GMT', '\)'\)) s
5 153 M
(=================================================) s
5 142 M
(=================================================) s
5 131 M
(\('Factor is = ', 311, '\(at ', 'Tue, 24 Dec 2019 08:22:01 GMT', '\)'\)) s
5 120 M
(=================================================) s
5 109 M
(=================================================) s
5 98 M
(\('Factor is = ', 517, '\(at ', 'Tue, 24 Dec 2019 08:22:11 GMT', '\)'\)) s
5 87 M
(=================================================) s
5 76 M
(=================================================) s
5 65 M
(\('Factor is = ', 561, '\(at ', 'Tue, 24 Dec 2019 08:22:13 GMT', '\)'\)) s
5 54 M
(=================================================) s
5 43 M
(=================================================) s
5 32 M
(\('Factor is = ', 799, '\(at ', 'Tue, 24 Dec 2019 08:22:24 GMT', '\)'\)) s
5 21 M
(=================================================) s
5 10 M
(=================================================) s
_R
S
%%Page: (486) 486
%%BeginPageSetup
_S
18 36 translate
/pagenum 486 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (486) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\('Factor is = ', 867, '\(at ', 'Tue, 24 Dec 2019 08:22:27 GMT', '\)'\)) s
5 681 M
(=================================================) s
5 670 M
(=================================================) s
5 659 M
(\('Factor is = ', 3179, '\(at ', 'Tue, 24 Dec 2019 08:24:16 GMT', '\)'\)) s
5 648 M
(=================================================) s
5 637 M
(=================================================) s
5 626 M
(\('Factor is = ', 3421, '\(at ', 'Tue, 24 Dec 2019 08:24:27 GMT', '\)'\)) s
5 615 M
(=================================================) s
5 604 M
(=================================================) s
5 593 M
(\('Factor is = ', 5287, '\(at ', 'Tue, 24 Dec 2019 08:25:54 GMT', '\)'\)) s
5 582 M
(=================================================) s
5 571 M
(=================================================) s
5 560 M
(\('Factor is = ', 8789, '\(at ', 'Tue, 24 Dec 2019 08:28:37 GMT', '\)'\)) s
5 549 M
(=================================================) s
5 538 M
(=================================================) s
5 527 M
(\('Factor is = ', 9537, '\(at ', 'Tue, 24 Dec 2019 08:29:12 GMT', '\)'\)) s
5 516 M
(=================================================) s
5 505 M
(=================================================) s
5 494 M
(\('Factor is = ', 10263, '\(at ', 'Tue, 24 Dec 2019 08:29:46 GMT', '\)'\)) s
5 483 M
(=================================================) s
5 472 M
(=================================================) s
5 461 M
(\('Factor is = ', 13583, '\(at ', 'Tue, 24 Dec 2019 08:32:20 GMT', '\)'\)) s
5 450 M
(=================================================) s
5 439 M
([....truncated....]) s
5 428 M
(2.float\(\) cast has been changed to Decimal\(\) for highest precision and remove overflow errors ) s
5 417 M
(for tile segments and interval midpoint computations) s
5 406 M
(3.Recursion limit has been increased to 10000) s
5 395 M
(4.Exponentiation by math.pow\(\) for normal order computation in local search optimization has b) s
5 384 M
(een replaced by faster ** exponentiation operator of Python.) s
5 373 M
(5.Exponent k in local search loop - \(logN\)^k \(iterations\) * N/\(logN\)^k \(PRAMs\) - has been para) s
5 362 M
(metrized in SearchTiles_and_Factorize\(\) function which simulates non-uniform NC circuit of \(lo) s
5 351 M
(gN\)^k depth and N/\(logN\)^k circuit elements.) s
5 329 M
(Optimization:) s
5 318 M
(-------------) s
5 307 M
(Finding all factors by searching through every rasterized tile segment for hyperbola xy=N coul) s
5 296 M
(d be optimized by stopping after first factor p is found and re-rasterizing a new hyperbolic a) s
5 285 M
(rc for xy=N/p. Following loop formalizes it \(reduction in cost might depend on which is easier) s
5 274 M
( - parallel planar point location or rasterization - this optimization creates an array of hyp) s
5 263 M
(erbolic arc bows equal to number of factors\):) s
5 252 M
(        for_all_factors_of_N) s
5 241 M
(        {) s
5 230 M
(                Rasterize hyperbola xy=N) s
5 219 M
(                PRAM-BSP-NC Planar Point locate and Search the rasterized hyperbolic planar st) s
5 208 M
(raight line graph till first factor p is found) s
5 197 M
(                N=N/p) s
5 186 M
(        }) s
5 164 M
(Previous loop is of approximate total parallel RAM time \(excluding parallel rasterization whic) s
5 153 M
(h is increasingly easier after each iteration churning out a factor\):) s
5 142 M
(        O\(\(log p1\)^k\) + O\(\(log N/p1\)^k\) + O\(\(log N/[p1*p2]\)^k\) + ... + O\(\(log N/[p1*p2*...pn]\)) s
5 131 M
(^k\) for first n factors of N={p1,p2,...,pn}) s
5 109 M
(References:) s
5 98 M
(-----------) s
5 87 M
(738.6 Sorting,Searching,Merging - [Joseph JaJa] - https://people.ksp.sk/~ppershing/data/skola/) s
5 76 M
(JaJa.pdf - Chapter 4 - Pages 159-160 - Algorithm 4.3 - Simple Merge Sort - " ... input: an arr) s
5 65 M
(ay X of order n where n=2^l ...", Corollary 4.2 - CREW PRAM model - "... Sorting a sequence of) s
5 54 M
( n elements can optimally be done in O\(logn*loglogn\) ... " - previous local search does away w) s
5 43 M
(ith parallel sorting) s
5 32 M
(738.7 PARALLEL TRANSITIVE CLOSURE AND POINT LOCATION IN PLANAR STRUCTURES - [ROBERTO TAMASSIA ) s
5 21 M
(AND JEFFREY S. VITTER] - http://www.ittc.ku.edu/~jsv/Papers/TaV91.transclosure.pdf - "... Abst) s
5 10 M
(ract. Parallel algorithms for several graph and geometric problems are presented, including tr) s
_R
S
%%Page: (487) 487
%%BeginPageSetup
_S
18 36 translate
/pagenum 487 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (487) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(ansitive closure and topological sorting in planar st-graphs, preprocessing planar subdivision) s
5 681 M
(s for point location queries, and construction of visibility representations and drawings of p) s
5 670 M
(lanar graphs.) s
5 659 M
(Most of these algorithms achieve optimal O\(log n\) running time using n/log n processors in the) s
5 648 M
( EREW PRAM model, n being the number of vertices...." - number of processors required by this ) s
5 637 M
(planar point location algorithm is poly\(n,logn\) and time is poly\(logn\) by reference 737.6 and ) s
5 626 M
(ANSV problem for mergesort in reference 34.15 - all PRAM models are mutually reducible to othe) s
5 615 M
(r - previous local search planar point location factorization requires O\(\(logN\)^k\) parallel ti) s
5 604 M
(me and N/\(logN\)^k PRAM processors and thus work optimal - number of vertices in rasterized hyp) s
5 593 M
(erbolic arc bow planar simple line graph is approximately 3*N + 1 if every juxtaposed tile seg) s
5 582 M
(ment is construed as a rectangular polygon face of dimensions 1 * segment_length; polygon arit) s
5 571 M
(hmetic progression segment located in polylog time is binary searched.) s
5 549 M
(----------------------------------------------------------------------------------------------) s
5 538 M
(-------------------------------------------------) s
5 527 M
(739. \(THEORY and FEATURE\) Intrinsic Merit - Unique Identification and its necessity in People ) s
5 516 M
(Analytics \(Drone Electronic Voting Machines\), Online Citizen Science, Sports Analytics and Aca) s
5 505 M
(demic Rankings, BKS Conjecture, Consensus versus Majority - 29 December 2019,2 January 2020 - ) s
5 494 M
(related to 730 ) s
5 483 M
(----------------------------------------------------------------------------------------------) s
5 472 M
(-------------------------------------------------) s
5 461 M
(\(*\) Drone Electronic Voting Machine on GPS navigation to a voter's residence optionally can ha) s
5 450 M
(ve an one time password multifactor authentication before voting. Traditional OTPs are electro) s
5 439 M
(nic prone to sabotage. Alternatively a non-digital OTP authentication is envisaged e.g serial ) s
5 428 M
(number of a currency bill \(only one voter in nation at any point in time can possess a note ha) s
5 417 M
(ving a unique serial number if there are negligible counterfeits\).Drone EVM reads the unique s) s
5 406 M
(erial number in note by OCR before voting. Encrypted vote to a candidate salted with ) s
5 395 M
( encrypted OCR-ed serial number of the currency is appended to voted candidate's bucket.Voter ) s
5 384 M
(can have multiple non-digital currencies \(multiple serial number unique ids\) which are chosen ) s
5 373 M
(at random by voter for OCR. Currencies are anonymous and unpredictably flow in economic networ) s
5 362 M
(ks which further randomizes the non-digital OTPs \(high entropy randomness extractor source\)) s
5 351 M
(\(*\) QR codes are unique id\(s\) - two dimensional quick response bar codes) s
5 340 M
(\(*\) NeuronRain KingCobra implements a protocol buffer cryptocurrency which is serial numbered ) s
5 329 M
(by Boost Universally Unique Identifier\(based on Perfect Forward copyless move idiom of C++ - h) s
5 318 M
(as parallels to Cloud Object move in Google Clouds - more on this in http://neuronrain-documen) s
5 307 M
(tation.readthedocs.io/en/latest/\). Exchequer in some countries is RFID tagged for tracking mon) s
5 296 M
(ey trail and similar reasoning might apply for voter uniqueness - RFID tagged currency authent) s
5 285 M
(ication at drone EVM.) s
5 274 M
(\(*\) Genetic Haplogroups of populace have specific cluster of traits across ethnic groups which) s
5 263 M
( might be occasionally necessary to establish uniqueness \(e.g India has prominence of R1a1a...) s
5 252 M
( haplogroup - https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1380230/\). ) s
5 241 M
(\(*\) Vandermonde interpolation polynomial is guaranteed to be unique for set of points to be in) s
5 230 M
(terpolated. This set of points could be strings sourced from multiple identification traits of) s
5 219 M
( a person which can be Rabin fingerprinted by a polynomial over GF\(2\) modulo an irreducible po) s
5 208 M
(lynomial over GF\(2\). This set of fingerprinted data points are then interpolated by a Vandermo) s
5 197 M
(nde unique polynomial to ID a voter.) s
5 186 M
(\(*\) Sports Analytics and Intrinsic Performance Rankings have been mentioned in GRAFIT course m) s
5 175 M
(aterial as a BigData usecase \(https://github.com/shrinivaasanka/Grafit/blob/master/course_mate) s
5 164 M
(rial/NeuronRain/LinuxKernelAndCloud/BigdataAnalyticsCloud_CourseNotes.txt\) - e.g ATP,WTA,NBA,I) s
5 153 M
(CC. Academic Rankings \(rankings of researchers and universities - USA today,Times Higher Educa) s
5 142 M
(tion\) could leverage from Sports Rankings e.g Number of experimentally verified papers of an a) s
5 131 M
(uthor in relativity and quantum mechanics with no dependency on number of citations is a measu) s
5 120 M
(re of intrinsic research quality) s
5 109 M
(\(*\) Evidence usecase for BKS conjecture: Everyone agrees on denomination of a currency bill or) s
5 98 M
( coin - $100 is universally accepted consensually as equal to $100 discounting devaluation and) s
5 87 M
( other economic phenomena. If this fact is formulated as an LTF or PTF - value\(x\) = x - could ) s
5 76 M
(evidence the truth of BKS conjecture implying consensus is stabler than majority function.) s
5 54 M
(----------------------------------------------------------------------------------------------) s
5 43 M
(-------------------------------------------------) s
5 32 M
(740. \(THEORY and FEATURE\) People Analytics - Drone Electronic Voting Machine - Python 3.7.5 up) s
5 21 M
(grade and Paper ballot shuffle simulation, PRAM Breadth First and Depth First Search, Set Part) s
5 10 M
(ition Analytics, Money Trail Economic EventNet Graph Random Walk, Expander Graphs, Cheeger's C) s
_R
S
%%Page: (488) 488
%%BeginPageSetup
_S
18 36 translate
/pagenum 488 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (488) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(onstant, Random Closed Packing, Space Filling, Pseudorandomness Extractors and Generators, Bir) s
5 681 M
(thday Paradox, Unique Identification, Ramsey coloring, Computational Chaos, Voting analytics -) s
5 670 M
( 7 January 2020,12 January 2020,13 January 2020 - related to 22,135,230,338,461,739) s
5 659 M
(----------------------------------------------------------------------------------------------) s
5 648 M
(-------------------------------------------------) s
5 637 M
(\(*\) Drone Electronic Voting Machine implementation in Streaming_SetPartitionAnalytics.py - ele) s
5 626 M
(ctronic_voting_machine\(\) - has been updated to simulate random shuffle of paper ballots in box) s
5 615 M
(es to ensure disorder - votes appended to bucket per candidate are shuffled after each vote - ) s
5 604 M
(every new vote is randomly inserted into obfuscated encrypted bucket of votes per candidate wh) s
5 593 M
(ich simulates a shuffle \(shuffle is essentially a permutation group Sn\) while an exact shuffle) s
5 582 M
( has to enumerate the permutation group \(O\(n!\)\) and choose one element - every shuffle of a ca) s
5 571 M
(ndidate bucket is also a reduction from space filling and random closed packing) s
5 560 M
(\(*\) Drone EVM implementation has been upgraded to Python 3.7.5 by autopep8 and 2to3 utilities ) s
5 549 M
(and 2.7 version has been separately committed with eponymous suffix - random.randint\(\) has bee) s
5 538 M
(n invoked to get an index to insert a new vote somewhere in the candidate bucket ) s
5 527 M
(\(*\) Traditional incremental counters coalesce votes of multiple voters into one integer which ) s
5 516 M
(prohibits forensic examination of individual votes if there is a dispute. Votes per candidate ) s
5 505 M
(bucket thus isolates each anonymous encrypted vote but subverts chronological ordering.) s
5 494 M
(\(*\) Serial number unique id\(s\) of paper currencies were envisaged earlier as non-digital one t) s
5 483 M
(ime passwords for authenticating a voter. Rationale for choice of currencies is the unpredicta) s
5 472 M
(ble pseudorandom flow of paper currency unique id\(s\) in economy which creates a huge EventNet ) s
5 461 M
(Money Trail Graph \(edges are labelled by flow of uniquely ID-ed currencies between buyers and ) s
5 450 M
(sellers\) which is non-digital and thus insulated from electronic sabotage. Money Trail EventNe) s
5 439 M
(t Graph is a high entropy randomness source and could serve as a psueodrandomness generator an) s
5 428 M
(d extractor e.g topological sort or random walk of a subgraph of money trail EventNet is a ran) s
5 417 M
(dom concatenation of unique id\(s\)) s
5 406 M
(\(*\) If Money Trail EventNet Graph is an edge expander, it could be a gadget for Pseudorandom N) s
5 395 M
(umber Generator. Edge expander graphs are defined with Cheeger's constant for minimum high edg) s
5 384 M
(e boundary per vertex subset:) s
5 373 M
(        minimum\(|boundary\(S\)|/|S|\), 1 < |S| < n/2) s
5 362 M
(where boundary\(S\) of a subset S of vertices of G \(V\(G\)\) is:) s
5 351 M
(        boundary\(S\) = { \(u,v\) | u in S, v in V\(G\) \\ S}) s
5 340 M
(Random walks on an expander graph are conventionally applied to Pseudorandom Generators e.g. M) s
5 329 M
(argulis [Mar88] and Lubotzky, Phillips and Sarnak [LPS88]) s
5 318 M
(\(*\) Locating an encrypted vote in a candidate bucket of votes \(if bucket is a linked list\) cou) s
5 307 M
(ld be done in sublinear time by Parallel RAM Breadth First Search and Depth First Search of th) s
5 296 M
(e linked list line graph - GRAFIT course material in  https://github.com/shrinivaasanka/Grafit) s
5 285 M
(/blob/master/course_material/NeuronRain/AdvancedComputerScienceAndMachineLearning/AdvancedComp) s
5 274 M
(uterScienceAndMachineLearning.txt mention usefulness of parallel RAM sublinear linked list sea) s
5 263 M
(rch in the context of Survival Index Timeout OS Scheduler version of Process IDs Set Partition) s
5 252 M
( in OS Kernels) s
5 241 M
(\(*\) Limitations of unique identification are best explained by birthday paradox - GRAFIT cours) s
5 230 M
(e material in https://github.com/shrinivaasanka/Grafit/blob/master/course_material/ComputerSci) s
5 219 M
(enceMiscellaneous/ComputerScienceMiscellaneous_CourseNotes.txt have a Q and A on birthday para) s
5 208 M
(dox probability of collision of unique IDs in a population.) s
5 197 M
(\(*\) An expander graph simulation of Economic Network by Neuro Cryptocurrency in NeuronRain whi) s
5 186 M
(ch is Boost UUID, Protocol Buffer, Perfect-Forward and Object Move based, theoretically could ) s
5 175 M
(source pseudorandom bits.) s
5 153 M
(Paper ballots and Drone EVM - comparison and contrast:) s
5 142 M
(-----------------------------------------------------) s
5 131 M
(Previous concept implementation of Drone EVM in NeuronRain has separate buckets for candidates) s
5 120 M
( which are independently shuffled to simulate paper ballots whereas real world paper ballot vo) s
5 109 M
(tes are sealed and cast in single ballot box bucket without candidate delineation. Instead if ) s
5 98 M
(Drone EVM is implemented such that all encrypted votes are in a single shuffled list \(or\) link) s
5 87 M
(ed list bucket \(which is how paper ballots work\), reduction is necessary which shatters/classi) s
5 76 M
(fies the shuffled list/linked list of votes to a set partition of buckets of per-candidate lis) s
5 65 M
(ts/linked lists of votes. Example: ) s
5 54 M
(        every node of the list/linked list of anonymous votes has the fields <candidate_id>:<e) s
5 43 M
(ncrypted_vote>. ) s
5 32 M
(Usually this reduction happens post-poll in paper ballot counts. This sort of exact pseudorand) s
5 21 M
(om shuffle simulation of paper ballot box of assorted votes democratizes further and is a non-) s
5 10 M
(trivial monochromatic balls-bins problem in Drone EVM - every anonymous vote is colored by can) s
_R
S
%%Page: (489) 489
%%BeginPageSetup
_S
18 36 translate
/pagenum 489 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (489) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(didate index - single list \(or\) linked list line graph of votes of previous format has to be s) s
5 681 M
(et/graph-partitioned to candidate buckets of multiple lists/line graphs \(or\) a multichromatic ) s
5 670 M
(set has to be partitioned to monochromatic candidate bucket subsets - an O\(N\) labelled classif) s
5 659 M
(ier. Sequence of N votes for k candidates is thus Ramsey k-colored and order emerges inevitabl) s
5 648 M
(y by Van Der Waerden Theorem - there exist numbers N,k,r such that if shuffled sequence of N v) s
5 637 M
(otes are colored by k candidates, there is a monchromatic arithmetic progression of length atl) s
5 626 M
(east r \(in other words, r voters who had voted for same candidate are equally spaced out which) s
5 615 M
( presents an insight into voting pattern\).) s
5 593 M
(Conflict between pseudorandomness and arithmetic progressions in Ramsey coloring of votes - Or) s
5 582 M
(derly Disorder:) s
5 571 M
(----------------------------------------------------------------------------------------------) s
5 560 M
(---------------) s
5 549 M
(Previous simulation of pseudorandom paper ballot shuffle in Drone EVM gives rise to a multichr) s
5 538 M
(omatic sequence of votes colored by candidate indices. But yet monochromatic arithmetic progre) s
5 527 M
(ssion order emerges from pseudorandom disorder irrespective of number of colors \(candidates\) a) s
5 516 M
(nd voting chronology which is a contradiction. This "orderly disorder" oxymoron paradox should) s
5 505 M
( apply universally to any pseudorandomly shuffled multichromatic set not just limited to shuff) s
5 494 M
(led voting sequences. This limitation implies a prerequisite for indistinguishability of pseud) s
5 483 M
(orandom generators \(PRG\) from true randomness - PRGs should create pseudorandomly shuffled mul) s
5 472 M
(ticolored sequences of Ramsey number R\(N,k,r\) of high N,k and low r - Sequence of N elements, ) s
5 461 M
(k-colored having an arithmetic progression of length atleast r - which lessens the probability) s
5 450 M
( of emergence of arithmetic progression periodicities. On a related note, Period Three Theorem) s
5 439 M
( of Chaos theory \(www.its.caltech.edu/~matilde/LiYorke.pdf\) implies sequences of periodicity 3) s
5 428 M
( can have larger periodicities.) s
5 406 M
(References:) s
5 395 M
(-----------) s
5 384 M
(740.1 Random Walks on Expander Graphs and Spectral Graph Theory - [Spielman] - http://www.cs.y) s
5 373 M
(ale.edu/homes/spielman/561/2012/lect11-12.pdf - Section 11.5 - "...Our pseudo-random generator) s
5 362 M
( will use a random walk on an expander graph whose vertex set is {0, 1}^r. The expander graph ) s
5 351 M
(will be d-regular, for some constant d. Let A be the adjacency matrix of the graph, and let it) s
5 340 M
(s eigenvalues be d = \302\2651 > \302\2652 \342\\211\245 \302\267 \302\267 \302\267 \342\\211\245 \302\265n. One property that we will require o) s
5 329 M
(f the expander graph is that |\302\265i|/d \342\\211\244 1/10, \(11.1\) for all i. ... such graphs exist with) s
5 318 M
( d = 400. Degree 400 seems sort of big, but we will see that it is reasonable for our applicat) s
5 307 M
(ion...." - Degree 400 Money Trail EventNet could potentially be a high edge expander and rando) s
5 296 M
(m walks on it might be pseudorandom.) s
5 285 M
(740.2 A. Lubotzky, R. Phillips, and P. Sarnak. Ramanujan graphs. Combinatorica, 8\(3\):261\342\\200) s
5 274 M
(\\223277, 1988.) s
5 263 M
(740.3 G. A. Margulis. Explicit group theoretical constructions of combinatorial schemes and th) s
5 252 M
(eir application to the design of expanders and concentrators. Problems of Information Transmis) s
5 241 M
(sion, 24\(1\):39\342\\200\\22346, July 1988.) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(------------------------------------------------) s
5 197 M
(741. \(THEORY and FEATURE\) Computational Geometric NC-PRAM-BSP Factorization - Spark 2.4.3 + Py) s
5 186 M
(thon 3.7.5 benchmarks - 1213 and 1243 bits integers factorized, Hyperbolic Rasterization graph) s
5 175 M
(ics example, Multidimensional hyperplanar point location, Integer Diophantines, Multiplicative) s
5 164 M
( partitions and sundry resolutions - related to all sections on factorization - 9 January 2020) s
5 153 M
(----------------------------------------------------------------------------------------------) s
5 142 M
(------------------------------------------------) s
5 131 M
(\(*\) New function hyperbolic_arc_rasterization\(\) has been defined which sequentially rasterizes) s
5 120 M
( the hyperbolic arc and creates a graphic image) s
5 109 M
(of how hyperbola looks like post-rasterization. A related schematic diagram for rasterization ) s
5 98 M
(has already been committed to GRAFIT course material \(https://github.com/shrinivaasanka/Grafit) s
5 87 M
(/blob/master/course_material/NeuronRain/LinuxKernelAndCloud/BigdataAnalyticsCloud_CourseNotes.) s
5 76 M
(txt\) on Geometric search of a point on hyperplanes separating halfspaces by multidimensional H) s
5 65 M
(yperplanar point location which widens the scope of factorization to arbitrary algebraic curve) s
5 54 M
(s \(e.g diophantines\) for integer solutions, not limited to hyperbolae - example: uvwxyz=N is a) s
5 43 M
( multiplicative partition problem solvable by rasterizing on Z^6 hyperplane point location - \() s
5 32 M
(u,v,w,x,y,z\)) s
5 21 M
(\(*\) Hyperbolic arc rasterized tile segments are plotted by matplotlib and example logs-images ) s
5 10 M
(for a small integer are committed to testlogs/ - DiscreteHyperbolicFactorizationUpperbound_Til) s
_R
S
%%Page: (490) 490
%%BeginPageSetup
_S
18 36 translate
/pagenum 490 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (490) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(eSearch_Optimized.Rasterization.9January2020.png and DiscreteHyperbolicFactorizationUpperbound) s
5 681 M
(_TileSearch_Optimized.Python3.7.5Upgrade.RasterizationGraphics.log.9January2020) s
5 670 M
(\(*\) matplotlib rasterization graphics is enabled by a boolean flag passed on by commandline sy) s
5 659 M
(s.argv arguments) s
5 648 M
(\(*\) Depth of the non-uniform NC circuit which was hardcoded earlier has been parametrized as c) s
5 637 M
(ommandline argument) s
5 626 M
(\(*\) Normal order loop has been changed because of overflow errors for large exponents) s
5 615 M
(\(*\) Huge 1213 bits non-smooth hard integer of random digits ) s
5 604 M
(9999999999992891821982182812891892891828193978787877327387283712981828082918928917871873871873) s
5 593 M
(2378278467475452652773628381712918298198298182918928198298192891892718278178261627167261726716) s
5 582 M
(7216271627617626172712676172617627167261726716271672671627617267162716267153653656366351576121) s
5 571 M
(26716725162561526516256152613389132311132838292323233433434123212839289382832983291) s
5 560 M
(has been factorized by a depth 58 NC circuit \(PRAM time O\(\(logN\)^58\) and first few factors are) s
5 549 M
( printed as ordered pairs \(requires division because of or clause and division has been cast t) s
5 538 M
(o Decimal\(\) because of overflow errors\) in testlogs/DiscreteHyperbolicFactorizationUpperbound_) s
5 527 M
(TileSearch_Optimized.Python3.7.5Upgrade.1213bits_and_1243bits.9January2020 from 51st second on) s
5 516 M
(wards:) s
5 505 M
(\('factors of ', 999999999999289182198218281289189289182819397878787732738728371298182808291892) s
5 494 M
(8917871873871873237827846747545265277362838171291829819829818291892819829819289189271827817826) s
5 483 M
(1627167261726716721627162761762617271267617261762716726172671627167267162761726716271626715365) s
5 472 M
(3656366351576121267167251625615265162561526133891323111328382923232334334341232128392893828329) s
5 461 M
(83291, '\(', 1212.5037546338863, ' bits integer\) are:'\)) s
5 450 M
(tiles_start: 1) s
5 439 M
(tiles_end: 19622815) s
5 428 M
(=================================================) s
5 417 M
(\('Factors are: \(', 3, ',', Decimal\('3.333333333330963940660727604E+364'\), '\) \(at ', 'Thu, 09 J) s
5 406 M
(an 2020 12:06:26 GMT', '\)'\)) s
5 395 M
(=================================================) s
5 384 M
(=================================================) s
5 373 M
(\('Factors are: \(', 7, ',', Decimal\('1.428571428570413117426026116E+364'\), '\) \(at ', 'Thu, 09 J) s
5 362 M
(an 2020 12:06:26 GMT', '\)'\)) s
5 351 M
(=================================================) s
5 340 M
(=================================================) s
5 329 M
(\('Factors are: \(', 21, ',', Decimal\('4.761904761901377058086753720E+363'\), '\) \(at ', 'Thu, 09 ) s
5 318 M
(Jan 2020 12:06:27 GMT', '\)'\)) s
5 307 M
(=================================================) s
5 285 M
(\(*\) Another large 1243 bits integer of all 9s \(smooth, easy\) has been factorized and first few) s
5 274 M
( factors are printed from 18 seconds onwards:) s
5 263 M
(\('factors of ', 999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 252 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 241 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 230 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 219 M
(99999999999999, '\(', 1242.4011074878736, ' bits integer\) are:'\)) s
5 208 M
(tiles_start: 1) s
5 197 M
(tiles_end: 488) s
5 186 M
(=================================================) s
5 175 M
(\('Factors are: \(', 3, ',', Decimal\('3.333333333333333333333333333E+373'\), '\) \(at ', 'Thu, 09 J) s
5 164 M
(an 2020 12:10:55 GMT', '\)'\)) s
5 153 M
(=================================================) s
5 142 M
(=================================================) s
5 131 M
(\('Factors are: \(', 9, ',', Decimal\('1.111111111111111111111111111E+373'\), '\) \(at ', 'Thu, 09 J) s
5 120 M
(an 2020 12:10:56 GMT', '\)'\)) s
5 109 M
(=================================================) s
5 98 M
(=================================================) s
5 87 M
(\('Factors are: \(', 33, ',', Decimal\('3.030303030303030303030303030E+372'\), '\) \(at ', 'Thu, 09 ) s
5 76 M
(Jan 2020 12:10:57 GMT', '\)'\)) s
5 65 M
(=================================================) s
5 54 M
(=================================================) s
5 43 M
(\('Factors are: \(', 99, ',', Decimal\('1.010101010101010101010101010E+372'\), '\) \(at ', 'Thu, 09 ) s
5 32 M
(Jan 2020 12:11:02 GMT', '\)'\)) s
5 21 M
(=================================================) s
5 10 M
(=================================================) s
_R
S
%%Page: (491) 491
%%BeginPageSetup
_S
18 36 translate
/pagenum 491 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (491) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(\('Factors are: \(', 103, ',', Decimal\('9.708737864077669902912621359E+371'\), '\) \(at ', 'Thu, 09) s
5 681 M
( Jan 2020 12:11:02 GMT', '\)'\)) s
5 670 M
(=================================================) s
5 659 M
(=================================================) s
5 648 M
(\('Factors are: \(', 121, ',', Decimal\('8.264462809917355371900826446E+371'\), '\) \(at ', 'Thu, 09) s
5 637 M
( Jan 2020 12:11:03 GMT', '\)'\)) s
5 626 M
(=================================================) s
5 615 M
(=================================================) s
5 604 M
(\('Factors are: \(', 363, ',', Decimal\('2.754820936639118457300275482E+371'\), '\) \(at ', 'Thu, 09) s
5 593 M
( Jan 2020 12:11:20 GMT', '\)'\)) s
5 582 M
(=================================================) s
5 571 M
(tiles_start: 488) s
5 560 M
(tiles_end: 976) s
5 549 M
(=================================================) s
5 538 M
(\('Factors are: \(', 759, ',', Decimal\('1.317523056653491436100131752E+371'\), '\) \(at ', 'Thu, 09) s
5 527 M
( Jan 2020 12:11:47 GMT', '\)'\)) s
5 516 M
(=================================================) s
5 505 M
(tiles_start: 976) s
5 494 M
(tiles_end: 1464) s
5 483 M
(=================================================) s
5 472 M
(\('Factors are: \(', 1133, ',', Decimal\('8.826125330979699911738746690E+370'\), '\) \(at ', 'Thu, 0) s
5 461 M
(9 Jan 2020 12:12:13 GMT', '\)'\)) s
5 450 M
(=================================================) s
5 439 M
(tiles_start: 1464) s
5 428 M
(tiles_end: 1952) s
5 417 M
(tiles_start: 1952) s
5 406 M
(tiles_end: 2440) s
5 395 M
(=================================================) s
5 384 M
(\('Factors are: \(', 2277, ',', Decimal\('4.391743522178304787000439174E+370'\), '\) \(at ', 'Thu, 0) s
5 373 M
(9 Jan 2020 12:13:30 GMT', '\)'\)) s
5 362 M
(=================================================) s
5 351 M
(=================================================) s
5 340 M
(\('Factors are: \(', 2369, ',', Decimal\('4.221190375685943436048965808E+370'\), '\) \(at ', 'Thu, 0) s
5 329 M
(9 Jan 2020 12:13:37 GMT', '\)'\)) s
5 318 M
(=================================================) s
5 307 M
(tiles_start: 2440) s
5 296 M
(tiles_end: 2928) s
5 285 M
(=================================================) s
5 274 M
(\('Factors are: \(', 2783, ',', Decimal\('3.593244699964067553000359324E+370'\), '\) \(at ', 'Thu, 0) s
5 263 M
(9 Jan 2020 12:14:04 GMT', '\)'\)) s
5 252 M
(=================================================) s
5 230 M
(----------------------------------------------------------------------------------------------) s
5 219 M
(-------------------------------------------------) s
5 208 M
(742. \(THEORY and FEATURE\) Computational Geometric Factorization - Quadcore Python 3.7.5 + Spar) s
5 197 M
(k 2.4.3 benchmarks - 1024 bits integers - 11 January 2020 - related to all sections on Factori) s
5 186 M
(zation) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(-------------------------------------------------) s
5 153 M
(\(*\) Few 1024 bits hard random integers of mixed digits have been factorized and logs have been) s
5 142 M
( captured in testlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.Python3.7) s
5 131 M
(.5Upgrade.1024bits.11January2020 - all the integers are factorized from 28 seconds onwards - l) s
5 120 M
(ogs have been truncated and only first few factors are printed. Integers factorized are:) s
5 109 M
(        - 999999990293092039029392932329039209302930920390293023023829839273823826376276362636) s
5 98 M
(2382392832893898198281928983927487847837479239289382983928938298398293829839289382983982973273) s
5 87 M
(9729839289382938293828392893828398293928372939289382983928839289382983928938298392893829839283) s
5 76 M
(982938239829389283982938298398293823) s
5 65 M
(        - 999999990293092039029392932329039209302930920390293023023829839273823826376276362636) s
5 54 M
(2382392832893898198281928983927487847837479239289382983928938298398293829839289382983982973273) s
5 43 M
(9729839289382938293828392893828828083782872939289382983928839289382983928938298392893829839283) s
5 32 M
(982938239829389283982938298398293823) s
5 21 M
(        - 999999990293092039029392932329039209302930920390293023023829839273823826376276362636) s
5 10 M
(2382392832893898198281928983927488383888888888883333383883892392899823829839289382983982973273) s
_R
S
%%Page: (492) 492
%%BeginPageSetup
_S
18 36 translate
/pagenum 492 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (492) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(9729839289382938293828392893828828083782872939289382983928839289382983928938298392893829839283) s
5 681 M
(982938239829389283982938298398293823) s
5 670 M
(        - 999999990293092039029392932329039209302930920390293023023829839273823826376276362636) s
5 659 M
(2382392832893898198281928983927488383888888888883333383883892392899823821111111111111111111111) s
5 648 M
(1111111111111118293828392893828828083782872939289382983928839289382983928938298392893829839283) s
5 637 M
(982938239829389283982938298398293823) s
5 626 M
(        - 999999990293092039029392932329039209302930920390293888889999222222221888827777777777) s
5 615 M
(7777227777893898198281928983927488383888888888883333383883892392899823821111111111111111111111) s
5 604 M
(1111111111111118293828392893828828083782872939289382983928839289382983928938298392893829839283) s
5 593 M
(982938239829389283982938298398293833) s
5 571 M
(\(*\) DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py has been changed to prin) s
5 560 M
(t debug statements for verifying correctness of factorization - or clause "if factorcandidate ) s
5 549 M
(== number_to_factorize or xl*yl == number_to_factorize:" is true if point located in pixel ari) s
5 538 M
(thmetic progression array polygon of the rasterized hyperbola equals the number to factorize N) s
5 527 M
( in two cases:) s
5 516 M
(        \(*\) ordinate product xl*yl equals number to factorize N ) s
5 505 M
(                \(and/or\)) s
5 494 M
(        \(*\) ordinate product \(xl + intervalmidpoint\)*yl equals number to factorize N) s
5 483 M
(\(*\) Truth values of both the above scenarios are printed and verified factor ordered pairs are) s
5 472 M
( printed accordingly. Decimal division has been reverted because of misleading mantissa-expone) s
5 461 M
(nt notation) s
5 439 M
(----------------------------------------------------------------------------------------------) s
5 428 M
(-------------------------------------------------) s
5 417 M
(743. \(THEORY and FEATURE\) Chaos Pseudorandom Generators - implementation update - Logistic and) s
5 406 M
( Lehmer-Palmore PRGs - 21 January 2020 - related to 318, 740 and all sections on Intrinsic Mer) s
5 395 M
(it, Majority Voting, Ramsey coloring, Hardness Amplification, One-Way Functions, Chaos, Pseudo) s
5 384 M
(randomness and draft Randomized NC Chaos PRG defined in https://sites.google.com/site/kuja27/C) s
5 373 M
(haoticPRG.pdf) s
5 362 M
(----------------------------------------------------------------------------------------------) s
5 351 M
(-------------------------------------------------) s
5 340 M
(\(*\) Logistic Equation Chaos PRG implementation in ChaosAttractor.py has been updated to also c) s
5 329 M
(ompute Lehmer-Palmore PRG by a function argument. An if clause has been introduced to choose b) s
5 318 M
(etween parabola attractor rx\(1-x\) and Lehmer-Palmore PRG \(Bx mod M\)) s
5 307 M
(\(*\) ChaosAttractor.py Lorenz Attractor code has been refactored and made a function of paramet) s
5 296 M
(ers: ChaosPRG\(algorithm="Logistic",seqlen=100,radix=10,initialcondition=0.7,prime=104729\) whic) s
5 285 M
(h respectively choose the algorithm \("Logistic" equation or "Lehmer-Palmore" prime modulus PRG) s
5 274 M
(s\), length of pseudorandom sequence, radix \(k for "Logistic" and B for "Lehmer-Palmore"\), init) s
5 263 M
(ial condition for sensitive dependence and a Large prime modulus) s
5 252 M
(\(*\) R cor\(\) correlation function has been invoked by R+rpy2 to print a correlation between pse) s
5 241 M
(udorandom sequence and a sample DJIA stock  quotes dataset.) s
5 230 M
(\(*\) ChaosPRG\(\) function can be optionally invoked in NeuronRain wherever pseudorandomness is n) s
5 219 M
(ecessary - e.g Pseudorandom shuffle simulation of paper ballot in Drone Electronic Voting Mach) s
5 208 M
(ine, Pseudorandom Shuffle of 2-colored \(0 and 1\) leaves in a boolean majority voting circuit w) s
5 197 M
(hich gives rise to monochromatic arithmetic progression order from pseudorandom chaotic shuffl) s
5 186 M
(ed votes disorder by Ramsey theory \(Van Der Waerden numbers\), Economic merit - Models for Econ) s
5 175 M
(ometric Datasets) s
5 164 M
(\(*\) Section 318 states a Majority version of XOR Hardness Amplification Lemma and points 318.1) s
5 153 M
(5 to 318.19 define hardness of inverting boolean majority + voter SAT composition which might ) s
5 142 M
(imply existence of an one way function \(a #P-complete counting problem\). Emergence of arithmet) s
5 131 M
(ic progression order from binary colored voter leaves of Boolean Majority Circuit stipulates a) s
5 120 M
( prima facie indistinguishability condition between a good PRG and true randomness - Good pseu) s
5 109 M
(dorandom shuffle must minimize probability of emergence of monochromatic arithmetic progressio) s
5 98 M
(ns in the leaves of boolean majority circuit.) s
5 87 M
(\(*\) Probability of monochromatic arithmetic progressions in any pseudorandom bichromatic seque) s
5 76 M
(nce of length N \(including shuffled 2-colored voter leaves of boolean majority circuit\) is inv) s
5 65 M
(ersely proportional to Van Der Waerden number VDW\(N,2,r\) - N elements in sequence\(voters\), 2 c) s
5 54 M
(olors \(candidates 0 and 1\), arithmetic progression of length >= r \(voters who chose same candi) s
5 43 M
(date are equally spread out in the shuffled bichromatic votes string\).) s
5 32 M
(\(*\) Chaos implies disorder from order \(Period Three Theorem implies any sequence of period 3 c) s
5 21 M
(an have larger periods while Feigenbaum sequences define self-referential recursive universali) s
5 10 M
(ty order in Chaos\) and monochromatic arithmetic progressions in Pseudorandom multichromatic se) s
_R
S
%%Page: (493) 493
%%BeginPageSetup
_S
18 36 translate
/pagenum 493 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (493) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(quences imply order from disorder - these are two mutually conflicting trends in diametrically) s
5 681 M
( opposite directions.) s
5 670 M
(\(*\) logs testlogs/ChaosAttractor.LehmerPalmorePRG.log.21January2020 and testlogs/ChaosAttracto) s
5 659 M
(r.LogisticEquationPRG.log.21January2020 print a correlation between DJIA data and two chaotic ) s
5 648 M
(PRGs - Logistic and Lehmer-Palmore. Opposing correlation signs between Logistic and Lehmer-Pal) s
5 637 M
(more PRGs and DJIA sample is an indicator of extent of chaos and pattern in economic data:) s
5 626 M
(        Logistic: correlation coefficient of pseudorandom and DJIA sequences is: -0.0017339520) s
5 615 M
(5970038) s
5 604 M
(        Lehmer-Palmore: correlation coefficient of pseudorandom and DJIA sequences is: 0.00648) s
5 593 M
(048041159691) s
5 582 M
(\(*\) Equilibrium point where the aforementioned Orderly Disorder \(Ramsey\) and Disorderly Order ) s
5 571 M
(\(Chaos\) coincide might be of independent area of research.) s
5 549 M
(References:) s
5 538 M
(-----------) s
5 527 M
(743.1 Chaos - [James Gleick] - Mandelbrot-Julia sets, Fractals, Koch curves, Lorenz attractors) s
5 516 M
(, Feigenbaum universality - Period Doubling, Yorke's Period Three Theorem) s
5 505 M
(743.2 Feigenbaum constants - First and Second - https://en.wikipedia.org/wiki/Feigenbaum_const) s
5 494 M
(ants) s
5 472 M
(----------------------------------------------------------------------------------------------) s
5 461 M
(-----------------------------------------------) s
5 450 M
(744. \(THEORY and FEATURE\) Chaotic Pseudorandom Generator - Python 3.7.5 upgrade, Computational) s
5 439 M
( Geometric Factorization - 30 January 2020 -) s
5 428 M
(related to all sections on Pseudorandom Generators, Chaos and Factorization) s
5 417 M
(----------------------------------------------------------------------------------------------) s
5 406 M
(-----------------------------------------------) s
5 395 M
(1.This commit upgrades Chaos Pseudorandom Generator implementation to Python 3.7.5 by autopep8) s
5 384 M
( followed by 2to3, which is the defacto NeuronRain recommended python version for performance ) s
5 373 M
(reasons.) s
5 362 M
(2.Both Logistic and Lehmer-Palmore PRGs have been tested on Python 3.7.5 + R-py2 combine and l) s
5 351 M
(ogs are committed to testlogs/ChaosAttractor.Python3.7.5Upgrade.30January2020) s
5 340 M
(3.GRAFIT course material on Geometric search of BigData in https://github.com/shrinivaasanka/G) s
5 329 M
(rafit/blob/master/course_material/NeuronRain/LinuxKernelAndCloud/BigdataAnalyticsCloud_CourseN) s
5 318 M
(otes.txt describe a Randomized NC factorization algorithm based on Parallel Chaotic Pseudorand) s
5 307 M
(om Generator and Central Limit Theorem based Space filling Linear Program mentioned in drafts ) s
5 296 M
(- https://sites.google.com/site/kuja27/ChaoticPRG.pdf and https://sites.google.com/site/kuja27) s
5 285 M
(/Analysis%20of%20a%20Randomized%20Space%20Filling%20Algorithm%20and%20its%20Linear%20Program%2) s
5 274 M
(0Formulation.pdf . ) s
5 263 M
(4.Exact PRAM-NC-BSP computational geometric factorization algorithm implemented on Spark in Ne) s
5 252 M
(uronRain AstroInfer is the derandomized version of Randomized NC Bernoulli trials factorizatio) s
5 241 M
(n algorithm in https://github.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain) s
5 230 M
(/LinuxKernelAndCloud/BigdataAnalyticsCloud_CourseNotes.txt which has the success probability o) s
5 219 M
(f finding atleast one prime factor pr\(m\) = \(1 - sqrt\(2N\)/\(N*sqrt\(2\) - sqrt\(2\) - sqrt\(N\)\)\)^\(m-1) s
5 208 M
(\)*\(sqrt\(2N\)/\(N*sqrt\(2\) - sqrt\(2\) - sqrt\(N\)\) after m trials for square embedded hyperbolic arc.) s
5 197 M
( Expected number of trials E\(m\) before atleast one factor is found = sum_x=1-to-N\(x*pr\(x\)\)) s
5 186 M
(5.Thus NeuronRain Theory drafts define 3 different Nick's class Computational Geometric Intege) s
5 175 M
(r factorization algorithms - Randomized NC, Quantum NC, Exact NC - which transition from a ran) s
5 164 M
(domized, cohered quantum state to classical exact decohered state.) s
5 142 M
(----------------------------------------------------------------------------------------------) s
5 131 M
(-----------------------------------------------) s
5 120 M
(745. \(THEORY and FEATURE\) Compressed Sensing - Alphabet-Syllable vectorspace embedding - Pytho) s
5 109 M
(n 3.7.5 upgrade - update - 4 February 2020) s
5 98 M
(----------------------------------------------------------------------------------------------) s
5 87 M
(-----------------------------------------------) s
5 76 M
(1. Function syllable_boundary_text_compression\(self, text, vectorspace_embedding=True\) in Comp) s
5 65 M
(ressedSensing python implementation has been updated to parametrically choose alphabet vectors) s
5 54 M
(pace embedding of words in text described in GRAFIT course material on Geometric Search - http) s
5 43 M
(s://github.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/LinuxKernelAndClou) s
5 32 M
(d/BigdataAnalyticsCloud_CourseNotes.txt - words of text are embedded in |A|^m vectorspace \(|A|) s
5 21 M
( is the size of natural language alphabet and m is the longest word in text\). For English, thi) s
5 10 M
(s is a space of 26^m.) s
_R
S
%%Page: (494) 494
%%BeginPageSetup
_S
18 36 translate
/pagenum 494 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (494) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(2.Words are python tokenized to vectors and concatenated to an array creating a vectorspace em) s
5 681 M
(bedding words in the text document.) s
5 670 M
(3.Return value is a tuple which includes or excludes the word embedding of text depending on v) s
5 659 M
(ectorspace_embedding boolean flag) s
5 648 M
(4.CompressedSensing.py has been upgraded to Python 3.7.5 by autopep8 and 2to3 utilities. Pytho) s
5 637 M
(n 2.7 version is separately committed.) s
5 626 M
(5.An Example sentence is syllable hyphenated \(PyHyphen\), vowel stripped-compressed and embedde) s
5 615 M
(d as:) s
5 604 M
(##############################################################################################) s
5 593 M
(#######) s
5 582 M
(Vowelless Syllable Vector Compression for text -  This sentence is alphabet-syllable vector sp) s
5 571 M
(ace embedded  : \(['This', 'sen', 'tence', 'al', 'pha', 'bet', '-', 'syl', 'la', 'ble', 'vec', ) s
5 560 M
('tor', 'space', 'em', 'bed', 'ded'], 'Th_s-s_n-t_nc_-_l-ph_-b_t---syl-l_-bl_-v_c-t_r-sp_c_-_m-) s
5 549 M
(b_d-d_d'\)) s
5 538 M
(Alphabet vectorspace embedding of text: [['T', 'h', 'i', 's'], ['s', 'e', 'n', 't', 'e', 'n', ) s
5 527 M
('c', 'e'], ['i', 's'], ['a', 'l', 'p', 'h', 'a', 'b', 'e', 't', '-', 's', 'y', 'l', 'l', 'a', ) s
5 516 M
('b', 'l', 'e'], ['v', 'e', 'c', 't', 'o', 'r'], ['s', 'p', 'a', 'c', 'e'], ['e', 'm', 'b', 'e') s
5 505 M
(, 'd', 'd', 'e', 'd'], []]) s
5 494 M
(6.This kind of embedding is unconventional because it lifts an one dimensional text to an m-di) s
5 483 M
(mensional vectorspace nullifying the meaning of the word whereas traditional word embeddings r) s
5 472 M
(educe dimensionality and map words in higher dimensional space to real vectorspace of lower di) s
5 461 M
(mensions. Following the linguistic philosophy of "word is characterized by company it keeps" b) s
5 450 M
(y [Firth] \(Studies in Linguistic Analysis - http://cs.brown.edu/courses/csci2952d/readings/lec) s
5 439 M
(ture1-firth.pdf\), alphabet embedding above could be a framework for assessing colocated words ) s
5 428 M
(by euclidean distance e.g "vector" and "space" are colocated in previous example and are close) s
5 417 M
(r in meaning \(e.g WordNet distance\) but have high euclidean distance. This kind of alphabet em) s
5 406 M
(bedding is quite relevant to similar name clustering where same name is spelt differently \("Wh) s
5 395 M
(at is in a name" is a non-trivial question to answer\).) s
5 373 M
(----------------------------------------------------------------------------------------------) s
5 362 M
(------------------------------------------------) s
5 351 M
(746. \(THEORY and FEATURE\) Social Network Analysis - People Analytics - Alphabet-Syllable vecto) s
5 340 M
(rspace embedding - Python 3.7.5 upgrade - Name clustering - 4 February 2020) s
5 329 M
(----------------------------------------------------------------------------------------------) s
5 318 M
(------------------------------------------------) s
5 307 M
(1.SocialNetworkAnalysis_PeopleAnalytics.py and its dependencies have been upgraded to Python 3) s
5 296 M
(.7.5 \(CompressedSensing.py,TextCompression.py,WordSubstringProbabilities.py\) by autopep8 and 2) s
5 285 M
(to3 utilities. Python 2.7 versions have been separately committed.) s
5 274 M
(2.Example Professional Profile \(of the author\) has been updated in testlogs/CV.pdf and testlog) s
5 263 M
(s/CV.tex which is parsed for text and previously updated syllable_boundary_text_compression\(\) ) s
5 252 M
(function of CompressedSensing.py is invoked on profile text for alphabet vectorspace embedding) s
5 241 M
( of words.) s
5 230 M
(3.Logs for this commit are in testlogs/SocialNetworkAnalysis_PeopleAnalytics.log.Python3.7.5Up) s
5 219 M
(gradeWordEmbedding.4February2020 which demonstrate 3 alphabet vectorspace embeddings of same f) s
5 208 M
(irst name of the author spelt differently having low mutual euclidean distance.) s
5 197 M
(4.Syllable embedding instead of alphabet embedding of words causes linguistic boundaries to va) s
5 186 M
(nish which has been mentioned in an earlier code commit - transliterating text of one script l) s
5 175 M
(acking compound alphabets to another script bestowed with compound alphabets helps in natural ) s
5 164 M
(language text compression.) s
5 153 M
(5.Match Rating algorithm NYSIIS \(https://en.wikipedia.org/wiki/New_York_State_Identification_a) s
5 142 M
(nd_Intelligence_System\) which is better than Soundex codes is an example of efficient Similar ) s
5 131 M
(Name Search. Linguistically similar names are intersections of heterographs \(different spellin) s
5 120 M
(gs and meanings\) and synonyms \(different spellings and same meaning\) - Homophones - https://en) s
5 109 M
(.wikipedia.org/wiki/Homophone) s
5 87 M
(----------------------------------------------------------------------------------------------) s
5 76 M
(-------------------------------------------------) s
5 65 M
(747. \(THEORY and FEATURE\) Computational Geometric Spark NC-PRAM-BSP Factorization Benchmarks -) s
5 54 M
( 2014 bits, 2037 bits, 2050 bits integers - Quadcore Spark 2.4.3 + Python 3.7.5 - 5 February 2) s
5 43 M
(020) s
5 32 M
(----------------------------------------------------------------------------------------------) s
5 21 M
(-------------------------------------------------) s
5 10 M
(1.Computational Geometric Factorization Spark NC-PRAM-BSP implementation has been benchmarked ) s
_R
S
%%Page: (495) 495
%%BeginPageSetup
_S
18 36 translate
/pagenum 495 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (495) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(on 3 2000+ bits integers both smooth and hard and factorization logs have been captured in tes) s
5 681 M
(tlogs/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.Python3.7.5Upgrade.2000pl) s
5 670 M
(usbits.5February2020) s
5 659 M
(2.Following are the 2000+ bits integers benchmarked:) s
5 648 M
(        2.1 2014 bits smooth integer \(heuristically integers having lot of 9s are easy to fact) s
5 637 M
(orize\) - all 9s - 9999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 626 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 615 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 604 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 593 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 582 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 571 M
(999999999999999999999999999999999999999999999999999999999999) s
5 560 M
(\(first few factors are 3,9,13,33,... found from 18 seconds onwards\)) s
5 549 M
(        2.2 2037 bits less smooth integer - mixed digits,most 9s - 128917209999999999999999999) s
5 538 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 527 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 516 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 505 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 494 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 483 M
(9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) s
5 472 M
(99999999999999987108279) s
5 461 M
(\(first few factors are 3,9,11,27,33,... found from 18 seconds onwards\)) s
5 450 M
(        2.3 2050 bits hard integer \(heuristically integers having lot of 7s are hard to factor) s
5 439 M
(ize\) - mixed digits,most 7s - 1633353950998727431474807777777777777777777777777777777777777777) s
5 428 M
(7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777) s
5 417 M
(7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777) s
5 406 M
(7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777) s
5 395 M
(7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777) s
5 384 M
(7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777) s
5 373 M
(777777777777777777777777777777777777777777777777777777777777614442382677905034630297) s
5 362 M
(\(first few factors are 7,9,11,21,27,... found from 204 seconds onwards - unusually high durati) s
5 351 M
(on compared to previous 2000+ bits integers implies hardness\)) s
5 340 M
(3. Previous 2000plus bits integers are the largest factorized by NeuronRain AstroInfer Spark N) s
5 329 M
(C-PRAM-BSP implementation.) s
5 318 M
(4. Depth of the non-uniform circuits are 182,184 and 184 respectively for 2014 bits, 2037 bits) s
5 307 M
( and 2050 bits integers. PRAM time O\(logN\)^k\) for 2050 bits factorization circuit of depth 184) s
5 296 M
( therefore is O\(2050^184\) and number of PRAMs required are O\(2^2050/2050^184\) = O\(2^2050/2^202) s
5 285 M
(5\) = O\(2^25\) = 33554432 which is high number of multicores but plausible in a geographically d) s
5 274 M
(istributed BSP cloud.) s
5 263 M
(5. Increasing depth slows down the PRAM time but reduces the parallel RAMs. Notwithstanding th) s
5 252 M
(is theoretically prohibitive parallelism factors of 2050 bits hard integer were found in quadc) s
5 241 M
(ore in few minutes.) s
5 219 M
(----------------------------------------------------------------------------------------------) s
5 208 M
(------------------------------------------------) s
5 197 M
(748. \(THEORY and FEATURE\) Leaky Bucket Timeseries Analyzer Implementation - Python 3.7.5 - 12 ) s
5 186 M
(February 2020) s
5 175 M
(----------------------------------------------------------------------------------------------) s
5 164 M
(------------------------------------------------) s
5 153 M
(1.This commit implements Leaky Bucket Timeseries Analyzer Algorithm mentioned in GRAFIT course) s
5 142 M
( material https://github.com/shrinivaasanka/Grafit/blob/master/course_material/NeuronRain/Adva) s
5 131 M
(ncedComputerScienceAndMachineLearning/AdvancedComputerScienceAndMachineLearning.txt for generi) s
5 120 M
(c timeseries analytics. ) s
5 109 M
(2.Streaming_LeakyBucket.py instantiates Streaming Abstract Generator buffer incoming stream \(e) s
5 98 M
(xample Dictionary.txt file data source is analyzed as timeseries\) for generic data source and ) s
5 87 M
(data storage of specified buffer size.) s
5 76 M
(3.leaky_bucket_timeseries_analyzer\(\) iterates through buffer incoming stream and in a loop pop) s
5 65 M
(ulates a deque object till it reaches maximum size . Elements exceeding max size are overflown) s
5 54 M
( and printed. Deque simulates a leaky bucket - incoming elements fill the bucket from front en) s
5 43 M
(d \(insert\(\) at index 0\) and outgoing elements leak through other end.) s
5 32 M
(4.Separate thread outgoing_stream_thread\(\) independently scans the leaky bucket buffer and pop) s
5 21 M
(s the elements from the deque. It busy waits if the leaky bucket deque is empty and continues ) s
5 10 M
(to pop after buffer is refilled.) s
_R
S
%%Page: (496) 496
%%BeginPageSetup
_S
18 36 translate
/pagenum 496 def
/fname (AstroInferDesign.txt) def
/fdir (.) def
/ftail (AstroInferDesign.txt) def
% User defined strings:
/fmodstr (Tue Feb 18 12:08:29 2020) def
/pagenumstr (496) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 692 M
(5.Synchronization is by a binary semaphore guarding the deque in main thread and outgoing stre) s
5 681 M
(am thread.) s
5 670 M
(6.Theoretical overtone of leaky bucket is its ability to flag outliers by overflows and peaks ) s
5 659 M
(in timeseries are often the abnormalities in stream causing overflow. For example excessive ne) s
5 648 M
(twork traffic corresponds to peaks in timeseries data and frequent overflows in leaky bucket a) s
5 637 M
(s buffer fills faster than leakage.) s
5 626 M
(7.Leaky Bucket Analyzer thus is a universal tool for mining any stream of text,audio,video,peo) s
5 615 M
(ple data and most apt for wireless network stream, stream of celestial bodies configurations, ) s
5 604 M
(climate change datastream \(e.g http://climate.nasa.gov data stream on surface temperature, mel) s
5 593 M
(ting polar ice sheets, carbon emission, ocean currents and acidity\), economic datasets having ) s
5 582 M
(lot of outlier spikes. ) s
5 571 M
(8.Streaming_LeakyBucket.py has been implemented on Python 3.7.5 and Streaming_AbstractGenerato) s
5 560 M
(r.py has been upgraded to Python 3.7.5) s
5 549 M
(9.Logs for dictionary time series example are at testlogs/Streaming_LeakyBucket.log.12February) s
5 538 M
(2020) s
_R
S
%%Trailer
%%Pages: 496
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
