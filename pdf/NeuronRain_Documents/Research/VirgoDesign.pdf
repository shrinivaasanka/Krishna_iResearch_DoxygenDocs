%!PS-Adobe-3.0
%%BoundingBox: 18 36 577 806
%%Title: Enscript Output
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Wed Aug 21 15:59:50 2019
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 90

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 559 def
/d_page_h 770 def
/d_header_x 0 def
/d_header_y 755 def
/d_header_w 559 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 559 def
/d_footer_h 0 def
/d_output_w 559 def
/d_output_h 755 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(/***************************************************************************************) s
5 731 M
(#------------------------------------------------------------------------------------------) s
5 720 M
(-------------) s
5 709 M
(#NEURONRAIN VIRGO - Cloud, Machine Learning and Queue augmented Linux Kernel Fork-off) s
5 698 M
(#This program is free software: you can redistribute it and/or modify) s
5 687 M
(#it under the terms of the GNU General Public License as published by) s
5 676 M
(#the Free Software Foundation, either version 3 of the License, or) s
5 665 M
(#\(at your option\) any later version.) s
5 654 M
(#This program is distributed in the hope that it will be useful,) s
5 643 M
(#but WITHOUT ANY WARRANTY; without even the implied warranty of) s
5 632 M
(#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) s
5 621 M
(#GNU General Public License for more details.) s
5 610 M
(#You should have received a copy of the GNU General Public License) s
5 599 M
(#along with this program.  If not, see <http://www.gnu.org/licenses/>.) s
5 588 M
(#------------------------------------------------------------------------------------------) s
5 577 M
(--------------) s
5 566 M
(#Copyleft \(Copyright+\):) s
5 555 M
(#Srinivasan Kannan ) s
5 544 M
(#\(also known as: Ka.Shrinivaasan, Shrinivas Kannan\)) s
5 533 M
(#Ph: 9791499106, 9003082186) s
5 522 M
(#Krishna iResearch Open Source Products Profiles:) s
5 511 M
(#http://sourceforge.net/users/ka_shrinivaasan,) s
5 500 M
(#https://github.com/shrinivaasanka,) s
5 489 M
(#https://www.openhub.net/accounts/ka_shrinivaasan) s
5 478 M
(#Personal website\(research\): https://sites.google.com/site/kuja27/) s
5 467 M
(#emails: ka.shrinivaasan@gmail.com, shrinivas.kannan@gmail.com,) s
5 456 M
(#kashrinivaasan@live.com) s
5 445 M
(#------------------------------------------------------------------------------------------) s
5 434 M
(--------------) s
5 423 M
(*****************************************************************************************/) s
5 401 M
(VIRGO is an operating system kernel forked off from Linux kernel mainline to add cloud func) s
5 390 M
(tionalities \(system calls, modules etc.,\) within kernel itself with machine learning, analy) s
5 379 M
(tics, debugging, queueing support in the deepest layer of OSI stack i.e AsFer, USBmd, KingC) s
5 368 M
(obra together with VIRGO constitute the previous functionalities. Presently there seems to ) s
5 357 M
(be no cloud implementation with fine-grained cloud primitives \(system calls, modules etc.,\)) s
5 346 M
( included in kernel itself though there are coarse grained clustering and SunRPC implementa) s
5 335 M
(tions available. VIRGO complements other Clustering and application layer cloud OSes like c) s
5 324 M
(loudstack, openstack etc., in these aspects - CloudStack and OpenStack can be deployed on a) s
5 313 M
( VIRGO Linux Kernel Cloud - OpenStack nova compute, neutron network, cinder/swift storage s) s
5 302 M
(ubsystems can be augmented to have additional drivers that invoke lowlevel VIRGO syscall an) s
5 291 M
(d kernel module primitives \(assuming there are no coincidental replications of functionalit) s
5 280 M
(ies\) thereby acting as a foundation to application layer cloud.) s
5 258 M
(Remote Device Invocation , which is an old terminlogy for Internet-Of-Things has already be) s
5 247 M
(en experimented in SunRPC and KOrbit CORBA-in-linux-kernel kernel modules in old linux kern) s
5 236 M
(els \(http://www.csn.ul.ie/~mark/fyp/fypfinal.html - with Solaris MC and example Remote Devi) s
5 225 M
(ce Client-Server Module implementation\). VIRGO Linux with the larger encompassing NeuronRai) s
5 214 M
(n suite is an effort to provide a unified end-to-end application-to-kernel machine-learning) s
5 203 M
( propelled cloud and internet-of-things framework.) s
5 181 M
(Memory pooling:) s
5 170 M
(---------------) s
5 159 M
(Memory pooling is proposed to be implemented by a new virgo_malloc\(\) system call that trans) s
5 148 M
(parently allocates a block of virtual memory from memory pooled from virtual memory scatter) s
5 137 M
(ed across individual machines part of the cloud.) s
5 115 M
(CPU pooling or cloud ability in a system call:) s
5 104 M
(----------------------------------------------) s
5 93 M
(Clone\(\) system call is linux specific and internally it invokes sys_clone\(\). All fork\(\),vfo) s
5 82 M
(rk\(\) and clone\(\) system calls internally invoke do_fork\(\). A new system call virgo_clone\(\) ) s
5 71 M
(is proposed to create a thread transparently on any of the available machines on the cloud.) s
5 60 M
(This creates a thread on a free or least-loaded machine on the cloud and returns the result) s
5 49 M
(s.) s
5 27 M
(virgo_clone\(\) is a wrapper over clone\(\) that looks up a map of machines-to-loadfactor and g) s
5 16 M
(et the host with least load and invokes clone\(\) on a function on that gets executed on the ) s
5 5 M
(host. Usual cloud implementations provide userspace API that have something similar to this) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( - call\(function,host\). Loadfactor can be calculated through any of the prominent loadbalan) s
5 731 M
(cing algorithm. Any example userspace code that uses clone\(\) can be replaced with virgo_clo) s
5 720 M
(ne\(\) and all such threads will be running in a cloud transparently.Presently Native POSIX t) s
5 709 M
(hreads library\(NPTL\) and older LinuxThreads thread libraries internally use clone\(\).) s
5 687 M
(Kernel has support for kernel space sockets with kernel_accept\(\), kernel_bind\(\), kernel_con) s
5 676 M
(nect\(\), kernel_sendmsg\(\) and kernel_recvmsg\(\) that can be used inside a kernel module. Virg) s
5 665 M
(o driver implements virgo_clone\(\) system call that does a kernel_connect\(\) to a remote kern) s
5 654 M
(el socket already __sock_create\(\)-d, kernel_bind\(\)-ed and kernel_accept\(\)-ed and does kerne) s
5 643 M
(l_sendmsg\(\) of the function details and kernel_recvmsg\(\) after function has been executed b) s
5 632 M
(y clone\(\) in remote machine. After kernel_accept\(\) receives a connection it reads the funct) s
5 621 M
(ion and parameter details. Using these kthread_create\(\) is executed in the remote machine a) s
5 610 M
(nd results are written back to the originating machine. This is somewhat similar to SunRPC ) s
5 599 M
(but adapted and made lightweight to suit virgo_clone\(\) implementation without any external ) s
5 588 M
(data representation.) s
5 566 M
(Experimental Prototype) s
5 555 M
(-----------------------) s
5 544 M
(virgo_clone\(\) system call and a kernel module virgocloudexec which implements Sun RPC inter) s
5 533 M
(face have been implemented.) s
5 511 M
(VIRGO - loadbalancer to get the host:ip of the least loaded node) s
5 500 M
(----------------------------------------------------------------) s
5 489 M
(Loadbalancer option 1 - Centralized loadbalancer registry that tracks load:) s
5 478 M
(---------------------------------------------------------------------------) s
5 456 M
(Virgo_clone\(\) system call needs to lookup a registry or map of host-to-load and get the lea) s
5 445 M
(st loaded host:ip from it. This requires a  load monitoring code to run periodically and up) s
5 434 M
(date the map. If this registry is located on a single machine then simultaneous virgo_clone) s
5 423 M
(\(\) calls from many machines on the cloud could choke the registry. Due to this, loadbalance) s
5 412 M
(r registry needs to run on a high-end machine. Alternatively,each machine can have its own ) s
5 401 M
(view of the load and multiple copies of load-to-host registries can be stored in individual) s
5 390 M
( machines. Synchronization of the copies becomes a separate task in itself\(Cache coherency\)) s
5 379 M
(. Either way gives a tradeoff between accuracy, latency and efficiency. ) s
5 357 M
(Many application level userspace load monitoring tools are available but as virgo_clone\(\) i) s
5 346 M
(s in kernel space, it needs to be investigated if kernel-to-kernel loadmonitoring can be do) s
5 335 M
(ne without userspace data transport.Most Cloud API explicitly invoke a function on a host. ) s
5 324 M
(If this functionality is needed, virgo_clone\(\) needs to take host:ip address as extra argum) s
5 313 M
(ent,but it reduces transparent execution.) s
5 291 M
(\(Design notes for LB option 1 handwritten by myself are at :http://sourceforge.net/p/virgo-) s
5 280 M
(linux/code-0/HEAD/tree/trunk/virgo-docs/MiscellaneousOpenSourceDesignAndAcademicResearchNot) s
5 269 M
(es.pdf\)) s
5 247 M
(Loadbalancer option 2 - Linux Psuedorandom number generator based load balancer\(experimenta) s
5 236 M
(l\) instead of centralized registry that tracks load:) s
5 225 M
(-------------------------------------------------------------------------------------------) s
5 214 M
(---------------) s
5 192 M
(Each virgo_clone\(\) client has a PRG which is queried \(/dev/random or /dev/urandom\) to get t) s
5 181 M
(he id of the host to send the next virgo_clone\(\) function to be executed ) s
5 170 M
(Expected number of requests per node is derived as:) s
5 148 M
(expected number of requests per node = summation\(each_value_for_the_random_variable_for_num) s
5 137 M
(ber_of_requests * probability_for_each_value\) where random variable ranges from 1 to k wher) s
5 126 M
(e N is number of processors and k is the number of requests to be distributed on N nodes) s
5 104 M
(=expected number of requests per node = \(math.pow\(N, k+2\) - k*math.pow\(N,2\) + k*math.pow\(N,) s
5 93 M
(1\) - 1\) / \(math.pow\(N, k+3\) - 2*math.pow\(N,k+2\) + math.pow\(N,k+1\)\)) s
5 71 M
(This loadbalancer is dependent on efficacy of the PRG and since each request is uniformly, ) s
5 60 M
(identically, independently distributed use of PRG) s
5 49 M
(would distribute requests evenly. This obviates the need for loadtracking and coherency of ) s
5 38 M
(the load-to-host table.) s
5 16 M
(\(Design notes for LB option 2 handwritten by myself at :http://sourceforge.net/p/virgo-linu) s
5 5 M
(x/code-0/HEAD/tree/trunk/virgo-docs/MiscellaneousOpenSourceDesignAndAcademicResearchNotes.p) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(df\)) s
5 709 M
(\(python script in virgo-python-src/\)) s
5 687 M
(*******************************************************************************************) s
5 676 M
(*********) s
5 665 M
(Implemented VIRGO Linux components \(as on 7 March 2016\)) s
5 654 M
(*******************************************************************************************) s
5 643 M
(*********) s
5 632 M
(1. cpupooling virtualization - VIRGO_clone\(\) system call and VIRGO cpupooling driver by whi) s
5 621 M
(ch a remote procedure can be invoked in kernelspace.\(port: 10000\)) s
5 610 M
(2. memorypooling virtualization - VIRGO_malloc\(\), VIRGO_get\(\), VIRGO_set\(\), VIRGO_free\(\) sy) s
5 599 M
(stem calls and VIRGO memorypooling driver by which kernel memory can be allocated in remote) s
5 588 M
( node, written to, read and freed - A kernelspace memcache-ing.\(port: 30000\)) s
5 577 M
(3. filesystem virtualization - VIRGO_open\(\), VIRGO_read\(\), VIRGO_write\(\), VIRGO_close\(\) sys) s
5 566 M
(tem calls and VIRGO cloud filesystem driver by which file IO in remote node can be done in ) s
5 555 M
(kernelspace.\(port: 50000\)) s
5 544 M
(4. config - VIRGO config driver for configuration symbols export.) s
5 533 M
(5. queueing - VIRGO Queuing driver kernel service for queuing incoming requests, handle the) s
5 522 M
(m with workqueue and invoke KingCobra service routines in kernelspace. \(port: 60000\)) s
5 511 M
(6. cloudsync - kernel module for synchronization primitives \(Bakery algorithm etc.,\) with e) s
5 500 M
(xported symbols that can be used in other VIRGO cloud modules for critical section lock\(\) a) s
5 489 M
(nd unlock\(\)) s
5 478 M
(7. utils - utility driver that exports miscellaneous kernel functions that can be used acro) s
5 467 M
(ss VIRGO Linux kernel) s
5 456 M
(8. EventNet - eventnet kernel driver to vfs_read\(\)/vfs_write\(\) text files for EventNet vert) s
5 445 M
(ex and edge messages \(port: 20000\)) s
5 434 M
(9. Kernel_Analytics - kernel module that reads machine-learnt config key-value pairs set in) s
5 423 M
( /etc/virgo_kernel_analytics.conf. Any machine learning software can be used to get the key) s
5 412 M
(-value pairs for the config. This merges three facets - Machine Learning, Cloud Modules in ) s
5 401 M
(VIRGO Linux-KingCobra-USBmd , Mainline Linux Kernel ) s
5 390 M
(10. Testcases and kern.log testlogs for the above) s
5 379 M
(11. SATURN program analysis wrapper driver.) s
5 357 M
(Thus VIRGO Linux at present implements a minimum cloud OS \(with cloud-wide cpu, memory and ) s
5 346 M
(file system management\) over Linux and potentially fills in a gap to integrate both softwar) s
5 335 M
(e and hardware into cloud with machine learning and analytics abilities that is absent in a) s
5 324 M
(pplication layer cloud implementations. Thus VIRGO cloud is an IoT operating system kernel ) s
5 313 M
(too that enables any hardware to be remote controlled. Data analytics using AsFer can be do) s
5 302 M
(ne by just invoking requisite code from a kernelspace driver above and creating an updated ) s
5 291 M
(driver binary \(or\) by kernel_analytics module which reads the userland machine-learnt confi) s
5 280 M
(g. ) s
5 258 M
(*******************************************************************************************) s
5 247 M
(************************************) s
5 236 M
(VIRGO ToDo and NiceToHave Features \(list is quite dynamic and might be rewritten depending ) s
5 225 M
(on feasibility - longterm with no deadline\)) s
5 214 M
(*******************************************************************************************) s
5 203 M
(************************************) s
5 192 M
(\(FEATURE - DONE-minimum separate config file support in client and kernel service \)1. More ) s
5 181 M
(Sophisticated VIRGO config file and read_virgo_config\(\) has to be invoked on syscall client) s
5 170 M
(s virgo_clone and virgo_malloc also. Earlier config was being read by kernel module only wh) s
5 159 M
(ich would work only on a single machine. A separate config module kernel service has been a) s
5 148 M
(dded for future use while exporting kernel-wide configuration related symbols. VIRGO config) s
5 137 M
( files have been split into /etc/virgo_client.conf and /etc/virgo_cloud.conf to delink the ) s
5 126 M
(cloud client and kernel service config parameters reading and to do away with oft occurring) s
5 115 M
( symbol lookup errors and multiple definition errors for num_cloud_nodes and node_ip_addrs_) s
5 104 M
(in_cloud - these errors are frequent in 3.15.5 kernel than 3.7.8 kernel. Each VIRGO module ) s
5 93 M
(and system call now reads the config file independent of others - there is a read_virgo_con) s
5 82 M
(fig_<module>_<client_or_service>\(\) function variant for each driver and system call. Though) s
5 71 M
( at present smacks of a replicated code, in future the config reads for each component \(sys) s
5 60 M
(tem call or module\) might vary significantly depending on necessities.  New kernel module c) s
5 49 M
(onfig has been added in drivers/virgo. This is for future prospective use as a config expor) s
5 38 M
(t driver that can be looked up by any other VIRGO module for config parameters.  include/li) s
5 27 M
(nux/virgo_config.h has the declarations for all the config variables declared within each o) s
5 16 M
(f the VIRGO kernel modules.  Config variables in each driver and system call have been name) s
5 5 M
(d with prefix and suffix to differentiate the module and/or system call it serves.  In geog) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(raphically distributed cloud virgo_client.conf has to be in client nodes and virgo_cloud.co) s
5 731 M
(nf has to be in cloud nodes. For VIRGO Queue - KingCobra REQUEST-REPLY peer-to-peer messagi) s
5 720 M
(ng system same node can have virgo_client.conf and virgo_cloud.conf.  Above segregation lar) s
5 709 M
(gely simplifies the build process as each module and system call is independently built wit) s
5 698 M
(hout need for a symbol to be exported from other module by pre-loading it.\(- from commit co) s
5 687 M
(mments done few months ago\)) s
5 654 M
(\(FEATURE - Special case implementation DONE\) 2. Object Marshalling and Unmarshalling \(Seria) s
5 643 M
(lization\) Features - Feature 4 is a marshalling feature too as Python world PyObjects are s) s
5 632 M
(erialized into VIRGO linux kernel and unmarshalled back bottom-up with CPython and Boost::P) s
5 621 M
(ython C++ invocations - CPython and Boost internally take care of serialization.) s
5 599 M
(\(FEATURE - DONE\) 3. Virgo_malloc\(\), virgo_set\(\), virgo_get\(\) and virgo_free\(\) syscalls that) s
5 588 M
( virtualize the physical memory across all cloud nodes into a single logical memory behemot) s
5 577 M
(h \(NUMA visavis UMA\). \(There are random crashes in copy_to_user and copy_from_user in sysca) s
5 566 M
(ll path for VIRGO memory pooling commands that were investigated but turned out to be myste) s
5 555 M
(ry\). These crashes have either been resolved or occur less in 3.15.5 and 4.1.5 kernels.) s
5 544 M
(Initial Design Handwritten notes committed at: http://sourceforge.net/p/virgo-linux/code-0/) s
5 533 M
(210/tree/trunk/virgo-docs/VIRGO_Memory_Pooling_virgomalloc_initial_design_notes.pdf) s
5 511 M
(\(FEATURE - DONE\) 4. Integrated testing of AsFer-VIRGO Linux Kernel request roundtrip - invo) s
5 500 M
(cation of VIRGO linux kernel system calls from AsFer Python via C++ or C extensions - Commi) s
5 489 M
(ts for this have been done on 29 January 2016. This unifies userlevel applications and kern) s
5 478 M
(elspace modules so that AsFer Python makes VIRGO linux kernel an extension. Following is sc) s
5 467 M
(hematic diagram and More details in commit notes below.) s
5 445 M
(4.1 Schematic Diagram:) s
5 434 M
(-----------------------) s
5 423 M
(        AsFer Python -----> Boost::Python C++ Extension ------> VIRGO memory system calls -) s
5 412 M
(-------> VIRGO Linux Kernel Memory Drivers) s
5 401 M
(        /\\                                                                                 ) s
5 390 M
(             V) s
5 379 M
(         |                                                                                 ) s
5 368 M
(             |) s
5 357 M
(         ---------------------------------------------<------------------------------------) s
5 346 M
(--------------) s
5 324 M
(        AsFer Python -----> CPython Extensions ------> VIRGO memory system calls --------> ) s
5 313 M
(VIRGO Linux Kernel Memory Drivers) s
5 302 M
(         /\\                                                                                ) s
5 291 M
(             V) s
5 280 M
(         |                                                                                 ) s
5 269 M
(             |) s
5 258 M
(         ---------------------------------------------<------------------------------------) s
5 247 M
(--------------) s
5 225 M
(\(FEATURE - DONE\)5. Multithreading of VIRGO cloudexec kernel module \(if not already done by ) s
5 214 M
(kernel module subsystem internally\)) s
5 192 M
(\(FEATURE - DONE\) 6. Sophisticated queuing and persistence of CPU and Memory pooling request) s
5 181 M
(s in Kernel Side \(by possibly improving already existing kernel workqueues\). Either open so) s
5 170 M
(urce implementations like ZeroMQ/ActiveMQ can be used or Queuing implementation has to be w) s
5 159 M
(ritten from scratch or both. ActiveMQ supports REST APIs and is JMS implementation. This fe) s
5 148 M
(ature has been marked completed because recently NeuronRain AsFer backend has been updated ) s
5 137 M
(to support KingCobra REQUEST_REPLY.queue as a datasource for Streaming Abstract Generator. ) s
5 126 M
(By enabling use_as_kingcobra_service=1 in cpupooling and memorypooling VIRGO drivers, any i) s
5 115 M
(ncoming CPU and Memory related request can be routed to KingCobra by linux workqueue in VIR) s
5 104 M
(GO queue and disk persisted \(/var/log/REQUEST_REPLY.queue\) by KingCobra servicerequest reci) s
5 93 M
(pient. Also Kafka Publisher/Subscriber have been implemented in NeuronRain AsFer which invo) s
5 82 M
(ke Streaming Abstract Generator with KingCobra REQUEST_REPLY.queue as datasource to publish) s
5 71 M
( persisted already received CPU and Memory requests to Kafka Message Queue. Thus queuing an) s
5 60 M
(d persistence for VIRGO CPU and Memory is in place. ZeroMQ does not have persistence and is) s
5 49 M
( used for NeuronRain client side Router-Dealer concurrent request servicing pattern.) s
5 27 M
(\(FEATURE - DONE-Minimum Functionality\) 7. Integration of Asfer\(AstroInfer\) algorithm codes ) s
5 16 M
(into VIRGO which would add machine learning capabilities into VIRGO - That is, VIRGO cloud ) s
5 5 M
(subsystem which is part of a linux kernel installation "learns" and "adapts" to the process) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(es that are executed on VIRGO. This catapults the power of the Kernel and Operating System ) s
5 731 M
(into an artificially \(rather approximately naturally\) intelligent computing platform \(a sof) s
5 720 M
(tware "brain"\). For example VIRGO can "learn" about "execution times" of processes and suit) s
5 709 M
(ably act for future processes. PAC Learning of functions could be theoretical basis for thi) s
5 698 M
(s.  Initial commits for Kernel Analytics Module which reads the /etc/virgo_kernel_analytics) s
5 687 M
(.conf config have been done. This config file virgo_kernel_analytics.conf having csv\(s\) of ) s
5 676 M
(key-value pairs of analytics variables is set by AsFer or any other Machine Learning code. ) s
5 665 M
( With this VIRGO Linux Kernel is endowed with abilities to dynamically evolve than being ju) s
5 654 M
(st a platform for user code. Implications are huge - for example, a config variable "MaxNet) s
5 643 M
(workBandwidth=255" set by the ML miner in userspace based on a Perceptron or Logistic Regre) s
5 632 M
(ssion executed on network logs can be read by a kernel module that limits the network traff) s
5 621 M
(ic to 255Mbps. Thus kernel is no longer a static predictable blob behemoth. With this, VIRG) s
5 610 M
(O is an Internet-of-Things kernel that does analytics and based on analytics variable value) s
5 599 M
(s integrated hardware can be controlled across the cloud through remote kernel module funct) s
5 588 M
(ion invocation. This facility has been made dynamic with Boost::Python C++ and CPython exte) s
5 577 M
(nsions that permit flow of objects from machine learnt AsFer kernel analytics variables to ) s
5 566 M
(VIRGO Linux Kernel memory drivers via VIRGO system calls directly and back - Commits on 29 ) s
5 555 M
(January 2016 - this should obviate re-reading /etc/virgo_kernel_analytics.conf and is an ex) s
5 544 M
(emplary implementation which unifies C++/Python into C/Kernel.) s
5 522 M
(-----------------------------------------) s
5 511 M
(Example scenario 1 without implementation: ) s
5 500 M
(-----------------------------------------) s
5 489 M
(- Philips Hue IoT mobile app controlled bulb - http://www2.meethue.com/en-xx/) s
5 478 M
(- kernel_analytics module learns key-value pairs from the AsFer code and exports it VIRGO k) s
5 467 M
(ernel wide) s
5 456 M
(- A driver function with in bulb embedded device driver can be invoked through VIRGO cpupoo) s
5 445 M
(ling \(invoked from remote virgo_clone\(\) system_call\)) s
5 434 M
(based on if-else clause of the kernel_analytics variable i.e remote_client invokes virgo_cl) s
5 423 M
(one\(\) with function argument "lights on" which is routed to another cloud node. The recipie) s
5 412 M
(nt cloud node "learns" from AsFer kernel_analytics that Voltage is low or Battery is low fr) s
5 401 M
(om logs and decides to switch in high beam or low beam.) s
5 390 M
(-----------------------------------------) s
5 379 M
(Example scenario 2 without implementation: ) s
5 368 M
(-----------------------------------------) s
5 357 M
(- A swivel security camera driver is remotely invoked via virgo_clone\(\) in the VIRGO cloud.) s
5 346 M
(- The camera driver uses a machine learnt variable exported by kernel_analytics-and-AsFer t) s
5 335 M
(o pan the camera by how much degrees.) s
5 324 M
(-------------------------------------------------------------------------------------------) s
5 313 M
(------------) s
5 302 M
(Example scenario 3 without implementation - probably one of the best applications of Neuron) s
5 291 M
(Rain IoT OS:) s
5 280 M
(-------------------------------------------------------------------------------------------) s
5 269 M
(------------) s
5 258 M
(- Automatic Driverless Automobiles - a VIRGO driver for a vehicle which learns kernel analy) s
5 247 M
(tics variables \(driving directions\) set by kernel_analytics driver and AsFer Machine Learni) s
5 236 M
(ng. A naive algorithm for Driverless Car \(with some added modifications over A-Star and Mot) s
5 225 M
(ion planning algorithms\):) s
5 214 M
(        - AsFer analytics receives obstacle distance data 360+360 degrees around \(horizonta) s
5 203 M
(l and vertical\) the vehicle \(e.g ultrasound sensors\) which is updated in a Spark DataFrame ) s
5 192 M
(table with high frequency \(100 times per second\).) s
5 181 M
(        - VIRGO Linux kernel on vehicle has two special drivers for Gear-Clutch-Break-Accel) s
5 170 M
(erator-Fuel\(GCBAF\) and Steering listening on some ports.) s
5 159 M
(        - AsFer analytics with high frequency computes threshold variables for applying bre) s
5 148 M
(ak, clutch, gear, velocity, direction, fuel changes which are written to kernel_analytics.c) s
5 137 M
(onf realtime based on distance data from Spark table.) s
5 126 M
(        - These analytics variables are continuously read by GCBAF and Steering drivers whi) s
5 115 M
(ch autopilot the vehicle.) s
5 104 M
(        - Above applies to Fly-by-wire aeronautics too with appropriate changes in analytic) s
5 93 M
(s variables computed.) s
5 82 M
(        - The crucial parameter is the response time in variable computation and table upda) s
5 71 M
(tes which requires a huge computing power unless the vehicle is hooked onto a Spark cloud i) s
5 60 M
(n motion by wireless which process the table and compute analytic variables.) s
5 38 M
(----------------------------------------------) s
5 27 M
(References for Machine Learning + Linux Kernel) s
5 16 M
(----------------------------------------------) s
5 5 M
(7.1 KernTune - http://repository.uwc.ac.za/xmlui/bitstream/handle/10566/53/Yi_KernTune\(2007) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(\).pdf?sequence=3) s
5 731 M
(7.2 Self-learning, Predictive Systems - https://icri-ci.technion.ac.il/projects/past-projec) s
5 720 M
(ts/machine-learning-for-architecture-self-learning-predictive-computer-systems/) s
5 709 M
(7.3 Linux Process Scheduling and Machine Learning - http://www.cs.ucr.edu/~kishore/papers/t) s
5 698 M
(encon.pdf) s
5 687 M
(7.4 Network Latency and Machine Learning - https://users.soe.ucsc.edu/~slukin/rtt_paper.pdf) s
5 676 M
(7.5 Machine Learning based Meta-Scheduler for Multicore processors - https://books.google.c) s
5 665 M
(o.in/books?id=1GWcHmCrl0QC&pg=PA528&lpg=PA528&dq=linux+kernel+machine+learning&source=bl&ot) s
5 654 M
(s=zfJsq_uu5q&sig=mMIUZ-oyJIwZXtYj4HntrQE8NSk&hl=en&sa=X&ved=0CCAQ6AEwATgKahUKEwjs9sqF9vPIAh) s
5 643 M
(VBFZQKHbNtA6A ) s
5 632 M
( ) s
5 621 M
(8. A Symmetric Multi Processing subsystem Scheduler that virtualizes all nodes in cloud \(pr) s
5 610 M
(obably this would involve improving the loadbalancer into a scheduler with priority queues\)) s
5 588 M
(\(FEATURE - ONGOING\) 9. Virgo is an effort to virtualize the cloud as a single machine - Her) s
5 577 M
(e cloud is not limited to servers and desktops but also mobile devices that run linux varia) s
5 566 M
(nts like Android, and other Mobile OSes. In the longterm, Virgo may have to be ported or op) s
5 555 M
(timized for handheld devices.  Boost::Python AsFer-VIRGO system call invocations implemente) s
5 544 M
(d in NeuronRain is framework for implementing python applications interfacing with kernel. ) s
5 533 M
(If deployed on Mobile processors \(e.g by overlaying Android Kernel with VIRGO layer\) there ) s
5 522 M
(are IDEs like QPython to develop python apps for Android.) s
5 500 M
(\(FEATURE - DONE\) 10. Memory Pooling Subsystem Driver - Virgo_malloc\(\), Virgo_set\(\), Virgo_g) s
5 489 M
(et\(\) and Virgo_free\(\) system calls and their Kernel Module Implementations. In addition to ) s
5 478 M
(syscall path, telnet or userspace socket client interface is also provided for both VIRGO C) s
5 467 M
(PU pooling\(virgo_clone\(\)\) and VIRGO Memory Pooling Drivers.) s
5 445 M
(\(FEATURE - DONE\) 11. Virgo Cloud File System with virgo_cloud_open\(\), virgo_cloud_read\(\) , ) s
5 434 M
(virgo_cloud_write\(\) and virgo_cloud_close\(\) commands invoked through telnet path has been i) s
5 423 M
(mplemented that transcends disk storage in all nodes in the cloud. It is also fanciful feat) s
5 412 M
(ure addition that would make VIRGO a complete all-pervading cloud platform. The remote teln) s
5 401 M
(et clients send the file path and the buf to be read or data to be written. The Virgo File ) s
5 390 M
(System kernel driver service creates a unique Virgo File Descriptor for each struct file* o) s
5 379 M
(pened by filp_open\(\) and is returned to client. Earlier design option to use a hashmap \(lin) s
5 368 M
(ux/hashmap.h\) looked less attractive as file desciptor is an obvious unique description for) s
5 357 M
( open file and also map becomes unscalable. The kernel upcall path has been implemented \(pa) s
5 346 M
(ramIsExecutable=0\) and may not be necessary in most cases and all above cloudfs commands wo) s
5 335 M
(rk in kernelspace using VFS calls.) s
5 313 M
(\(FEATURE - DONE\) 12. VIRGO Cloud File System commands through syscall paths - virgo_open\(\),) s
5 302 M
(virgo_close\(\),virgo_read\(\) and virgo_write\(\). All the syscalls have been implemented with t) s
5 291 M
(estcases and more bugs fixed. After fullbuild and testing, virgo_open\(\) and virgo_read\(\) wo) s
5 280 M
(rk and copy_to_user\(\) is working.) s
5 258 M
(\(FEATURE - DONE\) 13. VIRGO memory pooling feature is also a distributed key-value store sim) s
5 247 M
(ilar to other prominent key-store software like BigTable implementations, Dynamo, memory ca) s
5 236 M
(ching tools etc., but with a difference that VIRGO mempool is implemented as part of Linux ) s
5 225 M
(Kernel itself thus circumventing userspace latencies. Due to Kernel space VIRGO mempool has) s
5 214 M
( an added power to store and retrieve key-value pair in hardware devices directly which oth) s
5 203 M
(erwise is difficult in userspace implementations.) s
5 181 M
(14. VIRGO memory pooling can be improved with disk persistence for in-memory key-value stor) s
5 170 M
(e using virgo_malloc\(\),virgo_set\(\),virgo_get\(\) and virgo_free\(\) calls. Probably this might ) s
5 159 M
(be just a set of invocations of read and write ops in disk driver or using sysfs. Probably ) s
5 148 M
(this could be redundant as the VIRGO filesystem primitives have been implemented that write) s
5 137 M
( to a remote host's filesystem in kernelspace. ) s
5 115 M
(15. \(FEATURE-DONE\) Socket Debugging, Program Analysis and Verification features for user co) s
5 104 M
(de that can find bugs statically. Socket skbuff debug utility and SATURN Program Analysis S) s
5 93 M
(oftware has been integrated into NEURONRAIN VIRGO Linux Kernel.) s
5 71 M
(16\(FEATURE - DONE-Minimum Functionality\). Operating System Logfile analysis using Machine L) s
5 60 M
(earning code in AstroInfer for finding patterns of processes execution and learn rules from) s
5 49 M
( the log. Kernel_Analytics VIRGO module reads /etc/virgo_kernel_analytics.conf config key-v) s
5 38 M
(alue pairs which are set by AsFer or other Machine Learning Software. At present an Apache ) s
5 27 M
(Spark usecase that mines Uncomplicated Fire Wall logs in kern.log for most prominent source) s
5 16 M
( IP has been implemented in AsFer codebase : http://sourceforge.net/p/asfer/code/704/tree/p) s
5 5 M
(ython-src/SparkKernelLogMapReduceParser.py . This is set as a key-value config in /etc/virg) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(o_kernel_analytics.conf read and exported by kernel_analytics module.) s
5 720 M
(17. Implementations of prototypical Software Transactional Memory and LockFree Datastructur) s
5 709 M
(es for VIRGO memory pooling.) s
5 687 M
(18. Scalability features for Multicore machines - references:) s
5 676 M
(\(http://halobates.de/lk09-scalability.pdf, http://pdos.csail.mit.edu/papers/linux:osdi10.pd) s
5 665 M
(f\)) s
5 643 M
(19. Read-Copy-Update algorithm implementation for VIRGO memory pooling that supports multip) s
5 632 M
(le simultaneous versions of memory for readers - widely used in redesigned Linux Kernel.) s
5 610 M
(20. \(FEATURE - SATURN integration - minimum functionality DONE\) Program Comprehension featu) s
5 599 M
(res as an add-on described in : https://sites.google.com/site/kuja27/PhDThesisProposal.pdf?) s
5 588 M
(attredirects=0. SATURN program analysis has been integrated into VIRGO linux with a stub dr) s
5 577 M
(iver.) s
5 555 M
(21. \(FEATURE - DONE\) Bakery Algorithm implementation - cloudsync kernel module) s
5 533 M
(22. \(FEATURE - ONGOING\) Implementation of Distributed Systems primitives for VIRGO cloud vi) s
5 522 M
(z., Logical Clocks, Termination Detection, Snapshots, Cache Coherency subsystem etc.,\(as pa) s
5 511 M
(rt of cloudsync driver module\). Already a simple timestamp generation feature has been impl) s
5 500 M
(emented for KingCobra requests with <ipaddress>:<localmachinetimestamp> format) s
5 478 M
(23. \(FEATURE - minimum functionality DONE\) Enhancements to kmem if it makes sense, because ) s
5 467 M
(it is better to rely on virgo_malloc\(\) for per machine memory management and wrap it around) s
5 456 M
( with a cloudwide VIRGO Unique ID based address lookup implementation of which is already i) s
5 445 M
(n place.) s
5 434 M
(Kernel Malloc syscall kmalloc\(\) internally works as follows:) s
5 423 M
(        - kmem_cache_t object has pointers to 3 lists) s
5 412 M
(        - These 3 lists are full objects SLAB list, partial objects SLAB list and free obje) s
5 401 M
(cts SLAB list - all are lists of objects of same size) s
5 390 M
( and cache_cache is the global list of all caches created thus far.) s
5 379 M
(        - Any kmalloc\(\) allocation searches partial objects SLAB list and allocates a memor) s
5 368 M
(y block with kmem_cache_alloc\(\) from the first SLAB available - returned to caller.) s
5 357 M
(        - Any kfree\(\) returns an object to a free SLAB list) s
5 346 M
(        - Full SLABs are removed from partial SLAB list and appended to full SLAB list) s
5 335 M
(        - SLABs are virtual memory pages created with kmem_cache_create) s
5 324 M
(        - Each SLAB in SLABs list has blocks of similar sized objects \(e.g. multiples of tw) s
5 313 M
(o\). Closest matching block is returned and fragmentation is minimized \(incidentally this is) s
5 302 M
( the knapsack and packing optimization LP problem and thus NP-complete\).) s
5 280 M
(KERNELSPACE:) s
5 269 M
(VIRGO address translation table already implements a tree registry of vtables each of capac) s
5 258 M
(ity 3000 that keep track of kmalloc\(\) allocations across all cloud nodes. Implementation of) s
5 247 M
( SLAB allocator for kmalloc\(\) creates a kmem_cache\(s\) of similar sized objects and kmem_cac) s
5 236 M
(he_alloc\(\) allocates from these caches. kmalloc\(\) already does lot of per-machine optimizat) s
5 225 M
(ions. VIRGO vtable registry tree maintained in VIRGO memory syscall end combined with per-m) s
5 214 M
(achine kmalloc\(\) cache_cache already look sufficient. Instrumenting kmem_cache_create\(\) wit) s
5 203 M
(h #ifdef SLAB_CLOUD_MALLOC flags to do RPC looks superfluous. Hence marking this action ite) s
5 192 M
(m as done. Any further optimization can be done on top of existing VIRGO address translatio) s
5 181 M
(n table struct - e.g bookkeeping flags, function pointers etc.,.) s
5 170 M
(USERSPACE: sbrk\(\) and brk\(\) are no longer used internally in malloc\(\) library routines. Ins) s
5 159 M
(tead mmap\(\) has replaced it \(http://web.eecs.utk.edu/courses/spring2012/cs360/360/notes/Mal) s
5 148 M
(loc1/lecture.html, http://web.eecs.utk.edu/courses/spring2012/cs360/360/notes/Malloc1/diff.) s
5 137 M
(html\).) s
5 115 M
(24.\(FEATURE - ONGOING\) Cleanup the code and remove unnecessary comments.) s
5 93 M
(25.\(FEATURE - DONE\) Documentation - This design document is also a documentation for commit) s
5 82 M
( notes and other build and debugging technical details. Doxygen html cross-reference docume) s
5 71 M
(ntation for AsFer, USBmd, VIRGO, KingCobra and Acadpdrafts has been created along with summ) s
5 60 M
(ed-up design document and committed to GitHub Repository at https://github.com/shrinivaasan) s
5 49 M
(ka/Krishna_iResearch_DoxygenDocs) s
5 27 M
(26. \(FEATURE - DONE\) Telnet path to virgo_cloud_malloc,virgo_cloud_set and virgo_cloud_get ) s
5 16 M
(has been tested and working. This is similar to memcached but stores key-value in kernelspa) s
5 5 M
(ce \(and hence has the ability to write to and retrieve from any device driver memory viz., ) s
_R
S
%%Page: (8) 8
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(cards, handheld devices\).An optional todo is to write a script or userspace socket client t) s
5 731 M
(hat connects to VIRGO mempool driver for these commands.) s
5 709 M
(27. Augment the Linux kernel workqueue implementation \(http://lxr.free-electrons.com/source) s
5 698 M
(/kernel/workqueue.c\) with disk persistence if feasible and doesn't break other subsystems -) s
5 687 M
( this might require additional persistence flags in work_struct and additional #ifdefs in m) s
5 676 M
(ost of the queue functions that write and read from the disk. Related to item 6 above.) s
5 654 M
(28.\(FEATURE - DONE\) VIRGO queue driver with native userspace queue and kernel workqueue-han) s
5 643 M
(dler framework that is optionally used for KingCobra and is invoked through VIRGO cpupoolin) s
5 632 M
(g and memorypooling drivers. \(Schematic in http://sourceforge.net/p/kcobra/code-svn/HEAD/tr) s
5 621 M
(ee/KingCobraDesignNotes.txt and http://sourceforge.net/p/acadpdrafts/code/ci/master/tree/Kr) s
5 610 M
(ishna_iResearch_opensourceproducts_archdiagram.pdf\)) s
5 588 M
(29.\(FEATURE - DONE\) KERNELSPACE EXECUTION ACROSS CLOUD NODES which geographically distribut) s
5 577 M
(e userspace and kernelspace execution creating ) s
5 566 M
(a logical abstraction for a cloudwide virtualized kernel:) s
5 544 M
(        Remote Cloud Node Client) s
5 533 M
(        \(cpupooling, eventnet, memorypooling, cloudfs, queueing - telnet and syscalls clien) s
5 522 M
(ts\)) s
5 511 M
(                |) s
5 500 M
(                |) s
5 489 M
( \(Userspace\)    |) s
5 478 M
(                |-------------------------------------Kernel Sockets-----------------------) s
5 467 M
(--------------> Remote Cloud Node Service) s
5 456 M
(                                                                        \(VIRGO cpupooling, ) s
5 445 M
(memorypooling, cloudfs, queue, KingCobra drivers\)) s
5 434 M
(                                                                                           ) s
5 423 M
(                |) s
5 412 M
(                                                                                           ) s
5 401 M
(                |) s
5 390 M
(                                                                                           ) s
5 379 M
(                |  \(Kernelspace execution\)) s
5 368 M
(                                                                                           ) s
5 357 M
(                |) s
5 346 M
(                                                                                           ) s
5 335 M
(                V) s
5 324 M
(                <-------------------------------------Kernel Sockets-----------------------) s
5 313 M
(----------------------  ) s
5 302 M
(                |) s
5 291 M
(                |) s
5 280 M
(                |) s
5 269 M
( \(Userspace\)    |) s
5 225 M
(30. \(FEATURE - DONE\) VIRGO platform as on 5 May 2014 implements a minimum set of features a) s
5 214 M
(nd kernelsocket commands required for a cloud OS kernel: CPU virtualization\(virgo_clone\), M) s
5 203 M
(emory virtualization\(virgo_malloc,virgo_get,virgo_set,virgo_free\) and a distributed cloud f) s
5 192 M
(ile system\(virgo_open,virgo_close,virgo_read,virgo_write\) on the cloud nodes and thus gives) s
5 181 M
( a logical view of one unified, distributed linux kernel across all cloud nodes that splits) s
5 170 M
( userspace and kernelspace execution across cloud as above.) s
5 148 M
(31. \(FEATURE - DONE\) VIRGO Queue standalone kernel service has been implemented in addition) s
5 137 M
( to paths in schematics above. VIRGO Queue listens on hardcoded port 60000 and enqueues the) s
5 126 M
( incoming requests to VIRGO queue which is serviced by KingCobra:) s
5 104 M
(VIRGO Queue client\(e.g telnet\) ------> VIRGO Queue kernel service ---> Linux Workqueue hand) s
5 93 M
(ler ------> KingCobra) s
5 71 M
(32. \(FEATURE - DONE\) EventNet kernel module service:) s
5 60 M
(VIRGO eventnet client \(telnet\) -------> VIRGO EventNet kernel service -----> EventNet graph) s
5 49 M
( text files) s
5 27 M
(33. \(FEATURE - DONE\) Related to point 22 - Reuse EventNet cloudwide logical time infinite g) s
5 16 M
(raph in AsFer in place of Logical clocks. At present the eventnet driver listens on port 20) s
5 5 M
(000 and writes the edges and vertices files in kernel using vfs_read\(\)/vfs_write\(\). These t) s
_R
S
%%Page: (9) 9
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ext files can then be read by the AsFer code to generate DOT files and visualize the graph ) s
5 731 M
(with graphviz.) s
5 709 M
(34. \(FEATURE - OPTIONAL\) The kernel modules services listening on ports could return a JSON) s
5 698 M
( response when connected instead of plaintext, conforming to REST protocol. Additional opti) s
5 687 M
(ons for protocol buffers which are becoming a standard data interchange format.) s
5 665 M
(35. \(FEATURE-Minimum Functionality DONE\) Pointer Swizzling and Unswizzling of VIRGO address) s
5 654 M
(space pointers to/from VIRGO Unique ID \(VUID\). Presently VIRGO memory system calls implemen) s
5 643 M
(t a basic minimal pointer address translation to unique kmem location identifier.) s
5 610 M
(*******************************************************************************************) s
5 599 M
(***********) s
5 588 M
(                                        CODE COMMIT RELATED NOTES) s
5 577 M
(*******************************************************************************************) s
5 566 M
(***********) s
5 544 M
(VIRGO code commits as on 16/05/2013) s
5 533 M
(-----------------------------------) s
5 522 M
(1. VIRGO cloudexec driver with a listener kernel thread service has been implemented and it) s
5 511 M
( listens on port 10000 on system startup) s
5 500 M
(through /etc/modules load-on-bootup facility) s
5 478 M
(2. VIRGO cloudexec virgo_clone\(\) system call has been implemented that would kernel_connect) s
5 467 M
(\(\) to the VIRGO cloudexec service listening at) s
5 456 M
(port 10000) s
5 434 M
(3. VIRGO cloudexec driver has been split into virgo.h \(VIRGO typedefs\), virgocloudexecsvc.h) s
5 423 M
(\(VIRGO cloudexec service that is invoked by) s
5 412 M
(module_init\(\) of VIRGO cloudexec driver\) and virgo_cloudexec.c \(with module ops definitions) s
5 401 M
(\)) s
5 379 M
(4. VIRGO does not implement SUN RPC interface anymore and now has its own virgo ops.) s
5 357 M
(5. Lot of Kbuild related commits with commented lines for future use have been done viz., t) s
5 346 M
(o integrate VIRGO to Kbuild, KBUILD_EXTRA_SYMBOLS for cross-module symbol reference.) s
5 324 M
(VIRGO code commits as on 20/05/2013) s
5 313 M
(----------------------------------) s
5 302 M
(1. test_virgo_clone.c testcase for sys_virgo_clone\(\) system call works and connections are ) s
5 291 M
(established to VIRGO cloudexec kernel module.) s
5 269 M
(2. Makefile for test_virgo_clone.c and updated buildscript.sh for headers_install for custo) s
5 258 M
(m-built linux.) s
5 236 M
(VIRGO code commits as on 6/6/2013) s
5 225 M
(--------------------------------) s
5 214 M
(1. Message header related bug fixes) s
5 192 M
(VIRGO code commits as on 25/6/2013) s
5 181 M
(---------------------------------) s
5 170 M
(1.telnet to kernel service was tested and found working) s
5 159 M
(2.GFP_KERNEL changed to GFP_ATOMIC in VIRGO cloudexec kernel service) s
5 137 M
(VIRGO code commits as on 1/7/2013) s
5 126 M
(----------------------------------) s
5 115 M
(1. Instead of printing iovec, printing buffer correctly prints the messages) s
5 104 M
(2. wake_up_process\(\) added and function received from virgo_clone\(\) syscall is executed wit) s
5 93 M
(h kernel_thread and results returned to) s
5 82 M
(virgo_clone\(\) syscall client.) s
5 49 M
(commit as on 03/07/2013) s
5 38 M
(-----------------------) s
5 27 M
(PRG loadbalancer preliminary code implemented. More work to be done) s
5 5 M
(commit as on 10/07/2013) s
_R
S
%%Page: (10) 10
%%BeginPageSetup
_S
18 36 translate
/pagenum 10 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-----------------------) s
5 731 M
(Tested PRG loadbalancer read config code through telnet and virgo_clone. VFS code to read f) s
5 720 M
(rom virgo_cloud.conf commented for testing) s
5 698 M
(commits as on 12/07/2013) s
5 687 M
(------------------------) s
5 676 M
(PRG loadbalancer prototype has been completed and tested with test_virgo_clone and telnet a) s
5 665 M
(nd symbol export errors and PRG errors have been fixed) s
5 643 M
(commits as on 16/07/2013) s
5 632 M
(-----------------------) s
5 621 M
(read_virgo_config\(\) and read_virgo_clone_config\(\)\(replica of read_virgo_config\(\)\) have been) s
5 610 M
( implemented and tested to read the virgo_cloud.conf config parameters\(at present the virgo) s
5 599 M
(_cloud.conf has comma separated list of ip addresses. Port is hardcoded to 10000 for unifor) s
5 588 M
(mity across) s
5 577 M
(all nodes\). Thus minimal cloud functionality with config file  support is in place. Todo th) s
5 566 M
(ings include function pointer lookup in kernel service, more parameters to cloud config fil) s
5 555 M
(e if needed, individual configs for virgo_clone\(\) and virgo kernel service, kernel-to-users) s
5 544 M
(pace upcall and execution instead of kernel space, performance tuning etc.,) s
5 522 M
(commits as on 17/07/2013) s
5 511 M
(------------------------) s
5 500 M
(moved read_virgo_config\(\) to VIRGOcloudexec's module_init so that config is read at boot ti) s
5 489 M
(me and exported symbols are set beforehand.) s
5 478 M
(Also commented read_virgo_clone_config\(\) as it is redundant) s
5 456 M
(commits as on 23/07/2013) s
5 445 M
(------------------------) s
5 423 M
(Lack of reflection kind of facilities requires map of function_names to pointers_to_functio) s
5 412 M
(ns to be executed) s
5 401 M
(on cloud has to be lookedup in the map to get pointer to function. This map is not scalable) s
5 390 M
( if number of functions are) s
5 379 M
(in millions and size of the map increases linearly. Also having it in memory is both CPU an) s
5 368 M
(d memory intensive.) s
5 357 M
(Moreover this map has to be synchronized in all nodes for coherency and consistency which i) s
5 346 M
(s another intensive task.) s
5 335 M
(Thus name to pointer function table is at present not implemented. Suitable way to call a f) s
5 324 M
(unction by name of the function) s
5 313 M
(is yet to be found out and references in this topic are scarce.) s
5 291 M
(If parameterIsExecutable is set to 1 the data received from virgo_clone\(\) is not a function) s
5 280 M
( but name of executable) s
5 269 M
(This executable is then run on usermode using call_usermodehelper\(\) which internally takes ) s
5 258 M
(care of queueing the workstruct) s
5 247 M
(and executes the binary as child of keventd and reaps silently. Thus workqueue component of) s
5 236 M
( kernel is indirectly made use of.) s
5 225 M
(This is sometimes more flexible alternative that executes a binary itself on cloud and ) s
5 214 M
(is preferable to clone\(\)ing a function on cloud. Virgo_clone\(\) syscall client or telnet nee) s
5 203 M
(ds to send the message with name of binary.) s
5 181 M
(If parameterIsExecutable is set to 0 then data received from virgo_clone\(\) is name of a fun) s
5 170 M
(ction and is executed in else clause) s
5 159 M
(using dlsym\(\) lookup and pthread_create\(\) in user space. This unifies both call_usermodehel) s
5 148 M
(per\(\) and creating a userspace thread) s
5 137 M
(with a fixed binary which is same for any function. The dlsym lookup requires mangled funct) s
5 126 M
(ion names which need to be sent by ) s
5 115 M
(virgo_clone or telnet. This is far more efficient than a function pointer table. ) s
5 104 M
(        ) s
5 93 M
(call_usermodehelper\(\) Kernel upcall to usermode to exec a fixed binary that would inturn ex) s
5 82 M
(ecute the cloneFunction in userspace) s
5 71 M
(by spawning a pthread. cloneFunction is name of the function and not binary. This clone fun) s
5 60 M
(ction will be dlsym\(\)ed ) s
5 49 M
(and a pthread will be created by the fixed binary. Name of the fixed binary is hardcoded he) s
5 38 M
(rein as ) s
5 27 M
("virgo_kernelupcall_plugin". This fixed binary takes clone function as argument. For testin) s
5 16 M
(g libvirgo.so has been created from) s
5 5 M
(virgo_cloud_test.c and separate build script to build the cloud function binaries has been ) s
_R
S
%%Page: (11) 11
%%BeginPageSetup
_S
18 36 translate
/pagenum 11 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (11) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(added.) s
5 720 M
( - Ka.Shrinivaasan \(alias\) Shrinivas Kannan \(alias\) Srinivasan Kannan) s
5 709 M
(   \(https://sites.google.com/site/kuja27\)) s
5 687 M
(commits as on 24/07/2013) s
5 676 M
(------------------------) s
5 654 M
(test_virgo_clone unit test case updated with mangled function name to be sent to remote clo) s
5 643 M
(ud node. Tested with test_virgo_clone) s
5 632 M
(end-to-end and all features are working. But sometimes kernel_connect hangs randomly \(this ) s
5 621 M
(was observed only today and looks similar) s
5 610 M
(to blocking vs non-blocking problem. Origin unknown\).) s
5 588 M
(- Ka.Shrinivaasan \(alias\) Shrinivas Kannan \(alias\) Srinivasan Kannan) s
5 577 M
(  \(https://sites.google.com/site/kuja27\)) s
5 555 M
(commits as on 29/07/2013) s
5 544 M
(------------------------) s
5 522 M
(Added kernel mode execution in the clone_func and created a sample kernel_thread for a clou) s
5 511 M
(d function. Some File IO logging added to upcall) s
5 500 M
(binaries and parameterIsExecutable has been moved to virgo.h) s
5 478 M
(commits as on 30/07/2013) s
5 467 M
(------------------------) s
5 456 M
(New usecase virgo_cloud_test_kernelspace.ko kernel module has been added. This exports a fu) s
5 445 M
(nction virgo_cloud_test_kernelspace\(\) and is ) s
5 434 M
(accessed by virgo_cloudexec kernel service to spawn a kernel thread that is executed in ker) s
5 423 M
(nel addresspace. This Kernel mode execution) s
5 412 M
(on cloud adds a unique ability to VIRGO cloud platform to seamlessly integrate hardware dev) s
5 401 M
(ices on to cloud and transparently send commands) s
5 390 M
(to them from a remote cloud node through virgo_clone\(\).) s
5 368 M
(Thus above feature adds power to VIRGO cloud to make it act as a single "logical device dri) s
5 357 M
(ver" though devices are in geographically in a remote server.) s
5 335 M
(commits as on 01/08/2013 and 02/08/2013) s
5 324 M
(---------------------------------------) s
5 313 M
(Added Bash shell commandline with -c option for call_usermodehelper upcall clauses to pass ) s
5 302 M
(in remote virgo_clone command message as) s
5 291 M
(arguments to it. Also tried output redirection but it works some times that too with a fata) s
5 280 M
(l kernel panic.) s
5 258 M
(Ideal solutions are :) s
5 247 M
(1. either to do a copy_from_user\(\) for message buffer from user address space \(or\)) s
5 236 M
(2. somehow rebuild the kernel with fd_install\(\) pointing stdout to a VFS file* struct. In o) s
5 225 M
(lder kernels like 2.6.x, there is an fd_install code) s
5 214 M
(with in kmod.c \(___call_usermodehelper\(\)\) which has been redesigned in kernel 3.x versions ) s
5 203 M
(and fd_install has been removed in kmod.c .) s
5 192 M
(3. Create a Netlink socket listener in userspace and send message up from kernel Netlink so) s
5 181 M
(cket.) s
5 159 M
(All the above are quite intensive and time consuming to implement.Moreover doing FileIO in ) s
5 148 M
(usermode helper is strongly discouraged in kernel docs) s
5 126 M
(Since Objective of VIRGO is to virtualize the cloud as single execution "machine", doing an) s
5 115 M
( upcall \(which would run with root abilities\) is) s
5 104 M
(redundant often and kernel mode execution is sufficient. Kernel mode execution with intermo) s
5 93 M
(dule function invocation can literally take over) s
5 82 M
(the entire board in remote machine \(since it can access PCI bus, RAM and all other device c) s
5 71 M
(ards\)) s
5 49 M
(As a longterm design goal, VIRGO can be implemented as a separate protocol itself and sk_bu) s
5 38 M
(ff packet payload from remote machine) s
5 27 M
(can be parsed by kernel service and kernel_thread can be created for the message.) s
5 5 M
(commits as on 05/08/2013:) s
_R
S
%%Page: (12) 12
%%BeginPageSetup
_S
18 36 translate
/pagenum 12 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------) s
5 731 M
(Major commits done for kernel upcall usermode output logging with fd_install redirection to) s
5 720 M
( a VFS file. With this it has become easy for user space to communicate runtime data to Ker) s
5 709 M
(nel space. Also a new strip_control_M\(\) function has been added to strip \\r\\n or " ". ) s
5 687 M
(11 August 2013:) s
5 676 M
(---------------) s
5 665 M
(Open Source Design and Academic Research Notes uploaded to http://sourceforge.net/projects/) s
5 654 M
(acadpdrafts/files/MiscellaneousOpenSourceDesignAndAcademicResearchNotes_2013-08-11.pdf/down) s
5 643 M
(load) s
5 610 M
(commits as on 23 August 2013) s
5 599 M
(----------------------------) s
5 588 M
(New Multithreading Feature added for VIRGO Kernel Service - action item 5 in ToDo list abov) s
5 577 M
(e \(virgo_cloudexec driver module\). All dependent headers changed for kernel threadlocalizin) s
5 566 M
(g global data.) s
5 544 M
(commits as on 1 September 2013) s
5 533 M
(------------------------------) s
5 522 M
(GNU Copyright license and Product Owner Profile \(for identity of license issuer\) have been ) s
5 511 M
(committed. Also Virgo Memory Pooling - virgo_malloc\(\) related initial design notes \(handwri) s
5 500 M
(tten scanned\) have been committed\(http://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/tru) s
5 489 M
(nk/virgo-docs/VIRGO_Memory_Pooling_virgomalloc_initial_design_notes.pdf\)) s
5 467 M
(commits as on 14 September 2013) s
5 456 M
(-------------------------------) s
5 445 M
(Updated virgo malloc design handwritten nodes on kmalloc\(\) and malloc\(\) usage in kernelspac) s
5 434 M
(e and userspace execution mode of virgo_cloudexec service \(http://sourceforge.net/p/virgo-l) s
5 423 M
(inux/code-0/HEAD/tree/trunk/virgo-docs/VIRGO_Memory_Pooling_virgomalloc_design_notes_2_14Se) s
5 412 M
(ptember2013.pdf\). As described in handwritten notes, virgo_malloc\(\) and related system call) s
5 401 M
(s might be needed when a large scale allocation of kernel memory is needed when in kernel s) s
5 390 M
(pace execution mode and large scale userspace memory when in user modes \(function and execu) s
5 379 M
(table modes\). Thus a cloud memory pool both in user and kernel space is possible. ) s
5 357 M
(---------------------------------------) s
5 346 M
(VIRGO virtual addressing) s
5 335 M
(---------------------------------------) s
5 324 M
(VIRGO virtual address is defined with the following datatype:) s
5 302 M
(struct virgo_address) s
5 291 M
({) s
5 280 M
(        int node_id;) s
5 269 M
(        void* addr;) s
5 258 M
(};) s
5 236 M
(VIRGO address translation table is defined with following datatype:) s
5 214 M
(struct virgo_addr_transtable) s
5 203 M
({) s
5 192 M
(        int node_id;) s
5 181 M
(        void* addr;) s
5 170 M
(};) s
5 148 M
(------------------------------------------------) s
5 137 M
(VIRGO memory pooling prototypical implementation) s
5 126 M
(------------------------------------------------) s
5 115 M
(VIRGO memory pooling implementation as per the design notes committed as above is to be imp) s
5 104 M
(lemented as a prototype under separate directory) s
5 93 M
(under drivers/virgo/memorypooling and $LINUX_SRC_ROOT/virgo_malloc. But the underlying code) s
5 82 M
( is more or less similar to drivers/virgo/cpupooling and $LINUX_SRC_ROOT/virgo_clone. ) s
5 60 M
(virgo_malloc\(\) and related syscalls and virgo mempool driver connect to and listen on port ) s
5 49 M
(different from cpupooling driver. Though all these code can be within cpupooling itself, me) s
5 38 M
(mpooling is implemented as separate driver and co-exists with cpupooling on bootup \(/etc/mo) s
5 27 M
(dules\). This enables clear demarcation of functionalities for CPU and Memory virtualization) s
5 16 M
(.) s
_R
S
%%Page: (13) 13
%%BeginPageSetup
_S
18 36 translate
/pagenum 13 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Commits as on 17 September 2013) s
5 731 M
(-------------------------------) s
5 720 M
(Initial untested prototype code - virgo_malloc and virgo mempool driver - for VIRGO Memory ) s
5 709 M
(Pooling has been committed - copied and modified from virgo_clone client and kernel driver ) s
5 698 M
(service. ) s
5 676 M
(Commits as on 19 September 2013) s
5 665 M
(-------------------------------) s
5 654 M
(3.7.8 Kernel full build done and compilation errors in VIRGO malloc and mempool driver code) s
5 643 M
( and more functions code added) s
5 621 M
(Commits as on 23 September 2013) s
5 610 M
(-------------------------------) s
5 599 M
(Updated virgo_malloc.c with two functions, int_to_str\(\) and addr_to_str\(\), using kmalloc\(\) ) s
5 588 M
(with full kernel re-build.) s
5 577 M
(\(Rather a re-re-build because some source file updates in previous build got deleted someho) s
5 566 M
(w mysteriously. This could be related to Cybercrime issues mentioned in https://sourceforge) s
5 555 M
(.net/p/usb-md/code-0/HEAD/tree/USBmd_notes.txt \)) s
5 533 M
(Commits as on 24 September 2013) s
5 522 M
(-------------------------------) s
5 511 M
(Updated syscall*.tbl files, staging.sh, Makefiles for virgo_malloc\(\),virgo_set\(\),virgo_get\() s
5 500 M
(\) and virgo_free\(\) memory pooling syscalls. New testcase test_virgo_malloc for virgo_malloc) s
5 489 M
(\(\), virgo_set\(\), virgo_get\(\), virgo_free\(\) has been added to repository. This testcase migh) s
5 478 M
(t have to be updated if return type and args to virgo_malloc+ syscalls are to be changed.) s
5 456 M
(Commits as on 25 September 2013) s
5 445 M
(-------------------------------) s
5 434 M
(All build related errors fixed after kernel rebuild some changes made to function names to ) s
5 423 M
(reflect their) s
5 412 M
(names specific to memory pooling. Updated /etc/modules also has been committed to repositor) s
5 401 M
(y.) s
5 379 M
(Commits as on 26 September 2013) s
5 368 M
(-------------------------------) s
5 357 M
(Circular dependency error in standalone build of cpu pooling and memory pooling drivers fix) s
5 346 M
(ed and) s
5 335 M
(datatypes and declarations for CPU pooling and Memory Pooling drivers have been segregated ) s
5 324 M
(into respective header files \(virgo.h and) s
5 313 M
(virgo_mempool.h with corresponding service header files\) to avoid any dependency error.) s
5 291 M
(Commits as on 27 September 2013) s
5 280 M
(-------------------------------) s
5 269 M
(Major commits for Memory Pooling Driver listen port change and parsing VIRGO memory pooling) s
5 258 M
( commands have been done.) s
5 236 M
(Commits as on 30 September 2013) s
5 225 M
(-------------------------------) s
5 214 M
(New parser functions added for parameter parsing and initial testing on virgo_malloc\(\) work) s
5 203 M
(s with telnet client with logs in test_logs/) s
5 181 M
(Commits as on 1 October 2013) s
5 170 M
(-----------------------------) s
5 159 M
(Removed strcpy in virgo_malloc as ongoing bugfix for buffer truncation in syscall path.) s
5 137 M
(Commits as on 7 October 2013) s
5 126 M
(----------------------------) s
5 115 M
(Fixed the buffer truncation error from virgo_malloc syscall to mempool driver service which) s
5 104 M
( was caused by) s
5 93 M
(sizeof\(\) for a char*. BUF_SIZE is now used for size in both syscall client and mempool kern) s
5 82 M
(el service.) s
5 60 M
(Commits as on 9 October 2013 and 10 October 2013) s
5 49 M
(------------------------------------------------) s
5 38 M
(Mempool driver kernelspace virgo mempool ops have been rewritten due to lack of facilities ) s
5 27 M
(to return a) s
5 16 M
(value from kernel thread function. Since mempool service already spawns a kthread, this see) s
5 5 M
(ms to be sufficient. Also the iov.iov_len in virgo_malloc has been changed from BUF_SIZE to) s
_R
S
%%Page: (14) 14
%%BeginPageSetup
_S
18 36 translate
/pagenum 14 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( strlen\(buf\) since BUF_SIZE) s
5 731 M
(causes the kernel socket to block as it waits for more data to be sent.) s
5 709 M
(Commits as on 11 October 2013) s
5 698 M
(-----------------------------) s
5 687 M
(sscanf format error for virgo_cloud_malloc\(\) return pointer address and sock_release\(\) null) s
5 676 M
( pointer exception has been rectified.) s
5 665 M
(Added str_to_addr\(\) utility function.) s
5 643 M
(Commits as on 14 October 2013 and 15 October 2013) s
5 632 M
(-------------------------------------------------) s
5 621 M
(Updated todo list.) s
5 599 M
(Rewritten virgo_cloud_malloc\(\) syscall with:) s
5 588 M
(- mutexed virgo_cloud_malloc\(\) loop) s
5 577 M
(- redefined virgo address translation table in virgo_mempool.h) s
5 566 M
(- str_to_addr\(\): removed \(void**\) cast due to null sscanf though it should have worked) s
5 544 M
(Commits as on 18 October 2013) s
5 533 M
(------------------------------) s
5 522 M
(Continued debugging of null sscanf - added str_to_addr2\(\) which uses simple_strtoll\(\) kerne) s
5 511 M
(l function) s
5 500 M
(for scanning pointer as long long from string and casting it to void*. Also more %p qualifi) s
5 489 M
(ers where) s
5 478 M
(added in str_to_addr\(\) for debugging.) s
5 456 M
(Based on latest test_virgo_malloc run, simple_strtoll\(\) correctly parses the address string) s
5 445 M
( into a long long base 16 and then is reinterpret_cast to void*. Logs in test/) s
5 423 M
(Commits as on 21 October 2013) s
5 412 M
(-----------------------------) s
5 401 M
(Kern.log for testing after vtranstable addr fix with simple_strtoll\(\) added to repository a) s
5 390 M
(nd still the other %p qualifiers do not work and only simple_strtoll\(\) parses the address c) s
5 379 M
(orrectly. ) s
5 357 M
(Commits as on 24 October 2013) s
5 346 M
(-----------------------------) s
5 335 M
(Lot of bugfixes made to virgo_malloc.c for scanning address into VIRGO transtable and size ) s
5 324 M
(computation. Testcase test_virgo_malloc.c has also been modified to do reinterpret cast of ) s
5 313 M
(long long into \(struct virgo_address*\) and corresponding test logs have been added to repos) s
5 302 M
(itory under virgo_malloc/test. ) s
5 280 M
(Though the above sys_virgo_malloc\(\) works, the return value is a kernel pointer if the virg) s
5 269 M
(o_malloc executes in the Kernel mode which is more likely than User mode \(call_usermodehelp) s
5 258 M
(er which is circuitous\). Moreover copy_from_user\(\) or copy_to_user\(\) may not be directly us) s
5 247 M
(eful here as this is an address allocation routine. The long long reinterpret cast obfuscat) s
5 236 M
(es the virgo_address\(User or Kernel\) as a large integer which is a unique id for the alloca) s
5 225 M
(ted memory on cloud. Initial testing of sys_virgo_set\(\) causes a Kernel Panic as usual prob) s
5 214 M
(ably due to direct access of struct virgo_address*. Alternatives are to use only long long ) s
5 203 M
(for allocation unique-id everywhere or do copy_to_user\(\) or copy_from_user\(\) of the address) s
5 192 M
( on a user supplied buffer. Also vtranstable can be made into a bucketed hash table that ma) s
5 181 M
(ps each alloc_id to a chained virgo malloc chunks than the present sequential addressing wh) s
5 170 M
(ich is more similar to open addressing.) s
5 148 M
(Commits as on 25 October 2013) s
5 137 M
(----------------------------) s
5 126 M
(virgo_malloc.c has been rewritten by adding a userspace __user pointer to virgo_get\(\) and v) s
5 115 M
(irgo_set\(\) syscalls which are internally copied with copy_from_user\(\) and copy_to_user\(\) ke) s
5 104 M
(rnel function to get and set userspace from kernelspace.Header file syscalls.h has been upd) s
5 93 M
(ated with changed syscalls prototypes.Two functions have been added to map a VIRGO address ) s
5 82 M
(to a unique virgo identifier and viceversa for abstracting hardware addresses from userspac) s
5 71 M
(e as mentioned in previous commit notes. VIRGO cloud mempool kernelspace driver has been up) s
5 60 M
(dated to use virgo_mempool_args* instead of void* and VIRGO cloudexec mempool driverhas bee) s
5 49 M
(n updated accordingly during intermodule invocation.The virgo_malloc syscall client has bee) s
5 38 M
(n updated to modified signatures and return types for all mempool alloc,get,set,free syscal) s
5 27 M
(ls.) s
5 5 M
(Commits as on 29 October 2013) s
_R
S
%%Page: (15) 15
%%BeginPageSetup
_S
18 36 translate
/pagenum 15 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (15) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-----------------------------) s
5 731 M
(Miscellaneous ongoing bugfixes for virgo_set\(\) syscall error in copy_from_user\(\).) s
5 709 M
(Commits as on 2 November 2013) s
5 698 M
(-----------------------------) s
5 687 M
(Due to an issue which corrupts the kernel memory, presently telnet path to VIRGO mempool dr) s
5 676 M
(iver has been) s
5 665 M
(tested after commits on 31 October 2013 and 1 November 2013 and is working but again there ) s
5 654 M
(is an issue in kstrtoul\(\) that returns the wrong address in virgo_cloud_mempool_kernelspace) s
5 643 M
(.ko that gives the address for) s
5 632 M
(data to set. ) s
5 610 M
(Commits as on 6 November 2013) s
5 599 M
(-----------------------------) s
5 588 M
(New parser function virgo_parse_integer\(\) has been added to virgo_cloud_mempool_kernelspace) s
5 577 M
( driver module which is carried over from) s
5 566 M
(lib/kstrtox.c and modified locally to add an if clause to discard quotes and unquotes. With) s
5 555 M
( this the telnet path commands for virgo_malloc\(\)) s
5 544 M
(and virgo_set\(\) are working. Today's kern.log has been added to repository in test_logs/.) s
5 522 M
(Commits as on 7 November 2013) s
5 511 M
(------------------------------) s
5 500 M
(In addition to virgo_malloc and virgo_set, virgo_get is also working through telnet path af) s
5 489 M
(ter today's commit for "virgodata:" prefix in virgo_cloud_mempool_kernelspace.ko. This pref) s
5 478 M
(ix is needed to differentiate data and address so that toAddressString\(\) can be invoked to ) s
5 467 M
(sprintf\(\) the address in virgo_cloudexec_mempool.ko. Also mempool command parser has been u) s
5 456 M
(pdated to strcmp\(\) virgo_cloud_get command also. ) s
5 434 M
(Commits as on 11 November 2013) s
5 423 M
(------------------------------) s
5 412 M
(More testing done on telnet path for virgo_malloc, virgo_set and virgo_get commands which w) s
5 401 M
(ork correctly. But there seem to be unrelated) s
5 390 M
(kmem_cache_trace_alloc panics that follow each successful virgo command execution. kern.log) s
5 379 M
( for this has been added to repository.) s
5 357 M
(Commits as on 22 November 2013) s
5 346 M
(------------------------------) s
5 335 M
(More testing done on telnet path for virgo_malloc,virgo_set and virgo_set after commenting ) s
5 324 M
(kernel socket shutdown code in the VIRGO cloudexec) s
5 313 M
(mempool sendto code. Kernel panics do not occur after commenting kernel socket shutdown.) s
5 291 M
(Commits as on 2 December 2013) s
5 280 M
(-----------------------------) s
5 269 M
(Lots of testing were done on telnet path and syscall path connection to VIRGO mempool drive) s
5 258 M
(r and screenshots for working telnet path \(virgo_malloc, virgo_set and virgo_get\) have been) s
5 247 M
( committed to repository. Intriguingly, the syscall path is suddenly witnessing series of b) s
5 236 M
(roken pipe erros, blocking errors etc., which are mostly Heisenbugs. ) s
5 214 M
(Commits as on 5 December 2013) s
5 203 M
(------------------------------) s
5 192 M
(More testing on system call path done for virgo_malloc\(\), virgo_set\(\) and virgo_get\(\) syste) s
5 181 M
(m calls with test_virgo_malloc.c. All three syscalls work in syscall path after lot of bugf) s
5 170 M
(ixes. Kern.log that has logs for allocating memory in remote cloud node with virgo_malloc, ) s
5 159 M
(sets data "test_virgo_malloc_data" with virgo_set and retrieves data with virgo_get.) s
5 126 M
(VIRGO version 12.0 tagged.) s
5 104 M
(Commits as on 12 March 2014) s
5 93 M
(---------------------------) s
5 82 M
(Initial VIRGO queueing driver implemented that flips between two internal queues: 1\) a nati) s
5 71 M
(ve queue implemented locally and 2\) wrapper around linux kernel's workqueue facility 3\) pus) s
5 60 M
(h_request\(\) modified to pass on the request data to the workqueue handler using container_o) s
5 49 M
(f on a wrapper) s
5 38 M
(structure virgo_workqueue_request.) s
5 16 M
(Commits as on 20 March 2014) s
5 5 M
(---------------------------) s
_R
S
%%Page: (16) 16
%%BeginPageSetup
_S
18 36 translate
/pagenum 16 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (16) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- VIRGO queue with additional boolean flags for its use as KingCobra queue) s
5 731 M
(- KingCobra kernel space driver that is invoked by the VIRGO workqueue handler) s
5 709 M
(Commits as on 30 March 2014) s
5 698 M
(----------------------------) s
5 687 M
(- VIRGO mempool driver has been augmented with use_as_kingcobra_service flags in CPU poolin) s
5 676 M
(g and Memory pooling drivers) s
5 654 M
(Commits as on 6 April 2014) s
5 643 M
(--------------------------) s
5 632 M
(- VIRGO mempool driver recvfrom\(\) function's if clause for KingCobra has been updated for R) s
5 621 M
(EQUEST header formatting mentioned in KingCobra design notes) s
5 599 M
(Commits as on 7 April 2014) s
5 588 M
(--------------------------) s
5 577 M
(- generate_logical_timestamp\(\) function has been implemented in VIRGO mempool driver that g) s
5 566 M
(enerates timestamps based on 3 boolean flags. At present machine_timestamp is generated and) s
5 555 M
( prepended to the request to be pushed to VIRGO queue driver and then serviced by KingCobra) s
5 544 M
(.) s
5 522 M
(Commits as on 25 April 2014) s
5 511 M
(---------------------------) s
5 500 M
(- client ip address in VIRGO mempool recvfrom KingCobra if clause is converted to host byte) s
5 489 M
( order from network byte order with ntohl\(\) ) s
5 467 M
(Commits as on 5 May 2014) s
5 456 M
(-------------------------) s
5 445 M
(- Telnet path commands for VIRGO cloud file system - virgo_cloud_open\(\), virgo_cloud_read\(\)) s
5 434 M
(, virgo_cloud_write\(\), virgo_cloud_close\(\) has been implemented and test logs have been add) s
5 423 M
(ed to repository \(drivers/virgo/cloudfs/ and cloudfs/testlogs\) and kernel upcall path for p) s
5 412 M
(aramIsExecutable=0) s
5 390 M
(Commits as on 7 May 2014) s
5 379 M
(-------------------------) s
5 368 M
(- Bugfixes to tokenization in kernel upcall plugin with strsep\(\) for args passed on to the ) s
5 357 M
(userspace) s
5 335 M
(Commits as on 8 May 2014) s
5 324 M
(------------------------) s
5 313 M
(- Bugfixes to virgo_cloud_fs.c for kernel upcall \(parameterIsExecutable=0\) and with these t) s
5 302 M
(he kernel to userspace upcall and writing to a file in userspace \(virgofstest.txt\) works. L) s
5 291 M
(ogs and screenshots for this are added to repository in test_logs/) s
5 269 M
(Commits as on 6 June 2014) s
5 258 M
(-------------------------) s
5 247 M
(- VIRGO File System Calls Path implementation has been committed. Lots of Linux Full Build ) s
5 236 M
(compilation errors fixed and new integer parsing functionality added \(similar to driver mod) s
5 225 M
(ules\).  For the timebeing all syscalls invoke loadbalancer. This may be further optimized w) s
5 214 M
(ith a sticky flag to remember the first invocation which might be usually virgo_open syscal) s
5 203 M
(l to get the VFS descriptor that is used in subsequent syscalls.) s
5 181 M
(Commits as on 3 July 2014) s
5 170 M
(--------------------------) s
5 159 M
(- More testing and bugfixes for VIRGO File System syscalls have been done. virgo_write\(\) ca) s
5 148 M
(uses kernel panic.) s
5 126 M
(7 July 2014 - virgo_write\(\) kernel panic notes:) s
5 115 M
(----------------------------------------------) s
5 104 M
(warning within http://lxr.free-electrons.com/source/arch/x86/kernel/smp.c#L121:) s
5 82 M
(static void native_smp_send_reschedule\(int cpu\)) s
5 71 M
({) s
5 60 M
(        if \(unlikely\(cpu_is_offline\(cpu\)\)\) {) s
5 49 M
(                WARN_ON\(1\);) s
5 38 M
(                return;) s
5 27 M
(        }) s
5 16 M
(        apic->send_IPI_mask\(cpumask_of\(cpu\), RESCHEDULE_VECTOR\);) s
5 5 M
(}) s
_R
S
%%Page: (17) 17
%%BeginPageSetup
_S
18 36 translate
/pagenum 17 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (17) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(This is probably a fixed kernel bug in <3.7.8 but recurring in 3.7.8:) s
5 720 M
(- http://lkml.iu.edu/hypermail/linux/kernel/1205.3/00653.html) s
5 709 M
(- http://www.kernelhub.org/?p=3&msg=74473&body_id=72338) s
5 698 M
(- http://lists.openwall.net/linux-kernel/2012/09/07/22) s
5 687 M
(- https://bugzilla.kernel.org/show_bug.cgi?id=54331) s
5 676 M
(- https://bbs.archlinux.org/viewtopic.php?id=156276) s
5 643 M
(Commits as on 29 July 2014) s
5 632 M
(---------------------------) s
5 621 M
(All VIRGO drivers\(cloudfs, queuing, cpupooling and memorypooling\) have been built on 3.15.5) s
5 610 M
( kernel with some Makefile changes for ccflags and paths) s
5 588 M
(--------------------------------------------------------------------------------------) s
5 577 M
(Commits as on 17 August 2014) s
5 566 M
(--------------------------------------------------------------------------------------) s
5 555 M
(\(FEATURE - DONE\) VIRGO Kernel Modules and System Calls major rewrite for 3.15.5 kernel - 17) s
5 544 M
( August 2014) s
5 533 M
(--------------------------------------------------------------------------------------) s
5 522 M
(1. VIRGO config files have been split into /etc/virgo_client.conf and /etc/virgo_cloud.conf) s
5 511 M
( to delink the cloud client and kernel service) s
5 500 M
(config parameters reading and to do away with oft occurring symbol lookup errors and multip) s
5 489 M
(le definition errors for num_cloud_nodes and) s
5 478 M
(node_ip_addrs_in_cloud - these errors are frequent in 3.15.5 kernel than 3.7.8 kernel. ) s
5 456 M
(2. Each VIRGO module and system call now reads the config file independent of others - ther) s
5 445 M
(e is a read_virgo_config_<module>_<client_or_service>\(\) function variant for each driver an) s
5 434 M
(d system call. Though at present smacks of a replicated code, in future the config reads fo) s
5 423 M
(r each component \(system call or module\) might vary significantly depending on necessities.) s
5 401 M
(3. New kernel module config has been added in drivers/virgo. This is for future prospective) s
5 390 M
( use as a config export driver that can) s
5 379 M
(be looked up by any other VIRGO module for config parameters.) s
5 357 M
(4. include/linux/virgo_config.h has the declarations for all the config variables declared ) s
5 346 M
(within each of the VIRGO kernel modules.) s
5 324 M
(5. Config variables in each driver and system call have been named with prefix and suffix t) s
5 313 M
(o differentiate the module and/or system call it serves.) s
5 291 M
(6. In geographically distributed cloud virgo_client.conf has to be in client nodes and virg) s
5 280 M
(o_cloud.conf has to be in cloud nodes. For VIRGO Queue - KingCobra REQUEST-REPLY peer-to-pe) s
5 269 M
(er messaging system same node can have virgo_client.conf and virgo_cloud.conf.) s
5 247 M
(7. Above segregation largely simplifies the build process as each module and system call is) s
5 236 M
( independently built without need for a symbol to be exported from other module by pre-load) s
5 225 M
(ing it.) s
5 214 M
( ) s
5 203 M
(8. VIRGO File system driver and system calls have been tested with above changes and the vi) s
5 192 M
(rgo_open\(\),virgo_read\(\) and virgo_write\(\) calls work with much less crashes and freeze prob) s
5 181 M
(lems compared to 3.7.8 \(some crashes in VIRGO FS syscalls in 3.7.8 where already reported k) s
5 170 M
(ernel bugs which seem to have been fixed in 3.15.5\). Today's kern.log test logs have been c) s
5 159 M
(ommitted to repository.) s
5 137 M
(---------------------------------------------) s
5 126 M
(Committed as on 23 August 2014) s
5 115 M
(---------------------------------------------) s
5 104 M
(Commenting use_as_kingcobra_service if clauses temporarily as disabling also doesnot work a) s
5 93 M
(nd only commenting the block) s
5 82 M
(works for VIRGO syscall path. Quite weird as to how this relates to the problem. As this is) s
5 71 M
( a heisenbug further testing is) s
5 60 M
(difficult and sufficient testing has been done with logs committed to repository. Probably ) s
5 49 M
(a runtime symbol lookup for kingcobra) s
5 38 M
(causes the freeze.) s
5 27 M
(For forwarding messages to KingCobra and VIRGO queues, cpupooling driver is sufficient whic) s
5 16 M
(h also has the use_as_kingcobra_service clause.) s
_R
S
%%Page: (18) 18
%%BeginPageSetup
_S
18 36 translate
/pagenum 18 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (18) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(---------------------------------------------) s
5 731 M
(Committed as on 23 August 2014 and 24 August 2014) s
5 720 M
(---------------------------------------------) s
5 709 M
(As cpupooling driver has the same crash problem with kernel_accept\(\) when KingCobra has ben) s
5 698 M
(n enabled, KingCobra clauses have been commented in both cpupooling and memorypooling drive) s
5 687 M
(rs. Instead queueing driver has been updated with a kernel service infrastructure to accept) s
5 676 M
( connections at port 60000. With this following paths are available for KingCobra requests:) s
5 654 M
(        VIRGO cpupooling or memorypooling ====> VIRGO Queue =====> KingCobra) s
5 632 M
(                                        \(or\)) s
5 621 M
(        VIRGO Queue kernel service ===========================> KingCobra) s
5 599 M
(-----------------------------------------------) s
5 588 M
(Committed as on 26 August 2014) s
5 577 M
(-----------------------------------------------) s
5 566 M
(- all kmallocs have been made into GFP_ATOMIC instead of GFP_KERNEL) s
5 555 M
(- moved some kingcobra related header code before kernel_recvmsg\(\)) s
5 544 M
(- some header file changes for set_fs\(\)) s
5 522 M
(This code has been tested with modified code for KingCobra and the standalone) s
5 511 M
(kernel service that accepts requests from telnet directly at port 60000, pushes to virgo_qu) s
5 500 M
(eue) s
5 489 M
(and is handled to invoke KingCobra servicerequest kernelspace function, works) s
5 478 M
(\(the kernel_recvmsg\(\) crash was most probably due to Read-Only filesystem -errno printed is) s
5 467 M
( -30\)) s
5 445 M
(---------------------------------------------------------------) s
5 434 M
(VIRGO version 14.9.9 has been release tagged on 9 September 2014) s
5 423 M
(---------------------------------------------------------------) s
5 401 M
(--------------------------------------------------------) s
5 390 M
(Committed as on 26 November 2014) s
5 379 M
(--------------------------------------------------------) s
5 368 M
(New kernel module cloudsync has been added to repository under drivers/virgo that can be us) s
5 357 M
(ed for synchronization\(lock\(\) and unlock\(\)\) necessities in VIRGO cloud. Presently Bakery Al) s
5 346 M
(gorithm has been implemented.) s
5 324 M
(--------------------------------------------------------) s
5 313 M
(Committed as on 27 November 2014) s
5 302 M
(--------------------------------------------------------) s
5 291 M
(virgo_bakery.h bakery_lock\(\) has been modified to take 2 parameters - thread_id and number ) s
5 280 M
(of for loops \(1 or 2\)) s
5 258 M
(--------------------------------------------------------) s
5 247 M
(Committed as on 2 December 2014) s
5 236 M
(--------------------------------------------------------) s
5 225 M
(VIRGO bakery algorithm implementation has been rewritten with some bugfixes. Sometimes ther) s
5 214 M
(e are soft lockup errors due to looping in kernel time durations for which are kernel build) s
5 203 M
( configurable.) s
5 181 M
(--------------------------------------------------------------------) s
5 170 M
(Committed as on 17 December 2014) s
5 159 M
(--------------------------------------------------------------------) s
5 148 M
(Initial code commits for VIRGO EventNet kernel module service:) s
5 137 M
(--------------------------------------------------------------) s
5 126 M
(1.EventNet Kernel Service listens on port 20000) s
5 104 M
(2.It receives eventnet log messages from VIRGO cloud nodes and writes the log messages ) s
5 93 M
(after parsing into two text files /var/log/eventnet/EventNetEdges.txt and ) s
5 82 M
(/var/log/eventnet/EventNetVertices.txt by VFS calls) s
5 60 M
(3.These text files can then be processed by the EventNet implementations in AsFer \(python p) s
5 49 M
(ygraph and ) s
5 38 M
(C++ boost::graph based\)) s
5 16 M
(4.Two new directories virgo/utils and virgo/eventnet have been added.    ) s
_R
S
%%Page: (19) 19
%%BeginPageSetup
_S
18 36 translate
/pagenum 19 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (19) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(5.virgo/eventnet has the new VIRGO EventNet kernel module service implementation that liste) s
5 731 M
(ns on ) s
5 720 M
(port 20000.) s
5 698 M
(6.virgo/utils is the new generic utilities driver that has a virgo_eventnet_log\(\) ) s
5 687 M
(exported function which connects to EventNet kernel service and sends the vertex and edge e) s
5 676 M
(ventnet) s
5 665 M
(log messages which are parsed by kernel service and written to the two text files above.) s
5 643 M
(7.EventNet log messages have two formats:) s
5 632 M
(   - Edge message - "eventnet_edgemsg#<id>#<from_event>#<to_event>") s
5 621 M
(   - Vertex message - "eventnet_vertextmsg#<id>-<partakers csv>-<partaker conversations csv) s
5 610 M
(>") s
5 588 M
(8.The utilities driver Module.symvers have to be copied to any driver which are ) s
5 577 M
(then merged with the symbol files of the corresponding driver. Target clean has to be comme) s
5 566 M
(nted while) s
5 555 M
(building the unified Module.symvers because it erases symvers carried over earlier.) s
5 533 M
(9.virgo/utils driver can be populated with all necessary utility exported functions that mi) s
5 522 M
(ght be needed) s
5 511 M
(in other VIRGO drivers.) s
5 489 M
(10.Calls to virgo_eventnet_log\(\) have to be #ifdef guarded as this is quite network intensi) s
5 478 M
(ve.) s
5 456 M
(------------------------------------------------------------------) s
5 445 M
(Commits as on 18 December 2014) s
5 434 M
(------------------------------------------------------------------) s
5 423 M
(Miscellaneous bugfixes,logs and screenshot) s
5 401 M
(- virgo_cloudexec_eventnet.c - eventnet messages parser errors and eventnet_func bugs fixed) s
5 390 M
(- virgo_cloud_eventnet_kernelspace.c - filp_open\(\) args updated due to vfs_write\(\) kernel p) s
5 379 M
(anics. The vertexmessage vfs_write is done after looping through the vertice textfile and a) s
5 368 M
(ppending the conversation to the existing vertex.Some more code has to be added.) s
5 357 M
(- VIRGO EventNet build script updated for copying Module.symvers from utils driver for merg) s
5 346 M
(ing with eventnet Module.symvers during Kbuild) s
5 335 M
(- Other build generated sources and kernel objects) s
5 324 M
(- new testlogs directory with screenshot for edgemsg sent to EventNet kernel service and ke) s
5 313 M
(rn.log with previous history for vfs_write\(\) panics due to permissions and the logs for wor) s
5 302 M
(king filp_open\(\) fixed version) s
5 291 M
(- vertex message update ) s
5 269 M
(------------------------------------------------------------------) s
5 258 M
(Commits as on 2,3,4 January 2015) s
5 247 M
(------------------------------------------------------------------) s
5 236 M
(- fixes for virgo eventnet vertex and edge message text file vfs_write\(\) errors) s
5 225 M
(- kern.logs and screenshots) s
5 203 M
(------------------------------------------------------------------) s
5 192 M
(VIRGO version 15.1.8 release tagged on 8 January 2015) s
5 181 M
(------------------------------------------------------------------) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(--------) s
5 137 M
(Commits as on 3 March 2015 - Initial commits for Kernel Analytics Module which reads the /e) s
5 126 M
(tc/virgo_kernel_analytics.conf config \(and\) VIRGO memorypooling Key-Value Store Architectur) s
5 115 M
(e Diagram) s
5 104 M
(-------------------------------------------------------------------------------------------) s
5 93 M
(---------) s
5 82 M
(- Architecture of Key-Value Store in memorypooling \(virgo_malloc,virgo_get,virgo_set,virgo_) s
5 71 M
(free\) has been) s
5 60 M
(uploaded as a diagram at http://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/trunk/virgo-) s
5 49 M
(docs/VIRGOLinuxKernel_KeyValueStore_and_Modules_Interaction.jpg) s
5 27 M
(- new kernel_analytics driver for AsFer <=> VIRGO+USBmd+KingCobra interface has been added.) s
5 16 M
(- virgo_kernel_analytics.conf having csv\(s\) of key-value pairs of analytics variables is se) s
5 5 M
(t by AsFer or any other Machine Learning code.  With this VIRGO Linux Kernel is endowed wit) s
_R
S
%%Page: (20) 20
%%BeginPageSetup
_S
18 36 translate
/pagenum 20 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (20) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(h abilities to dynamically evolve than being just a platform for user code. Implications ar) s
5 731 M
(e huge - for example, a config variable "MaxNetworkBandwidth=255" set by the ML miner in us) s
5 720 M
(erspace based on a Perceptron or Logistic Regression executed on network logs can be read b) s
5 709 M
(y a kernel module that limits the network traffic to 255Mbps. Thus kernel dynamically chang) s
5 698 M
(es behaviour. ) s
5 687 M
(- kernel_analytics Driver build script has been added) s
5 665 M
(--------------------------------------------------------------------------) s
5 654 M
(Commits as on 6 March 2015) s
5 643 M
(--------------------------------------------------------------------------) s
5 632 M
(- code has been added in VIRGO config module to import EXPORTed kernel_analytics config key) s
5 621 M
(-pair array) s
5 610 M
(set by Apache Spark \(mined from Uncomplicated Fire Wall logs\) and manually and write to ker) s
5 599 M
(n.log.) s
5 577 M
(--------------------------------------------------------------------------) s
5 566 M
(NeuronRain version 15.6.15 release tagged) s
5 555 M
(--------------------------------------------------------------------------) s
5 533 M
(--------------------------------------------------------------------------) s
5 522 M
(Portability to linux kernel 4.0.5) s
5 511 M
(--------------------------------------------------------------------------) s
5 500 M
(The VIRGO kernel module drivers are based on kernel 3.15.5. With kernel 4.0.5 kernel which ) s
5 489 M
(is the latest following ) s
5 478 M
(compilation and LD errors occur - this is on cloudfs VIRGO File System driver :) s
5 467 M
(- msghdr has to be user_msghdr for iov and iov_len as there is a segregation of msghdr) s
5 456 M
(- modules_install throws an error in scripts/Makefile.modinst while overwriting already ins) s
5 445 M
(talled module) s
5 423 M
(-------------------------------------------------------------------------) s
5 412 M
(Commits as on 9 July 2015) s
5 401 M
(-------------------------------------------------------------------------) s
5 390 M
(VIRGO cpupooling driver has been ported to linux kernel 4.0.5 with msghdr changes as mentio) s
5 379 M
(ned previously) s
5 368 M
(with kern.log for VIRGO cpupooling driver invoked in parameterIsExecutable=2 \(kernel module) s
5 357 M
( invocation\)) s
5 346 M
(added in testlogs) s
5 324 M
(-------------------------------------------------------------------------) s
5 313 M
(Commits as on 10,11 July 2015) s
5 302 M
(-------------------------------------------------------------------------) s
5 291 M
(VIRGO Kernel Modules:) s
5 280 M
(- memorypooling) s
5 269 M
(- cloudfs) s
5 258 M
(- utils) s
5 247 M
(- config) s
5 236 M
(- kernel_analytics) s
5 225 M
(- cloudsync) s
5 214 M
(- eventnet) s
5 203 M
(- queuing ) s
5 192 M
(along with cpupooling have been ported to Linux Kernel 4.0.5 - Makefile and header files ha) s
5 181 M
(ve been) s
5 170 M
(updated wherever required.) s
5 148 M
(-------------------------------------------------------------------------) s
5 137 M
(Commits as on 20,21,22 July 2015) s
5 126 M
(-------------------------------------------------------------------------) s
5 115 M
(Due to SourceForge Storage Disaster\(http://sourceforge.net/blog/sourceforge-infrastructure-) s
5 104 M
(and-service-restoration/\),) s
5 93 M
(the github replica of VIRGO is urgently updated with some important changes for msg_iter,io) s
5 82 M
(vec) s
5 71 M
(etc., in 4.0.5 kernel port specifically for KingCobra and VIRGO Queueing. These have to be ) s
5 60 M
(committed to SourceForge Krishna_iResearch) s
5 49 M
(repository at http://sourceforge.net/users/ka_shrinivaasan once SourceForge repos are resto) s
5 38 M
(red.) s
5 27 M
(Time to move on to the manufacturing hub? GitHub ;-\)) s
5 16 M
(-------------------------------) s
5 5 M
(VIRGO Queueing Kernel Module Linux Kernel 4.0.5 port:) s
_R
S
%%Page: (21) 21
%%BeginPageSetup
_S
18 36 translate
/pagenum 21 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (21) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-----------------------------------------------------) s
5 731 M
(- msg_iter is used instead of user_msghdr) s
5 720 M
(- kvec changed to iovec) s
5 709 M
(- Miscellaneous BUF_SIZE related changes) s
5 698 M
(- kern.logs for these have been added to testlogs) s
5 687 M
(- Module.symvers has been recreated with KingCobra Module.symvers from 4.0.5 KingCobra buil) s
5 676 M
(d) s
5 665 M
(- clean target commented in build script as it wipes out Module.symvers) s
5 654 M
(- updated .ko and .mod.c) s
5 643 M
(-------------------------------) s
5 632 M
(KingCobra Module Linux Kernel 4.0.5 port) s
5 621 M
(-----------------------------------------------------) s
5 610 M
(- vfs_write\(\) has a problem in 4.0.5) s
5 599 M
(- the filp_open\(\) args and flags which were working in 3.15.5 cause a) s
5 588 M
(kernel panic implicitly and nothing was written to logs) s
5 577 M
(- It took a very long time to figure out the reason to be vfs_write and filp_open) s
5 566 M
(- O_CREAT, O_RDWR and O_LARGEFILE cause the panic and only O_APPEND is working, but) s
5 555 M
(does not do vfs_write\(\). All other VIRGO Queue + KingCobra functionalities work viz.,) s
5 544 M
(enqueueing, workqueue handler invocation, dequeueing, invoking kingcobra kernelspace servic) s
5 533 M
(e) s
5 522 M
(request function from VIRGO queue handler, timestamp, timestamp and IP parser, reply_to_pub) s
5 511 M
(lisher etc.,) s
5 500 M
(- As mentioned in Greg Kroah Hartman's "Driving me nuts", persistence in Kernel space is) s
5 489 M
(a bad idea but still seems to be a necessary stuff - yet only vfs calls are used which have) s
5 478 M
( to be safe) s
5 467 M
(- Thus KingCobra has to be in-memory only in 4.0.5 if vfs_write\(\) doesn't work) s
5 456 M
(- Intriguingly cloudfs filesystems primitives - virgo_cloud_open, virgo_cloud_read, virgo_c) s
5 445 M
(loud_write etc.,) s
5 434 M
(work perfectly and append to a file.) s
5 423 M
(- kern.logs for these have been added to testlogs) s
5 412 M
(- Module.symvers has been recreated for 4.0.5) s
5 401 M
(- updated .ko and .mod.c) s
5 379 M
(----------------------------------------------------------------) s
5 368 M
(Due to SourceForge outage and for a future code diversification) s
5 357 M
(NeuronRain codebases \(AsFer, USBmd, VIRGO, KingCobra\) ) s
5 346 M
(in http://sourceforge.net/u/userid-769929/profile/ have been) s
5 335 M
(replicated in GitHub also - https://github.com/shrinivaasanka) s
5 324 M
(excluding some huge logs due to Large File Errors in GitHub.) s
5 313 M
(----------------------------------------------------------------) s
5 291 M
(---------------------------------------------------------------------) s
5 280 M
(Commits as on 30 July 2015) s
5 269 M
(---------------------------------------------------------------------) s
5 258 M
(VIRGO system calls have been ported to Linux Kernel 4.0.5 with commented gcc option -Wimpli) s
5 247 M
(cit-function-declaration, ) s
5 236 M
(msghdr and iovec changes similar to drivers mentioned in previous commit notes above. But K) s
5 225 M
(ernel 4.1.3 has some Makefile and build issues.) s
5 214 M
(The NeuronRain codebases in SourceForge and GitHub would henceforth be mostly and always ou) s
5 203 M
(t-of-sync and not guaranteed to be replicas - might get diversified into different research) s
5 192 M
( and development directions \(e.g one codebase might be more focussed on IoT while the other) s
5 181 M
( towards enterprise bigdata analytics integration with kernel and training which is yet to ) s
5 170 M
(be designed- depend on lot of constraints\)) s
5 148 M
(---------------------------------------------------------------------) s
5 137 M
(Commits as on 2,3 August 2015) s
5 126 M
(---------------------------------------------------------------------) s
5 115 M
(- new .config file added which is created from menuconfig) s
5 104 M
(- drivers/Kconfig has been updated with 4.0.5 drivers/Kconfig for trace event linker errors) s
5 93 M
(Linux Kernel 4.0.5 - KConfig is drivers/ has been updated to resolve RAS driver trace event) s
5 82 M
( linker error. RAS was not included in KConfig earlier.) s
5 71 M
(- link-vmlinux.sh has been replaced with 4.0.5 kernel version) s
5 49 M
(---------------------------------------------------------------------) s
5 38 M
(Commits as on 12 August 2015) s
5 27 M
(---------------------------------------------------------------------) s
5 16 M
(VIRGO Linux Kernel 4.1.5 port - related code changes - some important notes:) s
5 5 M
(---------------------------------------------------------------------) s
_R
S
%%Page: (22) 22
%%BeginPageSetup
_S
18 36 translate
/pagenum 22 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (22) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(- Linux Kernel 4.0.5 build suddenly had a serious root shell drop error in initramfs which ) s
5 731 M
(was not resolved by:) s
5 720 M
(        - adding rootdelay in grub) s
5 709 M
(        - disabling uuid for block devices in grub config) s
5 698 M
(        - mounting in read/write mode in recovery mode) s
5 687 M
(        - no /dev/mapper related errors) s
5 676 M
(        - repeated exits in root shell) s
5 665 M
(        - delay before mount of root device in initrd scripts) s
5 654 M
(- mysteriously there were some firmware microcode bundle executions in ieucodetool) s
5 643 M
(- Above showed a serious grub corruption or /boot MBR bug or 4.0.5 VIRGO kernel build probl) s
5 632 M
(em) s
5 621 M
(- Linux 4.0.x kernels are EOL-ed) s
5 610 M
(- Hence VIRGO is ported to 4.1.5 kernel released few days ago) s
5 599 M
(- Only minimum files have been changed as in commit log for Makefiles and syscall table and) s
5 588 M
( headers and a build script has been added) s
5 577 M
(for 4.1.5:) s
5 566 M
(    Changed paths:) s
5 555 M
(    A buildscript_4.1.5.sh) s
5 544 M
(    M linux-kernel-extensions/Makefile) s
5 533 M
(    M linux-kernel-extensions/arch/x86/syscalls/Makefile) s
5 522 M
(    M linux-kernel-extensions/arch/x86/syscalls/syscall_32.tbl) s
5 511 M
(    M linux-kernel-extensions/drivers/Makefile) s
5 500 M
(    M linux-kernel-extensions/include/linux/syscalls.h) s
5 478 M
(- Above minimum changes were enough to build an overlay-ed Linux Kernel with VIRGO codebase) s
5 456 M
(---------------------------------------------------------------------) s
5 445 M
(Commits as on 14,15,16 August 2015) s
5 434 M
(---------------------------------------------------------------------) s
5 423 M
(Executed the minimum end-end telnet path primitives in Linux kernel 4.1.5 VIRGO code:) s
5 412 M
(- cpu virtualization) s
5 401 M
(- memory virtualization) s
5 390 M
(- filesystem virtualization \(updated filp_open flags\)) s
5 379 M
(and committed logs and screenshots for the above.) s
5 357 M
(---------------------------------------------------------------------) s
5 346 M
(Commits as on 17 August 2015) s
5 335 M
(---------------------------------------------------------------------) s
5 324 M
(VIRGO queue driver:) s
5 313 M
(- Rebuilt Module.symvers) s
5 302 M
(- kern.log for telnet request to VIRGO Queue + KingCobra queueing system in kernelspace) s
5 280 M
(---------------------------------------------------------------------) s
5 269 M
(Commits as on 25,26 September 2015) s
5 258 M
(---------------------------------------------------------------------) s
5 247 M
(VIRGO Linux Kernel 4.1.5 - memory system calls:) s
5 236 M
(----------------------------------------------) s
5 225 M
(- updated testcases and added logs for syscalls invoked separately\(malloc,set,get,free\)) s
5 214 M
(- The often observed unpredictable heisen kernel panics occur with 4.1.5 kernel too. The lo) s
5 203 M
(gs are 2.3G and) s
5 192 M
(only grepped output is committed to repository.) s
5 181 M
(- virgo_malloc.c has been updated with kstrdup\(\) to copy the buf to iov.iov_base which was ) s
5 170 M
(earlier) s
5 159 M
(crashing in copy_from_iter\(\) within tcp code. This problem did not happen in 3.15.5 kernel.) s
5 148 M
(- But virgo_clone syscall code works without any changes to iov_base as above which does a ) s
5 137 M
(strcpy\(\)) s
5 126 M
( which is an internal memcpy\(\) though. So what causes this crash in memory system calls alo) s
5 115 M
(ne) s
5 104 M
(is a mystery.) s
5 93 M
(- new insmod script has been added to load the VIRGO memory modules as necessary instead of) s
5 82 M
( at boot time.) s
5 71 M
(- test_virgo_malloc.c and its Makefile has been updated.) s
5 49 M
(VIRGO Linux Kernel 4.1.5 - filesystem calls- testcases and logs:) s
5 38 M
(---------------------------------------------------------------) s
5 27 M
(  - added insmod script for VIRGO filesystem drivers) s
5 16 M
(  - test_virgo_filesystem.c has been updated for syscall numbers in 4.1.5 VIRGO kernel) s
5 5 M
(  - virgo_fs.c syscalls code has been updated for iov.iov_base kstrdup\(\) - without this the) s
_R
S
%%Page: (23) 23
%%BeginPageSetup
_S
18 36 translate
/pagenum 23 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (23) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(re are kernel panics in copy_from_iter\(\). kern.log) s
5 731 M
(testlogs have been added, but there are heisen kernel panics. The virgo syscalls are execut) s
5 720 M
(ed but not written to kern.log due to these crashes.) s
5 709 M
(Thus execution logs are missing for VIRGO filesystem syscalls.) s
5 687 M
(----------------------------------------------------------------------) s
5 676 M
(Commits as on 28,29 September 2015) s
5 665 M
(----------------------------------------------------------------------) s
5 643 M
(VIRGO Linux Kernel 4.1.5 filesystem syscalls:) s
5 632 M
(--------------------------------------------) s
5 621 M
(- Rewrote iov_base code with a separate iovbuf set to iov_base and strcpy\(\)-ing the syscall) s
5 610 M
( command to iov_base similar to VIRGO) s
5 599 M
(memory syscalls) s
5 588 M
(- Pleasantly the same iovbuf code that crashes in memory syscalls works for VIRGO FS withou) s
5 577 M
(t crash.Thus both virgo_clone and virgo_filesystem) s
5 566 M
(syscalls work without issues in 4.1.5 and virgo_malloc\(\) works erratically in 4.1.5 which r) s
5 555 M
(emains as issue.) s
5 544 M
(- kern.log for VIRGO FS syscalls and virgofstest text file written by virgo_write\(\) have be) s
5 533 M
(en added to repository) s
5 500 M
(VIRGO Linux 4.1.5 kernel memory syscalls:) s
5 489 M
(-----------------------------------) s
5 478 M
(- rewrote the iov_base buffer code for all VIRGO memory syscalls by allocating separate iov) s
5 467 M
(buf and copying the message to it - this just replicates the virgo_clone syscall behaviour ) s
5 456 M
(which works without any crashes mysteriously.) s
5 445 M
(- did extensive repetitive tests that were frequented by numerous kernel panics and crashes) s
5 434 M
(- The stability of syscalls code with 3.15.5 kernel appears to be completely absent in 4.1.) s
5 423 M
(5) s
5 412 M
(- The telnet path works relatively better though) s
5 401 M
(- Difference between virgo_clone and virgo_malloc syscalls despite having same kernel socke) s
5 390 M
(ts code looks like a non-trivial bug and a kernel stability issue.) s
5 379 M
(- kernel OOPS traces are quite erratic.) s
5 368 M
(- Makefile path in testcase has been updated) s
5 346 M
(----------------------------------------------------------------------) s
5 335 M
(Commits as on 4 October 2015) s
5 324 M
(----------------------------------------------------------------------) s
5 313 M
(VIRGO Linux Kernel 4.1.5 - Memory System Calls:) s
5 302 M
(-----------------------------------------------) s
5 291 M
(- replaced copy_to_user\(\) with a memcpy\(\)) s
5 280 M
(- updated the testcase with an example VUID hardcoded.) s
5 269 M
(- str_to_addr2\(\) is done on iov_base instead of buf which was causing NULL parsing) s
5 258 M
(- kern.log with above resolutions and multiple VIRGO memory syscalls tests - malloc,get,set) s
5 247 M
(- With above VIRGO malloc and set syscalls work relatively causing less number of random ke) s
5 236 M
(rnel panics) s
5 225 M
(- return values of memory calls set to 0) s
5 214 M
(- in virgo_get\(\) syscall, memcpy\(\) of iov_base is done to data_out userspace pointer) s
5 203 M
(- kern.log with working logs for syscalls - virgo_malloc\(\), virgo_set\(\), virgo_get\(\) but st) s
5 192 M
(ill there are random kernel panics) s
5 181 M
(- Abridged kern.log for VIRGO Memory System Calls with 4.1.5 Kernel - shows example logs fo) s
5 170 M
(r virgo_malloc\(\), virgo_set\(\) and virgo_get\(\)) s
5 148 M
(----------------------------------------------------------------) s
5 137 M
(Commits as on 14 October 2015) s
5 126 M
(----------------------------------------------------------------) s
5 115 M
(VIRGO Queue Workqueue handler usermode clause has been updated with 4.1.5 kernel paths and ) s
5 104 M
(kingcobra in user mode is enabled for invoking KingCobra Cloud Perfect Forwarding.) s
5 82 M
(---------------------------------------------------------------) s
5 71 M
(Commits as on 15 October 2015) s
5 60 M
(---------------------------------------------------------------) s
5 49 M
(- Updated VIRGO Queue kernel binaries and build generated sources) s
5 38 M
(- virgo_queue.h has been modified for call_usermodehelper\(\) - set_ds\(\) and fd_install\(\) hav) s
5 27 M
(e been uncommented for output redirection. Output redirection works but there are "alloc_fd) s
5 16 M
(: slot 1 not NULL!" errors at random \(kern.log in kingcobra testlogs\) which seems to be a n) s
5 5 M
(ew feature in 4.1.5 kernel. This did not happen in 3.7.8-3.15.5 kernels) s
_R
S
%%Page: (24) 24
%%BeginPageSetup
_S
18 36 translate
/pagenum 24 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (24) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(-----------------------------------------------------------------) s
5 720 M
(Commits as on 3 November 2015) s
5 709 M
(-----------------------------------------------------------------) s
5 698 M
(- kern.log for VIRGO kernel_analytics+config drivers which export the analytics variables f) s
5 687 M
(rom /etc/virgo_kernel_analytics.conf kernel-wide and print them in config driver has been a) s
5 676 M
(dded to config/testlogs) s
5 654 M
(-----------------------------------------------------------------) s
5 643 M
(Commits as on 10 January 2016) s
5 632 M
(-----------------------------------------------------------------) s
5 621 M
(NeuronRain VIRGO Research version 2016.1.10 released.) s
5 599 M
(-----------------------------------------------------------------------------------) s
5 588 M
(NeuronRain - AsFer commits for VIRGO - C++ and C Python extensions) s
5 577 M
(- Commits as on 29 January 2016) s
5 566 M
(-----------------------------------------------------------------------------------) s
5 555 M
(-------------------------------------------------------------------------------------------) s
5 544 M
(-----------------) s
5 533 M
(\(FEATURE - DONE\)  Python-C++-VIRGOKernel and Python-C-VIRGOKernel boost::python and cpython) s
5 522 M
( implementations:) s
5 511 M
(-------------------------------------------------------------------------------------------) s
5 500 M
(----------------) s
5 489 M
(- It is a known idiom that Linux Kernel and C++ are not compatible.) s
5 478 M
(- In this commit an important feature to invoke VIRGO Linux Kernel from userspace python li) s
5 467 M
(braries via two alternatives have been added.) s
5 456 M
(- In one alternative, C++ boost::python extensions have been added to encapsulate access to) s
5 445 M
( VIRGO memory system calls - virgo_malloc\(\), virgo_set\(\), virgo_get\(\), virgo_free\(\). Initia) s
5 434 M
(l testing reveals that C++ and Kernel are not too incompatible and all the VIRGO memory sys) s
5 423 M
(tem calls work well though initially there were some errors because of config issues.) s
5 412 M
(- In the other alternative, C Python extensions have been added that replicate boost::pytho) s
5 401 M
(n extensions above in C - C Python with Linux kernel) s
5 390 M
(works exceedingly well compared to boost::python.) s
5 379 M
(- This functionality is required when there is a need to set kernel analytics configuration) s
5 368 M
( variables learnt by AsFer Machine Learning Code) s
5 357 M
(dynamically without re-reading /etc/virgo_kernel_analytics.conf.) s
5 346 M
(- This completes a major integration step of NeuronRain suite - request travel roundtrip to) s
5 335 M
(-and-fro top level machine-learning C++/python) s
5 324 M
(code and rock-bottom C linux kernel - bull tamed ;-\).) s
5 313 M
(- This kind of python access to device drivers is available for Graphics Drivers already on) s
5 302 M
( linux \(GPIO - for accessing device states\)) s
5 291 M
(- logs for both C++ and C paths have been added in cpp_boost_python_extensions/ and cpython) s
5 280 M
(_extensions.) s
5 269 M
(- top level python scripts to access VIRGO kernel system calls have been added in both dire) s
5 258 M
(ctories:) s
5 247 M
(        CPython - python cpython_extensions/asferpythonextensions.py) s
5 236 M
(        C++ Boost::Python - python cpp_boost_python_extensions/asferpythonextensions.py) s
5 225 M
(- .so, .o files with build commandlines\(asferpythonextensions.build.out\) for "python setup.) s
5 214 M
(py build" have been added) s
5 203 M
(in build lib and temp directories.) s
5 192 M
(- main implementations for C++ and C are in cpp_boost_python_extensions/asferpythonextensio) s
5 181 M
(ns.cpp and cpython_extensions/asferpythonextensions.c) s
5 159 M
(-----------------------------------------------------------------------------------------) s
5 148 M
(Commits as on 12 February 2016) s
5 137 M
(-----------------------------------------------------------------------------------------) s
5 126 M
(Commits for Telnet/System Call Interface to VIRGO CPUPooling -> VIRGO Queue -> KingCobra) s
5 115 M
(-----------------------------------------------------------------------------------------) s
5 104 M
(*\) This was commented earlier for the past few years due to a serious kernel panic in previ) s
5 93 M
(ous kernel versions - <= 3.15.5) s
5 82 M
(*\) In 4.1.5 a deadlock between VIRGO CPUPooling and VIRGO queue driver init was causing fol) s
5 71 M
(lowing error in "use_as_kingcobra_service" clause :) s
5 60 M
(        - "gave up waiting for virgo_queue init, unknown symbol push_request\(\)") s
5 49 M
(*\) To address this a new boolean flag to selectively enable and disable VIRGO Queue kernel ) s
5 38 M
(service mode "virgo_queue_reactor_service_mode" has been added.) s
5 27 M
(*\) With this flag VIRGO Queue is both a kernel service driver and a standalone exporter of ) s
5 16 M
(function symbols - push_request/pop_request) s
5 5 M
(*\) Incoming request data from telnet/virgo_clone\(\) system call into cpupooling kernel servi) s
_R
S
%%Page: (25) 25
%%BeginPageSetup
_S
18 36 translate
/pagenum 25 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (25) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(ce reactor pattern \(virgo cpupooling listener loop\) is treated as generic string and handed) s
5 731 M
( over to VIRGO queue and KingCobra which publishes it.) s
5 720 M
(*\) This resolves a long standing deadlock above between VIRGO cpupooling "use_as_kingcobra_) s
5 709 M
(service" clause and VIRGO queue init.) s
5 698 M
(*\) This makes virgo_clone\(\) systemcall/telnet both synchronous and asynchronous - requests ) s
5 687 M
(from telnet client/virgo_clone\(\) system call can be either synchronous RPC functions execut) s
5 676 M
(ed on a remote cloud node in kernelspace \(or\) an asynchronous invocation through "use_as_ki) s
5 665 M
(ngcobra_service" clause path to VIRGO Queue driver which enqueues the data in kernel workqu) s
5 654 M
(eue and subsequently popped by KingCobra.) s
5 643 M
(*\) Above saves an additional code implementation for virgo_queue syscall paths - virgo_clon) s
5 632 M
(e\(\) handles, based on config selected, incoming data passed to it either as a remote proced) s
5 621 M
(ure call or as a data that is pushed to VIRGO Queue/KingCobra pub-sub kernelspace.) s
5 610 M
(-----------------------------------------------------------------------------------------) s
5 599 M
(Prerequisites:) s
5 588 M
(--------------) s
5 577 M
(- insmod kingcobra_main_kernelspace.ko) s
5 566 M
(- insmod virgo_queue.ko compiled with flag virgo_queue_reactor_service_mode=1) s
5 555 M
(        \(when virgo_queue_reactor_service_mode=0, listens on port 60000 for direct telnet r) s
5 544 M
(equests\)) s
5 533 M
(- insmod virgo_cloud_test_kernelspace.ko) s
5 522 M
(- insmod virgo_cloudexec.ko \(listens on port 10000\)) s
5 500 M
(-----------------------------------------------------------------------------------------) s
5 489 M
(Schematic Diagram) s
5 478 M
(-----------------------------------------------------------------------------------------) s
5 467 M
(VIRGO clone system call/telnet client ---> VIRGO cpupooling\(compiled with use_as_kingcobra_) s
5 456 M
(service=1\) ------> VIRGO Queue kernel service \(compiled with virgo_queue_reactor_service_mo) s
5 445 M
(de=1\) ---> Linux Workqueue handler ------> KingCobra) s
5 423 M
(-----------------------------------------------------------------------------------------) s
5 412 M
(Commits as on 15 February 2016 - Kernel Analytics - VIRGO Linux Kernelwide imports) s
5 401 M
(-----------------------------------------------------------------------------------------) s
5 390 M
(- Imported Kernel Analytics variables into CloudFS kernel module - printed in driver init\(\)) s
5 379 M
(- Module.symvers from kernel_analytics has been merged with CloudFS Module.symvers) s
5 368 M
(- Logs for above has been added in cloudfs/test_logs/) s
5 357 M
(- Makefile updated with correct fs path) s
5 346 M
(- Copyleft notices updated) s
5 324 M
(-----------------------------------------------------------------------------------------) s
5 313 M
(Commits as on 15 February 2016 - Kernel Analytics - VIRGO Linux Kernelwide imports) s
5 302 M
(-----------------------------------------------------------------------------------------) s
5 291 M
(- Kernel Analytics driver exported variables have been imported in CPU virtualization drive) s
5 280 M
(r) s
5 269 M
(- Module.symvers from kernel_analytics has been merged with Module.symvers in cpupooling) s
5 258 M
(- kern.log for this import added to cpupooling/virgocloudexec/test_logs/) s
5 236 M
(-----------------------------------------------------------------------------------------) s
5 225 M
(Commits as on 15 February 2016 - Kernel Analytics - VIRGO Linux Kernelwide imports) s
5 214 M
(-----------------------------------------------------------------------------------------) s
5 203 M
(- Imported kernel analytics variables into memory virtualization driver init\(\) , exported f) s
5 192 M
(rom kernel_analytics driver) s
5 181 M
(- build shell script updated) s
5 170 M
(- logs added to test_logs/) s
5 159 M
(- Module.symvers from kernel_analytics has been merged with memory driver Module.symvers) s
5 148 M
(- Makefile updated) s
5 126 M
(-----------------------------------------------------------------------------------------) s
5 115 M
(Commits as on 15 February 2016 - Kernel Analytics - VIRGO Linux Kernelwide imports) s
5 104 M
(-----------------------------------------------------------------------------------------) s
5 93 M
(- Imported kernel analytics variables into VIRGO Queueing Driver) s
5 82 M
(- logs for this added in test_logs/) s
5 71 M
(- Makefile updated) s
5 60 M
(- Module.symvers from kernel_analytics has been merged with Queueing driver's Module.symver) s
5 49 M
(s) s
5 38 M
(- .ko, .o and build generated sources) s
5 16 M
(-------------------------------------------------------------------------------) s
5 5 M
(Commits as on 16,17 February 2016) s
_R
S
%%Page: (26) 26
%%BeginPageSetup
_S
18 36 translate
/pagenum 26 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (26) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(-------------------------------------------------------------------------------) s
5 731 M
(\(FEATURE-DONE\) Socket Buffer Debug Utility Function - uses linux skbuff facility) s
5 720 M
(-------------------------------------------------------------------------------) s
5 709 M
(- In this commit a multipurpose socket buffer debug utility function has been added in util) s
5 698 M
(s driver and exported kernelwide.) s
5 687 M
(- It takes a socket as function argument does the following:) s
5 676 M
(        - dereference the socket buffer head of skbuff per-socket transmit data queue) s
5 665 M
(        - allocate skbuff with alloc_skb\(\)) s
5 654 M
(        - reserve head room with skb_reserve\(\)) s
5 643 M
(        - get a pointer to data payload with skb_put\(\)) s
5 632 M
(        - memcpy\(\) an example const char* to skbuff data) s
5 621 M
(        - Iterate through the linked list of skbuff queue in socket and print headroom and ) s
5 610 M
(data pointers) s
5 599 M
(        - This can be used as a packet sniffer anywhere within VIRGO linux network stack) s
5 588 M
(- Any skb_*\(\) functions can be plugged-in here as deemed necessary.) s
5 577 M
(- kern.log\(s\) which print the socket internal skbuff data have been added to a new testlogs) s
5 566 M
(/ directory) s
5 555 M
(- .cmd files generated by kbuild) s
5 533 M
(--------------------------------------------------------------------------------) s
5 522 M
(\(FEATURE-DONE\) Commits as on 24 February 2016) s
5 511 M
(--------------------------------------------------------------------------------) s
5 500 M
(skbuff debug function in utils/ driver:) s
5 489 M
(\(*\) Added an if clause to check NULLity of skbuff headroom before doing skb_alloc\(\)) s
5 478 M
(\(*\) kern.log for this commit has been added testlogs/) s
5 467 M
(\(*\) Rebuilt kernel objects and sources) s
5 445 M
(--------------------------------------------------------------------------------) s
5 434 M
(Commits as on 1 March 2016) s
5 423 M
(--------------------------------------------------------------------------------) s
5 412 M
(-------------------------------------------------------------------------------------) s
5 401 M
(\(FEATURE-DONE\) Software Analytics - SATURN Program Analysis added to VIRGO Linux kernel dri) s
5 390 M
(vers) s
5 379 M
(-------------------------------------------------------------------------------------) s
5 368 M
(- SATURN \(saturn.stanford.edu\) Program Analysis and Verification software has been) s
5 357 M
(integrated into VIRGO Kernel as a Verification+SoftwareAnalytics subsystem) s
5 346 M
(- A sample driver that can invoke an exported function has been added in drivers - saturn_p) s
5 335 M
(rogram_analysis) s
5 324 M
(- Detailed document for an example null pointer analysis usecase has been created in virgo-) s
5 313 M
(docs/VIRGO_SATURN_Program_Analysis_Integration.txt) s
5 302 M
(- linux-kernel-extensions/drivers/virgo/saturn_program_analysis/saturn_program_analysis_tre) s
5 291 M
(es/error.txt is the error report from SATURN) s
5 280 M
(- SATURN generated preproc and trees are in linux-kernel-extensions/drivers/virgo/saturn_pr) s
5 269 M
(ogram_analysis/preproc and) s
5 258 M
(linux-kernel-extensions/drivers/virgo/saturn_program_analysis/saturn_program_analysis_trees) s
5 247 M
(/) s
5 225 M
(--------------------------------------------------------------------------------) s
5 214 M
(Commits as on 10 March 2016) s
5 203 M
(--------------------------------------------------------------------------------) s
5 192 M
(- SATURN analysis databases \(.db\) for locking, memory and CFG analysis.) s
5 181 M
(- DOT and PNG files for locking, memory and CFG analysis.) s
5 170 M
(- new folder saturn_calypso_files/ has been added in saturn_program_analysis/ with new .clp) s
5 159 M
( files virgosaturncfg.clp and virgosaturnmemory.clp) s
5 148 M
(- SATURN alias analysis .db files) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(------------------------------------------------) s
5 104 M
(\(FEATURE-DONE\) NEURONRAIN - ASFER Commits for VIRGO - CloudFS systems calls integrated into) s
5 93 M
( Boost::Python C++ and Python CAPI invocations) s
5 82 M
(-------------------------------------------------------------------------------------------) s
5 71 M
(------------------------------------------------) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(-------------------------------) s
5 38 M
(AsFer Commits as on 30 May 2016) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(-------------------------------) s
5 5 M
(VIRGO CloudFS system calls have been added \(invoked by unique number from syscall_32.tbl\) f) s
_R
S
%%Page: (27) 27
%%BeginPageSetup
_S
18 36 translate
/pagenum 27 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (27) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(or C++ Boost::Python interface to) s
5 731 M
(VIRGO Linux System Calls. Switch clause with a boolean flag has been introduced to select e) s
5 720 M
(ither VIRGO memory or filesystem calls.) s
5 709 M
(kern.log and CloudFS textfile Logs for VIRGO memory and filesystem invocations from AsFer p) s
5 698 M
(ython have been committed to testlogs/) s
5 676 M
(-------------------------------------------------------------------------------------------) s
5 665 M
(-------------------------------) s
5 654 M
(AsFer Commits as on 31 May 2016) s
5 643 M
(-------------------------------------------------------------------------------------------) s
5 632 M
(-------------------------------) s
5 621 M
(Python CAPI interface to NEURONRAIN VIRGO Linux System Calls has been updated to include Fi) s
5 610 M
(le System open, read, write primitives also.) s
5 599 M
(Rebuilt extension binaries, kern.logs and example appended text file have been committed to) s
5 588 M
( testlogs/. This is exactly similar to) s
5 577 M
(commits done for Boost::Python C++ interface. Switch clause has been added to select memory) s
5 566 M
( or filesystem VIRGO syscalls.) s
5 544 M
(-------------------------------------------------------------------------------------------) s
5 533 M
(-----------------------------) s
5 522 M
(\(BUG - STABILITY ISSUES\) Commits - 25 July 2016 - Static Analysis of VIRGO Linux kernel for) s
5 511 M
( investigating heisencrashes) s
5 500 M
(-------------------------------------------------------------------------------------------) s
5 489 M
(-----------------------------) s
5 478 M
(Initial Documentation for Smatch and Coccinelle kernel static analyzers executed on VIRGO L) s
5 467 M
(inux kernel - to be updated) s
5 456 M
(periodically with further analysis.) s
5 434 M
(-------------------------------------------------------------------------------------------) s
5 423 M
(----------------------------------) s
5 412 M
(\(BUG - STABILITY ISSUES\) Commits - 1 August 2016 - VIRGO Linux Stability Issues - Ongoing R) s
5 401 M
(andom oops and panics investigation) s
5 390 M
(-------------------------------------------------------------------------------------------) s
5 379 M
(----------------------------------) s
5 368 M
(1. GFP_KERNEL has been replaced with GFP_ATOMIC flags in kmem allocations.) s
5 357 M
(2. NULL checks have been introduced in lot of places involving strcpy, strcat, strcmp etc.,) s
5 346 M
( to circumvent) s
5 335 M
(buffer overflows.) s
5 324 M
(3. Though this has stabilized the driver to some extent, still there are OOPS in unrelated ) s
5 313 M
(places deep) s
5 302 M
(with in kernel where paging datastructures are accessed - kmalloc somehow corrupts paging) s
5 291 M
(4. OOPS are debugged via gdb as:) s
5 280 M
(        4.1 gdb ./vmlinux /proc/kcore) s
5 269 M
(        or) s
5 258 M
(        4.2 gdb <loadable_kernel_module>.o) s
5 247 M
(   followed by) s
5 236 M
(        4.3 l *\(address+offset in OOPS dump\)) s
5 225 M
(5. kern.log\(s\) for the above have been committed in tar.gz format and have numerous OOPS oc) s
5 214 M
(curred during repetitive telnet and syscall) s
5 203 M
(invocation\(boost::python C++\) invocations of virgo memory system calls.) s
5 192 M
(6. Paging related OOPS look like an offshoot of set_fs\(\) encompassing the filp_open VFS cal) s
5 181 M
(ls.) s
5 159 M
(-------------------------------------------------------------------------------------------) s
5 148 M
(-----) s
5 137 M
(\(BUG-STABILITY ISSUES\) Commits - 26 September 2016 - Ongoing Random Panic investigation) s
5 126 M
(-------------------------------------------------------------------------------------------) s
5 115 M
(-----) s
5 104 M
(Further analysis on direct VIRGO memory cache primitives telnet invocation - problems are s) s
5 93 M
(imilar) s
5 82 M
(to Boost::Python AsFer VIRGO system calls invocations.) s
5 60 M
(-------------------------------------------------------------------------------------------) s
5 49 M
(-----) s
5 38 M
(\(BUG-STABILITY ISSUES\) Commits - 27 September 2016 - Ongoing Random Panic investigation) s
5 27 M
(-------------------------------------------------------------------------------------------) s
5 16 M
(-----) s
5 5 M
(Analysis of VIRGO memory cache primitives reveal more inconsistencies in cacheline flushes ) s
_R
S
%%Page: (28) 28
%%BeginPageSetup
_S
18 36 translate
/pagenum 28 def
/fname (VirgoDesign.txt) def
/fdir (.) def
/ftail (VirgoDesign.txt) def
% User defined strings:
/fmodstr (Wed Aug 21 15:44:14 2019) def
/pagenumstr (28) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(between CPU and GPU.) s
5 731 M
( ) s
5 698 M
(Srinivasan Kannan \(alias\) Ka.Shrinivaasan \(alias\) Shrinivas Kannan) s
5 687 M
(http://sites.google.com/site/kuja27) s
_R
S
%%Trailer
%%Pages: 28
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
