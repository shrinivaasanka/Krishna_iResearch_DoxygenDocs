/*
##############################################################################################################################################
#<a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/"><img alt="Creative Commons Licence" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.
###############################################################################################################################################
#Course Authored By:
#-----------------------------------------------------------------------------------------------------------
#K.Srinivasan
#NeuronRain Documentation and Licensing: http://neuronrain-documentation.readthedocs.io/en/latest/
#Personal website(research): https://acadpdrafts.readthedocs.io/en/latest/ 
#-----------------------------------------------------------------------------------------------------------
##############################################################################################################################################
*/

This is a non-linearly organized, code puzzles oriented, continually updated set of course notes on Rust language which is increasingly suggested for both lowlevel and highlevel programming focussing on scalability,GC-free-memory safety,performance. While Go language is devoted to concurrency and webservices, Rust is hailed as replacement for legacy C and C++ languages. 
----------------------------------------------------------------------------------------------------------------
1381. (THEORY and FEATURE) Rasterization or rectification of hyperbolic arc and Factor point location in Rust- Sequential version and iterative binary search - related to 1379 and all sections on Integer Factorization,Computational Geometry,Set Partitions-to-Tile Cover reduction by Lagranges Four Square Theorem and ILP,Primality Testing,RSA Semiprimes,Almost-Square Bounding Boxes in Large Scale Visual Recognition,Pell's Equation,Brahmagupta's Chakravala,Approximate Factoring by Newton-Raphson Rayshooting queries,Algebraic Geometry of Computational Geometric Factorization,Quantum computation and Derandomization of BQP Factorization by Condorcet Jury Theorem Majority-BQPVoterSAT boolean composition - 23 January 2023 
----------------------------------------------------------------------------------------------------------------
New Rust package rasterization/ containing code fragment rasterization/src/main.rs has been added to NeuronRain Grafit course material which primitively implements sequential rasterization of Hyperbolic arc bow and sequential factor point location at present implemented on Spark-Python in NeuronRain AsFer and is the prerequisite for Computational Geometric Factorization Parallel Planar Point Location NC-PRAM-BSP algorithm. Rust which is admired for its low latency rivalling C and C++ is highly parallelizable through Rayon library - https://docs.rs/rayon/latest/rayon/ - Sequential rasterization could be parallelizable by Rayon parallel iterators thereby further optimizing the execution time of NeuronRain AsFer Spark-Python Factorization implementation which at times is hindered and slowed down by bloated Py4J-Java-Python marshalling, thus effectively marking a gradual transition of NeuronRain codebases requiring high concurrency and scalability to performant Rust. Rust is free from Garbage collection overhead and compiles to low level machine instructions. Rust rasterization package rasterization/src/main.rs implements iterative version of binary search as an alternative to recursive binary search in NeuronRain AsFer Factorization - $ASFER/python-src/DiscreteHyperbolicFactorizationUpperbound_TileSearch_Optimized.py. This code fragment requires cargo installation and is only a naive implementation at present and could evolve to a mainstream factorization code. Rust is now part of Linux Kernel as well and NeuronRain codebase stack implemented in multiple languages - C,C++,Java,Python - for application userspace layer and kernel drivers could be translated into single language - Rust - top-to-bottom 
 
References:
-----------
1.Rust book - https://doc.rust-lang.org/stable/book/ch04-01-what-is-ownership.html
2.Rust for Systems Programming - https://msrc-blog.microsoft.com/2019/07/22/why-rust-for-safe-systems-programming/ - " ... Rust, just like C and C++, also gives the programmer fine-grained control on when and how much memory is allocated allowing the programmer to have a very good idea of exactly how the program will perform every time it is run. What this means for performance in terms of raw speed, control, and predictability, is that Rust, C, and C++ can be thought of in similar terms...."
3.Rust - Most loved language - https://insights.stackoverflow.com/survey/2018/#technology-_-most-loved-dreaded-and-wanted-languages
4.Is Rust C++-fast - https://arxiv.org/abs/2209.09127 
5.How Microsoft is adopting Rust - https://medium.com/@tinocaer/how-microsoft-is-adopting-rust-e0f8816566ba
6.Parallelizability of Rust - https://kornel.ski/rust-c-speed
7.Rust for network programming - https://codilime.com/blog/rust-vs-c-safety-and-performance-in-low-level-network-programming/
8.Rayon Parallel Iterators - https://docs.rs/rayon/latest/rayon/iter/index.html
9.Sequential binary search - https://spin.atomicobject.com/2022/07/06/learning-rust-binary-search/
10.Rust versus C benchmarks - Number field sieve and N-Body computations are faster in Rust - https://programming-language-benchmarks.vercel.app/c-vs-rust
11.Linux Kernel Device Drivers in Rust - https://security.googleblog.com/2021/04/rust-in-linux-kernel.html
12.Linux Kernel Device Drivers in Rust - https://project.linuxfoundation.org/hubfs/Webinars/Webinar_Slides/LF-Writing-Linux-Kernel-Modules-in-Rust.pdf

----------------------------------------------------------------------------------------------------------------
1384. (THEORY and FEATURE) Computational Geometric Factorization - Rayon Parallel iterator Rasterization or rectification of hyperbolic arc and Factor point location in Rust- Sequential and Parallel versions - related to 1383 and all sections on Integer Factorization,Computational Geometry,Set Partitions-to-Tile Cover reduction by Lagranges Four Square Theorem and ILP,Primality Testing,RSA Semiprimes,Almost-Square Bounding Boxes in Large Scale Visual Recognition,Pell's Equation,Brahmagupta's Chakravala,Approximate Factoring by Newton-Raphson Rayshooting queries,Algebraic Geometry of Computational Geometric Factorization,Quantum computation and Derandomization of BQP Factorization by Condorcet Jury Theorem Majority-BQPVoterSAT boolean composition - 2 February 2023 
----------------------------------------------------------------------------------------------------------------
1384.1 course_material/Programming/Rust/rasterization/Cargo.toml has been updated to add dependencies for Rayon parallel iterator and foreach closures from crates.io.
1384.2 course_material/Programming/Rust/rasterization/src/main.rs has been changed to import std::env for parsing commandline arguments by env::args(): number to be factorized and type of rasterization (sequential or parallel) are two arguments - ./rasterization <number> <type_of_rasterization> 
1384.3 Imports for Rayon and foreach have been declared for parallel rasterization.Arguments to Function rasterize_hyperbolic_arc(num_fact: i32,rasterization: String) have been changed to choose between sequential and parallel rasterization.
1384.4 Clause for sequential rasterization invokes foreach closure (from foreach Crate) on std::ops::Range struct for sequential iteration over hyperbolic arc bow and binary search of segments.
1384.5 Clause for parallel rasterization invokes for_each() from rayon::iter::ParallelIterator trait for parallelly iterating through hyperbolic arc bow segments and perform iterative binary search on them. 
1384.6 This is a preliminary implementation of Computational Geometric Factorization in Rust which is an alternative or optimized supplement to Python-Spark-Py4J cloud factorization implementation to take advantage of Rust's lightning-fast Rayon parallel iterators.
1384.7 Some initial benchmarks (sequential and parallel) in logs suggest, as an amazement, Rust sequential iterator rasterization is faster than Spark-Python Parallelize() parallel rasterization on quadcore by many orders of magnitude (Example:30 bits integer factorized in minutes in Spark-Python, is factorized in fraction of second in Rust even for sequential iterator which is 100X reduction in runtime, a slowdown possibly caused in PySpark due to heavy booting time of executor instances). Presently Rayon parallel iterators are limited only to i32 32-bit integers which is a roadblock for scaling to huge integers unless big integers are supported by Rayon. Other issue about Rayon is its confinement to number of cores or hyperthreads of CPUs based on work stealing - Rayon is not for cloud computing but HPC supercomputers of thousands of CPUs could benefit from Rayon (In complexxity theoretic terms, Rayon is not MapReduce DMRC but true NC software).
1384.8 Following are some benchmarked integers (consecutive 30 integers and miscellaneous - all 32 bits):
	Sequential rasterization - rasterization/src/logs/rasterization.log.2February2023
	Sequential rasterization - rasterization/src/logs/rasterization.log2.2February2023
	Parallel rasterization - rasterization/src/logs/rasterization.log3.2February2023

References:
----------
1384.9 Fearless Concurrency (Ownership-Borrowing memory safety) and Rayon Parallel Iterators - https://developers.redhat.com/blog/2021/04/30/how-rust-makes-rayons-data-parallelism-magical#
1384.10 Crate foreach - https://docs.rs/foreach/latest/foreach/
1384.11 Rayon Parallel Iterator trait - https://docs.rs/rayon/latest/rayon/iter/trait.ParallelIterator.html
1384.12 Rust std::ops::Range - https://doc.rust-lang.org/std/ops/struct.Range.html
1384.13 Rayon FAQ - https://github.com/rayon-rs/rayon/blob/master/FAQ.md

----------------------------------------------------------------------------------------------------------------
1385. (THEORY and FEATURE) Computational Geometric Factorization - High Performance Computing implementation for Supercomputers - Rayon Parallel iterator Rasterization or rectification of hyperbolic arc and Factor point location in Rust- Sequential and Parallel versions - multiple consecutive integers - performance benchmarks - related to 1383,1384 and all sections on Integer Factorization,Computational Geometry,Set Partitions-to-Tile Cover reduction by Lagranges Four Square Theorem and ILP,Primality Testing,RSA Semiprimes,Almost-Square Bounding Boxes in Large Scale Visual Recognition,Pell's Equation,Brahmagupta's Chakravala,Approximate Factoring by Newton-Raphson Rayshooting queries,Algebraic Geometry of Computational Geometric Factorization,Quantum computation and Derandomization of BQP Factorization by Condorcet Jury Theorem Majority-BQPVoterSAT boolean composition - 7 February 2023 
----------------------------------------------------------------------------------------------------------------
1385.1 Updated course_material/Programming/Rust/rasterization/src/main.rs to import std::time for performance benchmarks.
1385.2 Function main() has been changed to pass on additional commandline parameter for range of consecutive multiple integers to be factorized - multiple integer factorization has been made default as single integer factorization is a special case of range 1.
1385.3 New function factorize_multipleintegers(num_fact:i32,range:i32,rasterization:String) has been defined to loop through the range of integers to be factorized and invoke rasterize_hyperbolic_arc() which has been decorated by SystemTime::now timer functions before and after calls and duration between two now() values is the factorization time per integer.
1385.4 Function rasterize_hyperbolic_arc() has been made inline and instrumented with SystemTime::now() profiling for Sequential and Parallel rasterization binary searches.
1385.5 Function binary_search() has been made inline and returns a vector of factors. Factors found during binary search are pushed to the vector.
1385.6 Two ranges of consecutive integers 10000000 to 10000098 and 100000000 to 100000048 have been factorized by sequential and parallel rasterization. Nick's class Computational Geometric Factorization algorithm depends on parallel rasterization. Following are the 4 logs for 2 sets of ranges - 2 each for sequential and parallel rasterization: 
	rasterization.parallel.multipleintegers.log.7February2023
	rasterization.parallel.multipleintegers2.log.7February2023
	rasterization.sequential.multipleintegers.log.7February2023
	rasterization.sequential.multipleintegers2.log.7February2023
1385.7 Integer 10000098 was factorized (all factor points were located) in 735.27 milliseconds by Rayon parallel rasterization and in 1.407 seconds by sequential rasterization. 27 bits Integer 100000048 was factorized (all factor points were located) in 8.1418 seconds by Rayon parallel rasterization and 13.39 seconds by sequential rasterization.
1385.8 In comparison, Spark Python DMRC MapReduce implementation was still locating factor points after 754035367579 nanoseconds (754.03 seconds) and interrupted or Rust HPC implementation is approximately 1000 times faster than Spark-Python cloud implementation - PySpark logs for factorizing 100000048 have been captured in rasterization.PySpark.7February2023. 

----------------------------------------------------------------------------------------------------------------
1446. (THEORY and FEATURE) Computational Geometric Factorization - High Performance Computing implementation for Supercomputers - Rayon Parallel iterator Rasterization or rectification of hyperbolic arc and Factor point location in Rust- Sequential and Parallel versions - multiple consecutive integers - Major rewrite for 64-bits integer support and (29 and 59) bits integer performance benchmarks - related to 1383,1384,1385 and all sections on Integer Factorization,Computational Geometry,Set Partitions-to-Tile Cover reduction by Lagranges Four Square Theorem and ILP,Primality Testing,RSA Semiprimes,Almost-Square Bounding Boxes in Large Scale Visual Recognition,Pell's Equation,Brahmagupta's Chakravala,Approximate Factoring by Newton-Raphson Rayshooting queries,Algebraic Geometry of Computational Geometric Factorization,Quantum computation and Derandomization of BQP Factorization by Condorcet Jury Theorem Majority-BQPVoterSAT boolean composition - 17 August 2023 
----------------------------------------------------------------------------------------------------------------
1446.1 course_material/Programming/Rust/rasterization/src/main.rs - In this major code change, Rust implementation of computational geometric factorization has been expanded to include support for 64-bits integer factorization through par_bridge() which was limited so far to 32 bits integers due to par_iter() implementation limitation. ParallelBridge does not have 64-bits limitations and is generic to any iterable but is less efficient than par_iter() though still parallel. 
1446.2 An example function pariter64bits() has been included as a testcase for par_bridge() invocation over 64-bits iterables.
1446.3 fn factorize_multipleintegers(num_fact:i64,range:i64,rasterization:String) has been changed to populate a vector of factorization runtimes for each consecutive integer in the range. 
1446.4 fn rasterize_hyperbolic_arc(num_fact: i64,rasterization: String) -> i64 has been redefined for 64bits integer type.Based on the size of the integer (obtained from ilog2()) one of the 2 binary search planar point location code blocks for (*) less than 32 bits that invokes into_par_iter() and (*) more than 32 bits that invokes par_bridge() are executed by the if-else (for <= 32 and > 32 bits) statement.
1446.5 fn binary_search(num_fact:i64,xl:i64,yl:i64,xr:i64,yr:i64) -> Vec<i64> has been redefined for 64bits integers. System time in nanoseconds is printed for each factor point located because total runtime for an integer is sum total time of locating all the factors (which could be O(BigOmega * (logN)^(k+1)) where BigOmega is the number of prime factors with multiplicity or sum of exponents of prime factors in unique factorization) and misleading. This is more of an implementation and logging limitation than theoretical because of the following computational geometric planar point location algorithm:
	1446.5.1 Assign O((logN)^k) arithmetic progression tile segments to O(N/(logN)^k) multicores 
	1446.5.2 Each of O(N/(logN)^k) multicores sequentially binary search O((logN)^k) tilesegments in O((logN)^k*logN) or O((logN)^k*loglogN) time (if interpolation search is used) thus covering all the factor points along rectified hyperbolic arc bow.
	1446.5.3 But implementationwise earlier theoretical limits may not be realizable unless executed in petascale and exascale supercomputers (true NC or HPC) causing the actual observed runtime to be slowed down by BigOmega as there may not be as many cores available and communication complexity between multicores is high. 
1446.6 Two integers have been factorized - 999999999999999999 (59 bits) and 999999999 (29 bits) - and the logs:
	rasterization/src/logs/rasterization.log.RayonParBridge.17August2023
	rasterization/src/logs/rasterization.log2.RayonParBridge.17August2023
capture the factor points. ParallelBridge computation for 59 bits (Else clause) is slower (per factor) compared to ParallelIterator version for 29 bits (If clause).   

References:
----------
1446.6 Rust Rayon Iterator ParallelBridge - par_bridge() - https://docs.rs/rayon/latest/rayon/iter/trait.ParallelBridge.html - "..... This creates a “bridge” from a sequential iterator to a parallel one, by distributing its items across the Rayon thread pool. This has the advantage of being able to parallelize just about anything, but the resulting ParallelIterator can be less efficient than if you started with par_iter instead. However, it can still be useful for iterators that are difficult to parallelize by other means, like channels or file or network I/O....."
1446.7 Approximation of Prime omega functions - Big Omega and Little Omega - by Riemann Zeta Function, Dirichlet Series and Hardy-Wright summatory - https://en.wikipedia.org/wiki/Prime_omega_function

----------------------------------------------------------------------------------------------------------------
1519. (JIRA,THEORY and FEATURE) Computational Geometric Factorization - High Performance Computing implementation for Supercomputers - Rayon Parallel iterator Rasterization or rectification of hyperbolic arc and Factor point location in Rust- Sequential and Parallel versions - multiple consecutive integers - correction to loop range and some consecutive integers benchmarks - related to 1383,1384,1385 and all sections on Integer Factorization,Computational Geometry,Set Partitions-to-Tile Cover reduction by Lagranges Four Square Theorem and ILP,Primality Testing,RSA Semiprimes,Almost-Square Bounding Boxes in Large Scale Visual Recognition,Pell's Equation,Brahmagupta's Chakravala,Approximate Factoring by Newton-Raphson Rayshooting queries,Algebraic Geometry of Computational Geometric Factorization,Quantum computation and Derandomization of BQP Factorization by Condorcet Jury Theorem Majority-BQPVoterSAT boolean composition - 28 May 2024 
----------------------------------------------------------------------------------------------------------------
1519.1 course_material/Programming/Rust/rasterization/Cargo.lock has been automatically regenerated after adding bigdecimal::BigDecimal dependecy to Cargo.toml
1519.2 course_material/Programming/Rust/rasterization/src/main.rs has been updated to correct the loop range 1..range to 0..range as first integer was skipped. 
1519.3 BigDecimal datatype was tried by replacing i64 datatype throughout (https://docs.rs/bigdecimal/latest/bigdecimal/) to investigate its compatibility with Rust Rayon ParallelIterator and Rayon ParallelIterator.foreach(|item,iter|) doesn't yet support BigDecimal causing a compilation error. 
1519.4 Few consecutive integer ranges for small and big integers have been factorized and time duration benchmarks are logged to(logs for 59 bits integer - all 9s - are truncated to print first few hundred factors):
	rasterization/src/logs/rasterization.log.28May2024
	rasterization/src/logs/rasterization.log2.28May2024
	rasterization/src/logs/rasterization.log3.28May2024
1519.5 This update resolves JIRA issue https://krishnairesearch.atlassian.net/browse/NEUR-39 

--------------------------------------------------------------------------------------------------------------------------------
1520. (THEORY and FEATURE) Neuro Cryptocurrency - Copy versus Move semantics in Rust - 30 May 2024 - related to 1213,1215,1217,1221,1226,1227 and all sections on Set Partitions and Histogram Analytics, Merit of Large Scale Visuals, GIS Urban Sprawl Analytics - minimum rectangular bounding box of an urban sprawl, Computational Geometric Integer Factorization,Neuro Cryptocurrency Proof-Of-Work Hardness,Economic Merit,Poverty Alleviation,Money Changing Problem,Integer Linear Programming,Pell Diophantine for Factorization
--------------------------------------------------------------------------------------------------------------------------------1520.1 Code example move_semantics/src/main.rs demonstrates the Rust move semantics in the context of zero-copy singleton Neuro cryptocurrency so as to ensure there exists only one globally unique instance of a currency unit in a transaction - described in Section 808 as natural implementation choice for electronic voting machines and an alternative to C++ based Neuro protocol buffer crytocurrency move semantics - https://github.com/shrinivaasanka/Krishna_iResearch_DoxygenDocs/blob/master/index.rst .
1520.2 Rust has the default behaviour of moving the data block allocated on heap during an assign operation that causes rvalue to lose its ownership to lvalue automatically which is the counterpart of std::move() in C++. Any reference (called "borrow") after ownership move is rendered illegal. 
1520.3 Such a move by default prevents the scenario described in Figure 4.2 of https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html which could end in a double-free by which both rvalue and lvalue invoke heap drop() on end of scope - Following code simulates a universal buy-sell pattern by moving a Neuro currency UUID denomination of 100:
	let buyer2 = String::from("ff20a894-a2c4-4002-ac39-93d053ea3020:100");
	println!("Before buying - buyer2 has {} Neuros",buyer2);
    	let seller2 = buyer2;
    	println!("Move of Neuro cryptocurrency - Seller2 receives {}",seller2);
	println!("This won't compile - After buying - buyer2 has {}",buyer2);
1520.4 Last line would fail with cargo run compile error explaining the reason for opting a move instead of copy (rustc --explain E0382) that points to how on-stack reference to heap currency held by buyer2 is moved to seller2 atomically invalidating copy of on-stack reference to heap currency held by buyer2:
error[E0382]: borrow of moved value: `buyer2`
  --> src/main.rs:12:66
   |
8  |     let buyer2 = String::from("ff20a894-a2c4-4002-ac39-93d053ea3020:100");
   |         ------ move occurs because `buyer2` has type `String`, which does not implement the `Copy` trait
9  |     println!("Before buying - buyer2 has {} Neuros",buyer2);
10 |     let seller2 = buyer2;
   |                   ------ value moved here
11 |     println!("Move of Neuro cryptocurrency - Seller2 receives {}",seller2);
12 |     println!("This won't compile - After buying - buyer2 has {}",buyer2);
   |                                                                  ^^^^^^ value borrowed here after move
   |
   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider cloning the value if the performance cost is acceptable
   |
10 |     let seller2 = buyer2.clone();
   |                         ++++++++

For more information about this error, try `rustc --explain E0382`.
error: could not compile `move_semantics` (bin "move_semantics") due to 1 previous error
1520.5 Above atomic move of currency in buy-sell is protected to be error-free by inherent design of Rust and is a prerequisite for singleton atomic buy-sell cryptocurrency transactions.
1520.6 It can be noted that primitive integer datatype assignments implicitly do a copy and not a move as gleaned from logs move_semantics/src/testlogs/neuro_move_semantics.log.30May2024:
	Before buying - buyer1 has 10 Neuros
	Seller1 receives 10 Neuros
	Copy of Neuro cryptocurrency - After buying - buyer1 has 10 Neuros

----------------------------------------------------------------------------------------------------------------------------
1593. (THEORY and FEATURE) Computational Geometric Factorization - High Performance Computing implementation for Supercomputers - Rayon Parallel iterator Rasterization or rectification of hyperbolic arc and Factor point location in Rust - multiple consecutive integers - Factorization of Factorial 12!=479001600, Static mutable global factors vector, Unsafe blocks and Set of unique factors through HashSet - related to 668,1383,1384,1385,1519 and all sections on Integer Factorization,Computational Geometry,Set Partitions-to-Tile Cover reduction by Lagranges Four Square Theorem and ILP,Primality Testing,RSA Semiprimes,Almost-Square Bounding Boxes in Large Scale Visual Recognition,Pell's Equation,Brahmagupta's Chakravala,Approximate Factoring by Newton-Raphson Rayshooting queries,Algebraic Geometry of Computational Geometric Factorization,Quantum computation and Derandomization of BQP Factorization by Condorcet Jury Theorem Majority-BQPVoterSAT boolean composition - 4 April 2025 
----------------------------------------------------------------------------------------------------------------------------
1593.1 course_material/Programming/Rust/rasterization/src/main.rs has been updated to use HashSet and iterator from std and a new static mutable factors i64 vector has been introduced having global scope. This static mutable has been guarded with unsafe blocks throughout wherever it is referenced.
1593.2 Function fn binary_search(num_fact:i64,xl:i64,yl:i64,xr:i64,yr:i64) does not return factors as it has been made global static mutable.
1593.3 Vector of factors with repetitions is cast to a HashSet of unique factors.
1593.4 Factorial 12!=479001600 has been factorized and full list of unique factors is output to rasterization/src/logs/rasterization.log.4April2025 
1593.5 It has to be observed that any factorial N! for N >= 2 is even and is trivially factorizable and any factorial N! for N >= 10 ends in atleast one 0 and is divisible by 2,3,5 and 7. On a related note GammaFunction(N+1)=N! for all positive integers N which has been used to derive average case sequential runtime for Computational Geometric Factorization in section 668.

References:
-----------
1593.5 RUST CUDA - https://github.com/rust-gpu/rust-cuda - NVIDIA GPU computing framework in Rust - Rust Rayon crate ParallelIterator and ParallelBridge primitives in earlier Rust implementation might have to be replaced by NVIDIA CUDA primitives for optimized execution on supercomputers 
1593.6 GPU model and NC-PRAM model comparison - The GPU Hardware and Software Model: The GPU is not a PRAM (but it’s not far off) - https://www.cs.ucdavis.edu/~amenta/f15/amenta-cuda.pdf - 5 points from slide on Wikipedia PRAM definition and GPU Truths
1593.7 Rust - unsafe blocks - https://doc.rust-lang.org/std/keyword.unsafe.html - Unsafe blocks relax stringent type safety and are necessary to make static variables mutable.

----------------------------------------------------------------------------------------------------------------------------
1622. (THEORY and FEATURE) Computational Geometric Factorization - High Performance Computing implementation for Supercomputers - factors of multiple consecutive integers and Greastest Common Divisor computation from intersection of HashSets of factors in a Vector - related to 668,1383,1384,1385,1519,1593 and all sections on Integer Factorization,Computational Geometry,Set Partitions-to-Tile Cover reduction by Lagranges Four Square Theorem and ILP,Primality Testing,RSA Semiprimes,Almost-Square Bounding Boxes in Large Scale Visual Recognition,Pell's Equation,Brahmagupta's Chakravala,Approximate Factoring by Newton-Raphson Rayshooting queries,Algebraic Geometry of Computational Geometric Factorization,Quantum computation and Derandomization of BQP Factorization by Condorcet Jury Theorem Majority-BQPVoterSAT boolean composition - 24 June 2025 
----------------------------------------------------------------------------------------------------------------------------
1622.1 course_material/Programming/Rust/rasterization/src/main.rs has been updated to use HashMap and to instantiate a static mutable global variable number2factors for storing HashSet of factors of all integers in a range.
1622.2 New function greatest_common_divisor() computes Greatest Common Divisor(GCD) from sorted intersection of factors of all integers factorized so far and cached within vector of hashsets "number2factors" in function rasterize_hyperbolic_arc(). 
1622.3 Lot of unsafe blocks have been introduced due to Rust compiler limitations in handling static mutable globals.
1622.4 Two additional commandline arguments have been introduced to obtain 2 integers for GCD computation (independent of earlier consecutive range factorization). Repetitive invocation of rasterize_hyperbolic_arc() populates global static mutable vector number2factors both within factorize_multipleintegers() and outside for GCD of arguments 4 and 5.  
1622.5 Five consecutive integers from 19292312 are factorized and GCD of 2 integers 20102912 and 1212008 is computed by commandline: cargo run 19292312 5 parallel 20102912 1212008 - Factors and GCD logged to logs/rasterization.log.GCD.24June2025

References:
----------
1622.6 Rust for GPUs - https://rust-gpu.github.io/ 
1622.7 CUDA toolkit interview - https://www.oho.us/blog/behind-the-code-an-interview-with-nicholas-wilt-cuda/
1622.8 CUML zero code change GPU acceleration for scikit-learn - https://developer.nvidia.com/blog/nvidia-cuml-brings-zero-code-change-acceleration-to-scikit-learn/
1622.9 Sorting is in NC1 - [Karthik Chandra] - https://cs.stanford.edu/~kach/nicks_class.pdf - Parallel Mergesort example - "... After an easy O(1) minutes spent grading all n psets, the poly(n) TAs broke into n teams of n each that compared their assigned psets pairwise, doing n^2 comparisons in another O(1) time. Finally, each team added their comparison bits hierarchically in O(log n) time and rearranged the assignments based on the resulting rankings. This was the hardest part, and they were done, all things considered, in O(log n) time ...." 
1622.10 Fast Set Intersection in Memory - https://arxiv.org/pdf/1103.2409 - ".... Set intersection is a fundamental operation in information retrieval and database systems. This paper introduces linear space data structures to represent sets such that their intersection can be computed in a worst-case efficient way. In general, given k (preprocessed) sets, with totally n elements, we will show how to compute their intersection in expected time O(n/√w + kr), where r is the intersection size and w is the number of bits in a machine-word. ...." - for intersection of 2 sets of N elements of logN bits machine-word this algorithm requires O(N/sqrt(logN) + 2r) time
1622.11 Number of factors of an integer from unique prime factorization - https://www.topcoder.com/thrive/articles/Prime%20Numbers,%20Factorization%20and%20Euler%20Function - ".... If n = p1^a1*p2^a2*...*pk^ak then the number of its positive divisors equals to (a1 + 1) * (a2 + 1) * … * (ak + 1) ...." - Proof: By considering each prime exponent as a bin of quantities pi^0,pi^1,pi^2,...,pi^ai, each prime bin contributes ai+1 factors independent of other bins and product of all (ai + 1) is the number of factors of n. It has to be noted that prime little omega and big omega functions - https://en.wikipedia.org/wiki/Prime_omega_function - are additive and do not directly express number of all possible factors while earlier derivation is multiplicative and is strictly greater than prime big omega (a1 + a2 + ... + ak). Time to compute intersection of set of factors of 2 integers is therefore O(a1*a2*...*ak) if intersection algorithm used is naive linear time.
1622.12 Divisor function d(n) - https://en.wikipedia.org/wiki/Divisor_function - OEIS - https://oeis.org/A000005 - "... If the canonical factorization of n into prime powers is Product p^e(p) then d(n) = Product (e(p) + 1) ... " - same as 1622.11
1622.13 Average order of an arithmetic function - https://en.wikipedia.org/wiki/Average_order_of_an_arithmetic_function - "... An average order of d(n), the number of divisors of n, is log n ..." - or Divisor function d(n) or number of factors of N is bounded by logN.
1622.14 Intersection algorithms - https://eugene-eeo.github.io/blog/intersection-algorithms.html - ".... Given two lists [T], the following algorithm finds the intersection (values common to both lists) in O(min(m, n)) time and O(min(m,n)) space provided that: The two lists are sorted.  T is orderable and comparable.  Both lists do not contain repeat elements....." 
1622.15 An Improved Parallel Algorithm for Integer GCD - [Benny Chor-Oded Goldreich] - https://www.wisdom.weizmann.ac.il/~oded/PDF/gcd.pdf - ".... We present a simple parallel algorithm for computing the greatest common divisor (gcd) of two n-bit integers in the Common version of the CRCW model of computation. The run-time of the algorithm in terms of bit operations is O(n/log n), using n ~+~ processors, where e is any positive constant...." - Earlier computational geometric factorization set intersection based GCD algorithm (Rust implementation) differs from computational geometric factorization plane sweep GCD algorithm (C++ implementation) described in section 1549 in NeuronRain AstroInfer repositories. Earlier implementation finds intersection and later sorts which is less efficient compared to sorting the set of factors of 2 integers and later finding intersection of the sorted sets. Total time required to find GCD of 2 integers by sorting followed by set intersection of their factors = Time for Factorization of 2 integers p and q (2*(logN)^k or in NCk) + Time for sorting the set of factors (in NC1 from 1622.9) + Time for finding intersection of 2 sorted sets of maximum size logN in linear time (O(logN) from 1622.14) which together amount to a polylogarithmic time parallel computational geometric algorithm in NC for GCD.
1622.16 Question from IIT-JEE 1978 related to 1622.11 - "... A box contains 2 black, 4 white and 3 red balls. One ball is drawn at random from the box and kept aside. From remaining balls in the box, another balls is drawn at random and kept beside the first. This process is repeated till all the balls are drawn from the box. Find the probability that the balls drawn are in the sequence of 2 black, 4 white and 3 red ..." - each prime exponent bin in unique factorization n=p1^a1*p2^a2*...*pk^ak could be considered as colored by respective prime and factors are the products of randomly chosen (ai+1) colored balls pi^0,pi^1,pi^2,...,pi^ai from each prime bin pi. 
1622.17 Average order of Divisor Function -  Sigma_0_(N) - https://www.numberanalytics.com/blog/ultimate-guide-divisor-function-multiplicative-number-theory#:~:text=Average%20order%3A%20The%20average%20order,is%20the%20Euler%2DMascheroni%20constant. - ".... Average order: The average order of the divisor function is known to be log n + 2 γ − 1 , where γ is the Euler-Mascheroni constant. ..."
1622.18 Dirichlet Theorm for Average order of Divisor Function as logN - Theorem 10.3 - https://people.maths.bris.ac.uk/~madjp/Teaching/lecture10_11.pdf
1622.19 Ramanujan's Formula for Divisor Function - https://mathworld.wolfram.com/DivisorFunction.html - Equation 27
